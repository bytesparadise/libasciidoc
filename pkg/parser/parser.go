// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/bytesparadise/libasciidoc/pkg/types"

	log "github.com/sirupsen/logrus"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "DocumentRawLine",
			pos:  position{line: 25, col: 1, offset: 440},
			expr: &actionExpr{
				pos: position{line: 27, col: 5, offset: 497},
				run: (*parser).callonDocumentRawLine1,
				expr: &seqExpr{
					pos: position{line: 27, col: 5, offset: 497},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 27, col: 5, offset: 497},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 28, col: 9, offset: 515},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 28, col: 9, offset: 515},
										name: "AttributeDeclaration",
									},
									&actionExpr{
										pos: position{line: 364, col: 19, offset: 11171},
										run: (*parser).callonDocumentRawLine6,
										expr: &seqExpr{
											pos: position{line: 364, col: 19, offset: 11171},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 364, col: 19, offset: 11171},
													val:        ":!",
													ignoreCase: false,
													want:       "\":!\"",
												},
												&labeledExpr{
													pos:   position{line: 364, col: 24, offset: 11176},
													label: "name",
													expr: &actionExpr{
														pos: position{line: 324, col: 18, offset: 10072},
														run: (*parser).callonDocumentRawLine10,
														expr: &seqExpr{
															pos: position{line: 324, col: 18, offset: 10072},
															exprs: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 324, col: 18, offset: 10072},
																	val:        "[_0-9\\pL]",
																	chars:      []rune{'_'},
																	ranges:     []rune{'0', '9'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
																&zeroOrMoreExpr{
																	pos: position{line: 324, col: 28, offset: 10082},
																	expr: &charClassMatcher{
																		pos:        position{line: 324, col: 29, offset: 10083},
																		val:        "[-0-9\\pL]",
																		chars:      []rune{'-'},
																		ranges:     []rune{'0', '9'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 364, col: 45, offset: 11197},
													val:        ":",
													ignoreCase: false,
													want:       "\":\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 364, col: 49, offset: 11201},
													expr: &actionExpr{
														pos: position{line: 3080, col: 10, offset: 100200},
														run: (*parser).callonDocumentRawLine17,
														expr: &charClassMatcher{
															pos:        position{line: 3080, col: 11, offset: 100201},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&choiceExpr{
													pos: position{line: 3096, col: 8, offset: 100524},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 3089, col: 12, offset: 100384},
															run: (*parser).callonDocumentRawLine20,
															expr: &choiceExpr{
																pos: position{line: 3089, col: 13, offset: 100385},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 3089, col: 13, offset: 100385},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 3089, col: 20, offset: 100392},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 3089, col: 29, offset: 100401},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 3093, col: 8, offset: 100474},
															expr: &anyMatcher{
																line: 3093, col: 9, offset: 100475,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 366, col: 9, offset: 11292},
										run: (*parser).callonDocumentRawLine27,
										expr: &seqExpr{
											pos: position{line: 366, col: 9, offset: 11292},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 366, col: 9, offset: 11292},
													val:        ":",
													ignoreCase: false,
													want:       "\":\"",
												},
												&labeledExpr{
													pos:   position{line: 366, col: 13, offset: 11296},
													label: "name",
													expr: &actionExpr{
														pos: position{line: 324, col: 18, offset: 10072},
														run: (*parser).callonDocumentRawLine31,
														expr: &seqExpr{
															pos: position{line: 324, col: 18, offset: 10072},
															exprs: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 324, col: 18, offset: 10072},
																	val:        "[_0-9\\pL]",
																	chars:      []rune{'_'},
																	ranges:     []rune{'0', '9'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
																&zeroOrMoreExpr{
																	pos: position{line: 324, col: 28, offset: 10082},
																	expr: &charClassMatcher{
																		pos:        position{line: 324, col: 29, offset: 10083},
																		val:        "[-0-9\\pL]",
																		chars:      []rune{'-'},
																		ranges:     []rune{'0', '9'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 366, col: 34, offset: 11317},
													val:        "!:",
													ignoreCase: false,
													want:       "\"!:\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 366, col: 39, offset: 11322},
													expr: &actionExpr{
														pos: position{line: 3080, col: 10, offset: 100200},
														run: (*parser).callonDocumentRawLine38,
														expr: &charClassMatcher{
															pos:        position{line: 3080, col: 11, offset: 100201},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&choiceExpr{
													pos: position{line: 3096, col: 8, offset: 100524},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 3089, col: 12, offset: 100384},
															run: (*parser).callonDocumentRawLine41,
															expr: &choiceExpr{
																pos: position{line: 3089, col: 13, offset: 100385},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 3089, col: 13, offset: 100385},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 3089, col: 20, offset: 100392},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 3089, col: 29, offset: 100401},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 3093, col: 8, offset: 100474},
															expr: &anyMatcher{
																line: 3093, col: 9, offset: 100475,
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 30, col: 11, offset: 571},
										name: "FileInclusion",
									},
									&actionExpr{
										pos: position{line: 71, col: 10, offset: 1773},
										run: (*parser).callonDocumentRawLine49,
										expr: &seqExpr{
											pos: position{line: 71, col: 10, offset: 1773},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 71, col: 10, offset: 1773},
													val:        "ifdef::",
													ignoreCase: false,
													want:       "\"ifdef::\"",
												},
												&labeledExpr{
													pos:   position{line: 71, col: 20, offset: 1783},
													label: "name",
													expr: &actionExpr{
														pos: position{line: 128, col: 28, offset: 3562},
														run: (*parser).callonDocumentRawLine53,
														expr: &oneOrMoreExpr{
															pos: position{line: 128, col: 28, offset: 3562},
															expr: &charClassMatcher{
																pos:        position{line: 128, col: 28, offset: 3562},
																val:        "[^\\r\\n []",
																chars:      []rune{'\r', '\n', ' ', '['},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 71, col: 51, offset: 1814},
													val:        "[",
													ignoreCase: false,
													want:       "\"[\"",
												},
												&labeledExpr{
													pos:   position{line: 71, col: 55, offset: 1818},
													label: "attr",
													expr: &zeroOrOneExpr{
														pos: position{line: 71, col: 60, offset: 1823},
														expr: &actionExpr{
															pos: position{line: 79, col: 34, offset: 2152},
															run: (*parser).callonDocumentRawLine59,
															expr: &oneOrMoreExpr{
																pos: position{line: 79, col: 34, offset: 2152},
																expr: &charClassMatcher{
																	pos:        position{line: 79, col: 34, offset: 2152},
																	val:        "[^\\r\\n]]",
																	chars:      []rune{'\r', '\n', ']'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 71, col: 93, offset: 1856},
													val:        "]",
													ignoreCase: false,
													want:       "\"]\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 71, col: 97, offset: 1860},
													expr: &actionExpr{
														pos: position{line: 3080, col: 10, offset: 100200},
														run: (*parser).callonDocumentRawLine64,
														expr: &charClassMatcher{
															pos:        position{line: 3080, col: 11, offset: 100201},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&notExpr{
													pos: position{line: 3093, col: 8, offset: 100474},
													expr: &anyMatcher{
														line: 3093, col: 9, offset: 100475,
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 75, col: 11, offset: 1950},
										run: (*parser).callonDocumentRawLine68,
										expr: &seqExpr{
											pos: position{line: 75, col: 11, offset: 1950},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 75, col: 11, offset: 1950},
													val:        "ifndef::",
													ignoreCase: false,
													want:       "\"ifndef::\"",
												},
												&labeledExpr{
													pos:   position{line: 75, col: 22, offset: 1961},
													label: "name",
													expr: &actionExpr{
														pos: position{line: 128, col: 28, offset: 3562},
														run: (*parser).callonDocumentRawLine72,
														expr: &oneOrMoreExpr{
															pos: position{line: 128, col: 28, offset: 3562},
															expr: &charClassMatcher{
																pos:        position{line: 128, col: 28, offset: 3562},
																val:        "[^\\r\\n []",
																chars:      []rune{'\r', '\n', ' ', '['},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 75, col: 53, offset: 1992},
													val:        "[",
													ignoreCase: false,
													want:       "\"[\"",
												},
												&labeledExpr{
													pos:   position{line: 75, col: 57, offset: 1996},
													label: "attr",
													expr: &zeroOrOneExpr{
														pos: position{line: 75, col: 62, offset: 2001},
														expr: &actionExpr{
															pos: position{line: 79, col: 34, offset: 2152},
															run: (*parser).callonDocumentRawLine78,
															expr: &oneOrMoreExpr{
																pos: position{line: 79, col: 34, offset: 2152},
																expr: &charClassMatcher{
																	pos:        position{line: 79, col: 34, offset: 2152},
																	val:        "[^\\r\\n]]",
																	chars:      []rune{'\r', '\n', ']'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 75, col: 95, offset: 2034},
													val:        "]",
													ignoreCase: false,
													want:       "\"]\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 75, col: 99, offset: 2038},
													expr: &actionExpr{
														pos: position{line: 3080, col: 10, offset: 100200},
														run: (*parser).callonDocumentRawLine83,
														expr: &charClassMatcher{
															pos:        position{line: 3080, col: 11, offset: 100201},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&notExpr{
													pos: position{line: 3093, col: 8, offset: 100474},
													expr: &anyMatcher{
														line: 3093, col: 9, offset: 100475,
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 83, col: 11, offset: 2217},
										run: (*parser).callonDocumentRawLine87,
										expr: &seqExpr{
											pos: position{line: 83, col: 11, offset: 2217},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 83, col: 11, offset: 2217},
													val:        "ifeval::[",
													ignoreCase: false,
													want:       "\"ifeval::[\"",
												},
												&labeledExpr{
													pos:   position{line: 85, col: 5, offset: 2242},
													label: "left",
													expr: &choiceExpr{
														pos: position{line: 93, col: 5, offset: 2505},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 93, col: 6, offset: 2506},
																run: (*parser).callonDocumentRawLine92,
																expr: &seqExpr{
																	pos: position{line: 93, col: 6, offset: 2506},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 93, col: 6, offset: 2506},
																			val:        "\"",
																			ignoreCase: false,
																			want:       "\"\\\"\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 93, col: 11, offset: 2511},
																			label: "s",
																			expr: &choiceExpr{
																				pos: position{line: 657, col: 5, offset: 21090},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 657, col: 5, offset: 21090},
																						run: (*parser).callonDocumentRawLine97,
																						expr: &seqExpr{
																							pos: position{line: 657, col: 5, offset: 21090},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 657, col: 5, offset: 21090},
																									val:        "\\{",
																									ignoreCase: false,
																									want:       "\"\\\\{\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 657, col: 13, offset: 21098},
																									label: "name",
																									expr: &actionExpr{
																										pos: position{line: 324, col: 18, offset: 10072},
																										run: (*parser).callonDocumentRawLine101,
																										expr: &seqExpr{
																											pos: position{line: 324, col: 18, offset: 10072},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 324, col: 18, offset: 10072},
																													val:        "[_0-9\\pL]",
																													chars:      []rune{'_'},
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 324, col: 28, offset: 10082},
																													expr: &charClassMatcher{
																														pos:        position{line: 324, col: 29, offset: 10083},
																														val:        "[-0-9\\pL]",
																														chars:      []rune{'-'},
																														ranges:     []rune{'0', '9'},
																														classes:    []*unicode.RangeTable{rangeTable("L")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 657, col: 32, offset: 21117},
																									val:        "}",
																									ignoreCase: false,
																									want:       "\"}\"",
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 664, col: 5, offset: 21358},
																						run: (*parser).callonDocumentRawLine107,
																						expr: &seqExpr{
																							pos: position{line: 664, col: 5, offset: 21358},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 664, col: 5, offset: 21358},
																									val:        "{",
																									ignoreCase: false,
																									want:       "\"{\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 664, col: 9, offset: 21362},
																									label: "name",
																									expr: &actionExpr{
																										pos: position{line: 324, col: 18, offset: 10072},
																										run: (*parser).callonDocumentRawLine111,
																										expr: &seqExpr{
																											pos: position{line: 324, col: 18, offset: 10072},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 324, col: 18, offset: 10072},
																													val:        "[_0-9\\pL]",
																													chars:      []rune{'_'},
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 324, col: 28, offset: 10082},
																													expr: &charClassMatcher{
																														pos:        position{line: 324, col: 29, offset: 10083},
																														val:        "[-0-9\\pL]",
																														chars:      []rune{'-'},
																														ranges:     []rune{'0', '9'},
																														classes:    []*unicode.RangeTable{rangeTable("L")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 664, col: 28, offset: 21381},
																									val:        "}",
																									ignoreCase: false,
																									want:       "\"}\"",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 93, col: 39, offset: 2539},
																			val:        "\"",
																			ignoreCase: false,
																			want:       "\"\\\"\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 94, col: 8, offset: 2570},
																run: (*parser).callonDocumentRawLine118,
																expr: &seqExpr{
																	pos: position{line: 94, col: 8, offset: 2570},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 94, col: 8, offset: 2570},
																			val:        "'",
																			ignoreCase: false,
																			want:       "\"'\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 94, col: 12, offset: 2574},
																			label: "s",
																			expr: &choiceExpr{
																				pos: position{line: 657, col: 5, offset: 21090},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 657, col: 5, offset: 21090},
																						run: (*parser).callonDocumentRawLine123,
																						expr: &seqExpr{
																							pos: position{line: 657, col: 5, offset: 21090},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 657, col: 5, offset: 21090},
																									val:        "\\{",
																									ignoreCase: false,
																									want:       "\"\\\\{\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 657, col: 13, offset: 21098},
																									label: "name",
																									expr: &actionExpr{
																										pos: position{line: 324, col: 18, offset: 10072},
																										run: (*parser).callonDocumentRawLine127,
																										expr: &seqExpr{
																											pos: position{line: 324, col: 18, offset: 10072},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 324, col: 18, offset: 10072},
																													val:        "[_0-9\\pL]",
																													chars:      []rune{'_'},
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 324, col: 28, offset: 10082},
																													expr: &charClassMatcher{
																														pos:        position{line: 324, col: 29, offset: 10083},
																														val:        "[-0-9\\pL]",
																														chars:      []rune{'-'},
																														ranges:     []rune{'0', '9'},
																														classes:    []*unicode.RangeTable{rangeTable("L")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 657, col: 32, offset: 21117},
																									val:        "}",
																									ignoreCase: false,
																									want:       "\"}\"",
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 664, col: 5, offset: 21358},
																						run: (*parser).callonDocumentRawLine133,
																						expr: &seqExpr{
																							pos: position{line: 664, col: 5, offset: 21358},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 664, col: 5, offset: 21358},
																									val:        "{",
																									ignoreCase: false,
																									want:       "\"{\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 664, col: 9, offset: 21362},
																									label: "name",
																									expr: &actionExpr{
																										pos: position{line: 324, col: 18, offset: 10072},
																										run: (*parser).callonDocumentRawLine137,
																										expr: &seqExpr{
																											pos: position{line: 324, col: 18, offset: 10072},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 324, col: 18, offset: 10072},
																													val:        "[_0-9\\pL]",
																													chars:      []rune{'_'},
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 324, col: 28, offset: 10082},
																													expr: &charClassMatcher{
																														pos:        position{line: 324, col: 29, offset: 10083},
																														val:        "[-0-9\\pL]",
																														chars:      []rune{'-'},
																														ranges:     []rune{'0', '9'},
																														classes:    []*unicode.RangeTable{rangeTable("L")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 664, col: 28, offset: 21381},
																									val:        "}",
																									ignoreCase: false,
																									want:       "\"}\"",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 94, col: 40, offset: 2602},
																			val:        "'",
																			ignoreCase: false,
																			want:       "\"'\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 95, col: 8, offset: 2632},
																run: (*parser).callonDocumentRawLine144,
																expr: &labeledExpr{
																	pos:   position{line: 95, col: 8, offset: 2632},
																	label: "s",
																	expr: &choiceExpr{
																		pos: position{line: 657, col: 5, offset: 21090},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 657, col: 5, offset: 21090},
																				run: (*parser).callonDocumentRawLine147,
																				expr: &seqExpr{
																					pos: position{line: 657, col: 5, offset: 21090},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 657, col: 5, offset: 21090},
																							val:        "\\{",
																							ignoreCase: false,
																							want:       "\"\\\\{\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 657, col: 13, offset: 21098},
																							label: "name",
																							expr: &actionExpr{
																								pos: position{line: 324, col: 18, offset: 10072},
																								run: (*parser).callonDocumentRawLine151,
																								expr: &seqExpr{
																									pos: position{line: 324, col: 18, offset: 10072},
																									exprs: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 324, col: 18, offset: 10072},
																											val:        "[_0-9\\pL]",
																											chars:      []rune{'_'},
																											ranges:     []rune{'0', '9'},
																											classes:    []*unicode.RangeTable{rangeTable("L")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 324, col: 28, offset: 10082},
																											expr: &charClassMatcher{
																												pos:        position{line: 324, col: 29, offset: 10083},
																												val:        "[-0-9\\pL]",
																												chars:      []rune{'-'},
																												ranges:     []rune{'0', '9'},
																												classes:    []*unicode.RangeTable{rangeTable("L")},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 657, col: 32, offset: 21117},
																							val:        "}",
																							ignoreCase: false,
																							want:       "\"}\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 664, col: 5, offset: 21358},
																				run: (*parser).callonDocumentRawLine157,
																				expr: &seqExpr{
																					pos: position{line: 664, col: 5, offset: 21358},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 664, col: 5, offset: 21358},
																							val:        "{",
																							ignoreCase: false,
																							want:       "\"{\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 664, col: 9, offset: 21362},
																							label: "name",
																							expr: &actionExpr{
																								pos: position{line: 324, col: 18, offset: 10072},
																								run: (*parser).callonDocumentRawLine161,
																								expr: &seqExpr{
																									pos: position{line: 324, col: 18, offset: 10072},
																									exprs: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 324, col: 18, offset: 10072},
																											val:        "[_0-9\\pL]",
																											chars:      []rune{'_'},
																											ranges:     []rune{'0', '9'},
																											classes:    []*unicode.RangeTable{rangeTable("L")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 324, col: 28, offset: 10082},
																											expr: &charClassMatcher{
																												pos:        position{line: 324, col: 29, offset: 10083},
																												val:        "[-0-9\\pL]",
																												chars:      []rune{'-'},
																												ranges:     []rune{'0', '9'},
																												classes:    []*unicode.RangeTable{rangeTable("L")},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 664, col: 28, offset: 21381},
																							val:        "}",
																							ignoreCase: false,
																							want:       "\"}\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 96, col: 8, offset: 2686},
																run: (*parser).callonDocumentRawLine167,
																expr: &seqExpr{
																	pos: position{line: 96, col: 8, offset: 2686},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 96, col: 8, offset: 2686},
																			val:        "\"",
																			ignoreCase: false,
																			want:       "\"\\\"\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 96, col: 13, offset: 2691},
																			label: "w",
																			expr: &actionExpr{
																				pos: position{line: 96, col: 16, offset: 2694},
																				run: (*parser).callonDocumentRawLine171,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 96, col: 16, offset: 2694},
																					expr: &charClassMatcher{
																						pos:        position{line: 96, col: 16, offset: 2694},
																						val:        "[,?!;_-0-9\\pL]",
																						chars:      []rune{',', '?', '!', ';', '_', '-'},
																						ranges:     []rune{'0', '9'},
																						classes:    []*unicode.RangeTable{rangeTable("L")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 96, col: 63, offset: 2741},
																			val:        "\"",
																			ignoreCase: false,
																			want:       "\"\\\"\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 97, col: 8, offset: 2772},
																run: (*parser).callonDocumentRawLine175,
																expr: &seqExpr{
																	pos: position{line: 97, col: 8, offset: 2772},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 97, col: 8, offset: 2772},
																			val:        "'",
																			ignoreCase: false,
																			want:       "\"'\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 97, col: 12, offset: 2776},
																			label: "w",
																			expr: &actionExpr{
																				pos: position{line: 97, col: 15, offset: 2779},
																				run: (*parser).callonDocumentRawLine179,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 97, col: 15, offset: 2779},
																					expr: &charClassMatcher{
																						pos:        position{line: 97, col: 15, offset: 2779},
																						val:        "[,?!;_-0-9\\pL]",
																						chars:      []rune{',', '?', '!', ';', '_', '-'},
																						ranges:     []rune{'0', '9'},
																						classes:    []*unicode.RangeTable{rangeTable("L")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 97, col: 62, offset: 2826},
																			val:        "'",
																			ignoreCase: false,
																			want:       "\"'\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 3072, col: 12, offset: 100027},
																run: (*parser).callonDocumentRawLine183,
																expr: &seqExpr{
																	pos: position{line: 3072, col: 13, offset: 100028},
																	exprs: []interface{}{
																		&zeroOrOneExpr{
																			pos: position{line: 3072, col: 13, offset: 100028},
																			expr: &litMatcher{
																				pos:        position{line: 3072, col: 13, offset: 100028},
																				val:        "-",
																				ignoreCase: false,
																				want:       "\"-\"",
																			},
																		},
																		&oneOrMoreExpr{
																			pos: position{line: 3072, col: 18, offset: 100033},
																			expr: &charClassMatcher{
																				pos:        position{line: 3072, col: 18, offset: 100033},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&zeroOrMoreExpr{
													pos: position{line: 85, col: 35, offset: 2272},
													expr: &actionExpr{
														pos: position{line: 3080, col: 10, offset: 100200},
														run: (*parser).callonDocumentRawLine190,
														expr: &charClassMatcher{
															pos:        position{line: 3080, col: 11, offset: 100201},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 86, col: 5, offset: 2284},
													label: "operand",
													expr: &choiceExpr{
														pos: position{line: 101, col: 5, offset: 2895},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 101, col: 6, offset: 2896},
																run: (*parser).callonDocumentRawLine194,
																expr: &litMatcher{
																	pos:        position{line: 101, col: 6, offset: 2896},
																	val:        "==",
																	ignoreCase: false,
																	want:       "\"==\"",
																},
															},
															&actionExpr{
																pos: position{line: 104, col: 8, offset: 2956},
																run: (*parser).callonDocumentRawLine196,
																expr: &litMatcher{
																	pos:        position{line: 104, col: 8, offset: 2956},
																	val:        "!=",
																	ignoreCase: false,
																	want:       "\"!=\"",
																},
															},
															&actionExpr{
																pos: position{line: 107, col: 8, offset: 3019},
																run: (*parser).callonDocumentRawLine198,
																expr: &litMatcher{
																	pos:        position{line: 107, col: 8, offset: 3019},
																	val:        "<",
																	ignoreCase: false,
																	want:       "\"<\"",
																},
															},
															&actionExpr{
																pos: position{line: 110, col: 8, offset: 3081},
																run: (*parser).callonDocumentRawLine200,
																expr: &litMatcher{
																	pos:        position{line: 110, col: 8, offset: 3081},
																	val:        "<=",
																	ignoreCase: false,
																	want:       "\"<=\"",
																},
															},
															&actionExpr{
																pos: position{line: 113, col: 8, offset: 3147},
																run: (*parser).callonDocumentRawLine202,
																expr: &litMatcher{
																	pos:        position{line: 113, col: 8, offset: 3147},
																	val:        ">",
																	ignoreCase: false,
																	want:       "\">\"",
																},
															},
															&actionExpr{
																pos: position{line: 116, col: 8, offset: 3212},
																run: (*parser).callonDocumentRawLine204,
																expr: &litMatcher{
																	pos:        position{line: 116, col: 8, offset: 3212},
																	val:        ">=",
																	ignoreCase: false,
																	want:       "\">=\"",
																},
															},
														},
													},
												},
												&zeroOrMoreExpr{
													pos: position{line: 86, col: 39, offset: 2318},
													expr: &actionExpr{
														pos: position{line: 3080, col: 10, offset: 100200},
														run: (*parser).callonDocumentRawLine207,
														expr: &charClassMatcher{
															pos:        position{line: 3080, col: 11, offset: 100201},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 87, col: 5, offset: 2330},
													label: "right",
													expr: &choiceExpr{
														pos: position{line: 93, col: 5, offset: 2505},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 93, col: 6, offset: 2506},
																run: (*parser).callonDocumentRawLine211,
																expr: &seqExpr{
																	pos: position{line: 93, col: 6, offset: 2506},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 93, col: 6, offset: 2506},
																			val:        "\"",
																			ignoreCase: false,
																			want:       "\"\\\"\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 93, col: 11, offset: 2511},
																			label: "s",
																			expr: &choiceExpr{
																				pos: position{line: 657, col: 5, offset: 21090},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 657, col: 5, offset: 21090},
																						run: (*parser).callonDocumentRawLine216,
																						expr: &seqExpr{
																							pos: position{line: 657, col: 5, offset: 21090},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 657, col: 5, offset: 21090},
																									val:        "\\{",
																									ignoreCase: false,
																									want:       "\"\\\\{\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 657, col: 13, offset: 21098},
																									label: "name",
																									expr: &actionExpr{
																										pos: position{line: 324, col: 18, offset: 10072},
																										run: (*parser).callonDocumentRawLine220,
																										expr: &seqExpr{
																											pos: position{line: 324, col: 18, offset: 10072},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 324, col: 18, offset: 10072},
																													val:        "[_0-9\\pL]",
																													chars:      []rune{'_'},
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 324, col: 28, offset: 10082},
																													expr: &charClassMatcher{
																														pos:        position{line: 324, col: 29, offset: 10083},
																														val:        "[-0-9\\pL]",
																														chars:      []rune{'-'},
																														ranges:     []rune{'0', '9'},
																														classes:    []*unicode.RangeTable{rangeTable("L")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 657, col: 32, offset: 21117},
																									val:        "}",
																									ignoreCase: false,
																									want:       "\"}\"",
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 664, col: 5, offset: 21358},
																						run: (*parser).callonDocumentRawLine226,
																						expr: &seqExpr{
																							pos: position{line: 664, col: 5, offset: 21358},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 664, col: 5, offset: 21358},
																									val:        "{",
																									ignoreCase: false,
																									want:       "\"{\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 664, col: 9, offset: 21362},
																									label: "name",
																									expr: &actionExpr{
																										pos: position{line: 324, col: 18, offset: 10072},
																										run: (*parser).callonDocumentRawLine230,
																										expr: &seqExpr{
																											pos: position{line: 324, col: 18, offset: 10072},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 324, col: 18, offset: 10072},
																													val:        "[_0-9\\pL]",
																													chars:      []rune{'_'},
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 324, col: 28, offset: 10082},
																													expr: &charClassMatcher{
																														pos:        position{line: 324, col: 29, offset: 10083},
																														val:        "[-0-9\\pL]",
																														chars:      []rune{'-'},
																														ranges:     []rune{'0', '9'},
																														classes:    []*unicode.RangeTable{rangeTable("L")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 664, col: 28, offset: 21381},
																									val:        "}",
																									ignoreCase: false,
																									want:       "\"}\"",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 93, col: 39, offset: 2539},
																			val:        "\"",
																			ignoreCase: false,
																			want:       "\"\\\"\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 94, col: 8, offset: 2570},
																run: (*parser).callonDocumentRawLine237,
																expr: &seqExpr{
																	pos: position{line: 94, col: 8, offset: 2570},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 94, col: 8, offset: 2570},
																			val:        "'",
																			ignoreCase: false,
																			want:       "\"'\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 94, col: 12, offset: 2574},
																			label: "s",
																			expr: &choiceExpr{
																				pos: position{line: 657, col: 5, offset: 21090},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 657, col: 5, offset: 21090},
																						run: (*parser).callonDocumentRawLine242,
																						expr: &seqExpr{
																							pos: position{line: 657, col: 5, offset: 21090},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 657, col: 5, offset: 21090},
																									val:        "\\{",
																									ignoreCase: false,
																									want:       "\"\\\\{\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 657, col: 13, offset: 21098},
																									label: "name",
																									expr: &actionExpr{
																										pos: position{line: 324, col: 18, offset: 10072},
																										run: (*parser).callonDocumentRawLine246,
																										expr: &seqExpr{
																											pos: position{line: 324, col: 18, offset: 10072},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 324, col: 18, offset: 10072},
																													val:        "[_0-9\\pL]",
																													chars:      []rune{'_'},
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 324, col: 28, offset: 10082},
																													expr: &charClassMatcher{
																														pos:        position{line: 324, col: 29, offset: 10083},
																														val:        "[-0-9\\pL]",
																														chars:      []rune{'-'},
																														ranges:     []rune{'0', '9'},
																														classes:    []*unicode.RangeTable{rangeTable("L")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 657, col: 32, offset: 21117},
																									val:        "}",
																									ignoreCase: false,
																									want:       "\"}\"",
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 664, col: 5, offset: 21358},
																						run: (*parser).callonDocumentRawLine252,
																						expr: &seqExpr{
																							pos: position{line: 664, col: 5, offset: 21358},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 664, col: 5, offset: 21358},
																									val:        "{",
																									ignoreCase: false,
																									want:       "\"{\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 664, col: 9, offset: 21362},
																									label: "name",
																									expr: &actionExpr{
																										pos: position{line: 324, col: 18, offset: 10072},
																										run: (*parser).callonDocumentRawLine256,
																										expr: &seqExpr{
																											pos: position{line: 324, col: 18, offset: 10072},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 324, col: 18, offset: 10072},
																													val:        "[_0-9\\pL]",
																													chars:      []rune{'_'},
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 324, col: 28, offset: 10082},
																													expr: &charClassMatcher{
																														pos:        position{line: 324, col: 29, offset: 10083},
																														val:        "[-0-9\\pL]",
																														chars:      []rune{'-'},
																														ranges:     []rune{'0', '9'},
																														classes:    []*unicode.RangeTable{rangeTable("L")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 664, col: 28, offset: 21381},
																									val:        "}",
																									ignoreCase: false,
																									want:       "\"}\"",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 94, col: 40, offset: 2602},
																			val:        "'",
																			ignoreCase: false,
																			want:       "\"'\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 95, col: 8, offset: 2632},
																run: (*parser).callonDocumentRawLine263,
																expr: &labeledExpr{
																	pos:   position{line: 95, col: 8, offset: 2632},
																	label: "s",
																	expr: &choiceExpr{
																		pos: position{line: 657, col: 5, offset: 21090},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 657, col: 5, offset: 21090},
																				run: (*parser).callonDocumentRawLine266,
																				expr: &seqExpr{
																					pos: position{line: 657, col: 5, offset: 21090},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 657, col: 5, offset: 21090},
																							val:        "\\{",
																							ignoreCase: false,
																							want:       "\"\\\\{\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 657, col: 13, offset: 21098},
																							label: "name",
																							expr: &actionExpr{
																								pos: position{line: 324, col: 18, offset: 10072},
																								run: (*parser).callonDocumentRawLine270,
																								expr: &seqExpr{
																									pos: position{line: 324, col: 18, offset: 10072},
																									exprs: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 324, col: 18, offset: 10072},
																											val:        "[_0-9\\pL]",
																											chars:      []rune{'_'},
																											ranges:     []rune{'0', '9'},
																											classes:    []*unicode.RangeTable{rangeTable("L")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 324, col: 28, offset: 10082},
																											expr: &charClassMatcher{
																												pos:        position{line: 324, col: 29, offset: 10083},
																												val:        "[-0-9\\pL]",
																												chars:      []rune{'-'},
																												ranges:     []rune{'0', '9'},
																												classes:    []*unicode.RangeTable{rangeTable("L")},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 657, col: 32, offset: 21117},
																							val:        "}",
																							ignoreCase: false,
																							want:       "\"}\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 664, col: 5, offset: 21358},
																				run: (*parser).callonDocumentRawLine276,
																				expr: &seqExpr{
																					pos: position{line: 664, col: 5, offset: 21358},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 664, col: 5, offset: 21358},
																							val:        "{",
																							ignoreCase: false,
																							want:       "\"{\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 664, col: 9, offset: 21362},
																							label: "name",
																							expr: &actionExpr{
																								pos: position{line: 324, col: 18, offset: 10072},
																								run: (*parser).callonDocumentRawLine280,
																								expr: &seqExpr{
																									pos: position{line: 324, col: 18, offset: 10072},
																									exprs: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 324, col: 18, offset: 10072},
																											val:        "[_0-9\\pL]",
																											chars:      []rune{'_'},
																											ranges:     []rune{'0', '9'},
																											classes:    []*unicode.RangeTable{rangeTable("L")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 324, col: 28, offset: 10082},
																											expr: &charClassMatcher{
																												pos:        position{line: 324, col: 29, offset: 10083},
																												val:        "[-0-9\\pL]",
																												chars:      []rune{'-'},
																												ranges:     []rune{'0', '9'},
																												classes:    []*unicode.RangeTable{rangeTable("L")},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 664, col: 28, offset: 21381},
																							val:        "}",
																							ignoreCase: false,
																							want:       "\"}\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 96, col: 8, offset: 2686},
																run: (*parser).callonDocumentRawLine286,
																expr: &seqExpr{
																	pos: position{line: 96, col: 8, offset: 2686},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 96, col: 8, offset: 2686},
																			val:        "\"",
																			ignoreCase: false,
																			want:       "\"\\\"\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 96, col: 13, offset: 2691},
																			label: "w",
																			expr: &actionExpr{
																				pos: position{line: 96, col: 16, offset: 2694},
																				run: (*parser).callonDocumentRawLine290,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 96, col: 16, offset: 2694},
																					expr: &charClassMatcher{
																						pos:        position{line: 96, col: 16, offset: 2694},
																						val:        "[,?!;_-0-9\\pL]",
																						chars:      []rune{',', '?', '!', ';', '_', '-'},
																						ranges:     []rune{'0', '9'},
																						classes:    []*unicode.RangeTable{rangeTable("L")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 96, col: 63, offset: 2741},
																			val:        "\"",
																			ignoreCase: false,
																			want:       "\"\\\"\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 97, col: 8, offset: 2772},
																run: (*parser).callonDocumentRawLine294,
																expr: &seqExpr{
																	pos: position{line: 97, col: 8, offset: 2772},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 97, col: 8, offset: 2772},
																			val:        "'",
																			ignoreCase: false,
																			want:       "\"'\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 97, col: 12, offset: 2776},
																			label: "w",
																			expr: &actionExpr{
																				pos: position{line: 97, col: 15, offset: 2779},
																				run: (*parser).callonDocumentRawLine298,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 97, col: 15, offset: 2779},
																					expr: &charClassMatcher{
																						pos:        position{line: 97, col: 15, offset: 2779},
																						val:        "[,?!;_-0-9\\pL]",
																						chars:      []rune{',', '?', '!', ';', '_', '-'},
																						ranges:     []rune{'0', '9'},
																						classes:    []*unicode.RangeTable{rangeTable("L")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 97, col: 62, offset: 2826},
																			val:        "'",
																			ignoreCase: false,
																			want:       "\"'\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 3072, col: 12, offset: 100027},
																run: (*parser).callonDocumentRawLine302,
																expr: &seqExpr{
																	pos: position{line: 3072, col: 13, offset: 100028},
																	exprs: []interface{}{
																		&zeroOrOneExpr{
																			pos: position{line: 3072, col: 13, offset: 100028},
																			expr: &litMatcher{
																				pos:        position{line: 3072, col: 13, offset: 100028},
																				val:        "-",
																				ignoreCase: false,
																				want:       "\"-\"",
																			},
																		},
																		&oneOrMoreExpr{
																			pos: position{line: 3072, col: 18, offset: 100033},
																			expr: &charClassMatcher{
																				pos:        position{line: 3072, col: 18, offset: 100033},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 87, col: 36, offset: 2361},
													val:        "]",
													ignoreCase: false,
													want:       "\"]\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 88, col: 5, offset: 2370},
													expr: &actionExpr{
														pos: position{line: 3080, col: 10, offset: 100200},
														run: (*parser).callonDocumentRawLine310,
														expr: &charClassMatcher{
															pos:        position{line: 3080, col: 11, offset: 100201},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&notExpr{
													pos: position{line: 3093, col: 8, offset: 100474},
													expr: &anyMatcher{
														line: 3093, col: 9, offset: 100475,
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 124, col: 10, offset: 3339},
										run: (*parser).callonDocumentRawLine314,
										expr: &seqExpr{
											pos: position{line: 124, col: 10, offset: 3339},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 124, col: 10, offset: 3339},
													val:        "endif::",
													ignoreCase: false,
													want:       "\"endif::\"",
												},
												&labeledExpr{
													pos:   position{line: 124, col: 20, offset: 3349},
													label: "name",
													expr: &zeroOrOneExpr{
														pos: position{line: 124, col: 25, offset: 3354},
														expr: &actionExpr{
															pos: position{line: 128, col: 28, offset: 3562},
															run: (*parser).callonDocumentRawLine319,
															expr: &oneOrMoreExpr{
																pos: position{line: 128, col: 28, offset: 3562},
																expr: &charClassMatcher{
																	pos:        position{line: 128, col: 28, offset: 3562},
																	val:        "[^\\r\\n []",
																	chars:      []rune{'\r', '\n', ' ', '['},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 124, col: 52, offset: 3381},
													val:        "[",
													ignoreCase: false,
													want:       "\"[\"",
												},
												&labeledExpr{
													pos:   position{line: 124, col: 56, offset: 3385},
													label: "attr",
													expr: &zeroOrOneExpr{
														pos: position{line: 124, col: 61, offset: 3390},
														expr: &actionExpr{
															pos: position{line: 79, col: 34, offset: 2152},
															run: (*parser).callonDocumentRawLine325,
															expr: &oneOrMoreExpr{
																pos: position{line: 79, col: 34, offset: 2152},
																expr: &charClassMatcher{
																	pos:        position{line: 79, col: 34, offset: 2152},
																	val:        "[^\\r\\n]]",
																	chars:      []rune{'\r', '\n', ']'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 124, col: 94, offset: 3423},
													val:        "]",
													ignoreCase: false,
													want:       "\"]\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 124, col: 98, offset: 3427},
													expr: &actionExpr{
														pos: position{line: 3080, col: 10, offset: 100200},
														run: (*parser).callonDocumentRawLine330,
														expr: &charClassMatcher{
															pos:        position{line: 3080, col: 11, offset: 100201},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&notExpr{
													pos: position{line: 3093, col: 8, offset: 100474},
													expr: &anyMatcher{
														line: 3093, col: 9, offset: 100475,
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 736, col: 5, offset: 23847},
										run: (*parser).callonDocumentRawLine334,
										expr: &seqExpr{
											pos: position{line: 736, col: 5, offset: 23847},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 736, col: 5, offset: 23847},
													expr: &charClassMatcher{
														pos:        position{line: 2994, col: 13, offset: 97463},
														val:        "[0-9\\pL]",
														ranges:     []rune{'0', '9'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&labeledExpr{
													pos:   position{line: 737, col: 5, offset: 23877},
													label: "delimiter",
													expr: &choiceExpr{
														pos: position{line: 738, col: 9, offset: 23897},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 752, col: 5, offset: 24389},
																run: (*parser).callonDocumentRawLine340,
																expr: &seqExpr{
																	pos: position{line: 752, col: 5, offset: 24389},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 752, col: 5, offset: 24389},
																			label: "delimiter",
																			expr: &actionExpr{
																				pos: position{line: 752, col: 16, offset: 24400},
																				run: (*parser).callonDocumentRawLine343,
																				expr: &seqExpr{
																					pos: position{line: 752, col: 16, offset: 24400},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 752, col: 16, offset: 24400},
																							val:        "////",
																							ignoreCase: false,
																							want:       "\"////\"",
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 752, col: 23, offset: 24407},
																							expr: &litMatcher{
																								pos:        position{line: 752, col: 23, offset: 24407},
																								val:        "/",
																								ignoreCase: false,
																								want:       "\"/\"",
																							},
																						},
																					},
																				},
																			},
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 754, col: 8, offset: 24491},
																			expr: &actionExpr{
																				pos: position{line: 3080, col: 10, offset: 100200},
																				run: (*parser).callonDocumentRawLine349,
																				expr: &charClassMatcher{
																					pos:        position{line: 3080, col: 11, offset: 100201},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 3096, col: 8, offset: 100524},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 3089, col: 12, offset: 100384},
																					run: (*parser).callonDocumentRawLine352,
																					expr: &choiceExpr{
																						pos: position{line: 3089, col: 13, offset: 100385},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 3089, col: 13, offset: 100385},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 3089, col: 20, offset: 100392},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 3089, col: 29, offset: 100401},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 3093, col: 8, offset: 100474},
																					expr: &anyMatcher{
																						line: 3093, col: 9, offset: 100475,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 759, col: 5, offset: 24637},
																run: (*parser).callonDocumentRawLine359,
																expr: &seqExpr{
																	pos: position{line: 759, col: 5, offset: 24637},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 759, col: 5, offset: 24637},
																			label: "delimiter",
																			expr: &actionExpr{
																				pos: position{line: 759, col: 16, offset: 24648},
																				run: (*parser).callonDocumentRawLine362,
																				expr: &seqExpr{
																					pos: position{line: 759, col: 16, offset: 24648},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 759, col: 16, offset: 24648},
																							val:        "====",
																							ignoreCase: false,
																							want:       "\"====\"",
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 759, col: 23, offset: 24655},
																							expr: &litMatcher{
																								pos:        position{line: 759, col: 23, offset: 24655},
																								val:        "=",
																								ignoreCase: false,
																								want:       "\"=\"",
																							},
																						},
																					},
																				},
																			},
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 761, col: 8, offset: 24739},
																			expr: &actionExpr{
																				pos: position{line: 3080, col: 10, offset: 100200},
																				run: (*parser).callonDocumentRawLine368,
																				expr: &charClassMatcher{
																					pos:        position{line: 3080, col: 11, offset: 100201},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 3096, col: 8, offset: 100524},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 3089, col: 12, offset: 100384},
																					run: (*parser).callonDocumentRawLine371,
																					expr: &choiceExpr{
																						pos: position{line: 3089, col: 13, offset: 100385},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 3089, col: 13, offset: 100385},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 3089, col: 20, offset: 100392},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 3089, col: 29, offset: 100401},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 3093, col: 8, offset: 100474},
																					expr: &anyMatcher{
																						line: 3093, col: 9, offset: 100475,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 772, col: 26, offset: 25125},
																run: (*parser).callonDocumentRawLine378,
																expr: &seqExpr{
																	pos: position{line: 772, col: 26, offset: 25125},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 772, col: 26, offset: 25125},
																			val:        "```",
																			ignoreCase: false,
																			want:       "\"```\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 772, col: 32, offset: 25131},
																			label: "language",
																			expr: &actionExpr{
																				pos: position{line: 776, col: 13, offset: 25261},
																				run: (*parser).callonDocumentRawLine382,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 776, col: 14, offset: 25262},
																					expr: &charClassMatcher{
																						pos:        position{line: 776, col: 14, offset: 25262},
																						val:        "[^\\r\\n` ]",
																						chars:      []rune{'\r', '\n', '`', ' '},
																						ignoreCase: false,
																						inverted:   true,
																					},
																				},
																			},
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 772, col: 52, offset: 25151},
																			expr: &actionExpr{
																				pos: position{line: 3080, col: 10, offset: 100200},
																				run: (*parser).callonDocumentRawLine386,
																				expr: &charClassMatcher{
																					pos:        position{line: 3080, col: 11, offset: 100201},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 3096, col: 8, offset: 100524},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 3089, col: 12, offset: 100384},
																					run: (*parser).callonDocumentRawLine389,
																					expr: &choiceExpr{
																						pos: position{line: 3089, col: 13, offset: 100385},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 3089, col: 13, offset: 100385},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 3089, col: 20, offset: 100392},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 3089, col: 29, offset: 100401},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 3093, col: 8, offset: 100474},
																					expr: &anyMatcher{
																						line: 3093, col: 9, offset: 100475,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 766, col: 5, offset: 24884},
																run: (*parser).callonDocumentRawLine396,
																expr: &seqExpr{
																	pos: position{line: 766, col: 5, offset: 24884},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 766, col: 5, offset: 24884},
																			label: "delimiter",
																			expr: &actionExpr{
																				pos: position{line: 766, col: 16, offset: 24895},
																				run: (*parser).callonDocumentRawLine399,
																				expr: &seqExpr{
																					pos: position{line: 766, col: 16, offset: 24895},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 766, col: 16, offset: 24895},
																							val:        "```",
																							ignoreCase: false,
																							want:       "\"```\"",
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 766, col: 22, offset: 24901},
																							expr: &litMatcher{
																								pos:        position{line: 766, col: 22, offset: 24901},
																								val:        "`",
																								ignoreCase: false,
																								want:       "\"`\"",
																							},
																						},
																					},
																				},
																			},
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 768, col: 8, offset: 24985},
																			expr: &actionExpr{
																				pos: position{line: 3080, col: 10, offset: 100200},
																				run: (*parser).callonDocumentRawLine405,
																				expr: &charClassMatcher{
																					pos:        position{line: 3080, col: 11, offset: 100201},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 3096, col: 8, offset: 100524},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 3089, col: 12, offset: 100384},
																					run: (*parser).callonDocumentRawLine408,
																					expr: &choiceExpr{
																						pos: position{line: 3089, col: 13, offset: 100385},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 3089, col: 13, offset: 100385},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 3089, col: 20, offset: 100392},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 3089, col: 29, offset: 100401},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 3093, col: 8, offset: 100474},
																					expr: &anyMatcher{
																						line: 3093, col: 9, offset: 100475,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 781, col: 5, offset: 25421},
																run: (*parser).callonDocumentRawLine415,
																expr: &seqExpr{
																	pos: position{line: 781, col: 5, offset: 25421},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 781, col: 5, offset: 25421},
																			label: "delimiter",
																			expr: &actionExpr{
																				pos: position{line: 781, col: 16, offset: 25432},
																				run: (*parser).callonDocumentRawLine418,
																				expr: &seqExpr{
																					pos: position{line: 781, col: 16, offset: 25432},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 781, col: 16, offset: 25432},
																							val:        "----",
																							ignoreCase: false,
																							want:       "\"----\"",
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 781, col: 23, offset: 25439},
																							expr: &litMatcher{
																								pos:        position{line: 781, col: 23, offset: 25439},
																								val:        "-",
																								ignoreCase: false,
																								want:       "\"-\"",
																							},
																						},
																					},
																				},
																			},
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 783, col: 8, offset: 25523},
																			expr: &actionExpr{
																				pos: position{line: 3080, col: 10, offset: 100200},
																				run: (*parser).callonDocumentRawLine424,
																				expr: &charClassMatcher{
																					pos:        position{line: 3080, col: 11, offset: 100201},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 3096, col: 8, offset: 100524},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 3089, col: 12, offset: 100384},
																					run: (*parser).callonDocumentRawLine427,
																					expr: &choiceExpr{
																						pos: position{line: 3089, col: 13, offset: 100385},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 3089, col: 13, offset: 100385},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 3089, col: 20, offset: 100392},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 3089, col: 29, offset: 100401},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 3093, col: 8, offset: 100474},
																					expr: &anyMatcher{
																						line: 3093, col: 9, offset: 100475,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 788, col: 5, offset: 25669},
																run: (*parser).callonDocumentRawLine434,
																expr: &seqExpr{
																	pos: position{line: 788, col: 5, offset: 25669},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 788, col: 5, offset: 25669},
																			label: "delimiter",
																			expr: &actionExpr{
																				pos: position{line: 788, col: 16, offset: 25680},
																				run: (*parser).callonDocumentRawLine437,
																				expr: &seqExpr{
																					pos: position{line: 788, col: 16, offset: 25680},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 788, col: 16, offset: 25680},
																							val:        "....",
																							ignoreCase: false,
																							want:       "\"....\"",
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 788, col: 23, offset: 25687},
																							expr: &litMatcher{
																								pos:        position{line: 788, col: 23, offset: 25687},
																								val:        ".",
																								ignoreCase: false,
																								want:       "\".\"",
																							},
																						},
																					},
																				},
																			},
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 790, col: 8, offset: 25771},
																			expr: &actionExpr{
																				pos: position{line: 3080, col: 10, offset: 100200},
																				run: (*parser).callonDocumentRawLine443,
																				expr: &charClassMatcher{
																					pos:        position{line: 3080, col: 11, offset: 100201},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 3096, col: 8, offset: 100524},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 3089, col: 12, offset: 100384},
																					run: (*parser).callonDocumentRawLine446,
																					expr: &choiceExpr{
																						pos: position{line: 3089, col: 13, offset: 100385},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 3089, col: 13, offset: 100385},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 3089, col: 20, offset: 100392},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 3089, col: 29, offset: 100401},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 3093, col: 8, offset: 100474},
																					expr: &anyMatcher{
																						line: 3093, col: 9, offset: 100475,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 795, col: 5, offset: 25921},
																run: (*parser).callonDocumentRawLine453,
																expr: &seqExpr{
																	pos: position{line: 795, col: 5, offset: 25921},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 795, col: 5, offset: 25921},
																			label: "delimiter",
																			expr: &actionExpr{
																				pos: position{line: 795, col: 16, offset: 25932},
																				run: (*parser).callonDocumentRawLine456,
																				expr: &seqExpr{
																					pos: position{line: 795, col: 16, offset: 25932},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 795, col: 16, offset: 25932},
																							val:        "++++",
																							ignoreCase: false,
																							want:       "\"++++\"",
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 795, col: 23, offset: 25939},
																							expr: &litMatcher{
																								pos:        position{line: 795, col: 23, offset: 25939},
																								val:        "+",
																								ignoreCase: false,
																								want:       "\"+\"",
																							},
																						},
																					},
																				},
																			},
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 797, col: 8, offset: 26023},
																			expr: &actionExpr{
																				pos: position{line: 3080, col: 10, offset: 100200},
																				run: (*parser).callonDocumentRawLine462,
																				expr: &charClassMatcher{
																					pos:        position{line: 3080, col: 11, offset: 100201},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 3096, col: 8, offset: 100524},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 3089, col: 12, offset: 100384},
																					run: (*parser).callonDocumentRawLine465,
																					expr: &choiceExpr{
																						pos: position{line: 3089, col: 13, offset: 100385},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 3089, col: 13, offset: 100385},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 3089, col: 20, offset: 100392},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 3089, col: 29, offset: 100401},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 3093, col: 8, offset: 100474},
																					expr: &anyMatcher{
																						line: 3093, col: 9, offset: 100475,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 802, col: 5, offset: 26171},
																run: (*parser).callonDocumentRawLine472,
																expr: &seqExpr{
																	pos: position{line: 802, col: 5, offset: 26171},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 802, col: 5, offset: 26171},
																			label: "delimiter",
																			expr: &actionExpr{
																				pos: position{line: 802, col: 16, offset: 26182},
																				run: (*parser).callonDocumentRawLine475,
																				expr: &seqExpr{
																					pos: position{line: 802, col: 16, offset: 26182},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 802, col: 16, offset: 26182},
																							val:        "____",
																							ignoreCase: false,
																							want:       "\"____\"",
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 802, col: 23, offset: 26189},
																							expr: &litMatcher{
																								pos:        position{line: 802, col: 23, offset: 26189},
																								val:        "_",
																								ignoreCase: false,
																								want:       "\"_\"",
																							},
																						},
																					},
																				},
																			},
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 804, col: 8, offset: 26273},
																			expr: &actionExpr{
																				pos: position{line: 3080, col: 10, offset: 100200},
																				run: (*parser).callonDocumentRawLine481,
																				expr: &charClassMatcher{
																					pos:        position{line: 3080, col: 11, offset: 100201},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 3096, col: 8, offset: 100524},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 3089, col: 12, offset: 100384},
																					run: (*parser).callonDocumentRawLine484,
																					expr: &choiceExpr{
																						pos: position{line: 3089, col: 13, offset: 100385},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 3089, col: 13, offset: 100385},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 3089, col: 20, offset: 100392},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 3089, col: 29, offset: 100401},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 3093, col: 8, offset: 100474},
																					expr: &anyMatcher{
																						line: 3093, col: 9, offset: 100475,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 809, col: 5, offset: 26417},
																run: (*parser).callonDocumentRawLine491,
																expr: &seqExpr{
																	pos: position{line: 809, col: 5, offset: 26417},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 809, col: 5, offset: 26417},
																			label: "delimiter",
																			expr: &actionExpr{
																				pos: position{line: 809, col: 16, offset: 26428},
																				run: (*parser).callonDocumentRawLine494,
																				expr: &seqExpr{
																					pos: position{line: 809, col: 16, offset: 26428},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 809, col: 16, offset: 26428},
																							val:        "****",
																							ignoreCase: false,
																							want:       "\"****\"",
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 809, col: 23, offset: 26435},
																							expr: &litMatcher{
																								pos:        position{line: 809, col: 23, offset: 26435},
																								val:        "*",
																								ignoreCase: false,
																								want:       "\"*\"",
																							},
																						},
																					},
																				},
																			},
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 811, col: 8, offset: 26519},
																			expr: &actionExpr{
																				pos: position{line: 3080, col: 10, offset: 100200},
																				run: (*parser).callonDocumentRawLine500,
																				expr: &charClassMatcher{
																					pos:        position{line: 3080, col: 11, offset: 100201},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 3096, col: 8, offset: 100524},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 3089, col: 12, offset: 100384},
																					run: (*parser).callonDocumentRawLine503,
																					expr: &choiceExpr{
																						pos: position{line: 3089, col: 13, offset: 100385},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 3089, col: 13, offset: 100385},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 3089, col: 20, offset: 100392},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 3089, col: 29, offset: 100401},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 3093, col: 8, offset: 100474},
																					expr: &anyMatcher{
																						line: 3093, col: 9, offset: 100475,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 43, col: 5, offset: 940},
										run: (*parser).callonDocumentRawLine510,
										expr: &seqExpr{
											pos: position{line: 43, col: 5, offset: 940},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 43, col: 5, offset: 940},
													run: (*parser).callonDocumentRawLine512,
												},
												&andCodeExpr{
													pos: position{line: 47, col: 5, offset: 1084},
													run: (*parser).callonDocumentRawLine513,
												},
												&labeledExpr{
													pos:   position{line: 50, col: 5, offset: 1147},
													label: "level",
													expr: &actionExpr{
														pos: position{line: 50, col: 12, offset: 1154},
														run: (*parser).callonDocumentRawLine515,
														expr: &oneOrMoreExpr{
															pos: position{line: 50, col: 12, offset: 1154},
															expr: &litMatcher{
																pos:        position{line: 50, col: 13, offset: 1155},
																val:        "=",
																ignoreCase: false,
																want:       "\"=\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 54, col: 5, offset: 1263},
													run: (*parser).callonDocumentRawLine518,
												},
												&actionExpr{
													pos: position{line: 3084, col: 11, offset: 100267},
													run: (*parser).callonDocumentRawLine519,
													expr: &oneOrMoreExpr{
														pos: position{line: 3084, col: 11, offset: 100267},
														expr: &charClassMatcher{
															pos:        position{line: 3084, col: 12, offset: 100268},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&oneOrMoreExpr{
													pos: position{line: 58, col: 12, offset: 1422},
													expr: &charClassMatcher{
														pos:        position{line: 58, col: 12, offset: 1422},
														val:        "[^\\r\\n]",
														chars:      []rune{'\r', '\n'},
														ignoreCase: false,
														inverted:   true,
													},
												},
												&notExpr{
													pos: position{line: 3093, col: 8, offset: 100474},
													expr: &anyMatcher{
														line: 3093, col: 9, offset: 100475,
													},
												},
											},
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 3093, col: 8, offset: 100474},
							expr: &anyMatcher{
								line: 3093, col: 9, offset: 100475,
							},
						},
					},
				},
			},
		},
		{
			name: "FileInclusion",
			pos:  position{line: 135, col: 1, offset: 3762},
			expr: &actionExpr{
				pos: position{line: 136, col: 5, offset: 3784},
				run: (*parser).callonFileInclusion1,
				expr: &seqExpr{
					pos: position{line: 136, col: 5, offset: 3784},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 136, col: 5, offset: 3784},
							label: "incl",
							expr: &actionExpr{
								pos: position{line: 137, col: 9, offset: 3799},
								run: (*parser).callonFileInclusion4,
								expr: &seqExpr{
									pos: position{line: 137, col: 9, offset: 3799},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 137, col: 9, offset: 3799},
											val:        "include::",
											ignoreCase: false,
											want:       "\"include::\"",
										},
										&labeledExpr{
											pos:   position{line: 138, col: 9, offset: 3820},
											label: "path",
											expr: &actionExpr{
												pos: position{line: 3036, col: 17, offset: 98818},
												run: (*parser).callonFileInclusion8,
												expr: &labeledExpr{
													pos:   position{line: 3036, col: 17, offset: 98818},
													label: "path",
													expr: &oneOrMoreExpr{
														pos: position{line: 3036, col: 22, offset: 98823},
														expr: &choiceExpr{
															pos: position{line: 3036, col: 23, offset: 98824},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 3051, col: 5, offset: 99280},
																	run: (*parser).callonFileInclusion12,
																	expr: &seqExpr{
																		pos: position{line: 3051, col: 5, offset: 99280},
																		exprs: []interface{}{
																			&notExpr{
																				pos: position{line: 3051, col: 5, offset: 99280},
																				expr: &litMatcher{
																					pos:        position{line: 3051, col: 6, offset: 99281},
																					val:        "[",
																					ignoreCase: false,
																					want:       "\"[\"",
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 3052, col: 5, offset: 99305},
																				label: "elements",
																				expr: &oneOrMoreExpr{
																					pos: position{line: 3052, col: 14, offset: 99314},
																					expr: &choiceExpr{
																						pos: position{line: 3053, col: 9, offset: 99324},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 3053, col: 9, offset: 99324},
																								run: (*parser).callonFileInclusion19,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 3053, col: 9, offset: 99324},
																									expr: &charClassMatcher{
																										pos:        position{line: 3053, col: 10, offset: 99325},
																										val:        "[^\\r\\n[]�{.,;?!<> ]",
																										chars:      []rune{'\r', '\n', '[', ']', '�', '{', '.', ',', ';', '?', '!', '<', '>', ' '},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																							&seqExpr{
																								pos: position{line: 3056, col: 11, offset: 99590},
																								exprs: []interface{}{
																									&actionExpr{
																										pos: position{line: 3026, col: 25, offset: 98561},
																										run: (*parser).callonFileInclusion23,
																										expr: &charClassMatcher{
																											pos:        position{line: 3026, col: 25, offset: 98561},
																											val:        "[.,;?!]",
																											chars:      []rune{'.', ',', ';', '?', '!'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&andExpr{
																										pos: position{line: 3056, col: 32, offset: 99611},
																										expr: &notExpr{
																											pos: position{line: 3056, col: 34, offset: 99613},
																											expr: &choiceExpr{
																												pos: position{line: 3056, col: 36, offset: 99615},
																												alternatives: []interface{}{
																													&notExpr{
																														pos: position{line: 3093, col: 8, offset: 100474},
																														expr: &anyMatcher{
																															line: 3093, col: 9, offset: 100475,
																														},
																													},
																													&actionExpr{
																														pos: position{line: 3080, col: 10, offset: 100200},
																														run: (*parser).callonFileInclusion30,
																														expr: &charClassMatcher{
																															pos:        position{line: 3080, col: 11, offset: 100201},
																															val:        "[ \\t]",
																															chars:      []rune{' ', '\t'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 648, col: 5, offset: 20883},
																								run: (*parser).callonFileInclusion32,
																								expr: &seqExpr{
																									pos: position{line: 648, col: 5, offset: 20883},
																									exprs: []interface{}{
																										&andCodeExpr{
																											pos: position{line: 648, col: 5, offset: 20883},
																											run: (*parser).callonFileInclusion34,
																										},
																										&labeledExpr{
																											pos:   position{line: 651, col: 5, offset: 20952},
																											label: "element",
																											expr: &choiceExpr{
																												pos: position{line: 651, col: 14, offset: 20961},
																												alternatives: []interface{}{
																													&actionExpr{
																														pos: position{line: 671, col: 25, offset: 21614},
																														run: (*parser).callonFileInclusion37,
																														expr: &seqExpr{
																															pos: position{line: 671, col: 25, offset: 21614},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 671, col: 25, offset: 21614},
																																	val:        "{counter:",
																																	ignoreCase: false,
																																	want:       "\"{counter:\"",
																																},
																																&labeledExpr{
																																	pos:   position{line: 671, col: 37, offset: 21626},
																																	label: "name",
																																	expr: &actionExpr{
																																		pos: position{line: 324, col: 18, offset: 10072},
																																		run: (*parser).callonFileInclusion41,
																																		expr: &seqExpr{
																																			pos: position{line: 324, col: 18, offset: 10072},
																																			exprs: []interface{}{
																																				&charClassMatcher{
																																					pos:        position{line: 324, col: 18, offset: 10072},
																																					val:        "[_0-9\\pL]",
																																					chars:      []rune{'_'},
																																					ranges:     []rune{'0', '9'},
																																					classes:    []*unicode.RangeTable{rangeTable("L")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 324, col: 28, offset: 10082},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 324, col: 29, offset: 10083},
																																						val:        "[-0-9\\pL]",
																																						chars:      []rune{'-'},
																																						ranges:     []rune{'0', '9'},
																																						classes:    []*unicode.RangeTable{rangeTable("L")},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&labeledExpr{
																																	pos:   position{line: 671, col: 56, offset: 21645},
																																	label: "start",
																																	expr: &zeroOrOneExpr{
																																		pos: position{line: 671, col: 62, offset: 21651},
																																		expr: &actionExpr{
																																			pos: position{line: 679, col: 17, offset: 21946},
																																			run: (*parser).callonFileInclusion48,
																																			expr: &seqExpr{
																																				pos: position{line: 679, col: 17, offset: 21946},
																																				exprs: []interface{}{
																																					&litMatcher{
																																						pos:        position{line: 679, col: 17, offset: 21946},
																																						val:        ":",
																																						ignoreCase: false,
																																						want:       "\":\"",
																																					},
																																					&labeledExpr{
																																						pos:   position{line: 679, col: 21, offset: 21950},
																																						label: "start",
																																						expr: &choiceExpr{
																																							pos: position{line: 679, col: 28, offset: 21957},
																																							alternatives: []interface{}{
																																								&actionExpr{
																																									pos: position{line: 679, col: 28, offset: 21957},
																																									run: (*parser).callonFileInclusion53,
																																									expr: &charClassMatcher{
																																										pos:        position{line: 679, col: 28, offset: 21957},
																																										val:        "[A-Za-z]",
																																										ranges:     []rune{'A', 'Z', 'a', 'z'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																								&actionExpr{
																																									pos: position{line: 681, col: 9, offset: 22011},
																																									run: (*parser).callonFileInclusion55,
																																									expr: &oneOrMoreExpr{
																																										pos: position{line: 681, col: 9, offset: 22011},
																																										expr: &charClassMatcher{
																																											pos:        position{line: 681, col: 9, offset: 22011},
																																											val:        "[0-9]",
																																											ranges:     []rune{'0', '9'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&litMatcher{
																																	pos:        position{line: 671, col: 78, offset: 21667},
																																	val:        "}",
																																	ignoreCase: false,
																																	want:       "\"}\"",
																																},
																															},
																														},
																													},
																													&actionExpr{
																														pos: position{line: 675, col: 25, offset: 21785},
																														run: (*parser).callonFileInclusion59,
																														expr: &seqExpr{
																															pos: position{line: 675, col: 25, offset: 21785},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 675, col: 25, offset: 21785},
																																	val:        "{counter2:",
																																	ignoreCase: false,
																																	want:       "\"{counter2:\"",
																																},
																																&labeledExpr{
																																	pos:   position{line: 675, col: 38, offset: 21798},
																																	label: "name",
																																	expr: &actionExpr{
																																		pos: position{line: 324, col: 18, offset: 10072},
																																		run: (*parser).callonFileInclusion63,
																																		expr: &seqExpr{
																																			pos: position{line: 324, col: 18, offset: 10072},
																																			exprs: []interface{}{
																																				&charClassMatcher{
																																					pos:        position{line: 324, col: 18, offset: 10072},
																																					val:        "[_0-9\\pL]",
																																					chars:      []rune{'_'},
																																					ranges:     []rune{'0', '9'},
																																					classes:    []*unicode.RangeTable{rangeTable("L")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 324, col: 28, offset: 10082},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 324, col: 29, offset: 10083},
																																						val:        "[-0-9\\pL]",
																																						chars:      []rune{'-'},
																																						ranges:     []rune{'0', '9'},
																																						classes:    []*unicode.RangeTable{rangeTable("L")},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&labeledExpr{
																																	pos:   position{line: 675, col: 57, offset: 21817},
																																	label: "start",
																																	expr: &zeroOrOneExpr{
																																		pos: position{line: 675, col: 63, offset: 21823},
																																		expr: &actionExpr{
																																			pos: position{line: 679, col: 17, offset: 21946},
																																			run: (*parser).callonFileInclusion70,
																																			expr: &seqExpr{
																																				pos: position{line: 679, col: 17, offset: 21946},
																																				exprs: []interface{}{
																																					&litMatcher{
																																						pos:        position{line: 679, col: 17, offset: 21946},
																																						val:        ":",
																																						ignoreCase: false,
																																						want:       "\":\"",
																																					},
																																					&labeledExpr{
																																						pos:   position{line: 679, col: 21, offset: 21950},
																																						label: "start",
																																						expr: &choiceExpr{
																																							pos: position{line: 679, col: 28, offset: 21957},
																																							alternatives: []interface{}{
																																								&actionExpr{
																																									pos: position{line: 679, col: 28, offset: 21957},
																																									run: (*parser).callonFileInclusion75,
																																									expr: &charClassMatcher{
																																										pos:        position{line: 679, col: 28, offset: 21957},
																																										val:        "[A-Za-z]",
																																										ranges:     []rune{'A', 'Z', 'a', 'z'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																								&actionExpr{
																																									pos: position{line: 681, col: 9, offset: 22011},
																																									run: (*parser).callonFileInclusion77,
																																									expr: &oneOrMoreExpr{
																																										pos: position{line: 681, col: 9, offset: 22011},
																																										expr: &charClassMatcher{
																																											pos:        position{line: 681, col: 9, offset: 22011},
																																											val:        "[0-9]",
																																											ranges:     []rune{'0', '9'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&litMatcher{
																																	pos:        position{line: 675, col: 79, offset: 21839},
																																	val:        "}",
																																	ignoreCase: false,
																																	want:       "\"}\"",
																																},
																															},
																														},
																													},
																													&actionExpr{
																														pos: position{line: 657, col: 5, offset: 21090},
																														run: (*parser).callonFileInclusion81,
																														expr: &seqExpr{
																															pos: position{line: 657, col: 5, offset: 21090},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 657, col: 5, offset: 21090},
																																	val:        "\\{",
																																	ignoreCase: false,
																																	want:       "\"\\\\{\"",
																																},
																																&labeledExpr{
																																	pos:   position{line: 657, col: 13, offset: 21098},
																																	label: "name",
																																	expr: &actionExpr{
																																		pos: position{line: 324, col: 18, offset: 10072},
																																		run: (*parser).callonFileInclusion85,
																																		expr: &seqExpr{
																																			pos: position{line: 324, col: 18, offset: 10072},
																																			exprs: []interface{}{
																																				&charClassMatcher{
																																					pos:        position{line: 324, col: 18, offset: 10072},
																																					val:        "[_0-9\\pL]",
																																					chars:      []rune{'_'},
																																					ranges:     []rune{'0', '9'},
																																					classes:    []*unicode.RangeTable{rangeTable("L")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 324, col: 28, offset: 10082},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 324, col: 29, offset: 10083},
																																						val:        "[-0-9\\pL]",
																																						chars:      []rune{'-'},
																																						ranges:     []rune{'0', '9'},
																																						classes:    []*unicode.RangeTable{rangeTable("L")},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&litMatcher{
																																	pos:        position{line: 657, col: 32, offset: 21117},
																																	val:        "}",
																																	ignoreCase: false,
																																	want:       "\"}\"",
																																},
																															},
																														},
																													},
																													&actionExpr{
																														pos: position{line: 664, col: 5, offset: 21358},
																														run: (*parser).callonFileInclusion91,
																														expr: &seqExpr{
																															pos: position{line: 664, col: 5, offset: 21358},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 664, col: 5, offset: 21358},
																																	val:        "{",
																																	ignoreCase: false,
																																	want:       "\"{\"",
																																},
																																&labeledExpr{
																																	pos:   position{line: 664, col: 9, offset: 21362},
																																	label: "name",
																																	expr: &actionExpr{
																																		pos: position{line: 324, col: 18, offset: 10072},
																																		run: (*parser).callonFileInclusion95,
																																		expr: &seqExpr{
																																			pos: position{line: 324, col: 18, offset: 10072},
																																			exprs: []interface{}{
																																				&charClassMatcher{
																																					pos:        position{line: 324, col: 18, offset: 10072},
																																					val:        "[_0-9\\pL]",
																																					chars:      []rune{'_'},
																																					ranges:     []rune{'0', '9'},
																																					classes:    []*unicode.RangeTable{rangeTable("L")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 324, col: 28, offset: 10082},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 324, col: 29, offset: 10083},
																																						val:        "[-0-9\\pL]",
																																						chars:      []rune{'-'},
																																						ranges:     []rune{'0', '9'},
																																						classes:    []*unicode.RangeTable{rangeTable("L")},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&litMatcher{
																																	pos:        position{line: 664, col: 28, offset: 21381},
																																	val:        "}",
																																	ignoreCase: false,
																																	want:       "\"}\"",
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 2753, col: 5, offset: 90225},
																								run: (*parser).callonFileInclusion101,
																								expr: &seqExpr{
																									pos: position{line: 2753, col: 5, offset: 90225},
																									exprs: []interface{}{
																										&andCodeExpr{
																											pos: position{line: 2753, col: 5, offset: 90225},
																											run: (*parser).callonFileInclusion103,
																										},
																										&labeledExpr{
																											pos:   position{line: 2756, col: 5, offset: 90301},
																											label: "element",
																											expr: &choiceExpr{
																												pos: position{line: 2758, col: 9, offset: 90399},
																												alternatives: []interface{}{
																													&actionExpr{
																														pos: position{line: 2758, col: 9, offset: 90399},
																														run: (*parser).callonFileInclusion106,
																														expr: &choiceExpr{
																															pos: position{line: 699, col: 27, offset: 22665},
																															alternatives: []interface{}{
																																&actionExpr{
																																	pos: position{line: 699, col: 27, offset: 22665},
																																	run: (*parser).callonFileInclusion108,
																																	expr: &seqExpr{
																																		pos: position{line: 699, col: 27, offset: 22665},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 699, col: 27, offset: 22665},
																																				val:        "<<",
																																				ignoreCase: false,
																																				want:       "\"<<\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 699, col: 32, offset: 22670},
																																				label: "id",
																																				expr: &actionExpr{
																																					pos: position{line: 3065, col: 7, offset: 99852},
																																					run: (*parser).callonFileInclusion112,
																																					expr: &oneOrMoreExpr{
																																						pos: position{line: 3065, col: 7, offset: 99852},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 3065, col: 7, offset: 99852},
																																							val:        "[^[]<>,]",
																																							chars:      []rune{'[', ']', '<', '>', ','},
																																							ignoreCase: false,
																																							inverted:   true,
																																						},
																																					},
																																				},
																																			},
																																			&zeroOrMoreExpr{
																																				pos: position{line: 699, col: 40, offset: 22678},
																																				expr: &actionExpr{
																																					pos: position{line: 3080, col: 10, offset: 100200},
																																					run: (*parser).callonFileInclusion116,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 3080, col: 11, offset: 100201},
																																						val:        "[ \\t]",
																																						chars:      []rune{' ', '\t'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 699, col: 47, offset: 22685},
																																				val:        ",",
																																				ignoreCase: false,
																																				want:       "\",\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 699, col: 51, offset: 22689},
																																				label: "label",
																																				expr: &oneOrMoreExpr{
																																					pos: position{line: 709, col: 24, offset: 23090},
																																					expr: &choiceExpr{
																																						pos: position{line: 710, col: 5, offset: 23096},
																																						alternatives: []interface{}{
																																							&actionExpr{
																																								pos: position{line: 710, col: 6, offset: 23097},
																																								run: (*parser).callonFileInclusion122,
																																								expr: &seqExpr{
																																									pos: position{line: 710, col: 6, offset: 23097},
																																									exprs: []interface{}{
																																										&charClassMatcher{
																																											pos:        position{line: 710, col: 6, offset: 23097},
																																											val:        "[0-9\\pL]",
																																											ranges:     []rune{'0', '9'},
																																											classes:    []*unicode.RangeTable{rangeTable("L")},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&oneOrMoreExpr{
																																											pos: position{line: 710, col: 14, offset: 23105},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 710, col: 14, offset: 23105},
																																												val:        "[^\\r\\n{<>]",
																																												chars:      []rune{'\r', '\n', '{', '<', '>'},
																																												ignoreCase: false,
																																												inverted:   true,
																																											},
																																										},
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 657, col: 5, offset: 21090},
																																								run: (*parser).callonFileInclusion127,
																																								expr: &seqExpr{
																																									pos: position{line: 657, col: 5, offset: 21090},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 657, col: 5, offset: 21090},
																																											val:        "\\{",
																																											ignoreCase: false,
																																											want:       "\"\\\\{\"",
																																										},
																																										&labeledExpr{
																																											pos:   position{line: 657, col: 13, offset: 21098},
																																											label: "name",
																																											expr: &actionExpr{
																																												pos: position{line: 324, col: 18, offset: 10072},
																																												run: (*parser).callonFileInclusion131,
																																												expr: &seqExpr{
																																													pos: position{line: 324, col: 18, offset: 10072},
																																													exprs: []interface{}{
																																														&charClassMatcher{
																																															pos:        position{line: 324, col: 18, offset: 10072},
																																															val:        "[_0-9\\pL]",
																																															chars:      []rune{'_'},
																																															ranges:     []rune{'0', '9'},
																																															classes:    []*unicode.RangeTable{rangeTable("L")},
																																															ignoreCase: false,
																																															inverted:   false,
																																														},
																																														&zeroOrMoreExpr{
																																															pos: position{line: 324, col: 28, offset: 10082},
																																															expr: &charClassMatcher{
																																																pos:        position{line: 324, col: 29, offset: 10083},
																																																val:        "[-0-9\\pL]",
																																																chars:      []rune{'-'},
																																																ranges:     []rune{'0', '9'},
																																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																														},
																																													},
																																												},
																																											},
																																										},
																																										&litMatcher{
																																											pos:        position{line: 657, col: 32, offset: 21117},
																																											val:        "}",
																																											ignoreCase: false,
																																											want:       "\"}\"",
																																										},
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 664, col: 5, offset: 21358},
																																								run: (*parser).callonFileInclusion137,
																																								expr: &seqExpr{
																																									pos: position{line: 664, col: 5, offset: 21358},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 664, col: 5, offset: 21358},
																																											val:        "{",
																																											ignoreCase: false,
																																											want:       "\"{\"",
																																										},
																																										&labeledExpr{
																																											pos:   position{line: 664, col: 9, offset: 21362},
																																											label: "name",
																																											expr: &actionExpr{
																																												pos: position{line: 324, col: 18, offset: 10072},
																																												run: (*parser).callonFileInclusion141,
																																												expr: &seqExpr{
																																													pos: position{line: 324, col: 18, offset: 10072},
																																													exprs: []interface{}{
																																														&charClassMatcher{
																																															pos:        position{line: 324, col: 18, offset: 10072},
																																															val:        "[_0-9\\pL]",
																																															chars:      []rune{'_'},
																																															ranges:     []rune{'0', '9'},
																																															classes:    []*unicode.RangeTable{rangeTable("L")},
																																															ignoreCase: false,
																																															inverted:   false,
																																														},
																																														&zeroOrMoreExpr{
																																															pos: position{line: 324, col: 28, offset: 10082},
																																															expr: &charClassMatcher{
																																																pos:        position{line: 324, col: 29, offset: 10083},
																																																val:        "[-0-9\\pL]",
																																																chars:      []rune{'-'},
																																																ranges:     []rune{'0', '9'},
																																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																														},
																																													},
																																												},
																																											},
																																										},
																																										&litMatcher{
																																											pos:        position{line: 664, col: 28, offset: 21381},
																																											val:        "}",
																																											ignoreCase: false,
																																											want:       "\"}\"",
																																										},
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 714, col: 8, offset: 23331},
																																								run: (*parser).callonFileInclusion147,
																																								expr: &litMatcher{
																																									pos:        position{line: 714, col: 8, offset: 23331},
																																									val:        "{",
																																									ignoreCase: false,
																																									want:       "\"{\"",
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 699, col: 79, offset: 22717},
																																				val:        ">>",
																																				ignoreCase: false,
																																				want:       "\">>\"",
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 701, col: 9, offset: 22790},
																																	run: (*parser).callonFileInclusion150,
																																	expr: &seqExpr{
																																		pos: position{line: 701, col: 9, offset: 22790},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 701, col: 9, offset: 22790},
																																				val:        "<<",
																																				ignoreCase: false,
																																				want:       "\"<<\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 701, col: 14, offset: 22795},
																																				label: "id",
																																				expr: &actionExpr{
																																					pos: position{line: 3065, col: 7, offset: 99852},
																																					run: (*parser).callonFileInclusion154,
																																					expr: &oneOrMoreExpr{
																																						pos: position{line: 3065, col: 7, offset: 99852},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 3065, col: 7, offset: 99852},
																																							val:        "[^[]<>,]",
																																							chars:      []rune{'[', ']', '<', '>', ','},
																																							ignoreCase: false,
																																							inverted:   true,
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 701, col: 22, offset: 22803},
																																				val:        ">>",
																																				ignoreCase: false,
																																				want:       "\">>\"",
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																													&actionExpr{
																														pos: position{line: 2761, col: 11, offset: 90503},
																														run: (*parser).callonFileInclusion158,
																														expr: &charClassMatcher{
																															pos:        position{line: 2761, col: 12, offset: 90504},
																															val:        "[<>&]",
																															chars:      []rune{'<', '>', '&'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 3059, col: 11, offset: 99696},
																								run: (*parser).callonFileInclusion160,
																								expr: &litMatcher{
																									pos:        position{line: 3059, col: 11, offset: 99696},
																									val:        "{",
																									ignoreCase: false,
																									want:       "\"{\"",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 1219, col: 23, offset: 38141},
																	run: (*parser).callonFileInclusion162,
																	expr: &seqExpr{
																		pos: position{line: 1219, col: 23, offset: 38141},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 1217, col: 32, offset: 38109},
																				val:        "�",
																				ignoreCase: false,
																				want:       "\"�\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 1219, col: 51, offset: 38169},
																				label: "ref",
																				expr: &actionExpr{
																					pos: position{line: 1219, col: 56, offset: 38174},
																					run: (*parser).callonFileInclusion166,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 1219, col: 56, offset: 38174},
																						expr: &charClassMatcher{
																							pos:        position{line: 1219, col: 56, offset: 38174},
																							val:        "[0-9]",
																							ranges:     []rune{'0', '9'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 1217, col: 32, offset: 38109},
																				val:        "�",
																				ignoreCase: false,
																				want:       "\"�\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 139, col: 9, offset: 3849},
											label: "attributes",
											expr: &ruleRefExpr{
												pos:  position{line: 139, col: 21, offset: 3861},
												name: "InlineAttributes",
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 143, col: 5, offset: 4016},
							expr: &actionExpr{
								pos: position{line: 3080, col: 10, offset: 100200},
								run: (*parser).callonFileInclusion173,
								expr: &charClassMatcher{
									pos:        position{line: 3080, col: 11, offset: 100201},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&choiceExpr{
							pos: position{line: 3096, col: 8, offset: 100524},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 3089, col: 12, offset: 100384},
									run: (*parser).callonFileInclusion176,
									expr: &choiceExpr{
										pos: position{line: 3089, col: 13, offset: 100385},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 3089, col: 13, offset: 100385},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
											&litMatcher{
												pos:        position{line: 3089, col: 20, offset: 100392},
												val:        "\r\n",
												ignoreCase: false,
												want:       "\"\\r\\n\"",
											},
											&litMatcher{
												pos:        position{line: 3089, col: 29, offset: 100401},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 3093, col: 8, offset: 100474},
									expr: &anyMatcher{
										line: 3093, col: 9, offset: 100475,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LineRanges",
			pos:  position{line: 150, col: 1, offset: 4149},
			expr: &actionExpr{
				pos: position{line: 150, col: 15, offset: 4163},
				run: (*parser).callonLineRanges1,
				expr: &seqExpr{
					pos: position{line: 150, col: 15, offset: 4163},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 150, col: 15, offset: 4163},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 150, col: 22, offset: 4170},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 157, col: 23, offset: 4353},
										run: (*parser).callonLineRanges5,
										expr: &seqExpr{
											pos: position{line: 157, col: 23, offset: 4353},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 157, col: 23, offset: 4353},
													label: "first",
													expr: &choiceExpr{
														pos: position{line: 157, col: 30, offset: 4360},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 166, col: 19, offset: 4718},
																run: (*parser).callonLineRanges9,
																expr: &seqExpr{
																	pos: position{line: 166, col: 19, offset: 4718},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 166, col: 19, offset: 4718},
																			label: "start",
																			expr: &actionExpr{
																				pos: position{line: 3072, col: 12, offset: 100027},
																				run: (*parser).callonLineRanges12,
																				expr: &seqExpr{
																					pos: position{line: 3072, col: 13, offset: 100028},
																					exprs: []interface{}{
																						&zeroOrOneExpr{
																							pos: position{line: 3072, col: 13, offset: 100028},
																							expr: &litMatcher{
																								pos:        position{line: 3072, col: 13, offset: 100028},
																								val:        "-",
																								ignoreCase: false,
																								want:       "\"-\"",
																							},
																						},
																						&oneOrMoreExpr{
																							pos: position{line: 3072, col: 18, offset: 100033},
																							expr: &charClassMatcher{
																								pos:        position{line: 3072, col: 18, offset: 100033},
																								val:        "[0-9]",
																								ranges:     []rune{'0', '9'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 166, col: 35, offset: 4734},
																			val:        "..",
																			ignoreCase: false,
																			want:       "\"..\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 166, col: 40, offset: 4739},
																			label: "end",
																			expr: &actionExpr{
																				pos: position{line: 3072, col: 12, offset: 100027},
																				run: (*parser).callonLineRanges20,
																				expr: &seqExpr{
																					pos: position{line: 3072, col: 13, offset: 100028},
																					exprs: []interface{}{
																						&zeroOrOneExpr{
																							pos: position{line: 3072, col: 13, offset: 100028},
																							expr: &litMatcher{
																								pos:        position{line: 3072, col: 13, offset: 100028},
																								val:        "-",
																								ignoreCase: false,
																								want:       "\"-\"",
																							},
																						},
																						&oneOrMoreExpr{
																							pos: position{line: 3072, col: 18, offset: 100033},
																							expr: &charClassMatcher{
																								pos:        position{line: 3072, col: 18, offset: 100033},
																								val:        "[0-9]",
																								ranges:     []rune{'0', '9'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 170, col: 20, offset: 4860},
																run: (*parser).callonLineRanges26,
																expr: &labeledExpr{
																	pos:   position{line: 170, col: 20, offset: 4860},
																	label: "singleline",
																	expr: &actionExpr{
																		pos: position{line: 3072, col: 12, offset: 100027},
																		run: (*parser).callonLineRanges28,
																		expr: &seqExpr{
																			pos: position{line: 3072, col: 13, offset: 100028},
																			exprs: []interface{}{
																				&zeroOrOneExpr{
																					pos: position{line: 3072, col: 13, offset: 100028},
																					expr: &litMatcher{
																						pos:        position{line: 3072, col: 13, offset: 100028},
																						val:        "-",
																						ignoreCase: false,
																						want:       "\"-\"",
																					},
																				},
																				&oneOrMoreExpr{
																					pos: position{line: 3072, col: 18, offset: 100033},
																					expr: &charClassMatcher{
																						pos:        position{line: 3072, col: 18, offset: 100033},
																						val:        "[0-9]",
																						ranges:     []rune{'0', '9'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 158, col: 5, offset: 4399},
													label: "others",
													expr: &oneOrMoreExpr{
														pos: position{line: 158, col: 12, offset: 4406},
														expr: &actionExpr{
															pos: position{line: 159, col: 9, offset: 4416},
															run: (*parser).callonLineRanges36,
															expr: &seqExpr{
																pos: position{line: 159, col: 9, offset: 4416},
																exprs: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 159, col: 10, offset: 4417},
																		val:        "[,;]",
																		chars:      []rune{',', ';'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&labeledExpr{
																		pos:   position{line: 160, col: 9, offset: 4534},
																		label: "other",
																		expr: &choiceExpr{
																			pos: position{line: 160, col: 16, offset: 4541},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 166, col: 19, offset: 4718},
																					run: (*parser).callonLineRanges41,
																					expr: &seqExpr{
																						pos: position{line: 166, col: 19, offset: 4718},
																						exprs: []interface{}{
																							&labeledExpr{
																								pos:   position{line: 166, col: 19, offset: 4718},
																								label: "start",
																								expr: &actionExpr{
																									pos: position{line: 3072, col: 12, offset: 100027},
																									run: (*parser).callonLineRanges44,
																									expr: &seqExpr{
																										pos: position{line: 3072, col: 13, offset: 100028},
																										exprs: []interface{}{
																											&zeroOrOneExpr{
																												pos: position{line: 3072, col: 13, offset: 100028},
																												expr: &litMatcher{
																													pos:        position{line: 3072, col: 13, offset: 100028},
																													val:        "-",
																													ignoreCase: false,
																													want:       "\"-\"",
																												},
																											},
																											&oneOrMoreExpr{
																												pos: position{line: 3072, col: 18, offset: 100033},
																												expr: &charClassMatcher{
																													pos:        position{line: 3072, col: 18, offset: 100033},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 166, col: 35, offset: 4734},
																								val:        "..",
																								ignoreCase: false,
																								want:       "\"..\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 166, col: 40, offset: 4739},
																								label: "end",
																								expr: &actionExpr{
																									pos: position{line: 3072, col: 12, offset: 100027},
																									run: (*parser).callonLineRanges52,
																									expr: &seqExpr{
																										pos: position{line: 3072, col: 13, offset: 100028},
																										exprs: []interface{}{
																											&zeroOrOneExpr{
																												pos: position{line: 3072, col: 13, offset: 100028},
																												expr: &litMatcher{
																													pos:        position{line: 3072, col: 13, offset: 100028},
																													val:        "-",
																													ignoreCase: false,
																													want:       "\"-\"",
																												},
																											},
																											&oneOrMoreExpr{
																												pos: position{line: 3072, col: 18, offset: 100033},
																												expr: &charClassMatcher{
																													pos:        position{line: 3072, col: 18, offset: 100033},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 170, col: 20, offset: 4860},
																					run: (*parser).callonLineRanges58,
																					expr: &labeledExpr{
																						pos:   position{line: 170, col: 20, offset: 4860},
																						label: "singleline",
																						expr: &actionExpr{
																							pos: position{line: 3072, col: 12, offset: 100027},
																							run: (*parser).callonLineRanges60,
																							expr: &seqExpr{
																								pos: position{line: 3072, col: 13, offset: 100028},
																								exprs: []interface{}{
																									&zeroOrOneExpr{
																										pos: position{line: 3072, col: 13, offset: 100028},
																										expr: &litMatcher{
																											pos:        position{line: 3072, col: 13, offset: 100028},
																											val:        "-",
																											ignoreCase: false,
																											want:       "\"-\"",
																										},
																									},
																									&oneOrMoreExpr{
																										pos: position{line: 3072, col: 18, offset: 100033},
																										expr: &charClassMatcher{
																											pos:        position{line: 3072, col: 18, offset: 100033},
																											val:        "[0-9]",
																											ranges:     []rune{'0', '9'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 166, col: 19, offset: 4718},
										run: (*parser).callonLineRanges66,
										expr: &seqExpr{
											pos: position{line: 166, col: 19, offset: 4718},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 166, col: 19, offset: 4718},
													label: "start",
													expr: &actionExpr{
														pos: position{line: 3072, col: 12, offset: 100027},
														run: (*parser).callonLineRanges69,
														expr: &seqExpr{
															pos: position{line: 3072, col: 13, offset: 100028},
															exprs: []interface{}{
																&zeroOrOneExpr{
																	pos: position{line: 3072, col: 13, offset: 100028},
																	expr: &litMatcher{
																		pos:        position{line: 3072, col: 13, offset: 100028},
																		val:        "-",
																		ignoreCase: false,
																		want:       "\"-\"",
																	},
																},
																&oneOrMoreExpr{
																	pos: position{line: 3072, col: 18, offset: 100033},
																	expr: &charClassMatcher{
																		pos:        position{line: 3072, col: 18, offset: 100033},
																		val:        "[0-9]",
																		ranges:     []rune{'0', '9'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 166, col: 35, offset: 4734},
													val:        "..",
													ignoreCase: false,
													want:       "\"..\"",
												},
												&labeledExpr{
													pos:   position{line: 166, col: 40, offset: 4739},
													label: "end",
													expr: &actionExpr{
														pos: position{line: 3072, col: 12, offset: 100027},
														run: (*parser).callonLineRanges77,
														expr: &seqExpr{
															pos: position{line: 3072, col: 13, offset: 100028},
															exprs: []interface{}{
																&zeroOrOneExpr{
																	pos: position{line: 3072, col: 13, offset: 100028},
																	expr: &litMatcher{
																		pos:        position{line: 3072, col: 13, offset: 100028},
																		val:        "-",
																		ignoreCase: false,
																		want:       "\"-\"",
																	},
																},
																&oneOrMoreExpr{
																	pos: position{line: 3072, col: 18, offset: 100033},
																	expr: &charClassMatcher{
																		pos:        position{line: 3072, col: 18, offset: 100033},
																		val:        "[0-9]",
																		ranges:     []rune{'0', '9'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 170, col: 20, offset: 4860},
										run: (*parser).callonLineRanges83,
										expr: &labeledExpr{
											pos:   position{line: 170, col: 20, offset: 4860},
											label: "singleline",
											expr: &actionExpr{
												pos: position{line: 3072, col: 12, offset: 100027},
												run: (*parser).callonLineRanges85,
												expr: &seqExpr{
													pos: position{line: 3072, col: 13, offset: 100028},
													exprs: []interface{}{
														&zeroOrOneExpr{
															pos: position{line: 3072, col: 13, offset: 100028},
															expr: &litMatcher{
																pos:        position{line: 3072, col: 13, offset: 100028},
																val:        "-",
																ignoreCase: false,
																want:       "\"-\"",
															},
														},
														&oneOrMoreExpr{
															pos: position{line: 3072, col: 18, offset: 100033},
															expr: &charClassMatcher{
																pos:        position{line: 3072, col: 18, offset: 100033},
																val:        "[0-9]",
																ranges:     []rune{'0', '9'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 3093, col: 8, offset: 100474},
							expr: &anyMatcher{
								line: 3093, col: 9, offset: 100475,
							},
						},
					},
				},
			},
		},
		{
			name: "TagRanges",
			pos:  position{line: 175, col: 1, offset: 4996},
			expr: &actionExpr{
				pos: position{line: 175, col: 14, offset: 5009},
				run: (*parser).callonTagRanges1,
				expr: &seqExpr{
					pos: position{line: 175, col: 14, offset: 5009},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 175, col: 14, offset: 5009},
							label: "value",
							expr: &actionExpr{
								pos: position{line: 179, col: 22, offset: 5146},
								run: (*parser).callonTagRanges4,
								expr: &seqExpr{
									pos: position{line: 179, col: 22, offset: 5146},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 179, col: 22, offset: 5146},
											label: "first",
											expr: &choiceExpr{
												pos: position{line: 188, col: 13, offset: 5456},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 188, col: 13, offset: 5456},
														run: (*parser).callonTagRanges8,
														expr: &labeledExpr{
															pos:   position{line: 188, col: 13, offset: 5456},
															label: "tag",
															expr: &choiceExpr{
																pos: position{line: 188, col: 18, offset: 5461},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 2998, col: 14, offset: 97537},
																		run: (*parser).callonTagRanges11,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 2998, col: 14, offset: 97537},
																			expr: &charClassMatcher{
																				pos:        position{line: 2998, col: 14, offset: 97537},
																				val:        "[0-9\\pL]",
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 194, col: 16, offset: 5661},
																		run: (*parser).callonTagRanges14,
																		expr: &seqExpr{
																			pos: position{line: 194, col: 16, offset: 5661},
																			exprs: []interface{}{
																				&labeledExpr{
																					pos:   position{line: 194, col: 16, offset: 5661},
																					label: "stars",
																					expr: &actionExpr{
																						pos: position{line: 194, col: 23, offset: 5668},
																						run: (*parser).callonTagRanges17,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 194, col: 23, offset: 5668},
																							expr: &litMatcher{
																								pos:        position{line: 194, col: 24, offset: 5669},
																								val:        "*",
																								ignoreCase: false,
																								want:       "\"*\"",
																							},
																						},
																					},
																				},
																				&andCodeExpr{
																					pos: position{line: 197, col: 5, offset: 5723},
																					run: (*parser).callonTagRanges20,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 190, col: 9, offset: 5549},
														run: (*parser).callonTagRanges21,
														expr: &seqExpr{
															pos: position{line: 190, col: 9, offset: 5549},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 190, col: 9, offset: 5549},
																	val:        "!",
																	ignoreCase: false,
																	want:       "\"!\"",
																},
																&labeledExpr{
																	pos:   position{line: 190, col: 13, offset: 5553},
																	label: "tag",
																	expr: &choiceExpr{
																		pos: position{line: 190, col: 18, offset: 5558},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 2998, col: 14, offset: 97537},
																				run: (*parser).callonTagRanges26,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 2998, col: 14, offset: 97537},
																					expr: &charClassMatcher{
																						pos:        position{line: 2998, col: 14, offset: 97537},
																						val:        "[0-9\\pL]",
																						ranges:     []rune{'0', '9'},
																						classes:    []*unicode.RangeTable{rangeTable("L")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 194, col: 16, offset: 5661},
																				run: (*parser).callonTagRanges29,
																				expr: &seqExpr{
																					pos: position{line: 194, col: 16, offset: 5661},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 194, col: 16, offset: 5661},
																							label: "stars",
																							expr: &actionExpr{
																								pos: position{line: 194, col: 23, offset: 5668},
																								run: (*parser).callonTagRanges32,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 194, col: 23, offset: 5668},
																									expr: &litMatcher{
																										pos:        position{line: 194, col: 24, offset: 5669},
																										val:        "*",
																										ignoreCase: false,
																										want:       "\"*\"",
																									},
																								},
																							},
																						},
																						&andCodeExpr{
																							pos: position{line: 197, col: 5, offset: 5723},
																							run: (*parser).callonTagRanges35,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 180, col: 5, offset: 5167},
											label: "others",
											expr: &zeroOrMoreExpr{
												pos: position{line: 180, col: 12, offset: 5174},
												expr: &actionExpr{
													pos: position{line: 181, col: 9, offset: 5184},
													run: (*parser).callonTagRanges38,
													expr: &seqExpr{
														pos: position{line: 181, col: 9, offset: 5184},
														exprs: []interface{}{
															&charClassMatcher{
																pos:        position{line: 181, col: 10, offset: 5185},
																val:        "[,;]",
																chars:      []rune{',', ';'},
																ignoreCase: false,
																inverted:   false,
															},
															&labeledExpr{
																pos:   position{line: 182, col: 9, offset: 5302},
																label: "other",
																expr: &choiceExpr{
																	pos: position{line: 188, col: 13, offset: 5456},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 188, col: 13, offset: 5456},
																			run: (*parser).callonTagRanges43,
																			expr: &labeledExpr{
																				pos:   position{line: 188, col: 13, offset: 5456},
																				label: "tag",
																				expr: &choiceExpr{
																					pos: position{line: 188, col: 18, offset: 5461},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 2998, col: 14, offset: 97537},
																							run: (*parser).callonTagRanges46,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 2998, col: 14, offset: 97537},
																								expr: &charClassMatcher{
																									pos:        position{line: 2998, col: 14, offset: 97537},
																									val:        "[0-9\\pL]",
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 194, col: 16, offset: 5661},
																							run: (*parser).callonTagRanges49,
																							expr: &seqExpr{
																								pos: position{line: 194, col: 16, offset: 5661},
																								exprs: []interface{}{
																									&labeledExpr{
																										pos:   position{line: 194, col: 16, offset: 5661},
																										label: "stars",
																										expr: &actionExpr{
																											pos: position{line: 194, col: 23, offset: 5668},
																											run: (*parser).callonTagRanges52,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 194, col: 23, offset: 5668},
																												expr: &litMatcher{
																													pos:        position{line: 194, col: 24, offset: 5669},
																													val:        "*",
																													ignoreCase: false,
																													want:       "\"*\"",
																												},
																											},
																										},
																									},
																									&andCodeExpr{
																										pos: position{line: 197, col: 5, offset: 5723},
																										run: (*parser).callonTagRanges55,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 190, col: 9, offset: 5549},
																			run: (*parser).callonTagRanges56,
																			expr: &seqExpr{
																				pos: position{line: 190, col: 9, offset: 5549},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 190, col: 9, offset: 5549},
																						val:        "!",
																						ignoreCase: false,
																						want:       "\"!\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 190, col: 13, offset: 5553},
																						label: "tag",
																						expr: &choiceExpr{
																							pos: position{line: 190, col: 18, offset: 5558},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 2998, col: 14, offset: 97537},
																									run: (*parser).callonTagRanges61,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 2998, col: 14, offset: 97537},
																										expr: &charClassMatcher{
																											pos:        position{line: 2998, col: 14, offset: 97537},
																											val:        "[0-9\\pL]",
																											ranges:     []rune{'0', '9'},
																											classes:    []*unicode.RangeTable{rangeTable("L")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 194, col: 16, offset: 5661},
																									run: (*parser).callonTagRanges64,
																									expr: &seqExpr{
																										pos: position{line: 194, col: 16, offset: 5661},
																										exprs: []interface{}{
																											&labeledExpr{
																												pos:   position{line: 194, col: 16, offset: 5661},
																												label: "stars",
																												expr: &actionExpr{
																													pos: position{line: 194, col: 23, offset: 5668},
																													run: (*parser).callonTagRanges67,
																													expr: &oneOrMoreExpr{
																														pos: position{line: 194, col: 23, offset: 5668},
																														expr: &litMatcher{
																															pos:        position{line: 194, col: 24, offset: 5669},
																															val:        "*",
																															ignoreCase: false,
																															want:       "\"*\"",
																														},
																													},
																												},
																											},
																											&andCodeExpr{
																												pos: position{line: 197, col: 5, offset: 5723},
																												run: (*parser).callonTagRanges70,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 3093, col: 8, offset: 100474},
							expr: &anyMatcher{
								line: 3093, col: 9, offset: 100475,
							},
						},
					},
				},
			},
		},
		{
			name: "IncludedFileLine",
			pos:  position{line: 204, col: 1, offset: 5890},
			expr: &actionExpr{
				pos: position{line: 204, col: 21, offset: 5910},
				run: (*parser).callonIncludedFileLine1,
				expr: &seqExpr{
					pos: position{line: 204, col: 21, offset: 5910},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 204, col: 21, offset: 5910},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 204, col: 29, offset: 5918},
								expr: &choiceExpr{
									pos: position{line: 204, col: 30, offset: 5919},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 208, col: 25, offset: 6099},
											run: (*parser).callonIncludedFileLine6,
											expr: &seqExpr{
												pos: position{line: 208, col: 25, offset: 6099},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 208, col: 25, offset: 6099},
														val:        "tag::",
														ignoreCase: false,
														want:       "\"tag::\"",
													},
													&labeledExpr{
														pos:   position{line: 208, col: 33, offset: 6107},
														label: "tag",
														expr: &actionExpr{
															pos: position{line: 208, col: 38, offset: 6112},
															run: (*parser).callonIncludedFileLine10,
															expr: &actionExpr{
																pos: position{line: 2998, col: 14, offset: 97537},
																run: (*parser).callonIncludedFileLine11,
																expr: &oneOrMoreExpr{
																	pos: position{line: 2998, col: 14, offset: 97537},
																	expr: &charClassMatcher{
																		pos:        position{line: 2998, col: 14, offset: 97537},
																		val:        "[0-9\\pL]",
																		ranges:     []rune{'0', '9'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 208, col: 78, offset: 6152},
														val:        "[]",
														ignoreCase: false,
														want:       "\"[]\"",
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 212, col: 23, offset: 6247},
											run: (*parser).callonIncludedFileLine15,
											expr: &seqExpr{
												pos: position{line: 212, col: 23, offset: 6247},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 212, col: 23, offset: 6247},
														val:        "end::",
														ignoreCase: false,
														want:       "\"end::\"",
													},
													&labeledExpr{
														pos:   position{line: 212, col: 31, offset: 6255},
														label: "tag",
														expr: &actionExpr{
															pos: position{line: 212, col: 36, offset: 6260},
															run: (*parser).callonIncludedFileLine19,
															expr: &actionExpr{
																pos: position{line: 2998, col: 14, offset: 97537},
																run: (*parser).callonIncludedFileLine20,
																expr: &oneOrMoreExpr{
																	pos: position{line: 2998, col: 14, offset: 97537},
																	expr: &charClassMatcher{
																		pos:        position{line: 2998, col: 14, offset: 97537},
																		val:        "[0-9\\pL]",
																		ranges:     []rune{'0', '9'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 212, col: 76, offset: 6300},
														val:        "[]",
														ignoreCase: false,
														want:       "\"[]\"",
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 204, col: 74, offset: 5963},
											run: (*parser).callonIncludedFileLine24,
											expr: &anyMatcher{
												line: 204, col: 74, offset: 5963,
											},
										},
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 3096, col: 8, offset: 100524},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 3089, col: 12, offset: 100384},
									run: (*parser).callonIncludedFileLine27,
									expr: &choiceExpr{
										pos: position{line: 3089, col: 13, offset: 100385},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 3089, col: 13, offset: 100385},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
											&litMatcher{
												pos:        position{line: 3089, col: 20, offset: 100392},
												val:        "\r\n",
												ignoreCase: false,
												want:       "\"\\r\\n\"",
											},
											&litMatcher{
												pos:        position{line: 3089, col: 29, offset: 100401},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 3093, col: 8, offset: 100474},
									expr: &anyMatcher{
										line: 3093, col: 9, offset: 100475,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentFragment",
			pos:  position{line: 228, col: 1, offset: 6786},
			expr: &actionExpr{
				pos: position{line: 229, col: 5, offset: 6810},
				run: (*parser).callonDocumentFragment1,
				expr: &seqExpr{
					pos: position{line: 229, col: 5, offset: 6810},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 229, col: 5, offset: 6810},
							expr: &notExpr{
								pos: position{line: 3093, col: 8, offset: 100474},
								expr: &anyMatcher{
									line: 3093, col: 9, offset: 100475,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 230, col: 5, offset: 6819},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 230, col: 16, offset: 6830},
								expr: &ruleRefExpr{
									pos:  position{line: 230, col: 17, offset: 6831},
									name: "BlockAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 231, col: 5, offset: 6853},
							label: "element",
							expr: &zeroOrOneExpr{
								pos: position{line: 231, col: 13, offset: 6861},
								expr: &choiceExpr{
									pos: position{line: 232, col: 9, offset: 6871},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 232, col: 9, offset: 6871},
											name: "ImageBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 233, col: 11, offset: 6932},
											name: "UserMacroBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 234, col: 11, offset: 6997},
											name: "ShortcutParagraph",
										},
										&ruleRefExpr{
											pos:  position{line: 235, col: 11, offset: 7025},
											name: "DocumentHeader",
										},
										&ruleRefExpr{
											pos:  position{line: 236, col: 11, offset: 7105},
											name: "AttributeDeclaration",
										},
										&actionExpr{
											pos: position{line: 364, col: 19, offset: 11171},
											run: (*parser).callonDocumentFragment17,
											expr: &seqExpr{
												pos: position{line: 364, col: 19, offset: 11171},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 364, col: 19, offset: 11171},
														val:        ":!",
														ignoreCase: false,
														want:       "\":!\"",
													},
													&labeledExpr{
														pos:   position{line: 364, col: 24, offset: 11176},
														label: "name",
														expr: &actionExpr{
															pos: position{line: 324, col: 18, offset: 10072},
															run: (*parser).callonDocumentFragment21,
															expr: &seqExpr{
																pos: position{line: 324, col: 18, offset: 10072},
																exprs: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 324, col: 18, offset: 10072},
																		val:        "[_0-9\\pL]",
																		chars:      []rune{'_'},
																		ranges:     []rune{'0', '9'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 324, col: 28, offset: 10082},
																		expr: &charClassMatcher{
																			pos:        position{line: 324, col: 29, offset: 10083},
																			val:        "[-0-9\\pL]",
																			chars:      []rune{'-'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 364, col: 45, offset: 11197},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
													&zeroOrMoreExpr{
														pos: position{line: 364, col: 49, offset: 11201},
														expr: &actionExpr{
															pos: position{line: 3080, col: 10, offset: 100200},
															run: (*parser).callonDocumentFragment28,
															expr: &charClassMatcher{
																pos:        position{line: 3080, col: 11, offset: 100201},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&choiceExpr{
														pos: position{line: 3096, col: 8, offset: 100524},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 3089, col: 12, offset: 100384},
																run: (*parser).callonDocumentFragment31,
																expr: &choiceExpr{
																	pos: position{line: 3089, col: 13, offset: 100385},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 3089, col: 13, offset: 100385},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 3089, col: 20, offset: 100392},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 3089, col: 29, offset: 100401},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 3093, col: 8, offset: 100474},
																expr: &anyMatcher{
																	line: 3093, col: 9, offset: 100475,
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 366, col: 9, offset: 11292},
											run: (*parser).callonDocumentFragment38,
											expr: &seqExpr{
												pos: position{line: 366, col: 9, offset: 11292},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 366, col: 9, offset: 11292},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
													&labeledExpr{
														pos:   position{line: 366, col: 13, offset: 11296},
														label: "name",
														expr: &actionExpr{
															pos: position{line: 324, col: 18, offset: 10072},
															run: (*parser).callonDocumentFragment42,
															expr: &seqExpr{
																pos: position{line: 324, col: 18, offset: 10072},
																exprs: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 324, col: 18, offset: 10072},
																		val:        "[_0-9\\pL]",
																		chars:      []rune{'_'},
																		ranges:     []rune{'0', '9'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 324, col: 28, offset: 10082},
																		expr: &charClassMatcher{
																			pos:        position{line: 324, col: 29, offset: 10083},
																			val:        "[-0-9\\pL]",
																			chars:      []rune{'-'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 366, col: 34, offset: 11317},
														val:        "!:",
														ignoreCase: false,
														want:       "\"!:\"",
													},
													&zeroOrMoreExpr{
														pos: position{line: 366, col: 39, offset: 11322},
														expr: &actionExpr{
															pos: position{line: 3080, col: 10, offset: 100200},
															run: (*parser).callonDocumentFragment49,
															expr: &charClassMatcher{
																pos:        position{line: 3080, col: 11, offset: 100201},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&choiceExpr{
														pos: position{line: 3096, col: 8, offset: 100524},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 3089, col: 12, offset: 100384},
																run: (*parser).callonDocumentFragment52,
																expr: &choiceExpr{
																	pos: position{line: 3089, col: 13, offset: 100385},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 3089, col: 13, offset: 100385},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 3089, col: 20, offset: 100392},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 3089, col: 29, offset: 100401},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 3093, col: 8, offset: 100474},
																expr: &anyMatcher{
																	line: 3093, col: 9, offset: 100475,
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 690, col: 14, offset: 22312},
											run: (*parser).callonDocumentFragment59,
											expr: &seqExpr{
												pos: position{line: 690, col: 14, offset: 22312},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 690, col: 14, offset: 22312},
														expr: &notExpr{
															pos: position{line: 3093, col: 8, offset: 100474},
															expr: &anyMatcher{
																line: 3093, col: 9, offset: 100475,
															},
														},
													},
													&zeroOrMoreExpr{
														pos: position{line: 690, col: 19, offset: 22317},
														expr: &actionExpr{
															pos: position{line: 3080, col: 10, offset: 100200},
															run: (*parser).callonDocumentFragment65,
															expr: &charClassMatcher{
																pos:        position{line: 3080, col: 11, offset: 100201},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&choiceExpr{
														pos: position{line: 3096, col: 8, offset: 100524},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 3089, col: 12, offset: 100384},
																run: (*parser).callonDocumentFragment68,
																expr: &choiceExpr{
																	pos: position{line: 3089, col: 13, offset: 100385},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 3089, col: 13, offset: 100385},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 3089, col: 20, offset: 100392},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 3089, col: 29, offset: 100401},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 3093, col: 8, offset: 100474},
																expr: &anyMatcher{
																	line: 3093, col: 9, offset: 100475,
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 2624, col: 5, offset: 86461},
											run: (*parser).callonDocumentFragment75,
											expr: &seqExpr{
												pos: position{line: 2624, col: 5, offset: 86461},
												exprs: []interface{}{
													&andCodeExpr{
														pos: position{line: 2624, col: 5, offset: 86461},
														run: (*parser).callonDocumentFragment77,
													},
													&labeledExpr{
														pos:   position{line: 2627, col: 5, offset: 86524},
														label: "level",
														expr: &actionExpr{
															pos: position{line: 2627, col: 12, offset: 86531},
															run: (*parser).callonDocumentFragment79,
															expr: &oneOrMoreExpr{
																pos: position{line: 2627, col: 12, offset: 86531},
																expr: &litMatcher{
																	pos:        position{line: 2627, col: 13, offset: 86532},
																	val:        "=",
																	ignoreCase: false,
																	want:       "\"=\"",
																},
															},
														},
													},
													&andCodeExpr{
														pos: position{line: 2631, col: 5, offset: 86640},
														run: (*parser).callonDocumentFragment82,
													},
													&actionExpr{
														pos: position{line: 3084, col: 11, offset: 100267},
														run: (*parser).callonDocumentFragment83,
														expr: &oneOrMoreExpr{
															pos: position{line: 3084, col: 11, offset: 100267},
															expr: &charClassMatcher{
																pos:        position{line: 3084, col: 12, offset: 100268},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 2635, col: 12, offset: 86799},
														label: "title",
														expr: &actionExpr{
															pos: position{line: 2639, col: 17, offset: 86918},
															run: (*parser).callonDocumentFragment87,
															expr: &oneOrMoreExpr{
																pos: position{line: 2639, col: 17, offset: 86918},
																expr: &charClassMatcher{
																	pos:        position{line: 2639, col: 17, offset: 86918},
																	val:        "[^\\r\\n]",
																	chars:      []rune{'\r', '\n'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
													},
													&choiceExpr{
														pos: position{line: 3096, col: 8, offset: 100524},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 3089, col: 12, offset: 100384},
																run: (*parser).callonDocumentFragment91,
																expr: &choiceExpr{
																	pos: position{line: 3089, col: 13, offset: 100385},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 3089, col: 13, offset: 100385},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 3089, col: 20, offset: 100392},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 3089, col: 29, offset: 100401},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 3093, col: 8, offset: 100474},
																expr: &anyMatcher{
																	line: 3093, col: 9, offset: 100475,
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 827, col: 5, offset: 26970},
											run: (*parser).callonDocumentFragment98,
											expr: &seqExpr{
												pos: position{line: 827, col: 5, offset: 26970},
												exprs: []interface{}{
													&actionExpr{
														pos: position{line: 752, col: 5, offset: 24389},
														run: (*parser).callonDocumentFragment100,
														expr: &seqExpr{
															pos: position{line: 752, col: 5, offset: 24389},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 752, col: 5, offset: 24389},
																	label: "delimiter",
																	expr: &actionExpr{
																		pos: position{line: 752, col: 16, offset: 24400},
																		run: (*parser).callonDocumentFragment103,
																		expr: &seqExpr{
																			pos: position{line: 752, col: 16, offset: 24400},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 752, col: 16, offset: 24400},
																					val:        "////",
																					ignoreCase: false,
																					want:       "\"////\"",
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 752, col: 23, offset: 24407},
																					expr: &litMatcher{
																						pos:        position{line: 752, col: 23, offset: 24407},
																						val:        "/",
																						ignoreCase: false,
																						want:       "\"/\"",
																					},
																				},
																			},
																		},
																	},
																},
																&zeroOrMoreExpr{
																	pos: position{line: 754, col: 8, offset: 24491},
																	expr: &actionExpr{
																		pos: position{line: 3080, col: 10, offset: 100200},
																		run: (*parser).callonDocumentFragment109,
																		expr: &charClassMatcher{
																			pos:        position{line: 3080, col: 11, offset: 100201},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 3096, col: 8, offset: 100524},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 3089, col: 12, offset: 100384},
																			run: (*parser).callonDocumentFragment112,
																			expr: &choiceExpr{
																				pos: position{line: 3089, col: 13, offset: 100385},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 3089, col: 13, offset: 100385},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 3089, col: 20, offset: 100392},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 3089, col: 29, offset: 100401},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 3093, col: 8, offset: 100474},
																			expr: &anyMatcher{
																				line: 3093, col: 9, offset: 100475,
																			},
																		},
																	},
																},
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 828, col: 5, offset: 27001},
														label: "content",
														expr: &zeroOrMoreExpr{
															pos: position{line: 838, col: 5, offset: 27287},
															expr: &actionExpr{
																pos: position{line: 838, col: 6, offset: 27288},
																run: (*parser).callonDocumentFragment121,
																expr: &seqExpr{
																	pos: position{line: 838, col: 6, offset: 27288},
																	exprs: []interface{}{
																		&notExpr{
																			pos: position{line: 838, col: 6, offset: 27288},
																			expr: &choiceExpr{
																				pos: position{line: 835, col: 29, offset: 27230},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 752, col: 5, offset: 24389},
																						run: (*parser).callonDocumentFragment125,
																						expr: &seqExpr{
																							pos: position{line: 752, col: 5, offset: 24389},
																							exprs: []interface{}{
																								&labeledExpr{
																									pos:   position{line: 752, col: 5, offset: 24389},
																									label: "delimiter",
																									expr: &actionExpr{
																										pos: position{line: 752, col: 16, offset: 24400},
																										run: (*parser).callonDocumentFragment128,
																										expr: &seqExpr{
																											pos: position{line: 752, col: 16, offset: 24400},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 752, col: 16, offset: 24400},
																													val:        "////",
																													ignoreCase: false,
																													want:       "\"////\"",
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 752, col: 23, offset: 24407},
																													expr: &litMatcher{
																														pos:        position{line: 752, col: 23, offset: 24407},
																														val:        "/",
																														ignoreCase: false,
																														want:       "\"/\"",
																													},
																												},
																											},
																										},
																									},
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 754, col: 8, offset: 24491},
																									expr: &actionExpr{
																										pos: position{line: 3080, col: 10, offset: 100200},
																										run: (*parser).callonDocumentFragment134,
																										expr: &charClassMatcher{
																											pos:        position{line: 3080, col: 11, offset: 100201},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 3096, col: 8, offset: 100524},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 3089, col: 12, offset: 100384},
																											run: (*parser).callonDocumentFragment137,
																											expr: &choiceExpr{
																												pos: position{line: 3089, col: 13, offset: 100385},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 3089, col: 13, offset: 100385},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 3089, col: 20, offset: 100392},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 3089, col: 29, offset: 100401},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 3093, col: 8, offset: 100474},
																											expr: &anyMatcher{
																												line: 3093, col: 9, offset: 100475,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 3093, col: 8, offset: 100474},
																						expr: &anyMatcher{
																							line: 3093, col: 9, offset: 100475,
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 839, col: 5, offset: 27318},
																			label: "line",
																			expr: &actionExpr{
																				pos: position{line: 816, col: 5, offset: 26665},
																				run: (*parser).callonDocumentFragment147,
																				expr: &seqExpr{
																					pos: position{line: 816, col: 5, offset: 26665},
																					exprs: []interface{}{
																						&notExpr{
																							pos: position{line: 816, col: 5, offset: 26665},
																							expr: &notExpr{
																								pos: position{line: 3093, col: 8, offset: 100474},
																								expr: &anyMatcher{
																									line: 3093, col: 9, offset: 100475,
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 817, col: 5, offset: 26738},
																							label: "content",
																							expr: &actionExpr{
																								pos: position{line: 817, col: 14, offset: 26747},
																								run: (*parser).callonDocumentFragment153,
																								expr: &zeroOrMoreExpr{
																									pos: position{line: 817, col: 14, offset: 26747},
																									expr: &charClassMatcher{
																										pos:        position{line: 817, col: 14, offset: 26747},
																										val:        "[^\\r\\n]",
																										chars:      []rune{'\r', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 3096, col: 8, offset: 100524},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 3089, col: 12, offset: 100384},
																									run: (*parser).callonDocumentFragment157,
																									expr: &choiceExpr{
																										pos: position{line: 3089, col: 13, offset: 100385},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 3089, col: 13, offset: 100385},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 3089, col: 20, offset: 100392},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 3089, col: 29, offset: 100401},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 3093, col: 8, offset: 100474},
																									expr: &anyMatcher{
																										line: 3093, col: 9, offset: 100475,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&zeroOrOneExpr{
														pos: position{line: 829, col: 5, offset: 27035},
														expr: &choiceExpr{
															pos: position{line: 835, col: 29, offset: 27230},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 752, col: 5, offset: 24389},
																	run: (*parser).callonDocumentFragment166,
																	expr: &seqExpr{
																		pos: position{line: 752, col: 5, offset: 24389},
																		exprs: []interface{}{
																			&labeledExpr{
																				pos:   position{line: 752, col: 5, offset: 24389},
																				label: "delimiter",
																				expr: &actionExpr{
																					pos: position{line: 752, col: 16, offset: 24400},
																					run: (*parser).callonDocumentFragment169,
																					expr: &seqExpr{
																						pos: position{line: 752, col: 16, offset: 24400},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 752, col: 16, offset: 24400},
																								val:        "////",
																								ignoreCase: false,
																								want:       "\"////\"",
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 752, col: 23, offset: 24407},
																								expr: &litMatcher{
																									pos:        position{line: 752, col: 23, offset: 24407},
																									val:        "/",
																									ignoreCase: false,
																									want:       "\"/\"",
																								},
																							},
																						},
																					},
																				},
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 754, col: 8, offset: 24491},
																				expr: &actionExpr{
																					pos: position{line: 3080, col: 10, offset: 100200},
																					run: (*parser).callonDocumentFragment175,
																					expr: &charClassMatcher{
																						pos:        position{line: 3080, col: 11, offset: 100201},
																						val:        "[ \\t]",
																						chars:      []rune{' ', '\t'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 3096, col: 8, offset: 100524},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 3089, col: 12, offset: 100384},
																						run: (*parser).callonDocumentFragment178,
																						expr: &choiceExpr{
																							pos: position{line: 3089, col: 13, offset: 100385},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 3089, col: 13, offset: 100385},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 3089, col: 20, offset: 100392},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 3089, col: 29, offset: 100401},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 3093, col: 8, offset: 100474},
																						expr: &anyMatcher{
																							line: 3093, col: 9, offset: 100475,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 3093, col: 8, offset: 100474},
																	expr: &anyMatcher{
																		line: 3093, col: 9, offset: 100475,
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 847, col: 5, offset: 27471},
											run: (*parser).callonDocumentFragment187,
											expr: &seqExpr{
												pos: position{line: 847, col: 5, offset: 27471},
												exprs: []interface{}{
													&labeledExpr{
														pos:   position{line: 847, col: 5, offset: 27471},
														label: "start",
														expr: &actionExpr{
															pos: position{line: 759, col: 5, offset: 24637},
															run: (*parser).callonDocumentFragment190,
															expr: &seqExpr{
																pos: position{line: 759, col: 5, offset: 24637},
																exprs: []interface{}{
																	&labeledExpr{
																		pos:   position{line: 759, col: 5, offset: 24637},
																		label: "delimiter",
																		expr: &actionExpr{
																			pos: position{line: 759, col: 16, offset: 24648},
																			run: (*parser).callonDocumentFragment193,
																			expr: &seqExpr{
																				pos: position{line: 759, col: 16, offset: 24648},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 759, col: 16, offset: 24648},
																						val:        "====",
																						ignoreCase: false,
																						want:       "\"====\"",
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 759, col: 23, offset: 24655},
																						expr: &litMatcher{
																							pos:        position{line: 759, col: 23, offset: 24655},
																							val:        "=",
																							ignoreCase: false,
																							want:       "\"=\"",
																						},
																					},
																				},
																			},
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 761, col: 8, offset: 24739},
																		expr: &actionExpr{
																			pos: position{line: 3080, col: 10, offset: 100200},
																			run: (*parser).callonDocumentFragment199,
																			expr: &charClassMatcher{
																				pos:        position{line: 3080, col: 11, offset: 100201},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 3096, col: 8, offset: 100524},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 3089, col: 12, offset: 100384},
																				run: (*parser).callonDocumentFragment202,
																				expr: &choiceExpr{
																					pos: position{line: 3089, col: 13, offset: 100385},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 3089, col: 13, offset: 100385},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 3089, col: 20, offset: 100392},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 3089, col: 29, offset: 100401},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3093, col: 8, offset: 100474},
																				expr: &anyMatcher{
																					line: 3093, col: 9, offset: 100475,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&andCodeExpr{
														pos: position{line: 848, col: 5, offset: 27510},
														run: (*parser).callonDocumentFragment209,
													},
													&labeledExpr{
														pos:   position{line: 851, col: 5, offset: 27602},
														label: "content",
														expr: &zeroOrMoreExpr{
															pos: position{line: 866, col: 4, offset: 27999},
															expr: &actionExpr{
																pos: position{line: 866, col: 5, offset: 28000},
																run: (*parser).callonDocumentFragment212,
																expr: &seqExpr{
																	pos: position{line: 866, col: 5, offset: 28000},
																	exprs: []interface{}{
																		&notExpr{
																			pos: position{line: 866, col: 5, offset: 28000},
																			expr: &choiceExpr{
																				pos: position{line: 859, col: 5, offset: 27842},
																				alternatives: []interface{}{
																					&seqExpr{
																						pos: position{line: 859, col: 5, offset: 27842},
																						exprs: []interface{}{
																							&labeledExpr{
																								pos:   position{line: 859, col: 5, offset: 27842},
																								label: "end",
																								expr: &actionExpr{
																									pos: position{line: 759, col: 5, offset: 24637},
																									run: (*parser).callonDocumentFragment218,
																									expr: &seqExpr{
																										pos: position{line: 759, col: 5, offset: 24637},
																										exprs: []interface{}{
																											&labeledExpr{
																												pos:   position{line: 759, col: 5, offset: 24637},
																												label: "delimiter",
																												expr: &actionExpr{
																													pos: position{line: 759, col: 16, offset: 24648},
																													run: (*parser).callonDocumentFragment221,
																													expr: &seqExpr{
																														pos: position{line: 759, col: 16, offset: 24648},
																														exprs: []interface{}{
																															&litMatcher{
																																pos:        position{line: 759, col: 16, offset: 24648},
																																val:        "====",
																																ignoreCase: false,
																																want:       "\"====\"",
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 759, col: 23, offset: 24655},
																																expr: &litMatcher{
																																	pos:        position{line: 759, col: 23, offset: 24655},
																																	val:        "=",
																																	ignoreCase: false,
																																	want:       "\"=\"",
																																},
																															},
																														},
																													},
																												},
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 761, col: 8, offset: 24739},
																												expr: &actionExpr{
																													pos: position{line: 3080, col: 10, offset: 100200},
																													run: (*parser).callonDocumentFragment227,
																													expr: &charClassMatcher{
																														pos:        position{line: 3080, col: 11, offset: 100201},
																														val:        "[ \\t]",
																														chars:      []rune{' ', '\t'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 3096, col: 8, offset: 100524},
																												alternatives: []interface{}{
																													&actionExpr{
																														pos: position{line: 3089, col: 12, offset: 100384},
																														run: (*parser).callonDocumentFragment230,
																														expr: &choiceExpr{
																															pos: position{line: 3089, col: 13, offset: 100385},
																															alternatives: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 3089, col: 13, offset: 100385},
																																	val:        "\n",
																																	ignoreCase: false,
																																	want:       "\"\\n\"",
																																},
																																&litMatcher{
																																	pos:        position{line: 3089, col: 20, offset: 100392},
																																	val:        "\r\n",
																																	ignoreCase: false,
																																	want:       "\"\\r\\n\"",
																																},
																																&litMatcher{
																																	pos:        position{line: 3089, col: 29, offset: 100401},
																																	val:        "\r",
																																	ignoreCase: false,
																																	want:       "\"\\r\"",
																																},
																															},
																														},
																													},
																													&notExpr{
																														pos: position{line: 3093, col: 8, offset: 100474},
																														expr: &anyMatcher{
																															line: 3093, col: 9, offset: 100475,
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&andCodeExpr{
																								pos: position{line: 860, col: 5, offset: 27873},
																								run: (*parser).callonDocumentFragment237,
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 3093, col: 8, offset: 100474},
																						expr: &anyMatcher{
																							line: 3093, col: 9, offset: 100475,
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 867, col: 5, offset: 28030},
																			label: "line",
																			expr: &actionExpr{
																				pos: position{line: 816, col: 5, offset: 26665},
																				run: (*parser).callonDocumentFragment241,
																				expr: &seqExpr{
																					pos: position{line: 816, col: 5, offset: 26665},
																					exprs: []interface{}{
																						&notExpr{
																							pos: position{line: 816, col: 5, offset: 26665},
																							expr: &notExpr{
																								pos: position{line: 3093, col: 8, offset: 100474},
																								expr: &anyMatcher{
																									line: 3093, col: 9, offset: 100475,
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 817, col: 5, offset: 26738},
																							label: "content",
																							expr: &actionExpr{
																								pos: position{line: 817, col: 14, offset: 26747},
																								run: (*parser).callonDocumentFragment247,
																								expr: &zeroOrMoreExpr{
																									pos: position{line: 817, col: 14, offset: 26747},
																									expr: &charClassMatcher{
																										pos:        position{line: 817, col: 14, offset: 26747},
																										val:        "[^\\r\\n]",
																										chars:      []rune{'\r', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 3096, col: 8, offset: 100524},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 3089, col: 12, offset: 100384},
																									run: (*parser).callonDocumentFragment251,
																									expr: &choiceExpr{
																										pos: position{line: 3089, col: 13, offset: 100385},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 3089, col: 13, offset: 100385},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 3089, col: 20, offset: 100392},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 3089, col: 29, offset: 100401},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 3093, col: 8, offset: 100474},
																									expr: &anyMatcher{
																										line: 3093, col: 9, offset: 100475,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 852, col: 5, offset: 27636},
														label: "end",
														expr: &zeroOrOneExpr{
															pos: position{line: 852, col: 9, offset: 27640},
															expr: &choiceExpr{
																pos: position{line: 859, col: 5, offset: 27842},
																alternatives: []interface{}{
																	&seqExpr{
																		pos: position{line: 859, col: 5, offset: 27842},
																		exprs: []interface{}{
																			&labeledExpr{
																				pos:   position{line: 859, col: 5, offset: 27842},
																				label: "end",
																				expr: &actionExpr{
																					pos: position{line: 759, col: 5, offset: 24637},
																					run: (*parser).callonDocumentFragment263,
																					expr: &seqExpr{
																						pos: position{line: 759, col: 5, offset: 24637},
																						exprs: []interface{}{
																							&labeledExpr{
																								pos:   position{line: 759, col: 5, offset: 24637},
																								label: "delimiter",
																								expr: &actionExpr{
																									pos: position{line: 759, col: 16, offset: 24648},
																									run: (*parser).callonDocumentFragment266,
																									expr: &seqExpr{
																										pos: position{line: 759, col: 16, offset: 24648},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 759, col: 16, offset: 24648},
																												val:        "====",
																												ignoreCase: false,
																												want:       "\"====\"",
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 759, col: 23, offset: 24655},
																												expr: &litMatcher{
																													pos:        position{line: 759, col: 23, offset: 24655},
																													val:        "=",
																													ignoreCase: false,
																													want:       "\"=\"",
																												},
																											},
																										},
																									},
																								},
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 761, col: 8, offset: 24739},
																								expr: &actionExpr{
																									pos: position{line: 3080, col: 10, offset: 100200},
																									run: (*parser).callonDocumentFragment272,
																									expr: &charClassMatcher{
																										pos:        position{line: 3080, col: 11, offset: 100201},
																										val:        "[ \\t]",
																										chars:      []rune{' ', '\t'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 3096, col: 8, offset: 100524},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 3089, col: 12, offset: 100384},
																										run: (*parser).callonDocumentFragment275,
																										expr: &choiceExpr{
																											pos: position{line: 3089, col: 13, offset: 100385},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 3089, col: 13, offset: 100385},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 3089, col: 20, offset: 100392},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 3089, col: 29, offset: 100401},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 3093, col: 8, offset: 100474},
																										expr: &anyMatcher{
																											line: 3093, col: 9, offset: 100475,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&andCodeExpr{
																				pos: position{line: 860, col: 5, offset: 27873},
																				run: (*parser).callonDocumentFragment282,
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 3093, col: 8, offset: 100474},
																		expr: &anyMatcher{
																			line: 3093, col: 9, offset: 100475,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 959, col: 5, offset: 30322},
											run: (*parser).callonDocumentFragment285,
											expr: &seqExpr{
												pos: position{line: 959, col: 5, offset: 30322},
												exprs: []interface{}{
													&labeledExpr{
														pos:   position{line: 959, col: 5, offset: 30322},
														label: "delimiter",
														expr: &actionExpr{
															pos: position{line: 772, col: 26, offset: 25125},
															run: (*parser).callonDocumentFragment288,
															expr: &seqExpr{
																pos: position{line: 772, col: 26, offset: 25125},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 772, col: 26, offset: 25125},
																		val:        "```",
																		ignoreCase: false,
																		want:       "\"```\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 772, col: 32, offset: 25131},
																		label: "language",
																		expr: &actionExpr{
																			pos: position{line: 776, col: 13, offset: 25261},
																			run: (*parser).callonDocumentFragment292,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 776, col: 14, offset: 25262},
																				expr: &charClassMatcher{
																					pos:        position{line: 776, col: 14, offset: 25262},
																					val:        "[^\\r\\n` ]",
																					chars:      []rune{'\r', '\n', '`', ' '},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 772, col: 52, offset: 25151},
																		expr: &actionExpr{
																			pos: position{line: 3080, col: 10, offset: 100200},
																			run: (*parser).callonDocumentFragment296,
																			expr: &charClassMatcher{
																				pos:        position{line: 3080, col: 11, offset: 100201},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 3096, col: 8, offset: 100524},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 3089, col: 12, offset: 100384},
																				run: (*parser).callonDocumentFragment299,
																				expr: &choiceExpr{
																					pos: position{line: 3089, col: 13, offset: 100385},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 3089, col: 13, offset: 100385},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 3089, col: 20, offset: 100392},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 3089, col: 29, offset: 100401},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3093, col: 8, offset: 100474},
																				expr: &anyMatcher{
																					line: 3093, col: 9, offset: 100475,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 960, col: 5, offset: 30368},
														label: "content",
														expr: &zeroOrMoreExpr{
															pos: position{line: 973, col: 5, offset: 30841},
															expr: &actionExpr{
																pos: position{line: 973, col: 6, offset: 30842},
																run: (*parser).callonDocumentFragment308,
																expr: &seqExpr{
																	pos: position{line: 973, col: 6, offset: 30842},
																	exprs: []interface{}{
																		&notExpr{
																			pos: position{line: 973, col: 6, offset: 30842},
																			expr: &seqExpr{
																				pos: position{line: 970, col: 34, offset: 30789},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 970, col: 34, offset: 30789},
																						val:        "```",
																						ignoreCase: false,
																						want:       "\"```\"",
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 970, col: 40, offset: 30795},
																						expr: &actionExpr{
																							pos: position{line: 3080, col: 10, offset: 100200},
																							run: (*parser).callonDocumentFragment314,
																							expr: &charClassMatcher{
																								pos:        position{line: 3080, col: 11, offset: 100201},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 3096, col: 8, offset: 100524},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 3089, col: 12, offset: 100384},
																								run: (*parser).callonDocumentFragment317,
																								expr: &choiceExpr{
																									pos: position{line: 3089, col: 13, offset: 100385},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 3089, col: 13, offset: 100385},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 3089, col: 20, offset: 100392},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 3089, col: 29, offset: 100401},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 3093, col: 8, offset: 100474},
																								expr: &anyMatcher{
																									line: 3093, col: 9, offset: 100475,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 974, col: 5, offset: 30877},
																			label: "line",
																			expr: &actionExpr{
																				pos: position{line: 816, col: 5, offset: 26665},
																				run: (*parser).callonDocumentFragment325,
																				expr: &seqExpr{
																					pos: position{line: 816, col: 5, offset: 26665},
																					exprs: []interface{}{
																						&notExpr{
																							pos: position{line: 816, col: 5, offset: 26665},
																							expr: &notExpr{
																								pos: position{line: 3093, col: 8, offset: 100474},
																								expr: &anyMatcher{
																									line: 3093, col: 9, offset: 100475,
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 817, col: 5, offset: 26738},
																							label: "content",
																							expr: &actionExpr{
																								pos: position{line: 817, col: 14, offset: 26747},
																								run: (*parser).callonDocumentFragment331,
																								expr: &zeroOrMoreExpr{
																									pos: position{line: 817, col: 14, offset: 26747},
																									expr: &charClassMatcher{
																										pos:        position{line: 817, col: 14, offset: 26747},
																										val:        "[^\\r\\n]",
																										chars:      []rune{'\r', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 3096, col: 8, offset: 100524},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 3089, col: 12, offset: 100384},
																									run: (*parser).callonDocumentFragment335,
																									expr: &choiceExpr{
																										pos: position{line: 3089, col: 13, offset: 100385},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 3089, col: 13, offset: 100385},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 3089, col: 20, offset: 100392},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 3089, col: 29, offset: 100401},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 3093, col: 8, offset: 100474},
																									expr: &anyMatcher{
																										line: 3093, col: 9, offset: 100475,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&zeroOrOneExpr{
														pos: position{line: 961, col: 5, offset: 30407},
														expr: &seqExpr{
															pos: position{line: 970, col: 34, offset: 30789},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 970, col: 34, offset: 30789},
																	val:        "```",
																	ignoreCase: false,
																	want:       "\"```\"",
																},
																&zeroOrMoreExpr{
																	pos: position{line: 970, col: 40, offset: 30795},
																	expr: &actionExpr{
																		pos: position{line: 3080, col: 10, offset: 100200},
																		run: (*parser).callonDocumentFragment346,
																		expr: &charClassMatcher{
																			pos:        position{line: 3080, col: 11, offset: 100201},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 3096, col: 8, offset: 100524},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 3089, col: 12, offset: 100384},
																			run: (*parser).callonDocumentFragment349,
																			expr: &choiceExpr{
																				pos: position{line: 3089, col: 13, offset: 100385},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 3089, col: 13, offset: 100385},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 3089, col: 20, offset: 100392},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 3089, col: 29, offset: 100401},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 3093, col: 8, offset: 100474},
																			expr: &anyMatcher{
																				line: 3093, col: 9, offset: 100475,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 875, col: 5, offset: 28183},
											run: (*parser).callonDocumentFragment356,
											expr: &seqExpr{
												pos: position{line: 875, col: 5, offset: 28183},
												exprs: []interface{}{
													&labeledExpr{
														pos:   position{line: 875, col: 5, offset: 28183},
														label: "start",
														expr: &actionExpr{
															pos: position{line: 766, col: 5, offset: 24884},
															run: (*parser).callonDocumentFragment359,
															expr: &seqExpr{
																pos: position{line: 766, col: 5, offset: 24884},
																exprs: []interface{}{
																	&labeledExpr{
																		pos:   position{line: 766, col: 5, offset: 24884},
																		label: "delimiter",
																		expr: &actionExpr{
																			pos: position{line: 766, col: 16, offset: 24895},
																			run: (*parser).callonDocumentFragment362,
																			expr: &seqExpr{
																				pos: position{line: 766, col: 16, offset: 24895},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 766, col: 16, offset: 24895},
																						val:        "```",
																						ignoreCase: false,
																						want:       "\"```\"",
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 766, col: 22, offset: 24901},
																						expr: &litMatcher{
																							pos:        position{line: 766, col: 22, offset: 24901},
																							val:        "`",
																							ignoreCase: false,
																							want:       "\"`\"",
																						},
																					},
																				},
																			},
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 768, col: 8, offset: 24985},
																		expr: &actionExpr{
																			pos: position{line: 3080, col: 10, offset: 100200},
																			run: (*parser).callonDocumentFragment368,
																			expr: &charClassMatcher{
																				pos:        position{line: 3080, col: 11, offset: 100201},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 3096, col: 8, offset: 100524},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 3089, col: 12, offset: 100384},
																				run: (*parser).callonDocumentFragment371,
																				expr: &choiceExpr{
																					pos: position{line: 3089, col: 13, offset: 100385},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 3089, col: 13, offset: 100385},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 3089, col: 20, offset: 100392},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 3089, col: 29, offset: 100401},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3093, col: 8, offset: 100474},
																				expr: &anyMatcher{
																					line: 3093, col: 9, offset: 100475,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&andCodeExpr{
														pos: position{line: 876, col: 5, offset: 28221},
														run: (*parser).callonDocumentFragment378,
													},
													&labeledExpr{
														pos:   position{line: 879, col: 5, offset: 28313},
														label: "content",
														expr: &zeroOrMoreExpr{
															pos: position{line: 894, col: 5, offset: 28703},
															expr: &actionExpr{
																pos: position{line: 894, col: 6, offset: 28704},
																run: (*parser).callonDocumentFragment381,
																expr: &seqExpr{
																	pos: position{line: 894, col: 6, offset: 28704},
																	exprs: []interface{}{
																		&notExpr{
																			pos: position{line: 894, col: 6, offset: 28704},
																			expr: &choiceExpr{
																				pos: position{line: 887, col: 5, offset: 28547},
																				alternatives: []interface{}{
																					&seqExpr{
																						pos: position{line: 887, col: 5, offset: 28547},
																						exprs: []interface{}{
																							&labeledExpr{
																								pos:   position{line: 887, col: 5, offset: 28547},
																								label: "end",
																								expr: &actionExpr{
																									pos: position{line: 766, col: 5, offset: 24884},
																									run: (*parser).callonDocumentFragment387,
																									expr: &seqExpr{
																										pos: position{line: 766, col: 5, offset: 24884},
																										exprs: []interface{}{
																											&labeledExpr{
																												pos:   position{line: 766, col: 5, offset: 24884},
																												label: "delimiter",
																												expr: &actionExpr{
																													pos: position{line: 766, col: 16, offset: 24895},
																													run: (*parser).callonDocumentFragment390,
																													expr: &seqExpr{
																														pos: position{line: 766, col: 16, offset: 24895},
																														exprs: []interface{}{
																															&litMatcher{
																																pos:        position{line: 766, col: 16, offset: 24895},
																																val:        "```",
																																ignoreCase: false,
																																want:       "\"```\"",
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 766, col: 22, offset: 24901},
																																expr: &litMatcher{
																																	pos:        position{line: 766, col: 22, offset: 24901},
																																	val:        "`",
																																	ignoreCase: false,
																																	want:       "\"`\"",
																																},
																															},
																														},
																													},
																												},
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 768, col: 8, offset: 24985},
																												expr: &actionExpr{
																													pos: position{line: 3080, col: 10, offset: 100200},
																													run: (*parser).callonDocumentFragment396,
																													expr: &charClassMatcher{
																														pos:        position{line: 3080, col: 11, offset: 100201},
																														val:        "[ \\t]",
																														chars:      []rune{' ', '\t'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 3096, col: 8, offset: 100524},
																												alternatives: []interface{}{
																													&actionExpr{
																														pos: position{line: 3089, col: 12, offset: 100384},
																														run: (*parser).callonDocumentFragment399,
																														expr: &choiceExpr{
																															pos: position{line: 3089, col: 13, offset: 100385},
																															alternatives: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 3089, col: 13, offset: 100385},
																																	val:        "\n",
																																	ignoreCase: false,
																																	want:       "\"\\n\"",
																																},
																																&litMatcher{
																																	pos:        position{line: 3089, col: 20, offset: 100392},
																																	val:        "\r\n",
																																	ignoreCase: false,
																																	want:       "\"\\r\\n\"",
																																},
																																&litMatcher{
																																	pos:        position{line: 3089, col: 29, offset: 100401},
																																	val:        "\r",
																																	ignoreCase: false,
																																	want:       "\"\\r\"",
																																},
																															},
																														},
																													},
																													&notExpr{
																														pos: position{line: 3093, col: 8, offset: 100474},
																														expr: &anyMatcher{
																															line: 3093, col: 9, offset: 100475,
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&andCodeExpr{
																								pos: position{line: 888, col: 5, offset: 28577},
																								run: (*parser).callonDocumentFragment406,
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 3093, col: 8, offset: 100474},
																						expr: &anyMatcher{
																							line: 3093, col: 9, offset: 100475,
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 895, col: 5, offset: 28733},
																			label: "line",
																			expr: &actionExpr{
																				pos: position{line: 816, col: 5, offset: 26665},
																				run: (*parser).callonDocumentFragment410,
																				expr: &seqExpr{
																					pos: position{line: 816, col: 5, offset: 26665},
																					exprs: []interface{}{
																						&notExpr{
																							pos: position{line: 816, col: 5, offset: 26665},
																							expr: &notExpr{
																								pos: position{line: 3093, col: 8, offset: 100474},
																								expr: &anyMatcher{
																									line: 3093, col: 9, offset: 100475,
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 817, col: 5, offset: 26738},
																							label: "content",
																							expr: &actionExpr{
																								pos: position{line: 817, col: 14, offset: 26747},
																								run: (*parser).callonDocumentFragment416,
																								expr: &zeroOrMoreExpr{
																									pos: position{line: 817, col: 14, offset: 26747},
																									expr: &charClassMatcher{
																										pos:        position{line: 817, col: 14, offset: 26747},
																										val:        "[^\\r\\n]",
																										chars:      []rune{'\r', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 3096, col: 8, offset: 100524},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 3089, col: 12, offset: 100384},
																									run: (*parser).callonDocumentFragment420,
																									expr: &choiceExpr{
																										pos: position{line: 3089, col: 13, offset: 100385},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 3089, col: 13, offset: 100385},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 3089, col: 20, offset: 100392},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 3089, col: 29, offset: 100401},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 3093, col: 8, offset: 100474},
																									expr: &anyMatcher{
																										line: 3093, col: 9, offset: 100475,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 880, col: 5, offset: 28346},
														label: "end",
														expr: &zeroOrOneExpr{
															pos: position{line: 880, col: 9, offset: 28350},
															expr: &choiceExpr{
																pos: position{line: 887, col: 5, offset: 28547},
																alternatives: []interface{}{
																	&seqExpr{
																		pos: position{line: 887, col: 5, offset: 28547},
																		exprs: []interface{}{
																			&labeledExpr{
																				pos:   position{line: 887, col: 5, offset: 28547},
																				label: "end",
																				expr: &actionExpr{
																					pos: position{line: 766, col: 5, offset: 24884},
																					run: (*parser).callonDocumentFragment432,
																					expr: &seqExpr{
																						pos: position{line: 766, col: 5, offset: 24884},
																						exprs: []interface{}{
																							&labeledExpr{
																								pos:   position{line: 766, col: 5, offset: 24884},
																								label: "delimiter",
																								expr: &actionExpr{
																									pos: position{line: 766, col: 16, offset: 24895},
																									run: (*parser).callonDocumentFragment435,
																									expr: &seqExpr{
																										pos: position{line: 766, col: 16, offset: 24895},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 766, col: 16, offset: 24895},
																												val:        "```",
																												ignoreCase: false,
																												want:       "\"```\"",
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 766, col: 22, offset: 24901},
																												expr: &litMatcher{
																													pos:        position{line: 766, col: 22, offset: 24901},
																													val:        "`",
																													ignoreCase: false,
																													want:       "\"`\"",
																												},
																											},
																										},
																									},
																								},
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 768, col: 8, offset: 24985},
																								expr: &actionExpr{
																									pos: position{line: 3080, col: 10, offset: 100200},
																									run: (*parser).callonDocumentFragment441,
																									expr: &charClassMatcher{
																										pos:        position{line: 3080, col: 11, offset: 100201},
																										val:        "[ \\t]",
																										chars:      []rune{' ', '\t'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 3096, col: 8, offset: 100524},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 3089, col: 12, offset: 100384},
																										run: (*parser).callonDocumentFragment444,
																										expr: &choiceExpr{
																											pos: position{line: 3089, col: 13, offset: 100385},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 3089, col: 13, offset: 100385},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 3089, col: 20, offset: 100392},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 3089, col: 29, offset: 100401},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 3093, col: 8, offset: 100474},
																										expr: &anyMatcher{
																											line: 3093, col: 9, offset: 100475,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&andCodeExpr{
																				pos: position{line: 888, col: 5, offset: 28577},
																				run: (*parser).callonDocumentFragment451,
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 3093, col: 8, offset: 100474},
																		expr: &anyMatcher{
																			line: 3093, col: 9, offset: 100475,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 903, col: 5, offset: 28888},
											run: (*parser).callonDocumentFragment454,
											expr: &seqExpr{
												pos: position{line: 903, col: 5, offset: 28888},
												exprs: []interface{}{
													&labeledExpr{
														pos:   position{line: 903, col: 5, offset: 28888},
														label: "start",
														expr: &actionExpr{
															pos: position{line: 781, col: 5, offset: 25421},
															run: (*parser).callonDocumentFragment457,
															expr: &seqExpr{
																pos: position{line: 781, col: 5, offset: 25421},
																exprs: []interface{}{
																	&labeledExpr{
																		pos:   position{line: 781, col: 5, offset: 25421},
																		label: "delimiter",
																		expr: &actionExpr{
																			pos: position{line: 781, col: 16, offset: 25432},
																			run: (*parser).callonDocumentFragment460,
																			expr: &seqExpr{
																				pos: position{line: 781, col: 16, offset: 25432},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 781, col: 16, offset: 25432},
																						val:        "----",
																						ignoreCase: false,
																						want:       "\"----\"",
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 781, col: 23, offset: 25439},
																						expr: &litMatcher{
																							pos:        position{line: 781, col: 23, offset: 25439},
																							val:        "-",
																							ignoreCase: false,
																							want:       "\"-\"",
																						},
																					},
																				},
																			},
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 783, col: 8, offset: 25523},
																		expr: &actionExpr{
																			pos: position{line: 3080, col: 10, offset: 100200},
																			run: (*parser).callonDocumentFragment466,
																			expr: &charClassMatcher{
																				pos:        position{line: 3080, col: 11, offset: 100201},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 3096, col: 8, offset: 100524},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 3089, col: 12, offset: 100384},
																				run: (*parser).callonDocumentFragment469,
																				expr: &choiceExpr{
																					pos: position{line: 3089, col: 13, offset: 100385},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 3089, col: 13, offset: 100385},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 3089, col: 20, offset: 100392},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 3089, col: 29, offset: 100401},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3093, col: 8, offset: 100474},
																				expr: &anyMatcher{
																					line: 3093, col: 9, offset: 100475,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&andCodeExpr{
														pos: position{line: 904, col: 5, offset: 28927},
														run: (*parser).callonDocumentFragment476,
													},
													&labeledExpr{
														pos:   position{line: 907, col: 5, offset: 29019},
														label: "content",
														expr: &zeroOrMoreExpr{
															pos: position{line: 922, col: 5, offset: 29417},
															expr: &actionExpr{
																pos: position{line: 922, col: 6, offset: 29418},
																run: (*parser).callonDocumentFragment479,
																expr: &seqExpr{
																	pos: position{line: 922, col: 6, offset: 29418},
																	exprs: []interface{}{
																		&notExpr{
																			pos: position{line: 922, col: 6, offset: 29418},
																			expr: &choiceExpr{
																				pos: position{line: 915, col: 5, offset: 29259},
																				alternatives: []interface{}{
																					&seqExpr{
																						pos: position{line: 915, col: 5, offset: 29259},
																						exprs: []interface{}{
																							&labeledExpr{
																								pos:   position{line: 915, col: 5, offset: 29259},
																								label: "end",
																								expr: &actionExpr{
																									pos: position{line: 781, col: 5, offset: 25421},
																									run: (*parser).callonDocumentFragment485,
																									expr: &seqExpr{
																										pos: position{line: 781, col: 5, offset: 25421},
																										exprs: []interface{}{
																											&labeledExpr{
																												pos:   position{line: 781, col: 5, offset: 25421},
																												label: "delimiter",
																												expr: &actionExpr{
																													pos: position{line: 781, col: 16, offset: 25432},
																													run: (*parser).callonDocumentFragment488,
																													expr: &seqExpr{
																														pos: position{line: 781, col: 16, offset: 25432},
																														exprs: []interface{}{
																															&litMatcher{
																																pos:        position{line: 781, col: 16, offset: 25432},
																																val:        "----",
																																ignoreCase: false,
																																want:       "\"----\"",
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 781, col: 23, offset: 25439},
																																expr: &litMatcher{
																																	pos:        position{line: 781, col: 23, offset: 25439},
																																	val:        "-",
																																	ignoreCase: false,
																																	want:       "\"-\"",
																																},
																															},
																														},
																													},
																												},
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 783, col: 8, offset: 25523},
																												expr: &actionExpr{
																													pos: position{line: 3080, col: 10, offset: 100200},
																													run: (*parser).callonDocumentFragment494,
																													expr: &charClassMatcher{
																														pos:        position{line: 3080, col: 11, offset: 100201},
																														val:        "[ \\t]",
																														chars:      []rune{' ', '\t'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 3096, col: 8, offset: 100524},
																												alternatives: []interface{}{
																													&actionExpr{
																														pos: position{line: 3089, col: 12, offset: 100384},
																														run: (*parser).callonDocumentFragment497,
																														expr: &choiceExpr{
																															pos: position{line: 3089, col: 13, offset: 100385},
																															alternatives: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 3089, col: 13, offset: 100385},
																																	val:        "\n",
																																	ignoreCase: false,
																																	want:       "\"\\n\"",
																																},
																																&litMatcher{
																																	pos:        position{line: 3089, col: 20, offset: 100392},
																																	val:        "\r\n",
																																	ignoreCase: false,
																																	want:       "\"\\r\\n\"",
																																},
																																&litMatcher{
																																	pos:        position{line: 3089, col: 29, offset: 100401},
																																	val:        "\r",
																																	ignoreCase: false,
																																	want:       "\"\\r\"",
																																},
																															},
																														},
																													},
																													&notExpr{
																														pos: position{line: 3093, col: 8, offset: 100474},
																														expr: &anyMatcher{
																															line: 3093, col: 9, offset: 100475,
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&andCodeExpr{
																								pos: position{line: 916, col: 5, offset: 29290},
																								run: (*parser).callonDocumentFragment504,
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 3093, col: 8, offset: 100474},
																						expr: &anyMatcher{
																							line: 3093, col: 9, offset: 100475,
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 923, col: 5, offset: 29448},
																			label: "line",
																			expr: &actionExpr{
																				pos: position{line: 816, col: 5, offset: 26665},
																				run: (*parser).callonDocumentFragment508,
																				expr: &seqExpr{
																					pos: position{line: 816, col: 5, offset: 26665},
																					exprs: []interface{}{
																						&notExpr{
																							pos: position{line: 816, col: 5, offset: 26665},
																							expr: &notExpr{
																								pos: position{line: 3093, col: 8, offset: 100474},
																								expr: &anyMatcher{
																									line: 3093, col: 9, offset: 100475,
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 817, col: 5, offset: 26738},
																							label: "content",
																							expr: &actionExpr{
																								pos: position{line: 817, col: 14, offset: 26747},
																								run: (*parser).callonDocumentFragment514,
																								expr: &zeroOrMoreExpr{
																									pos: position{line: 817, col: 14, offset: 26747},
																									expr: &charClassMatcher{
																										pos:        position{line: 817, col: 14, offset: 26747},
																										val:        "[^\\r\\n]",
																										chars:      []rune{'\r', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 3096, col: 8, offset: 100524},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 3089, col: 12, offset: 100384},
																									run: (*parser).callonDocumentFragment518,
																									expr: &choiceExpr{
																										pos: position{line: 3089, col: 13, offset: 100385},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 3089, col: 13, offset: 100385},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 3089, col: 20, offset: 100392},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 3089, col: 29, offset: 100401},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 3093, col: 8, offset: 100474},
																									expr: &anyMatcher{
																										line: 3093, col: 9, offset: 100475,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 908, col: 5, offset: 29053},
														label: "end",
														expr: &zeroOrOneExpr{
															pos: position{line: 908, col: 9, offset: 29057},
															expr: &choiceExpr{
																pos: position{line: 915, col: 5, offset: 29259},
																alternatives: []interface{}{
																	&seqExpr{
																		pos: position{line: 915, col: 5, offset: 29259},
																		exprs: []interface{}{
																			&labeledExpr{
																				pos:   position{line: 915, col: 5, offset: 29259},
																				label: "end",
																				expr: &actionExpr{
																					pos: position{line: 781, col: 5, offset: 25421},
																					run: (*parser).callonDocumentFragment530,
																					expr: &seqExpr{
																						pos: position{line: 781, col: 5, offset: 25421},
																						exprs: []interface{}{
																							&labeledExpr{
																								pos:   position{line: 781, col: 5, offset: 25421},
																								label: "delimiter",
																								expr: &actionExpr{
																									pos: position{line: 781, col: 16, offset: 25432},
																									run: (*parser).callonDocumentFragment533,
																									expr: &seqExpr{
																										pos: position{line: 781, col: 16, offset: 25432},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 781, col: 16, offset: 25432},
																												val:        "----",
																												ignoreCase: false,
																												want:       "\"----\"",
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 781, col: 23, offset: 25439},
																												expr: &litMatcher{
																													pos:        position{line: 781, col: 23, offset: 25439},
																													val:        "-",
																													ignoreCase: false,
																													want:       "\"-\"",
																												},
																											},
																										},
																									},
																								},
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 783, col: 8, offset: 25523},
																								expr: &actionExpr{
																									pos: position{line: 3080, col: 10, offset: 100200},
																									run: (*parser).callonDocumentFragment539,
																									expr: &charClassMatcher{
																										pos:        position{line: 3080, col: 11, offset: 100201},
																										val:        "[ \\t]",
																										chars:      []rune{' ', '\t'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 3096, col: 8, offset: 100524},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 3089, col: 12, offset: 100384},
																										run: (*parser).callonDocumentFragment542,
																										expr: &choiceExpr{
																											pos: position{line: 3089, col: 13, offset: 100385},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 3089, col: 13, offset: 100385},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 3089, col: 20, offset: 100392},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 3089, col: 29, offset: 100401},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 3093, col: 8, offset: 100474},
																										expr: &anyMatcher{
																											line: 3093, col: 9, offset: 100475,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&andCodeExpr{
																				pos: position{line: 916, col: 5, offset: 29290},
																				run: (*parser).callonDocumentFragment549,
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 3093, col: 8, offset: 100474},
																		expr: &anyMatcher{
																			line: 3093, col: 9, offset: 100475,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 931, col: 5, offset: 29603},
											run: (*parser).callonDocumentFragment552,
											expr: &seqExpr{
												pos: position{line: 931, col: 5, offset: 29603},
												exprs: []interface{}{
													&labeledExpr{
														pos:   position{line: 931, col: 5, offset: 29603},
														label: "start",
														expr: &actionExpr{
															pos: position{line: 788, col: 5, offset: 25669},
															run: (*parser).callonDocumentFragment555,
															expr: &seqExpr{
																pos: position{line: 788, col: 5, offset: 25669},
																exprs: []interface{}{
																	&labeledExpr{
																		pos:   position{line: 788, col: 5, offset: 25669},
																		label: "delimiter",
																		expr: &actionExpr{
																			pos: position{line: 788, col: 16, offset: 25680},
																			run: (*parser).callonDocumentFragment558,
																			expr: &seqExpr{
																				pos: position{line: 788, col: 16, offset: 25680},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 788, col: 16, offset: 25680},
																						val:        "....",
																						ignoreCase: false,
																						want:       "\"....\"",
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 788, col: 23, offset: 25687},
																						expr: &litMatcher{
																							pos:        position{line: 788, col: 23, offset: 25687},
																							val:        ".",
																							ignoreCase: false,
																							want:       "\".\"",
																						},
																					},
																				},
																			},
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 790, col: 8, offset: 25771},
																		expr: &actionExpr{
																			pos: position{line: 3080, col: 10, offset: 100200},
																			run: (*parser).callonDocumentFragment564,
																			expr: &charClassMatcher{
																				pos:        position{line: 3080, col: 11, offset: 100201},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 3096, col: 8, offset: 100524},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 3089, col: 12, offset: 100384},
																				run: (*parser).callonDocumentFragment567,
																				expr: &choiceExpr{
																					pos: position{line: 3089, col: 13, offset: 100385},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 3089, col: 13, offset: 100385},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 3089, col: 20, offset: 100392},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 3089, col: 29, offset: 100401},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3093, col: 8, offset: 100474},
																				expr: &anyMatcher{
																					line: 3093, col: 9, offset: 100475,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&andCodeExpr{
														pos: position{line: 932, col: 5, offset: 29642},
														run: (*parser).callonDocumentFragment574,
													},
													&labeledExpr{
														pos:   position{line: 935, col: 5, offset: 29734},
														label: "content",
														expr: &zeroOrMoreExpr{
															pos: position{line: 950, col: 5, offset: 30132},
															expr: &actionExpr{
																pos: position{line: 950, col: 6, offset: 30133},
																run: (*parser).callonDocumentFragment577,
																expr: &seqExpr{
																	pos: position{line: 950, col: 6, offset: 30133},
																	exprs: []interface{}{
																		&notExpr{
																			pos: position{line: 950, col: 6, offset: 30133},
																			expr: &choiceExpr{
																				pos: position{line: 943, col: 5, offset: 29974},
																				alternatives: []interface{}{
																					&seqExpr{
																						pos: position{line: 943, col: 5, offset: 29974},
																						exprs: []interface{}{
																							&labeledExpr{
																								pos:   position{line: 943, col: 5, offset: 29974},
																								label: "end",
																								expr: &actionExpr{
																									pos: position{line: 788, col: 5, offset: 25669},
																									run: (*parser).callonDocumentFragment583,
																									expr: &seqExpr{
																										pos: position{line: 788, col: 5, offset: 25669},
																										exprs: []interface{}{
																											&labeledExpr{
																												pos:   position{line: 788, col: 5, offset: 25669},
																												label: "delimiter",
																												expr: &actionExpr{
																													pos: position{line: 788, col: 16, offset: 25680},
																													run: (*parser).callonDocumentFragment586,
																													expr: &seqExpr{
																														pos: position{line: 788, col: 16, offset: 25680},
																														exprs: []interface{}{
																															&litMatcher{
																																pos:        position{line: 788, col: 16, offset: 25680},
																																val:        "....",
																																ignoreCase: false,
																																want:       "\"....\"",
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 788, col: 23, offset: 25687},
																																expr: &litMatcher{
																																	pos:        position{line: 788, col: 23, offset: 25687},
																																	val:        ".",
																																	ignoreCase: false,
																																	want:       "\".\"",
																																},
																															},
																														},
																													},
																												},
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 790, col: 8, offset: 25771},
																												expr: &actionExpr{
																													pos: position{line: 3080, col: 10, offset: 100200},
																													run: (*parser).callonDocumentFragment592,
																													expr: &charClassMatcher{
																														pos:        position{line: 3080, col: 11, offset: 100201},
																														val:        "[ \\t]",
																														chars:      []rune{' ', '\t'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 3096, col: 8, offset: 100524},
																												alternatives: []interface{}{
																													&actionExpr{
																														pos: position{line: 3089, col: 12, offset: 100384},
																														run: (*parser).callonDocumentFragment595,
																														expr: &choiceExpr{
																															pos: position{line: 3089, col: 13, offset: 100385},
																															alternatives: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 3089, col: 13, offset: 100385},
																																	val:        "\n",
																																	ignoreCase: false,
																																	want:       "\"\\n\"",
																																},
																																&litMatcher{
																																	pos:        position{line: 3089, col: 20, offset: 100392},
																																	val:        "\r\n",
																																	ignoreCase: false,
																																	want:       "\"\\r\\n\"",
																																},
																																&litMatcher{
																																	pos:        position{line: 3089, col: 29, offset: 100401},
																																	val:        "\r",
																																	ignoreCase: false,
																																	want:       "\"\\r\"",
																																},
																															},
																														},
																													},
																													&notExpr{
																														pos: position{line: 3093, col: 8, offset: 100474},
																														expr: &anyMatcher{
																															line: 3093, col: 9, offset: 100475,
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&andCodeExpr{
																								pos: position{line: 944, col: 5, offset: 30005},
																								run: (*parser).callonDocumentFragment602,
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 3093, col: 8, offset: 100474},
																						expr: &anyMatcher{
																							line: 3093, col: 9, offset: 100475,
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 951, col: 5, offset: 30163},
																			label: "line",
																			expr: &actionExpr{
																				pos: position{line: 816, col: 5, offset: 26665},
																				run: (*parser).callonDocumentFragment606,
																				expr: &seqExpr{
																					pos: position{line: 816, col: 5, offset: 26665},
																					exprs: []interface{}{
																						&notExpr{
																							pos: position{line: 816, col: 5, offset: 26665},
																							expr: &notExpr{
																								pos: position{line: 3093, col: 8, offset: 100474},
																								expr: &anyMatcher{
																									line: 3093, col: 9, offset: 100475,
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 817, col: 5, offset: 26738},
																							label: "content",
																							expr: &actionExpr{
																								pos: position{line: 817, col: 14, offset: 26747},
																								run: (*parser).callonDocumentFragment612,
																								expr: &zeroOrMoreExpr{
																									pos: position{line: 817, col: 14, offset: 26747},
																									expr: &charClassMatcher{
																										pos:        position{line: 817, col: 14, offset: 26747},
																										val:        "[^\\r\\n]",
																										chars:      []rune{'\r', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 3096, col: 8, offset: 100524},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 3089, col: 12, offset: 100384},
																									run: (*parser).callonDocumentFragment616,
																									expr: &choiceExpr{
																										pos: position{line: 3089, col: 13, offset: 100385},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 3089, col: 13, offset: 100385},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 3089, col: 20, offset: 100392},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 3089, col: 29, offset: 100401},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 3093, col: 8, offset: 100474},
																									expr: &anyMatcher{
																										line: 3093, col: 9, offset: 100475,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 936, col: 5, offset: 29768},
														label: "end",
														expr: &zeroOrOneExpr{
															pos: position{line: 936, col: 9, offset: 29772},
															expr: &choiceExpr{
																pos: position{line: 943, col: 5, offset: 29974},
																alternatives: []interface{}{
																	&seqExpr{
																		pos: position{line: 943, col: 5, offset: 29974},
																		exprs: []interface{}{
																			&labeledExpr{
																				pos:   position{line: 943, col: 5, offset: 29974},
																				label: "end",
																				expr: &actionExpr{
																					pos: position{line: 788, col: 5, offset: 25669},
																					run: (*parser).callonDocumentFragment628,
																					expr: &seqExpr{
																						pos: position{line: 788, col: 5, offset: 25669},
																						exprs: []interface{}{
																							&labeledExpr{
																								pos:   position{line: 788, col: 5, offset: 25669},
																								label: "delimiter",
																								expr: &actionExpr{
																									pos: position{line: 788, col: 16, offset: 25680},
																									run: (*parser).callonDocumentFragment631,
																									expr: &seqExpr{
																										pos: position{line: 788, col: 16, offset: 25680},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 788, col: 16, offset: 25680},
																												val:        "....",
																												ignoreCase: false,
																												want:       "\"....\"",
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 788, col: 23, offset: 25687},
																												expr: &litMatcher{
																													pos:        position{line: 788, col: 23, offset: 25687},
																													val:        ".",
																													ignoreCase: false,
																													want:       "\".\"",
																												},
																											},
																										},
																									},
																								},
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 790, col: 8, offset: 25771},
																								expr: &actionExpr{
																									pos: position{line: 3080, col: 10, offset: 100200},
																									run: (*parser).callonDocumentFragment637,
																									expr: &charClassMatcher{
																										pos:        position{line: 3080, col: 11, offset: 100201},
																										val:        "[ \\t]",
																										chars:      []rune{' ', '\t'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 3096, col: 8, offset: 100524},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 3089, col: 12, offset: 100384},
																										run: (*parser).callonDocumentFragment640,
																										expr: &choiceExpr{
																											pos: position{line: 3089, col: 13, offset: 100385},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 3089, col: 13, offset: 100385},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 3089, col: 20, offset: 100392},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 3089, col: 29, offset: 100401},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 3093, col: 8, offset: 100474},
																										expr: &anyMatcher{
																											line: 3093, col: 9, offset: 100475,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&andCodeExpr{
																				pos: position{line: 944, col: 5, offset: 30005},
																				run: (*parser).callonDocumentFragment647,
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 3093, col: 8, offset: 100474},
																		expr: &anyMatcher{
																			line: 3093, col: 9, offset: 100475,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 982, col: 5, offset: 31046},
											run: (*parser).callonDocumentFragment650,
											expr: &seqExpr{
												pos: position{line: 982, col: 5, offset: 31046},
												exprs: []interface{}{
													&labeledExpr{
														pos:   position{line: 982, col: 5, offset: 31046},
														label: "firstLine",
														expr: &actionExpr{
															pos: position{line: 989, col: 5, offset: 31305},
															run: (*parser).callonDocumentFragment653,
															expr: &seqExpr{
																pos: position{line: 989, col: 5, offset: 31305},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 989, col: 5, offset: 31305},
																		expr: &actionExpr{
																			pos: position{line: 690, col: 14, offset: 22312},
																			run: (*parser).callonDocumentFragment656,
																			expr: &seqExpr{
																				pos: position{line: 690, col: 14, offset: 22312},
																				exprs: []interface{}{
																					&notExpr{
																						pos: position{line: 690, col: 14, offset: 22312},
																						expr: &notExpr{
																							pos: position{line: 3093, col: 8, offset: 100474},
																							expr: &anyMatcher{
																								line: 3093, col: 9, offset: 100475,
																							},
																						},
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 690, col: 19, offset: 22317},
																						expr: &actionExpr{
																							pos: position{line: 3080, col: 10, offset: 100200},
																							run: (*parser).callonDocumentFragment662,
																							expr: &charClassMatcher{
																								pos:        position{line: 3080, col: 11, offset: 100201},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 3096, col: 8, offset: 100524},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 3089, col: 12, offset: 100384},
																								run: (*parser).callonDocumentFragment665,
																								expr: &choiceExpr{
																									pos: position{line: 3089, col: 13, offset: 100385},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 3089, col: 13, offset: 100385},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 3089, col: 20, offset: 100392},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 3089, col: 29, offset: 100401},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 3093, col: 8, offset: 100474},
																								expr: &anyMatcher{
																									line: 3093, col: 9, offset: 100475,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 990, col: 5, offset: 31320},
																		val:        "> ",
																		ignoreCase: false,
																		want:       "\"> \"",
																	},
																	&labeledExpr{
																		pos:   position{line: 991, col: 5, offset: 31330},
																		label: "content",
																		expr: &actionExpr{
																			pos: position{line: 991, col: 14, offset: 31339},
																			run: (*parser).callonDocumentFragment674,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 991, col: 15, offset: 31340},
																				expr: &charClassMatcher{
																					pos:        position{line: 991, col: 15, offset: 31340},
																					val:        "[^\\r\\n]",
																					chars:      []rune{'\r', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 3096, col: 8, offset: 100524},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 3089, col: 12, offset: 100384},
																				run: (*parser).callonDocumentFragment678,
																				expr: &choiceExpr{
																					pos: position{line: 3089, col: 13, offset: 100385},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 3089, col: 13, offset: 100385},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 3089, col: 20, offset: 100392},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 3089, col: 29, offset: 100401},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3093, col: 8, offset: 100474},
																				expr: &anyMatcher{
																					line: 3093, col: 9, offset: 100475,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 983, col: 5, offset: 31083},
														label: "otherLines",
														expr: &zeroOrMoreExpr{
															pos: position{line: 983, col: 16, offset: 31094},
															expr: &choiceExpr{
																pos: position{line: 983, col: 17, offset: 31095},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 989, col: 5, offset: 31305},
																		run: (*parser).callonDocumentFragment688,
																		expr: &seqExpr{
																			pos: position{line: 989, col: 5, offset: 31305},
																			exprs: []interface{}{
																				&notExpr{
																					pos: position{line: 989, col: 5, offset: 31305},
																					expr: &actionExpr{
																						pos: position{line: 690, col: 14, offset: 22312},
																						run: (*parser).callonDocumentFragment691,
																						expr: &seqExpr{
																							pos: position{line: 690, col: 14, offset: 22312},
																							exprs: []interface{}{
																								&notExpr{
																									pos: position{line: 690, col: 14, offset: 22312},
																									expr: &notExpr{
																										pos: position{line: 3093, col: 8, offset: 100474},
																										expr: &anyMatcher{
																											line: 3093, col: 9, offset: 100475,
																										},
																									},
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 690, col: 19, offset: 22317},
																									expr: &actionExpr{
																										pos: position{line: 3080, col: 10, offset: 100200},
																										run: (*parser).callonDocumentFragment697,
																										expr: &charClassMatcher{
																											pos:        position{line: 3080, col: 11, offset: 100201},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 3096, col: 8, offset: 100524},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 3089, col: 12, offset: 100384},
																											run: (*parser).callonDocumentFragment700,
																											expr: &choiceExpr{
																												pos: position{line: 3089, col: 13, offset: 100385},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 3089, col: 13, offset: 100385},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 3089, col: 20, offset: 100392},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 3089, col: 29, offset: 100401},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 3093, col: 8, offset: 100474},
																											expr: &anyMatcher{
																												line: 3093, col: 9, offset: 100475,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 990, col: 5, offset: 31320},
																					val:        "> ",
																					ignoreCase: false,
																					want:       "\"> \"",
																				},
																				&labeledExpr{
																					pos:   position{line: 991, col: 5, offset: 31330},
																					label: "content",
																					expr: &actionExpr{
																						pos: position{line: 991, col: 14, offset: 31339},
																						run: (*parser).callonDocumentFragment709,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 991, col: 15, offset: 31340},
																							expr: &charClassMatcher{
																								pos:        position{line: 991, col: 15, offset: 31340},
																								val:        "[^\\r\\n]",
																								chars:      []rune{'\r', '\n'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 3096, col: 8, offset: 100524},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 3089, col: 12, offset: 100384},
																							run: (*parser).callonDocumentFragment713,
																							expr: &choiceExpr{
																								pos: position{line: 3089, col: 13, offset: 100385},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 3089, col: 13, offset: 100385},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 3089, col: 20, offset: 100392},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 3089, col: 29, offset: 100401},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 3093, col: 8, offset: 100474},
																							expr: &anyMatcher{
																								line: 3093, col: 9, offset: 100475,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 1865, col: 5, offset: 61135},
																		run: (*parser).callonDocumentFragment720,
																		expr: &seqExpr{
																			pos: position{line: 1865, col: 5, offset: 61135},
																			exprs: []interface{}{
																				&labeledExpr{
																					pos:   position{line: 1865, col: 5, offset: 61135},
																					label: "content",
																					expr: &actionExpr{
																						pos: position{line: 1865, col: 14, offset: 61144},
																						run: (*parser).callonDocumentFragment723,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 1865, col: 14, offset: 61144},
																							expr: &charClassMatcher{
																								pos:        position{line: 1865, col: 14, offset: 61144},
																								val:        "[^\\r\\n]",
																								chars:      []rune{'\r', '\n'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																				},
																				&andCodeExpr{
																					pos: position{line: 1868, col: 5, offset: 61251},
																					run: (*parser).callonDocumentFragment726,
																				},
																				&choiceExpr{
																					pos: position{line: 3096, col: 8, offset: 100524},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 3089, col: 12, offset: 100384},
																							run: (*parser).callonDocumentFragment728,
																							expr: &choiceExpr{
																								pos: position{line: 3089, col: 13, offset: 100385},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 3089, col: 13, offset: 100385},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 3089, col: 20, offset: 100392},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 3089, col: 29, offset: 100401},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 3093, col: 8, offset: 100474},
																							expr: &anyMatcher{
																								line: 3093, col: 9, offset: 100475,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 1008, col: 5, offset: 31698},
											run: (*parser).callonDocumentFragment735,
											expr: &seqExpr{
												pos: position{line: 1008, col: 5, offset: 31698},
												exprs: []interface{}{
													&labeledExpr{
														pos:   position{line: 1008, col: 5, offset: 31698},
														label: "start",
														expr: &actionExpr{
															pos: position{line: 795, col: 5, offset: 25921},
															run: (*parser).callonDocumentFragment738,
															expr: &seqExpr{
																pos: position{line: 795, col: 5, offset: 25921},
																exprs: []interface{}{
																	&labeledExpr{
																		pos:   position{line: 795, col: 5, offset: 25921},
																		label: "delimiter",
																		expr: &actionExpr{
																			pos: position{line: 795, col: 16, offset: 25932},
																			run: (*parser).callonDocumentFragment741,
																			expr: &seqExpr{
																				pos: position{line: 795, col: 16, offset: 25932},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 795, col: 16, offset: 25932},
																						val:        "++++",
																						ignoreCase: false,
																						want:       "\"++++\"",
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 795, col: 23, offset: 25939},
																						expr: &litMatcher{
																							pos:        position{line: 795, col: 23, offset: 25939},
																							val:        "+",
																							ignoreCase: false,
																							want:       "\"+\"",
																						},
																					},
																				},
																			},
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 797, col: 8, offset: 26023},
																		expr: &actionExpr{
																			pos: position{line: 3080, col: 10, offset: 100200},
																			run: (*parser).callonDocumentFragment747,
																			expr: &charClassMatcher{
																				pos:        position{line: 3080, col: 11, offset: 100201},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 3096, col: 8, offset: 100524},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 3089, col: 12, offset: 100384},
																				run: (*parser).callonDocumentFragment750,
																				expr: &choiceExpr{
																					pos: position{line: 3089, col: 13, offset: 100385},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 3089, col: 13, offset: 100385},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 3089, col: 20, offset: 100392},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 3089, col: 29, offset: 100401},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3093, col: 8, offset: 100474},
																				expr: &anyMatcher{
																					line: 3093, col: 9, offset: 100475,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&andCodeExpr{
														pos: position{line: 1009, col: 5, offset: 31741},
														run: (*parser).callonDocumentFragment757,
													},
													&labeledExpr{
														pos:   position{line: 1012, col: 5, offset: 31833},
														label: "content",
														expr: &zeroOrMoreExpr{
															pos: position{line: 1027, col: 5, offset: 32263},
															expr: &actionExpr{
																pos: position{line: 1027, col: 6, offset: 32264},
																run: (*parser).callonDocumentFragment760,
																expr: &seqExpr{
																	pos: position{line: 1027, col: 6, offset: 32264},
																	exprs: []interface{}{
																		&notExpr{
																			pos: position{line: 1027, col: 6, offset: 32264},
																			expr: &choiceExpr{
																				pos: position{line: 1020, col: 5, offset: 32097},
																				alternatives: []interface{}{
																					&seqExpr{
																						pos: position{line: 1020, col: 5, offset: 32097},
																						exprs: []interface{}{
																							&labeledExpr{
																								pos:   position{line: 1020, col: 5, offset: 32097},
																								label: "end",
																								expr: &actionExpr{
																									pos: position{line: 795, col: 5, offset: 25921},
																									run: (*parser).callonDocumentFragment766,
																									expr: &seqExpr{
																										pos: position{line: 795, col: 5, offset: 25921},
																										exprs: []interface{}{
																											&labeledExpr{
																												pos:   position{line: 795, col: 5, offset: 25921},
																												label: "delimiter",
																												expr: &actionExpr{
																													pos: position{line: 795, col: 16, offset: 25932},
																													run: (*parser).callonDocumentFragment769,
																													expr: &seqExpr{
																														pos: position{line: 795, col: 16, offset: 25932},
																														exprs: []interface{}{
																															&litMatcher{
																																pos:        position{line: 795, col: 16, offset: 25932},
																																val:        "++++",
																																ignoreCase: false,
																																want:       "\"++++\"",
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 795, col: 23, offset: 25939},
																																expr: &litMatcher{
																																	pos:        position{line: 795, col: 23, offset: 25939},
																																	val:        "+",
																																	ignoreCase: false,
																																	want:       "\"+\"",
																																},
																															},
																														},
																													},
																												},
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 797, col: 8, offset: 26023},
																												expr: &actionExpr{
																													pos: position{line: 3080, col: 10, offset: 100200},
																													run: (*parser).callonDocumentFragment775,
																													expr: &charClassMatcher{
																														pos:        position{line: 3080, col: 11, offset: 100201},
																														val:        "[ \\t]",
																														chars:      []rune{' ', '\t'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 3096, col: 8, offset: 100524},
																												alternatives: []interface{}{
																													&actionExpr{
																														pos: position{line: 3089, col: 12, offset: 100384},
																														run: (*parser).callonDocumentFragment778,
																														expr: &choiceExpr{
																															pos: position{line: 3089, col: 13, offset: 100385},
																															alternatives: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 3089, col: 13, offset: 100385},
																																	val:        "\n",
																																	ignoreCase: false,
																																	want:       "\"\\n\"",
																																},
																																&litMatcher{
																																	pos:        position{line: 3089, col: 20, offset: 100392},
																																	val:        "\r\n",
																																	ignoreCase: false,
																																	want:       "\"\\r\\n\"",
																																},
																																&litMatcher{
																																	pos:        position{line: 3089, col: 29, offset: 100401},
																																	val:        "\r",
																																	ignoreCase: false,
																																	want:       "\"\\r\"",
																																},
																															},
																														},
																													},
																													&notExpr{
																														pos: position{line: 3093, col: 8, offset: 100474},
																														expr: &anyMatcher{
																															line: 3093, col: 9, offset: 100475,
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&andCodeExpr{
																								pos: position{line: 1021, col: 5, offset: 32132},
																								run: (*parser).callonDocumentFragment785,
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 3093, col: 8, offset: 100474},
																						expr: &anyMatcher{
																							line: 3093, col: 9, offset: 100475,
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 1028, col: 5, offset: 32298},
																			label: "line",
																			expr: &actionExpr{
																				pos: position{line: 816, col: 5, offset: 26665},
																				run: (*parser).callonDocumentFragment789,
																				expr: &seqExpr{
																					pos: position{line: 816, col: 5, offset: 26665},
																					exprs: []interface{}{
																						&notExpr{
																							pos: position{line: 816, col: 5, offset: 26665},
																							expr: &notExpr{
																								pos: position{line: 3093, col: 8, offset: 100474},
																								expr: &anyMatcher{
																									line: 3093, col: 9, offset: 100475,
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 817, col: 5, offset: 26738},
																							label: "content",
																							expr: &actionExpr{
																								pos: position{line: 817, col: 14, offset: 26747},
																								run: (*parser).callonDocumentFragment795,
																								expr: &zeroOrMoreExpr{
																									pos: position{line: 817, col: 14, offset: 26747},
																									expr: &charClassMatcher{
																										pos:        position{line: 817, col: 14, offset: 26747},
																										val:        "[^\\r\\n]",
																										chars:      []rune{'\r', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 3096, col: 8, offset: 100524},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 3089, col: 12, offset: 100384},
																									run: (*parser).callonDocumentFragment799,
																									expr: &choiceExpr{
																										pos: position{line: 3089, col: 13, offset: 100385},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 3089, col: 13, offset: 100385},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 3089, col: 20, offset: 100392},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 3089, col: 29, offset: 100401},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 3093, col: 8, offset: 100474},
																									expr: &anyMatcher{
																										line: 3093, col: 9, offset: 100475,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 1013, col: 5, offset: 31871},
														label: "end",
														expr: &zeroOrOneExpr{
															pos: position{line: 1013, col: 9, offset: 31875},
															expr: &choiceExpr{
																pos: position{line: 1020, col: 5, offset: 32097},
																alternatives: []interface{}{
																	&seqExpr{
																		pos: position{line: 1020, col: 5, offset: 32097},
																		exprs: []interface{}{
																			&labeledExpr{
																				pos:   position{line: 1020, col: 5, offset: 32097},
																				label: "end",
																				expr: &actionExpr{
																					pos: position{line: 795, col: 5, offset: 25921},
																					run: (*parser).callonDocumentFragment811,
																					expr: &seqExpr{
																						pos: position{line: 795, col: 5, offset: 25921},
																						exprs: []interface{}{
																							&labeledExpr{
																								pos:   position{line: 795, col: 5, offset: 25921},
																								label: "delimiter",
																								expr: &actionExpr{
																									pos: position{line: 795, col: 16, offset: 25932},
																									run: (*parser).callonDocumentFragment814,
																									expr: &seqExpr{
																										pos: position{line: 795, col: 16, offset: 25932},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 795, col: 16, offset: 25932},
																												val:        "++++",
																												ignoreCase: false,
																												want:       "\"++++\"",
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 795, col: 23, offset: 25939},
																												expr: &litMatcher{
																													pos:        position{line: 795, col: 23, offset: 25939},
																													val:        "+",
																													ignoreCase: false,
																													want:       "\"+\"",
																												},
																											},
																										},
																									},
																								},
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 797, col: 8, offset: 26023},
																								expr: &actionExpr{
																									pos: position{line: 3080, col: 10, offset: 100200},
																									run: (*parser).callonDocumentFragment820,
																									expr: &charClassMatcher{
																										pos:        position{line: 3080, col: 11, offset: 100201},
																										val:        "[ \\t]",
																										chars:      []rune{' ', '\t'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 3096, col: 8, offset: 100524},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 3089, col: 12, offset: 100384},
																										run: (*parser).callonDocumentFragment823,
																										expr: &choiceExpr{
																											pos: position{line: 3089, col: 13, offset: 100385},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 3089, col: 13, offset: 100385},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 3089, col: 20, offset: 100392},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 3089, col: 29, offset: 100401},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 3093, col: 8, offset: 100474},
																										expr: &anyMatcher{
																											line: 3093, col: 9, offset: 100475,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&andCodeExpr{
																				pos: position{line: 1021, col: 5, offset: 32132},
																				run: (*parser).callonDocumentFragment830,
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 3093, col: 8, offset: 100474},
																		expr: &anyMatcher{
																			line: 3093, col: 9, offset: 100475,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 1036, col: 5, offset: 32449},
											run: (*parser).callonDocumentFragment833,
											expr: &seqExpr{
												pos: position{line: 1036, col: 5, offset: 32449},
												exprs: []interface{}{
													&labeledExpr{
														pos:   position{line: 1036, col: 5, offset: 32449},
														label: "start",
														expr: &actionExpr{
															pos: position{line: 802, col: 5, offset: 26171},
															run: (*parser).callonDocumentFragment836,
															expr: &seqExpr{
																pos: position{line: 802, col: 5, offset: 26171},
																exprs: []interface{}{
																	&labeledExpr{
																		pos:   position{line: 802, col: 5, offset: 26171},
																		label: "delimiter",
																		expr: &actionExpr{
																			pos: position{line: 802, col: 16, offset: 26182},
																			run: (*parser).callonDocumentFragment839,
																			expr: &seqExpr{
																				pos: position{line: 802, col: 16, offset: 26182},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 802, col: 16, offset: 26182},
																						val:        "____",
																						ignoreCase: false,
																						want:       "\"____\"",
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 802, col: 23, offset: 26189},
																						expr: &litMatcher{
																							pos:        position{line: 802, col: 23, offset: 26189},
																							val:        "_",
																							ignoreCase: false,
																							want:       "\"_\"",
																						},
																					},
																				},
																			},
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 804, col: 8, offset: 26273},
																		expr: &actionExpr{
																			pos: position{line: 3080, col: 10, offset: 100200},
																			run: (*parser).callonDocumentFragment845,
																			expr: &charClassMatcher{
																				pos:        position{line: 3080, col: 11, offset: 100201},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 3096, col: 8, offset: 100524},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 3089, col: 12, offset: 100384},
																				run: (*parser).callonDocumentFragment848,
																				expr: &choiceExpr{
																					pos: position{line: 3089, col: 13, offset: 100385},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 3089, col: 13, offset: 100385},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 3089, col: 20, offset: 100392},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 3089, col: 29, offset: 100401},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3093, col: 8, offset: 100474},
																				expr: &anyMatcher{
																					line: 3093, col: 9, offset: 100475,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&andCodeExpr{
														pos: position{line: 1037, col: 5, offset: 32486},
														run: (*parser).callonDocumentFragment855,
													},
													&labeledExpr{
														pos:   position{line: 1040, col: 5, offset: 32578},
														label: "content",
														expr: &zeroOrMoreExpr{
															pos: position{line: 1055, col: 4, offset: 32959},
															expr: &actionExpr{
																pos: position{line: 1055, col: 5, offset: 32960},
																run: (*parser).callonDocumentFragment858,
																expr: &seqExpr{
																	pos: position{line: 1055, col: 5, offset: 32960},
																	exprs: []interface{}{
																		&notExpr{
																			pos: position{line: 1055, col: 5, offset: 32960},
																			expr: &choiceExpr{
																				pos: position{line: 1048, col: 5, offset: 32806},
																				alternatives: []interface{}{
																					&seqExpr{
																						pos: position{line: 1048, col: 5, offset: 32806},
																						exprs: []interface{}{
																							&labeledExpr{
																								pos:   position{line: 1048, col: 5, offset: 32806},
																								label: "end",
																								expr: &actionExpr{
																									pos: position{line: 802, col: 5, offset: 26171},
																									run: (*parser).callonDocumentFragment864,
																									expr: &seqExpr{
																										pos: position{line: 802, col: 5, offset: 26171},
																										exprs: []interface{}{
																											&labeledExpr{
																												pos:   position{line: 802, col: 5, offset: 26171},
																												label: "delimiter",
																												expr: &actionExpr{
																													pos: position{line: 802, col: 16, offset: 26182},
																													run: (*parser).callonDocumentFragment867,
																													expr: &seqExpr{
																														pos: position{line: 802, col: 16, offset: 26182},
																														exprs: []interface{}{
																															&litMatcher{
																																pos:        position{line: 802, col: 16, offset: 26182},
																																val:        "____",
																																ignoreCase: false,
																																want:       "\"____\"",
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 802, col: 23, offset: 26189},
																																expr: &litMatcher{
																																	pos:        position{line: 802, col: 23, offset: 26189},
																																	val:        "_",
																																	ignoreCase: false,
																																	want:       "\"_\"",
																																},
																															},
																														},
																													},
																												},
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 804, col: 8, offset: 26273},
																												expr: &actionExpr{
																													pos: position{line: 3080, col: 10, offset: 100200},
																													run: (*parser).callonDocumentFragment873,
																													expr: &charClassMatcher{
																														pos:        position{line: 3080, col: 11, offset: 100201},
																														val:        "[ \\t]",
																														chars:      []rune{' ', '\t'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 3096, col: 8, offset: 100524},
																												alternatives: []interface{}{
																													&actionExpr{
																														pos: position{line: 3089, col: 12, offset: 100384},
																														run: (*parser).callonDocumentFragment876,
																														expr: &choiceExpr{
																															pos: position{line: 3089, col: 13, offset: 100385},
																															alternatives: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 3089, col: 13, offset: 100385},
																																	val:        "\n",
																																	ignoreCase: false,
																																	want:       "\"\\n\"",
																																},
																																&litMatcher{
																																	pos:        position{line: 3089, col: 20, offset: 100392},
																																	val:        "\r\n",
																																	ignoreCase: false,
																																	want:       "\"\\r\\n\"",
																																},
																																&litMatcher{
																																	pos:        position{line: 3089, col: 29, offset: 100401},
																																	val:        "\r",
																																	ignoreCase: false,
																																	want:       "\"\\r\"",
																																},
																															},
																														},
																													},
																													&notExpr{
																														pos: position{line: 3093, col: 8, offset: 100474},
																														expr: &anyMatcher{
																															line: 3093, col: 9, offset: 100475,
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&andCodeExpr{
																								pos: position{line: 1049, col: 5, offset: 32835},
																								run: (*parser).callonDocumentFragment883,
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 3093, col: 8, offset: 100474},
																						expr: &anyMatcher{
																							line: 3093, col: 9, offset: 100475,
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 1056, col: 5, offset: 32988},
																			label: "line",
																			expr: &actionExpr{
																				pos: position{line: 816, col: 5, offset: 26665},
																				run: (*parser).callonDocumentFragment887,
																				expr: &seqExpr{
																					pos: position{line: 816, col: 5, offset: 26665},
																					exprs: []interface{}{
																						&notExpr{
																							pos: position{line: 816, col: 5, offset: 26665},
																							expr: &notExpr{
																								pos: position{line: 3093, col: 8, offset: 100474},
																								expr: &anyMatcher{
																									line: 3093, col: 9, offset: 100475,
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 817, col: 5, offset: 26738},
																							label: "content",
																							expr: &actionExpr{
																								pos: position{line: 817, col: 14, offset: 26747},
																								run: (*parser).callonDocumentFragment893,
																								expr: &zeroOrMoreExpr{
																									pos: position{line: 817, col: 14, offset: 26747},
																									expr: &charClassMatcher{
																										pos:        position{line: 817, col: 14, offset: 26747},
																										val:        "[^\\r\\n]",
																										chars:      []rune{'\r', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 3096, col: 8, offset: 100524},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 3089, col: 12, offset: 100384},
																									run: (*parser).callonDocumentFragment897,
																									expr: &choiceExpr{
																										pos: position{line: 3089, col: 13, offset: 100385},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 3089, col: 13, offset: 100385},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 3089, col: 20, offset: 100392},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 3089, col: 29, offset: 100401},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 3093, col: 8, offset: 100474},
																									expr: &anyMatcher{
																										line: 3093, col: 9, offset: 100475,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 1041, col: 5, offset: 32610},
														label: "end",
														expr: &zeroOrOneExpr{
															pos: position{line: 1041, col: 9, offset: 32614},
															expr: &choiceExpr{
																pos: position{line: 1048, col: 5, offset: 32806},
																alternatives: []interface{}{
																	&seqExpr{
																		pos: position{line: 1048, col: 5, offset: 32806},
																		exprs: []interface{}{
																			&labeledExpr{
																				pos:   position{line: 1048, col: 5, offset: 32806},
																				label: "end",
																				expr: &actionExpr{
																					pos: position{line: 802, col: 5, offset: 26171},
																					run: (*parser).callonDocumentFragment909,
																					expr: &seqExpr{
																						pos: position{line: 802, col: 5, offset: 26171},
																						exprs: []interface{}{
																							&labeledExpr{
																								pos:   position{line: 802, col: 5, offset: 26171},
																								label: "delimiter",
																								expr: &actionExpr{
																									pos: position{line: 802, col: 16, offset: 26182},
																									run: (*parser).callonDocumentFragment912,
																									expr: &seqExpr{
																										pos: position{line: 802, col: 16, offset: 26182},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 802, col: 16, offset: 26182},
																												val:        "____",
																												ignoreCase: false,
																												want:       "\"____\"",
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 802, col: 23, offset: 26189},
																												expr: &litMatcher{
																													pos:        position{line: 802, col: 23, offset: 26189},
																													val:        "_",
																													ignoreCase: false,
																													want:       "\"_\"",
																												},
																											},
																										},
																									},
																								},
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 804, col: 8, offset: 26273},
																								expr: &actionExpr{
																									pos: position{line: 3080, col: 10, offset: 100200},
																									run: (*parser).callonDocumentFragment918,
																									expr: &charClassMatcher{
																										pos:        position{line: 3080, col: 11, offset: 100201},
																										val:        "[ \\t]",
																										chars:      []rune{' ', '\t'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 3096, col: 8, offset: 100524},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 3089, col: 12, offset: 100384},
																										run: (*parser).callonDocumentFragment921,
																										expr: &choiceExpr{
																											pos: position{line: 3089, col: 13, offset: 100385},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 3089, col: 13, offset: 100385},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 3089, col: 20, offset: 100392},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 3089, col: 29, offset: 100401},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 3093, col: 8, offset: 100474},
																										expr: &anyMatcher{
																											line: 3093, col: 9, offset: 100475,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&andCodeExpr{
																				pos: position{line: 1049, col: 5, offset: 32835},
																				run: (*parser).callonDocumentFragment928,
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 3093, col: 8, offset: 100474},
																		expr: &anyMatcher{
																			line: 3093, col: 9, offset: 100475,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 1064, col: 5, offset: 33143},
											run: (*parser).callonDocumentFragment931,
											expr: &seqExpr{
												pos: position{line: 1064, col: 5, offset: 33143},
												exprs: []interface{}{
													&labeledExpr{
														pos:   position{line: 1064, col: 5, offset: 33143},
														label: "start",
														expr: &actionExpr{
															pos: position{line: 809, col: 5, offset: 26417},
															run: (*parser).callonDocumentFragment934,
															expr: &seqExpr{
																pos: position{line: 809, col: 5, offset: 26417},
																exprs: []interface{}{
																	&labeledExpr{
																		pos:   position{line: 809, col: 5, offset: 26417},
																		label: "delimiter",
																		expr: &actionExpr{
																			pos: position{line: 809, col: 16, offset: 26428},
																			run: (*parser).callonDocumentFragment937,
																			expr: &seqExpr{
																				pos: position{line: 809, col: 16, offset: 26428},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 809, col: 16, offset: 26428},
																						val:        "****",
																						ignoreCase: false,
																						want:       "\"****\"",
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 809, col: 23, offset: 26435},
																						expr: &litMatcher{
																							pos:        position{line: 809, col: 23, offset: 26435},
																							val:        "*",
																							ignoreCase: false,
																							want:       "\"*\"",
																						},
																					},
																				},
																			},
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 811, col: 8, offset: 26519},
																		expr: &actionExpr{
																			pos: position{line: 3080, col: 10, offset: 100200},
																			run: (*parser).callonDocumentFragment943,
																			expr: &charClassMatcher{
																				pos:        position{line: 3080, col: 11, offset: 100201},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 3096, col: 8, offset: 100524},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 3089, col: 12, offset: 100384},
																				run: (*parser).callonDocumentFragment946,
																				expr: &choiceExpr{
																					pos: position{line: 3089, col: 13, offset: 100385},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 3089, col: 13, offset: 100385},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 3089, col: 20, offset: 100392},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 3089, col: 29, offset: 100401},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3093, col: 8, offset: 100474},
																				expr: &anyMatcher{
																					line: 3093, col: 9, offset: 100475,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&andCodeExpr{
														pos: position{line: 1065, col: 5, offset: 33182},
														run: (*parser).callonDocumentFragment953,
													},
													&labeledExpr{
														pos:   position{line: 1068, col: 5, offset: 33274},
														label: "content",
														expr: &zeroOrMoreExpr{
															pos: position{line: 1083, col: 4, offset: 33671},
															expr: &actionExpr{
																pos: position{line: 1083, col: 5, offset: 33672},
																run: (*parser).callonDocumentFragment956,
																expr: &seqExpr{
																	pos: position{line: 1083, col: 5, offset: 33672},
																	exprs: []interface{}{
																		&notExpr{
																			pos: position{line: 1083, col: 5, offset: 33672},
																			expr: &choiceExpr{
																				pos: position{line: 1076, col: 5, offset: 33514},
																				alternatives: []interface{}{
																					&seqExpr{
																						pos: position{line: 1076, col: 5, offset: 33514},
																						exprs: []interface{}{
																							&labeledExpr{
																								pos:   position{line: 1076, col: 5, offset: 33514},
																								label: "end",
																								expr: &actionExpr{
																									pos: position{line: 809, col: 5, offset: 26417},
																									run: (*parser).callonDocumentFragment962,
																									expr: &seqExpr{
																										pos: position{line: 809, col: 5, offset: 26417},
																										exprs: []interface{}{
																											&labeledExpr{
																												pos:   position{line: 809, col: 5, offset: 26417},
																												label: "delimiter",
																												expr: &actionExpr{
																													pos: position{line: 809, col: 16, offset: 26428},
																													run: (*parser).callonDocumentFragment965,
																													expr: &seqExpr{
																														pos: position{line: 809, col: 16, offset: 26428},
																														exprs: []interface{}{
																															&litMatcher{
																																pos:        position{line: 809, col: 16, offset: 26428},
																																val:        "****",
																																ignoreCase: false,
																																want:       "\"****\"",
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 809, col: 23, offset: 26435},
																																expr: &litMatcher{
																																	pos:        position{line: 809, col: 23, offset: 26435},
																																	val:        "*",
																																	ignoreCase: false,
																																	want:       "\"*\"",
																																},
																															},
																														},
																													},
																												},
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 811, col: 8, offset: 26519},
																												expr: &actionExpr{
																													pos: position{line: 3080, col: 10, offset: 100200},
																													run: (*parser).callonDocumentFragment971,
																													expr: &charClassMatcher{
																														pos:        position{line: 3080, col: 11, offset: 100201},
																														val:        "[ \\t]",
																														chars:      []rune{' ', '\t'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 3096, col: 8, offset: 100524},
																												alternatives: []interface{}{
																													&actionExpr{
																														pos: position{line: 3089, col: 12, offset: 100384},
																														run: (*parser).callonDocumentFragment974,
																														expr: &choiceExpr{
																															pos: position{line: 3089, col: 13, offset: 100385},
																															alternatives: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 3089, col: 13, offset: 100385},
																																	val:        "\n",
																																	ignoreCase: false,
																																	want:       "\"\\n\"",
																																},
																																&litMatcher{
																																	pos:        position{line: 3089, col: 20, offset: 100392},
																																	val:        "\r\n",
																																	ignoreCase: false,
																																	want:       "\"\\r\\n\"",
																																},
																																&litMatcher{
																																	pos:        position{line: 3089, col: 29, offset: 100401},
																																	val:        "\r",
																																	ignoreCase: false,
																																	want:       "\"\\r\"",
																																},
																															},
																														},
																													},
																													&notExpr{
																														pos: position{line: 3093, col: 8, offset: 100474},
																														expr: &anyMatcher{
																															line: 3093, col: 9, offset: 100475,
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&andCodeExpr{
																								pos: position{line: 1077, col: 5, offset: 33545},
																								run: (*parser).callonDocumentFragment981,
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 3093, col: 8, offset: 100474},
																						expr: &anyMatcher{
																							line: 3093, col: 9, offset: 100475,
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 1084, col: 5, offset: 33702},
																			label: "line",
																			expr: &actionExpr{
																				pos: position{line: 816, col: 5, offset: 26665},
																				run: (*parser).callonDocumentFragment985,
																				expr: &seqExpr{
																					pos: position{line: 816, col: 5, offset: 26665},
																					exprs: []interface{}{
																						&notExpr{
																							pos: position{line: 816, col: 5, offset: 26665},
																							expr: &notExpr{
																								pos: position{line: 3093, col: 8, offset: 100474},
																								expr: &anyMatcher{
																									line: 3093, col: 9, offset: 100475,
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 817, col: 5, offset: 26738},
																							label: "content",
																							expr: &actionExpr{
																								pos: position{line: 817, col: 14, offset: 26747},
																								run: (*parser).callonDocumentFragment991,
																								expr: &zeroOrMoreExpr{
																									pos: position{line: 817, col: 14, offset: 26747},
																									expr: &charClassMatcher{
																										pos:        position{line: 817, col: 14, offset: 26747},
																										val:        "[^\\r\\n]",
																										chars:      []rune{'\r', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 3096, col: 8, offset: 100524},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 3089, col: 12, offset: 100384},
																									run: (*parser).callonDocumentFragment995,
																									expr: &choiceExpr{
																										pos: position{line: 3089, col: 13, offset: 100385},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 3089, col: 13, offset: 100385},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 3089, col: 20, offset: 100392},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 3089, col: 29, offset: 100401},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 3093, col: 8, offset: 100474},
																									expr: &anyMatcher{
																										line: 3093, col: 9, offset: 100475,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 1069, col: 5, offset: 33308},
														label: "end",
														expr: &zeroOrOneExpr{
															pos: position{line: 1069, col: 9, offset: 33312},
															expr: &choiceExpr{
																pos: position{line: 1076, col: 5, offset: 33514},
																alternatives: []interface{}{
																	&seqExpr{
																		pos: position{line: 1076, col: 5, offset: 33514},
																		exprs: []interface{}{
																			&labeledExpr{
																				pos:   position{line: 1076, col: 5, offset: 33514},
																				label: "end",
																				expr: &actionExpr{
																					pos: position{line: 809, col: 5, offset: 26417},
																					run: (*parser).callonDocumentFragment1007,
																					expr: &seqExpr{
																						pos: position{line: 809, col: 5, offset: 26417},
																						exprs: []interface{}{
																							&labeledExpr{
																								pos:   position{line: 809, col: 5, offset: 26417},
																								label: "delimiter",
																								expr: &actionExpr{
																									pos: position{line: 809, col: 16, offset: 26428},
																									run: (*parser).callonDocumentFragment1010,
																									expr: &seqExpr{
																										pos: position{line: 809, col: 16, offset: 26428},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 809, col: 16, offset: 26428},
																												val:        "****",
																												ignoreCase: false,
																												want:       "\"****\"",
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 809, col: 23, offset: 26435},
																												expr: &litMatcher{
																													pos:        position{line: 809, col: 23, offset: 26435},
																													val:        "*",
																													ignoreCase: false,
																													want:       "\"*\"",
																												},
																											},
																										},
																									},
																								},
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 811, col: 8, offset: 26519},
																								expr: &actionExpr{
																									pos: position{line: 3080, col: 10, offset: 100200},
																									run: (*parser).callonDocumentFragment1016,
																									expr: &charClassMatcher{
																										pos:        position{line: 3080, col: 11, offset: 100201},
																										val:        "[ \\t]",
																										chars:      []rune{' ', '\t'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 3096, col: 8, offset: 100524},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 3089, col: 12, offset: 100384},
																										run: (*parser).callonDocumentFragment1019,
																										expr: &choiceExpr{
																											pos: position{line: 3089, col: 13, offset: 100385},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 3089, col: 13, offset: 100385},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 3089, col: 20, offset: 100392},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 3089, col: 29, offset: 100401},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 3093, col: 8, offset: 100474},
																										expr: &anyMatcher{
																											line: 3093, col: 9, offset: 100475,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&andCodeExpr{
																				pos: position{line: 1077, col: 5, offset: 33545},
																				run: (*parser).callonDocumentFragment1026,
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 3093, col: 8, offset: 100474},
																		expr: &anyMatcher{
																			line: 3093, col: 9, offset: 100475,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 2949, col: 18, offset: 95934},
											run: (*parser).callonDocumentFragment1029,
											expr: &seqExpr{
												pos: position{line: 2949, col: 18, offset: 95934},
												exprs: []interface{}{
													&choiceExpr{
														pos: position{line: 2950, col: 9, offset: 95944},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 2950, col: 9, offset: 95944},
																val:        "'''",
																ignoreCase: false,
																want:       "\"'''\"",
															},
															&litMatcher{
																pos:        position{line: 2951, col: 11, offset: 95980},
																val:        "***",
																ignoreCase: false,
																want:       "\"***\"",
															},
															&litMatcher{
																pos:        position{line: 2951, col: 19, offset: 95988},
																val:        "* * *",
																ignoreCase: false,
																want:       "\"* * *\"",
															},
															&litMatcher{
																pos:        position{line: 2951, col: 29, offset: 95998},
																val:        "---",
																ignoreCase: false,
																want:       "\"---\"",
															},
															&litMatcher{
																pos:        position{line: 2951, col: 37, offset: 96006},
																val:        "- - -",
																ignoreCase: false,
																want:       "\"- - -\"",
															},
															&litMatcher{
																pos:        position{line: 2951, col: 47, offset: 96016},
																val:        "___",
																ignoreCase: false,
																want:       "\"___\"",
															},
															&litMatcher{
																pos:        position{line: 2951, col: 55, offset: 96024},
																val:        "_ _ _",
																ignoreCase: false,
																want:       "\"_ _ _\"",
															},
														},
													},
													&zeroOrMoreExpr{
														pos: position{line: 2952, col: 11, offset: 96082},
														expr: &actionExpr{
															pos: position{line: 3080, col: 10, offset: 100200},
															run: (*parser).callonDocumentFragment1040,
															expr: &charClassMatcher{
																pos:        position{line: 3080, col: 11, offset: 100201},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&choiceExpr{
														pos: position{line: 3096, col: 8, offset: 100524},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 3089, col: 12, offset: 100384},
																run: (*parser).callonDocumentFragment1043,
																expr: &choiceExpr{
																	pos: position{line: 3089, col: 13, offset: 100385},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 3089, col: 13, offset: 100385},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 3089, col: 20, offset: 100392},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 3089, col: 29, offset: 100401},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 3093, col: 8, offset: 100474},
																expr: &anyMatcher{
																	line: 3093, col: 9, offset: 100475,
																},
															},
														},
													},
													&choiceExpr{
														pos: position{line: 3096, col: 8, offset: 100524},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 3089, col: 12, offset: 100384},
																run: (*parser).callonDocumentFragment1051,
																expr: &choiceExpr{
																	pos: position{line: 3089, col: 13, offset: 100385},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 3089, col: 13, offset: 100385},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 3089, col: 20, offset: 100392},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 3089, col: 29, offset: 100401},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 3093, col: 8, offset: 100474},
																expr: &anyMatcher{
																	line: 3093, col: 9, offset: 100475,
																},
															},
														},
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 242, col: 11, offset: 7410},
											name: "ListElements",
										},
										&actionExpr{
											pos: position{line: 2847, col: 5, offset: 93063},
											run: (*parser).callonDocumentFragment1059,
											expr: &seqExpr{
												pos: position{line: 2847, col: 5, offset: 93063},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 2855, col: 19, offset: 93240},
														val:        "|===",
														ignoreCase: false,
														want:       "\"|===\"",
													},
													&zeroOrMoreExpr{
														pos: position{line: 2855, col: 26, offset: 93247},
														expr: &actionExpr{
															pos: position{line: 3080, col: 10, offset: 100200},
															run: (*parser).callonDocumentFragment1063,
															expr: &charClassMatcher{
																pos:        position{line: 3080, col: 11, offset: 100201},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
													&choiceExpr{
														pos: position{line: 3096, col: 8, offset: 100524},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 3089, col: 12, offset: 100384},
																run: (*parser).callonDocumentFragment1066,
																expr: &choiceExpr{
																	pos: position{line: 3089, col: 13, offset: 100385},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 3089, col: 13, offset: 100385},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 3089, col: 20, offset: 100392},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 3089, col: 29, offset: 100401},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 3093, col: 8, offset: 100474},
																expr: &anyMatcher{
																	line: 3093, col: 9, offset: 100475,
																},
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 2848, col: 5, offset: 93087},
														label: "header",
														expr: &zeroOrOneExpr{
															pos: position{line: 2848, col: 12, offset: 93094},
															expr: &actionExpr{
																pos: position{line: 2863, col: 5, offset: 93407},
																run: (*parser).callonDocumentFragment1075,
																expr: &seqExpr{
																	pos: position{line: 2863, col: 5, offset: 93407},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 2863, col: 5, offset: 93407},
																			label: "cells",
																			expr: &oneOrMoreExpr{
																				pos: position{line: 2863, col: 11, offset: 93413},
																				expr: &actionExpr{
																					pos: position{line: 2869, col: 5, offset: 93530},
																					run: (*parser).callonDocumentFragment1079,
																					expr: &seqExpr{
																						pos: position{line: 2869, col: 5, offset: 93530},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2869, col: 5, offset: 93530},
																								val:        "|",
																								ignoreCase: false,
																								want:       "\"|\"",
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 2869, col: 9, offset: 93534},
																								expr: &actionExpr{
																									pos: position{line: 3080, col: 10, offset: 100200},
																									run: (*parser).callonDocumentFragment1083,
																									expr: &charClassMatcher{
																										pos:        position{line: 3080, col: 11, offset: 100201},
																										val:        "[ \\t]",
																										chars:      []rune{' ', '\t'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&labeledExpr{
																								pos:   position{line: 2870, col: 5, offset: 93546},
																								label: "content",
																								expr: &zeroOrOneExpr{
																									pos: position{line: 2870, col: 14, offset: 93555},
																									expr: &actionExpr{
																										pos: position{line: 2902, col: 5, offset: 94343},
																										run: (*parser).callonDocumentFragment1087,
																										expr: &labeledExpr{
																											pos:   position{line: 2902, col: 5, offset: 94343},
																											label: "content",
																											expr: &actionExpr{
																												pos: position{line: 2902, col: 14, offset: 94352},
																												run: (*parser).callonDocumentFragment1089,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 2902, col: 14, offset: 94352},
																													expr: &charClassMatcher{
																														pos:        position{line: 2902, col: 14, offset: 94352},
																														val:        "[^\\r\\n|]",
																														chars:      []rune{'\r', '\n', '|'},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 3096, col: 8, offset: 100524},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 3089, col: 12, offset: 100384},
																					run: (*parser).callonDocumentFragment1093,
																					expr: &choiceExpr{
																						pos: position{line: 3089, col: 13, offset: 100385},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 3089, col: 13, offset: 100385},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 3089, col: 20, offset: 100392},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 3089, col: 29, offset: 100401},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 3093, col: 8, offset: 100474},
																					expr: &anyMatcher{
																						line: 3093, col: 9, offset: 100475,
																					},
																				},
																			},
																		},
																		&oneOrMoreExpr{
																			pos: position{line: 2864, col: 5, offset: 93435},
																			expr: &actionExpr{
																				pos: position{line: 690, col: 14, offset: 22312},
																				run: (*parser).callonDocumentFragment1101,
																				expr: &seqExpr{
																					pos: position{line: 690, col: 14, offset: 22312},
																					exprs: []interface{}{
																						&notExpr{
																							pos: position{line: 690, col: 14, offset: 22312},
																							expr: &notExpr{
																								pos: position{line: 3093, col: 8, offset: 100474},
																								expr: &anyMatcher{
																									line: 3093, col: 9, offset: 100475,
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 690, col: 19, offset: 22317},
																							expr: &actionExpr{
																								pos: position{line: 3080, col: 10, offset: 100200},
																								run: (*parser).callonDocumentFragment1107,
																								expr: &charClassMatcher{
																									pos:        position{line: 3080, col: 11, offset: 100201},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 3096, col: 8, offset: 100524},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 3089, col: 12, offset: 100384},
																									run: (*parser).callonDocumentFragment1110,
																									expr: &choiceExpr{
																										pos: position{line: 3089, col: 13, offset: 100385},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 3089, col: 13, offset: 100385},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 3089, col: 20, offset: 100392},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 3089, col: 29, offset: 100401},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 3093, col: 8, offset: 100474},
																									expr: &anyMatcher{
																										line: 3093, col: 9, offset: 100475,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 2849, col: 5, offset: 93113},
														label: "rows",
														expr: &zeroOrMoreExpr{
															pos: position{line: 2849, col: 10, offset: 93118},
															expr: &choiceExpr{
																pos: position{line: 2874, col: 13, offset: 93652},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 2884, col: 5, offset: 93871},
																		run: (*parser).callonDocumentFragment1120,
																		expr: &seqExpr{
																			pos: position{line: 2884, col: 5, offset: 93871},
																			exprs: []interface{}{
																				&notExpr{
																					pos: position{line: 2884, col: 5, offset: 93871},
																					expr: &choiceExpr{
																						pos: position{line: 2859, col: 22, offset: 93320},
																						alternatives: []interface{}{
																							&seqExpr{
																								pos: position{line: 2855, col: 19, offset: 93240},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2855, col: 19, offset: 93240},
																										val:        "|===",
																										ignoreCase: false,
																										want:       "\"|===\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 2855, col: 26, offset: 93247},
																										expr: &actionExpr{
																											pos: position{line: 3080, col: 10, offset: 100200},
																											run: (*parser).callonDocumentFragment1127,
																											expr: &charClassMatcher{
																												pos:        position{line: 3080, col: 11, offset: 100201},
																												val:        "[ \\t]",
																												chars:      []rune{' ', '\t'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 3096, col: 8, offset: 100524},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 3089, col: 12, offset: 100384},
																												run: (*parser).callonDocumentFragment1130,
																												expr: &choiceExpr{
																													pos: position{line: 3089, col: 13, offset: 100385},
																													alternatives: []interface{}{
																														&litMatcher{
																															pos:        position{line: 3089, col: 13, offset: 100385},
																															val:        "\n",
																															ignoreCase: false,
																															want:       "\"\\n\"",
																														},
																														&litMatcher{
																															pos:        position{line: 3089, col: 20, offset: 100392},
																															val:        "\r\n",
																															ignoreCase: false,
																															want:       "\"\\r\\n\"",
																														},
																														&litMatcher{
																															pos:        position{line: 3089, col: 29, offset: 100401},
																															val:        "\r",
																															ignoreCase: false,
																															want:       "\"\\r\"",
																														},
																													},
																												},
																											},
																											&notExpr{
																												pos: position{line: 3093, col: 8, offset: 100474},
																												expr: &anyMatcher{
																													line: 3093, col: 9, offset: 100475,
																												},
																											},
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 3093, col: 8, offset: 100474},
																								expr: &anyMatcher{
																									line: 3093, col: 9, offset: 100475,
																								},
																							},
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 2885, col: 5, offset: 93894},
																					label: "cells",
																					expr: &oneOrMoreExpr{
																						pos: position{line: 2885, col: 11, offset: 93900},
																						expr: &actionExpr{
																							pos: position{line: 2885, col: 12, offset: 93901},
																							run: (*parser).callonDocumentFragment1141,
																							expr: &seqExpr{
																								pos: position{line: 2885, col: 12, offset: 93901},
																								exprs: []interface{}{
																									&labeledExpr{
																										pos:   position{line: 2885, col: 12, offset: 93901},
																										label: "cell",
																										expr: &actionExpr{
																											pos: position{line: 2894, col: 5, offset: 94142},
																											run: (*parser).callonDocumentFragment1144,
																											expr: &seqExpr{
																												pos: position{line: 2894, col: 5, offset: 94142},
																												exprs: []interface{}{
																													&notExpr{
																														pos: position{line: 2894, col: 5, offset: 94142},
																														expr: &choiceExpr{
																															pos: position{line: 2859, col: 22, offset: 93320},
																															alternatives: []interface{}{
																																&seqExpr{
																																	pos: position{line: 2855, col: 19, offset: 93240},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 2855, col: 19, offset: 93240},
																																			val:        "|===",
																																			ignoreCase: false,
																																			want:       "\"|===\"",
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 2855, col: 26, offset: 93247},
																																			expr: &actionExpr{
																																				pos: position{line: 3080, col: 10, offset: 100200},
																																				run: (*parser).callonDocumentFragment1151,
																																				expr: &charClassMatcher{
																																					pos:        position{line: 3080, col: 11, offset: 100201},
																																					val:        "[ \\t]",
																																					chars:      []rune{' ', '\t'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																		&choiceExpr{
																																			pos: position{line: 3096, col: 8, offset: 100524},
																																			alternatives: []interface{}{
																																				&actionExpr{
																																					pos: position{line: 3089, col: 12, offset: 100384},
																																					run: (*parser).callonDocumentFragment1154,
																																					expr: &choiceExpr{
																																						pos: position{line: 3089, col: 13, offset: 100385},
																																						alternatives: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 3089, col: 13, offset: 100385},
																																								val:        "\n",
																																								ignoreCase: false,
																																								want:       "\"\\n\"",
																																							},
																																							&litMatcher{
																																								pos:        position{line: 3089, col: 20, offset: 100392},
																																								val:        "\r\n",
																																								ignoreCase: false,
																																								want:       "\"\\r\\n\"",
																																							},
																																							&litMatcher{
																																								pos:        position{line: 3089, col: 29, offset: 100401},
																																								val:        "\r",
																																								ignoreCase: false,
																																								want:       "\"\\r\"",
																																							},
																																						},
																																					},
																																				},
																																				&notExpr{
																																					pos: position{line: 3093, col: 8, offset: 100474},
																																					expr: &anyMatcher{
																																						line: 3093, col: 9, offset: 100475,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&notExpr{
																																	pos: position{line: 3093, col: 8, offset: 100474},
																																	expr: &anyMatcher{
																																		line: 3093, col: 9, offset: 100475,
																																	},
																																},
																															},
																														},
																													},
																													&notExpr{
																														pos: position{line: 2895, col: 5, offset: 94165},
																														expr: &actionExpr{
																															pos: position{line: 690, col: 14, offset: 22312},
																															run: (*parser).callonDocumentFragment1164,
																															expr: &seqExpr{
																																pos: position{line: 690, col: 14, offset: 22312},
																																exprs: []interface{}{
																																	&notExpr{
																																		pos: position{line: 690, col: 14, offset: 22312},
																																		expr: &notExpr{
																																			pos: position{line: 3093, col: 8, offset: 100474},
																																			expr: &anyMatcher{
																																				line: 3093, col: 9, offset: 100475,
																																			},
																																		},
																																	},
																																	&zeroOrMoreExpr{
																																		pos: position{line: 690, col: 19, offset: 22317},
																																		expr: &actionExpr{
																																			pos: position{line: 3080, col: 10, offset: 100200},
																																			run: (*parser).callonDocumentFragment1170,
																																			expr: &charClassMatcher{
																																				pos:        position{line: 3080, col: 11, offset: 100201},
																																				val:        "[ \\t]",
																																				chars:      []rune{' ', '\t'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																	&choiceExpr{
																																		pos: position{line: 3096, col: 8, offset: 100524},
																																		alternatives: []interface{}{
																																			&actionExpr{
																																				pos: position{line: 3089, col: 12, offset: 100384},
																																				run: (*parser).callonDocumentFragment1173,
																																				expr: &choiceExpr{
																																					pos: position{line: 3089, col: 13, offset: 100385},
																																					alternatives: []interface{}{
																																						&litMatcher{
																																							pos:        position{line: 3089, col: 13, offset: 100385},
																																							val:        "\n",
																																							ignoreCase: false,
																																							want:       "\"\\n\"",
																																						},
																																						&litMatcher{
																																							pos:        position{line: 3089, col: 20, offset: 100392},
																																							val:        "\r\n",
																																							ignoreCase: false,
																																							want:       "\"\\r\\n\"",
																																						},
																																						&litMatcher{
																																							pos:        position{line: 3089, col: 29, offset: 100401},
																																							val:        "\r",
																																							ignoreCase: false,
																																							want:       "\"\\r\"",
																																						},
																																					},
																																				},
																																			},
																																			&notExpr{
																																				pos: position{line: 3093, col: 8, offset: 100474},
																																				expr: &anyMatcher{
																																					line: 3093, col: 9, offset: 100475,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																													&litMatcher{
																														pos:        position{line: 2896, col: 5, offset: 94180},
																														val:        "|",
																														ignoreCase: false,
																														want:       "\"|\"",
																													},
																													&zeroOrMoreExpr{
																														pos: position{line: 2896, col: 9, offset: 94184},
																														expr: &actionExpr{
																															pos: position{line: 3080, col: 10, offset: 100200},
																															run: (*parser).callonDocumentFragment1182,
																															expr: &charClassMatcher{
																																pos:        position{line: 3080, col: 11, offset: 100201},
																																val:        "[ \\t]",
																																chars:      []rune{' ', '\t'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																													&labeledExpr{
																														pos:   position{line: 2896, col: 16, offset: 94191},
																														label: "content",
																														expr: &zeroOrOneExpr{
																															pos: position{line: 2896, col: 25, offset: 94200},
																															expr: &actionExpr{
																																pos: position{line: 2902, col: 5, offset: 94343},
																																run: (*parser).callonDocumentFragment1186,
																																expr: &labeledExpr{
																																	pos:   position{line: 2902, col: 5, offset: 94343},
																																	label: "content",
																																	expr: &actionExpr{
																																		pos: position{line: 2902, col: 14, offset: 94352},
																																		run: (*parser).callonDocumentFragment1188,
																																		expr: &oneOrMoreExpr{
																																			pos: position{line: 2902, col: 14, offset: 94352},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 2902, col: 14, offset: 94352},
																																				val:        "[^\\r\\n|]",
																																				chars:      []rune{'\r', '\n', '|'},
																																				ignoreCase: false,
																																				inverted:   true,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 3096, col: 8, offset: 100524},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 3089, col: 12, offset: 100384},
																												run: (*parser).callonDocumentFragment1192,
																												expr: &choiceExpr{
																													pos: position{line: 3089, col: 13, offset: 100385},
																													alternatives: []interface{}{
																														&litMatcher{
																															pos:        position{line: 3089, col: 13, offset: 100385},
																															val:        "\n",
																															ignoreCase: false,
																															want:       "\"\\n\"",
																														},
																														&litMatcher{
																															pos:        position{line: 3089, col: 20, offset: 100392},
																															val:        "\r\n",
																															ignoreCase: false,
																															want:       "\"\\r\\n\"",
																														},
																														&litMatcher{
																															pos:        position{line: 3089, col: 29, offset: 100401},
																															val:        "\r",
																															ignoreCase: false,
																															want:       "\"\\r\"",
																														},
																													},
																												},
																											},
																											&notExpr{
																												pos: position{line: 3093, col: 8, offset: 100474},
																												expr: &anyMatcher{
																													line: 3093, col: 9, offset: 100475,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 2888, col: 6, offset: 93963},
																					alternatives: []interface{}{
																						&oneOrMoreExpr{
																							pos: position{line: 2888, col: 6, offset: 93963},
																							expr: &actionExpr{
																								pos: position{line: 690, col: 14, offset: 22312},
																								run: (*parser).callonDocumentFragment1201,
																								expr: &seqExpr{
																									pos: position{line: 690, col: 14, offset: 22312},
																									exprs: []interface{}{
																										&notExpr{
																											pos: position{line: 690, col: 14, offset: 22312},
																											expr: &notExpr{
																												pos: position{line: 3093, col: 8, offset: 100474},
																												expr: &anyMatcher{
																													line: 3093, col: 9, offset: 100475,
																												},
																											},
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 690, col: 19, offset: 22317},
																											expr: &actionExpr{
																												pos: position{line: 3080, col: 10, offset: 100200},
																												run: (*parser).callonDocumentFragment1207,
																												expr: &charClassMatcher{
																													pos:        position{line: 3080, col: 11, offset: 100201},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 3096, col: 8, offset: 100524},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 3089, col: 12, offset: 100384},
																													run: (*parser).callonDocumentFragment1210,
																													expr: &choiceExpr{
																														pos: position{line: 3089, col: 13, offset: 100385},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 3089, col: 13, offset: 100385},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 3089, col: 20, offset: 100392},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 3089, col: 29, offset: 100401},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 3093, col: 8, offset: 100474},
																													expr: &anyMatcher{
																														line: 3093, col: 9, offset: 100475,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&andExpr{
																							pos: position{line: 2888, col: 19, offset: 93976},
																							expr: &choiceExpr{
																								pos: position{line: 2859, col: 22, offset: 93320},
																								alternatives: []interface{}{
																									&seqExpr{
																										pos: position{line: 2855, col: 19, offset: 93240},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 2855, col: 19, offset: 93240},
																												val:        "|===",
																												ignoreCase: false,
																												want:       "\"|===\"",
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 2855, col: 26, offset: 93247},
																												expr: &actionExpr{
																													pos: position{line: 3080, col: 10, offset: 100200},
																													run: (*parser).callonDocumentFragment1222,
																													expr: &charClassMatcher{
																														pos:        position{line: 3080, col: 11, offset: 100201},
																														val:        "[ \\t]",
																														chars:      []rune{' ', '\t'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 3096, col: 8, offset: 100524},
																												alternatives: []interface{}{
																													&actionExpr{
																														pos: position{line: 3089, col: 12, offset: 100384},
																														run: (*parser).callonDocumentFragment1225,
																														expr: &choiceExpr{
																															pos: position{line: 3089, col: 13, offset: 100385},
																															alternatives: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 3089, col: 13, offset: 100385},
																																	val:        "\n",
																																	ignoreCase: false,
																																	want:       "\"\\n\"",
																																},
																																&litMatcher{
																																	pos:        position{line: 3089, col: 20, offset: 100392},
																																	val:        "\r\n",
																																	ignoreCase: false,
																																	want:       "\"\\r\\n\"",
																																},
																																&litMatcher{
																																	pos:        position{line: 3089, col: 29, offset: 100401},
																																	val:        "\r",
																																	ignoreCase: false,
																																	want:       "\"\\r\"",
																																},
																															},
																														},
																													},
																													&notExpr{
																														pos: position{line: 3093, col: 8, offset: 100474},
																														expr: &anyMatcher{
																															line: 3093, col: 9, offset: 100475,
																														},
																													},
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 3093, col: 8, offset: 100474},
																										expr: &anyMatcher{
																											line: 3093, col: 9, offset: 100475,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2877, col: 5, offset: 93719},
																		run: (*parser).callonDocumentFragment1234,
																		expr: &seqExpr{
																			pos: position{line: 2877, col: 5, offset: 93719},
																			exprs: []interface{}{
																				&notExpr{
																					pos: position{line: 2877, col: 5, offset: 93719},
																					expr: &choiceExpr{
																						pos: position{line: 2859, col: 22, offset: 93320},
																						alternatives: []interface{}{
																							&seqExpr{
																								pos: position{line: 2855, col: 19, offset: 93240},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 2855, col: 19, offset: 93240},
																										val:        "|===",
																										ignoreCase: false,
																										want:       "\"|===\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 2855, col: 26, offset: 93247},
																										expr: &actionExpr{
																											pos: position{line: 3080, col: 10, offset: 100200},
																											run: (*parser).callonDocumentFragment1241,
																											expr: &charClassMatcher{
																												pos:        position{line: 3080, col: 11, offset: 100201},
																												val:        "[ \\t]",
																												chars:      []rune{' ', '\t'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 3096, col: 8, offset: 100524},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 3089, col: 12, offset: 100384},
																												run: (*parser).callonDocumentFragment1244,
																												expr: &choiceExpr{
																													pos: position{line: 3089, col: 13, offset: 100385},
																													alternatives: []interface{}{
																														&litMatcher{
																															pos:        position{line: 3089, col: 13, offset: 100385},
																															val:        "\n",
																															ignoreCase: false,
																															want:       "\"\\n\"",
																														},
																														&litMatcher{
																															pos:        position{line: 3089, col: 20, offset: 100392},
																															val:        "\r\n",
																															ignoreCase: false,
																															want:       "\"\\r\\n\"",
																														},
																														&litMatcher{
																															pos:        position{line: 3089, col: 29, offset: 100401},
																															val:        "\r",
																															ignoreCase: false,
																															want:       "\"\\r\"",
																														},
																													},
																												},
																											},
																											&notExpr{
																												pos: position{line: 3093, col: 8, offset: 100474},
																												expr: &anyMatcher{
																													line: 3093, col: 9, offset: 100475,
																												},
																											},
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 3093, col: 8, offset: 100474},
																								expr: &anyMatcher{
																									line: 3093, col: 9, offset: 100475,
																								},
																							},
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 2878, col: 5, offset: 93742},
																					label: "cells",
																					expr: &oneOrMoreExpr{
																						pos: position{line: 2878, col: 11, offset: 93748},
																						expr: &actionExpr{
																							pos: position{line: 2894, col: 5, offset: 94142},
																							run: (*parser).callonDocumentFragment1255,
																							expr: &seqExpr{
																								pos: position{line: 2894, col: 5, offset: 94142},
																								exprs: []interface{}{
																									&notExpr{
																										pos: position{line: 2894, col: 5, offset: 94142},
																										expr: &choiceExpr{
																											pos: position{line: 2859, col: 22, offset: 93320},
																											alternatives: []interface{}{
																												&seqExpr{
																													pos: position{line: 2855, col: 19, offset: 93240},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 2855, col: 19, offset: 93240},
																															val:        "|===",
																															ignoreCase: false,
																															want:       "\"|===\"",
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 2855, col: 26, offset: 93247},
																															expr: &actionExpr{
																																pos: position{line: 3080, col: 10, offset: 100200},
																																run: (*parser).callonDocumentFragment1262,
																																expr: &charClassMatcher{
																																	pos:        position{line: 3080, col: 11, offset: 100201},
																																	val:        "[ \\t]",
																																	chars:      []rune{' ', '\t'},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																														&choiceExpr{
																															pos: position{line: 3096, col: 8, offset: 100524},
																															alternatives: []interface{}{
																																&actionExpr{
																																	pos: position{line: 3089, col: 12, offset: 100384},
																																	run: (*parser).callonDocumentFragment1265,
																																	expr: &choiceExpr{
																																		pos: position{line: 3089, col: 13, offset: 100385},
																																		alternatives: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 3089, col: 13, offset: 100385},
																																				val:        "\n",
																																				ignoreCase: false,
																																				want:       "\"\\n\"",
																																			},
																																			&litMatcher{
																																				pos:        position{line: 3089, col: 20, offset: 100392},
																																				val:        "\r\n",
																																				ignoreCase: false,
																																				want:       "\"\\r\\n\"",
																																			},
																																			&litMatcher{
																																				pos:        position{line: 3089, col: 29, offset: 100401},
																																				val:        "\r",
																																				ignoreCase: false,
																																				want:       "\"\\r\"",
																																			},
																																		},
																																	},
																																},
																																&notExpr{
																																	pos: position{line: 3093, col: 8, offset: 100474},
																																	expr: &anyMatcher{
																																		line: 3093, col: 9, offset: 100475,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 3093, col: 8, offset: 100474},
																													expr: &anyMatcher{
																														line: 3093, col: 9, offset: 100475,
																													},
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 2895, col: 5, offset: 94165},
																										expr: &actionExpr{
																											pos: position{line: 690, col: 14, offset: 22312},
																											run: (*parser).callonDocumentFragment1275,
																											expr: &seqExpr{
																												pos: position{line: 690, col: 14, offset: 22312},
																												exprs: []interface{}{
																													&notExpr{
																														pos: position{line: 690, col: 14, offset: 22312},
																														expr: &notExpr{
																															pos: position{line: 3093, col: 8, offset: 100474},
																															expr: &anyMatcher{
																																line: 3093, col: 9, offset: 100475,
																															},
																														},
																													},
																													&zeroOrMoreExpr{
																														pos: position{line: 690, col: 19, offset: 22317},
																														expr: &actionExpr{
																															pos: position{line: 3080, col: 10, offset: 100200},
																															run: (*parser).callonDocumentFragment1281,
																															expr: &charClassMatcher{
																																pos:        position{line: 3080, col: 11, offset: 100201},
																																val:        "[ \\t]",
																																chars:      []rune{' ', '\t'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																													&choiceExpr{
																														pos: position{line: 3096, col: 8, offset: 100524},
																														alternatives: []interface{}{
																															&actionExpr{
																																pos: position{line: 3089, col: 12, offset: 100384},
																																run: (*parser).callonDocumentFragment1284,
																																expr: &choiceExpr{
																																	pos: position{line: 3089, col: 13, offset: 100385},
																																	alternatives: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 3089, col: 13, offset: 100385},
																																			val:        "\n",
																																			ignoreCase: false,
																																			want:       "\"\\n\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 3089, col: 20, offset: 100392},
																																			val:        "\r\n",
																																			ignoreCase: false,
																																			want:       "\"\\r\\n\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 3089, col: 29, offset: 100401},
																																			val:        "\r",
																																			ignoreCase: false,
																																			want:       "\"\\r\"",
																																		},
																																	},
																																},
																															},
																															&notExpr{
																																pos: position{line: 3093, col: 8, offset: 100474},
																																expr: &anyMatcher{
																																	line: 3093, col: 9, offset: 100475,
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 2896, col: 5, offset: 94180},
																										val:        "|",
																										ignoreCase: false,
																										want:       "\"|\"",
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 2896, col: 9, offset: 94184},
																										expr: &actionExpr{
																											pos: position{line: 3080, col: 10, offset: 100200},
																											run: (*parser).callonDocumentFragment1293,
																											expr: &charClassMatcher{
																												pos:        position{line: 3080, col: 11, offset: 100201},
																												val:        "[ \\t]",
																												chars:      []rune{' ', '\t'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																									&labeledExpr{
																										pos:   position{line: 2896, col: 16, offset: 94191},
																										label: "content",
																										expr: &zeroOrOneExpr{
																											pos: position{line: 2896, col: 25, offset: 94200},
																											expr: &actionExpr{
																												pos: position{line: 2902, col: 5, offset: 94343},
																												run: (*parser).callonDocumentFragment1297,
																												expr: &labeledExpr{
																													pos:   position{line: 2902, col: 5, offset: 94343},
																													label: "content",
																													expr: &actionExpr{
																														pos: position{line: 2902, col: 14, offset: 94352},
																														run: (*parser).callonDocumentFragment1299,
																														expr: &oneOrMoreExpr{
																															pos: position{line: 2902, col: 14, offset: 94352},
																															expr: &charClassMatcher{
																																pos:        position{line: 2902, col: 14, offset: 94352},
																																val:        "[^\\r\\n|]",
																																chars:      []rune{'\r', '\n', '|'},
																																ignoreCase: false,
																																inverted:   true,
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 3096, col: 8, offset: 100524},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 3089, col: 12, offset: 100384},
																							run: (*parser).callonDocumentFragment1303,
																							expr: &choiceExpr{
																								pos: position{line: 3089, col: 13, offset: 100385},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 3089, col: 13, offset: 100385},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 3089, col: 20, offset: 100392},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 3089, col: 29, offset: 100401},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 3093, col: 8, offset: 100474},
																							expr: &anyMatcher{
																								line: 3093, col: 9, offset: 100475,
																							},
																						},
																					},
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 2879, col: 5, offset: 93769},
																					expr: &actionExpr{
																						pos: position{line: 690, col: 14, offset: 22312},
																						run: (*parser).callonDocumentFragment1311,
																						expr: &seqExpr{
																							pos: position{line: 690, col: 14, offset: 22312},
																							exprs: []interface{}{
																								&notExpr{
																									pos: position{line: 690, col: 14, offset: 22312},
																									expr: &notExpr{
																										pos: position{line: 3093, col: 8, offset: 100474},
																										expr: &anyMatcher{
																											line: 3093, col: 9, offset: 100475,
																										},
																									},
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 690, col: 19, offset: 22317},
																									expr: &actionExpr{
																										pos: position{line: 3080, col: 10, offset: 100200},
																										run: (*parser).callonDocumentFragment1317,
																										expr: &charClassMatcher{
																											pos:        position{line: 3080, col: 11, offset: 100201},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 3096, col: 8, offset: 100524},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 3089, col: 12, offset: 100384},
																											run: (*parser).callonDocumentFragment1320,
																											expr: &choiceExpr{
																												pos: position{line: 3089, col: 13, offset: 100385},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 3089, col: 13, offset: 100385},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 3089, col: 20, offset: 100392},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 3089, col: 29, offset: 100401},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 3093, col: 8, offset: 100474},
																											expr: &anyMatcher{
																												line: 3093, col: 9, offset: 100475,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&choiceExpr{
														pos: position{line: 2859, col: 22, offset: 93320},
														alternatives: []interface{}{
															&seqExpr{
																pos: position{line: 2855, col: 19, offset: 93240},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2855, col: 19, offset: 93240},
																		val:        "|===",
																		ignoreCase: false,
																		want:       "\"|===\"",
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 2855, col: 26, offset: 93247},
																		expr: &actionExpr{
																			pos: position{line: 3080, col: 10, offset: 100200},
																			run: (*parser).callonDocumentFragment1331,
																			expr: &charClassMatcher{
																				pos:        position{line: 3080, col: 11, offset: 100201},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 3096, col: 8, offset: 100524},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 3089, col: 12, offset: 100384},
																				run: (*parser).callonDocumentFragment1334,
																				expr: &choiceExpr{
																					pos: position{line: 3089, col: 13, offset: 100385},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 3089, col: 13, offset: 100385},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 3089, col: 20, offset: 100392},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 3089, col: 29, offset: 100401},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3093, col: 8, offset: 100474},
																				expr: &anyMatcher{
																					line: 3093, col: 9, offset: 100475,
																				},
																			},
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 3093, col: 8, offset: 100474},
																expr: &anyMatcher{
																	line: 3093, col: 9, offset: 100475,
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 2770, col: 22, offset: 90863},
											run: (*parser).callonDocumentFragment1343,
											expr: &seqExpr{
												pos: position{line: 2770, col: 22, offset: 90863},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 2775, col: 31, offset: 91084},
														val:        "//",
														ignoreCase: false,
														want:       "\"//\"",
													},
													&notExpr{
														pos: position{line: 2775, col: 36, offset: 91089},
														expr: &litMatcher{
															pos:        position{line: 2775, col: 37, offset: 91090},
															val:        "//",
															ignoreCase: false,
															want:       "\"//\"",
														},
													},
													&labeledExpr{
														pos:   position{line: 2770, col: 49, offset: 90890},
														label: "content",
														expr: &actionExpr{
															pos: position{line: 2777, col: 29, offset: 91125},
															run: (*parser).callonDocumentFragment1349,
															expr: &zeroOrMoreExpr{
																pos: position{line: 2777, col: 29, offset: 91125},
																expr: &charClassMatcher{
																	pos:        position{line: 2777, col: 29, offset: 91125},
																	val:        "[^\\r\\n]",
																	chars:      []rune{'\r', '\n'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
													},
													&choiceExpr{
														pos: position{line: 3096, col: 8, offset: 100524},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 3089, col: 12, offset: 100384},
																run: (*parser).callonDocumentFragment1353,
																expr: &choiceExpr{
																	pos: position{line: 3089, col: 13, offset: 100385},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 3089, col: 13, offset: 100385},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 3089, col: 20, offset: 100392},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 3089, col: 29, offset: 100401},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 3093, col: 8, offset: 100474},
																expr: &anyMatcher{
																	line: 3093, col: 9, offset: 100475,
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 1853, col: 5, offset: 60759},
											run: (*parser).callonDocumentFragment1360,
											expr: &seqExpr{
												pos: position{line: 1853, col: 5, offset: 60759},
												exprs: []interface{}{
													&labeledExpr{
														pos:   position{line: 1853, col: 5, offset: 60759},
														label: "kind",
														expr: &choiceExpr{
															pos: position{line: 293, col: 19, offset: 9062},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 293, col: 19, offset: 9062},
																	run: (*parser).callonDocumentFragment1364,
																	expr: &litMatcher{
																		pos:        position{line: 293, col: 19, offset: 9062},
																		val:        "TIP",
																		ignoreCase: false,
																		want:       "\"TIP\"",
																	},
																},
																&actionExpr{
																	pos: position{line: 295, col: 5, offset: 9100},
																	run: (*parser).callonDocumentFragment1366,
																	expr: &litMatcher{
																		pos:        position{line: 295, col: 5, offset: 9100},
																		val:        "NOTE",
																		ignoreCase: false,
																		want:       "\"NOTE\"",
																	},
																},
																&actionExpr{
																	pos: position{line: 297, col: 5, offset: 9140},
																	run: (*parser).callonDocumentFragment1368,
																	expr: &litMatcher{
																		pos:        position{line: 297, col: 5, offset: 9140},
																		val:        "IMPORTANT",
																		ignoreCase: false,
																		want:       "\"IMPORTANT\"",
																	},
																},
																&actionExpr{
																	pos: position{line: 299, col: 5, offset: 9190},
																	run: (*parser).callonDocumentFragment1370,
																	expr: &litMatcher{
																		pos:        position{line: 299, col: 5, offset: 9190},
																		val:        "WARNING",
																		ignoreCase: false,
																		want:       "\"WARNING\"",
																	},
																},
																&actionExpr{
																	pos: position{line: 301, col: 5, offset: 9236},
																	run: (*parser).callonDocumentFragment1372,
																	expr: &litMatcher{
																		pos:        position{line: 301, col: 5, offset: 9236},
																		val:        "CAUTION",
																		ignoreCase: false,
																		want:       "\"CAUTION\"",
																	},
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 1853, col: 27, offset: 60781},
														val:        ": ",
														ignoreCase: false,
														want:       "\": \"",
													},
													&labeledExpr{
														pos:   position{line: 1854, col: 5, offset: 60791},
														label: "firstLine",
														expr: &actionExpr{
															pos: position{line: 1865, col: 5, offset: 61135},
															run: (*parser).callonDocumentFragment1376,
															expr: &seqExpr{
																pos: position{line: 1865, col: 5, offset: 61135},
																exprs: []interface{}{
																	&labeledExpr{
																		pos:   position{line: 1865, col: 5, offset: 61135},
																		label: "content",
																		expr: &actionExpr{
																			pos: position{line: 1865, col: 14, offset: 61144},
																			run: (*parser).callonDocumentFragment1379,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 1865, col: 14, offset: 61144},
																				expr: &charClassMatcher{
																					pos:        position{line: 1865, col: 14, offset: 61144},
																					val:        "[^\\r\\n]",
																					chars:      []rune{'\r', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&andCodeExpr{
																		pos: position{line: 1868, col: 5, offset: 61251},
																		run: (*parser).callonDocumentFragment1382,
																	},
																	&choiceExpr{
																		pos: position{line: 3096, col: 8, offset: 100524},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 3089, col: 12, offset: 100384},
																				run: (*parser).callonDocumentFragment1384,
																				expr: &choiceExpr{
																					pos: position{line: 3089, col: 13, offset: 100385},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 3089, col: 13, offset: 100385},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 3089, col: 20, offset: 100392},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 3089, col: 29, offset: 100401},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3093, col: 8, offset: 100474},
																				expr: &anyMatcher{
																					line: 3093, col: 9, offset: 100475,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 1855, col: 5, offset: 60825},
														label: "otherLines",
														expr: &zeroOrMoreExpr{
															pos: position{line: 1855, col: 16, offset: 60836},
															expr: &actionExpr{
																pos: position{line: 1856, col: 9, offset: 60846},
																run: (*parser).callonDocumentFragment1393,
																expr: &seqExpr{
																	pos: position{line: 1856, col: 9, offset: 60846},
																	exprs: []interface{}{
																		&notExpr{
																			pos: position{line: 1856, col: 9, offset: 60846},
																			expr: &seqExpr{
																				pos: position{line: 1593, col: 34, offset: 52137},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 1593, col: 34, offset: 52137},
																						val:        "+",
																						ignoreCase: false,
																						want:       "\"+\"",
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 1593, col: 38, offset: 52141},
																						expr: &actionExpr{
																							pos: position{line: 3080, col: 10, offset: 100200},
																							run: (*parser).callonDocumentFragment1399,
																							expr: &charClassMatcher{
																								pos:        position{line: 3080, col: 11, offset: 100201},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 3089, col: 12, offset: 100384},
																						run: (*parser).callonDocumentFragment1401,
																						expr: &choiceExpr{
																							pos: position{line: 3089, col: 13, offset: 100385},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 3089, col: 13, offset: 100385},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 3089, col: 20, offset: 100392},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 3089, col: 29, offset: 100401},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 1857, col: 9, offset: 60885},
																			label: "line",
																			expr: &choiceExpr{
																				pos: position{line: 1857, col: 15, offset: 60891},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 2770, col: 22, offset: 90863},
																						run: (*parser).callonDocumentFragment1408,
																						expr: &seqExpr{
																							pos: position{line: 2770, col: 22, offset: 90863},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2775, col: 31, offset: 91084},
																									val:        "//",
																									ignoreCase: false,
																									want:       "\"//\"",
																								},
																								&notExpr{
																									pos: position{line: 2775, col: 36, offset: 91089},
																									expr: &litMatcher{
																										pos:        position{line: 2775, col: 37, offset: 91090},
																										val:        "//",
																										ignoreCase: false,
																										want:       "\"//\"",
																									},
																								},
																								&labeledExpr{
																									pos:   position{line: 2770, col: 49, offset: 90890},
																									label: "content",
																									expr: &actionExpr{
																										pos: position{line: 2777, col: 29, offset: 91125},
																										run: (*parser).callonDocumentFragment1414,
																										expr: &zeroOrMoreExpr{
																											pos: position{line: 2777, col: 29, offset: 91125},
																											expr: &charClassMatcher{
																												pos:        position{line: 2777, col: 29, offset: 91125},
																												val:        "[^\\r\\n]",
																												chars:      []rune{'\r', '\n'},
																												ignoreCase: false,
																												inverted:   true,
																											},
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 3096, col: 8, offset: 100524},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 3089, col: 12, offset: 100384},
																											run: (*parser).callonDocumentFragment1418,
																											expr: &choiceExpr{
																												pos: position{line: 3089, col: 13, offset: 100385},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 3089, col: 13, offset: 100385},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 3089, col: 20, offset: 100392},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 3089, col: 29, offset: 100401},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 3093, col: 8, offset: 100474},
																											expr: &anyMatcher{
																												line: 3093, col: 9, offset: 100475,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1865, col: 5, offset: 61135},
																						run: (*parser).callonDocumentFragment1425,
																						expr: &seqExpr{
																							pos: position{line: 1865, col: 5, offset: 61135},
																							exprs: []interface{}{
																								&labeledExpr{
																									pos:   position{line: 1865, col: 5, offset: 61135},
																									label: "content",
																									expr: &actionExpr{
																										pos: position{line: 1865, col: 14, offset: 61144},
																										run: (*parser).callonDocumentFragment1428,
																										expr: &oneOrMoreExpr{
																											pos: position{line: 1865, col: 14, offset: 61144},
																											expr: &charClassMatcher{
																												pos:        position{line: 1865, col: 14, offset: 61144},
																												val:        "[^\\r\\n]",
																												chars:      []rune{'\r', '\n'},
																												ignoreCase: false,
																												inverted:   true,
																											},
																										},
																									},
																								},
																								&andCodeExpr{
																									pos: position{line: 1868, col: 5, offset: 61251},
																									run: (*parser).callonDocumentFragment1431,
																								},
																								&choiceExpr{
																									pos: position{line: 3096, col: 8, offset: 100524},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 3089, col: 12, offset: 100384},
																											run: (*parser).callonDocumentFragment1433,
																											expr: &choiceExpr{
																												pos: position{line: 3089, col: 13, offset: 100385},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 3089, col: 13, offset: 100385},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 3089, col: 20, offset: 100392},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 3089, col: 29, offset: 100401},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 3093, col: 8, offset: 100474},
																											expr: &anyMatcher{
																												line: 3093, col: 9, offset: 100475,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 1876, col: 5, offset: 61417},
											run: (*parser).callonDocumentFragment1440,
											expr: &seqExpr{
												pos: position{line: 1876, col: 5, offset: 61417},
												exprs: []interface{}{
													&labeledExpr{
														pos:   position{line: 1876, col: 5, offset: 61417},
														label: "firstLine",
														expr: &actionExpr{
															pos: position{line: 1883, col: 5, offset: 61702},
															run: (*parser).callonDocumentFragment1443,
															expr: &seqExpr{
																pos: position{line: 1883, col: 5, offset: 61702},
																exprs: []interface{}{
																	&labeledExpr{
																		pos:   position{line: 1883, col: 5, offset: 61702},
																		label: "content",
																		expr: &actionExpr{
																			pos: position{line: 1883, col: 14, offset: 61711},
																			run: (*parser).callonDocumentFragment1446,
																			expr: &seqExpr{
																				pos: position{line: 1883, col: 14, offset: 61711},
																				exprs: []interface{}{
																					&actionExpr{
																						pos: position{line: 3084, col: 11, offset: 100267},
																						run: (*parser).callonDocumentFragment1448,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 3084, col: 11, offset: 100267},
																							expr: &charClassMatcher{
																								pos:        position{line: 3084, col: 12, offset: 100268},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&oneOrMoreExpr{
																						pos: position{line: 1883, col: 21, offset: 61718},
																						expr: &charClassMatcher{
																							pos:        position{line: 1883, col: 21, offset: 61718},
																							val:        "[^\\r\\n]",
																							chars:      []rune{'\r', '\n'},
																							ignoreCase: false,
																							inverted:   true,
																						},
																					},
																				},
																			},
																		},
																	},
																	&andCodeExpr{
																		pos: position{line: 1886, col: 5, offset: 61775},
																		run: (*parser).callonDocumentFragment1453,
																	},
																	&choiceExpr{
																		pos: position{line: 3096, col: 8, offset: 100524},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 3089, col: 12, offset: 100384},
																				run: (*parser).callonDocumentFragment1455,
																				expr: &choiceExpr{
																					pos: position{line: 3089, col: 13, offset: 100385},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 3089, col: 13, offset: 100385},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 3089, col: 20, offset: 100392},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 3089, col: 29, offset: 100401},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3093, col: 8, offset: 100474},
																				expr: &anyMatcher{
																					line: 3093, col: 9, offset: 100475,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 1877, col: 5, offset: 61458},
														label: "otherLines",
														expr: &zeroOrMoreExpr{
															pos: position{line: 1877, col: 16, offset: 61469},
															expr: &choiceExpr{
																pos: position{line: 1877, col: 17, offset: 61470},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 2770, col: 22, offset: 90863},
																		run: (*parser).callonDocumentFragment1465,
																		expr: &seqExpr{
																			pos: position{line: 2770, col: 22, offset: 90863},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 2775, col: 31, offset: 91084},
																					val:        "//",
																					ignoreCase: false,
																					want:       "\"//\"",
																				},
																				&notExpr{
																					pos: position{line: 2775, col: 36, offset: 91089},
																					expr: &litMatcher{
																						pos:        position{line: 2775, col: 37, offset: 91090},
																						val:        "//",
																						ignoreCase: false,
																						want:       "\"//\"",
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 2770, col: 49, offset: 90890},
																					label: "content",
																					expr: &actionExpr{
																						pos: position{line: 2777, col: 29, offset: 91125},
																						run: (*parser).callonDocumentFragment1471,
																						expr: &zeroOrMoreExpr{
																							pos: position{line: 2777, col: 29, offset: 91125},
																							expr: &charClassMatcher{
																								pos:        position{line: 2777, col: 29, offset: 91125},
																								val:        "[^\\r\\n]",
																								chars:      []rune{'\r', '\n'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 3096, col: 8, offset: 100524},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 3089, col: 12, offset: 100384},
																							run: (*parser).callonDocumentFragment1475,
																							expr: &choiceExpr{
																								pos: position{line: 3089, col: 13, offset: 100385},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 3089, col: 13, offset: 100385},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 3089, col: 20, offset: 100392},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 3089, col: 29, offset: 100401},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 3093, col: 8, offset: 100474},
																							expr: &anyMatcher{
																								line: 3093, col: 9, offset: 100475,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 1865, col: 5, offset: 61135},
																		run: (*parser).callonDocumentFragment1482,
																		expr: &seqExpr{
																			pos: position{line: 1865, col: 5, offset: 61135},
																			exprs: []interface{}{
																				&labeledExpr{
																					pos:   position{line: 1865, col: 5, offset: 61135},
																					label: "content",
																					expr: &actionExpr{
																						pos: position{line: 1865, col: 14, offset: 61144},
																						run: (*parser).callonDocumentFragment1485,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 1865, col: 14, offset: 61144},
																							expr: &charClassMatcher{
																								pos:        position{line: 1865, col: 14, offset: 61144},
																								val:        "[^\\r\\n]",
																								chars:      []rune{'\r', '\n'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																				},
																				&andCodeExpr{
																					pos: position{line: 1868, col: 5, offset: 61251},
																					run: (*parser).callonDocumentFragment1488,
																				},
																				&choiceExpr{
																					pos: position{line: 3096, col: 8, offset: 100524},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 3089, col: 12, offset: 100384},
																							run: (*parser).callonDocumentFragment1490,
																							expr: &choiceExpr{
																								pos: position{line: 3089, col: 13, offset: 100385},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 3089, col: 13, offset: 100385},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 3089, col: 20, offset: 100392},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 3089, col: 29, offset: 100401},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 3093, col: 8, offset: 100474},
																							expr: &anyMatcher{
																								line: 3093, col: 9, offset: 100475,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 1238, col: 5, offset: 38970},
											run: (*parser).callonDocumentFragment1497,
											expr: &seqExpr{
												pos: position{line: 1238, col: 5, offset: 38970},
												exprs: []interface{}{
													&andCodeExpr{
														pos: position{line: 1238, col: 5, offset: 38970},
														run: (*parser).callonDocumentFragment1499,
													},
													&labeledExpr{
														pos:   position{line: 1241, col: 5, offset: 39028},
														label: "frontmatter",
														expr: &actionExpr{
															pos: position{line: 1246, col: 20, offset: 39123},
															run: (*parser).callonDocumentFragment1501,
															expr: &seqExpr{
																pos: position{line: 1246, col: 20, offset: 39123},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 1250, col: 30, offset: 39295},
																		val:        "---",
																		ignoreCase: false,
																		want:       "\"---\"",
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 1250, col: 36, offset: 39301},
																		expr: &actionExpr{
																			pos: position{line: 3080, col: 10, offset: 100200},
																			run: (*parser).callonDocumentFragment1505,
																			expr: &charClassMatcher{
																				pos:        position{line: 3080, col: 11, offset: 100201},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 3096, col: 8, offset: 100524},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 3089, col: 12, offset: 100384},
																				run: (*parser).callonDocumentFragment1508,
																				expr: &choiceExpr{
																					pos: position{line: 3089, col: 13, offset: 100385},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 3089, col: 13, offset: 100385},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 3089, col: 20, offset: 100392},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 3089, col: 29, offset: 100401},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3093, col: 8, offset: 100474},
																				expr: &anyMatcher{
																					line: 3093, col: 9, offset: 100475,
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 1246, col: 45, offset: 39148},
																		label: "content",
																		expr: &zeroOrOneExpr{
																			pos: position{line: 1246, col: 53, offset: 39156},
																			expr: &actionExpr{
																				pos: position{line: 1252, col: 27, offset: 39339},
																				run: (*parser).callonDocumentFragment1517,
																				expr: &zeroOrMoreExpr{
																					pos: position{line: 1252, col: 27, offset: 39339},
																					expr: &oneOrMoreExpr{
																						pos: position{line: 1252, col: 28, offset: 39340},
																						expr: &seqExpr{
																							pos: position{line: 1252, col: 29, offset: 39341},
																							exprs: []interface{}{
																								&notExpr{
																									pos: position{line: 1252, col: 29, offset: 39341},
																									expr: &seqExpr{
																										pos: position{line: 1250, col: 30, offset: 39295},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 1250, col: 30, offset: 39295},
																												val:        "---",
																												ignoreCase: false,
																												want:       "\"---\"",
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 1250, col: 36, offset: 39301},
																												expr: &actionExpr{
																													pos: position{line: 3080, col: 10, offset: 100200},
																													run: (*parser).callonDocumentFragment1525,
																													expr: &charClassMatcher{
																														pos:        position{line: 3080, col: 11, offset: 100201},
																														val:        "[ \\t]",
																														chars:      []rune{' ', '\t'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																											&choiceExpr{
																												pos: position{line: 3096, col: 8, offset: 100524},
																												alternatives: []interface{}{
																													&actionExpr{
																														pos: position{line: 3089, col: 12, offset: 100384},
																														run: (*parser).callonDocumentFragment1528,
																														expr: &choiceExpr{
																															pos: position{line: 3089, col: 13, offset: 100385},
																															alternatives: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 3089, col: 13, offset: 100385},
																																	val:        "\n",
																																	ignoreCase: false,
																																	want:       "\"\\n\"",
																																},
																																&litMatcher{
																																	pos:        position{line: 3089, col: 20, offset: 100392},
																																	val:        "\r\n",
																																	ignoreCase: false,
																																	want:       "\"\\r\\n\"",
																																},
																																&litMatcher{
																																	pos:        position{line: 3089, col: 29, offset: 100401},
																																	val:        "\r",
																																	ignoreCase: false,
																																	want:       "\"\\r\"",
																																},
																															},
																														},
																													},
																													&notExpr{
																														pos: position{line: 3093, col: 8, offset: 100474},
																														expr: &anyMatcher{
																															line: 3093, col: 9, offset: 100475,
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																								&anyMatcher{
																									line: 1252, col: 55, offset: 39367,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 1250, col: 30, offset: 39295},
																		val:        "---",
																		ignoreCase: false,
																		want:       "\"---\"",
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 1250, col: 36, offset: 39301},
																		expr: &actionExpr{
																			pos: position{line: 3080, col: 10, offset: 100200},
																			run: (*parser).callonDocumentFragment1538,
																			expr: &charClassMatcher{
																				pos:        position{line: 3080, col: 11, offset: 100201},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 3096, col: 8, offset: 100524},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 3089, col: 12, offset: 100384},
																				run: (*parser).callonDocumentFragment1541,
																				expr: &choiceExpr{
																					pos: position{line: 3089, col: 13, offset: 100385},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 3089, col: 13, offset: 100385},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 3089, col: 20, offset: 100392},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 3089, col: 29, offset: 100401},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3093, col: 8, offset: 100474},
																				expr: &anyMatcher{
																					line: 3093, col: 9, offset: 100475,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 248, col: 11, offset: 7556},
											name: "Paragraph",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DelimitedBlockElements",
			pos:  position{line: 271, col: 1, offset: 8251},
			expr: &actionExpr{
				pos: position{line: 272, col: 5, offset: 8282},
				run: (*parser).callonDelimitedBlockElements1,
				expr: &seqExpr{
					pos: position{line: 272, col: 5, offset: 8282},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 272, col: 5, offset: 8282},
							label: "elements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 272, col: 14, offset: 8291},
								expr: &choiceExpr{
									pos: position{line: 273, col: 9, offset: 8301},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 1219, col: 23, offset: 38141},
											run: (*parser).callonDelimitedBlockElements6,
											expr: &seqExpr{
												pos: position{line: 1219, col: 23, offset: 38141},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 1217, col: 32, offset: 38109},
														val:        "�",
														ignoreCase: false,
														want:       "\"�\"",
													},
													&labeledExpr{
														pos:   position{line: 1219, col: 51, offset: 38169},
														label: "ref",
														expr: &actionExpr{
															pos: position{line: 1219, col: 56, offset: 38174},
															run: (*parser).callonDelimitedBlockElements10,
															expr: &oneOrMoreExpr{
																pos: position{line: 1219, col: 56, offset: 38174},
																expr: &charClassMatcher{
																	pos:        position{line: 1219, col: 56, offset: 38174},
																	val:        "[0-9]",
																	ranges:     []rune{'0', '9'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
													&litMatcher{
														pos:        position{line: 1217, col: 32, offset: 38109},
														val:        "�",
														ignoreCase: false,
														want:       "\"�\"",
													},
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 274, col: 11, offset: 8363},
											name: "DocumentFragment",
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 3093, col: 8, offset: 100474},
							expr: &anyMatcher{
								line: 3093, col: 9, offset: 100475,
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeDeclaration",
			pos:  position{line: 308, col: 1, offset: 9496},
			expr: &actionExpr{
				pos: position{line: 309, col: 5, offset: 9525},
				run: (*parser).callonAttributeDeclaration1,
				expr: &seqExpr{
					pos: position{line: 309, col: 5, offset: 9525},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 309, col: 5, offset: 9525},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 309, col: 9, offset: 9529},
							label: "name",
							expr: &actionExpr{
								pos: position{line: 324, col: 18, offset: 10072},
								run: (*parser).callonAttributeDeclaration5,
								expr: &seqExpr{
									pos: position{line: 324, col: 18, offset: 10072},
									exprs: []interface{}{
										&charClassMatcher{
											pos:        position{line: 324, col: 18, offset: 10072},
											val:        "[_0-9\\pL]",
											chars:      []rune{'_'},
											ranges:     []rune{'0', '9'},
											classes:    []*unicode.RangeTable{rangeTable("L")},
											ignoreCase: false,
											inverted:   false,
										},
										&zeroOrMoreExpr{
											pos: position{line: 324, col: 28, offset: 10082},
											expr: &charClassMatcher{
												pos:        position{line: 324, col: 29, offset: 10083},
												val:        "[-0-9\\pL]",
												chars:      []rune{'-'},
												ranges:     []rune{'0', '9'},
												classes:    []*unicode.RangeTable{rangeTable("L")},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 309, col: 30, offset: 9550},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 310, col: 5, offset: 9559},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 310, col: 11, offset: 9565},
								expr: &actionExpr{
									pos: position{line: 311, col: 9, offset: 9575},
									run: (*parser).callonAttributeDeclaration13,
									expr: &seqExpr{
										pos: position{line: 311, col: 9, offset: 9575},
										exprs: []interface{}{
											&actionExpr{
												pos: position{line: 3084, col: 11, offset: 100267},
												run: (*parser).callonAttributeDeclaration15,
												expr: &oneOrMoreExpr{
													pos: position{line: 3084, col: 11, offset: 100267},
													expr: &charClassMatcher{
														pos:        position{line: 3084, col: 12, offset: 100268},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 312, col: 9, offset: 9667},
												label: "value",
												expr: &ruleRefExpr{
													pos:  position{line: 312, col: 16, offset: 9674},
													name: "AttributeDeclarationValue",
												},
											},
										},
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 3096, col: 8, offset: 100524},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 3089, col: 12, offset: 100384},
									run: (*parser).callonAttributeDeclaration21,
									expr: &choiceExpr{
										pos: position{line: 3089, col: 13, offset: 100385},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 3089, col: 13, offset: 100385},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
											&litMatcher{
												pos:        position{line: 3089, col: 20, offset: 100392},
												val:        "\r\n",
												ignoreCase: false,
												want:       "\"\\r\\n\"",
											},
											&litMatcher{
												pos:        position{line: 3089, col: 29, offset: 100401},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 3093, col: 8, offset: 100474},
									expr: &anyMatcher{
										line: 3093, col: 9, offset: 100475,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeDeclarationValue",
			pos:  position{line: 328, col: 1, offset: 10139},
			expr: &actionExpr{
				pos: position{line: 329, col: 5, offset: 10173},
				run: (*parser).callonAttributeDeclarationValue1,
				expr: &seqExpr{
					pos: position{line: 329, col: 5, offset: 10173},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 329, col: 5, offset: 10173},
							label: "elements",
							expr: &actionExpr{
								pos: position{line: 345, col: 5, offset: 10691},
								run: (*parser).callonAttributeDeclarationValue4,
								expr: &labeledExpr{
									pos:   position{line: 345, col: 5, offset: 10691},
									label: "elements",
									expr: &zeroOrMoreExpr{
										pos: position{line: 345, col: 14, offset: 10700},
										expr: &actionExpr{
											pos: position{line: 350, col: 5, offset: 10831},
											run: (*parser).callonAttributeDeclarationValue7,
											expr: &seqExpr{
												pos: position{line: 350, col: 5, offset: 10831},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 350, col: 5, offset: 10831},
														expr: &seqExpr{
															pos: position{line: 350, col: 7, offset: 10833},
															exprs: []interface{}{
																&zeroOrOneExpr{
																	pos: position{line: 350, col: 7, offset: 10833},
																	expr: &litMatcher{
																		pos:        position{line: 350, col: 7, offset: 10833},
																		val:        "\\",
																		ignoreCase: false,
																		want:       "\"\\\\\"",
																	},
																},
																&zeroOrMoreExpr{
																	pos: position{line: 350, col: 13, offset: 10839},
																	expr: &actionExpr{
																		pos: position{line: 3080, col: 10, offset: 100200},
																		run: (*parser).callonAttributeDeclarationValue14,
																		expr: &charClassMatcher{
																			pos:        position{line: 3080, col: 11, offset: 100201},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 3096, col: 8, offset: 100524},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 3089, col: 12, offset: 100384},
																			run: (*parser).callonAttributeDeclarationValue17,
																			expr: &choiceExpr{
																				pos: position{line: 3089, col: 13, offset: 100385},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 3089, col: 13, offset: 100385},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 3089, col: 20, offset: 100392},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 3089, col: 29, offset: 100401},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 3093, col: 8, offset: 100474},
																			expr: &anyMatcher{
																				line: 3093, col: 9, offset: 100475,
																			},
																		},
																	},
																},
															},
														},
													},
													&labeledExpr{
														pos:   position{line: 351, col: 5, offset: 10855},
														label: "element",
														expr: &choiceExpr{
															pos: position{line: 352, col: 9, offset: 10873},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 352, col: 10, offset: 10874},
																	run: (*parser).callonAttributeDeclarationValue26,
																	expr: &oneOrMoreExpr{
																		pos: position{line: 352, col: 10, offset: 10874},
																		expr: &charClassMatcher{
																			pos:        position{line: 352, col: 10, offset: 10874},
																			val:        "[^\\r\\n{ ]",
																			chars:      []rune{'\r', '\n', '{', ' '},
																			ignoreCase: false,
																			inverted:   true,
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 3080, col: 10, offset: 100200},
																	run: (*parser).callonAttributeDeclarationValue29,
																	expr: &charClassMatcher{
																		pos:        position{line: 3080, col: 11, offset: 100201},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
																&actionExpr{
																	pos: position{line: 648, col: 5, offset: 20883},
																	run: (*parser).callonAttributeDeclarationValue31,
																	expr: &seqExpr{
																		pos: position{line: 648, col: 5, offset: 20883},
																		exprs: []interface{}{
																			&andCodeExpr{
																				pos: position{line: 648, col: 5, offset: 20883},
																				run: (*parser).callonAttributeDeclarationValue33,
																			},
																			&labeledExpr{
																				pos:   position{line: 651, col: 5, offset: 20952},
																				label: "element",
																				expr: &choiceExpr{
																					pos: position{line: 651, col: 14, offset: 20961},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 671, col: 25, offset: 21614},
																							run: (*parser).callonAttributeDeclarationValue36,
																							expr: &seqExpr{
																								pos: position{line: 671, col: 25, offset: 21614},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 671, col: 25, offset: 21614},
																										val:        "{counter:",
																										ignoreCase: false,
																										want:       "\"{counter:\"",
																									},
																									&labeledExpr{
																										pos:   position{line: 671, col: 37, offset: 21626},
																										label: "name",
																										expr: &actionExpr{
																											pos: position{line: 324, col: 18, offset: 10072},
																											run: (*parser).callonAttributeDeclarationValue40,
																											expr: &seqExpr{
																												pos: position{line: 324, col: 18, offset: 10072},
																												exprs: []interface{}{
																													&charClassMatcher{
																														pos:        position{line: 324, col: 18, offset: 10072},
																														val:        "[_0-9\\pL]",
																														chars:      []rune{'_'},
																														ranges:     []rune{'0', '9'},
																														classes:    []*unicode.RangeTable{rangeTable("L")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&zeroOrMoreExpr{
																														pos: position{line: 324, col: 28, offset: 10082},
																														expr: &charClassMatcher{
																															pos:        position{line: 324, col: 29, offset: 10083},
																															val:        "[-0-9\\pL]",
																															chars:      []rune{'-'},
																															ranges:     []rune{'0', '9'},
																															classes:    []*unicode.RangeTable{rangeTable("L")},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																											},
																										},
																									},
																									&labeledExpr{
																										pos:   position{line: 671, col: 56, offset: 21645},
																										label: "start",
																										expr: &zeroOrOneExpr{
																											pos: position{line: 671, col: 62, offset: 21651},
																											expr: &actionExpr{
																												pos: position{line: 679, col: 17, offset: 21946},
																												run: (*parser).callonAttributeDeclarationValue47,
																												expr: &seqExpr{
																													pos: position{line: 679, col: 17, offset: 21946},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 679, col: 17, offset: 21946},
																															val:        ":",
																															ignoreCase: false,
																															want:       "\":\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 679, col: 21, offset: 21950},
																															label: "start",
																															expr: &choiceExpr{
																																pos: position{line: 679, col: 28, offset: 21957},
																																alternatives: []interface{}{
																																	&actionExpr{
																																		pos: position{line: 679, col: 28, offset: 21957},
																																		run: (*parser).callonAttributeDeclarationValue52,
																																		expr: &charClassMatcher{
																																			pos:        position{line: 679, col: 28, offset: 21957},
																																			val:        "[A-Za-z]",
																																			ranges:     []rune{'A', 'Z', 'a', 'z'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																	&actionExpr{
																																		pos: position{line: 681, col: 9, offset: 22011},
																																		run: (*parser).callonAttributeDeclarationValue54,
																																		expr: &oneOrMoreExpr{
																																			pos: position{line: 681, col: 9, offset: 22011},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 681, col: 9, offset: 22011},
																																				val:        "[0-9]",
																																				ranges:     []rune{'0', '9'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 671, col: 78, offset: 21667},
																										val:        "}",
																										ignoreCase: false,
																										want:       "\"}\"",
																									},
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 675, col: 25, offset: 21785},
																							run: (*parser).callonAttributeDeclarationValue58,
																							expr: &seqExpr{
																								pos: position{line: 675, col: 25, offset: 21785},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 675, col: 25, offset: 21785},
																										val:        "{counter2:",
																										ignoreCase: false,
																										want:       "\"{counter2:\"",
																									},
																									&labeledExpr{
																										pos:   position{line: 675, col: 38, offset: 21798},
																										label: "name",
																										expr: &actionExpr{
																											pos: position{line: 324, col: 18, offset: 10072},
																											run: (*parser).callonAttributeDeclarationValue62,
																											expr: &seqExpr{
																												pos: position{line: 324, col: 18, offset: 10072},
																												exprs: []interface{}{
																													&charClassMatcher{
																														pos:        position{line: 324, col: 18, offset: 10072},
																														val:        "[_0-9\\pL]",
																														chars:      []rune{'_'},
																														ranges:     []rune{'0', '9'},
																														classes:    []*unicode.RangeTable{rangeTable("L")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&zeroOrMoreExpr{
																														pos: position{line: 324, col: 28, offset: 10082},
																														expr: &charClassMatcher{
																															pos:        position{line: 324, col: 29, offset: 10083},
																															val:        "[-0-9\\pL]",
																															chars:      []rune{'-'},
																															ranges:     []rune{'0', '9'},
																															classes:    []*unicode.RangeTable{rangeTable("L")},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																											},
																										},
																									},
																									&labeledExpr{
																										pos:   position{line: 675, col: 57, offset: 21817},
																										label: "start",
																										expr: &zeroOrOneExpr{
																											pos: position{line: 675, col: 63, offset: 21823},
																											expr: &actionExpr{
																												pos: position{line: 679, col: 17, offset: 21946},
																												run: (*parser).callonAttributeDeclarationValue69,
																												expr: &seqExpr{
																													pos: position{line: 679, col: 17, offset: 21946},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 679, col: 17, offset: 21946},
																															val:        ":",
																															ignoreCase: false,
																															want:       "\":\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 679, col: 21, offset: 21950},
																															label: "start",
																															expr: &choiceExpr{
																																pos: position{line: 679, col: 28, offset: 21957},
																																alternatives: []interface{}{
																																	&actionExpr{
																																		pos: position{line: 679, col: 28, offset: 21957},
																																		run: (*parser).callonAttributeDeclarationValue74,
																																		expr: &charClassMatcher{
																																			pos:        position{line: 679, col: 28, offset: 21957},
																																			val:        "[A-Za-z]",
																																			ranges:     []rune{'A', 'Z', 'a', 'z'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																	&actionExpr{
																																		pos: position{line: 681, col: 9, offset: 22011},
																																		run: (*parser).callonAttributeDeclarationValue76,
																																		expr: &oneOrMoreExpr{
																																			pos: position{line: 681, col: 9, offset: 22011},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 681, col: 9, offset: 22011},
																																				val:        "[0-9]",
																																				ranges:     []rune{'0', '9'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 675, col: 79, offset: 21839},
																										val:        "}",
																										ignoreCase: false,
																										want:       "\"}\"",
																									},
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 657, col: 5, offset: 21090},
																							run: (*parser).callonAttributeDeclarationValue80,
																							expr: &seqExpr{
																								pos: position{line: 657, col: 5, offset: 21090},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 657, col: 5, offset: 21090},
																										val:        "\\{",
																										ignoreCase: false,
																										want:       "\"\\\\{\"",
																									},
																									&labeledExpr{
																										pos:   position{line: 657, col: 13, offset: 21098},
																										label: "name",
																										expr: &actionExpr{
																											pos: position{line: 324, col: 18, offset: 10072},
																											run: (*parser).callonAttributeDeclarationValue84,
																											expr: &seqExpr{
																												pos: position{line: 324, col: 18, offset: 10072},
																												exprs: []interface{}{
																													&charClassMatcher{
																														pos:        position{line: 324, col: 18, offset: 10072},
																														val:        "[_0-9\\pL]",
																														chars:      []rune{'_'},
																														ranges:     []rune{'0', '9'},
																														classes:    []*unicode.RangeTable{rangeTable("L")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&zeroOrMoreExpr{
																														pos: position{line: 324, col: 28, offset: 10082},
																														expr: &charClassMatcher{
																															pos:        position{line: 324, col: 29, offset: 10083},
																															val:        "[-0-9\\pL]",
																															chars:      []rune{'-'},
																															ranges:     []rune{'0', '9'},
																															classes:    []*unicode.RangeTable{rangeTable("L")},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																											},
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 657, col: 32, offset: 21117},
																										val:        "}",
																										ignoreCase: false,
																										want:       "\"}\"",
																									},
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 664, col: 5, offset: 21358},
																							run: (*parser).callonAttributeDeclarationValue90,
																							expr: &seqExpr{
																								pos: position{line: 664, col: 5, offset: 21358},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 664, col: 5, offset: 21358},
																										val:        "{",
																										ignoreCase: false,
																										want:       "\"{\"",
																									},
																									&labeledExpr{
																										pos:   position{line: 664, col: 9, offset: 21362},
																										label: "name",
																										expr: &actionExpr{
																											pos: position{line: 324, col: 18, offset: 10072},
																											run: (*parser).callonAttributeDeclarationValue94,
																											expr: &seqExpr{
																												pos: position{line: 324, col: 18, offset: 10072},
																												exprs: []interface{}{
																													&charClassMatcher{
																														pos:        position{line: 324, col: 18, offset: 10072},
																														val:        "[_0-9\\pL]",
																														chars:      []rune{'_'},
																														ranges:     []rune{'0', '9'},
																														classes:    []*unicode.RangeTable{rangeTable("L")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																													&zeroOrMoreExpr{
																														pos: position{line: 324, col: 28, offset: 10082},
																														expr: &charClassMatcher{
																															pos:        position{line: 324, col: 29, offset: 10083},
																															val:        "[-0-9\\pL]",
																															chars:      []rune{'-'},
																															ranges:     []rune{'0', '9'},
																															classes:    []*unicode.RangeTable{rangeTable("L")},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																											},
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 664, col: 28, offset: 21381},
																										val:        "}",
																										ignoreCase: false,
																										want:       "\"}\"",
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 357, col: 12, offset: 11016},
																	run: (*parser).callonAttributeDeclarationValue100,
																	expr: &litMatcher{
																		pos:        position{line: 357, col: 12, offset: 11016},
																		val:        "{",
																		ignoreCase: false,
																		want:       "\"{\"",
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 330, col: 5, offset: 10223},
							label: "otherElements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 330, col: 19, offset: 10237},
								expr: &actionExpr{
									pos: position{line: 331, col: 9, offset: 10247},
									run: (*parser).callonAttributeDeclarationValue104,
									expr: &seqExpr{
										pos: position{line: 331, col: 9, offset: 10247},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 331, col: 9, offset: 10247},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
											&actionExpr{
												pos: position{line: 3089, col: 12, offset: 100384},
												run: (*parser).callonAttributeDeclarationValue107,
												expr: &choiceExpr{
													pos: position{line: 3089, col: 13, offset: 100385},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 3089, col: 13, offset: 100385},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&litMatcher{
															pos:        position{line: 3089, col: 20, offset: 100392},
															val:        "\r\n",
															ignoreCase: false,
															want:       "\"\\r\\n\"",
														},
														&litMatcher{
															pos:        position{line: 3089, col: 29, offset: 100401},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 332, col: 9, offset: 10269},
												expr: &actionExpr{
													pos: position{line: 3080, col: 10, offset: 100200},
													run: (*parser).callonAttributeDeclarationValue113,
													expr: &charClassMatcher{
														pos:        position{line: 3080, col: 11, offset: 100201},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 333, col: 9, offset: 10284},
												label: "elements",
												expr: &ruleRefExpr{
													pos:  position{line: 333, col: 19, offset: 10294},
													name: "AttributeDeclarationValue",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockAttributes",
			pos:  position{line: 373, col: 1, offset: 11621},
			expr: &actionExpr{
				pos: position{line: 374, col: 5, offset: 11644},
				run: (*parser).callonBlockAttributes1,
				expr: &labeledExpr{
					pos:   position{line: 374, col: 5, offset: 11644},
					label: "attributes",
					expr: &oneOrMoreExpr{
						pos: position{line: 374, col: 16, offset: 11655},
						expr: &choiceExpr{
							pos: position{line: 376, col: 9, offset: 11722},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 376, col: 10, offset: 11723},
									run: (*parser).callonBlockAttributes5,
									expr: &seqExpr{
										pos: position{line: 376, col: 10, offset: 11723},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 376, col: 10, offset: 11723},
												label: "anchor",
												expr: &actionExpr{
													pos: position{line: 408, col: 5, offset: 12598},
													run: (*parser).callonBlockAttributes8,
													expr: &seqExpr{
														pos: position{line: 408, col: 5, offset: 12598},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 408, col: 5, offset: 12598},
																val:        "[[",
																ignoreCase: false,
																want:       "\"[[\"",
															},
															&labeledExpr{
																pos:   position{line: 409, col: 5, offset: 12608},
																label: "id",
																expr: &actionExpr{
																	pos: position{line: 410, col: 9, offset: 12621},
																	run: (*parser).callonBlockAttributes12,
																	expr: &labeledExpr{
																		pos:   position{line: 410, col: 9, offset: 12621},
																		label: "elements",
																		expr: &oneOrMoreExpr{
																			pos: position{line: 410, col: 18, offset: 12630},
																			expr: &choiceExpr{
																				pos: position{line: 411, col: 13, offset: 12644},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 411, col: 14, offset: 12645},
																						run: (*parser).callonBlockAttributes16,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 411, col: 14, offset: 12645},
																							expr: &charClassMatcher{
																								pos:        position{line: 411, col: 14, offset: 12645},
																								val:        "[^=\\r\\n�{]]",
																								chars:      []rune{'=', '\r', '\n', '�', '{', ']'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 1219, col: 23, offset: 38141},
																						run: (*parser).callonBlockAttributes19,
																						expr: &seqExpr{
																							pos: position{line: 1219, col: 23, offset: 38141},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 1217, col: 32, offset: 38109},
																									val:        "�",
																									ignoreCase: false,
																									want:       "\"�\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 1219, col: 51, offset: 38169},
																									label: "ref",
																									expr: &actionExpr{
																										pos: position{line: 1219, col: 56, offset: 38174},
																										run: (*parser).callonBlockAttributes23,
																										expr: &oneOrMoreExpr{
																											pos: position{line: 1219, col: 56, offset: 38174},
																											expr: &charClassMatcher{
																												pos:        position{line: 1219, col: 56, offset: 38174},
																												val:        "[0-9]",
																												ranges:     []rune{'0', '9'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 1217, col: 32, offset: 38109},
																									val:        "�",
																									ignoreCase: false,
																									want:       "\"�\"",
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 648, col: 5, offset: 20883},
																						run: (*parser).callonBlockAttributes27,
																						expr: &seqExpr{
																							pos: position{line: 648, col: 5, offset: 20883},
																							exprs: []interface{}{
																								&andCodeExpr{
																									pos: position{line: 648, col: 5, offset: 20883},
																									run: (*parser).callonBlockAttributes29,
																								},
																								&labeledExpr{
																									pos:   position{line: 651, col: 5, offset: 20952},
																									label: "element",
																									expr: &choiceExpr{
																										pos: position{line: 651, col: 14, offset: 20961},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 671, col: 25, offset: 21614},
																												run: (*parser).callonBlockAttributes32,
																												expr: &seqExpr{
																													pos: position{line: 671, col: 25, offset: 21614},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 671, col: 25, offset: 21614},
																															val:        "{counter:",
																															ignoreCase: false,
																															want:       "\"{counter:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 671, col: 37, offset: 21626},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 324, col: 18, offset: 10072},
																																run: (*parser).callonBlockAttributes36,
																																expr: &seqExpr{
																																	pos: position{line: 324, col: 18, offset: 10072},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 324, col: 18, offset: 10072},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 324, col: 28, offset: 10082},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 324, col: 29, offset: 10083},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 671, col: 56, offset: 21645},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 671, col: 62, offset: 21651},
																																expr: &actionExpr{
																																	pos: position{line: 679, col: 17, offset: 21946},
																																	run: (*parser).callonBlockAttributes43,
																																	expr: &seqExpr{
																																		pos: position{line: 679, col: 17, offset: 21946},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 679, col: 17, offset: 21946},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 679, col: 21, offset: 21950},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 679, col: 28, offset: 21957},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 679, col: 28, offset: 21957},
																																							run: (*parser).callonBlockAttributes48,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 679, col: 28, offset: 21957},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 681, col: 9, offset: 22011},
																																							run: (*parser).callonBlockAttributes50,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 681, col: 9, offset: 22011},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 681, col: 9, offset: 22011},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 671, col: 78, offset: 21667},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 675, col: 25, offset: 21785},
																												run: (*parser).callonBlockAttributes54,
																												expr: &seqExpr{
																													pos: position{line: 675, col: 25, offset: 21785},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 675, col: 25, offset: 21785},
																															val:        "{counter2:",
																															ignoreCase: false,
																															want:       "\"{counter2:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 675, col: 38, offset: 21798},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 324, col: 18, offset: 10072},
																																run: (*parser).callonBlockAttributes58,
																																expr: &seqExpr{
																																	pos: position{line: 324, col: 18, offset: 10072},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 324, col: 18, offset: 10072},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 324, col: 28, offset: 10082},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 324, col: 29, offset: 10083},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 675, col: 57, offset: 21817},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 675, col: 63, offset: 21823},
																																expr: &actionExpr{
																																	pos: position{line: 679, col: 17, offset: 21946},
																																	run: (*parser).callonBlockAttributes65,
																																	expr: &seqExpr{
																																		pos: position{line: 679, col: 17, offset: 21946},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 679, col: 17, offset: 21946},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 679, col: 21, offset: 21950},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 679, col: 28, offset: 21957},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 679, col: 28, offset: 21957},
																																							run: (*parser).callonBlockAttributes70,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 679, col: 28, offset: 21957},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 681, col: 9, offset: 22011},
																																							run: (*parser).callonBlockAttributes72,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 681, col: 9, offset: 22011},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 681, col: 9, offset: 22011},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 675, col: 79, offset: 21839},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 657, col: 5, offset: 21090},
																												run: (*parser).callonBlockAttributes76,
																												expr: &seqExpr{
																													pos: position{line: 657, col: 5, offset: 21090},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 657, col: 5, offset: 21090},
																															val:        "\\{",
																															ignoreCase: false,
																															want:       "\"\\\\{\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 657, col: 13, offset: 21098},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 324, col: 18, offset: 10072},
																																run: (*parser).callonBlockAttributes80,
																																expr: &seqExpr{
																																	pos: position{line: 324, col: 18, offset: 10072},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 324, col: 18, offset: 10072},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 324, col: 28, offset: 10082},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 324, col: 29, offset: 10083},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 657, col: 32, offset: 21117},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 664, col: 5, offset: 21358},
																												run: (*parser).callonBlockAttributes86,
																												expr: &seqExpr{
																													pos: position{line: 664, col: 5, offset: 21358},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 664, col: 5, offset: 21358},
																															val:        "{",
																															ignoreCase: false,
																															want:       "\"{\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 664, col: 9, offset: 21362},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 324, col: 18, offset: 10072},
																																run: (*parser).callonBlockAttributes90,
																																expr: &seqExpr{
																																	pos: position{line: 324, col: 18, offset: 10072},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 324, col: 18, offset: 10072},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 324, col: 28, offset: 10082},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 324, col: 29, offset: 10083},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 664, col: 28, offset: 21381},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 416, col: 16, offset: 12878},
																						run: (*parser).callonBlockAttributes96,
																						expr: &litMatcher{
																							pos:        position{line: 416, col: 16, offset: 12878},
																							val:        "{",
																							ignoreCase: false,
																							want:       "\"{\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&litMatcher{
																pos:        position{line: 422, col: 5, offset: 13064},
																val:        "]]",
																ignoreCase: false,
																want:       "\"]]\"",
															},
														},
													},
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 376, col: 35, offset: 11748},
												expr: &actionExpr{
													pos: position{line: 3080, col: 10, offset: 100200},
													run: (*parser).callonBlockAttributes100,
													expr: &charClassMatcher{
														pos:        position{line: 3080, col: 11, offset: 100201},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
											&choiceExpr{
												pos: position{line: 3096, col: 8, offset: 100524},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 3089, col: 12, offset: 100384},
														run: (*parser).callonBlockAttributes103,
														expr: &choiceExpr{
															pos: position{line: 3089, col: 13, offset: 100385},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 3089, col: 13, offset: 100385},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 3089, col: 20, offset: 100392},
																	val:        "\r\n",
																	ignoreCase: false,
																	want:       "\"\\r\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 3089, col: 29, offset: 100401},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
														},
													},
													&notExpr{
														pos: position{line: 3093, col: 8, offset: 100474},
														expr: &anyMatcher{
															line: 3093, col: 9, offset: 100475,
														},
													},
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 376, col: 46, offset: 11759},
												expr: &actionExpr{
													pos: position{line: 690, col: 14, offset: 22312},
													run: (*parser).callonBlockAttributes111,
													expr: &seqExpr{
														pos: position{line: 690, col: 14, offset: 22312},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 690, col: 14, offset: 22312},
																expr: &notExpr{
																	pos: position{line: 3093, col: 8, offset: 100474},
																	expr: &anyMatcher{
																		line: 3093, col: 9, offset: 100475,
																	},
																},
															},
															&zeroOrMoreExpr{
																pos: position{line: 690, col: 19, offset: 22317},
																expr: &actionExpr{
																	pos: position{line: 3080, col: 10, offset: 100200},
																	run: (*parser).callonBlockAttributes117,
																	expr: &charClassMatcher{
																		pos:        position{line: 3080, col: 11, offset: 100201},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 3096, col: 8, offset: 100524},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 3089, col: 12, offset: 100384},
																		run: (*parser).callonBlockAttributes120,
																		expr: &choiceExpr{
																			pos: position{line: 3089, col: 13, offset: 100385},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 3089, col: 13, offset: 100385},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 3089, col: 20, offset: 100392},
																					val:        "\r\n",
																					ignoreCase: false,
																					want:       "\"\\r\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 3089, col: 29, offset: 100401},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 3093, col: 8, offset: 100474},
																		expr: &anyMatcher{
																			line: 3093, col: 9, offset: 100475,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 380, col: 12, offset: 11880},
									run: (*parser).callonBlockAttributes127,
									expr: &seqExpr{
										pos: position{line: 380, col: 12, offset: 11880},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 380, col: 12, offset: 11880},
												label: "title",
												expr: &actionExpr{
													pos: position{line: 427, col: 19, offset: 13183},
													run: (*parser).callonBlockAttributes130,
													expr: &seqExpr{
														pos: position{line: 427, col: 19, offset: 13183},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 427, col: 19, offset: 13183},
																val:        ".",
																ignoreCase: false,
																want:       "\".\"",
															},
															&labeledExpr{
																pos:   position{line: 427, col: 23, offset: 13187},
																label: "title",
																expr: &actionExpr{
																	pos: position{line: 428, col: 5, offset: 13199},
																	run: (*parser).callonBlockAttributes134,
																	expr: &seqExpr{
																		pos: position{line: 428, col: 5, offset: 13199},
																		exprs: []interface{}{
																			&notExpr{
																				pos: position{line: 428, col: 5, offset: 13199},
																				expr: &charClassMatcher{
																					pos:        position{line: 428, col: 6, offset: 13200},
																					val:        "[. ]",
																					chars:      []rune{'.', ' '},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 429, col: 5, offset: 13312},
																				label: "elements",
																				expr: &oneOrMoreExpr{
																					pos: position{line: 429, col: 14, offset: 13321},
																					expr: &choiceExpr{
																						pos: position{line: 430, col: 9, offset: 13331},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 430, col: 10, offset: 13332},
																								run: (*parser).callonBlockAttributes141,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 430, col: 10, offset: 13332},
																									expr: &charClassMatcher{
																										pos:        position{line: 430, col: 10, offset: 13332},
																										val:        "[^\\r\\n�{]",
																										chars:      []rune{'\r', '\n', '�', '{'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 657, col: 5, offset: 21090},
																								run: (*parser).callonBlockAttributes144,
																								expr: &seqExpr{
																									pos: position{line: 657, col: 5, offset: 21090},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 657, col: 5, offset: 21090},
																											val:        "\\{",
																											ignoreCase: false,
																											want:       "\"\\\\{\"",
																										},
																										&labeledExpr{
																											pos:   position{line: 657, col: 13, offset: 21098},
																											label: "name",
																											expr: &actionExpr{
																												pos: position{line: 324, col: 18, offset: 10072},
																												run: (*parser).callonBlockAttributes148,
																												expr: &seqExpr{
																													pos: position{line: 324, col: 18, offset: 10072},
																													exprs: []interface{}{
																														&charClassMatcher{
																															pos:        position{line: 324, col: 18, offset: 10072},
																															val:        "[_0-9\\pL]",
																															chars:      []rune{'_'},
																															ranges:     []rune{'0', '9'},
																															classes:    []*unicode.RangeTable{rangeTable("L")},
																															ignoreCase: false,
																															inverted:   false,
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 324, col: 28, offset: 10082},
																															expr: &charClassMatcher{
																																pos:        position{line: 324, col: 29, offset: 10083},
																																val:        "[-0-9\\pL]",
																																chars:      []rune{'-'},
																																ranges:     []rune{'0', '9'},
																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																												},
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 657, col: 32, offset: 21117},
																											val:        "}",
																											ignoreCase: false,
																											want:       "\"}\"",
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 664, col: 5, offset: 21358},
																								run: (*parser).callonBlockAttributes154,
																								expr: &seqExpr{
																									pos: position{line: 664, col: 5, offset: 21358},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 664, col: 5, offset: 21358},
																											val:        "{",
																											ignoreCase: false,
																											want:       "\"{\"",
																										},
																										&labeledExpr{
																											pos:   position{line: 664, col: 9, offset: 21362},
																											label: "name",
																											expr: &actionExpr{
																												pos: position{line: 324, col: 18, offset: 10072},
																												run: (*parser).callonBlockAttributes158,
																												expr: &seqExpr{
																													pos: position{line: 324, col: 18, offset: 10072},
																													exprs: []interface{}{
																														&charClassMatcher{
																															pos:        position{line: 324, col: 18, offset: 10072},
																															val:        "[_0-9\\pL]",
																															chars:      []rune{'_'},
																															ranges:     []rune{'0', '9'},
																															classes:    []*unicode.RangeTable{rangeTable("L")},
																															ignoreCase: false,
																															inverted:   false,
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 324, col: 28, offset: 10082},
																															expr: &charClassMatcher{
																																pos:        position{line: 324, col: 29, offset: 10083},
																																val:        "[-0-9\\pL]",
																																chars:      []rune{'-'},
																																ranges:     []rune{'0', '9'},
																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																												},
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 664, col: 28, offset: 21381},
																											val:        "}",
																											ignoreCase: false,
																											want:       "\"}\"",
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 434, col: 12, offset: 13445},
																								run: (*parser).callonBlockAttributes164,
																								expr: &litMatcher{
																									pos:        position{line: 434, col: 12, offset: 13445},
																									val:        "{",
																									ignoreCase: false,
																									want:       "\"{\"",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 380, col: 35, offset: 11903},
												expr: &actionExpr{
													pos: position{line: 3080, col: 10, offset: 100200},
													run: (*parser).callonBlockAttributes167,
													expr: &charClassMatcher{
														pos:        position{line: 3080, col: 11, offset: 100201},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
											&choiceExpr{
												pos: position{line: 3096, col: 8, offset: 100524},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 3089, col: 12, offset: 100384},
														run: (*parser).callonBlockAttributes170,
														expr: &choiceExpr{
															pos: position{line: 3089, col: 13, offset: 100385},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 3089, col: 13, offset: 100385},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 3089, col: 20, offset: 100392},
																	val:        "\r\n",
																	ignoreCase: false,
																	want:       "\"\\r\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 3089, col: 29, offset: 100401},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
														},
													},
													&notExpr{
														pos: position{line: 3093, col: 8, offset: 100474},
														expr: &anyMatcher{
															line: 3093, col: 9, offset: 100475,
														},
													},
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 380, col: 46, offset: 11914},
												expr: &actionExpr{
													pos: position{line: 690, col: 14, offset: 22312},
													run: (*parser).callonBlockAttributes178,
													expr: &seqExpr{
														pos: position{line: 690, col: 14, offset: 22312},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 690, col: 14, offset: 22312},
																expr: &notExpr{
																	pos: position{line: 3093, col: 8, offset: 100474},
																	expr: &anyMatcher{
																		line: 3093, col: 9, offset: 100475,
																	},
																},
															},
															&zeroOrMoreExpr{
																pos: position{line: 690, col: 19, offset: 22317},
																expr: &actionExpr{
																	pos: position{line: 3080, col: 10, offset: 100200},
																	run: (*parser).callonBlockAttributes184,
																	expr: &charClassMatcher{
																		pos:        position{line: 3080, col: 11, offset: 100201},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 3096, col: 8, offset: 100524},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 3089, col: 12, offset: 100384},
																		run: (*parser).callonBlockAttributes187,
																		expr: &choiceExpr{
																			pos: position{line: 3089, col: 13, offset: 100385},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 3089, col: 13, offset: 100385},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 3089, col: 20, offset: 100392},
																					val:        "\r\n",
																					ignoreCase: false,
																					want:       "\"\\r\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 3089, col: 29, offset: 100401},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 3093, col: 8, offset: 100474},
																		expr: &anyMatcher{
																			line: 3093, col: 9, offset: 100475,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 384, col: 12, offset: 12004},
									run: (*parser).callonBlockAttributes194,
									expr: &seqExpr{
										pos: position{line: 384, col: 12, offset: 12004},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 384, col: 12, offset: 12004},
												label: "attributes",
												expr: &ruleRefExpr{
													pos:  position{line: 384, col: 24, offset: 12016},
													name: "LongHandAttributes",
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 384, col: 44, offset: 12036},
												expr: &actionExpr{
													pos: position{line: 3080, col: 10, offset: 100200},
													run: (*parser).callonBlockAttributes199,
													expr: &charClassMatcher{
														pos:        position{line: 3080, col: 11, offset: 100201},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
											&choiceExpr{
												pos: position{line: 3096, col: 8, offset: 100524},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 3089, col: 12, offset: 100384},
														run: (*parser).callonBlockAttributes202,
														expr: &choiceExpr{
															pos: position{line: 3089, col: 13, offset: 100385},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 3089, col: 13, offset: 100385},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 3089, col: 20, offset: 100392},
																	val:        "\r\n",
																	ignoreCase: false,
																	want:       "\"\\r\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 3089, col: 29, offset: 100401},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
														},
													},
													&notExpr{
														pos: position{line: 3093, col: 8, offset: 100474},
														expr: &anyMatcher{
															line: 3093, col: 9, offset: 100475,
														},
													},
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 384, col: 55, offset: 12047},
												expr: &actionExpr{
													pos: position{line: 690, col: 14, offset: 22312},
													run: (*parser).callonBlockAttributes210,
													expr: &seqExpr{
														pos: position{line: 690, col: 14, offset: 22312},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 690, col: 14, offset: 22312},
																expr: &notExpr{
																	pos: position{line: 3093, col: 8, offset: 100474},
																	expr: &anyMatcher{
																		line: 3093, col: 9, offset: 100475,
																	},
																},
															},
															&zeroOrMoreExpr{
																pos: position{line: 690, col: 19, offset: 22317},
																expr: &actionExpr{
																	pos: position{line: 3080, col: 10, offset: 100200},
																	run: (*parser).callonBlockAttributes216,
																	expr: &charClassMatcher{
																		pos:        position{line: 3080, col: 11, offset: 100201},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 3096, col: 8, offset: 100524},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 3089, col: 12, offset: 100384},
																		run: (*parser).callonBlockAttributes219,
																		expr: &choiceExpr{
																			pos: position{line: 3089, col: 13, offset: 100385},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 3089, col: 13, offset: 100385},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 3089, col: 20, offset: 100392},
																					val:        "\r\n",
																					ignoreCase: false,
																					want:       "\"\\r\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 3089, col: 29, offset: 100401},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 3093, col: 8, offset: 100474},
																		expr: &anyMatcher{
																			line: 3093, col: 9, offset: 100475,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineAttributes",
			pos:  position{line: 392, col: 1, offset: 12231},
			expr: &actionExpr{
				pos: position{line: 393, col: 5, offset: 12255},
				run: (*parser).callonInlineAttributes1,
				expr: &seqExpr{
					pos: position{line: 393, col: 5, offset: 12255},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 393, col: 5, offset: 12255},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 394, col: 5, offset: 12263},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 394, col: 16, offset: 12274},
								expr: &actionExpr{
									pos: position{line: 395, col: 9, offset: 12284},
									run: (*parser).callonInlineAttributes6,
									expr: &seqExpr{
										pos: position{line: 396, col: 13, offset: 12298},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 396, col: 13, offset: 12298},
												expr: &litMatcher{
													pos:        position{line: 396, col: 14, offset: 12299},
													val:        "]",
													ignoreCase: false,
													want:       "\"]\"",
												},
											},
											&labeledExpr{
												pos:   position{line: 397, col: 13, offset: 12331},
												label: "attribute",
												expr: &choiceExpr{
													pos: position{line: 397, col: 24, offset: 12342},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 397, col: 24, offset: 12342},
															name: "PositionalAttribute",
														},
														&ruleRefExpr{
															pos:  position{line: 397, col: 46, offset: 12364},
															name: "NamedAttribute",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 402, col: 5, offset: 12447},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "LongHandAttributes",
			pos:  position{line: 445, col: 1, offset: 13826},
			expr: &actionExpr{
				pos: position{line: 446, col: 5, offset: 13852},
				run: (*parser).callonLongHandAttributes1,
				expr: &seqExpr{
					pos: position{line: 446, col: 5, offset: 13852},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 446, col: 5, offset: 13852},
							expr: &litMatcher{
								pos:        position{line: 446, col: 6, offset: 13853},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 446, col: 10, offset: 13857},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&notExpr{
							pos: position{line: 446, col: 14, offset: 13861},
							expr: &litMatcher{
								pos:        position{line: 446, col: 15, offset: 13862},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 447, col: 5, offset: 13975},
							label: "firstPositionalAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 447, col: 31, offset: 14001},
								expr: &ruleRefExpr{
									pos:  position{line: 447, col: 32, offset: 14002},
									name: "FirstPositionalAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 448, col: 5, offset: 14034},
							label: "otherAttributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 448, col: 21, offset: 14050},
								expr: &choiceExpr{
									pos: position{line: 448, col: 22, offset: 14051},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 448, col: 22, offset: 14051},
											name: "PositionalAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 448, col: 44, offset: 14073},
											name: "NamedAttribute",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 449, col: 5, offset: 14094},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FirstPositionalAttributes",
			pos:  position{line: 462, col: 1, offset: 14622},
			expr: &actionExpr{
				pos: position{line: 463, col: 5, offset: 14656},
				run: (*parser).callonFirstPositionalAttributes1,
				expr: &seqExpr{
					pos: position{line: 463, col: 5, offset: 14656},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 463, col: 5, offset: 14656},
							label: "main",
							expr: &zeroOrOneExpr{
								pos: position{line: 463, col: 10, offset: 14661},
								expr: &ruleRefExpr{
									pos:  position{line: 464, col: 9, offset: 14671},
									name: "ShortHandAttribute",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 466, col: 5, offset: 14701},
							label: "extras",
							expr: &zeroOrMoreExpr{
								pos: position{line: 466, col: 12, offset: 14708},
								expr: &actionExpr{
									pos: position{line: 467, col: 9, offset: 14719},
									run: (*parser).callonFirstPositionalAttributes8,
									expr: &seqExpr{
										pos: position{line: 467, col: 9, offset: 14719},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 467, col: 9, offset: 14719},
												expr: &litMatcher{
													pos:        position{line: 467, col: 10, offset: 14720},
													val:        ",",
													ignoreCase: false,
													want:       "\",\"",
												},
											},
											&notExpr{
												pos: position{line: 467, col: 14, offset: 14724},
												expr: &litMatcher{
													pos:        position{line: 467, col: 15, offset: 14725},
													val:        "]",
													ignoreCase: false,
													want:       "\"]\"",
												},
											},
											&labeledExpr{
												pos:   position{line: 468, col: 9, offset: 14737},
												label: "extra",
												expr: &choiceExpr{
													pos: position{line: 469, col: 13, offset: 14757},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 469, col: 13, offset: 14757},
															name: "ShortHandIDAttribute",
														},
														&ruleRefExpr{
															pos:  position{line: 470, col: 15, offset: 14793},
															name: "ShortHandOptionAttribute",
														},
														&ruleRefExpr{
															pos:  position{line: 471, col: 15, offset: 14832},
															name: "ShortHandDotRoleAttribute",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 474, col: 8, offset: 14908},
							expr: &seqExpr{
								pos: position{line: 474, col: 9, offset: 14909},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 474, col: 9, offset: 14909},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 474, col: 13, offset: 14913},
										expr: &actionExpr{
											pos: position{line: 3080, col: 10, offset: 100200},
											run: (*parser).callonFirstPositionalAttributes23,
											expr: &charClassMatcher{
												pos:        position{line: 3080, col: 11, offset: 100201},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 475, col: 5, offset: 14927},
							run: (*parser).callonFirstPositionalAttributes25,
						},
					},
				},
			},
		},
		{
			name: "ShortHandIDAttribute",
			pos:  position{line: 491, col: 1, offset: 15343},
			expr: &actionExpr{
				pos: position{line: 491, col: 25, offset: 15367},
				run: (*parser).callonShortHandIDAttribute1,
				expr: &seqExpr{
					pos: position{line: 491, col: 25, offset: 15367},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 491, col: 25, offset: 15367},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&labeledExpr{
							pos:   position{line: 491, col: 29, offset: 15371},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 491, col: 33, offset: 15375},
								name: "ShortHandAttributeValue",
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttribute",
			pos:  position{line: 495, col: 1, offset: 15449},
			expr: &actionExpr{
				pos: position{line: 495, col: 23, offset: 15471},
				run: (*parser).callonShortHandAttribute1,
				expr: &labeledExpr{
					pos:   position{line: 495, col: 23, offset: 15471},
					label: "value",
					expr: &ruleRefExpr{
						pos:  position{line: 495, col: 30, offset: 15478},
						name: "ShortHandAttributeValue",
					},
				},
			},
		},
		{
			name: "ShortHandDotRoleAttribute",
			pos:  position{line: 500, col: 1, offset: 15604},
			expr: &actionExpr{
				pos: position{line: 500, col: 30, offset: 15633},
				run: (*parser).callonShortHandDotRoleAttribute1,
				expr: &seqExpr{
					pos: position{line: 500, col: 30, offset: 15633},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 500, col: 30, offset: 15633},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 500, col: 34, offset: 15637},
							label: "role",
							expr: &ruleRefExpr{
								pos:  position{line: 500, col: 40, offset: 15643},
								name: "ShortHandAttributeValue",
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandOptionAttribute",
			pos:  position{line: 505, col: 1, offset: 15765},
			expr: &actionExpr{
				pos: position{line: 505, col: 29, offset: 15793},
				run: (*parser).callonShortHandOptionAttribute1,
				expr: &seqExpr{
					pos: position{line: 505, col: 29, offset: 15793},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 505, col: 29, offset: 15793},
							val:        "%",
							ignoreCase: false,
							want:       "\"%\"",
						},
						&labeledExpr{
							pos:   position{line: 505, col: 33, offset: 15797},
							label: "option",
							expr: &ruleRefExpr{
								pos:  position{line: 505, col: 41, offset: 15805},
								name: "ShortHandAttributeValue",
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttributeValue",
			pos:  position{line: 510, col: 1, offset: 15918},
			expr: &choiceExpr{
				pos: position{line: 511, col: 5, offset: 15950},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 511, col: 5, offset: 15950},
						name: "SingleQuotedAttributeValue",
					},
					&ruleRefExpr{
						pos:  position{line: 512, col: 7, offset: 15984},
						name: "DoubleQuotedAttributeValue",
					},
					&actionExpr{
						pos: position{line: 513, col: 7, offset: 16018},
						run: (*parser).callonShortHandAttributeValue4,
						expr: &seqExpr{
							pos: position{line: 513, col: 7, offset: 16018},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 513, col: 7, offset: 16018},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 513, col: 16, offset: 16027},
										expr: &choiceExpr{
											pos: position{line: 516, col: 9, offset: 16209},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 2795, col: 5, offset: 91692},
													run: (*parser).callonShortHandAttributeValue9,
													expr: &litMatcher{
														pos:        position{line: 2795, col: 5, offset: 91692},
														val:        "\"`",
														ignoreCase: false,
														want:       "\"\\\"`\"",
													},
												},
												&actionExpr{
													pos: position{line: 2798, col: 7, offset: 91750},
													run: (*parser).callonShortHandAttributeValue11,
													expr: &litMatcher{
														pos:        position{line: 2798, col: 7, offset: 91750},
														val:        "`\"",
														ignoreCase: false,
														want:       "\"`\\\"\"",
													},
												},
												&actionExpr{
													pos: position{line: 2801, col: 7, offset: 91808},
													run: (*parser).callonShortHandAttributeValue13,
													expr: &litMatcher{
														pos:        position{line: 2801, col: 7, offset: 91808},
														val:        "'`",
														ignoreCase: false,
														want:       "\"'`\"",
													},
												},
												&actionExpr{
													pos: position{line: 2804, col: 7, offset: 91864},
													run: (*parser).callonShortHandAttributeValue15,
													expr: &litMatcher{
														pos:        position{line: 2804, col: 7, offset: 91864},
														val:        "`'",
														ignoreCase: false,
														want:       "\"`'\"",
													},
												},
												&actionExpr{
													pos: position{line: 517, col: 12, offset: 16235},
													run: (*parser).callonShortHandAttributeValue17,
													expr: &oneOrMoreExpr{
														pos: position{line: 517, col: 12, offset: 16235},
														expr: &charClassMatcher{
															pos:        position{line: 517, col: 12, offset: 16235},
															val:        "[^,=.%# \\r\\n�{]]",
															chars:      []rune{',', '=', '.', '%', '#', ' ', '\r', '\n', '�', '{', ']'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
												&actionExpr{
													pos: position{line: 648, col: 5, offset: 20883},
													run: (*parser).callonShortHandAttributeValue20,
													expr: &seqExpr{
														pos: position{line: 648, col: 5, offset: 20883},
														exprs: []interface{}{
															&andCodeExpr{
																pos: position{line: 648, col: 5, offset: 20883},
																run: (*parser).callonShortHandAttributeValue22,
															},
															&labeledExpr{
																pos:   position{line: 651, col: 5, offset: 20952},
																label: "element",
																expr: &choiceExpr{
																	pos: position{line: 651, col: 14, offset: 20961},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 671, col: 25, offset: 21614},
																			run: (*parser).callonShortHandAttributeValue25,
																			expr: &seqExpr{
																				pos: position{line: 671, col: 25, offset: 21614},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 671, col: 25, offset: 21614},
																						val:        "{counter:",
																						ignoreCase: false,
																						want:       "\"{counter:\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 671, col: 37, offset: 21626},
																						label: "name",
																						expr: &actionExpr{
																							pos: position{line: 324, col: 18, offset: 10072},
																							run: (*parser).callonShortHandAttributeValue29,
																							expr: &seqExpr{
																								pos: position{line: 324, col: 18, offset: 10072},
																								exprs: []interface{}{
																									&charClassMatcher{
																										pos:        position{line: 324, col: 18, offset: 10072},
																										val:        "[_0-9\\pL]",
																										chars:      []rune{'_'},
																										ranges:     []rune{'0', '9'},
																										classes:    []*unicode.RangeTable{rangeTable("L")},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 324, col: 28, offset: 10082},
																										expr: &charClassMatcher{
																											pos:        position{line: 324, col: 29, offset: 10083},
																											val:        "[-0-9\\pL]",
																											chars:      []rune{'-'},
																											ranges:     []rune{'0', '9'},
																											classes:    []*unicode.RangeTable{rangeTable("L")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																							},
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 671, col: 56, offset: 21645},
																						label: "start",
																						expr: &zeroOrOneExpr{
																							pos: position{line: 671, col: 62, offset: 21651},
																							expr: &actionExpr{
																								pos: position{line: 679, col: 17, offset: 21946},
																								run: (*parser).callonShortHandAttributeValue36,
																								expr: &seqExpr{
																									pos: position{line: 679, col: 17, offset: 21946},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 679, col: 17, offset: 21946},
																											val:        ":",
																											ignoreCase: false,
																											want:       "\":\"",
																										},
																										&labeledExpr{
																											pos:   position{line: 679, col: 21, offset: 21950},
																											label: "start",
																											expr: &choiceExpr{
																												pos: position{line: 679, col: 28, offset: 21957},
																												alternatives: []interface{}{
																													&actionExpr{
																														pos: position{line: 679, col: 28, offset: 21957},
																														run: (*parser).callonShortHandAttributeValue41,
																														expr: &charClassMatcher{
																															pos:        position{line: 679, col: 28, offset: 21957},
																															val:        "[A-Za-z]",
																															ranges:     []rune{'A', 'Z', 'a', 'z'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																													&actionExpr{
																														pos: position{line: 681, col: 9, offset: 22011},
																														run: (*parser).callonShortHandAttributeValue43,
																														expr: &oneOrMoreExpr{
																															pos: position{line: 681, col: 9, offset: 22011},
																															expr: &charClassMatcher{
																																pos:        position{line: 681, col: 9, offset: 22011},
																																val:        "[0-9]",
																																ranges:     []rune{'0', '9'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 671, col: 78, offset: 21667},
																						val:        "}",
																						ignoreCase: false,
																						want:       "\"}\"",
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 675, col: 25, offset: 21785},
																			run: (*parser).callonShortHandAttributeValue47,
																			expr: &seqExpr{
																				pos: position{line: 675, col: 25, offset: 21785},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 675, col: 25, offset: 21785},
																						val:        "{counter2:",
																						ignoreCase: false,
																						want:       "\"{counter2:\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 675, col: 38, offset: 21798},
																						label: "name",
																						expr: &actionExpr{
																							pos: position{line: 324, col: 18, offset: 10072},
																							run: (*parser).callonShortHandAttributeValue51,
																							expr: &seqExpr{
																								pos: position{line: 324, col: 18, offset: 10072},
																								exprs: []interface{}{
																									&charClassMatcher{
																										pos:        position{line: 324, col: 18, offset: 10072},
																										val:        "[_0-9\\pL]",
																										chars:      []rune{'_'},
																										ranges:     []rune{'0', '9'},
																										classes:    []*unicode.RangeTable{rangeTable("L")},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 324, col: 28, offset: 10082},
																										expr: &charClassMatcher{
																											pos:        position{line: 324, col: 29, offset: 10083},
																											val:        "[-0-9\\pL]",
																											chars:      []rune{'-'},
																											ranges:     []rune{'0', '9'},
																											classes:    []*unicode.RangeTable{rangeTable("L")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																							},
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 675, col: 57, offset: 21817},
																						label: "start",
																						expr: &zeroOrOneExpr{
																							pos: position{line: 675, col: 63, offset: 21823},
																							expr: &actionExpr{
																								pos: position{line: 679, col: 17, offset: 21946},
																								run: (*parser).callonShortHandAttributeValue58,
																								expr: &seqExpr{
																									pos: position{line: 679, col: 17, offset: 21946},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 679, col: 17, offset: 21946},
																											val:        ":",
																											ignoreCase: false,
																											want:       "\":\"",
																										},
																										&labeledExpr{
																											pos:   position{line: 679, col: 21, offset: 21950},
																											label: "start",
																											expr: &choiceExpr{
																												pos: position{line: 679, col: 28, offset: 21957},
																												alternatives: []interface{}{
																													&actionExpr{
																														pos: position{line: 679, col: 28, offset: 21957},
																														run: (*parser).callonShortHandAttributeValue63,
																														expr: &charClassMatcher{
																															pos:        position{line: 679, col: 28, offset: 21957},
																															val:        "[A-Za-z]",
																															ranges:     []rune{'A', 'Z', 'a', 'z'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																													&actionExpr{
																														pos: position{line: 681, col: 9, offset: 22011},
																														run: (*parser).callonShortHandAttributeValue65,
																														expr: &oneOrMoreExpr{
																															pos: position{line: 681, col: 9, offset: 22011},
																															expr: &charClassMatcher{
																																pos:        position{line: 681, col: 9, offset: 22011},
																																val:        "[0-9]",
																																ranges:     []rune{'0', '9'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 675, col: 79, offset: 21839},
																						val:        "}",
																						ignoreCase: false,
																						want:       "\"}\"",
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 657, col: 5, offset: 21090},
																			run: (*parser).callonShortHandAttributeValue69,
																			expr: &seqExpr{
																				pos: position{line: 657, col: 5, offset: 21090},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 657, col: 5, offset: 21090},
																						val:        "\\{",
																						ignoreCase: false,
																						want:       "\"\\\\{\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 657, col: 13, offset: 21098},
																						label: "name",
																						expr: &actionExpr{
																							pos: position{line: 324, col: 18, offset: 10072},
																							run: (*parser).callonShortHandAttributeValue73,
																							expr: &seqExpr{
																								pos: position{line: 324, col: 18, offset: 10072},
																								exprs: []interface{}{
																									&charClassMatcher{
																										pos:        position{line: 324, col: 18, offset: 10072},
																										val:        "[_0-9\\pL]",
																										chars:      []rune{'_'},
																										ranges:     []rune{'0', '9'},
																										classes:    []*unicode.RangeTable{rangeTable("L")},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 324, col: 28, offset: 10082},
																										expr: &charClassMatcher{
																											pos:        position{line: 324, col: 29, offset: 10083},
																											val:        "[-0-9\\pL]",
																											chars:      []rune{'-'},
																											ranges:     []rune{'0', '9'},
																											classes:    []*unicode.RangeTable{rangeTable("L")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 657, col: 32, offset: 21117},
																						val:        "}",
																						ignoreCase: false,
																						want:       "\"}\"",
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 664, col: 5, offset: 21358},
																			run: (*parser).callonShortHandAttributeValue79,
																			expr: &seqExpr{
																				pos: position{line: 664, col: 5, offset: 21358},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 664, col: 5, offset: 21358},
																						val:        "{",
																						ignoreCase: false,
																						want:       "\"{\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 664, col: 9, offset: 21362},
																						label: "name",
																						expr: &actionExpr{
																							pos: position{line: 324, col: 18, offset: 10072},
																							run: (*parser).callonShortHandAttributeValue83,
																							expr: &seqExpr{
																								pos: position{line: 324, col: 18, offset: 10072},
																								exprs: []interface{}{
																									&charClassMatcher{
																										pos:        position{line: 324, col: 18, offset: 10072},
																										val:        "[_0-9\\pL]",
																										chars:      []rune{'_'},
																										ranges:     []rune{'0', '9'},
																										classes:    []*unicode.RangeTable{rangeTable("L")},
																										ignoreCase: false,
																										inverted:   false,
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 324, col: 28, offset: 10082},
																										expr: &charClassMatcher{
																											pos:        position{line: 324, col: 29, offset: 10083},
																											val:        "[-0-9\\pL]",
																											chars:      []rune{'-'},
																											ranges:     []rune{'0', '9'},
																											classes:    []*unicode.RangeTable{rangeTable("L")},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 664, col: 28, offset: 21381},
																						val:        "}",
																						ignoreCase: false,
																						want:       "\"}\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 522, col: 12, offset: 16403},
													run: (*parser).callonShortHandAttributeValue89,
													expr: &litMatcher{
														pos:        position{line: 522, col: 12, offset: 16403},
														val:        "{",
														ignoreCase: false,
														want:       "\"{\"",
													},
												},
											},
										},
									},
								},
								&andExpr{
									pos: position{line: 526, col: 5, offset: 16491},
									expr: &notExpr{
										pos: position{line: 526, col: 7, offset: 16493},
										expr: &seqExpr{
											pos: position{line: 526, col: 9, offset: 16495},
											exprs: []interface{}{
												&zeroOrMoreExpr{
													pos: position{line: 526, col: 9, offset: 16495},
													expr: &actionExpr{
														pos: position{line: 3080, col: 10, offset: 100200},
														run: (*parser).callonShortHandAttributeValue95,
														expr: &charClassMatcher{
															pos:        position{line: 3080, col: 11, offset: 100201},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&litMatcher{
													pos:        position{line: 526, col: 16, offset: 16502},
													val:        "=",
													ignoreCase: false,
													want:       "\"=\"",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PositionalAttribute",
			pos:  position{line: 531, col: 1, offset: 16580},
			expr: &choiceExpr{
				pos: position{line: 531, col: 24, offset: 16603},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 532, col: 5, offset: 16609},
						run: (*parser).callonPositionalAttribute2,
						expr: &seqExpr{
							pos: position{line: 532, col: 5, offset: 16609},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 532, col: 5, offset: 16609},
									label: "value",
									expr: &ruleRefExpr{
										pos:  position{line: 532, col: 12, offset: 16616},
										name: "AttributeValue",
									},
								},
								&choiceExpr{
									pos: position{line: 532, col: 29, offset: 16633},
									alternatives: []interface{}{
										&zeroOrOneExpr{
											pos: position{line: 532, col: 29, offset: 16633},
											expr: &seqExpr{
												pos: position{line: 532, col: 30, offset: 16634},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 532, col: 30, offset: 16634},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
													&zeroOrMoreExpr{
														pos: position{line: 532, col: 34, offset: 16638},
														expr: &actionExpr{
															pos: position{line: 3080, col: 10, offset: 100200},
															run: (*parser).callonPositionalAttribute11,
															expr: &charClassMatcher{
																pos:        position{line: 3080, col: 11, offset: 100201},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
										},
										&andExpr{
											pos: position{line: 532, col: 45, offset: 16649},
											expr: &litMatcher{
												pos:        position{line: 532, col: 46, offset: 16650},
												val:        "]",
												ignoreCase: false,
												want:       "\"]\"",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 537, col: 6, offset: 16887},
						run: (*parser).callonPositionalAttribute15,
						expr: &seqExpr{
							pos: position{line: 537, col: 6, offset: 16887},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 537, col: 6, offset: 16887},
									label: "value",
									expr: &seqExpr{
										pos: position{line: 537, col: 13, offset: 16894},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 537, col: 13, offset: 16894},
												expr: &actionExpr{
													pos: position{line: 3080, col: 10, offset: 100200},
													run: (*parser).callonPositionalAttribute20,
													expr: &charClassMatcher{
														pos:        position{line: 3080, col: 11, offset: 100201},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
											&choiceExpr{
												pos: position{line: 537, col: 21, offset: 16902},
												alternatives: []interface{}{
													&seqExpr{
														pos: position{line: 537, col: 22, offset: 16903},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 537, col: 22, offset: 16903},
																val:        ",",
																ignoreCase: false,
																want:       "\",\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 537, col: 26, offset: 16907},
																expr: &actionExpr{
																	pos: position{line: 3080, col: 10, offset: 100200},
																	run: (*parser).callonPositionalAttribute26,
																	expr: &charClassMatcher{
																		pos:        position{line: 3080, col: 11, offset: 100201},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
													&andExpr{
														pos: position{line: 537, col: 36, offset: 16917},
														expr: &litMatcher{
															pos:        position{line: 537, col: 37, offset: 16918},
															val:        "]",
															ignoreCase: false,
															want:       "\"]\"",
														},
													},
												},
											},
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 538, col: 5, offset: 16928},
									run: (*parser).callonPositionalAttribute30,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttribute",
			pos:  position{line: 548, col: 1, offset: 17243},
			expr: &actionExpr{
				pos: position{line: 548, col: 19, offset: 17261},
				run: (*parser).callonNamedAttribute1,
				expr: &seqExpr{
					pos: position{line: 548, col: 19, offset: 17261},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 548, col: 19, offset: 17261},
							label: "key",
							expr: &actionExpr{
								pos: position{line: 553, col: 22, offset: 17569},
								run: (*parser).callonNamedAttribute4,
								expr: &seqExpr{
									pos: position{line: 553, col: 22, offset: 17569},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 553, col: 22, offset: 17569},
											expr: &actionExpr{
												pos: position{line: 3080, col: 10, offset: 100200},
												run: (*parser).callonNamedAttribute7,
												expr: &charClassMatcher{
													pos:        position{line: 3080, col: 11, offset: 100201},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 553, col: 29, offset: 17576},
											expr: &charClassMatcher{
												pos:        position{line: 553, col: 29, offset: 17576},
												val:        "[^\\r\\n=,]]",
												chars:      []rune{'\r', '\n', '=', ',', ']'},
												ignoreCase: false,
												inverted:   true,
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 553, col: 42, offset: 17589},
											expr: &actionExpr{
												pos: position{line: 3080, col: 10, offset: 100200},
												run: (*parser).callonNamedAttribute12,
												expr: &charClassMatcher{
													pos:        position{line: 3080, col: 11, offset: 100201},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 548, col: 43, offset: 17285},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 548, col: 47, offset: 17289},
							expr: &actionExpr{
								pos: position{line: 3080, col: 10, offset: 100200},
								run: (*parser).callonNamedAttribute16,
								expr: &charClassMatcher{
									pos:        position{line: 3080, col: 11, offset: 100201},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 548, col: 54, offset: 17296},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 548, col: 61, offset: 17303},
								name: "AttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 548, col: 77, offset: 17319},
							expr: &seqExpr{
								pos: position{line: 548, col: 78, offset: 17320},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 548, col: 78, offset: 17320},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 548, col: 82, offset: 17324},
										expr: &actionExpr{
											pos: position{line: 3080, col: 10, offset: 100200},
											run: (*parser).callonNamedAttribute24,
											expr: &charClassMatcher{
												pos:        position{line: 3080, col: 11, offset: 100201},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeValue",
			pos:  position{line: 557, col: 1, offset: 17659},
			expr: &actionExpr{
				pos: position{line: 558, col: 5, offset: 17682},
				run: (*parser).callonAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 558, col: 5, offset: 17682},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 558, col: 5, offset: 17682},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 559, col: 9, offset: 17698},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 559, col: 9, offset: 17698},
										name: "SingleQuotedAttributeValue",
									},
									&ruleRefExpr{
										pos:  position{line: 560, col: 11, offset: 17736},
										name: "DoubleQuotedAttributeValue",
									},
									&ruleRefExpr{
										pos:  position{line: 561, col: 11, offset: 17774},
										name: "UnquotedAttributeValue",
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 563, col: 5, offset: 17808},
							expr: &notExpr{
								pos: position{line: 563, col: 7, offset: 17810},
								expr: &seqExpr{
									pos: position{line: 563, col: 9, offset: 17812},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 563, col: 9, offset: 17812},
											expr: &actionExpr{
												pos: position{line: 3080, col: 10, offset: 100200},
												run: (*parser).callonAttributeValue12,
												expr: &charClassMatcher{
													pos:        position{line: 3080, col: 11, offset: 100201},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
										&litMatcher{
											pos:        position{line: 563, col: 16, offset: 17819},
											val:        "=",
											ignoreCase: false,
											want:       "\"=\"",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedAttributeValue",
			pos:  position{line: 567, col: 1, offset: 17860},
			expr: &actionExpr{
				pos: position{line: 568, col: 5, offset: 17895},
				run: (*parser).callonSingleQuotedAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 568, col: 5, offset: 17895},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 568, col: 5, offset: 17895},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&notExpr{
							pos: position{line: 568, col: 9, offset: 17899},
							expr: &litMatcher{
								pos:        position{line: 568, col: 10, offset: 17900},
								val:        "`",
								ignoreCase: false,
								want:       "\"`\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 569, col: 5, offset: 17979},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 569, col: 14, offset: 17988},
								name: "SingleQuotedAttributeValueContent",
							},
						},
						&litMatcher{
							pos:        position{line: 570, col: 5, offset: 18027},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedAttributeValueContent",
			pos:  position{line: 574, col: 1, offset: 18068},
			expr: &actionExpr{
				pos: position{line: 575, col: 5, offset: 18110},
				run: (*parser).callonSingleQuotedAttributeValueContent1,
				expr: &labeledExpr{
					pos:   position{line: 575, col: 5, offset: 18110},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 575, col: 14, offset: 18119},
						expr: &choiceExpr{
							pos: position{line: 576, col: 9, offset: 18129},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 2998, col: 14, offset: 97537},
									run: (*parser).callonSingleQuotedAttributeValueContent5,
									expr: &oneOrMoreExpr{
										pos: position{line: 2998, col: 14, offset: 97537},
										expr: &charClassMatcher{
											pos:        position{line: 2998, col: 14, offset: 97537},
											val:        "[0-9\\pL]",
											ranges:     []rune{'0', '9'},
											classes:    []*unicode.RangeTable{rangeTable("L")},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
								&actionExpr{
									pos: position{line: 3080, col: 10, offset: 100200},
									run: (*parser).callonSingleQuotedAttributeValueContent8,
									expr: &charClassMatcher{
										pos:        position{line: 3080, col: 11, offset: 100201},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&ruleRefExpr{
									pos:  position{line: 578, col: 11, offset: 18165},
									name: "Quote",
								},
								&actionExpr{
									pos: position{line: 2795, col: 5, offset: 91692},
									run: (*parser).callonSingleQuotedAttributeValueContent11,
									expr: &litMatcher{
										pos:        position{line: 2795, col: 5, offset: 91692},
										val:        "\"`",
										ignoreCase: false,
										want:       "\"\\\"`\"",
									},
								},
								&actionExpr{
									pos: position{line: 2798, col: 7, offset: 91750},
									run: (*parser).callonSingleQuotedAttributeValueContent13,
									expr: &litMatcher{
										pos:        position{line: 2798, col: 7, offset: 91750},
										val:        "`\"",
										ignoreCase: false,
										want:       "\"`\\\"\"",
									},
								},
								&actionExpr{
									pos: position{line: 2801, col: 7, offset: 91808},
									run: (*parser).callonSingleQuotedAttributeValueContent15,
									expr: &litMatcher{
										pos:        position{line: 2801, col: 7, offset: 91808},
										val:        "'`",
										ignoreCase: false,
										want:       "\"'`\"",
									},
								},
								&actionExpr{
									pos: position{line: 2804, col: 7, offset: 91864},
									run: (*parser).callonSingleQuotedAttributeValueContent17,
									expr: &litMatcher{
										pos:        position{line: 2804, col: 7, offset: 91864},
										val:        "`'",
										ignoreCase: false,
										want:       "\"`'\"",
									},
								},
								&actionExpr{
									pos: position{line: 648, col: 5, offset: 20883},
									run: (*parser).callonSingleQuotedAttributeValueContent19,
									expr: &seqExpr{
										pos: position{line: 648, col: 5, offset: 20883},
										exprs: []interface{}{
											&andCodeExpr{
												pos: position{line: 648, col: 5, offset: 20883},
												run: (*parser).callonSingleQuotedAttributeValueContent21,
											},
											&labeledExpr{
												pos:   position{line: 651, col: 5, offset: 20952},
												label: "element",
												expr: &choiceExpr{
													pos: position{line: 651, col: 14, offset: 20961},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 671, col: 25, offset: 21614},
															run: (*parser).callonSingleQuotedAttributeValueContent24,
															expr: &seqExpr{
																pos: position{line: 671, col: 25, offset: 21614},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 671, col: 25, offset: 21614},
																		val:        "{counter:",
																		ignoreCase: false,
																		want:       "\"{counter:\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 671, col: 37, offset: 21626},
																		label: "name",
																		expr: &actionExpr{
																			pos: position{line: 324, col: 18, offset: 10072},
																			run: (*parser).callonSingleQuotedAttributeValueContent28,
																			expr: &seqExpr{
																				pos: position{line: 324, col: 18, offset: 10072},
																				exprs: []interface{}{
																					&charClassMatcher{
																						pos:        position{line: 324, col: 18, offset: 10072},
																						val:        "[_0-9\\pL]",
																						chars:      []rune{'_'},
																						ranges:     []rune{'0', '9'},
																						classes:    []*unicode.RangeTable{rangeTable("L")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 324, col: 28, offset: 10082},
																						expr: &charClassMatcher{
																							pos:        position{line: 324, col: 29, offset: 10083},
																							val:        "[-0-9\\pL]",
																							chars:      []rune{'-'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 671, col: 56, offset: 21645},
																		label: "start",
																		expr: &zeroOrOneExpr{
																			pos: position{line: 671, col: 62, offset: 21651},
																			expr: &actionExpr{
																				pos: position{line: 679, col: 17, offset: 21946},
																				run: (*parser).callonSingleQuotedAttributeValueContent35,
																				expr: &seqExpr{
																					pos: position{line: 679, col: 17, offset: 21946},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 679, col: 17, offset: 21946},
																							val:        ":",
																							ignoreCase: false,
																							want:       "\":\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 679, col: 21, offset: 21950},
																							label: "start",
																							expr: &choiceExpr{
																								pos: position{line: 679, col: 28, offset: 21957},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 679, col: 28, offset: 21957},
																										run: (*parser).callonSingleQuotedAttributeValueContent40,
																										expr: &charClassMatcher{
																											pos:        position{line: 679, col: 28, offset: 21957},
																											val:        "[A-Za-z]",
																											ranges:     []rune{'A', 'Z', 'a', 'z'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&actionExpr{
																										pos: position{line: 681, col: 9, offset: 22011},
																										run: (*parser).callonSingleQuotedAttributeValueContent42,
																										expr: &oneOrMoreExpr{
																											pos: position{line: 681, col: 9, offset: 22011},
																											expr: &charClassMatcher{
																												pos:        position{line: 681, col: 9, offset: 22011},
																												val:        "[0-9]",
																												ranges:     []rune{'0', '9'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 671, col: 78, offset: 21667},
																		val:        "}",
																		ignoreCase: false,
																		want:       "\"}\"",
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 675, col: 25, offset: 21785},
															run: (*parser).callonSingleQuotedAttributeValueContent46,
															expr: &seqExpr{
																pos: position{line: 675, col: 25, offset: 21785},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 675, col: 25, offset: 21785},
																		val:        "{counter2:",
																		ignoreCase: false,
																		want:       "\"{counter2:\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 675, col: 38, offset: 21798},
																		label: "name",
																		expr: &actionExpr{
																			pos: position{line: 324, col: 18, offset: 10072},
																			run: (*parser).callonSingleQuotedAttributeValueContent50,
																			expr: &seqExpr{
																				pos: position{line: 324, col: 18, offset: 10072},
																				exprs: []interface{}{
																					&charClassMatcher{
																						pos:        position{line: 324, col: 18, offset: 10072},
																						val:        "[_0-9\\pL]",
																						chars:      []rune{'_'},
																						ranges:     []rune{'0', '9'},
																						classes:    []*unicode.RangeTable{rangeTable("L")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 324, col: 28, offset: 10082},
																						expr: &charClassMatcher{
																							pos:        position{line: 324, col: 29, offset: 10083},
																							val:        "[-0-9\\pL]",
																							chars:      []rune{'-'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 675, col: 57, offset: 21817},
																		label: "start",
																		expr: &zeroOrOneExpr{
																			pos: position{line: 675, col: 63, offset: 21823},
																			expr: &actionExpr{
																				pos: position{line: 679, col: 17, offset: 21946},
																				run: (*parser).callonSingleQuotedAttributeValueContent57,
																				expr: &seqExpr{
																					pos: position{line: 679, col: 17, offset: 21946},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 679, col: 17, offset: 21946},
																							val:        ":",
																							ignoreCase: false,
																							want:       "\":\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 679, col: 21, offset: 21950},
																							label: "start",
																							expr: &choiceExpr{
																								pos: position{line: 679, col: 28, offset: 21957},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 679, col: 28, offset: 21957},
																										run: (*parser).callonSingleQuotedAttributeValueContent62,
																										expr: &charClassMatcher{
																											pos:        position{line: 679, col: 28, offset: 21957},
																											val:        "[A-Za-z]",
																											ranges:     []rune{'A', 'Z', 'a', 'z'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&actionExpr{
																										pos: position{line: 681, col: 9, offset: 22011},
																										run: (*parser).callonSingleQuotedAttributeValueContent64,
																										expr: &oneOrMoreExpr{
																											pos: position{line: 681, col: 9, offset: 22011},
																											expr: &charClassMatcher{
																												pos:        position{line: 681, col: 9, offset: 22011},
																												val:        "[0-9]",
																												ranges:     []rune{'0', '9'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 675, col: 79, offset: 21839},
																		val:        "}",
																		ignoreCase: false,
																		want:       "\"}\"",
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 657, col: 5, offset: 21090},
															run: (*parser).callonSingleQuotedAttributeValueContent68,
															expr: &seqExpr{
																pos: position{line: 657, col: 5, offset: 21090},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 657, col: 5, offset: 21090},
																		val:        "\\{",
																		ignoreCase: false,
																		want:       "\"\\\\{\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 657, col: 13, offset: 21098},
																		label: "name",
																		expr: &actionExpr{
																			pos: position{line: 324, col: 18, offset: 10072},
																			run: (*parser).callonSingleQuotedAttributeValueContent72,
																			expr: &seqExpr{
																				pos: position{line: 324, col: 18, offset: 10072},
																				exprs: []interface{}{
																					&charClassMatcher{
																						pos:        position{line: 324, col: 18, offset: 10072},
																						val:        "[_0-9\\pL]",
																						chars:      []rune{'_'},
																						ranges:     []rune{'0', '9'},
																						classes:    []*unicode.RangeTable{rangeTable("L")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 324, col: 28, offset: 10082},
																						expr: &charClassMatcher{
																							pos:        position{line: 324, col: 29, offset: 10083},
																							val:        "[-0-9\\pL]",
																							chars:      []rune{'-'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 657, col: 32, offset: 21117},
																		val:        "}",
																		ignoreCase: false,
																		want:       "\"}\"",
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 664, col: 5, offset: 21358},
															run: (*parser).callonSingleQuotedAttributeValueContent78,
															expr: &seqExpr{
																pos: position{line: 664, col: 5, offset: 21358},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 664, col: 5, offset: 21358},
																		val:        "{",
																		ignoreCase: false,
																		want:       "\"{\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 664, col: 9, offset: 21362},
																		label: "name",
																		expr: &actionExpr{
																			pos: position{line: 324, col: 18, offset: 10072},
																			run: (*parser).callonSingleQuotedAttributeValueContent82,
																			expr: &seqExpr{
																				pos: position{line: 324, col: 18, offset: 10072},
																				exprs: []interface{}{
																					&charClassMatcher{
																						pos:        position{line: 324, col: 18, offset: 10072},
																						val:        "[_0-9\\pL]",
																						chars:      []rune{'_'},
																						ranges:     []rune{'0', '9'},
																						classes:    []*unicode.RangeTable{rangeTable("L")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 324, col: 28, offset: 10082},
																						expr: &charClassMatcher{
																							pos:        position{line: 324, col: 29, offset: 10083},
																							val:        "[-0-9\\pL]",
																							chars:      []rune{'-'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 664, col: 28, offset: 21381},
																		val:        "}",
																		ignoreCase: false,
																		want:       "\"}\"",
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 581, col: 12, offset: 18235},
									run: (*parser).callonSingleQuotedAttributeValueContent88,
									expr: &litMatcher{
										pos:        position{line: 581, col: 12, offset: 18235},
										val:        "\\'",
										ignoreCase: false,
										want:       "\"\\\\'\"",
									},
								},
								&litMatcher{
									pos:        position{line: 584, col: 13, offset: 18337},
									val:        "'`",
									ignoreCase: false,
									want:       "\"'`\"",
								},
								&litMatcher{
									pos:        position{line: 584, col: 20, offset: 18344},
									val:        "`'",
									ignoreCase: false,
									want:       "\"`'\"",
								},
								&actionExpr{
									pos: position{line: 584, col: 27, offset: 18351},
									run: (*parser).callonSingleQuotedAttributeValueContent92,
									expr: &litMatcher{
										pos:        position{line: 584, col: 27, offset: 18351},
										val:        "\\",
										ignoreCase: false,
										want:       "\"\\\\\"",
									},
								},
								&actionExpr{
									pos: position{line: 587, col: 12, offset: 18511},
									run: (*parser).callonSingleQuotedAttributeValueContent94,
									expr: &oneOrMoreExpr{
										pos: position{line: 587, col: 12, offset: 18511},
										expr: &charClassMatcher{
											pos:        position{line: 587, col: 12, offset: 18511},
											val:        "[^\\r\\n\\\\\\ ]",
											chars:      []rune{'\r', '\n', '\\', '\'', ' '},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedAttributeValue",
			pos:  position{line: 594, col: 1, offset: 18708},
			expr: &actionExpr{
				pos: position{line: 595, col: 5, offset: 18743},
				run: (*parser).callonDoubleQuotedAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 595, col: 5, offset: 18743},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 595, col: 5, offset: 18743},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&notExpr{
							pos: position{line: 595, col: 10, offset: 18748},
							expr: &litMatcher{
								pos:        position{line: 595, col: 11, offset: 18749},
								val:        "`",
								ignoreCase: false,
								want:       "\"`\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 596, col: 5, offset: 18828},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 596, col: 14, offset: 18837},
								name: "DoubleQuotedAttributeValueContent",
							},
						},
						&litMatcher{
							pos:        position{line: 597, col: 5, offset: 18876},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&andExpr{
							pos: position{line: 597, col: 10, offset: 18881},
							expr: &notExpr{
								pos: position{line: 597, col: 12, offset: 18883},
								expr: &seqExpr{
									pos: position{line: 597, col: 14, offset: 18885},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 597, col: 14, offset: 18885},
											expr: &actionExpr{
												pos: position{line: 3080, col: 10, offset: 100200},
												run: (*parser).callonDoubleQuotedAttributeValue13,
												expr: &charClassMatcher{
													pos:        position{line: 3080, col: 11, offset: 100201},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
										&litMatcher{
											pos:        position{line: 597, col: 21, offset: 18892},
											val:        "=",
											ignoreCase: false,
											want:       "\"=\"",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedAttributeValueContent",
			pos:  position{line: 600, col: 1, offset: 18934},
			expr: &actionExpr{
				pos: position{line: 601, col: 5, offset: 18976},
				run: (*parser).callonDoubleQuotedAttributeValueContent1,
				expr: &labeledExpr{
					pos:   position{line: 601, col: 5, offset: 18976},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 601, col: 14, offset: 18985},
						expr: &choiceExpr{
							pos: position{line: 602, col: 9, offset: 18995},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 2998, col: 14, offset: 97537},
									run: (*parser).callonDoubleQuotedAttributeValueContent5,
									expr: &oneOrMoreExpr{
										pos: position{line: 2998, col: 14, offset: 97537},
										expr: &charClassMatcher{
											pos:        position{line: 2998, col: 14, offset: 97537},
											val:        "[0-9\\pL]",
											ranges:     []rune{'0', '9'},
											classes:    []*unicode.RangeTable{rangeTable("L")},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
								&actionExpr{
									pos: position{line: 3080, col: 10, offset: 100200},
									run: (*parser).callonDoubleQuotedAttributeValueContent8,
									expr: &charClassMatcher{
										pos:        position{line: 3080, col: 11, offset: 100201},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&ruleRefExpr{
									pos:  position{line: 604, col: 11, offset: 19031},
									name: "Quote",
								},
								&actionExpr{
									pos: position{line: 2795, col: 5, offset: 91692},
									run: (*parser).callonDoubleQuotedAttributeValueContent11,
									expr: &litMatcher{
										pos:        position{line: 2795, col: 5, offset: 91692},
										val:        "\"`",
										ignoreCase: false,
										want:       "\"\\\"`\"",
									},
								},
								&actionExpr{
									pos: position{line: 2798, col: 7, offset: 91750},
									run: (*parser).callonDoubleQuotedAttributeValueContent13,
									expr: &litMatcher{
										pos:        position{line: 2798, col: 7, offset: 91750},
										val:        "`\"",
										ignoreCase: false,
										want:       "\"`\\\"\"",
									},
								},
								&actionExpr{
									pos: position{line: 2801, col: 7, offset: 91808},
									run: (*parser).callonDoubleQuotedAttributeValueContent15,
									expr: &litMatcher{
										pos:        position{line: 2801, col: 7, offset: 91808},
										val:        "'`",
										ignoreCase: false,
										want:       "\"'`\"",
									},
								},
								&actionExpr{
									pos: position{line: 2804, col: 7, offset: 91864},
									run: (*parser).callonDoubleQuotedAttributeValueContent17,
									expr: &litMatcher{
										pos:        position{line: 2804, col: 7, offset: 91864},
										val:        "`'",
										ignoreCase: false,
										want:       "\"`'\"",
									},
								},
								&actionExpr{
									pos: position{line: 648, col: 5, offset: 20883},
									run: (*parser).callonDoubleQuotedAttributeValueContent19,
									expr: &seqExpr{
										pos: position{line: 648, col: 5, offset: 20883},
										exprs: []interface{}{
											&andCodeExpr{
												pos: position{line: 648, col: 5, offset: 20883},
												run: (*parser).callonDoubleQuotedAttributeValueContent21,
											},
											&labeledExpr{
												pos:   position{line: 651, col: 5, offset: 20952},
												label: "element",
												expr: &choiceExpr{
													pos: position{line: 651, col: 14, offset: 20961},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 671, col: 25, offset: 21614},
															run: (*parser).callonDoubleQuotedAttributeValueContent24,
															expr: &seqExpr{
																pos: position{line: 671, col: 25, offset: 21614},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 671, col: 25, offset: 21614},
																		val:        "{counter:",
																		ignoreCase: false,
																		want:       "\"{counter:\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 671, col: 37, offset: 21626},
																		label: "name",
																		expr: &actionExpr{
																			pos: position{line: 324, col: 18, offset: 10072},
																			run: (*parser).callonDoubleQuotedAttributeValueContent28,
																			expr: &seqExpr{
																				pos: position{line: 324, col: 18, offset: 10072},
																				exprs: []interface{}{
																					&charClassMatcher{
																						pos:        position{line: 324, col: 18, offset: 10072},
																						val:        "[_0-9\\pL]",
																						chars:      []rune{'_'},
																						ranges:     []rune{'0', '9'},
																						classes:    []*unicode.RangeTable{rangeTable("L")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 324, col: 28, offset: 10082},
																						expr: &charClassMatcher{
																							pos:        position{line: 324, col: 29, offset: 10083},
																							val:        "[-0-9\\pL]",
																							chars:      []rune{'-'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 671, col: 56, offset: 21645},
																		label: "start",
																		expr: &zeroOrOneExpr{
																			pos: position{line: 671, col: 62, offset: 21651},
																			expr: &actionExpr{
																				pos: position{line: 679, col: 17, offset: 21946},
																				run: (*parser).callonDoubleQuotedAttributeValueContent35,
																				expr: &seqExpr{
																					pos: position{line: 679, col: 17, offset: 21946},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 679, col: 17, offset: 21946},
																							val:        ":",
																							ignoreCase: false,
																							want:       "\":\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 679, col: 21, offset: 21950},
																							label: "start",
																							expr: &choiceExpr{
																								pos: position{line: 679, col: 28, offset: 21957},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 679, col: 28, offset: 21957},
																										run: (*parser).callonDoubleQuotedAttributeValueContent40,
																										expr: &charClassMatcher{
																											pos:        position{line: 679, col: 28, offset: 21957},
																											val:        "[A-Za-z]",
																											ranges:     []rune{'A', 'Z', 'a', 'z'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&actionExpr{
																										pos: position{line: 681, col: 9, offset: 22011},
																										run: (*parser).callonDoubleQuotedAttributeValueContent42,
																										expr: &oneOrMoreExpr{
																											pos: position{line: 681, col: 9, offset: 22011},
																											expr: &charClassMatcher{
																												pos:        position{line: 681, col: 9, offset: 22011},
																												val:        "[0-9]",
																												ranges:     []rune{'0', '9'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 671, col: 78, offset: 21667},
																		val:        "}",
																		ignoreCase: false,
																		want:       "\"}\"",
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 675, col: 25, offset: 21785},
															run: (*parser).callonDoubleQuotedAttributeValueContent46,
															expr: &seqExpr{
																pos: position{line: 675, col: 25, offset: 21785},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 675, col: 25, offset: 21785},
																		val:        "{counter2:",
																		ignoreCase: false,
																		want:       "\"{counter2:\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 675, col: 38, offset: 21798},
																		label: "name",
																		expr: &actionExpr{
																			pos: position{line: 324, col: 18, offset: 10072},
																			run: (*parser).callonDoubleQuotedAttributeValueContent50,
																			expr: &seqExpr{
																				pos: position{line: 324, col: 18, offset: 10072},
																				exprs: []interface{}{
																					&charClassMatcher{
																						pos:        position{line: 324, col: 18, offset: 10072},
																						val:        "[_0-9\\pL]",
																						chars:      []rune{'_'},
																						ranges:     []rune{'0', '9'},
																						classes:    []*unicode.RangeTable{rangeTable("L")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 324, col: 28, offset: 10082},
																						expr: &charClassMatcher{
																							pos:        position{line: 324, col: 29, offset: 10083},
																							val:        "[-0-9\\pL]",
																							chars:      []rune{'-'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 675, col: 57, offset: 21817},
																		label: "start",
																		expr: &zeroOrOneExpr{
																			pos: position{line: 675, col: 63, offset: 21823},
																			expr: &actionExpr{
																				pos: position{line: 679, col: 17, offset: 21946},
																				run: (*parser).callonDoubleQuotedAttributeValueContent57,
																				expr: &seqExpr{
																					pos: position{line: 679, col: 17, offset: 21946},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 679, col: 17, offset: 21946},
																							val:        ":",
																							ignoreCase: false,
																							want:       "\":\"",
																						},
																						&labeledExpr{
																							pos:   position{line: 679, col: 21, offset: 21950},
																							label: "start",
																							expr: &choiceExpr{
																								pos: position{line: 679, col: 28, offset: 21957},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 679, col: 28, offset: 21957},
																										run: (*parser).callonDoubleQuotedAttributeValueContent62,
																										expr: &charClassMatcher{
																											pos:        position{line: 679, col: 28, offset: 21957},
																											val:        "[A-Za-z]",
																											ranges:     []rune{'A', 'Z', 'a', 'z'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&actionExpr{
																										pos: position{line: 681, col: 9, offset: 22011},
																										run: (*parser).callonDoubleQuotedAttributeValueContent64,
																										expr: &oneOrMoreExpr{
																											pos: position{line: 681, col: 9, offset: 22011},
																											expr: &charClassMatcher{
																												pos:        position{line: 681, col: 9, offset: 22011},
																												val:        "[0-9]",
																												ranges:     []rune{'0', '9'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 675, col: 79, offset: 21839},
																		val:        "}",
																		ignoreCase: false,
																		want:       "\"}\"",
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 657, col: 5, offset: 21090},
															run: (*parser).callonDoubleQuotedAttributeValueContent68,
															expr: &seqExpr{
																pos: position{line: 657, col: 5, offset: 21090},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 657, col: 5, offset: 21090},
																		val:        "\\{",
																		ignoreCase: false,
																		want:       "\"\\\\{\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 657, col: 13, offset: 21098},
																		label: "name",
																		expr: &actionExpr{
																			pos: position{line: 324, col: 18, offset: 10072},
																			run: (*parser).callonDoubleQuotedAttributeValueContent72,
																			expr: &seqExpr{
																				pos: position{line: 324, col: 18, offset: 10072},
																				exprs: []interface{}{
																					&charClassMatcher{
																						pos:        position{line: 324, col: 18, offset: 10072},
																						val:        "[_0-9\\pL]",
																						chars:      []rune{'_'},
																						ranges:     []rune{'0', '9'},
																						classes:    []*unicode.RangeTable{rangeTable("L")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 324, col: 28, offset: 10082},
																						expr: &charClassMatcher{
																							pos:        position{line: 324, col: 29, offset: 10083},
																							val:        "[-0-9\\pL]",
																							chars:      []rune{'-'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 657, col: 32, offset: 21117},
																		val:        "}",
																		ignoreCase: false,
																		want:       "\"}\"",
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 664, col: 5, offset: 21358},
															run: (*parser).callonDoubleQuotedAttributeValueContent78,
															expr: &seqExpr{
																pos: position{line: 664, col: 5, offset: 21358},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 664, col: 5, offset: 21358},
																		val:        "{",
																		ignoreCase: false,
																		want:       "\"{\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 664, col: 9, offset: 21362},
																		label: "name",
																		expr: &actionExpr{
																			pos: position{line: 324, col: 18, offset: 10072},
																			run: (*parser).callonDoubleQuotedAttributeValueContent82,
																			expr: &seqExpr{
																				pos: position{line: 324, col: 18, offset: 10072},
																				exprs: []interface{}{
																					&charClassMatcher{
																						pos:        position{line: 324, col: 18, offset: 10072},
																						val:        "[_0-9\\pL]",
																						chars:      []rune{'_'},
																						ranges:     []rune{'0', '9'},
																						classes:    []*unicode.RangeTable{rangeTable("L")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 324, col: 28, offset: 10082},
																						expr: &charClassMatcher{
																							pos:        position{line: 324, col: 29, offset: 10083},
																							val:        "[-0-9\\pL]",
																							chars:      []rune{'-'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 664, col: 28, offset: 21381},
																		val:        "}",
																		ignoreCase: false,
																		want:       "\"}\"",
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 607, col: 12, offset: 19102},
									run: (*parser).callonDoubleQuotedAttributeValueContent88,
									expr: &litMatcher{
										pos:        position{line: 607, col: 12, offset: 19102},
										val:        "\\\"",
										ignoreCase: false,
										want:       "\"\\\\\\\"\"",
									},
								},
								&litMatcher{
									pos:        position{line: 610, col: 13, offset: 19204},
									val:        "\"`",
									ignoreCase: false,
									want:       "\"\\\"`\"",
								},
								&litMatcher{
									pos:        position{line: 610, col: 21, offset: 19212},
									val:        "`\"",
									ignoreCase: false,
									want:       "\"`\\\"\"",
								},
								&litMatcher{
									pos:        position{line: 610, col: 29, offset: 19220},
									val:        "\\",
									ignoreCase: false,
									want:       "\"\\\\\"",
								},
								&actionExpr{
									pos: position{line: 610, col: 35, offset: 19226},
									run: (*parser).callonDoubleQuotedAttributeValueContent93,
									expr: &litMatcher{
										pos:        position{line: 610, col: 35, offset: 19226},
										val:        "`",
										ignoreCase: false,
										want:       "\"`\"",
									},
								},
								&actionExpr{
									pos: position{line: 613, col: 12, offset: 19409},
									run: (*parser).callonDoubleQuotedAttributeValueContent95,
									expr: &oneOrMoreExpr{
										pos: position{line: 613, col: 12, offset: 19409},
										expr: &charClassMatcher{
											pos:        position{line: 613, col: 12, offset: 19409},
											val:        "[^\\r\\n\\\\\"` ]",
											chars:      []rune{'\r', '\n', '\\', '"', '`', ' '},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UnquotedAttributeValue",
			pos:  position{line: 621, col: 1, offset: 19683},
			expr: &actionExpr{
				pos: position{line: 624, col: 5, offset: 19867},
				run: (*parser).callonUnquotedAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 624, col: 5, offset: 19867},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 624, col: 5, offset: 19867},
							expr: &actionExpr{
								pos: position{line: 3080, col: 10, offset: 100200},
								run: (*parser).callonUnquotedAttributeValue4,
								expr: &charClassMatcher{
									pos:        position{line: 3080, col: 11, offset: 100201},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 625, col: 5, offset: 19936},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 625, col: 14, offset: 19945},
								expr: &choiceExpr{
									pos: position{line: 626, col: 9, offset: 19955},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 626, col: 9, offset: 19955},
											name: "Quote",
										},
										&seqExpr{
											pos: position{line: 627, col: 12, offset: 20031},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 627, col: 12, offset: 20031},
													val:        "[",
													ignoreCase: false,
													want:       "\"[\"",
												},
												&ruleRefExpr{
													pos:  position{line: 627, col: 16, offset: 20035},
													name: "UnquotedAttributeValue",
												},
												&litMatcher{
													pos:        position{line: 627, col: 39, offset: 20058},
													val:        "]",
													ignoreCase: false,
													want:       "\"]\"",
												},
											},
										},
										&actionExpr{
											pos: position{line: 629, col: 12, offset: 20157},
											run: (*parser).callonUnquotedAttributeValue14,
											expr: &oneOrMoreExpr{
												pos: position{line: 629, col: 12, offset: 20157},
												expr: &charClassMatcher{
													pos:        position{line: 629, col: 12, offset: 20157},
													val:        "[^=,�]{\\\"` ]",
													chars:      []rune{'=', ',', '�', ']', '{', '\'', '"', '`', ' '},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
										&actionExpr{
											pos: position{line: 3080, col: 10, offset: 100200},
											run: (*parser).callonUnquotedAttributeValue17,
											expr: &charClassMatcher{
												pos:        position{line: 3080, col: 11, offset: 100201},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&actionExpr{
											pos: position{line: 648, col: 5, offset: 20883},
											run: (*parser).callonUnquotedAttributeValue19,
											expr: &seqExpr{
												pos: position{line: 648, col: 5, offset: 20883},
												exprs: []interface{}{
													&andCodeExpr{
														pos: position{line: 648, col: 5, offset: 20883},
														run: (*parser).callonUnquotedAttributeValue21,
													},
													&labeledExpr{
														pos:   position{line: 651, col: 5, offset: 20952},
														label: "element",
														expr: &choiceExpr{
															pos: position{line: 651, col: 14, offset: 20961},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 671, col: 25, offset: 21614},
																	run: (*parser).callonUnquotedAttributeValue24,
																	expr: &seqExpr{
																		pos: position{line: 671, col: 25, offset: 21614},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 671, col: 25, offset: 21614},
																				val:        "{counter:",
																				ignoreCase: false,
																				want:       "\"{counter:\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 671, col: 37, offset: 21626},
																				label: "name",
																				expr: &actionExpr{
																					pos: position{line: 324, col: 18, offset: 10072},
																					run: (*parser).callonUnquotedAttributeValue28,
																					expr: &seqExpr{
																						pos: position{line: 324, col: 18, offset: 10072},
																						exprs: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 324, col: 18, offset: 10072},
																								val:        "[_0-9\\pL]",
																								chars:      []rune{'_'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 324, col: 28, offset: 10082},
																								expr: &charClassMatcher{
																									pos:        position{line: 324, col: 29, offset: 10083},
																									val:        "[-0-9\\pL]",
																									chars:      []rune{'-'},
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 671, col: 56, offset: 21645},
																				label: "start",
																				expr: &zeroOrOneExpr{
																					pos: position{line: 671, col: 62, offset: 21651},
																					expr: &actionExpr{
																						pos: position{line: 679, col: 17, offset: 21946},
																						run: (*parser).callonUnquotedAttributeValue35,
																						expr: &seqExpr{
																							pos: position{line: 679, col: 17, offset: 21946},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 679, col: 17, offset: 21946},
																									val:        ":",
																									ignoreCase: false,
																									want:       "\":\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 679, col: 21, offset: 21950},
																									label: "start",
																									expr: &choiceExpr{
																										pos: position{line: 679, col: 28, offset: 21957},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 679, col: 28, offset: 21957},
																												run: (*parser).callonUnquotedAttributeValue40,
																												expr: &charClassMatcher{
																													pos:        position{line: 679, col: 28, offset: 21957},
																													val:        "[A-Za-z]",
																													ranges:     []rune{'A', 'Z', 'a', 'z'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&actionExpr{
																												pos: position{line: 681, col: 9, offset: 22011},
																												run: (*parser).callonUnquotedAttributeValue42,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 681, col: 9, offset: 22011},
																													expr: &charClassMatcher{
																														pos:        position{line: 681, col: 9, offset: 22011},
																														val:        "[0-9]",
																														ranges:     []rune{'0', '9'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 671, col: 78, offset: 21667},
																				val:        "}",
																				ignoreCase: false,
																				want:       "\"}\"",
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 675, col: 25, offset: 21785},
																	run: (*parser).callonUnquotedAttributeValue46,
																	expr: &seqExpr{
																		pos: position{line: 675, col: 25, offset: 21785},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 675, col: 25, offset: 21785},
																				val:        "{counter2:",
																				ignoreCase: false,
																				want:       "\"{counter2:\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 675, col: 38, offset: 21798},
																				label: "name",
																				expr: &actionExpr{
																					pos: position{line: 324, col: 18, offset: 10072},
																					run: (*parser).callonUnquotedAttributeValue50,
																					expr: &seqExpr{
																						pos: position{line: 324, col: 18, offset: 10072},
																						exprs: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 324, col: 18, offset: 10072},
																								val:        "[_0-9\\pL]",
																								chars:      []rune{'_'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 324, col: 28, offset: 10082},
																								expr: &charClassMatcher{
																									pos:        position{line: 324, col: 29, offset: 10083},
																									val:        "[-0-9\\pL]",
																									chars:      []rune{'-'},
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 675, col: 57, offset: 21817},
																				label: "start",
																				expr: &zeroOrOneExpr{
																					pos: position{line: 675, col: 63, offset: 21823},
																					expr: &actionExpr{
																						pos: position{line: 679, col: 17, offset: 21946},
																						run: (*parser).callonUnquotedAttributeValue57,
																						expr: &seqExpr{
																							pos: position{line: 679, col: 17, offset: 21946},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 679, col: 17, offset: 21946},
																									val:        ":",
																									ignoreCase: false,
																									want:       "\":\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 679, col: 21, offset: 21950},
																									label: "start",
																									expr: &choiceExpr{
																										pos: position{line: 679, col: 28, offset: 21957},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 679, col: 28, offset: 21957},
																												run: (*parser).callonUnquotedAttributeValue62,
																												expr: &charClassMatcher{
																													pos:        position{line: 679, col: 28, offset: 21957},
																													val:        "[A-Za-z]",
																													ranges:     []rune{'A', 'Z', 'a', 'z'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																											&actionExpr{
																												pos: position{line: 681, col: 9, offset: 22011},
																												run: (*parser).callonUnquotedAttributeValue64,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 681, col: 9, offset: 22011},
																													expr: &charClassMatcher{
																														pos:        position{line: 681, col: 9, offset: 22011},
																														val:        "[0-9]",
																														ranges:     []rune{'0', '9'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 675, col: 79, offset: 21839},
																				val:        "}",
																				ignoreCase: false,
																				want:       "\"}\"",
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 657, col: 5, offset: 21090},
																	run: (*parser).callonUnquotedAttributeValue68,
																	expr: &seqExpr{
																		pos: position{line: 657, col: 5, offset: 21090},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 657, col: 5, offset: 21090},
																				val:        "\\{",
																				ignoreCase: false,
																				want:       "\"\\\\{\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 657, col: 13, offset: 21098},
																				label: "name",
																				expr: &actionExpr{
																					pos: position{line: 324, col: 18, offset: 10072},
																					run: (*parser).callonUnquotedAttributeValue72,
																					expr: &seqExpr{
																						pos: position{line: 324, col: 18, offset: 10072},
																						exprs: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 324, col: 18, offset: 10072},
																								val:        "[_0-9\\pL]",
																								chars:      []rune{'_'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 324, col: 28, offset: 10082},
																								expr: &charClassMatcher{
																									pos:        position{line: 324, col: 29, offset: 10083},
																									val:        "[-0-9\\pL]",
																									chars:      []rune{'-'},
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 657, col: 32, offset: 21117},
																				val:        "}",
																				ignoreCase: false,
																				want:       "\"}\"",
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 664, col: 5, offset: 21358},
																	run: (*parser).callonUnquotedAttributeValue78,
																	expr: &seqExpr{
																		pos: position{line: 664, col: 5, offset: 21358},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 664, col: 5, offset: 21358},
																				val:        "{",
																				ignoreCase: false,
																				want:       "\"{\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 664, col: 9, offset: 21362},
																				label: "name",
																				expr: &actionExpr{
																					pos: position{line: 324, col: 18, offset: 10072},
																					run: (*parser).callonUnquotedAttributeValue82,
																					expr: &seqExpr{
																						pos: position{line: 324, col: 18, offset: 10072},
																						exprs: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 324, col: 18, offset: 10072},
																								val:        "[_0-9\\pL]",
																								chars:      []rune{'_'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 324, col: 28, offset: 10082},
																								expr: &charClassMatcher{
																									pos:        position{line: 324, col: 29, offset: 10083},
																									val:        "[-0-9\\pL]",
																									chars:      []rune{'-'},
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 664, col: 28, offset: 21381},
																				val:        "}",
																				ignoreCase: false,
																				want:       "\"}\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
										&actionExpr{
											pos: position{line: 2795, col: 5, offset: 91692},
											run: (*parser).callonUnquotedAttributeValue88,
											expr: &litMatcher{
												pos:        position{line: 2795, col: 5, offset: 91692},
												val:        "\"`",
												ignoreCase: false,
												want:       "\"\\\"`\"",
											},
										},
										&actionExpr{
											pos: position{line: 2798, col: 7, offset: 91750},
											run: (*parser).callonUnquotedAttributeValue90,
											expr: &litMatcher{
												pos:        position{line: 2798, col: 7, offset: 91750},
												val:        "`\"",
												ignoreCase: false,
												want:       "\"`\\\"\"",
											},
										},
										&actionExpr{
											pos: position{line: 2801, col: 7, offset: 91808},
											run: (*parser).callonUnquotedAttributeValue92,
											expr: &litMatcher{
												pos:        position{line: 2801, col: 7, offset: 91808},
												val:        "'`",
												ignoreCase: false,
												want:       "\"'`\"",
											},
										},
										&actionExpr{
											pos: position{line: 2804, col: 7, offset: 91864},
											run: (*parser).callonUnquotedAttributeValue94,
											expr: &litMatcher{
												pos:        position{line: 2804, col: 7, offset: 91864},
												val:        "`'",
												ignoreCase: false,
												want:       "\"`'\"",
											},
										},
										&actionExpr{
											pos: position{line: 635, col: 11, offset: 20376},
											run: (*parser).callonUnquotedAttributeValue96,
											expr: &charClassMatcher{
												pos:        position{line: 635, col: 12, offset: 20377},
												val:        "[\\`\"]",
												chars:      []rune{'\'', '`', '"'},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&litMatcher{
											pos:        position{line: 638, col: 11, offset: 20509},
											val:        "{",
											ignoreCase: false,
											want:       "\"{\"",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReference",
			pos:  position{line: 697, col: 1, offset: 22571},
			expr: &choiceExpr{
				pos: position{line: 697, col: 19, offset: 22589},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 699, col: 27, offset: 22665},
						run: (*parser).callonCrossReference2,
						expr: &seqExpr{
							pos: position{line: 699, col: 27, offset: 22665},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 699, col: 27, offset: 22665},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 699, col: 32, offset: 22670},
									label: "id",
									expr: &actionExpr{
										pos: position{line: 3065, col: 7, offset: 99852},
										run: (*parser).callonCrossReference6,
										expr: &oneOrMoreExpr{
											pos: position{line: 3065, col: 7, offset: 99852},
											expr: &charClassMatcher{
												pos:        position{line: 3065, col: 7, offset: 99852},
												val:        "[^[]<>,]",
												chars:      []rune{'[', ']', '<', '>', ','},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 699, col: 40, offset: 22678},
									expr: &actionExpr{
										pos: position{line: 3080, col: 10, offset: 100200},
										run: (*parser).callonCrossReference10,
										expr: &charClassMatcher{
											pos:        position{line: 3080, col: 11, offset: 100201},
											val:        "[ \\t]",
											chars:      []rune{' ', '\t'},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
								&litMatcher{
									pos:        position{line: 699, col: 47, offset: 22685},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&labeledExpr{
									pos:   position{line: 699, col: 51, offset: 22689},
									label: "label",
									expr: &oneOrMoreExpr{
										pos: position{line: 709, col: 24, offset: 23090},
										expr: &choiceExpr{
											pos: position{line: 710, col: 5, offset: 23096},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 710, col: 6, offset: 23097},
													run: (*parser).callonCrossReference16,
													expr: &seqExpr{
														pos: position{line: 710, col: 6, offset: 23097},
														exprs: []interface{}{
															&charClassMatcher{
																pos:        position{line: 710, col: 6, offset: 23097},
																val:        "[0-9\\pL]",
																ranges:     []rune{'0', '9'},
																classes:    []*unicode.RangeTable{rangeTable("L")},
																ignoreCase: false,
																inverted:   false,
															},
															&oneOrMoreExpr{
																pos: position{line: 710, col: 14, offset: 23105},
																expr: &charClassMatcher{
																	pos:        position{line: 710, col: 14, offset: 23105},
																	val:        "[^\\r\\n{<>]",
																	chars:      []rune{'\r', '\n', '{', '<', '>'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 657, col: 5, offset: 21090},
													run: (*parser).callonCrossReference21,
													expr: &seqExpr{
														pos: position{line: 657, col: 5, offset: 21090},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 657, col: 5, offset: 21090},
																val:        "\\{",
																ignoreCase: false,
																want:       "\"\\\\{\"",
															},
															&labeledExpr{
																pos:   position{line: 657, col: 13, offset: 21098},
																label: "name",
																expr: &actionExpr{
																	pos: position{line: 324, col: 18, offset: 10072},
																	run: (*parser).callonCrossReference25,
																	expr: &seqExpr{
																		pos: position{line: 324, col: 18, offset: 10072},
																		exprs: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 324, col: 18, offset: 10072},
																				val:        "[_0-9\\pL]",
																				chars:      []rune{'_'},
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 324, col: 28, offset: 10082},
																				expr: &charClassMatcher{
																					pos:        position{line: 324, col: 29, offset: 10083},
																					val:        "[-0-9\\pL]",
																					chars:      []rune{'-'},
																					ranges:     []rune{'0', '9'},
																					classes:    []*unicode.RangeTable{rangeTable("L")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
															},
															&litMatcher{
																pos:        position{line: 657, col: 32, offset: 21117},
																val:        "}",
																ignoreCase: false,
																want:       "\"}\"",
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 664, col: 5, offset: 21358},
													run: (*parser).callonCrossReference31,
													expr: &seqExpr{
														pos: position{line: 664, col: 5, offset: 21358},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 664, col: 5, offset: 21358},
																val:        "{",
																ignoreCase: false,
																want:       "\"{\"",
															},
															&labeledExpr{
																pos:   position{line: 664, col: 9, offset: 21362},
																label: "name",
																expr: &actionExpr{
																	pos: position{line: 324, col: 18, offset: 10072},
																	run: (*parser).callonCrossReference35,
																	expr: &seqExpr{
																		pos: position{line: 324, col: 18, offset: 10072},
																		exprs: []interface{}{
																			&charClassMatcher{
																				pos:        position{line: 324, col: 18, offset: 10072},
																				val:        "[_0-9\\pL]",
																				chars:      []rune{'_'},
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 324, col: 28, offset: 10082},
																				expr: &charClassMatcher{
																					pos:        position{line: 324, col: 29, offset: 10083},
																					val:        "[-0-9\\pL]",
																					chars:      []rune{'-'},
																					ranges:     []rune{'0', '9'},
																					classes:    []*unicode.RangeTable{rangeTable("L")},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																},
															},
															&litMatcher{
																pos:        position{line: 664, col: 28, offset: 21381},
																val:        "}",
																ignoreCase: false,
																want:       "\"}\"",
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 714, col: 8, offset: 23331},
													run: (*parser).callonCrossReference41,
													expr: &litMatcher{
														pos:        position{line: 714, col: 8, offset: 23331},
														val:        "{",
														ignoreCase: false,
														want:       "\"{\"",
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 699, col: 79, offset: 22717},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 701, col: 9, offset: 22790},
						run: (*parser).callonCrossReference44,
						expr: &seqExpr{
							pos: position{line: 701, col: 9, offset: 22790},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 701, col: 9, offset: 22790},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 701, col: 14, offset: 22795},
									label: "id",
									expr: &actionExpr{
										pos: position{line: 3065, col: 7, offset: 99852},
										run: (*parser).callonCrossReference48,
										expr: &oneOrMoreExpr{
											pos: position{line: 3065, col: 7, offset: 99852},
											expr: &charClassMatcher{
												pos:        position{line: 3065, col: 7, offset: 99852},
												val:        "[^[]<>,]",
												chars:      []rune{'[', ']', '<', '>', ','},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 701, col: 22, offset: 22803},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 697, col: 44, offset: 22614},
						name: "ExternalCrossReference",
					},
				},
			},
		},
		{
			name: "ExternalCrossReference",
			pos:  position{line: 705, col: 1, offset: 22874},
			expr: &actionExpr{
				pos: position{line: 705, col: 27, offset: 22900},
				run: (*parser).callonExternalCrossReference1,
				expr: &seqExpr{
					pos: position{line: 705, col: 27, offset: 22900},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 705, col: 27, offset: 22900},
							val:        "xref:",
							ignoreCase: false,
							want:       "\"xref:\"",
						},
						&labeledExpr{
							pos:   position{line: 705, col: 35, offset: 22908},
							label: "url",
							expr: &actionExpr{
								pos: position{line: 3036, col: 17, offset: 98818},
								run: (*parser).callonExternalCrossReference5,
								expr: &labeledExpr{
									pos:   position{line: 3036, col: 17, offset: 98818},
									label: "path",
									expr: &oneOrMoreExpr{
										pos: position{line: 3036, col: 22, offset: 98823},
										expr: &choiceExpr{
											pos: position{line: 3036, col: 23, offset: 98824},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 3051, col: 5, offset: 99280},
													run: (*parser).callonExternalCrossReference9,
													expr: &seqExpr{
														pos: position{line: 3051, col: 5, offset: 99280},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 3051, col: 5, offset: 99280},
																expr: &litMatcher{
																	pos:        position{line: 3051, col: 6, offset: 99281},
																	val:        "[",
																	ignoreCase: false,
																	want:       "\"[\"",
																},
															},
															&labeledExpr{
																pos:   position{line: 3052, col: 5, offset: 99305},
																label: "elements",
																expr: &oneOrMoreExpr{
																	pos: position{line: 3052, col: 14, offset: 99314},
																	expr: &choiceExpr{
																		pos: position{line: 3053, col: 9, offset: 99324},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 3053, col: 9, offset: 99324},
																				run: (*parser).callonExternalCrossReference16,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 3053, col: 9, offset: 99324},
																					expr: &charClassMatcher{
																						pos:        position{line: 3053, col: 10, offset: 99325},
																						val:        "[^\\r\\n[]�{.,;?!<> ]",
																						chars:      []rune{'\r', '\n', '[', ']', '�', '{', '.', ',', ';', '?', '!', '<', '>', ' '},
																						ignoreCase: false,
																						inverted:   true,
																					},
																				},
																			},
																			&seqExpr{
																				pos: position{line: 3056, col: 11, offset: 99590},
																				exprs: []interface{}{
																					&actionExpr{
																						pos: position{line: 3026, col: 25, offset: 98561},
																						run: (*parser).callonExternalCrossReference20,
																						expr: &charClassMatcher{
																							pos:        position{line: 3026, col: 25, offset: 98561},
																							val:        "[.,;?!]",
																							chars:      []rune{'.', ',', ';', '?', '!'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																					&andExpr{
																						pos: position{line: 3056, col: 32, offset: 99611},
																						expr: &notExpr{
																							pos: position{line: 3056, col: 34, offset: 99613},
																							expr: &choiceExpr{
																								pos: position{line: 3056, col: 36, offset: 99615},
																								alternatives: []interface{}{
																									&notExpr{
																										pos: position{line: 3093, col: 8, offset: 100474},
																										expr: &anyMatcher{
																											line: 3093, col: 9, offset: 100475,
																										},
																									},
																									&actionExpr{
																										pos: position{line: 3080, col: 10, offset: 100200},
																										run: (*parser).callonExternalCrossReference27,
																										expr: &charClassMatcher{
																											pos:        position{line: 3080, col: 11, offset: 100201},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 648, col: 5, offset: 20883},
																				run: (*parser).callonExternalCrossReference29,
																				expr: &seqExpr{
																					pos: position{line: 648, col: 5, offset: 20883},
																					exprs: []interface{}{
																						&andCodeExpr{
																							pos: position{line: 648, col: 5, offset: 20883},
																							run: (*parser).callonExternalCrossReference31,
																						},
																						&labeledExpr{
																							pos:   position{line: 651, col: 5, offset: 20952},
																							label: "element",
																							expr: &choiceExpr{
																								pos: position{line: 651, col: 14, offset: 20961},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 671, col: 25, offset: 21614},
																										run: (*parser).callonExternalCrossReference34,
																										expr: &seqExpr{
																											pos: position{line: 671, col: 25, offset: 21614},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 671, col: 25, offset: 21614},
																													val:        "{counter:",
																													ignoreCase: false,
																													want:       "\"{counter:\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 671, col: 37, offset: 21626},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 324, col: 18, offset: 10072},
																														run: (*parser).callonExternalCrossReference38,
																														expr: &seqExpr{
																															pos: position{line: 324, col: 18, offset: 10072},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 324, col: 18, offset: 10072},
																																	val:        "[_0-9\\pL]",
																																	chars:      []rune{'_'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 324, col: 28, offset: 10082},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 324, col: 29, offset: 10083},
																																		val:        "[-0-9\\pL]",
																																		chars:      []rune{'-'},
																																		ranges:     []rune{'0', '9'},
																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&labeledExpr{
																													pos:   position{line: 671, col: 56, offset: 21645},
																													label: "start",
																													expr: &zeroOrOneExpr{
																														pos: position{line: 671, col: 62, offset: 21651},
																														expr: &actionExpr{
																															pos: position{line: 679, col: 17, offset: 21946},
																															run: (*parser).callonExternalCrossReference45,
																															expr: &seqExpr{
																																pos: position{line: 679, col: 17, offset: 21946},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 679, col: 17, offset: 21946},
																																		val:        ":",
																																		ignoreCase: false,
																																		want:       "\":\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 679, col: 21, offset: 21950},
																																		label: "start",
																																		expr: &choiceExpr{
																																			pos: position{line: 679, col: 28, offset: 21957},
																																			alternatives: []interface{}{
																																				&actionExpr{
																																					pos: position{line: 679, col: 28, offset: 21957},
																																					run: (*parser).callonExternalCrossReference50,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 679, col: 28, offset: 21957},
																																						val:        "[A-Za-z]",
																																						ranges:     []rune{'A', 'Z', 'a', 'z'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 681, col: 9, offset: 22011},
																																					run: (*parser).callonExternalCrossReference52,
																																					expr: &oneOrMoreExpr{
																																						pos: position{line: 681, col: 9, offset: 22011},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 681, col: 9, offset: 22011},
																																							val:        "[0-9]",
																																							ranges:     []rune{'0', '9'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 671, col: 78, offset: 21667},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 675, col: 25, offset: 21785},
																										run: (*parser).callonExternalCrossReference56,
																										expr: &seqExpr{
																											pos: position{line: 675, col: 25, offset: 21785},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 675, col: 25, offset: 21785},
																													val:        "{counter2:",
																													ignoreCase: false,
																													want:       "\"{counter2:\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 675, col: 38, offset: 21798},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 324, col: 18, offset: 10072},
																														run: (*parser).callonExternalCrossReference60,
																														expr: &seqExpr{
																															pos: position{line: 324, col: 18, offset: 10072},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 324, col: 18, offset: 10072},
																																	val:        "[_0-9\\pL]",
																																	chars:      []rune{'_'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 324, col: 28, offset: 10082},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 324, col: 29, offset: 10083},
																																		val:        "[-0-9\\pL]",
																																		chars:      []rune{'-'},
																																		ranges:     []rune{'0', '9'},
																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&labeledExpr{
																													pos:   position{line: 675, col: 57, offset: 21817},
																													label: "start",
																													expr: &zeroOrOneExpr{
																														pos: position{line: 675, col: 63, offset: 21823},
																														expr: &actionExpr{
																															pos: position{line: 679, col: 17, offset: 21946},
																															run: (*parser).callonExternalCrossReference67,
																															expr: &seqExpr{
																																pos: position{line: 679, col: 17, offset: 21946},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 679, col: 17, offset: 21946},
																																		val:        ":",
																																		ignoreCase: false,
																																		want:       "\":\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 679, col: 21, offset: 21950},
																																		label: "start",
																																		expr: &choiceExpr{
																																			pos: position{line: 679, col: 28, offset: 21957},
																																			alternatives: []interface{}{
																																				&actionExpr{
																																					pos: position{line: 679, col: 28, offset: 21957},
																																					run: (*parser).callonExternalCrossReference72,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 679, col: 28, offset: 21957},
																																						val:        "[A-Za-z]",
																																						ranges:     []rune{'A', 'Z', 'a', 'z'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 681, col: 9, offset: 22011},
																																					run: (*parser).callonExternalCrossReference74,
																																					expr: &oneOrMoreExpr{
																																						pos: position{line: 681, col: 9, offset: 22011},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 681, col: 9, offset: 22011},
																																							val:        "[0-9]",
																																							ranges:     []rune{'0', '9'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 675, col: 79, offset: 21839},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 657, col: 5, offset: 21090},
																										run: (*parser).callonExternalCrossReference78,
																										expr: &seqExpr{
																											pos: position{line: 657, col: 5, offset: 21090},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 657, col: 5, offset: 21090},
																													val:        "\\{",
																													ignoreCase: false,
																													want:       "\"\\\\{\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 657, col: 13, offset: 21098},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 324, col: 18, offset: 10072},
																														run: (*parser).callonExternalCrossReference82,
																														expr: &seqExpr{
																															pos: position{line: 324, col: 18, offset: 10072},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 324, col: 18, offset: 10072},
																																	val:        "[_0-9\\pL]",
																																	chars:      []rune{'_'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 324, col: 28, offset: 10082},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 324, col: 29, offset: 10083},
																																		val:        "[-0-9\\pL]",
																																		chars:      []rune{'-'},
																																		ranges:     []rune{'0', '9'},
																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 657, col: 32, offset: 21117},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 664, col: 5, offset: 21358},
																										run: (*parser).callonExternalCrossReference88,
																										expr: &seqExpr{
																											pos: position{line: 664, col: 5, offset: 21358},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 664, col: 5, offset: 21358},
																													val:        "{",
																													ignoreCase: false,
																													want:       "\"{\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 664, col: 9, offset: 21362},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 324, col: 18, offset: 10072},
																														run: (*parser).callonExternalCrossReference92,
																														expr: &seqExpr{
																															pos: position{line: 324, col: 18, offset: 10072},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 324, col: 18, offset: 10072},
																																	val:        "[_0-9\\pL]",
																																	chars:      []rune{'_'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 324, col: 28, offset: 10082},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 324, col: 29, offset: 10083},
																																		val:        "[-0-9\\pL]",
																																		chars:      []rune{'-'},
																																		ranges:     []rune{'0', '9'},
																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 664, col: 28, offset: 21381},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 2753, col: 5, offset: 90225},
																				run: (*parser).callonExternalCrossReference98,
																				expr: &seqExpr{
																					pos: position{line: 2753, col: 5, offset: 90225},
																					exprs: []interface{}{
																						&andCodeExpr{
																							pos: position{line: 2753, col: 5, offset: 90225},
																							run: (*parser).callonExternalCrossReference100,
																						},
																						&labeledExpr{
																							pos:   position{line: 2756, col: 5, offset: 90301},
																							label: "element",
																							expr: &choiceExpr{
																								pos: position{line: 2758, col: 9, offset: 90399},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2758, col: 9, offset: 90399},
																										run: (*parser).callonExternalCrossReference103,
																										expr: &choiceExpr{
																											pos: position{line: 699, col: 27, offset: 22665},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 699, col: 27, offset: 22665},
																													run: (*parser).callonExternalCrossReference105,
																													expr: &seqExpr{
																														pos: position{line: 699, col: 27, offset: 22665},
																														exprs: []interface{}{
																															&litMatcher{
																																pos:        position{line: 699, col: 27, offset: 22665},
																																val:        "<<",
																																ignoreCase: false,
																																want:       "\"<<\"",
																															},
																															&labeledExpr{
																																pos:   position{line: 699, col: 32, offset: 22670},
																																label: "id",
																																expr: &actionExpr{
																																	pos: position{line: 3065, col: 7, offset: 99852},
																																	run: (*parser).callonExternalCrossReference109,
																																	expr: &oneOrMoreExpr{
																																		pos: position{line: 3065, col: 7, offset: 99852},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 3065, col: 7, offset: 99852},
																																			val:        "[^[]<>,]",
																																			chars:      []rune{'[', ']', '<', '>', ','},
																																			ignoreCase: false,
																																			inverted:   true,
																																		},
																																	},
																																},
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 699, col: 40, offset: 22678},
																																expr: &actionExpr{
																																	pos: position{line: 3080, col: 10, offset: 100200},
																																	run: (*parser).callonExternalCrossReference113,
																																	expr: &charClassMatcher{
																																		pos:        position{line: 3080, col: 11, offset: 100201},
																																		val:        "[ \\t]",
																																		chars:      []rune{' ', '\t'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 699, col: 47, offset: 22685},
																																val:        ",",
																																ignoreCase: false,
																																want:       "\",\"",
																															},
																															&labeledExpr{
																																pos:   position{line: 699, col: 51, offset: 22689},
																																label: "label",
																																expr: &oneOrMoreExpr{
																																	pos: position{line: 709, col: 24, offset: 23090},
																																	expr: &choiceExpr{
																																		pos: position{line: 710, col: 5, offset: 23096},
																																		alternatives: []interface{}{
																																			&actionExpr{
																																				pos: position{line: 710, col: 6, offset: 23097},
																																				run: (*parser).callonExternalCrossReference119,
																																				expr: &seqExpr{
																																					pos: position{line: 710, col: 6, offset: 23097},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 710, col: 6, offset: 23097},
																																							val:        "[0-9\\pL]",
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&oneOrMoreExpr{
																																							pos: position{line: 710, col: 14, offset: 23105},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 710, col: 14, offset: 23105},
																																								val:        "[^\\r\\n{<>]",
																																								chars:      []rune{'\r', '\n', '{', '<', '>'},
																																								ignoreCase: false,
																																								inverted:   true,
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&actionExpr{
																																				pos: position{line: 657, col: 5, offset: 21090},
																																				run: (*parser).callonExternalCrossReference124,
																																				expr: &seqExpr{
																																					pos: position{line: 657, col: 5, offset: 21090},
																																					exprs: []interface{}{
																																						&litMatcher{
																																							pos:        position{line: 657, col: 5, offset: 21090},
																																							val:        "\\{",
																																							ignoreCase: false,
																																							want:       "\"\\\\{\"",
																																						},
																																						&labeledExpr{
																																							pos:   position{line: 657, col: 13, offset: 21098},
																																							label: "name",
																																							expr: &actionExpr{
																																								pos: position{line: 324, col: 18, offset: 10072},
																																								run: (*parser).callonExternalCrossReference128,
																																								expr: &seqExpr{
																																									pos: position{line: 324, col: 18, offset: 10072},
																																									exprs: []interface{}{
																																										&charClassMatcher{
																																											pos:        position{line: 324, col: 18, offset: 10072},
																																											val:        "[_0-9\\pL]",
																																											chars:      []rune{'_'},
																																											ranges:     []rune{'0', '9'},
																																											classes:    []*unicode.RangeTable{rangeTable("L")},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&zeroOrMoreExpr{
																																											pos: position{line: 324, col: 28, offset: 10082},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 324, col: 29, offset: 10083},
																																												val:        "[-0-9\\pL]",
																																												chars:      []rune{'-'},
																																												ranges:     []rune{'0', '9'},
																																												classes:    []*unicode.RangeTable{rangeTable("L")},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																						&litMatcher{
																																							pos:        position{line: 657, col: 32, offset: 21117},
																																							val:        "}",
																																							ignoreCase: false,
																																							want:       "\"}\"",
																																						},
																																					},
																																				},
																																			},
																																			&actionExpr{
																																				pos: position{line: 664, col: 5, offset: 21358},
																																				run: (*parser).callonExternalCrossReference134,
																																				expr: &seqExpr{
																																					pos: position{line: 664, col: 5, offset: 21358},
																																					exprs: []interface{}{
																																						&litMatcher{
																																							pos:        position{line: 664, col: 5, offset: 21358},
																																							val:        "{",
																																							ignoreCase: false,
																																							want:       "\"{\"",
																																						},
																																						&labeledExpr{
																																							pos:   position{line: 664, col: 9, offset: 21362},
																																							label: "name",
																																							expr: &actionExpr{
																																								pos: position{line: 324, col: 18, offset: 10072},
																																								run: (*parser).callonExternalCrossReference138,
																																								expr: &seqExpr{
																																									pos: position{line: 324, col: 18, offset: 10072},
																																									exprs: []interface{}{
																																										&charClassMatcher{
																																											pos:        position{line: 324, col: 18, offset: 10072},
																																											val:        "[_0-9\\pL]",
																																											chars:      []rune{'_'},
																																											ranges:     []rune{'0', '9'},
																																											classes:    []*unicode.RangeTable{rangeTable("L")},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&zeroOrMoreExpr{
																																											pos: position{line: 324, col: 28, offset: 10082},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 324, col: 29, offset: 10083},
																																												val:        "[-0-9\\pL]",
																																												chars:      []rune{'-'},
																																												ranges:     []rune{'0', '9'},
																																												classes:    []*unicode.RangeTable{rangeTable("L")},
																																												ignoreCase: false,
																																												inverted:   false,
																																											},
																																										},
																																									},
																																								},
																																							},
																																						},
																																						&litMatcher{
																																							pos:        position{line: 664, col: 28, offset: 21381},
																																							val:        "}",
																																							ignoreCase: false,
																																							want:       "\"}\"",
																																						},
																																					},
																																				},
																																			},
																																			&actionExpr{
																																				pos: position{line: 714, col: 8, offset: 23331},
																																				run: (*parser).callonExternalCrossReference144,
																																				expr: &litMatcher{
																																					pos:        position{line: 714, col: 8, offset: 23331},
																																					val:        "{",
																																					ignoreCase: false,
																																					want:       "\"{\"",
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 699, col: 79, offset: 22717},
																																val:        ">>",
																																ignoreCase: false,
																																want:       "\">>\"",
																															},
																														},
																													},
																												},
																												&actionExpr{
																													pos: position{line: 701, col: 9, offset: 22790},
																													run: (*parser).callonExternalCrossReference147,
																													expr: &seqExpr{
																														pos: position{line: 701, col: 9, offset: 22790},
																														exprs: []interface{}{
																															&litMatcher{
																																pos:        position{line: 701, col: 9, offset: 22790},
																																val:        "<<",
																																ignoreCase: false,
																																want:       "\"<<\"",
																															},
																															&labeledExpr{
																																pos:   position{line: 701, col: 14, offset: 22795},
																																label: "id",
																																expr: &actionExpr{
																																	pos: position{line: 3065, col: 7, offset: 99852},
																																	run: (*parser).callonExternalCrossReference151,
																																	expr: &oneOrMoreExpr{
																																		pos: position{line: 3065, col: 7, offset: 99852},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 3065, col: 7, offset: 99852},
																																			val:        "[^[]<>,]",
																																			chars:      []rune{'[', ']', '<', '>', ','},
																																			ignoreCase: false,
																																			inverted:   true,
																																		},
																																	},
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 701, col: 22, offset: 22803},
																																val:        ">>",
																																ignoreCase: false,
																																want:       "\">>\"",
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 2761, col: 11, offset: 90503},
																										run: (*parser).callonExternalCrossReference155,
																										expr: &charClassMatcher{
																											pos:        position{line: 2761, col: 12, offset: 90504},
																											val:        "[<>&]",
																											chars:      []rune{'<', '>', '&'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 3059, col: 11, offset: 99696},
																				run: (*parser).callonExternalCrossReference157,
																				expr: &litMatcher{
																					pos:        position{line: 3059, col: 11, offset: 99696},
																					val:        "{",
																					ignoreCase: false,
																					want:       "\"{\"",
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&actionExpr{
													pos: position{line: 1219, col: 23, offset: 38141},
													run: (*parser).callonExternalCrossReference159,
													expr: &seqExpr{
														pos: position{line: 1219, col: 23, offset: 38141},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 1217, col: 32, offset: 38109},
																val:        "�",
																ignoreCase: false,
																want:       "\"�\"",
															},
															&labeledExpr{
																pos:   position{line: 1219, col: 51, offset: 38169},
																label: "ref",
																expr: &actionExpr{
																	pos: position{line: 1219, col: 56, offset: 38174},
																	run: (*parser).callonExternalCrossReference163,
																	expr: &oneOrMoreExpr{
																		pos: position{line: 1219, col: 56, offset: 38174},
																		expr: &charClassMatcher{
																			pos:        position{line: 1219, col: 56, offset: 38174},
																			val:        "[0-9]",
																			ranges:     []rune{'0', '9'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
															&litMatcher{
																pos:        position{line: 1217, col: 32, offset: 38109},
																val:        "�",
																ignoreCase: false,
																want:       "\"�\"",
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 705, col: 54, offset: 22927},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 705, col: 66, offset: 22939},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "MarkdownQuoteAttribution",
			pos:  position{line: 997, col: 1, offset: 31458},
			expr: &actionExpr{
				pos: position{line: 998, col: 5, offset: 31491},
				run: (*parser).callonMarkdownQuoteAttribution1,
				expr: &seqExpr{
					pos: position{line: 998, col: 5, offset: 31491},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 998, col: 5, offset: 31491},
							val:        "-- ",
							ignoreCase: false,
							want:       "\"-- \"",
						},
						&labeledExpr{
							pos:   position{line: 998, col: 11, offset: 31497},
							label: "author",
							expr: &actionExpr{
								pos: position{line: 998, col: 19, offset: 31505},
								run: (*parser).callonMarkdownQuoteAttribution5,
								expr: &oneOrMoreExpr{
									pos: position{line: 998, col: 20, offset: 31506},
									expr: &charClassMatcher{
										pos:        position{line: 998, col: 20, offset: 31506},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 3096, col: 8, offset: 100524},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 3089, col: 12, offset: 100384},
									run: (*parser).callonMarkdownQuoteAttribution9,
									expr: &choiceExpr{
										pos: position{line: 3089, col: 13, offset: 100385},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 3089, col: 13, offset: 100385},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
											&litMatcher{
												pos:        position{line: 3089, col: 20, offset: 100392},
												val:        "\r\n",
												ignoreCase: false,
												want:       "\"\\r\\n\"",
											},
											&litMatcher{
												pos:        position{line: 3089, col: 29, offset: 100401},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 3093, col: 8, offset: 100474},
									expr: &anyMatcher{
										line: 3093, col: 9, offset: 100475,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentHeader",
			pos:  position{line: 1091, col: 1, offset: 33977},
			expr: &actionExpr{
				pos: position{line: 1092, col: 5, offset: 34000},
				run: (*parser).callonDocumentHeader1,
				expr: &seqExpr{
					pos: position{line: 1092, col: 5, offset: 34000},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 1092, col: 5, offset: 34000},
							run: (*parser).callonDocumentHeader3,
						},
						&labeledExpr{
							pos:   position{line: 1095, col: 5, offset: 34061},
							label: "extraAttrs",
							expr: &ruleRefExpr{
								pos:  position{line: 1095, col: 17, offset: 34073},
								name: "DocumentHeaderAttributes",
							},
						},
						&labeledExpr{
							pos:   position{line: 1096, col: 5, offset: 34103},
							label: "info",
							expr: &zeroOrOneExpr{
								pos: position{line: 1096, col: 10, offset: 34108},
								expr: &actionExpr{
									pos: position{line: 1119, col: 5, offset: 34961},
									run: (*parser).callonDocumentHeader8,
									expr: &seqExpr{
										pos: position{line: 1119, col: 5, offset: 34961},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 1119, col: 5, offset: 34961},
												label: "title",
												expr: &actionExpr{
													pos: position{line: 1127, col: 5, offset: 35242},
													run: (*parser).callonDocumentHeader11,
													expr: &seqExpr{
														pos: position{line: 1127, col: 5, offset: 35242},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 1127, col: 5, offset: 35242},
																val:        "=",
																ignoreCase: false,
																want:       "\"=\"",
															},
															&actionExpr{
																pos: position{line: 3084, col: 11, offset: 100267},
																run: (*parser).callonDocumentHeader14,
																expr: &oneOrMoreExpr{
																	pos: position{line: 3084, col: 11, offset: 100267},
																	expr: &charClassMatcher{
																		pos:        position{line: 3084, col: 12, offset: 100268},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
															&labeledExpr{
																pos:   position{line: 1127, col: 16, offset: 35253},
																label: "title",
																expr: &actionExpr{
																	pos: position{line: 2639, col: 17, offset: 86918},
																	run: (*parser).callonDocumentHeader18,
																	expr: &oneOrMoreExpr{
																		pos: position{line: 2639, col: 17, offset: 86918},
																		expr: &charClassMatcher{
																			pos:        position{line: 2639, col: 17, offset: 86918},
																			val:        "[^\\r\\n]",
																			chars:      []rune{'\r', '\n'},
																			ignoreCase: false,
																			inverted:   true,
																		},
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 3096, col: 8, offset: 100524},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 3089, col: 12, offset: 100384},
																		run: (*parser).callonDocumentHeader22,
																		expr: &choiceExpr{
																			pos: position{line: 3089, col: 13, offset: 100385},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 3089, col: 13, offset: 100385},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 3089, col: 20, offset: 100392},
																					val:        "\r\n",
																					ignoreCase: false,
																					want:       "\"\\r\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 3089, col: 29, offset: 100401},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 3093, col: 8, offset: 100474},
																		expr: &anyMatcher{
																			line: 3093, col: 9, offset: 100475,
																		},
																	},
																},
															},
														},
													},
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 1120, col: 5, offset: 34987},
												expr: &choiceExpr{
													pos: position{line: 1120, col: 6, offset: 34988},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2770, col: 22, offset: 90863},
															run: (*parser).callonDocumentHeader31,
															expr: &seqExpr{
																pos: position{line: 2770, col: 22, offset: 90863},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2775, col: 31, offset: 91084},
																		val:        "//",
																		ignoreCase: false,
																		want:       "\"//\"",
																	},
																	&notExpr{
																		pos: position{line: 2775, col: 36, offset: 91089},
																		expr: &litMatcher{
																			pos:        position{line: 2775, col: 37, offset: 91090},
																			val:        "//",
																			ignoreCase: false,
																			want:       "\"//\"",
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 2770, col: 49, offset: 90890},
																		label: "content",
																		expr: &actionExpr{
																			pos: position{line: 2777, col: 29, offset: 91125},
																			run: (*parser).callonDocumentHeader37,
																			expr: &zeroOrMoreExpr{
																				pos: position{line: 2777, col: 29, offset: 91125},
																				expr: &charClassMatcher{
																					pos:        position{line: 2777, col: 29, offset: 91125},
																					val:        "[^\\r\\n]",
																					chars:      []rune{'\r', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 3096, col: 8, offset: 100524},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 3089, col: 12, offset: 100384},
																				run: (*parser).callonDocumentHeader41,
																				expr: &choiceExpr{
																					pos: position{line: 3089, col: 13, offset: 100385},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 3089, col: 13, offset: 100385},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 3089, col: 20, offset: 100392},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 3089, col: 29, offset: 100401},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3093, col: 8, offset: 100474},
																				expr: &anyMatcher{
																					line: 3093, col: 9, offset: 100475,
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 827, col: 5, offset: 26970},
															run: (*parser).callonDocumentHeader48,
															expr: &seqExpr{
																pos: position{line: 827, col: 5, offset: 26970},
																exprs: []interface{}{
																	&actionExpr{
																		pos: position{line: 752, col: 5, offset: 24389},
																		run: (*parser).callonDocumentHeader50,
																		expr: &seqExpr{
																			pos: position{line: 752, col: 5, offset: 24389},
																			exprs: []interface{}{
																				&labeledExpr{
																					pos:   position{line: 752, col: 5, offset: 24389},
																					label: "delimiter",
																					expr: &actionExpr{
																						pos: position{line: 752, col: 16, offset: 24400},
																						run: (*parser).callonDocumentHeader53,
																						expr: &seqExpr{
																							pos: position{line: 752, col: 16, offset: 24400},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 752, col: 16, offset: 24400},
																									val:        "////",
																									ignoreCase: false,
																									want:       "\"////\"",
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 752, col: 23, offset: 24407},
																									expr: &litMatcher{
																										pos:        position{line: 752, col: 23, offset: 24407},
																										val:        "/",
																										ignoreCase: false,
																										want:       "\"/\"",
																									},
																								},
																							},
																						},
																					},
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 754, col: 8, offset: 24491},
																					expr: &actionExpr{
																						pos: position{line: 3080, col: 10, offset: 100200},
																						run: (*parser).callonDocumentHeader59,
																						expr: &charClassMatcher{
																							pos:        position{line: 3080, col: 11, offset: 100201},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 3096, col: 8, offset: 100524},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 3089, col: 12, offset: 100384},
																							run: (*parser).callonDocumentHeader62,
																							expr: &choiceExpr{
																								pos: position{line: 3089, col: 13, offset: 100385},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 3089, col: 13, offset: 100385},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 3089, col: 20, offset: 100392},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 3089, col: 29, offset: 100401},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 3093, col: 8, offset: 100474},
																							expr: &anyMatcher{
																								line: 3093, col: 9, offset: 100475,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 828, col: 5, offset: 27001},
																		label: "content",
																		expr: &zeroOrMoreExpr{
																			pos: position{line: 838, col: 5, offset: 27287},
																			expr: &actionExpr{
																				pos: position{line: 838, col: 6, offset: 27288},
																				run: (*parser).callonDocumentHeader71,
																				expr: &seqExpr{
																					pos: position{line: 838, col: 6, offset: 27288},
																					exprs: []interface{}{
																						&notExpr{
																							pos: position{line: 838, col: 6, offset: 27288},
																							expr: &choiceExpr{
																								pos: position{line: 835, col: 29, offset: 27230},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 752, col: 5, offset: 24389},
																										run: (*parser).callonDocumentHeader75,
																										expr: &seqExpr{
																											pos: position{line: 752, col: 5, offset: 24389},
																											exprs: []interface{}{
																												&labeledExpr{
																													pos:   position{line: 752, col: 5, offset: 24389},
																													label: "delimiter",
																													expr: &actionExpr{
																														pos: position{line: 752, col: 16, offset: 24400},
																														run: (*parser).callonDocumentHeader78,
																														expr: &seqExpr{
																															pos: position{line: 752, col: 16, offset: 24400},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 752, col: 16, offset: 24400},
																																	val:        "////",
																																	ignoreCase: false,
																																	want:       "\"////\"",
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 752, col: 23, offset: 24407},
																																	expr: &litMatcher{
																																		pos:        position{line: 752, col: 23, offset: 24407},
																																		val:        "/",
																																		ignoreCase: false,
																																		want:       "\"/\"",
																																	},
																																},
																															},
																														},
																													},
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 754, col: 8, offset: 24491},
																													expr: &actionExpr{
																														pos: position{line: 3080, col: 10, offset: 100200},
																														run: (*parser).callonDocumentHeader84,
																														expr: &charClassMatcher{
																															pos:        position{line: 3080, col: 11, offset: 100201},
																															val:        "[ \\t]",
																															chars:      []rune{' ', '\t'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																												&choiceExpr{
																													pos: position{line: 3096, col: 8, offset: 100524},
																													alternatives: []interface{}{
																														&actionExpr{
																															pos: position{line: 3089, col: 12, offset: 100384},
																															run: (*parser).callonDocumentHeader87,
																															expr: &choiceExpr{
																																pos: position{line: 3089, col: 13, offset: 100385},
																																alternatives: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 3089, col: 13, offset: 100385},
																																		val:        "\n",
																																		ignoreCase: false,
																																		want:       "\"\\n\"",
																																	},
																																	&litMatcher{
																																		pos:        position{line: 3089, col: 20, offset: 100392},
																																		val:        "\r\n",
																																		ignoreCase: false,
																																		want:       "\"\\r\\n\"",
																																	},
																																	&litMatcher{
																																		pos:        position{line: 3089, col: 29, offset: 100401},
																																		val:        "\r",
																																		ignoreCase: false,
																																		want:       "\"\\r\"",
																																	},
																																},
																															},
																														},
																														&notExpr{
																															pos: position{line: 3093, col: 8, offset: 100474},
																															expr: &anyMatcher{
																																line: 3093, col: 9, offset: 100475,
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 3093, col: 8, offset: 100474},
																										expr: &anyMatcher{
																											line: 3093, col: 9, offset: 100475,
																										},
																									},
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 839, col: 5, offset: 27318},
																							label: "line",
																							expr: &actionExpr{
																								pos: position{line: 816, col: 5, offset: 26665},
																								run: (*parser).callonDocumentHeader97,
																								expr: &seqExpr{
																									pos: position{line: 816, col: 5, offset: 26665},
																									exprs: []interface{}{
																										&notExpr{
																											pos: position{line: 816, col: 5, offset: 26665},
																											expr: &notExpr{
																												pos: position{line: 3093, col: 8, offset: 100474},
																												expr: &anyMatcher{
																													line: 3093, col: 9, offset: 100475,
																												},
																											},
																										},
																										&labeledExpr{
																											pos:   position{line: 817, col: 5, offset: 26738},
																											label: "content",
																											expr: &actionExpr{
																												pos: position{line: 817, col: 14, offset: 26747},
																												run: (*parser).callonDocumentHeader103,
																												expr: &zeroOrMoreExpr{
																													pos: position{line: 817, col: 14, offset: 26747},
																													expr: &charClassMatcher{
																														pos:        position{line: 817, col: 14, offset: 26747},
																														val:        "[^\\r\\n]",
																														chars:      []rune{'\r', '\n'},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 3096, col: 8, offset: 100524},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 3089, col: 12, offset: 100384},
																													run: (*parser).callonDocumentHeader107,
																													expr: &choiceExpr{
																														pos: position{line: 3089, col: 13, offset: 100385},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 3089, col: 13, offset: 100385},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 3089, col: 20, offset: 100392},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 3089, col: 29, offset: 100401},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 3093, col: 8, offset: 100474},
																													expr: &anyMatcher{
																														line: 3093, col: 9, offset: 100475,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&zeroOrOneExpr{
																		pos: position{line: 829, col: 5, offset: 27035},
																		expr: &choiceExpr{
																			pos: position{line: 835, col: 29, offset: 27230},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 752, col: 5, offset: 24389},
																					run: (*parser).callonDocumentHeader116,
																					expr: &seqExpr{
																						pos: position{line: 752, col: 5, offset: 24389},
																						exprs: []interface{}{
																							&labeledExpr{
																								pos:   position{line: 752, col: 5, offset: 24389},
																								label: "delimiter",
																								expr: &actionExpr{
																									pos: position{line: 752, col: 16, offset: 24400},
																									run: (*parser).callonDocumentHeader119,
																									expr: &seqExpr{
																										pos: position{line: 752, col: 16, offset: 24400},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 752, col: 16, offset: 24400},
																												val:        "////",
																												ignoreCase: false,
																												want:       "\"////\"",
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 752, col: 23, offset: 24407},
																												expr: &litMatcher{
																													pos:        position{line: 752, col: 23, offset: 24407},
																													val:        "/",
																													ignoreCase: false,
																													want:       "\"/\"",
																												},
																											},
																										},
																									},
																								},
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 754, col: 8, offset: 24491},
																								expr: &actionExpr{
																									pos: position{line: 3080, col: 10, offset: 100200},
																									run: (*parser).callonDocumentHeader125,
																									expr: &charClassMatcher{
																										pos:        position{line: 3080, col: 11, offset: 100201},
																										val:        "[ \\t]",
																										chars:      []rune{' ', '\t'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 3096, col: 8, offset: 100524},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 3089, col: 12, offset: 100384},
																										run: (*parser).callonDocumentHeader128,
																										expr: &choiceExpr{
																											pos: position{line: 3089, col: 13, offset: 100385},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 3089, col: 13, offset: 100385},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 3089, col: 20, offset: 100392},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 3089, col: 29, offset: 100401},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 3093, col: 8, offset: 100474},
																										expr: &anyMatcher{
																											line: 3093, col: 9, offset: 100475,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 3093, col: 8, offset: 100474},
																					expr: &anyMatcher{
																						line: 3093, col: 9, offset: 100475,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 1121, col: 5, offset: 35062},
												label: "authorsAndRevision",
												expr: &zeroOrOneExpr{
													pos: position{line: 1121, col: 24, offset: 35081},
													expr: &actionExpr{
														pos: position{line: 1132, col: 5, offset: 35348},
														run: (*parser).callonDocumentHeader139,
														expr: &seqExpr{
															pos: position{line: 1132, col: 5, offset: 35348},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1132, col: 5, offset: 35348},
																	label: "authors",
																	expr: &actionExpr{
																		pos: position{line: 1138, col: 20, offset: 35604},
																		run: (*parser).callonDocumentHeader142,
																		expr: &seqExpr{
																			pos: position{line: 1138, col: 20, offset: 35604},
																			exprs: []interface{}{
																				&zeroOrMoreExpr{
																					pos: position{line: 1138, col: 20, offset: 35604},
																					expr: &actionExpr{
																						pos: position{line: 3080, col: 10, offset: 100200},
																						run: (*parser).callonDocumentHeader145,
																						expr: &charClassMatcher{
																							pos:        position{line: 3080, col: 11, offset: 100201},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 1138, col: 27, offset: 35611},
																					label: "authors",
																					expr: &choiceExpr{
																						pos: position{line: 1138, col: 36, offset: 35620},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 1142, col: 30, offset: 35740},
																								run: (*parser).callonDocumentHeader149,
																								expr: &seqExpr{
																									pos: position{line: 1142, col: 30, offset: 35740},
																									exprs: []interface{}{
																										&notExpr{
																											pos: position{line: 1142, col: 30, offset: 35740},
																											expr: &litMatcher{
																												pos:        position{line: 1142, col: 31, offset: 35741},
																												val:        ":",
																												ignoreCase: false,
																												want:       "\":\"",
																											},
																										},
																										&labeledExpr{
																											pos:   position{line: 1142, col: 35, offset: 35745},
																											label: "authors",
																											expr: &oneOrMoreExpr{
																												pos: position{line: 1142, col: 44, offset: 35754},
																												expr: &actionExpr{
																													pos: position{line: 1151, col: 5, offset: 35986},
																													run: (*parser).callonDocumentHeader155,
																													expr: &seqExpr{
																														pos: position{line: 1151, col: 5, offset: 35986},
																														exprs: []interface{}{
																															&labeledExpr{
																																pos:   position{line: 1151, col: 5, offset: 35986},
																																label: "fullName",
																																expr: &zeroOrOneExpr{
																																	pos: position{line: 1151, col: 14, offset: 35995},
																																	expr: &actionExpr{
																																		pos: position{line: 1162, col: 5, offset: 36375},
																																		run: (*parser).callonDocumentHeader159,
																																		expr: &seqExpr{
																																			pos: position{line: 1162, col: 5, offset: 36375},
																																			exprs: []interface{}{
																																				&labeledExpr{
																																					pos:   position{line: 1162, col: 5, offset: 36375},
																																					label: "part1",
																																					expr: &actionExpr{
																																						pos: position{line: 1162, col: 12, offset: 36382},
																																						run: (*parser).callonDocumentHeader162,
																																						expr: &oneOrMoreExpr{
																																							pos: position{line: 1162, col: 12, offset: 36382},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 1162, col: 12, offset: 36382},
																																								val:        "[^<;\\r\\n ]",
																																								chars:      []rune{'<', ';', '\r', '\n', ' '},
																																								ignoreCase: false,
																																								inverted:   true,
																																							},
																																						},
																																					},
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 1165, col: 5, offset: 36462},
																																					expr: &actionExpr{
																																						pos: position{line: 3080, col: 10, offset: 100200},
																																						run: (*parser).callonDocumentHeader166,
																																						expr: &charClassMatcher{
																																							pos:        position{line: 3080, col: 11, offset: 100201},
																																							val:        "[ \\t]",
																																							chars:      []rune{' ', '\t'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																				&labeledExpr{
																																					pos:   position{line: 1166, col: 5, offset: 36473},
																																					label: "part2",
																																					expr: &zeroOrOneExpr{
																																						pos: position{line: 1166, col: 11, offset: 36479},
																																						expr: &actionExpr{
																																							pos: position{line: 1166, col: 12, offset: 36480},
																																							run: (*parser).callonDocumentHeader170,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 1166, col: 12, offset: 36480},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 1166, col: 12, offset: 36480},
																																									val:        "[^<;\\r\\n ]",
																																									chars:      []rune{'<', ';', '\r', '\n', ' '},
																																									ignoreCase: false,
																																									inverted:   true,
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 1169, col: 5, offset: 36561},
																																					expr: &actionExpr{
																																						pos: position{line: 3080, col: 10, offset: 100200},
																																						run: (*parser).callonDocumentHeader174,
																																						expr: &charClassMatcher{
																																							pos:        position{line: 3080, col: 11, offset: 100201},
																																							val:        "[ \\t]",
																																							chars:      []rune{' ', '\t'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																				&labeledExpr{
																																					pos:   position{line: 1170, col: 5, offset: 36572},
																																					label: "part3",
																																					expr: &zeroOrOneExpr{
																																						pos: position{line: 1170, col: 11, offset: 36578},
																																						expr: &actionExpr{
																																							pos: position{line: 1170, col: 12, offset: 36579},
																																							run: (*parser).callonDocumentHeader178,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 1170, col: 12, offset: 36579},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 1170, col: 12, offset: 36579},
																																									val:        "[^<;\\r\\n]",
																																									chars:      []rune{'<', ';', '\r', '\n'},
																																									ignoreCase: false,
																																									inverted:   true,
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 1173, col: 5, offset: 36658},
																																					expr: &actionExpr{
																																						pos: position{line: 3080, col: 10, offset: 100200},
																																						run: (*parser).callonDocumentHeader182,
																																						expr: &charClassMatcher{
																																							pos:        position{line: 3080, col: 11, offset: 100201},
																																							val:        "[ \\t]",
																																							chars:      []rune{' ', '\t'},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																															&labeledExpr{
																																pos:   position{line: 1151, col: 40, offset: 36021},
																																label: "email",
																																expr: &zeroOrOneExpr{
																																	pos: position{line: 1151, col: 46, offset: 36027},
																																	expr: &actionExpr{
																																		pos: position{line: 1179, col: 5, offset: 36780},
																																		run: (*parser).callonDocumentHeader186,
																																		expr: &seqExpr{
																																			pos: position{line: 1179, col: 5, offset: 36780},
																																			exprs: []interface{}{
																																				&notExpr{
																																					pos: position{line: 1179, col: 5, offset: 36780},
																																					expr: &notExpr{
																																						pos: position{line: 3093, col: 8, offset: 100474},
																																						expr: &anyMatcher{
																																							line: 3093, col: 9, offset: 100475,
																																						},
																																					},
																																				},
																																				&litMatcher{
																																					pos:        position{line: 1180, col: 5, offset: 36790},
																																					val:        "<",
																																					ignoreCase: false,
																																					want:       "\"<\"",
																																				},
																																				&labeledExpr{
																																					pos:   position{line: 1181, col: 5, offset: 36799},
																																					label: "email",
																																					expr: &actionExpr{
																																						pos: position{line: 1181, col: 12, offset: 36806},
																																						run: (*parser).callonDocumentHeader193,
																																						expr: &oneOrMoreExpr{
																																							pos: position{line: 1181, col: 13, offset: 36807},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 1181, col: 13, offset: 36807},
																																								val:        "[^>\\r\\n]",
																																								chars:      []rune{'>', '\r', '\n'},
																																								ignoreCase: false,
																																								inverted:   true,
																																							},
																																						},
																																					},
																																				},
																																				&litMatcher{
																																					pos:        position{line: 1184, col: 5, offset: 36867},
																																					val:        ">",
																																					ignoreCase: false,
																																					want:       "\">\"",
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 1151, col: 69, offset: 36050},
																																expr: &actionExpr{
																																	pos: position{line: 3080, col: 10, offset: 100200},
																																	run: (*parser).callonDocumentHeader198,
																																	expr: &charClassMatcher{
																																		pos:        position{line: 3080, col: 11, offset: 100201},
																																		val:        "[ \\t]",
																																		chars:      []rune{' ', '\t'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																															&zeroOrOneExpr{
																																pos: position{line: 1151, col: 76, offset: 36057},
																																expr: &litMatcher{
																																	pos:        position{line: 1151, col: 76, offset: 36057},
																																	val:        ";",
																																	ignoreCase: false,
																																	want:       "\";\"",
																																},
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 1151, col: 81, offset: 36062},
																																expr: &actionExpr{
																																	pos: position{line: 3080, col: 10, offset: 100200},
																																	run: (*parser).callonDocumentHeader203,
																																	expr: &charClassMatcher{
																																		pos:        position{line: 3080, col: 11, offset: 100201},
																																		val:        "[ \\t]",
																																		chars:      []rune{' ', '\t'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																															&andCodeExpr{
																																pos: position{line: 1152, col: 5, offset: 36074},
																																run: (*parser).callonDocumentHeader205,
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 1146, col: 33, offset: 35872},
																								run: (*parser).callonDocumentHeader206,
																								expr: &seqExpr{
																									pos: position{line: 1146, col: 33, offset: 35872},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 1146, col: 33, offset: 35872},
																											val:        ":author:",
																											ignoreCase: false,
																											want:       "\":author:\"",
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 1146, col: 44, offset: 35883},
																											expr: &actionExpr{
																												pos: position{line: 3080, col: 10, offset: 100200},
																												run: (*parser).callonDocumentHeader210,
																												expr: &charClassMatcher{
																													pos:        position{line: 3080, col: 11, offset: 100201},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&labeledExpr{
																											pos:   position{line: 1146, col: 51, offset: 35890},
																											label: "author",
																											expr: &actionExpr{
																												pos: position{line: 1151, col: 5, offset: 35986},
																												run: (*parser).callonDocumentHeader213,
																												expr: &seqExpr{
																													pos: position{line: 1151, col: 5, offset: 35986},
																													exprs: []interface{}{
																														&labeledExpr{
																															pos:   position{line: 1151, col: 5, offset: 35986},
																															label: "fullName",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 1151, col: 14, offset: 35995},
																																expr: &actionExpr{
																																	pos: position{line: 1162, col: 5, offset: 36375},
																																	run: (*parser).callonDocumentHeader217,
																																	expr: &seqExpr{
																																		pos: position{line: 1162, col: 5, offset: 36375},
																																		exprs: []interface{}{
																																			&labeledExpr{
																																				pos:   position{line: 1162, col: 5, offset: 36375},
																																				label: "part1",
																																				expr: &actionExpr{
																																					pos: position{line: 1162, col: 12, offset: 36382},
																																					run: (*parser).callonDocumentHeader220,
																																					expr: &oneOrMoreExpr{
																																						pos: position{line: 1162, col: 12, offset: 36382},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 1162, col: 12, offset: 36382},
																																							val:        "[^<;\\r\\n ]",
																																							chars:      []rune{'<', ';', '\r', '\n', ' '},
																																							ignoreCase: false,
																																							inverted:   true,
																																						},
																																					},
																																				},
																																			},
																																			&zeroOrMoreExpr{
																																				pos: position{line: 1165, col: 5, offset: 36462},
																																				expr: &actionExpr{
																																					pos: position{line: 3080, col: 10, offset: 100200},
																																					run: (*parser).callonDocumentHeader224,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 3080, col: 11, offset: 100201},
																																						val:        "[ \\t]",
																																						chars:      []rune{' ', '\t'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 1166, col: 5, offset: 36473},
																																				label: "part2",
																																				expr: &zeroOrOneExpr{
																																					pos: position{line: 1166, col: 11, offset: 36479},
																																					expr: &actionExpr{
																																						pos: position{line: 1166, col: 12, offset: 36480},
																																						run: (*parser).callonDocumentHeader228,
																																						expr: &oneOrMoreExpr{
																																							pos: position{line: 1166, col: 12, offset: 36480},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 1166, col: 12, offset: 36480},
																																								val:        "[^<;\\r\\n ]",
																																								chars:      []rune{'<', ';', '\r', '\n', ' '},
																																								ignoreCase: false,
																																								inverted:   true,
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&zeroOrMoreExpr{
																																				pos: position{line: 1169, col: 5, offset: 36561},
																																				expr: &actionExpr{
																																					pos: position{line: 3080, col: 10, offset: 100200},
																																					run: (*parser).callonDocumentHeader232,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 3080, col: 11, offset: 100201},
																																						val:        "[ \\t]",
																																						chars:      []rune{' ', '\t'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 1170, col: 5, offset: 36572},
																																				label: "part3",
																																				expr: &zeroOrOneExpr{
																																					pos: position{line: 1170, col: 11, offset: 36578},
																																					expr: &actionExpr{
																																						pos: position{line: 1170, col: 12, offset: 36579},
																																						run: (*parser).callonDocumentHeader236,
																																						expr: &oneOrMoreExpr{
																																							pos: position{line: 1170, col: 12, offset: 36579},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 1170, col: 12, offset: 36579},
																																								val:        "[^<;\\r\\n]",
																																								chars:      []rune{'<', ';', '\r', '\n'},
																																								ignoreCase: false,
																																								inverted:   true,
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&zeroOrMoreExpr{
																																				pos: position{line: 1173, col: 5, offset: 36658},
																																				expr: &actionExpr{
																																					pos: position{line: 3080, col: 10, offset: 100200},
																																					run: (*parser).callonDocumentHeader240,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 3080, col: 11, offset: 100201},
																																						val:        "[ \\t]",
																																						chars:      []rune{' ', '\t'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 1151, col: 40, offset: 36021},
																															label: "email",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 1151, col: 46, offset: 36027},
																																expr: &actionExpr{
																																	pos: position{line: 1179, col: 5, offset: 36780},
																																	run: (*parser).callonDocumentHeader244,
																																	expr: &seqExpr{
																																		pos: position{line: 1179, col: 5, offset: 36780},
																																		exprs: []interface{}{
																																			&notExpr{
																																				pos: position{line: 1179, col: 5, offset: 36780},
																																				expr: &notExpr{
																																					pos: position{line: 3093, col: 8, offset: 100474},
																																					expr: &anyMatcher{
																																						line: 3093, col: 9, offset: 100475,
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 1180, col: 5, offset: 36790},
																																				val:        "<",
																																				ignoreCase: false,
																																				want:       "\"<\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 1181, col: 5, offset: 36799},
																																				label: "email",
																																				expr: &actionExpr{
																																					pos: position{line: 1181, col: 12, offset: 36806},
																																					run: (*parser).callonDocumentHeader251,
																																					expr: &oneOrMoreExpr{
																																						pos: position{line: 1181, col: 13, offset: 36807},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 1181, col: 13, offset: 36807},
																																							val:        "[^>\\r\\n]",
																																							chars:      []rune{'>', '\r', '\n'},
																																							ignoreCase: false,
																																							inverted:   true,
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 1184, col: 5, offset: 36867},
																																				val:        ">",
																																				ignoreCase: false,
																																				want:       "\">\"",
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 1151, col: 69, offset: 36050},
																															expr: &actionExpr{
																																pos: position{line: 3080, col: 10, offset: 100200},
																																run: (*parser).callonDocumentHeader256,
																																expr: &charClassMatcher{
																																	pos:        position{line: 3080, col: 11, offset: 100201},
																																	val:        "[ \\t]",
																																	chars:      []rune{' ', '\t'},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																														&zeroOrOneExpr{
																															pos: position{line: 1151, col: 76, offset: 36057},
																															expr: &litMatcher{
																																pos:        position{line: 1151, col: 76, offset: 36057},
																																val:        ";",
																																ignoreCase: false,
																																want:       "\";\"",
																															},
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 1151, col: 81, offset: 36062},
																															expr: &actionExpr{
																																pos: position{line: 3080, col: 10, offset: 100200},
																																run: (*parser).callonDocumentHeader261,
																																expr: &charClassMatcher{
																																	pos:        position{line: 3080, col: 11, offset: 100201},
																																	val:        "[ \\t]",
																																	chars:      []rune{' ', '\t'},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																														&andCodeExpr{
																															pos: position{line: 1152, col: 5, offset: 36074},
																															run: (*parser).callonDocumentHeader263,
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 3096, col: 8, offset: 100524},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 3089, col: 12, offset: 100384},
																							run: (*parser).callonDocumentHeader265,
																							expr: &choiceExpr{
																								pos: position{line: 3089, col: 13, offset: 100385},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 3089, col: 13, offset: 100385},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 3089, col: 20, offset: 100392},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 3089, col: 29, offset: 100401},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 3093, col: 8, offset: 100474},
																							expr: &anyMatcher{
																								line: 3093, col: 9, offset: 100475,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&zeroOrMoreExpr{
																	pos: position{line: 1133, col: 5, offset: 35378},
																	expr: &choiceExpr{
																		pos: position{line: 1133, col: 6, offset: 35379},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 2770, col: 22, offset: 90863},
																				run: (*parser).callonDocumentHeader274,
																				expr: &seqExpr{
																					pos: position{line: 2770, col: 22, offset: 90863},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2775, col: 31, offset: 91084},
																							val:        "//",
																							ignoreCase: false,
																							want:       "\"//\"",
																						},
																						&notExpr{
																							pos: position{line: 2775, col: 36, offset: 91089},
																							expr: &litMatcher{
																								pos:        position{line: 2775, col: 37, offset: 91090},
																								val:        "//",
																								ignoreCase: false,
																								want:       "\"//\"",
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 2770, col: 49, offset: 90890},
																							label: "content",
																							expr: &actionExpr{
																								pos: position{line: 2777, col: 29, offset: 91125},
																								run: (*parser).callonDocumentHeader280,
																								expr: &zeroOrMoreExpr{
																									pos: position{line: 2777, col: 29, offset: 91125},
																									expr: &charClassMatcher{
																										pos:        position{line: 2777, col: 29, offset: 91125},
																										val:        "[^\\r\\n]",
																										chars:      []rune{'\r', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 3096, col: 8, offset: 100524},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 3089, col: 12, offset: 100384},
																									run: (*parser).callonDocumentHeader284,
																									expr: &choiceExpr{
																										pos: position{line: 3089, col: 13, offset: 100385},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 3089, col: 13, offset: 100385},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 3089, col: 20, offset: 100392},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 3089, col: 29, offset: 100401},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 3093, col: 8, offset: 100474},
																									expr: &anyMatcher{
																										line: 3093, col: 9, offset: 100475,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 827, col: 5, offset: 26970},
																				run: (*parser).callonDocumentHeader291,
																				expr: &seqExpr{
																					pos: position{line: 827, col: 5, offset: 26970},
																					exprs: []interface{}{
																						&actionExpr{
																							pos: position{line: 752, col: 5, offset: 24389},
																							run: (*parser).callonDocumentHeader293,
																							expr: &seqExpr{
																								pos: position{line: 752, col: 5, offset: 24389},
																								exprs: []interface{}{
																									&labeledExpr{
																										pos:   position{line: 752, col: 5, offset: 24389},
																										label: "delimiter",
																										expr: &actionExpr{
																											pos: position{line: 752, col: 16, offset: 24400},
																											run: (*parser).callonDocumentHeader296,
																											expr: &seqExpr{
																												pos: position{line: 752, col: 16, offset: 24400},
																												exprs: []interface{}{
																													&litMatcher{
																														pos:        position{line: 752, col: 16, offset: 24400},
																														val:        "////",
																														ignoreCase: false,
																														want:       "\"////\"",
																													},
																													&zeroOrMoreExpr{
																														pos: position{line: 752, col: 23, offset: 24407},
																														expr: &litMatcher{
																															pos:        position{line: 752, col: 23, offset: 24407},
																															val:        "/",
																															ignoreCase: false,
																															want:       "\"/\"",
																														},
																													},
																												},
																											},
																										},
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 754, col: 8, offset: 24491},
																										expr: &actionExpr{
																											pos: position{line: 3080, col: 10, offset: 100200},
																											run: (*parser).callonDocumentHeader302,
																											expr: &charClassMatcher{
																												pos:        position{line: 3080, col: 11, offset: 100201},
																												val:        "[ \\t]",
																												chars:      []rune{' ', '\t'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 3096, col: 8, offset: 100524},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 3089, col: 12, offset: 100384},
																												run: (*parser).callonDocumentHeader305,
																												expr: &choiceExpr{
																													pos: position{line: 3089, col: 13, offset: 100385},
																													alternatives: []interface{}{
																														&litMatcher{
																															pos:        position{line: 3089, col: 13, offset: 100385},
																															val:        "\n",
																															ignoreCase: false,
																															want:       "\"\\n\"",
																														},
																														&litMatcher{
																															pos:        position{line: 3089, col: 20, offset: 100392},
																															val:        "\r\n",
																															ignoreCase: false,
																															want:       "\"\\r\\n\"",
																														},
																														&litMatcher{
																															pos:        position{line: 3089, col: 29, offset: 100401},
																															val:        "\r",
																															ignoreCase: false,
																															want:       "\"\\r\"",
																														},
																													},
																												},
																											},
																											&notExpr{
																												pos: position{line: 3093, col: 8, offset: 100474},
																												expr: &anyMatcher{
																													line: 3093, col: 9, offset: 100475,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 828, col: 5, offset: 27001},
																							label: "content",
																							expr: &zeroOrMoreExpr{
																								pos: position{line: 838, col: 5, offset: 27287},
																								expr: &actionExpr{
																									pos: position{line: 838, col: 6, offset: 27288},
																									run: (*parser).callonDocumentHeader314,
																									expr: &seqExpr{
																										pos: position{line: 838, col: 6, offset: 27288},
																										exprs: []interface{}{
																											&notExpr{
																												pos: position{line: 838, col: 6, offset: 27288},
																												expr: &choiceExpr{
																													pos: position{line: 835, col: 29, offset: 27230},
																													alternatives: []interface{}{
																														&actionExpr{
																															pos: position{line: 752, col: 5, offset: 24389},
																															run: (*parser).callonDocumentHeader318,
																															expr: &seqExpr{
																																pos: position{line: 752, col: 5, offset: 24389},
																																exprs: []interface{}{
																																	&labeledExpr{
																																		pos:   position{line: 752, col: 5, offset: 24389},
																																		label: "delimiter",
																																		expr: &actionExpr{
																																			pos: position{line: 752, col: 16, offset: 24400},
																																			run: (*parser).callonDocumentHeader321,
																																			expr: &seqExpr{
																																				pos: position{line: 752, col: 16, offset: 24400},
																																				exprs: []interface{}{
																																					&litMatcher{
																																						pos:        position{line: 752, col: 16, offset: 24400},
																																						val:        "////",
																																						ignoreCase: false,
																																						want:       "\"////\"",
																																					},
																																					&zeroOrMoreExpr{
																																						pos: position{line: 752, col: 23, offset: 24407},
																																						expr: &litMatcher{
																																							pos:        position{line: 752, col: 23, offset: 24407},
																																							val:        "/",
																																							ignoreCase: false,
																																							want:       "\"/\"",
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&zeroOrMoreExpr{
																																		pos: position{line: 754, col: 8, offset: 24491},
																																		expr: &actionExpr{
																																			pos: position{line: 3080, col: 10, offset: 100200},
																																			run: (*parser).callonDocumentHeader327,
																																			expr: &charClassMatcher{
																																				pos:        position{line: 3080, col: 11, offset: 100201},
																																				val:        "[ \\t]",
																																				chars:      []rune{' ', '\t'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																	&choiceExpr{
																																		pos: position{line: 3096, col: 8, offset: 100524},
																																		alternatives: []interface{}{
																																			&actionExpr{
																																				pos: position{line: 3089, col: 12, offset: 100384},
																																				run: (*parser).callonDocumentHeader330,
																																				expr: &choiceExpr{
																																					pos: position{line: 3089, col: 13, offset: 100385},
																																					alternatives: []interface{}{
																																						&litMatcher{
																																							pos:        position{line: 3089, col: 13, offset: 100385},
																																							val:        "\n",
																																							ignoreCase: false,
																																							want:       "\"\\n\"",
																																						},
																																						&litMatcher{
																																							pos:        position{line: 3089, col: 20, offset: 100392},
																																							val:        "\r\n",
																																							ignoreCase: false,
																																							want:       "\"\\r\\n\"",
																																						},
																																						&litMatcher{
																																							pos:        position{line: 3089, col: 29, offset: 100401},
																																							val:        "\r",
																																							ignoreCase: false,
																																							want:       "\"\\r\"",
																																						},
																																					},
																																				},
																																			},
																																			&notExpr{
																																				pos: position{line: 3093, col: 8, offset: 100474},
																																				expr: &anyMatcher{
																																					line: 3093, col: 9, offset: 100475,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&notExpr{
																															pos: position{line: 3093, col: 8, offset: 100474},
																															expr: &anyMatcher{
																																line: 3093, col: 9, offset: 100475,
																															},
																														},
																													},
																												},
																											},
																											&labeledExpr{
																												pos:   position{line: 839, col: 5, offset: 27318},
																												label: "line",
																												expr: &actionExpr{
																													pos: position{line: 816, col: 5, offset: 26665},
																													run: (*parser).callonDocumentHeader340,
																													expr: &seqExpr{
																														pos: position{line: 816, col: 5, offset: 26665},
																														exprs: []interface{}{
																															&notExpr{
																																pos: position{line: 816, col: 5, offset: 26665},
																																expr: &notExpr{
																																	pos: position{line: 3093, col: 8, offset: 100474},
																																	expr: &anyMatcher{
																																		line: 3093, col: 9, offset: 100475,
																																	},
																																},
																															},
																															&labeledExpr{
																																pos:   position{line: 817, col: 5, offset: 26738},
																																label: "content",
																																expr: &actionExpr{
																																	pos: position{line: 817, col: 14, offset: 26747},
																																	run: (*parser).callonDocumentHeader346,
																																	expr: &zeroOrMoreExpr{
																																		pos: position{line: 817, col: 14, offset: 26747},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 817, col: 14, offset: 26747},
																																			val:        "[^\\r\\n]",
																																			chars:      []rune{'\r', '\n'},
																																			ignoreCase: false,
																																			inverted:   true,
																																		},
																																	},
																																},
																															},
																															&choiceExpr{
																																pos: position{line: 3096, col: 8, offset: 100524},
																																alternatives: []interface{}{
																																	&actionExpr{
																																		pos: position{line: 3089, col: 12, offset: 100384},
																																		run: (*parser).callonDocumentHeader350,
																																		expr: &choiceExpr{
																																			pos: position{line: 3089, col: 13, offset: 100385},
																																			alternatives: []interface{}{
																																				&litMatcher{
																																					pos:        position{line: 3089, col: 13, offset: 100385},
																																					val:        "\n",
																																					ignoreCase: false,
																																					want:       "\"\\n\"",
																																				},
																																				&litMatcher{
																																					pos:        position{line: 3089, col: 20, offset: 100392},
																																					val:        "\r\n",
																																					ignoreCase: false,
																																					want:       "\"\\r\\n\"",
																																				},
																																				&litMatcher{
																																					pos:        position{line: 3089, col: 29, offset: 100401},
																																					val:        "\r",
																																					ignoreCase: false,
																																					want:       "\"\\r\"",
																																				},
																																			},
																																		},
																																	},
																																	&notExpr{
																																		pos: position{line: 3093, col: 8, offset: 100474},
																																		expr: &anyMatcher{
																																			line: 3093, col: 9, offset: 100475,
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&zeroOrOneExpr{
																							pos: position{line: 829, col: 5, offset: 27035},
																							expr: &choiceExpr{
																								pos: position{line: 835, col: 29, offset: 27230},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 752, col: 5, offset: 24389},
																										run: (*parser).callonDocumentHeader359,
																										expr: &seqExpr{
																											pos: position{line: 752, col: 5, offset: 24389},
																											exprs: []interface{}{
																												&labeledExpr{
																													pos:   position{line: 752, col: 5, offset: 24389},
																													label: "delimiter",
																													expr: &actionExpr{
																														pos: position{line: 752, col: 16, offset: 24400},
																														run: (*parser).callonDocumentHeader362,
																														expr: &seqExpr{
																															pos: position{line: 752, col: 16, offset: 24400},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 752, col: 16, offset: 24400},
																																	val:        "////",
																																	ignoreCase: false,
																																	want:       "\"////\"",
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 752, col: 23, offset: 24407},
																																	expr: &litMatcher{
																																		pos:        position{line: 752, col: 23, offset: 24407},
																																		val:        "/",
																																		ignoreCase: false,
																																		want:       "\"/\"",
																																	},
																																},
																															},
																														},
																													},
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 754, col: 8, offset: 24491},
																													expr: &actionExpr{
																														pos: position{line: 3080, col: 10, offset: 100200},
																														run: (*parser).callonDocumentHeader368,
																														expr: &charClassMatcher{
																															pos:        position{line: 3080, col: 11, offset: 100201},
																															val:        "[ \\t]",
																															chars:      []rune{' ', '\t'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																												&choiceExpr{
																													pos: position{line: 3096, col: 8, offset: 100524},
																													alternatives: []interface{}{
																														&actionExpr{
																															pos: position{line: 3089, col: 12, offset: 100384},
																															run: (*parser).callonDocumentHeader371,
																															expr: &choiceExpr{
																																pos: position{line: 3089, col: 13, offset: 100385},
																																alternatives: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 3089, col: 13, offset: 100385},
																																		val:        "\n",
																																		ignoreCase: false,
																																		want:       "\"\\n\"",
																																	},
																																	&litMatcher{
																																		pos:        position{line: 3089, col: 20, offset: 100392},
																																		val:        "\r\n",
																																		ignoreCase: false,
																																		want:       "\"\\r\\n\"",
																																	},
																																	&litMatcher{
																																		pos:        position{line: 3089, col: 29, offset: 100401},
																																		val:        "\r",
																																		ignoreCase: false,
																																		want:       "\"\\r\"",
																																	},
																																},
																															},
																														},
																														&notExpr{
																															pos: position{line: 3093, col: 8, offset: 100474},
																															expr: &anyMatcher{
																																line: 3093, col: 9, offset: 100475,
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 3093, col: 8, offset: 100474},
																										expr: &anyMatcher{
																											line: 3093, col: 9, offset: 100475,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1134, col: 5, offset: 35453},
																	label: "revision",
																	expr: &zeroOrOneExpr{
																		pos: position{line: 1134, col: 14, offset: 35462},
																		expr: &actionExpr{
																			pos: position{line: 1190, col: 21, offset: 37056},
																			run: (*parser).callonDocumentHeader382,
																			expr: &seqExpr{
																				pos: position{line: 1190, col: 21, offset: 37056},
																				exprs: []interface{}{
																					&zeroOrMoreExpr{
																						pos: position{line: 1190, col: 21, offset: 37056},
																						expr: &actionExpr{
																							pos: position{line: 3080, col: 10, offset: 100200},
																							run: (*parser).callonDocumentHeader385,
																							expr: &charClassMatcher{
																								pos:        position{line: 3080, col: 11, offset: 100201},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 1190, col: 28, offset: 37063},
																						expr: &litMatcher{
																							pos:        position{line: 1190, col: 29, offset: 37064},
																							val:        ":",
																							ignoreCase: false,
																							want:       "\":\"",
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 1190, col: 33, offset: 37068},
																						label: "revision",
																						expr: &choiceExpr{
																							pos: position{line: 1191, col: 9, offset: 37087},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 1191, col: 10, offset: 37088},
																									run: (*parser).callonDocumentHeader391,
																									expr: &seqExpr{
																										pos: position{line: 1191, col: 10, offset: 37088},
																										exprs: []interface{}{
																											&labeledExpr{
																												pos:   position{line: 1191, col: 10, offset: 37088},
																												label: "revnumber",
																												expr: &choiceExpr{
																													pos: position{line: 1200, col: 27, offset: 37605},
																													alternatives: []interface{}{
																														&actionExpr{
																															pos: position{line: 1200, col: 27, offset: 37605},
																															run: (*parser).callonDocumentHeader395,
																															expr: &seqExpr{
																																pos: position{line: 1200, col: 27, offset: 37605},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 1200, col: 27, offset: 37605},
																																		val:        "v",
																																		ignoreCase: true,
																																		want:       "\"v\"i",
																																	},
																																	&charClassMatcher{
																																		pos:        position{line: 1200, col: 32, offset: 37610},
																																		val:        "[0-9]",
																																		ranges:     []rune{'0', '9'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																	&oneOrMoreExpr{
																																		pos: position{line: 1200, col: 38, offset: 37616},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 1200, col: 38, offset: 37616},
																																			val:        "[^:,\\r\\n]",
																																			chars:      []rune{':', ',', '\r', '\n'},
																																			ignoreCase: false,
																																			inverted:   true,
																																		},
																																	},
																																},
																															},
																														},
																														&actionExpr{
																															pos: position{line: 1202, col: 5, offset: 37664},
																															run: (*parser).callonDocumentHeader401,
																															expr: &seqExpr{
																																pos: position{line: 1202, col: 5, offset: 37664},
																																exprs: []interface{}{
																																	&zeroOrOneExpr{
																																		pos: position{line: 1202, col: 5, offset: 37664},
																																		expr: &litMatcher{
																																			pos:        position{line: 1202, col: 5, offset: 37664},
																																			val:        "v",
																																			ignoreCase: true,
																																			want:       "\"v\"i",
																																		},
																																	},
																																	&charClassMatcher{
																																		pos:        position{line: 1202, col: 11, offset: 37670},
																																		val:        "[0-9]",
																																		ranges:     []rune{'0', '9'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																	&oneOrMoreExpr{
																																		pos: position{line: 1202, col: 17, offset: 37676},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 1202, col: 17, offset: 37676},
																																			val:        "[^:,\\r\\n]",
																																			chars:      []rune{':', ',', '\r', '\n'},
																																			ignoreCase: false,
																																			inverted:   true,
																																		},
																																	},
																																	&zeroOrMoreExpr{
																																		pos: position{line: 1202, col: 28, offset: 37687},
																																		expr: &actionExpr{
																																			pos: position{line: 3080, col: 10, offset: 100200},
																																			run: (*parser).callonDocumentHeader409,
																																			expr: &charClassMatcher{
																																				pos:        position{line: 3080, col: 11, offset: 100201},
																																				val:        "[ \\t]",
																																				chars:      []rune{' ', '\t'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																	&andExpr{
																																		pos: position{line: 1202, col: 35, offset: 37694},
																																		expr: &litMatcher{
																																			pos:        position{line: 1202, col: 36, offset: 37695},
																																			val:        ",",
																																			ignoreCase: false,
																																			want:       "\",\"",
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 1191, col: 45, offset: 37123},
																												expr: &litMatcher{
																													pos:        position{line: 1191, col: 45, offset: 37123},
																													val:        ",",
																													ignoreCase: false,
																													want:       "\",\"",
																												},
																											},
																											&labeledExpr{
																												pos:   position{line: 1191, col: 50, offset: 37128},
																												label: "revdate",
																												expr: &zeroOrOneExpr{
																													pos: position{line: 1191, col: 58, offset: 37136},
																													expr: &actionExpr{
																														pos: position{line: 1206, col: 25, offset: 37759},
																														run: (*parser).callonDocumentHeader417,
																														expr: &oneOrMoreExpr{
																															pos: position{line: 1206, col: 25, offset: 37759},
																															expr: &charClassMatcher{
																																pos:        position{line: 1206, col: 25, offset: 37759},
																																val:        "[^:\\r\\n]",
																																chars:      []rune{':', '\r', '\n'},
																																ignoreCase: false,
																																inverted:   true,
																															},
																														},
																													},
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 1191, col: 82, offset: 37160},
																												expr: &litMatcher{
																													pos:        position{line: 1191, col: 82, offset: 37160},
																													val:        ":",
																													ignoreCase: false,
																													want:       "\":\"",
																												},
																											},
																											&labeledExpr{
																												pos:   position{line: 1191, col: 87, offset: 37165},
																												label: "revremark",
																												expr: &zeroOrOneExpr{
																													pos: position{line: 1191, col: 97, offset: 37175},
																													expr: &actionExpr{
																														pos: position{line: 1210, col: 27, offset: 37831},
																														run: (*parser).callonDocumentHeader424,
																														expr: &oneOrMoreExpr{
																															pos: position{line: 1210, col: 27, offset: 37831},
																															expr: &charClassMatcher{
																																pos:        position{line: 1210, col: 27, offset: 37831},
																																val:        "[^\\r\\n]",
																																chars:      []rune{'\r', '\n'},
																																ignoreCase: false,
																																inverted:   true,
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 1193, col: 15, offset: 37293},
																									run: (*parser).callonDocumentHeader427,
																									expr: &seqExpr{
																										pos: position{line: 1193, col: 15, offset: 37293},
																										exprs: []interface{}{
																											&labeledExpr{
																												pos:   position{line: 1193, col: 15, offset: 37293},
																												label: "revdate",
																												expr: &actionExpr{
																													pos: position{line: 1206, col: 25, offset: 37759},
																													run: (*parser).callonDocumentHeader430,
																													expr: &oneOrMoreExpr{
																														pos: position{line: 1206, col: 25, offset: 37759},
																														expr: &charClassMatcher{
																															pos:        position{line: 1206, col: 25, offset: 37759},
																															val:        "[^:\\r\\n]",
																															chars:      []rune{':', '\r', '\n'},
																															ignoreCase: false,
																															inverted:   true,
																														},
																													},
																												},
																											},
																											&zeroOrOneExpr{
																												pos: position{line: 1193, col: 46, offset: 37324},
																												expr: &litMatcher{
																													pos:        position{line: 1193, col: 46, offset: 37324},
																													val:        ":",
																													ignoreCase: false,
																													want:       "\":\"",
																												},
																											},
																											&labeledExpr{
																												pos:   position{line: 1193, col: 51, offset: 37329},
																												label: "revremark",
																												expr: &zeroOrOneExpr{
																													pos: position{line: 1193, col: 61, offset: 37339},
																													expr: &actionExpr{
																														pos: position{line: 1210, col: 27, offset: 37831},
																														run: (*parser).callonDocumentHeader437,
																														expr: &oneOrMoreExpr{
																															pos: position{line: 1210, col: 27, offset: 37831},
																															expr: &charClassMatcher{
																																pos:        position{line: 1210, col: 27, offset: 37831},
																																val:        "[^\\r\\n]",
																																chars:      []rune{'\r', '\n'},
																																ignoreCase: false,
																																inverted:   true,
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 3096, col: 8, offset: 100524},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 3089, col: 12, offset: 100384},
																								run: (*parser).callonDocumentHeader441,
																								expr: &choiceExpr{
																									pos: position{line: 3089, col: 13, offset: 100385},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 3089, col: 13, offset: 100385},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 3089, col: 20, offset: 100392},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 3089, col: 29, offset: 100401},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 3093, col: 8, offset: 100474},
																								expr: &anyMatcher{
																									line: 3093, col: 9, offset: 100475,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1097, col: 5, offset: 34135},
							label: "moreExtraAttrs",
							expr: &ruleRefExpr{
								pos:  position{line: 1097, col: 21, offset: 34151},
								name: "DocumentHeaderAttributes",
							},
						},
						&andCodeExpr{
							pos: position{line: 1098, col: 5, offset: 34181},
							run: (*parser).callonDocumentHeader450,
						},
					},
				},
			},
		},
		{
			name: "DocumentHeaderAttributes",
			pos:  position{line: 1116, col: 1, offset: 34816},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1116, col: 29, offset: 34844},
				expr: &choiceExpr{
					pos: position{line: 1116, col: 30, offset: 34845},
					alternatives: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1116, col: 30, offset: 34845},
							name: "AttributeDeclaration",
						},
						&actionExpr{
							pos: position{line: 364, col: 19, offset: 11171},
							run: (*parser).callonDocumentHeaderAttributes4,
							expr: &seqExpr{
								pos: position{line: 364, col: 19, offset: 11171},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 364, col: 19, offset: 11171},
										val:        ":!",
										ignoreCase: false,
										want:       "\":!\"",
									},
									&labeledExpr{
										pos:   position{line: 364, col: 24, offset: 11176},
										label: "name",
										expr: &actionExpr{
											pos: position{line: 324, col: 18, offset: 10072},
											run: (*parser).callonDocumentHeaderAttributes8,
											expr: &seqExpr{
												pos: position{line: 324, col: 18, offset: 10072},
												exprs: []interface{}{
													&charClassMatcher{
														pos:        position{line: 324, col: 18, offset: 10072},
														val:        "[_0-9\\pL]",
														chars:      []rune{'_'},
														ranges:     []rune{'0', '9'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
													&zeroOrMoreExpr{
														pos: position{line: 324, col: 28, offset: 10082},
														expr: &charClassMatcher{
															pos:        position{line: 324, col: 29, offset: 10083},
															val:        "[-0-9\\pL]",
															chars:      []rune{'-'},
															ranges:     []rune{'0', '9'},
															classes:    []*unicode.RangeTable{rangeTable("L")},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
									&litMatcher{
										pos:        position{line: 364, col: 45, offset: 11197},
										val:        ":",
										ignoreCase: false,
										want:       "\":\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 364, col: 49, offset: 11201},
										expr: &actionExpr{
											pos: position{line: 3080, col: 10, offset: 100200},
											run: (*parser).callonDocumentHeaderAttributes15,
											expr: &charClassMatcher{
												pos:        position{line: 3080, col: 11, offset: 100201},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
									&choiceExpr{
										pos: position{line: 3096, col: 8, offset: 100524},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 3089, col: 12, offset: 100384},
												run: (*parser).callonDocumentHeaderAttributes18,
												expr: &choiceExpr{
													pos: position{line: 3089, col: 13, offset: 100385},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 3089, col: 13, offset: 100385},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&litMatcher{
															pos:        position{line: 3089, col: 20, offset: 100392},
															val:        "\r\n",
															ignoreCase: false,
															want:       "\"\\r\\n\"",
														},
														&litMatcher{
															pos:        position{line: 3089, col: 29, offset: 100401},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 3093, col: 8, offset: 100474},
												expr: &anyMatcher{
													line: 3093, col: 9, offset: 100475,
												},
											},
										},
									},
								},
							},
						},
						&actionExpr{
							pos: position{line: 366, col: 9, offset: 11292},
							run: (*parser).callonDocumentHeaderAttributes25,
							expr: &seqExpr{
								pos: position{line: 366, col: 9, offset: 11292},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 366, col: 9, offset: 11292},
										val:        ":",
										ignoreCase: false,
										want:       "\":\"",
									},
									&labeledExpr{
										pos:   position{line: 366, col: 13, offset: 11296},
										label: "name",
										expr: &actionExpr{
											pos: position{line: 324, col: 18, offset: 10072},
											run: (*parser).callonDocumentHeaderAttributes29,
											expr: &seqExpr{
												pos: position{line: 324, col: 18, offset: 10072},
												exprs: []interface{}{
													&charClassMatcher{
														pos:        position{line: 324, col: 18, offset: 10072},
														val:        "[_0-9\\pL]",
														chars:      []rune{'_'},
														ranges:     []rune{'0', '9'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
													&zeroOrMoreExpr{
														pos: position{line: 324, col: 28, offset: 10082},
														expr: &charClassMatcher{
															pos:        position{line: 324, col: 29, offset: 10083},
															val:        "[-0-9\\pL]",
															chars:      []rune{'-'},
															ranges:     []rune{'0', '9'},
															classes:    []*unicode.RangeTable{rangeTable("L")},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
									&litMatcher{
										pos:        position{line: 366, col: 34, offset: 11317},
										val:        "!:",
										ignoreCase: false,
										want:       "\"!:\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 366, col: 39, offset: 11322},
										expr: &actionExpr{
											pos: position{line: 3080, col: 10, offset: 100200},
											run: (*parser).callonDocumentHeaderAttributes36,
											expr: &charClassMatcher{
												pos:        position{line: 3080, col: 11, offset: 100201},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
									&choiceExpr{
										pos: position{line: 3096, col: 8, offset: 100524},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 3089, col: 12, offset: 100384},
												run: (*parser).callonDocumentHeaderAttributes39,
												expr: &choiceExpr{
													pos: position{line: 3089, col: 13, offset: 100385},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 3089, col: 13, offset: 100385},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&litMatcher{
															pos:        position{line: 3089, col: 20, offset: 100392},
															val:        "\r\n",
															ignoreCase: false,
															want:       "\"\\r\\n\"",
														},
														&litMatcher{
															pos:        position{line: 3089, col: 29, offset: 100401},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 3093, col: 8, offset: 100474},
												expr: &anyMatcher{
													line: 3093, col: 9, offset: 100475,
												},
											},
										},
									},
								},
							},
						},
						&actionExpr{
							pos: position{line: 2770, col: 22, offset: 90863},
							run: (*parser).callonDocumentHeaderAttributes46,
							expr: &seqExpr{
								pos: position{line: 2770, col: 22, offset: 90863},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 2775, col: 31, offset: 91084},
										val:        "//",
										ignoreCase: false,
										want:       "\"//\"",
									},
									&notExpr{
										pos: position{line: 2775, col: 36, offset: 91089},
										expr: &litMatcher{
											pos:        position{line: 2775, col: 37, offset: 91090},
											val:        "//",
											ignoreCase: false,
											want:       "\"//\"",
										},
									},
									&labeledExpr{
										pos:   position{line: 2770, col: 49, offset: 90890},
										label: "content",
										expr: &actionExpr{
											pos: position{line: 2777, col: 29, offset: 91125},
											run: (*parser).callonDocumentHeaderAttributes52,
											expr: &zeroOrMoreExpr{
												pos: position{line: 2777, col: 29, offset: 91125},
												expr: &charClassMatcher{
													pos:        position{line: 2777, col: 29, offset: 91125},
													val:        "[^\\r\\n]",
													chars:      []rune{'\r', '\n'},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
									},
									&choiceExpr{
										pos: position{line: 3096, col: 8, offset: 100524},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 3089, col: 12, offset: 100384},
												run: (*parser).callonDocumentHeaderAttributes56,
												expr: &choiceExpr{
													pos: position{line: 3089, col: 13, offset: 100385},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 3089, col: 13, offset: 100385},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&litMatcher{
															pos:        position{line: 3089, col: 20, offset: 100392},
															val:        "\r\n",
															ignoreCase: false,
															want:       "\"\\r\\n\"",
														},
														&litMatcher{
															pos:        position{line: 3089, col: 29, offset: 100401},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 3093, col: 8, offset: 100474},
												expr: &anyMatcher{
													line: 3093, col: 9, offset: 100475,
												},
											},
										},
									},
								},
							},
						},
						&actionExpr{
							pos: position{line: 827, col: 5, offset: 26970},
							run: (*parser).callonDocumentHeaderAttributes63,
							expr: &seqExpr{
								pos: position{line: 827, col: 5, offset: 26970},
								exprs: []interface{}{
									&actionExpr{
										pos: position{line: 752, col: 5, offset: 24389},
										run: (*parser).callonDocumentHeaderAttributes65,
										expr: &seqExpr{
											pos: position{line: 752, col: 5, offset: 24389},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 752, col: 5, offset: 24389},
													label: "delimiter",
													expr: &actionExpr{
														pos: position{line: 752, col: 16, offset: 24400},
														run: (*parser).callonDocumentHeaderAttributes68,
														expr: &seqExpr{
															pos: position{line: 752, col: 16, offset: 24400},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 752, col: 16, offset: 24400},
																	val:        "////",
																	ignoreCase: false,
																	want:       "\"////\"",
																},
																&zeroOrMoreExpr{
																	pos: position{line: 752, col: 23, offset: 24407},
																	expr: &litMatcher{
																		pos:        position{line: 752, col: 23, offset: 24407},
																		val:        "/",
																		ignoreCase: false,
																		want:       "\"/\"",
																	},
																},
															},
														},
													},
												},
												&zeroOrMoreExpr{
													pos: position{line: 754, col: 8, offset: 24491},
													expr: &actionExpr{
														pos: position{line: 3080, col: 10, offset: 100200},
														run: (*parser).callonDocumentHeaderAttributes74,
														expr: &charClassMatcher{
															pos:        position{line: 3080, col: 11, offset: 100201},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&choiceExpr{
													pos: position{line: 3096, col: 8, offset: 100524},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 3089, col: 12, offset: 100384},
															run: (*parser).callonDocumentHeaderAttributes77,
															expr: &choiceExpr{
																pos: position{line: 3089, col: 13, offset: 100385},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 3089, col: 13, offset: 100385},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 3089, col: 20, offset: 100392},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 3089, col: 29, offset: 100401},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 3093, col: 8, offset: 100474},
															expr: &anyMatcher{
																line: 3093, col: 9, offset: 100475,
															},
														},
													},
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 828, col: 5, offset: 27001},
										label: "content",
										expr: &zeroOrMoreExpr{
											pos: position{line: 838, col: 5, offset: 27287},
											expr: &actionExpr{
												pos: position{line: 838, col: 6, offset: 27288},
												run: (*parser).callonDocumentHeaderAttributes86,
												expr: &seqExpr{
													pos: position{line: 838, col: 6, offset: 27288},
													exprs: []interface{}{
														&notExpr{
															pos: position{line: 838, col: 6, offset: 27288},
															expr: &choiceExpr{
																pos: position{line: 835, col: 29, offset: 27230},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 752, col: 5, offset: 24389},
																		run: (*parser).callonDocumentHeaderAttributes90,
																		expr: &seqExpr{
																			pos: position{line: 752, col: 5, offset: 24389},
																			exprs: []interface{}{
																				&labeledExpr{
																					pos:   position{line: 752, col: 5, offset: 24389},
																					label: "delimiter",
																					expr: &actionExpr{
																						pos: position{line: 752, col: 16, offset: 24400},
																						run: (*parser).callonDocumentHeaderAttributes93,
																						expr: &seqExpr{
																							pos: position{line: 752, col: 16, offset: 24400},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 752, col: 16, offset: 24400},
																									val:        "////",
																									ignoreCase: false,
																									want:       "\"////\"",
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 752, col: 23, offset: 24407},
																									expr: &litMatcher{
																										pos:        position{line: 752, col: 23, offset: 24407},
																										val:        "/",
																										ignoreCase: false,
																										want:       "\"/\"",
																									},
																								},
																							},
																						},
																					},
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 754, col: 8, offset: 24491},
																					expr: &actionExpr{
																						pos: position{line: 3080, col: 10, offset: 100200},
																						run: (*parser).callonDocumentHeaderAttributes99,
																						expr: &charClassMatcher{
																							pos:        position{line: 3080, col: 11, offset: 100201},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 3096, col: 8, offset: 100524},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 3089, col: 12, offset: 100384},
																							run: (*parser).callonDocumentHeaderAttributes102,
																							expr: &choiceExpr{
																								pos: position{line: 3089, col: 13, offset: 100385},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 3089, col: 13, offset: 100385},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 3089, col: 20, offset: 100392},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 3089, col: 29, offset: 100401},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 3093, col: 8, offset: 100474},
																							expr: &anyMatcher{
																								line: 3093, col: 9, offset: 100475,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 3093, col: 8, offset: 100474},
																		expr: &anyMatcher{
																			line: 3093, col: 9, offset: 100475,
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 839, col: 5, offset: 27318},
															label: "line",
															expr: &actionExpr{
																pos: position{line: 816, col: 5, offset: 26665},
																run: (*parser).callonDocumentHeaderAttributes112,
																expr: &seqExpr{
																	pos: position{line: 816, col: 5, offset: 26665},
																	exprs: []interface{}{
																		&notExpr{
																			pos: position{line: 816, col: 5, offset: 26665},
																			expr: &notExpr{
																				pos: position{line: 3093, col: 8, offset: 100474},
																				expr: &anyMatcher{
																					line: 3093, col: 9, offset: 100475,
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 817, col: 5, offset: 26738},
																			label: "content",
																			expr: &actionExpr{
																				pos: position{line: 817, col: 14, offset: 26747},
																				run: (*parser).callonDocumentHeaderAttributes118,
																				expr: &zeroOrMoreExpr{
																					pos: position{line: 817, col: 14, offset: 26747},
																					expr: &charClassMatcher{
																						pos:        position{line: 817, col: 14, offset: 26747},
																						val:        "[^\\r\\n]",
																						chars:      []rune{'\r', '\n'},
																						ignoreCase: false,
																						inverted:   true,
																					},
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 3096, col: 8, offset: 100524},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 3089, col: 12, offset: 100384},
																					run: (*parser).callonDocumentHeaderAttributes122,
																					expr: &choiceExpr{
																						pos: position{line: 3089, col: 13, offset: 100385},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 3089, col: 13, offset: 100385},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 3089, col: 20, offset: 100392},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 3089, col: 29, offset: 100401},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 3093, col: 8, offset: 100474},
																					expr: &anyMatcher{
																						line: 3093, col: 9, offset: 100475,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 829, col: 5, offset: 27035},
										expr: &choiceExpr{
											pos: position{line: 835, col: 29, offset: 27230},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 752, col: 5, offset: 24389},
													run: (*parser).callonDocumentHeaderAttributes131,
													expr: &seqExpr{
														pos: position{line: 752, col: 5, offset: 24389},
														exprs: []interface{}{
															&labeledExpr{
																pos:   position{line: 752, col: 5, offset: 24389},
																label: "delimiter",
																expr: &actionExpr{
																	pos: position{line: 752, col: 16, offset: 24400},
																	run: (*parser).callonDocumentHeaderAttributes134,
																	expr: &seqExpr{
																		pos: position{line: 752, col: 16, offset: 24400},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 752, col: 16, offset: 24400},
																				val:        "////",
																				ignoreCase: false,
																				want:       "\"////\"",
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 752, col: 23, offset: 24407},
																				expr: &litMatcher{
																					pos:        position{line: 752, col: 23, offset: 24407},
																					val:        "/",
																					ignoreCase: false,
																					want:       "\"/\"",
																				},
																			},
																		},
																	},
																},
															},
															&zeroOrMoreExpr{
																pos: position{line: 754, col: 8, offset: 24491},
																expr: &actionExpr{
																	pos: position{line: 3080, col: 10, offset: 100200},
																	run: (*parser).callonDocumentHeaderAttributes140,
																	expr: &charClassMatcher{
																		pos:        position{line: 3080, col: 11, offset: 100201},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 3096, col: 8, offset: 100524},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 3089, col: 12, offset: 100384},
																		run: (*parser).callonDocumentHeaderAttributes143,
																		expr: &choiceExpr{
																			pos: position{line: 3089, col: 13, offset: 100385},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 3089, col: 13, offset: 100385},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 3089, col: 20, offset: 100392},
																					val:        "\r\n",
																					ignoreCase: false,
																					want:       "\"\\r\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 3089, col: 29, offset: 100401},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 3093, col: 8, offset: 100474},
																		expr: &anyMatcher{
																			line: 3093, col: 9, offset: 100475,
																		},
																	},
																},
															},
														},
													},
												},
												&notExpr{
													pos: position{line: 3093, col: 8, offset: 100474},
													expr: &anyMatcher{
														line: 3093, col: 9, offset: 100475,
													},
												},
											},
										},
									},
								},
							},
						},
						&actionExpr{
							pos: position{line: 690, col: 14, offset: 22312},
							run: (*parser).callonDocumentHeaderAttributes152,
							expr: &seqExpr{
								pos: position{line: 690, col: 14, offset: 22312},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 690, col: 14, offset: 22312},
										expr: &notExpr{
											pos: position{line: 3093, col: 8, offset: 100474},
											expr: &anyMatcher{
												line: 3093, col: 9, offset: 100475,
											},
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 690, col: 19, offset: 22317},
										expr: &actionExpr{
											pos: position{line: 3080, col: 10, offset: 100200},
											run: (*parser).callonDocumentHeaderAttributes158,
											expr: &charClassMatcher{
												pos:        position{line: 3080, col: 11, offset: 100201},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
									&choiceExpr{
										pos: position{line: 3096, col: 8, offset: 100524},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 3089, col: 12, offset: 100384},
												run: (*parser).callonDocumentHeaderAttributes161,
												expr: &choiceExpr{
													pos: position{line: 3089, col: 13, offset: 100385},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 3089, col: 13, offset: 100385},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&litMatcher{
															pos:        position{line: 3089, col: 20, offset: 100392},
															val:        "\r\n",
															ignoreCase: false,
															want:       "\"\\r\\n\"",
														},
														&litMatcher{
															pos:        position{line: 3089, col: 29, offset: 100401},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 3093, col: 8, offset: 100474},
												expr: &anyMatcher{
													line: 3093, col: 9, offset: 100475,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElement",
			pos:  position{line: 1277, col: 1, offset: 40001},
			expr: &actionExpr{
				pos: position{line: 1278, col: 5, offset: 40024},
				run: (*parser).callonInlineElement1,
				expr: &labeledExpr{
					pos:   position{line: 1278, col: 5, offset: 40024},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1279, col: 9, offset: 40042},
						alternatives: []interface{}{
							&actionExpr{
								pos: position{line: 3013, col: 5, offset: 98136},
								run: (*parser).callonInlineElement4,
								expr: &seqExpr{
									pos: position{line: 3013, col: 5, offset: 98136},
									exprs: []interface{}{
										&oneOrMoreExpr{
											pos: position{line: 3013, col: 5, offset: 98136},
											expr: &charClassMatcher{
												pos:        position{line: 3013, col: 5, offset: 98136},
												val:        "[,;!?0-9\\pL]",
												chars:      []rune{',', ';', '!', '?'},
												ranges:     []rune{'0', '9'},
												classes:    []*unicode.RangeTable{rangeTable("L")},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&choiceExpr{
											pos: position{line: 3014, col: 6, offset: 98186},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 3080, col: 10, offset: 100200},
													run: (*parser).callonInlineElement9,
													expr: &charClassMatcher{
														pos:        position{line: 3080, col: 11, offset: 100201},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&andExpr{
													pos: position{line: 3014, col: 14, offset: 98194},
													expr: &choiceExpr{
														pos: position{line: 3014, col: 16, offset: 98196},
														alternatives: []interface{}{
															&charClassMatcher{
																pos:        position{line: 3014, col: 16, offset: 98196},
																val:        "[.�]",
																chars:      []rune{'.', '�'},
																ignoreCase: false,
																inverted:   false,
															},
															&actionExpr{
																pos: position{line: 3089, col: 12, offset: 100384},
																run: (*parser).callonInlineElement14,
																expr: &choiceExpr{
																	pos: position{line: 3089, col: 13, offset: 100385},
																	alternatives: []interface{}{
																		&litMatcher{
																			pos:        position{line: 3089, col: 13, offset: 100385},
																			val:        "\n",
																			ignoreCase: false,
																			want:       "\"\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 3089, col: 20, offset: 100392},
																			val:        "\r\n",
																			ignoreCase: false,
																			want:       "\"\\r\\n\"",
																		},
																		&litMatcher{
																			pos:        position{line: 3089, col: 29, offset: 100401},
																			val:        "\r",
																			ignoreCase: false,
																			want:       "\"\\r\"",
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 3093, col: 8, offset: 100474},
																expr: &anyMatcher{
																	line: 3093, col: 9, offset: 100475,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
							&actionExpr{
								pos: position{line: 3084, col: 11, offset: 100267},
								run: (*parser).callonInlineElement21,
								expr: &oneOrMoreExpr{
									pos: position{line: 3084, col: 11, offset: 100267},
									expr: &charClassMatcher{
										pos:        position{line: 3084, col: 12, offset: 100268},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
							&actionExpr{
								pos: position{line: 1227, col: 5, offset: 38587},
								run: (*parser).callonInlineElement24,
								expr: &seqExpr{
									pos: position{line: 1227, col: 5, offset: 38587},
									exprs: []interface{}{
										&andCodeExpr{
											pos: position{line: 1227, col: 5, offset: 38587},
											run: (*parser).callonInlineElement26,
										},
										&litMatcher{
											pos:        position{line: 1230, col: 5, offset: 38689},
											val:        "+",
											ignoreCase: false,
											want:       "\"+\"",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1230, col: 9, offset: 38693},
											expr: &actionExpr{
												pos: position{line: 3080, col: 10, offset: 100200},
												run: (*parser).callonInlineElement29,
												expr: &charClassMatcher{
													pos:        position{line: 3080, col: 11, offset: 100201},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
										&andExpr{
											pos: position{line: 1230, col: 16, offset: 38700},
											expr: &choiceExpr{
												pos: position{line: 3096, col: 8, offset: 100524},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 3089, col: 12, offset: 100384},
														run: (*parser).callonInlineElement33,
														expr: &choiceExpr{
															pos: position{line: 3089, col: 13, offset: 100385},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 3089, col: 13, offset: 100385},
																	val:        "\n",
																	ignoreCase: false,
																	want:       "\"\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 3089, col: 20, offset: 100392},
																	val:        "\r\n",
																	ignoreCase: false,
																	want:       "\"\\r\\n\"",
																},
																&litMatcher{
																	pos:        position{line: 3089, col: 29, offset: 100401},
																	val:        "\r",
																	ignoreCase: false,
																	want:       "\"\\r\"",
																},
															},
														},
													},
													&notExpr{
														pos: position{line: 3093, col: 8, offset: 100474},
														expr: &anyMatcher{
															line: 3093, col: 9, offset: 100475,
														},
													},
												},
											},
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 1282, col: 11, offset: 40141},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1282, col: 11, offset: 40141},
										expr: &choiceExpr{
											pos: position{line: 3096, col: 8, offset: 100524},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 3089, col: 12, offset: 100384},
													run: (*parser).callonInlineElement43,
													expr: &choiceExpr{
														pos: position{line: 3089, col: 13, offset: 100385},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 3089, col: 13, offset: 100385},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
															&litMatcher{
																pos:        position{line: 3089, col: 20, offset: 100392},
																val:        "\r\n",
																ignoreCase: false,
																want:       "\"\\r\\n\"",
															},
															&litMatcher{
																pos:        position{line: 3089, col: 29, offset: 100401},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
													},
												},
												&notExpr{
													pos: position{line: 3093, col: 8, offset: 100474},
													expr: &anyMatcher{
														line: 3093, col: 9, offset: 100475,
													},
												},
											},
										},
									},
									&choiceExpr{
										pos: position{line: 1283, col: 13, offset: 40184},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 2786, col: 5, offset: 91397},
												run: (*parser).callonInlineElement51,
												expr: &seqExpr{
													pos: position{line: 2786, col: 5, offset: 91397},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 2786, col: 5, offset: 91397},
															val:        "\\",
															ignoreCase: false,
															want:       "\"\\\\\"",
														},
														&choiceExpr{
															pos: position{line: 2786, col: 10, offset: 91402},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 2795, col: 5, offset: 91692},
																	run: (*parser).callonInlineElement55,
																	expr: &litMatcher{
																		pos:        position{line: 2795, col: 5, offset: 91692},
																		val:        "\"`",
																		ignoreCase: false,
																		want:       "\"\\\"`\"",
																	},
																},
																&actionExpr{
																	pos: position{line: 2798, col: 7, offset: 91750},
																	run: (*parser).callonInlineElement57,
																	expr: &litMatcher{
																		pos:        position{line: 2798, col: 7, offset: 91750},
																		val:        "`\"",
																		ignoreCase: false,
																		want:       "\"`\\\"\"",
																	},
																},
																&actionExpr{
																	pos: position{line: 2801, col: 7, offset: 91808},
																	run: (*parser).callonInlineElement59,
																	expr: &litMatcher{
																		pos:        position{line: 2801, col: 7, offset: 91808},
																		val:        "'`",
																		ignoreCase: false,
																		want:       "\"'`\"",
																	},
																},
																&actionExpr{
																	pos: position{line: 2804, col: 7, offset: 91864},
																	run: (*parser).callonInlineElement61,
																	expr: &litMatcher{
																		pos:        position{line: 2804, col: 7, offset: 91864},
																		val:        "`'",
																		ignoreCase: false,
																		want:       "\"`'\"",
																	},
																},
																&actionExpr{
																	pos: position{line: 2810, col: 14, offset: 91986},
																	run: (*parser).callonInlineElement63,
																	expr: &litMatcher{
																		pos:        position{line: 2810, col: 14, offset: 91986},
																		val:        "(C)",
																		ignoreCase: false,
																		want:       "\"(C)\"",
																	},
																},
																&actionExpr{
																	pos: position{line: 2814, col: 14, offset: 92052},
																	run: (*parser).callonInlineElement65,
																	expr: &litMatcher{
																		pos:        position{line: 2814, col: 14, offset: 92052},
																		val:        "(TM)",
																		ignoreCase: false,
																		want:       "\"(TM)\"",
																	},
																},
																&actionExpr{
																	pos: position{line: 2818, col: 15, offset: 92121},
																	run: (*parser).callonInlineElement67,
																	expr: &litMatcher{
																		pos:        position{line: 2818, col: 15, offset: 92121},
																		val:        "(R)",
																		ignoreCase: false,
																		want:       "\"(R)\"",
																	},
																},
																&actionExpr{
																	pos: position{line: 2822, col: 13, offset: 92186},
																	run: (*parser).callonInlineElement69,
																	expr: &litMatcher{
																		pos:        position{line: 2822, col: 13, offset: 92186},
																		val:        "...",
																		ignoreCase: false,
																		want:       "\"...\"",
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 2795, col: 5, offset: 91692},
												run: (*parser).callonInlineElement71,
												expr: &litMatcher{
													pos:        position{line: 2795, col: 5, offset: 91692},
													val:        "\"`",
													ignoreCase: false,
													want:       "\"\\\"`\"",
												},
											},
											&actionExpr{
												pos: position{line: 2798, col: 7, offset: 91750},
												run: (*parser).callonInlineElement73,
												expr: &litMatcher{
													pos:        position{line: 2798, col: 7, offset: 91750},
													val:        "`\"",
													ignoreCase: false,
													want:       "\"`\\\"\"",
												},
											},
											&actionExpr{
												pos: position{line: 2801, col: 7, offset: 91808},
												run: (*parser).callonInlineElement75,
												expr: &litMatcher{
													pos:        position{line: 2801, col: 7, offset: 91808},
													val:        "'`",
													ignoreCase: false,
													want:       "\"'`\"",
												},
											},
											&actionExpr{
												pos: position{line: 2804, col: 7, offset: 91864},
												run: (*parser).callonInlineElement77,
												expr: &litMatcher{
													pos:        position{line: 2804, col: 7, offset: 91864},
													val:        "`'",
													ignoreCase: false,
													want:       "\"`'\"",
												},
											},
											&actionExpr{
												pos: position{line: 2810, col: 14, offset: 91986},
												run: (*parser).callonInlineElement79,
												expr: &litMatcher{
													pos:        position{line: 2810, col: 14, offset: 91986},
													val:        "(C)",
													ignoreCase: false,
													want:       "\"(C)\"",
												},
											},
											&actionExpr{
												pos: position{line: 2814, col: 14, offset: 92052},
												run: (*parser).callonInlineElement81,
												expr: &litMatcher{
													pos:        position{line: 2814, col: 14, offset: 92052},
													val:        "(TM)",
													ignoreCase: false,
													want:       "\"(TM)\"",
												},
											},
											&actionExpr{
												pos: position{line: 2818, col: 15, offset: 92121},
												run: (*parser).callonInlineElement83,
												expr: &litMatcher{
													pos:        position{line: 2818, col: 15, offset: 92121},
													val:        "(R)",
													ignoreCase: false,
													want:       "\"(R)\"",
												},
											},
											&actionExpr{
												pos: position{line: 2822, col: 13, offset: 92186},
												run: (*parser).callonInlineElement85,
												expr: &litMatcher{
													pos:        position{line: 2822, col: 13, offset: 92186},
													val:        "...",
													ignoreCase: false,
													want:       "\"...\"",
												},
											},
											&actionExpr{
												pos: position{line: 2833, col: 5, offset: 92496},
												run: (*parser).callonInlineElement87,
												expr: &seqExpr{
													pos: position{line: 2833, col: 5, offset: 92496},
													exprs: []interface{}{
														&charClassMatcher{
															pos:        position{line: 2994, col: 13, offset: 97463},
															val:        "[0-9\\pL]",
															ranges:     []rune{'0', '9'},
															classes:    []*unicode.RangeTable{rangeTable("L")},
															ignoreCase: false,
															inverted:   false,
														},
														&litMatcher{
															pos:        position{line: 2833, col: 14, offset: 92505},
															val:        "\\'",
															ignoreCase: false,
															want:       "\"\\\\'\"",
														},
														&andExpr{
															pos: position{line: 2833, col: 19, offset: 92510},
															expr: &charClassMatcher{
																pos:        position{line: 2833, col: 20, offset: 92511},
																val:        "[\\pL]",
																classes:    []*unicode.RangeTable{rangeTable("L")},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 2839, col: 5, offset: 92742},
												run: (*parser).callonInlineElement93,
												expr: &seqExpr{
													pos: position{line: 2839, col: 5, offset: 92742},
													exprs: []interface{}{
														&charClassMatcher{
															pos:        position{line: 2994, col: 13, offset: 97463},
															val:        "[0-9\\pL]",
															ranges:     []rune{'0', '9'},
															classes:    []*unicode.RangeTable{rangeTable("L")},
															ignoreCase: false,
															inverted:   false,
														},
														&litMatcher{
															pos:        position{line: 2839, col: 14, offset: 92751},
															val:        "'",
															ignoreCase: false,
															want:       "\"'\"",
														},
														&andExpr{
															pos: position{line: 2839, col: 18, offset: 92755},
															expr: &charClassMatcher{
																pos:        position{line: 2839, col: 19, offset: 92756},
																val:        "[\\pL]",
																classes:    []*unicode.RangeTable{rangeTable("L")},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 1284, col: 15, offset: 40205},
												name: "Quote",
											},
											&actionExpr{
												pos: position{line: 648, col: 5, offset: 20883},
												run: (*parser).callonInlineElement100,
												expr: &seqExpr{
													pos: position{line: 648, col: 5, offset: 20883},
													exprs: []interface{}{
														&andCodeExpr{
															pos: position{line: 648, col: 5, offset: 20883},
															run: (*parser).callonInlineElement102,
														},
														&labeledExpr{
															pos:   position{line: 651, col: 5, offset: 20952},
															label: "element",
															expr: &choiceExpr{
																pos: position{line: 651, col: 14, offset: 20961},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 671, col: 25, offset: 21614},
																		run: (*parser).callonInlineElement105,
																		expr: &seqExpr{
																			pos: position{line: 671, col: 25, offset: 21614},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 671, col: 25, offset: 21614},
																					val:        "{counter:",
																					ignoreCase: false,
																					want:       "\"{counter:\"",
																				},
																				&labeledExpr{
																					pos:   position{line: 671, col: 37, offset: 21626},
																					label: "name",
																					expr: &actionExpr{
																						pos: position{line: 324, col: 18, offset: 10072},
																						run: (*parser).callonInlineElement109,
																						expr: &seqExpr{
																							pos: position{line: 324, col: 18, offset: 10072},
																							exprs: []interface{}{
																								&charClassMatcher{
																									pos:        position{line: 324, col: 18, offset: 10072},
																									val:        "[_0-9\\pL]",
																									chars:      []rune{'_'},
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 324, col: 28, offset: 10082},
																									expr: &charClassMatcher{
																										pos:        position{line: 324, col: 29, offset: 10083},
																										val:        "[-0-9\\pL]",
																										chars:      []rune{'-'},
																										ranges:     []rune{'0', '9'},
																										classes:    []*unicode.RangeTable{rangeTable("L")},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 671, col: 56, offset: 21645},
																					label: "start",
																					expr: &zeroOrOneExpr{
																						pos: position{line: 671, col: 62, offset: 21651},
																						expr: &actionExpr{
																							pos: position{line: 679, col: 17, offset: 21946},
																							run: (*parser).callonInlineElement116,
																							expr: &seqExpr{
																								pos: position{line: 679, col: 17, offset: 21946},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 679, col: 17, offset: 21946},
																										val:        ":",
																										ignoreCase: false,
																										want:       "\":\"",
																									},
																									&labeledExpr{
																										pos:   position{line: 679, col: 21, offset: 21950},
																										label: "start",
																										expr: &choiceExpr{
																											pos: position{line: 679, col: 28, offset: 21957},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 679, col: 28, offset: 21957},
																													run: (*parser).callonInlineElement121,
																													expr: &charClassMatcher{
																														pos:        position{line: 679, col: 28, offset: 21957},
																														val:        "[A-Za-z]",
																														ranges:     []rune{'A', 'Z', 'a', 'z'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&actionExpr{
																													pos: position{line: 681, col: 9, offset: 22011},
																													run: (*parser).callonInlineElement123,
																													expr: &oneOrMoreExpr{
																														pos: position{line: 681, col: 9, offset: 22011},
																														expr: &charClassMatcher{
																															pos:        position{line: 681, col: 9, offset: 22011},
																															val:        "[0-9]",
																															ranges:     []rune{'0', '9'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 671, col: 78, offset: 21667},
																					val:        "}",
																					ignoreCase: false,
																					want:       "\"}\"",
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 675, col: 25, offset: 21785},
																		run: (*parser).callonInlineElement127,
																		expr: &seqExpr{
																			pos: position{line: 675, col: 25, offset: 21785},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 675, col: 25, offset: 21785},
																					val:        "{counter2:",
																					ignoreCase: false,
																					want:       "\"{counter2:\"",
																				},
																				&labeledExpr{
																					pos:   position{line: 675, col: 38, offset: 21798},
																					label: "name",
																					expr: &actionExpr{
																						pos: position{line: 324, col: 18, offset: 10072},
																						run: (*parser).callonInlineElement131,
																						expr: &seqExpr{
																							pos: position{line: 324, col: 18, offset: 10072},
																							exprs: []interface{}{
																								&charClassMatcher{
																									pos:        position{line: 324, col: 18, offset: 10072},
																									val:        "[_0-9\\pL]",
																									chars:      []rune{'_'},
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 324, col: 28, offset: 10082},
																									expr: &charClassMatcher{
																										pos:        position{line: 324, col: 29, offset: 10083},
																										val:        "[-0-9\\pL]",
																										chars:      []rune{'-'},
																										ranges:     []rune{'0', '9'},
																										classes:    []*unicode.RangeTable{rangeTable("L")},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 675, col: 57, offset: 21817},
																					label: "start",
																					expr: &zeroOrOneExpr{
																						pos: position{line: 675, col: 63, offset: 21823},
																						expr: &actionExpr{
																							pos: position{line: 679, col: 17, offset: 21946},
																							run: (*parser).callonInlineElement138,
																							expr: &seqExpr{
																								pos: position{line: 679, col: 17, offset: 21946},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 679, col: 17, offset: 21946},
																										val:        ":",
																										ignoreCase: false,
																										want:       "\":\"",
																									},
																									&labeledExpr{
																										pos:   position{line: 679, col: 21, offset: 21950},
																										label: "start",
																										expr: &choiceExpr{
																											pos: position{line: 679, col: 28, offset: 21957},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 679, col: 28, offset: 21957},
																													run: (*parser).callonInlineElement143,
																													expr: &charClassMatcher{
																														pos:        position{line: 679, col: 28, offset: 21957},
																														val:        "[A-Za-z]",
																														ranges:     []rune{'A', 'Z', 'a', 'z'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																												&actionExpr{
																													pos: position{line: 681, col: 9, offset: 22011},
																													run: (*parser).callonInlineElement145,
																													expr: &oneOrMoreExpr{
																														pos: position{line: 681, col: 9, offset: 22011},
																														expr: &charClassMatcher{
																															pos:        position{line: 681, col: 9, offset: 22011},
																															val:        "[0-9]",
																															ranges:     []rune{'0', '9'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 675, col: 79, offset: 21839},
																					val:        "}",
																					ignoreCase: false,
																					want:       "\"}\"",
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 657, col: 5, offset: 21090},
																		run: (*parser).callonInlineElement149,
																		expr: &seqExpr{
																			pos: position{line: 657, col: 5, offset: 21090},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 657, col: 5, offset: 21090},
																					val:        "\\{",
																					ignoreCase: false,
																					want:       "\"\\\\{\"",
																				},
																				&labeledExpr{
																					pos:   position{line: 657, col: 13, offset: 21098},
																					label: "name",
																					expr: &actionExpr{
																						pos: position{line: 324, col: 18, offset: 10072},
																						run: (*parser).callonInlineElement153,
																						expr: &seqExpr{
																							pos: position{line: 324, col: 18, offset: 10072},
																							exprs: []interface{}{
																								&charClassMatcher{
																									pos:        position{line: 324, col: 18, offset: 10072},
																									val:        "[_0-9\\pL]",
																									chars:      []rune{'_'},
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 324, col: 28, offset: 10082},
																									expr: &charClassMatcher{
																										pos:        position{line: 324, col: 29, offset: 10083},
																										val:        "[-0-9\\pL]",
																										chars:      []rune{'-'},
																										ranges:     []rune{'0', '9'},
																										classes:    []*unicode.RangeTable{rangeTable("L")},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 657, col: 32, offset: 21117},
																					val:        "}",
																					ignoreCase: false,
																					want:       "\"}\"",
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 664, col: 5, offset: 21358},
																		run: (*parser).callonInlineElement159,
																		expr: &seqExpr{
																			pos: position{line: 664, col: 5, offset: 21358},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 664, col: 5, offset: 21358},
																					val:        "{",
																					ignoreCase: false,
																					want:       "\"{\"",
																				},
																				&labeledExpr{
																					pos:   position{line: 664, col: 9, offset: 21362},
																					label: "name",
																					expr: &actionExpr{
																						pos: position{line: 324, col: 18, offset: 10072},
																						run: (*parser).callonInlineElement163,
																						expr: &seqExpr{
																							pos: position{line: 324, col: 18, offset: 10072},
																							exprs: []interface{}{
																								&charClassMatcher{
																									pos:        position{line: 324, col: 18, offset: 10072},
																									val:        "[_0-9\\pL]",
																									chars:      []rune{'_'},
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 324, col: 28, offset: 10082},
																									expr: &charClassMatcher{
																										pos:        position{line: 324, col: 29, offset: 10083},
																										val:        "[-0-9\\pL]",
																										chars:      []rune{'-'},
																										ranges:     []rune{'0', '9'},
																										classes:    []*unicode.RangeTable{rangeTable("L")},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 664, col: 28, offset: 21381},
																					val:        "}",
																					ignoreCase: false,
																					want:       "\"}\"",
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 1286, col: 15, offset: 40259},
												name: "InlineMacro",
											},
											&actionExpr{
												pos: position{line: 2753, col: 5, offset: 90225},
												run: (*parser).callonInlineElement170,
												expr: &seqExpr{
													pos: position{line: 2753, col: 5, offset: 90225},
													exprs: []interface{}{
														&andCodeExpr{
															pos: position{line: 2753, col: 5, offset: 90225},
															run: (*parser).callonInlineElement172,
														},
														&labeledExpr{
															pos:   position{line: 2756, col: 5, offset: 90301},
															label: "element",
															expr: &choiceExpr{
																pos: position{line: 2758, col: 9, offset: 90399},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 2758, col: 9, offset: 90399},
																		run: (*parser).callonInlineElement175,
																		expr: &choiceExpr{
																			pos: position{line: 699, col: 27, offset: 22665},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 699, col: 27, offset: 22665},
																					run: (*parser).callonInlineElement177,
																					expr: &seqExpr{
																						pos: position{line: 699, col: 27, offset: 22665},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 699, col: 27, offset: 22665},
																								val:        "<<",
																								ignoreCase: false,
																								want:       "\"<<\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 699, col: 32, offset: 22670},
																								label: "id",
																								expr: &actionExpr{
																									pos: position{line: 3065, col: 7, offset: 99852},
																									run: (*parser).callonInlineElement181,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 3065, col: 7, offset: 99852},
																										expr: &charClassMatcher{
																											pos:        position{line: 3065, col: 7, offset: 99852},
																											val:        "[^[]<>,]",
																											chars:      []rune{'[', ']', '<', '>', ','},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																								},
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 699, col: 40, offset: 22678},
																								expr: &actionExpr{
																									pos: position{line: 3080, col: 10, offset: 100200},
																									run: (*parser).callonInlineElement185,
																									expr: &charClassMatcher{
																										pos:        position{line: 3080, col: 11, offset: 100201},
																										val:        "[ \\t]",
																										chars:      []rune{' ', '\t'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 699, col: 47, offset: 22685},
																								val:        ",",
																								ignoreCase: false,
																								want:       "\",\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 699, col: 51, offset: 22689},
																								label: "label",
																								expr: &oneOrMoreExpr{
																									pos: position{line: 709, col: 24, offset: 23090},
																									expr: &choiceExpr{
																										pos: position{line: 710, col: 5, offset: 23096},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 710, col: 6, offset: 23097},
																												run: (*parser).callonInlineElement191,
																												expr: &seqExpr{
																													pos: position{line: 710, col: 6, offset: 23097},
																													exprs: []interface{}{
																														&charClassMatcher{
																															pos:        position{line: 710, col: 6, offset: 23097},
																															val:        "[0-9\\pL]",
																															ranges:     []rune{'0', '9'},
																															classes:    []*unicode.RangeTable{rangeTable("L")},
																															ignoreCase: false,
																															inverted:   false,
																														},
																														&oneOrMoreExpr{
																															pos: position{line: 710, col: 14, offset: 23105},
																															expr: &charClassMatcher{
																																pos:        position{line: 710, col: 14, offset: 23105},
																																val:        "[^\\r\\n{<>]",
																																chars:      []rune{'\r', '\n', '{', '<', '>'},
																																ignoreCase: false,
																																inverted:   true,
																															},
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 657, col: 5, offset: 21090},
																												run: (*parser).callonInlineElement196,
																												expr: &seqExpr{
																													pos: position{line: 657, col: 5, offset: 21090},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 657, col: 5, offset: 21090},
																															val:        "\\{",
																															ignoreCase: false,
																															want:       "\"\\\\{\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 657, col: 13, offset: 21098},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 324, col: 18, offset: 10072},
																																run: (*parser).callonInlineElement200,
																																expr: &seqExpr{
																																	pos: position{line: 324, col: 18, offset: 10072},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 324, col: 18, offset: 10072},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 324, col: 28, offset: 10082},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 324, col: 29, offset: 10083},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 657, col: 32, offset: 21117},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 664, col: 5, offset: 21358},
																												run: (*parser).callonInlineElement206,
																												expr: &seqExpr{
																													pos: position{line: 664, col: 5, offset: 21358},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 664, col: 5, offset: 21358},
																															val:        "{",
																															ignoreCase: false,
																															want:       "\"{\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 664, col: 9, offset: 21362},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 324, col: 18, offset: 10072},
																																run: (*parser).callonInlineElement210,
																																expr: &seqExpr{
																																	pos: position{line: 324, col: 18, offset: 10072},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 324, col: 18, offset: 10072},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 324, col: 28, offset: 10082},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 324, col: 29, offset: 10083},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 664, col: 28, offset: 21381},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 714, col: 8, offset: 23331},
																												run: (*parser).callonInlineElement216,
																												expr: &litMatcher{
																													pos:        position{line: 714, col: 8, offset: 23331},
																													val:        "{",
																													ignoreCase: false,
																													want:       "\"{\"",
																												},
																											},
																										},
																									},
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 699, col: 79, offset: 22717},
																								val:        ">>",
																								ignoreCase: false,
																								want:       "\">>\"",
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 701, col: 9, offset: 22790},
																					run: (*parser).callonInlineElement219,
																					expr: &seqExpr{
																						pos: position{line: 701, col: 9, offset: 22790},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 701, col: 9, offset: 22790},
																								val:        "<<",
																								ignoreCase: false,
																								want:       "\"<<\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 701, col: 14, offset: 22795},
																								label: "id",
																								expr: &actionExpr{
																									pos: position{line: 3065, col: 7, offset: 99852},
																									run: (*parser).callonInlineElement223,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 3065, col: 7, offset: 99852},
																										expr: &charClassMatcher{
																											pos:        position{line: 3065, col: 7, offset: 99852},
																											val:        "[^[]<>,]",
																											chars:      []rune{'[', ']', '<', '>', ','},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 701, col: 22, offset: 22803},
																								val:        ">>",
																								ignoreCase: false,
																								want:       "\">>\"",
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 2761, col: 11, offset: 90503},
																		run: (*parser).callonInlineElement227,
																		expr: &charClassMatcher{
																			pos:        position{line: 2761, col: 12, offset: 90504},
																			val:        "[<>&]",
																			chars:      []rune{'<', '>', '&'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 1219, col: 23, offset: 38141},
												run: (*parser).callonInlineElement229,
												expr: &seqExpr{
													pos: position{line: 1219, col: 23, offset: 38141},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 1217, col: 32, offset: 38109},
															val:        "�",
															ignoreCase: false,
															want:       "\"�\"",
														},
														&labeledExpr{
															pos:   position{line: 1219, col: 51, offset: 38169},
															label: "ref",
															expr: &actionExpr{
																pos: position{line: 1219, col: 56, offset: 38174},
																run: (*parser).callonInlineElement233,
																expr: &oneOrMoreExpr{
																	pos: position{line: 1219, col: 56, offset: 38174},
																	expr: &charClassMatcher{
																		pos:        position{line: 1219, col: 56, offset: 38174},
																		val:        "[0-9]",
																		ranges:     []rune{'0', '9'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 1217, col: 32, offset: 38109},
															val:        "�",
															ignoreCase: false,
															want:       "\"�\"",
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 3032, col: 12, offset: 98735},
												run: (*parser).callonInlineElement237,
												expr: &anyMatcher{
													line: 3032, col: 12, offset: 98735,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineButton",
			pos:  position{line: 1313, col: 1, offset: 41320},
			expr: &actionExpr{
				pos: position{line: 1314, col: 5, offset: 41341},
				run: (*parser).callonInlineButton1,
				expr: &seqExpr{
					pos: position{line: 1314, col: 5, offset: 41341},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 1314, col: 5, offset: 41341},
							run: (*parser).callonInlineButton3,
						},
						&litMatcher{
							pos:        position{line: 1317, col: 5, offset: 41400},
							val:        "btn:",
							ignoreCase: false,
							want:       "\"btn:\"",
						},
						&labeledExpr{
							pos:   position{line: 1317, col: 12, offset: 41407},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1317, col: 24, offset: 41419},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineMenu",
			pos:  position{line: 1324, col: 1, offset: 41707},
			expr: &actionExpr{
				pos: position{line: 1325, col: 5, offset: 41726},
				run: (*parser).callonInlineMenu1,
				expr: &seqExpr{
					pos: position{line: 1325, col: 5, offset: 41726},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 1325, col: 5, offset: 41726},
							run: (*parser).callonInlineMenu3,
						},
						&litMatcher{
							pos:        position{line: 1328, col: 5, offset: 41785},
							val:        "menu:",
							ignoreCase: false,
							want:       "\"menu:\"",
						},
						&labeledExpr{
							pos:   position{line: 1328, col: 13, offset: 41793},
							label: "id",
							expr: &actionExpr{
								pos: position{line: 3065, col: 7, offset: 99852},
								run: (*parser).callonInlineMenu6,
								expr: &oneOrMoreExpr{
									pos: position{line: 3065, col: 7, offset: 99852},
									expr: &charClassMatcher{
										pos:        position{line: 3065, col: 7, offset: 99852},
										val:        "[^[]<>,]",
										chars:      []rune{'[', ']', '<', '>', ','},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1328, col: 21, offset: 41801},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1328, col: 33, offset: 41813},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "IndexTerm",
			pos:  position{line: 1335, col: 1, offset: 42112},
			expr: &actionExpr{
				pos: position{line: 1335, col: 14, offset: 42125},
				run: (*parser).callonIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 1335, col: 14, offset: 42125},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1335, col: 14, offset: 42125},
							val:        "((",
							ignoreCase: false,
							want:       "\"((\"",
						},
						&labeledExpr{
							pos:   position{line: 1335, col: 19, offset: 42130},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 1335, col: 25, offset: 42136},
								name: "IndexTermContent",
							},
						},
						&litMatcher{
							pos:        position{line: 1335, col: 43, offset: 42154},
							val:        "))",
							ignoreCase: false,
							want:       "\"))\"",
						},
					},
				},
			},
		},
		{
			name: "IndexTermContent",
			pos:  position{line: 1339, col: 1, offset: 42223},
			expr: &actionExpr{
				pos: position{line: 1339, col: 21, offset: 42243},
				run: (*parser).callonIndexTermContent1,
				expr: &labeledExpr{
					pos:   position{line: 1339, col: 21, offset: 42243},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1339, col: 30, offset: 42252},
						expr: &choiceExpr{
							pos: position{line: 1339, col: 31, offset: 42253},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 3006, col: 5, offset: 97918},
									run: (*parser).callonIndexTermContent5,
									expr: &seqExpr{
										pos: position{line: 3006, col: 5, offset: 97918},
										exprs: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 3006, col: 5, offset: 97918},
												expr: &charClassMatcher{
													pos:        position{line: 3006, col: 5, offset: 97918},
													val:        "[0-9\\pL]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&andExpr{
												pos: position{line: 3006, col: 15, offset: 97928},
												expr: &choiceExpr{
													pos: position{line: 3006, col: 17, offset: 97930},
													alternatives: []interface{}{
														&charClassMatcher{
															pos:        position{line: 3006, col: 17, offset: 97930},
															val:        "[\\r\\n ,]]",
															chars:      []rune{'\r', '\n', ' ', ',', ']'},
															ignoreCase: false,
															inverted:   false,
														},
														&notExpr{
															pos: position{line: 3093, col: 8, offset: 100474},
															expr: &anyMatcher{
																line: 3093, col: 9, offset: 100475,
															},
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 3008, col: 9, offset: 98012},
									run: (*parser).callonIndexTermContent14,
									expr: &seqExpr{
										pos: position{line: 3008, col: 9, offset: 98012},
										exprs: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 3008, col: 9, offset: 98012},
												expr: &charClassMatcher{
													pos:        position{line: 3008, col: 9, offset: 98012},
													val:        "[0-9\\pL]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&oneOrMoreExpr{
												pos: position{line: 3008, col: 19, offset: 98022},
												expr: &seqExpr{
													pos: position{line: 3008, col: 20, offset: 98023},
													exprs: []interface{}{
														&charClassMatcher{
															pos:        position{line: 3008, col: 20, offset: 98023},
															val:        "[=*_`]",
															chars:      []rune{'=', '*', '_', '`'},
															ignoreCase: false,
															inverted:   false,
														},
														&oneOrMoreExpr{
															pos: position{line: 3008, col: 27, offset: 98030},
															expr: &charClassMatcher{
																pos:        position{line: 3008, col: 27, offset: 98030},
																val:        "[0-9\\pL]",
																ranges:     []rune{'0', '9'},
																classes:    []*unicode.RangeTable{rangeTable("L")},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1339, col: 38, offset: 42260},
									name: "QuotedText",
								},
								&actionExpr{
									pos: position{line: 3080, col: 10, offset: 100200},
									run: (*parser).callonIndexTermContent24,
									expr: &charClassMatcher{
										pos:        position{line: 3080, col: 11, offset: 100201},
										val:        "[ \\t]",
										chars:      []rune{' ', '\t'},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&actionExpr{
									pos: position{line: 2753, col: 5, offset: 90225},
									run: (*parser).callonIndexTermContent26,
									expr: &seqExpr{
										pos: position{line: 2753, col: 5, offset: 90225},
										exprs: []interface{}{
											&andCodeExpr{
												pos: position{line: 2753, col: 5, offset: 90225},
												run: (*parser).callonIndexTermContent28,
											},
											&labeledExpr{
												pos:   position{line: 2756, col: 5, offset: 90301},
												label: "element",
												expr: &choiceExpr{
													pos: position{line: 2758, col: 9, offset: 90399},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2758, col: 9, offset: 90399},
															run: (*parser).callonIndexTermContent31,
															expr: &choiceExpr{
																pos: position{line: 699, col: 27, offset: 22665},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 699, col: 27, offset: 22665},
																		run: (*parser).callonIndexTermContent33,
																		expr: &seqExpr{
																			pos: position{line: 699, col: 27, offset: 22665},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 699, col: 27, offset: 22665},
																					val:        "<<",
																					ignoreCase: false,
																					want:       "\"<<\"",
																				},
																				&labeledExpr{
																					pos:   position{line: 699, col: 32, offset: 22670},
																					label: "id",
																					expr: &actionExpr{
																						pos: position{line: 3065, col: 7, offset: 99852},
																						run: (*parser).callonIndexTermContent37,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 3065, col: 7, offset: 99852},
																							expr: &charClassMatcher{
																								pos:        position{line: 3065, col: 7, offset: 99852},
																								val:        "[^[]<>,]",
																								chars:      []rune{'[', ']', '<', '>', ','},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 699, col: 40, offset: 22678},
																					expr: &actionExpr{
																						pos: position{line: 3080, col: 10, offset: 100200},
																						run: (*parser).callonIndexTermContent41,
																						expr: &charClassMatcher{
																							pos:        position{line: 3080, col: 11, offset: 100201},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 699, col: 47, offset: 22685},
																					val:        ",",
																					ignoreCase: false,
																					want:       "\",\"",
																				},
																				&labeledExpr{
																					pos:   position{line: 699, col: 51, offset: 22689},
																					label: "label",
																					expr: &oneOrMoreExpr{
																						pos: position{line: 709, col: 24, offset: 23090},
																						expr: &choiceExpr{
																							pos: position{line: 710, col: 5, offset: 23096},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 710, col: 6, offset: 23097},
																									run: (*parser).callonIndexTermContent47,
																									expr: &seqExpr{
																										pos: position{line: 710, col: 6, offset: 23097},
																										exprs: []interface{}{
																											&charClassMatcher{
																												pos:        position{line: 710, col: 6, offset: 23097},
																												val:        "[0-9\\pL]",
																												ranges:     []rune{'0', '9'},
																												classes:    []*unicode.RangeTable{rangeTable("L")},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&oneOrMoreExpr{
																												pos: position{line: 710, col: 14, offset: 23105},
																												expr: &charClassMatcher{
																													pos:        position{line: 710, col: 14, offset: 23105},
																													val:        "[^\\r\\n{<>]",
																													chars:      []rune{'\r', '\n', '{', '<', '>'},
																													ignoreCase: false,
																													inverted:   true,
																												},
																											},
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 657, col: 5, offset: 21090},
																									run: (*parser).callonIndexTermContent52,
																									expr: &seqExpr{
																										pos: position{line: 657, col: 5, offset: 21090},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 657, col: 5, offset: 21090},
																												val:        "\\{",
																												ignoreCase: false,
																												want:       "\"\\\\{\"",
																											},
																											&labeledExpr{
																												pos:   position{line: 657, col: 13, offset: 21098},
																												label: "name",
																												expr: &actionExpr{
																													pos: position{line: 324, col: 18, offset: 10072},
																													run: (*parser).callonIndexTermContent56,
																													expr: &seqExpr{
																														pos: position{line: 324, col: 18, offset: 10072},
																														exprs: []interface{}{
																															&charClassMatcher{
																																pos:        position{line: 324, col: 18, offset: 10072},
																																val:        "[_0-9\\pL]",
																																chars:      []rune{'_'},
																																ranges:     []rune{'0', '9'},
																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																ignoreCase: false,
																																inverted:   false,
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 324, col: 28, offset: 10082},
																																expr: &charClassMatcher{
																																	pos:        position{line: 324, col: 29, offset: 10083},
																																	val:        "[-0-9\\pL]",
																																	chars:      []rune{'-'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																													},
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 657, col: 32, offset: 21117},
																												val:        "}",
																												ignoreCase: false,
																												want:       "\"}\"",
																											},
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 664, col: 5, offset: 21358},
																									run: (*parser).callonIndexTermContent62,
																									expr: &seqExpr{
																										pos: position{line: 664, col: 5, offset: 21358},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 664, col: 5, offset: 21358},
																												val:        "{",
																												ignoreCase: false,
																												want:       "\"{\"",
																											},
																											&labeledExpr{
																												pos:   position{line: 664, col: 9, offset: 21362},
																												label: "name",
																												expr: &actionExpr{
																													pos: position{line: 324, col: 18, offset: 10072},
																													run: (*parser).callonIndexTermContent66,
																													expr: &seqExpr{
																														pos: position{line: 324, col: 18, offset: 10072},
																														exprs: []interface{}{
																															&charClassMatcher{
																																pos:        position{line: 324, col: 18, offset: 10072},
																																val:        "[_0-9\\pL]",
																																chars:      []rune{'_'},
																																ranges:     []rune{'0', '9'},
																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																ignoreCase: false,
																																inverted:   false,
																															},
																															&zeroOrMoreExpr{
																																pos: position{line: 324, col: 28, offset: 10082},
																																expr: &charClassMatcher{
																																	pos:        position{line: 324, col: 29, offset: 10083},
																																	val:        "[-0-9\\pL]",
																																	chars:      []rune{'-'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																													},
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 664, col: 28, offset: 21381},
																												val:        "}",
																												ignoreCase: false,
																												want:       "\"}\"",
																											},
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 714, col: 8, offset: 23331},
																									run: (*parser).callonIndexTermContent72,
																									expr: &litMatcher{
																										pos:        position{line: 714, col: 8, offset: 23331},
																										val:        "{",
																										ignoreCase: false,
																										want:       "\"{\"",
																									},
																								},
																							},
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 699, col: 79, offset: 22717},
																					val:        ">>",
																					ignoreCase: false,
																					want:       "\">>\"",
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 701, col: 9, offset: 22790},
																		run: (*parser).callonIndexTermContent75,
																		expr: &seqExpr{
																			pos: position{line: 701, col: 9, offset: 22790},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 701, col: 9, offset: 22790},
																					val:        "<<",
																					ignoreCase: false,
																					want:       "\"<<\"",
																				},
																				&labeledExpr{
																					pos:   position{line: 701, col: 14, offset: 22795},
																					label: "id",
																					expr: &actionExpr{
																						pos: position{line: 3065, col: 7, offset: 99852},
																						run: (*parser).callonIndexTermContent79,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 3065, col: 7, offset: 99852},
																							expr: &charClassMatcher{
																								pos:        position{line: 3065, col: 7, offset: 99852},
																								val:        "[^[]<>,]",
																								chars:      []rune{'[', ']', '<', '>', ','},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 701, col: 22, offset: 22803},
																					val:        ">>",
																					ignoreCase: false,
																					want:       "\">>\"",
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 2761, col: 11, offset: 90503},
															run: (*parser).callonIndexTermContent83,
															expr: &charClassMatcher{
																pos:        position{line: 2761, col: 12, offset: 90504},
																val:        "[<>&]",
																chars:      []rune{'<', '>', '&'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 1219, col: 23, offset: 38141},
									run: (*parser).callonIndexTermContent85,
									expr: &seqExpr{
										pos: position{line: 1219, col: 23, offset: 38141},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1217, col: 32, offset: 38109},
												val:        "�",
												ignoreCase: false,
												want:       "\"�\"",
											},
											&labeledExpr{
												pos:   position{line: 1219, col: 51, offset: 38169},
												label: "ref",
												expr: &actionExpr{
													pos: position{line: 1219, col: 56, offset: 38174},
													run: (*parser).callonIndexTermContent89,
													expr: &oneOrMoreExpr{
														pos: position{line: 1219, col: 56, offset: 38174},
														expr: &charClassMatcher{
															pos:        position{line: 1219, col: 56, offset: 38174},
															val:        "[0-9]",
															ranges:     []rune{'0', '9'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
											&litMatcher{
												pos:        position{line: 1217, col: 32, offset: 38109},
												val:        "�",
												ignoreCase: false,
												want:       "\"�\"",
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 1339, col: 99, offset: 42321},
									run: (*parser).callonIndexTermContent93,
									expr: &seqExpr{
										pos: position{line: 1339, col: 100, offset: 42322},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1339, col: 100, offset: 42322},
												expr: &litMatcher{
													pos:        position{line: 1339, col: 101, offset: 42323},
													val:        "))",
													ignoreCase: false,
													want:       "\"))\"",
												},
											},
											&anyMatcher{
												line: 1339, col: 106, offset: 42328,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageBlock",
			pos:  position{line: 1359, col: 1, offset: 43037},
			expr: &actionExpr{
				pos: position{line: 1360, col: 5, offset: 43056},
				run: (*parser).callonImageBlock1,
				expr: &seqExpr{
					pos: position{line: 1360, col: 5, offset: 43056},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1360, col: 5, offset: 43056},
							val:        "image::",
							ignoreCase: false,
							want:       "\"image::\"",
						},
						&labeledExpr{
							pos:   position{line: 1360, col: 15, offset: 43066},
							label: "path",
							expr: &actionExpr{
								pos: position{line: 3040, col: 13, offset: 98936},
								run: (*parser).callonImageBlock5,
								expr: &seqExpr{
									pos: position{line: 3040, col: 13, offset: 98936},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 3040, col: 13, offset: 98936},
											label: "scheme",
											expr: &zeroOrOneExpr{
												pos: position{line: 3040, col: 20, offset: 98943},
												expr: &choiceExpr{
													pos: position{line: 3048, col: 11, offset: 99205},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 3048, col: 11, offset: 99205},
															val:        "http://",
															ignoreCase: false,
															want:       "\"http://\"",
														},
														&litMatcher{
															pos:        position{line: 3048, col: 23, offset: 99217},
															val:        "https://",
															ignoreCase: false,
															want:       "\"https://\"",
														},
														&litMatcher{
															pos:        position{line: 3048, col: 36, offset: 99230},
															val:        "ftp://",
															ignoreCase: false,
															want:       "\"ftp://\"",
														},
														&litMatcher{
															pos:        position{line: 3048, col: 47, offset: 99241},
															val:        "irc://",
															ignoreCase: false,
															want:       "\"irc://\"",
														},
														&litMatcher{
															pos:        position{line: 3048, col: 58, offset: 99252},
															val:        "mailto:",
															ignoreCase: false,
															want:       "\"mailto:\"",
														},
													},
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 3040, col: 30, offset: 98953},
											label: "path",
											expr: &oneOrMoreExpr{
												pos: position{line: 3040, col: 35, offset: 98958},
												expr: &choiceExpr{
													pos: position{line: 3040, col: 36, offset: 98959},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 3051, col: 5, offset: 99280},
															run: (*parser).callonImageBlock18,
															expr: &seqExpr{
																pos: position{line: 3051, col: 5, offset: 99280},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 3051, col: 5, offset: 99280},
																		expr: &litMatcher{
																			pos:        position{line: 3051, col: 6, offset: 99281},
																			val:        "[",
																			ignoreCase: false,
																			want:       "\"[\"",
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 3052, col: 5, offset: 99305},
																		label: "elements",
																		expr: &oneOrMoreExpr{
																			pos: position{line: 3052, col: 14, offset: 99314},
																			expr: &choiceExpr{
																				pos: position{line: 3053, col: 9, offset: 99324},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 3053, col: 9, offset: 99324},
																						run: (*parser).callonImageBlock25,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 3053, col: 9, offset: 99324},
																							expr: &charClassMatcher{
																								pos:        position{line: 3053, col: 10, offset: 99325},
																								val:        "[^\\r\\n[]�{.,;?!<> ]",
																								chars:      []rune{'\r', '\n', '[', ']', '�', '{', '.', ',', ';', '?', '!', '<', '>', ' '},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																					&seqExpr{
																						pos: position{line: 3056, col: 11, offset: 99590},
																						exprs: []interface{}{
																							&actionExpr{
																								pos: position{line: 3026, col: 25, offset: 98561},
																								run: (*parser).callonImageBlock29,
																								expr: &charClassMatcher{
																									pos:        position{line: 3026, col: 25, offset: 98561},
																									val:        "[.,;?!]",
																									chars:      []rune{'.', ',', ';', '?', '!'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&andExpr{
																								pos: position{line: 3056, col: 32, offset: 99611},
																								expr: &notExpr{
																									pos: position{line: 3056, col: 34, offset: 99613},
																									expr: &choiceExpr{
																										pos: position{line: 3056, col: 36, offset: 99615},
																										alternatives: []interface{}{
																											&notExpr{
																												pos: position{line: 3093, col: 8, offset: 100474},
																												expr: &anyMatcher{
																													line: 3093, col: 9, offset: 100475,
																												},
																											},
																											&actionExpr{
																												pos: position{line: 3080, col: 10, offset: 100200},
																												run: (*parser).callonImageBlock36,
																												expr: &charClassMatcher{
																													pos:        position{line: 3080, col: 11, offset: 100201},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 648, col: 5, offset: 20883},
																						run: (*parser).callonImageBlock38,
																						expr: &seqExpr{
																							pos: position{line: 648, col: 5, offset: 20883},
																							exprs: []interface{}{
																								&andCodeExpr{
																									pos: position{line: 648, col: 5, offset: 20883},
																									run: (*parser).callonImageBlock40,
																								},
																								&labeledExpr{
																									pos:   position{line: 651, col: 5, offset: 20952},
																									label: "element",
																									expr: &choiceExpr{
																										pos: position{line: 651, col: 14, offset: 20961},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 671, col: 25, offset: 21614},
																												run: (*parser).callonImageBlock43,
																												expr: &seqExpr{
																													pos: position{line: 671, col: 25, offset: 21614},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 671, col: 25, offset: 21614},
																															val:        "{counter:",
																															ignoreCase: false,
																															want:       "\"{counter:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 671, col: 37, offset: 21626},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 324, col: 18, offset: 10072},
																																run: (*parser).callonImageBlock47,
																																expr: &seqExpr{
																																	pos: position{line: 324, col: 18, offset: 10072},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 324, col: 18, offset: 10072},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 324, col: 28, offset: 10082},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 324, col: 29, offset: 10083},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 671, col: 56, offset: 21645},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 671, col: 62, offset: 21651},
																																expr: &actionExpr{
																																	pos: position{line: 679, col: 17, offset: 21946},
																																	run: (*parser).callonImageBlock54,
																																	expr: &seqExpr{
																																		pos: position{line: 679, col: 17, offset: 21946},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 679, col: 17, offset: 21946},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 679, col: 21, offset: 21950},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 679, col: 28, offset: 21957},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 679, col: 28, offset: 21957},
																																							run: (*parser).callonImageBlock59,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 679, col: 28, offset: 21957},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 681, col: 9, offset: 22011},
																																							run: (*parser).callonImageBlock61,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 681, col: 9, offset: 22011},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 681, col: 9, offset: 22011},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 671, col: 78, offset: 21667},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 675, col: 25, offset: 21785},
																												run: (*parser).callonImageBlock65,
																												expr: &seqExpr{
																													pos: position{line: 675, col: 25, offset: 21785},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 675, col: 25, offset: 21785},
																															val:        "{counter2:",
																															ignoreCase: false,
																															want:       "\"{counter2:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 675, col: 38, offset: 21798},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 324, col: 18, offset: 10072},
																																run: (*parser).callonImageBlock69,
																																expr: &seqExpr{
																																	pos: position{line: 324, col: 18, offset: 10072},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 324, col: 18, offset: 10072},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 324, col: 28, offset: 10082},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 324, col: 29, offset: 10083},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 675, col: 57, offset: 21817},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 675, col: 63, offset: 21823},
																																expr: &actionExpr{
																																	pos: position{line: 679, col: 17, offset: 21946},
																																	run: (*parser).callonImageBlock76,
																																	expr: &seqExpr{
																																		pos: position{line: 679, col: 17, offset: 21946},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 679, col: 17, offset: 21946},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 679, col: 21, offset: 21950},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 679, col: 28, offset: 21957},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 679, col: 28, offset: 21957},
																																							run: (*parser).callonImageBlock81,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 679, col: 28, offset: 21957},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 681, col: 9, offset: 22011},
																																							run: (*parser).callonImageBlock83,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 681, col: 9, offset: 22011},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 681, col: 9, offset: 22011},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 675, col: 79, offset: 21839},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 657, col: 5, offset: 21090},
																												run: (*parser).callonImageBlock87,
																												expr: &seqExpr{
																													pos: position{line: 657, col: 5, offset: 21090},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 657, col: 5, offset: 21090},
																															val:        "\\{",
																															ignoreCase: false,
																															want:       "\"\\\\{\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 657, col: 13, offset: 21098},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 324, col: 18, offset: 10072},
																																run: (*parser).callonImageBlock91,
																																expr: &seqExpr{
																																	pos: position{line: 324, col: 18, offset: 10072},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 324, col: 18, offset: 10072},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 324, col: 28, offset: 10082},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 324, col: 29, offset: 10083},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 657, col: 32, offset: 21117},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 664, col: 5, offset: 21358},
																												run: (*parser).callonImageBlock97,
																												expr: &seqExpr{
																													pos: position{line: 664, col: 5, offset: 21358},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 664, col: 5, offset: 21358},
																															val:        "{",
																															ignoreCase: false,
																															want:       "\"{\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 664, col: 9, offset: 21362},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 324, col: 18, offset: 10072},
																																run: (*parser).callonImageBlock101,
																																expr: &seqExpr{
																																	pos: position{line: 324, col: 18, offset: 10072},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 324, col: 18, offset: 10072},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 324, col: 28, offset: 10082},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 324, col: 29, offset: 10083},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 664, col: 28, offset: 21381},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 2753, col: 5, offset: 90225},
																						run: (*parser).callonImageBlock107,
																						expr: &seqExpr{
																							pos: position{line: 2753, col: 5, offset: 90225},
																							exprs: []interface{}{
																								&andCodeExpr{
																									pos: position{line: 2753, col: 5, offset: 90225},
																									run: (*parser).callonImageBlock109,
																								},
																								&labeledExpr{
																									pos:   position{line: 2756, col: 5, offset: 90301},
																									label: "element",
																									expr: &choiceExpr{
																										pos: position{line: 2758, col: 9, offset: 90399},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 2758, col: 9, offset: 90399},
																												run: (*parser).callonImageBlock112,
																												expr: &choiceExpr{
																													pos: position{line: 699, col: 27, offset: 22665},
																													alternatives: []interface{}{
																														&actionExpr{
																															pos: position{line: 699, col: 27, offset: 22665},
																															run: (*parser).callonImageBlock114,
																															expr: &seqExpr{
																																pos: position{line: 699, col: 27, offset: 22665},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 699, col: 27, offset: 22665},
																																		val:        "<<",
																																		ignoreCase: false,
																																		want:       "\"<<\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 699, col: 32, offset: 22670},
																																		label: "id",
																																		expr: &actionExpr{
																																			pos: position{line: 3065, col: 7, offset: 99852},
																																			run: (*parser).callonImageBlock118,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 3065, col: 7, offset: 99852},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 3065, col: 7, offset: 99852},
																																					val:        "[^[]<>,]",
																																					chars:      []rune{'[', ']', '<', '>', ','},
																																					ignoreCase: false,
																																					inverted:   true,
																																				},
																																			},
																																		},
																																	},
																																	&zeroOrMoreExpr{
																																		pos: position{line: 699, col: 40, offset: 22678},
																																		expr: &actionExpr{
																																			pos: position{line: 3080, col: 10, offset: 100200},
																																			run: (*parser).callonImageBlock122,
																																			expr: &charClassMatcher{
																																				pos:        position{line: 3080, col: 11, offset: 100201},
																																				val:        "[ \\t]",
																																				chars:      []rune{' ', '\t'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 699, col: 47, offset: 22685},
																																		val:        ",",
																																		ignoreCase: false,
																																		want:       "\",\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 699, col: 51, offset: 22689},
																																		label: "label",
																																		expr: &oneOrMoreExpr{
																																			pos: position{line: 709, col: 24, offset: 23090},
																																			expr: &choiceExpr{
																																				pos: position{line: 710, col: 5, offset: 23096},
																																				alternatives: []interface{}{
																																					&actionExpr{
																																						pos: position{line: 710, col: 6, offset: 23097},
																																						run: (*parser).callonImageBlock128,
																																						expr: &seqExpr{
																																							pos: position{line: 710, col: 6, offset: 23097},
																																							exprs: []interface{}{
																																								&charClassMatcher{
																																									pos:        position{line: 710, col: 6, offset: 23097},
																																									val:        "[0-9\\pL]",
																																									ranges:     []rune{'0', '9'},
																																									classes:    []*unicode.RangeTable{rangeTable("L")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																								&oneOrMoreExpr{
																																									pos: position{line: 710, col: 14, offset: 23105},
																																									expr: &charClassMatcher{
																																										pos:        position{line: 710, col: 14, offset: 23105},
																																										val:        "[^\\r\\n{<>]",
																																										chars:      []rune{'\r', '\n', '{', '<', '>'},
																																										ignoreCase: false,
																																										inverted:   true,
																																									},
																																								},
																																							},
																																						},
																																					},
																																					&actionExpr{
																																						pos: position{line: 657, col: 5, offset: 21090},
																																						run: (*parser).callonImageBlock133,
																																						expr: &seqExpr{
																																							pos: position{line: 657, col: 5, offset: 21090},
																																							exprs: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 657, col: 5, offset: 21090},
																																									val:        "\\{",
																																									ignoreCase: false,
																																									want:       "\"\\\\{\"",
																																								},
																																								&labeledExpr{
																																									pos:   position{line: 657, col: 13, offset: 21098},
																																									label: "name",
																																									expr: &actionExpr{
																																										pos: position{line: 324, col: 18, offset: 10072},
																																										run: (*parser).callonImageBlock137,
																																										expr: &seqExpr{
																																											pos: position{line: 324, col: 18, offset: 10072},
																																											exprs: []interface{}{
																																												&charClassMatcher{
																																													pos:        position{line: 324, col: 18, offset: 10072},
																																													val:        "[_0-9\\pL]",
																																													chars:      []rune{'_'},
																																													ranges:     []rune{'0', '9'},
																																													classes:    []*unicode.RangeTable{rangeTable("L")},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																												&zeroOrMoreExpr{
																																													pos: position{line: 324, col: 28, offset: 10082},
																																													expr: &charClassMatcher{
																																														pos:        position{line: 324, col: 29, offset: 10083},
																																														val:        "[-0-9\\pL]",
																																														chars:      []rune{'-'},
																																														ranges:     []rune{'0', '9'},
																																														classes:    []*unicode.RangeTable{rangeTable("L")},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																												},
																																											},
																																										},
																																									},
																																								},
																																								&litMatcher{
																																									pos:        position{line: 657, col: 32, offset: 21117},
																																									val:        "}",
																																									ignoreCase: false,
																																									want:       "\"}\"",
																																								},
																																							},
																																						},
																																					},
																																					&actionExpr{
																																						pos: position{line: 664, col: 5, offset: 21358},
																																						run: (*parser).callonImageBlock143,
																																						expr: &seqExpr{
																																							pos: position{line: 664, col: 5, offset: 21358},
																																							exprs: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 664, col: 5, offset: 21358},
																																									val:        "{",
																																									ignoreCase: false,
																																									want:       "\"{\"",
																																								},
																																								&labeledExpr{
																																									pos:   position{line: 664, col: 9, offset: 21362},
																																									label: "name",
																																									expr: &actionExpr{
																																										pos: position{line: 324, col: 18, offset: 10072},
																																										run: (*parser).callonImageBlock147,
																																										expr: &seqExpr{
																																											pos: position{line: 324, col: 18, offset: 10072},
																																											exprs: []interface{}{
																																												&charClassMatcher{
																																													pos:        position{line: 324, col: 18, offset: 10072},
																																													val:        "[_0-9\\pL]",
																																													chars:      []rune{'_'},
																																													ranges:     []rune{'0', '9'},
																																													classes:    []*unicode.RangeTable{rangeTable("L")},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																												&zeroOrMoreExpr{
																																													pos: position{line: 324, col: 28, offset: 10082},
																																													expr: &charClassMatcher{
																																														pos:        position{line: 324, col: 29, offset: 10083},
																																														val:        "[-0-9\\pL]",
																																														chars:      []rune{'-'},
																																														ranges:     []rune{'0', '9'},
																																														classes:    []*unicode.RangeTable{rangeTable("L")},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																												},
																																											},
																																										},
																																									},
																																								},
																																								&litMatcher{
																																									pos:        position{line: 664, col: 28, offset: 21381},
																																									val:        "}",
																																									ignoreCase: false,
																																									want:       "\"}\"",
																																								},
																																							},
																																						},
																																					},
																																					&actionExpr{
																																						pos: position{line: 714, col: 8, offset: 23331},
																																						run: (*parser).callonImageBlock153,
																																						expr: &litMatcher{
																																							pos:        position{line: 714, col: 8, offset: 23331},
																																							val:        "{",
																																							ignoreCase: false,
																																							want:       "\"{\"",
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 699, col: 79, offset: 22717},
																																		val:        ">>",
																																		ignoreCase: false,
																																		want:       "\">>\"",
																																	},
																																},
																															},
																														},
																														&actionExpr{
																															pos: position{line: 701, col: 9, offset: 22790},
																															run: (*parser).callonImageBlock156,
																															expr: &seqExpr{
																																pos: position{line: 701, col: 9, offset: 22790},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 701, col: 9, offset: 22790},
																																		val:        "<<",
																																		ignoreCase: false,
																																		want:       "\"<<\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 701, col: 14, offset: 22795},
																																		label: "id",
																																		expr: &actionExpr{
																																			pos: position{line: 3065, col: 7, offset: 99852},
																																			run: (*parser).callonImageBlock160,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 3065, col: 7, offset: 99852},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 3065, col: 7, offset: 99852},
																																					val:        "[^[]<>,]",
																																					chars:      []rune{'[', ']', '<', '>', ','},
																																					ignoreCase: false,
																																					inverted:   true,
																																				},
																																			},
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 701, col: 22, offset: 22803},
																																		val:        ">>",
																																		ignoreCase: false,
																																		want:       "\">>\"",
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 2761, col: 11, offset: 90503},
																												run: (*parser).callonImageBlock164,
																												expr: &charClassMatcher{
																													pos:        position{line: 2761, col: 12, offset: 90504},
																													val:        "[<>&]",
																													chars:      []rune{'<', '>', '&'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 3059, col: 11, offset: 99696},
																						run: (*parser).callonImageBlock166,
																						expr: &litMatcher{
																							pos:        position{line: 3059, col: 11, offset: 99696},
																							val:        "{",
																							ignoreCase: false,
																							want:       "\"{\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 1219, col: 23, offset: 38141},
															run: (*parser).callonImageBlock168,
															expr: &seqExpr{
																pos: position{line: 1219, col: 23, offset: 38141},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 1217, col: 32, offset: 38109},
																		val:        "�",
																		ignoreCase: false,
																		want:       "\"�\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 1219, col: 51, offset: 38169},
																		label: "ref",
																		expr: &actionExpr{
																			pos: position{line: 1219, col: 56, offset: 38174},
																			run: (*parser).callonImageBlock172,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 1219, col: 56, offset: 38174},
																				expr: &charClassMatcher{
																					pos:        position{line: 1219, col: 56, offset: 38174},
																					val:        "[0-9]",
																					ranges:     []rune{'0', '9'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 1217, col: 32, offset: 38109},
																		val:        "�",
																		ignoreCase: false,
																		want:       "\"�\"",
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1360, col: 31, offset: 43082},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1360, col: 43, offset: 43094},
								name: "InlineAttributes",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1360, col: 61, offset: 43112},
							expr: &actionExpr{
								pos: position{line: 3080, col: 10, offset: 100200},
								run: (*parser).callonImageBlock179,
								expr: &charClassMatcher{
									pos:        position{line: 3080, col: 11, offset: 100201},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&choiceExpr{
							pos: position{line: 3096, col: 8, offset: 100524},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 3089, col: 12, offset: 100384},
									run: (*parser).callonImageBlock182,
									expr: &choiceExpr{
										pos: position{line: 3089, col: 13, offset: 100385},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 3089, col: 13, offset: 100385},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
											&litMatcher{
												pos:        position{line: 3089, col: 20, offset: 100392},
												val:        "\r\n",
												ignoreCase: false,
												want:       "\"\\r\\n\"",
											},
											&litMatcher{
												pos:        position{line: 3089, col: 29, offset: 100401},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 3093, col: 8, offset: 100474},
									expr: &anyMatcher{
										line: 3093, col: 9, offset: 100475,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineImage",
			pos:  position{line: 1365, col: 1, offset: 43329},
			expr: &actionExpr{
				pos: position{line: 1365, col: 16, offset: 43344},
				run: (*parser).callonInlineImage1,
				expr: &seqExpr{
					pos: position{line: 1365, col: 16, offset: 43344},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1365, col: 16, offset: 43344},
							val:        "image:",
							ignoreCase: false,
							want:       "\"image:\"",
						},
						&notExpr{
							pos: position{line: 1365, col: 25, offset: 43353},
							expr: &litMatcher{
								pos:        position{line: 1365, col: 26, offset: 43354},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1365, col: 30, offset: 43358},
							label: "path",
							expr: &actionExpr{
								pos: position{line: 3040, col: 13, offset: 98936},
								run: (*parser).callonInlineImage7,
								expr: &seqExpr{
									pos: position{line: 3040, col: 13, offset: 98936},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 3040, col: 13, offset: 98936},
											label: "scheme",
											expr: &zeroOrOneExpr{
												pos: position{line: 3040, col: 20, offset: 98943},
												expr: &choiceExpr{
													pos: position{line: 3048, col: 11, offset: 99205},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 3048, col: 11, offset: 99205},
															val:        "http://",
															ignoreCase: false,
															want:       "\"http://\"",
														},
														&litMatcher{
															pos:        position{line: 3048, col: 23, offset: 99217},
															val:        "https://",
															ignoreCase: false,
															want:       "\"https://\"",
														},
														&litMatcher{
															pos:        position{line: 3048, col: 36, offset: 99230},
															val:        "ftp://",
															ignoreCase: false,
															want:       "\"ftp://\"",
														},
														&litMatcher{
															pos:        position{line: 3048, col: 47, offset: 99241},
															val:        "irc://",
															ignoreCase: false,
															want:       "\"irc://\"",
														},
														&litMatcher{
															pos:        position{line: 3048, col: 58, offset: 99252},
															val:        "mailto:",
															ignoreCase: false,
															want:       "\"mailto:\"",
														},
													},
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 3040, col: 30, offset: 98953},
											label: "path",
											expr: &oneOrMoreExpr{
												pos: position{line: 3040, col: 35, offset: 98958},
												expr: &choiceExpr{
													pos: position{line: 3040, col: 36, offset: 98959},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 3051, col: 5, offset: 99280},
															run: (*parser).callonInlineImage20,
															expr: &seqExpr{
																pos: position{line: 3051, col: 5, offset: 99280},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 3051, col: 5, offset: 99280},
																		expr: &litMatcher{
																			pos:        position{line: 3051, col: 6, offset: 99281},
																			val:        "[",
																			ignoreCase: false,
																			want:       "\"[\"",
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 3052, col: 5, offset: 99305},
																		label: "elements",
																		expr: &oneOrMoreExpr{
																			pos: position{line: 3052, col: 14, offset: 99314},
																			expr: &choiceExpr{
																				pos: position{line: 3053, col: 9, offset: 99324},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 3053, col: 9, offset: 99324},
																						run: (*parser).callonInlineImage27,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 3053, col: 9, offset: 99324},
																							expr: &charClassMatcher{
																								pos:        position{line: 3053, col: 10, offset: 99325},
																								val:        "[^\\r\\n[]�{.,;?!<> ]",
																								chars:      []rune{'\r', '\n', '[', ']', '�', '{', '.', ',', ';', '?', '!', '<', '>', ' '},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																					&seqExpr{
																						pos: position{line: 3056, col: 11, offset: 99590},
																						exprs: []interface{}{
																							&actionExpr{
																								pos: position{line: 3026, col: 25, offset: 98561},
																								run: (*parser).callonInlineImage31,
																								expr: &charClassMatcher{
																									pos:        position{line: 3026, col: 25, offset: 98561},
																									val:        "[.,;?!]",
																									chars:      []rune{'.', ',', ';', '?', '!'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&andExpr{
																								pos: position{line: 3056, col: 32, offset: 99611},
																								expr: &notExpr{
																									pos: position{line: 3056, col: 34, offset: 99613},
																									expr: &choiceExpr{
																										pos: position{line: 3056, col: 36, offset: 99615},
																										alternatives: []interface{}{
																											&notExpr{
																												pos: position{line: 3093, col: 8, offset: 100474},
																												expr: &anyMatcher{
																													line: 3093, col: 9, offset: 100475,
																												},
																											},
																											&actionExpr{
																												pos: position{line: 3080, col: 10, offset: 100200},
																												run: (*parser).callonInlineImage38,
																												expr: &charClassMatcher{
																													pos:        position{line: 3080, col: 11, offset: 100201},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 648, col: 5, offset: 20883},
																						run: (*parser).callonInlineImage40,
																						expr: &seqExpr{
																							pos: position{line: 648, col: 5, offset: 20883},
																							exprs: []interface{}{
																								&andCodeExpr{
																									pos: position{line: 648, col: 5, offset: 20883},
																									run: (*parser).callonInlineImage42,
																								},
																								&labeledExpr{
																									pos:   position{line: 651, col: 5, offset: 20952},
																									label: "element",
																									expr: &choiceExpr{
																										pos: position{line: 651, col: 14, offset: 20961},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 671, col: 25, offset: 21614},
																												run: (*parser).callonInlineImage45,
																												expr: &seqExpr{
																													pos: position{line: 671, col: 25, offset: 21614},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 671, col: 25, offset: 21614},
																															val:        "{counter:",
																															ignoreCase: false,
																															want:       "\"{counter:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 671, col: 37, offset: 21626},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 324, col: 18, offset: 10072},
																																run: (*parser).callonInlineImage49,
																																expr: &seqExpr{
																																	pos: position{line: 324, col: 18, offset: 10072},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 324, col: 18, offset: 10072},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 324, col: 28, offset: 10082},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 324, col: 29, offset: 10083},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 671, col: 56, offset: 21645},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 671, col: 62, offset: 21651},
																																expr: &actionExpr{
																																	pos: position{line: 679, col: 17, offset: 21946},
																																	run: (*parser).callonInlineImage56,
																																	expr: &seqExpr{
																																		pos: position{line: 679, col: 17, offset: 21946},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 679, col: 17, offset: 21946},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 679, col: 21, offset: 21950},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 679, col: 28, offset: 21957},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 679, col: 28, offset: 21957},
																																							run: (*parser).callonInlineImage61,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 679, col: 28, offset: 21957},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 681, col: 9, offset: 22011},
																																							run: (*parser).callonInlineImage63,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 681, col: 9, offset: 22011},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 681, col: 9, offset: 22011},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 671, col: 78, offset: 21667},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 675, col: 25, offset: 21785},
																												run: (*parser).callonInlineImage67,
																												expr: &seqExpr{
																													pos: position{line: 675, col: 25, offset: 21785},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 675, col: 25, offset: 21785},
																															val:        "{counter2:",
																															ignoreCase: false,
																															want:       "\"{counter2:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 675, col: 38, offset: 21798},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 324, col: 18, offset: 10072},
																																run: (*parser).callonInlineImage71,
																																expr: &seqExpr{
																																	pos: position{line: 324, col: 18, offset: 10072},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 324, col: 18, offset: 10072},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 324, col: 28, offset: 10082},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 324, col: 29, offset: 10083},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 675, col: 57, offset: 21817},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 675, col: 63, offset: 21823},
																																expr: &actionExpr{
																																	pos: position{line: 679, col: 17, offset: 21946},
																																	run: (*parser).callonInlineImage78,
																																	expr: &seqExpr{
																																		pos: position{line: 679, col: 17, offset: 21946},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 679, col: 17, offset: 21946},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 679, col: 21, offset: 21950},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 679, col: 28, offset: 21957},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 679, col: 28, offset: 21957},
																																							run: (*parser).callonInlineImage83,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 679, col: 28, offset: 21957},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 681, col: 9, offset: 22011},
																																							run: (*parser).callonInlineImage85,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 681, col: 9, offset: 22011},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 681, col: 9, offset: 22011},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 675, col: 79, offset: 21839},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 657, col: 5, offset: 21090},
																												run: (*parser).callonInlineImage89,
																												expr: &seqExpr{
																													pos: position{line: 657, col: 5, offset: 21090},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 657, col: 5, offset: 21090},
																															val:        "\\{",
																															ignoreCase: false,
																															want:       "\"\\\\{\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 657, col: 13, offset: 21098},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 324, col: 18, offset: 10072},
																																run: (*parser).callonInlineImage93,
																																expr: &seqExpr{
																																	pos: position{line: 324, col: 18, offset: 10072},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 324, col: 18, offset: 10072},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 324, col: 28, offset: 10082},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 324, col: 29, offset: 10083},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 657, col: 32, offset: 21117},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 664, col: 5, offset: 21358},
																												run: (*parser).callonInlineImage99,
																												expr: &seqExpr{
																													pos: position{line: 664, col: 5, offset: 21358},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 664, col: 5, offset: 21358},
																															val:        "{",
																															ignoreCase: false,
																															want:       "\"{\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 664, col: 9, offset: 21362},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 324, col: 18, offset: 10072},
																																run: (*parser).callonInlineImage103,
																																expr: &seqExpr{
																																	pos: position{line: 324, col: 18, offset: 10072},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 324, col: 18, offset: 10072},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 324, col: 28, offset: 10082},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 324, col: 29, offset: 10083},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 664, col: 28, offset: 21381},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 2753, col: 5, offset: 90225},
																						run: (*parser).callonInlineImage109,
																						expr: &seqExpr{
																							pos: position{line: 2753, col: 5, offset: 90225},
																							exprs: []interface{}{
																								&andCodeExpr{
																									pos: position{line: 2753, col: 5, offset: 90225},
																									run: (*parser).callonInlineImage111,
																								},
																								&labeledExpr{
																									pos:   position{line: 2756, col: 5, offset: 90301},
																									label: "element",
																									expr: &choiceExpr{
																										pos: position{line: 2758, col: 9, offset: 90399},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 2758, col: 9, offset: 90399},
																												run: (*parser).callonInlineImage114,
																												expr: &choiceExpr{
																													pos: position{line: 699, col: 27, offset: 22665},
																													alternatives: []interface{}{
																														&actionExpr{
																															pos: position{line: 699, col: 27, offset: 22665},
																															run: (*parser).callonInlineImage116,
																															expr: &seqExpr{
																																pos: position{line: 699, col: 27, offset: 22665},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 699, col: 27, offset: 22665},
																																		val:        "<<",
																																		ignoreCase: false,
																																		want:       "\"<<\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 699, col: 32, offset: 22670},
																																		label: "id",
																																		expr: &actionExpr{
																																			pos: position{line: 3065, col: 7, offset: 99852},
																																			run: (*parser).callonInlineImage120,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 3065, col: 7, offset: 99852},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 3065, col: 7, offset: 99852},
																																					val:        "[^[]<>,]",
																																					chars:      []rune{'[', ']', '<', '>', ','},
																																					ignoreCase: false,
																																					inverted:   true,
																																				},
																																			},
																																		},
																																	},
																																	&zeroOrMoreExpr{
																																		pos: position{line: 699, col: 40, offset: 22678},
																																		expr: &actionExpr{
																																			pos: position{line: 3080, col: 10, offset: 100200},
																																			run: (*parser).callonInlineImage124,
																																			expr: &charClassMatcher{
																																				pos:        position{line: 3080, col: 11, offset: 100201},
																																				val:        "[ \\t]",
																																				chars:      []rune{' ', '\t'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 699, col: 47, offset: 22685},
																																		val:        ",",
																																		ignoreCase: false,
																																		want:       "\",\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 699, col: 51, offset: 22689},
																																		label: "label",
																																		expr: &oneOrMoreExpr{
																																			pos: position{line: 709, col: 24, offset: 23090},
																																			expr: &choiceExpr{
																																				pos: position{line: 710, col: 5, offset: 23096},
																																				alternatives: []interface{}{
																																					&actionExpr{
																																						pos: position{line: 710, col: 6, offset: 23097},
																																						run: (*parser).callonInlineImage130,
																																						expr: &seqExpr{
																																							pos: position{line: 710, col: 6, offset: 23097},
																																							exprs: []interface{}{
																																								&charClassMatcher{
																																									pos:        position{line: 710, col: 6, offset: 23097},
																																									val:        "[0-9\\pL]",
																																									ranges:     []rune{'0', '9'},
																																									classes:    []*unicode.RangeTable{rangeTable("L")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																								&oneOrMoreExpr{
																																									pos: position{line: 710, col: 14, offset: 23105},
																																									expr: &charClassMatcher{
																																										pos:        position{line: 710, col: 14, offset: 23105},
																																										val:        "[^\\r\\n{<>]",
																																										chars:      []rune{'\r', '\n', '{', '<', '>'},
																																										ignoreCase: false,
																																										inverted:   true,
																																									},
																																								},
																																							},
																																						},
																																					},
																																					&actionExpr{
																																						pos: position{line: 657, col: 5, offset: 21090},
																																						run: (*parser).callonInlineImage135,
																																						expr: &seqExpr{
																																							pos: position{line: 657, col: 5, offset: 21090},
																																							exprs: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 657, col: 5, offset: 21090},
																																									val:        "\\{",
																																									ignoreCase: false,
																																									want:       "\"\\\\{\"",
																																								},
																																								&labeledExpr{
																																									pos:   position{line: 657, col: 13, offset: 21098},
																																									label: "name",
																																									expr: &actionExpr{
																																										pos: position{line: 324, col: 18, offset: 10072},
																																										run: (*parser).callonInlineImage139,
																																										expr: &seqExpr{
																																											pos: position{line: 324, col: 18, offset: 10072},
																																											exprs: []interface{}{
																																												&charClassMatcher{
																																													pos:        position{line: 324, col: 18, offset: 10072},
																																													val:        "[_0-9\\pL]",
																																													chars:      []rune{'_'},
																																													ranges:     []rune{'0', '9'},
																																													classes:    []*unicode.RangeTable{rangeTable("L")},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																												&zeroOrMoreExpr{
																																													pos: position{line: 324, col: 28, offset: 10082},
																																													expr: &charClassMatcher{
																																														pos:        position{line: 324, col: 29, offset: 10083},
																																														val:        "[-0-9\\pL]",
																																														chars:      []rune{'-'},
																																														ranges:     []rune{'0', '9'},
																																														classes:    []*unicode.RangeTable{rangeTable("L")},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																												},
																																											},
																																										},
																																									},
																																								},
																																								&litMatcher{
																																									pos:        position{line: 657, col: 32, offset: 21117},
																																									val:        "}",
																																									ignoreCase: false,
																																									want:       "\"}\"",
																																								},
																																							},
																																						},
																																					},
																																					&actionExpr{
																																						pos: position{line: 664, col: 5, offset: 21358},
																																						run: (*parser).callonInlineImage145,
																																						expr: &seqExpr{
																																							pos: position{line: 664, col: 5, offset: 21358},
																																							exprs: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 664, col: 5, offset: 21358},
																																									val:        "{",
																																									ignoreCase: false,
																																									want:       "\"{\"",
																																								},
																																								&labeledExpr{
																																									pos:   position{line: 664, col: 9, offset: 21362},
																																									label: "name",
																																									expr: &actionExpr{
																																										pos: position{line: 324, col: 18, offset: 10072},
																																										run: (*parser).callonInlineImage149,
																																										expr: &seqExpr{
																																											pos: position{line: 324, col: 18, offset: 10072},
																																											exprs: []interface{}{
																																												&charClassMatcher{
																																													pos:        position{line: 324, col: 18, offset: 10072},
																																													val:        "[_0-9\\pL]",
																																													chars:      []rune{'_'},
																																													ranges:     []rune{'0', '9'},
																																													classes:    []*unicode.RangeTable{rangeTable("L")},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																												&zeroOrMoreExpr{
																																													pos: position{line: 324, col: 28, offset: 10082},
																																													expr: &charClassMatcher{
																																														pos:        position{line: 324, col: 29, offset: 10083},
																																														val:        "[-0-9\\pL]",
																																														chars:      []rune{'-'},
																																														ranges:     []rune{'0', '9'},
																																														classes:    []*unicode.RangeTable{rangeTable("L")},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																												},
																																											},
																																										},
																																									},
																																								},
																																								&litMatcher{
																																									pos:        position{line: 664, col: 28, offset: 21381},
																																									val:        "}",
																																									ignoreCase: false,
																																									want:       "\"}\"",
																																								},
																																							},
																																						},
																																					},
																																					&actionExpr{
																																						pos: position{line: 714, col: 8, offset: 23331},
																																						run: (*parser).callonInlineImage155,
																																						expr: &litMatcher{
																																							pos:        position{line: 714, col: 8, offset: 23331},
																																							val:        "{",
																																							ignoreCase: false,
																																							want:       "\"{\"",
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 699, col: 79, offset: 22717},
																																		val:        ">>",
																																		ignoreCase: false,
																																		want:       "\">>\"",
																																	},
																																},
																															},
																														},
																														&actionExpr{
																															pos: position{line: 701, col: 9, offset: 22790},
																															run: (*parser).callonInlineImage158,
																															expr: &seqExpr{
																																pos: position{line: 701, col: 9, offset: 22790},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 701, col: 9, offset: 22790},
																																		val:        "<<",
																																		ignoreCase: false,
																																		want:       "\"<<\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 701, col: 14, offset: 22795},
																																		label: "id",
																																		expr: &actionExpr{
																																			pos: position{line: 3065, col: 7, offset: 99852},
																																			run: (*parser).callonInlineImage162,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 3065, col: 7, offset: 99852},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 3065, col: 7, offset: 99852},
																																					val:        "[^[]<>,]",
																																					chars:      []rune{'[', ']', '<', '>', ','},
																																					ignoreCase: false,
																																					inverted:   true,
																																				},
																																			},
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 701, col: 22, offset: 22803},
																																		val:        ">>",
																																		ignoreCase: false,
																																		want:       "\">>\"",
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 2761, col: 11, offset: 90503},
																												run: (*parser).callonInlineImage166,
																												expr: &charClassMatcher{
																													pos:        position{line: 2761, col: 12, offset: 90504},
																													val:        "[<>&]",
																													chars:      []rune{'<', '>', '&'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 3059, col: 11, offset: 99696},
																						run: (*parser).callonInlineImage168,
																						expr: &litMatcher{
																							pos:        position{line: 3059, col: 11, offset: 99696},
																							val:        "{",
																							ignoreCase: false,
																							want:       "\"{\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 1219, col: 23, offset: 38141},
															run: (*parser).callonInlineImage170,
															expr: &seqExpr{
																pos: position{line: 1219, col: 23, offset: 38141},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 1217, col: 32, offset: 38109},
																		val:        "�",
																		ignoreCase: false,
																		want:       "\"�\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 1219, col: 51, offset: 38169},
																		label: "ref",
																		expr: &actionExpr{
																			pos: position{line: 1219, col: 56, offset: 38174},
																			run: (*parser).callonInlineImage174,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 1219, col: 56, offset: 38174},
																				expr: &charClassMatcher{
																					pos:        position{line: 1219, col: 56, offset: 38174},
																					val:        "[0-9]",
																					ranges:     []rune{'0', '9'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 1217, col: 32, offset: 38109},
																		val:        "�",
																		ignoreCase: false,
																		want:       "\"�\"",
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1365, col: 46, offset: 43374},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1365, col: 58, offset: 43386},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineIcon",
			pos:  position{line: 1372, col: 1, offset: 43782},
			expr: &actionExpr{
				pos: position{line: 1372, col: 15, offset: 43796},
				run: (*parser).callonInlineIcon1,
				expr: &seqExpr{
					pos: position{line: 1372, col: 15, offset: 43796},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1372, col: 15, offset: 43796},
							val:        "icon:",
							ignoreCase: false,
							want:       "\"icon:\"",
						},
						&labeledExpr{
							pos:   position{line: 1372, col: 23, offset: 43804},
							label: "icon",
							expr: &actionExpr{
								pos: position{line: 1372, col: 29, offset: 43810},
								run: (*parser).callonInlineIcon5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1372, col: 29, offset: 43810},
									expr: &charClassMatcher{
										pos:        position{line: 1372, col: 29, offset: 43810},
										val:        "[_-0-9\\pL]",
										chars:      []rune{'_', '-'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1372, col: 73, offset: 43854},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1372, col: 85, offset: 43866},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineFootnote",
			pos:  position{line: 1379, col: 1, offset: 44232},
			expr: &choiceExpr{
				pos: position{line: 1379, col: 19, offset: 44250},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1379, col: 19, offset: 44250},
						run: (*parser).callonInlineFootnote2,
						expr: &seqExpr{
							pos: position{line: 1379, col: 19, offset: 44250},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1379, col: 19, offset: 44250},
									val:        "footnote:[",
									ignoreCase: false,
									want:       "\"footnote:[\"",
								},
								&labeledExpr{
									pos:   position{line: 1379, col: 32, offset: 44263},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1379, col: 42, offset: 44273},
										name: "FootnoteElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1379, col: 60, offset: 44291},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1381, col: 9, offset: 44369},
						run: (*parser).callonInlineFootnote8,
						expr: &seqExpr{
							pos: position{line: 1381, col: 9, offset: 44369},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1381, col: 9, offset: 44369},
									val:        "footnote:",
									ignoreCase: false,
									want:       "\"footnote:\"",
								},
								&labeledExpr{
									pos:   position{line: 1381, col: 21, offset: 44381},
									label: "ref",
									expr: &actionExpr{
										pos: position{line: 2998, col: 14, offset: 97537},
										run: (*parser).callonInlineFootnote12,
										expr: &oneOrMoreExpr{
											pos: position{line: 2998, col: 14, offset: 97537},
											expr: &charClassMatcher{
												pos:        position{line: 2998, col: 14, offset: 97537},
												val:        "[0-9\\pL]",
												ranges:     []rune{'0', '9'},
												classes:    []*unicode.RangeTable{rangeTable("L")},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1381, col: 39, offset: 44399},
									val:        "[",
									ignoreCase: false,
									want:       "\"[\"",
								},
								&labeledExpr{
									pos:   position{line: 1381, col: 43, offset: 44403},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1381, col: 53, offset: 44413},
										name: "FootnoteElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1381, col: 71, offset: 44431},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FootnoteElements",
			pos:  position{line: 1387, col: 1, offset: 44597},
			expr: &actionExpr{
				pos: position{line: 1387, col: 21, offset: 44617},
				run: (*parser).callonFootnoteElements1,
				expr: &labeledExpr{
					pos:   position{line: 1387, col: 21, offset: 44617},
					label: "elements",
					expr: &zeroOrMoreExpr{
						pos: position{line: 1387, col: 30, offset: 44626},
						expr: &ruleRefExpr{
							pos:  position{line: 1387, col: 31, offset: 44627},
							name: "FootnoteElement",
						},
					},
				},
			},
		},
		{
			name: "FootnoteElement",
			pos:  position{line: 1391, col: 1, offset: 44719},
			expr: &actionExpr{
				pos: position{line: 1392, col: 5, offset: 44743},
				run: (*parser).callonFootnoteElement1,
				expr: &seqExpr{
					pos: position{line: 1392, col: 5, offset: 44743},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1392, col: 5, offset: 44743},
							expr: &litMatcher{
								pos:        position{line: 1392, col: 6, offset: 44744},
								val:        "]",
								ignoreCase: false,
								want:       "\"]\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1393, col: 5, offset: 44753},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1394, col: 9, offset: 44771},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1394, col: 9, offset: 44771},
										name: "InlineElement",
									},
									&actionExpr{
										pos: position{line: 3089, col: 12, offset: 100384},
										run: (*parser).callonFootnoteElement8,
										expr: &choiceExpr{
											pos: position{line: 3089, col: 13, offset: 100385},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 3089, col: 13, offset: 100385},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
												&litMatcher{
													pos:        position{line: 3089, col: 20, offset: 100392},
													val:        "\r\n",
													ignoreCase: false,
													want:       "\"\\r\\n\"",
												},
												&litMatcher{
													pos:        position{line: 3089, col: 29, offset: 100401},
													val:        "\r",
													ignoreCase: false,
													want:       "\"\\r\"",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacro",
			pos:  position{line: 1427, col: 1, offset: 46395},
			expr: &choiceExpr{
				pos: position{line: 1427, col: 21, offset: 46415},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1427, col: 21, offset: 46415},
						run: (*parser).callonPassthroughMacro2,
						expr: &seqExpr{
							pos: position{line: 1427, col: 21, offset: 46415},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1427, col: 21, offset: 46415},
									val:        "pass:[",
									ignoreCase: false,
									want:       "\"pass:[\"",
								},
								&labeledExpr{
									pos:   position{line: 1427, col: 30, offset: 46424},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1427, col: 38, offset: 46432},
										expr: &actionExpr{
											pos: position{line: 1433, col: 30, offset: 46758},
											run: (*parser).callonPassthroughMacro7,
											expr: &charClassMatcher{
												pos:        position{line: 1433, col: 30, offset: 46758},
												val:        "[^]]",
												chars:      []rune{']'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1427, col: 67, offset: 46461},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1429, col: 9, offset: 46565},
						run: (*parser).callonPassthroughMacro10,
						expr: &seqExpr{
							pos: position{line: 1429, col: 9, offset: 46565},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1429, col: 9, offset: 46565},
									val:        "pass:q[",
									ignoreCase: false,
									want:       "\"pass:q[\"",
								},
								&labeledExpr{
									pos:   position{line: 1429, col: 19, offset: 46575},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1429, col: 27, offset: 46583},
										expr: &choiceExpr{
											pos: position{line: 1429, col: 28, offset: 46584},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1429, col: 28, offset: 46584},
													name: "QuotedText",
												},
												&actionExpr{
													pos: position{line: 1433, col: 30, offset: 46758},
													run: (*parser).callonPassthroughMacro17,
													expr: &charClassMatcher{
														pos:        position{line: 1433, col: 30, offset: 46758},
														val:        "[^]]",
														chars:      []rune{']'},
														ignoreCase: false,
														inverted:   true,
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1429, col: 69, offset: 46625},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Link",
			pos:  position{line: 1440, col: 1, offset: 47014},
			expr: &choiceExpr{
				pos: position{line: 1440, col: 9, offset: 47022},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1443, col: 5, offset: 47076},
						run: (*parser).callonLink2,
						expr: &seqExpr{
							pos: position{line: 1443, col: 5, offset: 47076},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1443, col: 5, offset: 47076},
									val:        "<",
									ignoreCase: false,
									want:       "\"<\"",
								},
								&labeledExpr{
									pos:   position{line: 1444, col: 5, offset: 47085},
									label: "url",
									expr: &actionExpr{
										pos: position{line: 3044, col: 23, offset: 99085},
										run: (*parser).callonLink6,
										expr: &seqExpr{
											pos: position{line: 3044, col: 23, offset: 99085},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 3044, col: 23, offset: 99085},
													expr: &litMatcher{
														pos:        position{line: 3044, col: 24, offset: 99086},
														val:        "[",
														ignoreCase: false,
														want:       "\"[\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 3044, col: 28, offset: 99090},
													label: "scheme",
													expr: &choiceExpr{
														pos: position{line: 3048, col: 11, offset: 99205},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 3048, col: 11, offset: 99205},
																val:        "http://",
																ignoreCase: false,
																want:       "\"http://\"",
															},
															&litMatcher{
																pos:        position{line: 3048, col: 23, offset: 99217},
																val:        "https://",
																ignoreCase: false,
																want:       "\"https://\"",
															},
															&litMatcher{
																pos:        position{line: 3048, col: 36, offset: 99230},
																val:        "ftp://",
																ignoreCase: false,
																want:       "\"ftp://\"",
															},
															&litMatcher{
																pos:        position{line: 3048, col: 47, offset: 99241},
																val:        "irc://",
																ignoreCase: false,
																want:       "\"irc://\"",
															},
															&litMatcher{
																pos:        position{line: 3048, col: 58, offset: 99252},
																val:        "mailto:",
																ignoreCase: false,
																want:       "\"mailto:\"",
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 3044, col: 44, offset: 99106},
													label: "path",
													expr: &oneOrMoreExpr{
														pos: position{line: 3044, col: 49, offset: 99111},
														expr: &actionExpr{
															pos: position{line: 3051, col: 5, offset: 99280},
															run: (*parser).callonLink19,
															expr: &seqExpr{
																pos: position{line: 3051, col: 5, offset: 99280},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 3051, col: 5, offset: 99280},
																		expr: &litMatcher{
																			pos:        position{line: 3051, col: 6, offset: 99281},
																			val:        "[",
																			ignoreCase: false,
																			want:       "\"[\"",
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 3052, col: 5, offset: 99305},
																		label: "elements",
																		expr: &oneOrMoreExpr{
																			pos: position{line: 3052, col: 14, offset: 99314},
																			expr: &choiceExpr{
																				pos: position{line: 3053, col: 9, offset: 99324},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 3053, col: 9, offset: 99324},
																						run: (*parser).callonLink26,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 3053, col: 9, offset: 99324},
																							expr: &charClassMatcher{
																								pos:        position{line: 3053, col: 10, offset: 99325},
																								val:        "[^\\r\\n[]�{.,;?!<> ]",
																								chars:      []rune{'\r', '\n', '[', ']', '�', '{', '.', ',', ';', '?', '!', '<', '>', ' '},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																					&seqExpr{
																						pos: position{line: 3056, col: 11, offset: 99590},
																						exprs: []interface{}{
																							&actionExpr{
																								pos: position{line: 3026, col: 25, offset: 98561},
																								run: (*parser).callonLink30,
																								expr: &charClassMatcher{
																									pos:        position{line: 3026, col: 25, offset: 98561},
																									val:        "[.,;?!]",
																									chars:      []rune{'.', ',', ';', '?', '!'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&andExpr{
																								pos: position{line: 3056, col: 32, offset: 99611},
																								expr: &notExpr{
																									pos: position{line: 3056, col: 34, offset: 99613},
																									expr: &choiceExpr{
																										pos: position{line: 3056, col: 36, offset: 99615},
																										alternatives: []interface{}{
																											&notExpr{
																												pos: position{line: 3093, col: 8, offset: 100474},
																												expr: &anyMatcher{
																													line: 3093, col: 9, offset: 100475,
																												},
																											},
																											&actionExpr{
																												pos: position{line: 3080, col: 10, offset: 100200},
																												run: (*parser).callonLink37,
																												expr: &charClassMatcher{
																													pos:        position{line: 3080, col: 11, offset: 100201},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 648, col: 5, offset: 20883},
																						run: (*parser).callonLink39,
																						expr: &seqExpr{
																							pos: position{line: 648, col: 5, offset: 20883},
																							exprs: []interface{}{
																								&andCodeExpr{
																									pos: position{line: 648, col: 5, offset: 20883},
																									run: (*parser).callonLink41,
																								},
																								&labeledExpr{
																									pos:   position{line: 651, col: 5, offset: 20952},
																									label: "element",
																									expr: &choiceExpr{
																										pos: position{line: 651, col: 14, offset: 20961},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 671, col: 25, offset: 21614},
																												run: (*parser).callonLink44,
																												expr: &seqExpr{
																													pos: position{line: 671, col: 25, offset: 21614},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 671, col: 25, offset: 21614},
																															val:        "{counter:",
																															ignoreCase: false,
																															want:       "\"{counter:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 671, col: 37, offset: 21626},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 324, col: 18, offset: 10072},
																																run: (*parser).callonLink48,
																																expr: &seqExpr{
																																	pos: position{line: 324, col: 18, offset: 10072},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 324, col: 18, offset: 10072},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 324, col: 28, offset: 10082},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 324, col: 29, offset: 10083},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 671, col: 56, offset: 21645},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 671, col: 62, offset: 21651},
																																expr: &actionExpr{
																																	pos: position{line: 679, col: 17, offset: 21946},
																																	run: (*parser).callonLink55,
																																	expr: &seqExpr{
																																		pos: position{line: 679, col: 17, offset: 21946},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 679, col: 17, offset: 21946},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 679, col: 21, offset: 21950},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 679, col: 28, offset: 21957},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 679, col: 28, offset: 21957},
																																							run: (*parser).callonLink60,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 679, col: 28, offset: 21957},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 681, col: 9, offset: 22011},
																																							run: (*parser).callonLink62,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 681, col: 9, offset: 22011},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 681, col: 9, offset: 22011},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 671, col: 78, offset: 21667},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 675, col: 25, offset: 21785},
																												run: (*parser).callonLink66,
																												expr: &seqExpr{
																													pos: position{line: 675, col: 25, offset: 21785},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 675, col: 25, offset: 21785},
																															val:        "{counter2:",
																															ignoreCase: false,
																															want:       "\"{counter2:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 675, col: 38, offset: 21798},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 324, col: 18, offset: 10072},
																																run: (*parser).callonLink70,
																																expr: &seqExpr{
																																	pos: position{line: 324, col: 18, offset: 10072},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 324, col: 18, offset: 10072},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 324, col: 28, offset: 10082},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 324, col: 29, offset: 10083},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 675, col: 57, offset: 21817},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 675, col: 63, offset: 21823},
																																expr: &actionExpr{
																																	pos: position{line: 679, col: 17, offset: 21946},
																																	run: (*parser).callonLink77,
																																	expr: &seqExpr{
																																		pos: position{line: 679, col: 17, offset: 21946},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 679, col: 17, offset: 21946},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 679, col: 21, offset: 21950},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 679, col: 28, offset: 21957},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 679, col: 28, offset: 21957},
																																							run: (*parser).callonLink82,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 679, col: 28, offset: 21957},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 681, col: 9, offset: 22011},
																																							run: (*parser).callonLink84,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 681, col: 9, offset: 22011},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 681, col: 9, offset: 22011},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 675, col: 79, offset: 21839},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 657, col: 5, offset: 21090},
																												run: (*parser).callonLink88,
																												expr: &seqExpr{
																													pos: position{line: 657, col: 5, offset: 21090},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 657, col: 5, offset: 21090},
																															val:        "\\{",
																															ignoreCase: false,
																															want:       "\"\\\\{\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 657, col: 13, offset: 21098},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 324, col: 18, offset: 10072},
																																run: (*parser).callonLink92,
																																expr: &seqExpr{
																																	pos: position{line: 324, col: 18, offset: 10072},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 324, col: 18, offset: 10072},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 324, col: 28, offset: 10082},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 324, col: 29, offset: 10083},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 657, col: 32, offset: 21117},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 664, col: 5, offset: 21358},
																												run: (*parser).callonLink98,
																												expr: &seqExpr{
																													pos: position{line: 664, col: 5, offset: 21358},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 664, col: 5, offset: 21358},
																															val:        "{",
																															ignoreCase: false,
																															want:       "\"{\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 664, col: 9, offset: 21362},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 324, col: 18, offset: 10072},
																																run: (*parser).callonLink102,
																																expr: &seqExpr{
																																	pos: position{line: 324, col: 18, offset: 10072},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 324, col: 18, offset: 10072},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 324, col: 28, offset: 10082},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 324, col: 29, offset: 10083},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 664, col: 28, offset: 21381},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 2753, col: 5, offset: 90225},
																						run: (*parser).callonLink108,
																						expr: &seqExpr{
																							pos: position{line: 2753, col: 5, offset: 90225},
																							exprs: []interface{}{
																								&andCodeExpr{
																									pos: position{line: 2753, col: 5, offset: 90225},
																									run: (*parser).callonLink110,
																								},
																								&labeledExpr{
																									pos:   position{line: 2756, col: 5, offset: 90301},
																									label: "element",
																									expr: &choiceExpr{
																										pos: position{line: 2758, col: 9, offset: 90399},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 2758, col: 9, offset: 90399},
																												run: (*parser).callonLink113,
																												expr: &choiceExpr{
																													pos: position{line: 699, col: 27, offset: 22665},
																													alternatives: []interface{}{
																														&actionExpr{
																															pos: position{line: 699, col: 27, offset: 22665},
																															run: (*parser).callonLink115,
																															expr: &seqExpr{
																																pos: position{line: 699, col: 27, offset: 22665},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 699, col: 27, offset: 22665},
																																		val:        "<<",
																																		ignoreCase: false,
																																		want:       "\"<<\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 699, col: 32, offset: 22670},
																																		label: "id",
																																		expr: &actionExpr{
																																			pos: position{line: 3065, col: 7, offset: 99852},
																																			run: (*parser).callonLink119,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 3065, col: 7, offset: 99852},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 3065, col: 7, offset: 99852},
																																					val:        "[^[]<>,]",
																																					chars:      []rune{'[', ']', '<', '>', ','},
																																					ignoreCase: false,
																																					inverted:   true,
																																				},
																																			},
																																		},
																																	},
																																	&zeroOrMoreExpr{
																																		pos: position{line: 699, col: 40, offset: 22678},
																																		expr: &actionExpr{
																																			pos: position{line: 3080, col: 10, offset: 100200},
																																			run: (*parser).callonLink123,
																																			expr: &charClassMatcher{
																																				pos:        position{line: 3080, col: 11, offset: 100201},
																																				val:        "[ \\t]",
																																				chars:      []rune{' ', '\t'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 699, col: 47, offset: 22685},
																																		val:        ",",
																																		ignoreCase: false,
																																		want:       "\",\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 699, col: 51, offset: 22689},
																																		label: "label",
																																		expr: &oneOrMoreExpr{
																																			pos: position{line: 709, col: 24, offset: 23090},
																																			expr: &choiceExpr{
																																				pos: position{line: 710, col: 5, offset: 23096},
																																				alternatives: []interface{}{
																																					&actionExpr{
																																						pos: position{line: 710, col: 6, offset: 23097},
																																						run: (*parser).callonLink129,
																																						expr: &seqExpr{
																																							pos: position{line: 710, col: 6, offset: 23097},
																																							exprs: []interface{}{
																																								&charClassMatcher{
																																									pos:        position{line: 710, col: 6, offset: 23097},
																																									val:        "[0-9\\pL]",
																																									ranges:     []rune{'0', '9'},
																																									classes:    []*unicode.RangeTable{rangeTable("L")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																								&oneOrMoreExpr{
																																									pos: position{line: 710, col: 14, offset: 23105},
																																									expr: &charClassMatcher{
																																										pos:        position{line: 710, col: 14, offset: 23105},
																																										val:        "[^\\r\\n{<>]",
																																										chars:      []rune{'\r', '\n', '{', '<', '>'},
																																										ignoreCase: false,
																																										inverted:   true,
																																									},
																																								},
																																							},
																																						},
																																					},
																																					&actionExpr{
																																						pos: position{line: 657, col: 5, offset: 21090},
																																						run: (*parser).callonLink134,
																																						expr: &seqExpr{
																																							pos: position{line: 657, col: 5, offset: 21090},
																																							exprs: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 657, col: 5, offset: 21090},
																																									val:        "\\{",
																																									ignoreCase: false,
																																									want:       "\"\\\\{\"",
																																								},
																																								&labeledExpr{
																																									pos:   position{line: 657, col: 13, offset: 21098},
																																									label: "name",
																																									expr: &actionExpr{
																																										pos: position{line: 324, col: 18, offset: 10072},
																																										run: (*parser).callonLink138,
																																										expr: &seqExpr{
																																											pos: position{line: 324, col: 18, offset: 10072},
																																											exprs: []interface{}{
																																												&charClassMatcher{
																																													pos:        position{line: 324, col: 18, offset: 10072},
																																													val:        "[_0-9\\pL]",
																																													chars:      []rune{'_'},
																																													ranges:     []rune{'0', '9'},
																																													classes:    []*unicode.RangeTable{rangeTable("L")},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																												&zeroOrMoreExpr{
																																													pos: position{line: 324, col: 28, offset: 10082},
																																													expr: &charClassMatcher{
																																														pos:        position{line: 324, col: 29, offset: 10083},
																																														val:        "[-0-9\\pL]",
																																														chars:      []rune{'-'},
																																														ranges:     []rune{'0', '9'},
																																														classes:    []*unicode.RangeTable{rangeTable("L")},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																												},
																																											},
																																										},
																																									},
																																								},
																																								&litMatcher{
																																									pos:        position{line: 657, col: 32, offset: 21117},
																																									val:        "}",
																																									ignoreCase: false,
																																									want:       "\"}\"",
																																								},
																																							},
																																						},
																																					},
																																					&actionExpr{
																																						pos: position{line: 664, col: 5, offset: 21358},
																																						run: (*parser).callonLink144,
																																						expr: &seqExpr{
																																							pos: position{line: 664, col: 5, offset: 21358},
																																							exprs: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 664, col: 5, offset: 21358},
																																									val:        "{",
																																									ignoreCase: false,
																																									want:       "\"{\"",
																																								},
																																								&labeledExpr{
																																									pos:   position{line: 664, col: 9, offset: 21362},
																																									label: "name",
																																									expr: &actionExpr{
																																										pos: position{line: 324, col: 18, offset: 10072},
																																										run: (*parser).callonLink148,
																																										expr: &seqExpr{
																																											pos: position{line: 324, col: 18, offset: 10072},
																																											exprs: []interface{}{
																																												&charClassMatcher{
																																													pos:        position{line: 324, col: 18, offset: 10072},
																																													val:        "[_0-9\\pL]",
																																													chars:      []rune{'_'},
																																													ranges:     []rune{'0', '9'},
																																													classes:    []*unicode.RangeTable{rangeTable("L")},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																												&zeroOrMoreExpr{
																																													pos: position{line: 324, col: 28, offset: 10082},
																																													expr: &charClassMatcher{
																																														pos:        position{line: 324, col: 29, offset: 10083},
																																														val:        "[-0-9\\pL]",
																																														chars:      []rune{'-'},
																																														ranges:     []rune{'0', '9'},
																																														classes:    []*unicode.RangeTable{rangeTable("L")},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																												},
																																											},
																																										},
																																									},
																																								},
																																								&litMatcher{
																																									pos:        position{line: 664, col: 28, offset: 21381},
																																									val:        "}",
																																									ignoreCase: false,
																																									want:       "\"}\"",
																																								},
																																							},
																																						},
																																					},
																																					&actionExpr{
																																						pos: position{line: 714, col: 8, offset: 23331},
																																						run: (*parser).callonLink154,
																																						expr: &litMatcher{
																																							pos:        position{line: 714, col: 8, offset: 23331},
																																							val:        "{",
																																							ignoreCase: false,
																																							want:       "\"{\"",
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 699, col: 79, offset: 22717},
																																		val:        ">>",
																																		ignoreCase: false,
																																		want:       "\">>\"",
																																	},
																																},
																															},
																														},
																														&actionExpr{
																															pos: position{line: 701, col: 9, offset: 22790},
																															run: (*parser).callonLink157,
																															expr: &seqExpr{
																																pos: position{line: 701, col: 9, offset: 22790},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 701, col: 9, offset: 22790},
																																		val:        "<<",
																																		ignoreCase: false,
																																		want:       "\"<<\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 701, col: 14, offset: 22795},
																																		label: "id",
																																		expr: &actionExpr{
																																			pos: position{line: 3065, col: 7, offset: 99852},
																																			run: (*parser).callonLink161,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 3065, col: 7, offset: 99852},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 3065, col: 7, offset: 99852},
																																					val:        "[^[]<>,]",
																																					chars:      []rune{'[', ']', '<', '>', ','},
																																					ignoreCase: false,
																																					inverted:   true,
																																				},
																																			},
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 701, col: 22, offset: 22803},
																																		val:        ">>",
																																		ignoreCase: false,
																																		want:       "\">>\"",
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 2761, col: 11, offset: 90503},
																												run: (*parser).callonLink165,
																												expr: &charClassMatcher{
																													pos:        position{line: 2761, col: 12, offset: 90504},
																													val:        "[<>&]",
																													chars:      []rune{'<', '>', '&'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 3059, col: 11, offset: 99696},
																						run: (*parser).callonLink167,
																						expr: &litMatcher{
																							pos:        position{line: 3059, col: 11, offset: 99696},
																							val:        "{",
																							ignoreCase: false,
																							want:       "\"{\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1445, col: 5, offset: 47152},
									label: "closingBracket",
									expr: &zeroOrOneExpr{
										pos: position{line: 1445, col: 20, offset: 47167},
										expr: &litMatcher{
											pos:        position{line: 1445, col: 21, offset: 47168},
											val:        ">",
											ignoreCase: false,
											want:       "\">\"",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 1446, col: 5, offset: 47199},
									run: (*parser).callonLink172,
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1440, col: 19, offset: 47032},
						name: "RelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1440, col: 34, offset: 47047},
						name: "ExternalLink",
					},
				},
			},
		},
		{
			name: "RelativeLink",
			pos:  position{line: 1454, col: 1, offset: 47414},
			expr: &choiceExpr{
				pos: position{line: 1456, col: 5, offset: 47450},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1456, col: 5, offset: 47450},
						run: (*parser).callonRelativeLink2,
						expr: &seqExpr{
							pos: position{line: 1456, col: 5, offset: 47450},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1456, col: 5, offset: 47450},
									val:        "\\link:",
									ignoreCase: false,
									want:       "\"\\\\link:\"",
								},
								&labeledExpr{
									pos:   position{line: 1456, col: 17, offset: 47462},
									label: "url",
									expr: &actionExpr{
										pos: position{line: 3040, col: 13, offset: 98936},
										run: (*parser).callonRelativeLink6,
										expr: &seqExpr{
											pos: position{line: 3040, col: 13, offset: 98936},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 3040, col: 13, offset: 98936},
													label: "scheme",
													expr: &zeroOrOneExpr{
														pos: position{line: 3040, col: 20, offset: 98943},
														expr: &choiceExpr{
															pos: position{line: 3048, col: 11, offset: 99205},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 3048, col: 11, offset: 99205},
																	val:        "http://",
																	ignoreCase: false,
																	want:       "\"http://\"",
																},
																&litMatcher{
																	pos:        position{line: 3048, col: 23, offset: 99217},
																	val:        "https://",
																	ignoreCase: false,
																	want:       "\"https://\"",
																},
																&litMatcher{
																	pos:        position{line: 3048, col: 36, offset: 99230},
																	val:        "ftp://",
																	ignoreCase: false,
																	want:       "\"ftp://\"",
																},
																&litMatcher{
																	pos:        position{line: 3048, col: 47, offset: 99241},
																	val:        "irc://",
																	ignoreCase: false,
																	want:       "\"irc://\"",
																},
																&litMatcher{
																	pos:        position{line: 3048, col: 58, offset: 99252},
																	val:        "mailto:",
																	ignoreCase: false,
																	want:       "\"mailto:\"",
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 3040, col: 30, offset: 98953},
													label: "path",
													expr: &oneOrMoreExpr{
														pos: position{line: 3040, col: 35, offset: 98958},
														expr: &choiceExpr{
															pos: position{line: 3040, col: 36, offset: 98959},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 3051, col: 5, offset: 99280},
																	run: (*parser).callonRelativeLink19,
																	expr: &seqExpr{
																		pos: position{line: 3051, col: 5, offset: 99280},
																		exprs: []interface{}{
																			&notExpr{
																				pos: position{line: 3051, col: 5, offset: 99280},
																				expr: &litMatcher{
																					pos:        position{line: 3051, col: 6, offset: 99281},
																					val:        "[",
																					ignoreCase: false,
																					want:       "\"[\"",
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 3052, col: 5, offset: 99305},
																				label: "elements",
																				expr: &oneOrMoreExpr{
																					pos: position{line: 3052, col: 14, offset: 99314},
																					expr: &choiceExpr{
																						pos: position{line: 3053, col: 9, offset: 99324},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 3053, col: 9, offset: 99324},
																								run: (*parser).callonRelativeLink26,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 3053, col: 9, offset: 99324},
																									expr: &charClassMatcher{
																										pos:        position{line: 3053, col: 10, offset: 99325},
																										val:        "[^\\r\\n[]�{.,;?!<> ]",
																										chars:      []rune{'\r', '\n', '[', ']', '�', '{', '.', ',', ';', '?', '!', '<', '>', ' '},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																							&seqExpr{
																								pos: position{line: 3056, col: 11, offset: 99590},
																								exprs: []interface{}{
																									&actionExpr{
																										pos: position{line: 3026, col: 25, offset: 98561},
																										run: (*parser).callonRelativeLink30,
																										expr: &charClassMatcher{
																											pos:        position{line: 3026, col: 25, offset: 98561},
																											val:        "[.,;?!]",
																											chars:      []rune{'.', ',', ';', '?', '!'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&andExpr{
																										pos: position{line: 3056, col: 32, offset: 99611},
																										expr: &notExpr{
																											pos: position{line: 3056, col: 34, offset: 99613},
																											expr: &choiceExpr{
																												pos: position{line: 3056, col: 36, offset: 99615},
																												alternatives: []interface{}{
																													&notExpr{
																														pos: position{line: 3093, col: 8, offset: 100474},
																														expr: &anyMatcher{
																															line: 3093, col: 9, offset: 100475,
																														},
																													},
																													&actionExpr{
																														pos: position{line: 3080, col: 10, offset: 100200},
																														run: (*parser).callonRelativeLink37,
																														expr: &charClassMatcher{
																															pos:        position{line: 3080, col: 11, offset: 100201},
																															val:        "[ \\t]",
																															chars:      []rune{' ', '\t'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 648, col: 5, offset: 20883},
																								run: (*parser).callonRelativeLink39,
																								expr: &seqExpr{
																									pos: position{line: 648, col: 5, offset: 20883},
																									exprs: []interface{}{
																										&andCodeExpr{
																											pos: position{line: 648, col: 5, offset: 20883},
																											run: (*parser).callonRelativeLink41,
																										},
																										&labeledExpr{
																											pos:   position{line: 651, col: 5, offset: 20952},
																											label: "element",
																											expr: &choiceExpr{
																												pos: position{line: 651, col: 14, offset: 20961},
																												alternatives: []interface{}{
																													&actionExpr{
																														pos: position{line: 671, col: 25, offset: 21614},
																														run: (*parser).callonRelativeLink44,
																														expr: &seqExpr{
																															pos: position{line: 671, col: 25, offset: 21614},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 671, col: 25, offset: 21614},
																																	val:        "{counter:",
																																	ignoreCase: false,
																																	want:       "\"{counter:\"",
																																},
																																&labeledExpr{
																																	pos:   position{line: 671, col: 37, offset: 21626},
																																	label: "name",
																																	expr: &actionExpr{
																																		pos: position{line: 324, col: 18, offset: 10072},
																																		run: (*parser).callonRelativeLink48,
																																		expr: &seqExpr{
																																			pos: position{line: 324, col: 18, offset: 10072},
																																			exprs: []interface{}{
																																				&charClassMatcher{
																																					pos:        position{line: 324, col: 18, offset: 10072},
																																					val:        "[_0-9\\pL]",
																																					chars:      []rune{'_'},
																																					ranges:     []rune{'0', '9'},
																																					classes:    []*unicode.RangeTable{rangeTable("L")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 324, col: 28, offset: 10082},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 324, col: 29, offset: 10083},
																																						val:        "[-0-9\\pL]",
																																						chars:      []rune{'-'},
																																						ranges:     []rune{'0', '9'},
																																						classes:    []*unicode.RangeTable{rangeTable("L")},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&labeledExpr{
																																	pos:   position{line: 671, col: 56, offset: 21645},
																																	label: "start",
																																	expr: &zeroOrOneExpr{
																																		pos: position{line: 671, col: 62, offset: 21651},
																																		expr: &actionExpr{
																																			pos: position{line: 679, col: 17, offset: 21946},
																																			run: (*parser).callonRelativeLink55,
																																			expr: &seqExpr{
																																				pos: position{line: 679, col: 17, offset: 21946},
																																				exprs: []interface{}{
																																					&litMatcher{
																																						pos:        position{line: 679, col: 17, offset: 21946},
																																						val:        ":",
																																						ignoreCase: false,
																																						want:       "\":\"",
																																					},
																																					&labeledExpr{
																																						pos:   position{line: 679, col: 21, offset: 21950},
																																						label: "start",
																																						expr: &choiceExpr{
																																							pos: position{line: 679, col: 28, offset: 21957},
																																							alternatives: []interface{}{
																																								&actionExpr{
																																									pos: position{line: 679, col: 28, offset: 21957},
																																									run: (*parser).callonRelativeLink60,
																																									expr: &charClassMatcher{
																																										pos:        position{line: 679, col: 28, offset: 21957},
																																										val:        "[A-Za-z]",
																																										ranges:     []rune{'A', 'Z', 'a', 'z'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																								&actionExpr{
																																									pos: position{line: 681, col: 9, offset: 22011},
																																									run: (*parser).callonRelativeLink62,
																																									expr: &oneOrMoreExpr{
																																										pos: position{line: 681, col: 9, offset: 22011},
																																										expr: &charClassMatcher{
																																											pos:        position{line: 681, col: 9, offset: 22011},
																																											val:        "[0-9]",
																																											ranges:     []rune{'0', '9'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&litMatcher{
																																	pos:        position{line: 671, col: 78, offset: 21667},
																																	val:        "}",
																																	ignoreCase: false,
																																	want:       "\"}\"",
																																},
																															},
																														},
																													},
																													&actionExpr{
																														pos: position{line: 675, col: 25, offset: 21785},
																														run: (*parser).callonRelativeLink66,
																														expr: &seqExpr{
																															pos: position{line: 675, col: 25, offset: 21785},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 675, col: 25, offset: 21785},
																																	val:        "{counter2:",
																																	ignoreCase: false,
																																	want:       "\"{counter2:\"",
																																},
																																&labeledExpr{
																																	pos:   position{line: 675, col: 38, offset: 21798},
																																	label: "name",
																																	expr: &actionExpr{
																																		pos: position{line: 324, col: 18, offset: 10072},
																																		run: (*parser).callonRelativeLink70,
																																		expr: &seqExpr{
																																			pos: position{line: 324, col: 18, offset: 10072},
																																			exprs: []interface{}{
																																				&charClassMatcher{
																																					pos:        position{line: 324, col: 18, offset: 10072},
																																					val:        "[_0-9\\pL]",
																																					chars:      []rune{'_'},
																																					ranges:     []rune{'0', '9'},
																																					classes:    []*unicode.RangeTable{rangeTable("L")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 324, col: 28, offset: 10082},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 324, col: 29, offset: 10083},
																																						val:        "[-0-9\\pL]",
																																						chars:      []rune{'-'},
																																						ranges:     []rune{'0', '9'},
																																						classes:    []*unicode.RangeTable{rangeTable("L")},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&labeledExpr{
																																	pos:   position{line: 675, col: 57, offset: 21817},
																																	label: "start",
																																	expr: &zeroOrOneExpr{
																																		pos: position{line: 675, col: 63, offset: 21823},
																																		expr: &actionExpr{
																																			pos: position{line: 679, col: 17, offset: 21946},
																																			run: (*parser).callonRelativeLink77,
																																			expr: &seqExpr{
																																				pos: position{line: 679, col: 17, offset: 21946},
																																				exprs: []interface{}{
																																					&litMatcher{
																																						pos:        position{line: 679, col: 17, offset: 21946},
																																						val:        ":",
																																						ignoreCase: false,
																																						want:       "\":\"",
																																					},
																																					&labeledExpr{
																																						pos:   position{line: 679, col: 21, offset: 21950},
																																						label: "start",
																																						expr: &choiceExpr{
																																							pos: position{line: 679, col: 28, offset: 21957},
																																							alternatives: []interface{}{
																																								&actionExpr{
																																									pos: position{line: 679, col: 28, offset: 21957},
																																									run: (*parser).callonRelativeLink82,
																																									expr: &charClassMatcher{
																																										pos:        position{line: 679, col: 28, offset: 21957},
																																										val:        "[A-Za-z]",
																																										ranges:     []rune{'A', 'Z', 'a', 'z'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																								&actionExpr{
																																									pos: position{line: 681, col: 9, offset: 22011},
																																									run: (*parser).callonRelativeLink84,
																																									expr: &oneOrMoreExpr{
																																										pos: position{line: 681, col: 9, offset: 22011},
																																										expr: &charClassMatcher{
																																											pos:        position{line: 681, col: 9, offset: 22011},
																																											val:        "[0-9]",
																																											ranges:     []rune{'0', '9'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&litMatcher{
																																	pos:        position{line: 675, col: 79, offset: 21839},
																																	val:        "}",
																																	ignoreCase: false,
																																	want:       "\"}\"",
																																},
																															},
																														},
																													},
																													&actionExpr{
																														pos: position{line: 657, col: 5, offset: 21090},
																														run: (*parser).callonRelativeLink88,
																														expr: &seqExpr{
																															pos: position{line: 657, col: 5, offset: 21090},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 657, col: 5, offset: 21090},
																																	val:        "\\{",
																																	ignoreCase: false,
																																	want:       "\"\\\\{\"",
																																},
																																&labeledExpr{
																																	pos:   position{line: 657, col: 13, offset: 21098},
																																	label: "name",
																																	expr: &actionExpr{
																																		pos: position{line: 324, col: 18, offset: 10072},
																																		run: (*parser).callonRelativeLink92,
																																		expr: &seqExpr{
																																			pos: position{line: 324, col: 18, offset: 10072},
																																			exprs: []interface{}{
																																				&charClassMatcher{
																																					pos:        position{line: 324, col: 18, offset: 10072},
																																					val:        "[_0-9\\pL]",
																																					chars:      []rune{'_'},
																																					ranges:     []rune{'0', '9'},
																																					classes:    []*unicode.RangeTable{rangeTable("L")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 324, col: 28, offset: 10082},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 324, col: 29, offset: 10083},
																																						val:        "[-0-9\\pL]",
																																						chars:      []rune{'-'},
																																						ranges:     []rune{'0', '9'},
																																						classes:    []*unicode.RangeTable{rangeTable("L")},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&litMatcher{
																																	pos:        position{line: 657, col: 32, offset: 21117},
																																	val:        "}",
																																	ignoreCase: false,
																																	want:       "\"}\"",
																																},
																															},
																														},
																													},
																													&actionExpr{
																														pos: position{line: 664, col: 5, offset: 21358},
																														run: (*parser).callonRelativeLink98,
																														expr: &seqExpr{
																															pos: position{line: 664, col: 5, offset: 21358},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 664, col: 5, offset: 21358},
																																	val:        "{",
																																	ignoreCase: false,
																																	want:       "\"{\"",
																																},
																																&labeledExpr{
																																	pos:   position{line: 664, col: 9, offset: 21362},
																																	label: "name",
																																	expr: &actionExpr{
																																		pos: position{line: 324, col: 18, offset: 10072},
																																		run: (*parser).callonRelativeLink102,
																																		expr: &seqExpr{
																																			pos: position{line: 324, col: 18, offset: 10072},
																																			exprs: []interface{}{
																																				&charClassMatcher{
																																					pos:        position{line: 324, col: 18, offset: 10072},
																																					val:        "[_0-9\\pL]",
																																					chars:      []rune{'_'},
																																					ranges:     []rune{'0', '9'},
																																					classes:    []*unicode.RangeTable{rangeTable("L")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 324, col: 28, offset: 10082},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 324, col: 29, offset: 10083},
																																						val:        "[-0-9\\pL]",
																																						chars:      []rune{'-'},
																																						ranges:     []rune{'0', '9'},
																																						classes:    []*unicode.RangeTable{rangeTable("L")},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&litMatcher{
																																	pos:        position{line: 664, col: 28, offset: 21381},
																																	val:        "}",
																																	ignoreCase: false,
																																	want:       "\"}\"",
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 2753, col: 5, offset: 90225},
																								run: (*parser).callonRelativeLink108,
																								expr: &seqExpr{
																									pos: position{line: 2753, col: 5, offset: 90225},
																									exprs: []interface{}{
																										&andCodeExpr{
																											pos: position{line: 2753, col: 5, offset: 90225},
																											run: (*parser).callonRelativeLink110,
																										},
																										&labeledExpr{
																											pos:   position{line: 2756, col: 5, offset: 90301},
																											label: "element",
																											expr: &choiceExpr{
																												pos: position{line: 2758, col: 9, offset: 90399},
																												alternatives: []interface{}{
																													&actionExpr{
																														pos: position{line: 2758, col: 9, offset: 90399},
																														run: (*parser).callonRelativeLink113,
																														expr: &choiceExpr{
																															pos: position{line: 699, col: 27, offset: 22665},
																															alternatives: []interface{}{
																																&actionExpr{
																																	pos: position{line: 699, col: 27, offset: 22665},
																																	run: (*parser).callonRelativeLink115,
																																	expr: &seqExpr{
																																		pos: position{line: 699, col: 27, offset: 22665},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 699, col: 27, offset: 22665},
																																				val:        "<<",
																																				ignoreCase: false,
																																				want:       "\"<<\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 699, col: 32, offset: 22670},
																																				label: "id",
																																				expr: &actionExpr{
																																					pos: position{line: 3065, col: 7, offset: 99852},
																																					run: (*parser).callonRelativeLink119,
																																					expr: &oneOrMoreExpr{
																																						pos: position{line: 3065, col: 7, offset: 99852},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 3065, col: 7, offset: 99852},
																																							val:        "[^[]<>,]",
																																							chars:      []rune{'[', ']', '<', '>', ','},
																																							ignoreCase: false,
																																							inverted:   true,
																																						},
																																					},
																																				},
																																			},
																																			&zeroOrMoreExpr{
																																				pos: position{line: 699, col: 40, offset: 22678},
																																				expr: &actionExpr{
																																					pos: position{line: 3080, col: 10, offset: 100200},
																																					run: (*parser).callonRelativeLink123,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 3080, col: 11, offset: 100201},
																																						val:        "[ \\t]",
																																						chars:      []rune{' ', '\t'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 699, col: 47, offset: 22685},
																																				val:        ",",
																																				ignoreCase: false,
																																				want:       "\",\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 699, col: 51, offset: 22689},
																																				label: "label",
																																				expr: &oneOrMoreExpr{
																																					pos: position{line: 709, col: 24, offset: 23090},
																																					expr: &choiceExpr{
																																						pos: position{line: 710, col: 5, offset: 23096},
																																						alternatives: []interface{}{
																																							&actionExpr{
																																								pos: position{line: 710, col: 6, offset: 23097},
																																								run: (*parser).callonRelativeLink129,
																																								expr: &seqExpr{
																																									pos: position{line: 710, col: 6, offset: 23097},
																																									exprs: []interface{}{
																																										&charClassMatcher{
																																											pos:        position{line: 710, col: 6, offset: 23097},
																																											val:        "[0-9\\pL]",
																																											ranges:     []rune{'0', '9'},
																																											classes:    []*unicode.RangeTable{rangeTable("L")},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&oneOrMoreExpr{
																																											pos: position{line: 710, col: 14, offset: 23105},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 710, col: 14, offset: 23105},
																																												val:        "[^\\r\\n{<>]",
																																												chars:      []rune{'\r', '\n', '{', '<', '>'},
																																												ignoreCase: false,
																																												inverted:   true,
																																											},
																																										},
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 657, col: 5, offset: 21090},
																																								run: (*parser).callonRelativeLink134,
																																								expr: &seqExpr{
																																									pos: position{line: 657, col: 5, offset: 21090},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 657, col: 5, offset: 21090},
																																											val:        "\\{",
																																											ignoreCase: false,
																																											want:       "\"\\\\{\"",
																																										},
																																										&labeledExpr{
																																											pos:   position{line: 657, col: 13, offset: 21098},
																																											label: "name",
																																											expr: &actionExpr{
																																												pos: position{line: 324, col: 18, offset: 10072},
																																												run: (*parser).callonRelativeLink138,
																																												expr: &seqExpr{
																																													pos: position{line: 324, col: 18, offset: 10072},
																																													exprs: []interface{}{
																																														&charClassMatcher{
																																															pos:        position{line: 324, col: 18, offset: 10072},
																																															val:        "[_0-9\\pL]",
																																															chars:      []rune{'_'},
																																															ranges:     []rune{'0', '9'},
																																															classes:    []*unicode.RangeTable{rangeTable("L")},
																																															ignoreCase: false,
																																															inverted:   false,
																																														},
																																														&zeroOrMoreExpr{
																																															pos: position{line: 324, col: 28, offset: 10082},
																																															expr: &charClassMatcher{
																																																pos:        position{line: 324, col: 29, offset: 10083},
																																																val:        "[-0-9\\pL]",
																																																chars:      []rune{'-'},
																																																ranges:     []rune{'0', '9'},
																																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																														},
																																													},
																																												},
																																											},
																																										},
																																										&litMatcher{
																																											pos:        position{line: 657, col: 32, offset: 21117},
																																											val:        "}",
																																											ignoreCase: false,
																																											want:       "\"}\"",
																																										},
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 664, col: 5, offset: 21358},
																																								run: (*parser).callonRelativeLink144,
																																								expr: &seqExpr{
																																									pos: position{line: 664, col: 5, offset: 21358},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 664, col: 5, offset: 21358},
																																											val:        "{",
																																											ignoreCase: false,
																																											want:       "\"{\"",
																																										},
																																										&labeledExpr{
																																											pos:   position{line: 664, col: 9, offset: 21362},
																																											label: "name",
																																											expr: &actionExpr{
																																												pos: position{line: 324, col: 18, offset: 10072},
																																												run: (*parser).callonRelativeLink148,
																																												expr: &seqExpr{
																																													pos: position{line: 324, col: 18, offset: 10072},
																																													exprs: []interface{}{
																																														&charClassMatcher{
																																															pos:        position{line: 324, col: 18, offset: 10072},
																																															val:        "[_0-9\\pL]",
																																															chars:      []rune{'_'},
																																															ranges:     []rune{'0', '9'},
																																															classes:    []*unicode.RangeTable{rangeTable("L")},
																																															ignoreCase: false,
																																															inverted:   false,
																																														},
																																														&zeroOrMoreExpr{
																																															pos: position{line: 324, col: 28, offset: 10082},
																																															expr: &charClassMatcher{
																																																pos:        position{line: 324, col: 29, offset: 10083},
																																																val:        "[-0-9\\pL]",
																																																chars:      []rune{'-'},
																																																ranges:     []rune{'0', '9'},
																																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																														},
																																													},
																																												},
																																											},
																																										},
																																										&litMatcher{
																																											pos:        position{line: 664, col: 28, offset: 21381},
																																											val:        "}",
																																											ignoreCase: false,
																																											want:       "\"}\"",
																																										},
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 714, col: 8, offset: 23331},
																																								run: (*parser).callonRelativeLink154,
																																								expr: &litMatcher{
																																									pos:        position{line: 714, col: 8, offset: 23331},
																																									val:        "{",
																																									ignoreCase: false,
																																									want:       "\"{\"",
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 699, col: 79, offset: 22717},
																																				val:        ">>",
																																				ignoreCase: false,
																																				want:       "\">>\"",
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 701, col: 9, offset: 22790},
																																	run: (*parser).callonRelativeLink157,
																																	expr: &seqExpr{
																																		pos: position{line: 701, col: 9, offset: 22790},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 701, col: 9, offset: 22790},
																																				val:        "<<",
																																				ignoreCase: false,
																																				want:       "\"<<\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 701, col: 14, offset: 22795},
																																				label: "id",
																																				expr: &actionExpr{
																																					pos: position{line: 3065, col: 7, offset: 99852},
																																					run: (*parser).callonRelativeLink161,
																																					expr: &oneOrMoreExpr{
																																						pos: position{line: 3065, col: 7, offset: 99852},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 3065, col: 7, offset: 99852},
																																							val:        "[^[]<>,]",
																																							chars:      []rune{'[', ']', '<', '>', ','},
																																							ignoreCase: false,
																																							inverted:   true,
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 701, col: 22, offset: 22803},
																																				val:        ">>",
																																				ignoreCase: false,
																																				want:       "\">>\"",
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																													&actionExpr{
																														pos: position{line: 2761, col: 11, offset: 90503},
																														run: (*parser).callonRelativeLink165,
																														expr: &charClassMatcher{
																															pos:        position{line: 2761, col: 12, offset: 90504},
																															val:        "[<>&]",
																															chars:      []rune{'<', '>', '&'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 3059, col: 11, offset: 99696},
																								run: (*parser).callonRelativeLink167,
																								expr: &litMatcher{
																									pos:        position{line: 3059, col: 11, offset: 99696},
																									val:        "{",
																									ignoreCase: false,
																									want:       "\"{\"",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 1219, col: 23, offset: 38141},
																	run: (*parser).callonRelativeLink169,
																	expr: &seqExpr{
																		pos: position{line: 1219, col: 23, offset: 38141},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 1217, col: 32, offset: 38109},
																				val:        "�",
																				ignoreCase: false,
																				want:       "\"�\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 1219, col: 51, offset: 38169},
																				label: "ref",
																				expr: &actionExpr{
																					pos: position{line: 1219, col: 56, offset: 38174},
																					run: (*parser).callonRelativeLink173,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 1219, col: 56, offset: 38174},
																						expr: &charClassMatcher{
																							pos:        position{line: 1219, col: 56, offset: 38174},
																							val:        "[0-9]",
																							ranges:     []rune{'0', '9'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 1217, col: 32, offset: 38109},
																				val:        "�",
																				ignoreCase: false,
																				want:       "\"�\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1456, col: 32, offset: 47477},
									label: "attributes",
									expr: &ruleRefExpr{
										pos:  position{line: 1456, col: 44, offset: 47489},
										name: "InlineAttributes",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1461, col: 5, offset: 47621},
						run: (*parser).callonRelativeLink179,
						expr: &seqExpr{
							pos: position{line: 1461, col: 5, offset: 47621},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1461, col: 5, offset: 47621},
									val:        "link:",
									ignoreCase: false,
									want:       "\"link:\"",
								},
								&labeledExpr{
									pos:   position{line: 1461, col: 13, offset: 47629},
									label: "url",
									expr: &actionExpr{
										pos: position{line: 3040, col: 13, offset: 98936},
										run: (*parser).callonRelativeLink183,
										expr: &seqExpr{
											pos: position{line: 3040, col: 13, offset: 98936},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 3040, col: 13, offset: 98936},
													label: "scheme",
													expr: &zeroOrOneExpr{
														pos: position{line: 3040, col: 20, offset: 98943},
														expr: &choiceExpr{
															pos: position{line: 3048, col: 11, offset: 99205},
															alternatives: []interface{}{
																&litMatcher{
																	pos:        position{line: 3048, col: 11, offset: 99205},
																	val:        "http://",
																	ignoreCase: false,
																	want:       "\"http://\"",
																},
																&litMatcher{
																	pos:        position{line: 3048, col: 23, offset: 99217},
																	val:        "https://",
																	ignoreCase: false,
																	want:       "\"https://\"",
																},
																&litMatcher{
																	pos:        position{line: 3048, col: 36, offset: 99230},
																	val:        "ftp://",
																	ignoreCase: false,
																	want:       "\"ftp://\"",
																},
																&litMatcher{
																	pos:        position{line: 3048, col: 47, offset: 99241},
																	val:        "irc://",
																	ignoreCase: false,
																	want:       "\"irc://\"",
																},
																&litMatcher{
																	pos:        position{line: 3048, col: 58, offset: 99252},
																	val:        "mailto:",
																	ignoreCase: false,
																	want:       "\"mailto:\"",
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 3040, col: 30, offset: 98953},
													label: "path",
													expr: &oneOrMoreExpr{
														pos: position{line: 3040, col: 35, offset: 98958},
														expr: &choiceExpr{
															pos: position{line: 3040, col: 36, offset: 98959},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 3051, col: 5, offset: 99280},
																	run: (*parser).callonRelativeLink196,
																	expr: &seqExpr{
																		pos: position{line: 3051, col: 5, offset: 99280},
																		exprs: []interface{}{
																			&notExpr{
																				pos: position{line: 3051, col: 5, offset: 99280},
																				expr: &litMatcher{
																					pos:        position{line: 3051, col: 6, offset: 99281},
																					val:        "[",
																					ignoreCase: false,
																					want:       "\"[\"",
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 3052, col: 5, offset: 99305},
																				label: "elements",
																				expr: &oneOrMoreExpr{
																					pos: position{line: 3052, col: 14, offset: 99314},
																					expr: &choiceExpr{
																						pos: position{line: 3053, col: 9, offset: 99324},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 3053, col: 9, offset: 99324},
																								run: (*parser).callonRelativeLink203,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 3053, col: 9, offset: 99324},
																									expr: &charClassMatcher{
																										pos:        position{line: 3053, col: 10, offset: 99325},
																										val:        "[^\\r\\n[]�{.,;?!<> ]",
																										chars:      []rune{'\r', '\n', '[', ']', '�', '{', '.', ',', ';', '?', '!', '<', '>', ' '},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																							&seqExpr{
																								pos: position{line: 3056, col: 11, offset: 99590},
																								exprs: []interface{}{
																									&actionExpr{
																										pos: position{line: 3026, col: 25, offset: 98561},
																										run: (*parser).callonRelativeLink207,
																										expr: &charClassMatcher{
																											pos:        position{line: 3026, col: 25, offset: 98561},
																											val:        "[.,;?!]",
																											chars:      []rune{'.', ',', ';', '?', '!'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																									&andExpr{
																										pos: position{line: 3056, col: 32, offset: 99611},
																										expr: &notExpr{
																											pos: position{line: 3056, col: 34, offset: 99613},
																											expr: &choiceExpr{
																												pos: position{line: 3056, col: 36, offset: 99615},
																												alternatives: []interface{}{
																													&notExpr{
																														pos: position{line: 3093, col: 8, offset: 100474},
																														expr: &anyMatcher{
																															line: 3093, col: 9, offset: 100475,
																														},
																													},
																													&actionExpr{
																														pos: position{line: 3080, col: 10, offset: 100200},
																														run: (*parser).callonRelativeLink214,
																														expr: &charClassMatcher{
																															pos:        position{line: 3080, col: 11, offset: 100201},
																															val:        "[ \\t]",
																															chars:      []rune{' ', '\t'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 648, col: 5, offset: 20883},
																								run: (*parser).callonRelativeLink216,
																								expr: &seqExpr{
																									pos: position{line: 648, col: 5, offset: 20883},
																									exprs: []interface{}{
																										&andCodeExpr{
																											pos: position{line: 648, col: 5, offset: 20883},
																											run: (*parser).callonRelativeLink218,
																										},
																										&labeledExpr{
																											pos:   position{line: 651, col: 5, offset: 20952},
																											label: "element",
																											expr: &choiceExpr{
																												pos: position{line: 651, col: 14, offset: 20961},
																												alternatives: []interface{}{
																													&actionExpr{
																														pos: position{line: 671, col: 25, offset: 21614},
																														run: (*parser).callonRelativeLink221,
																														expr: &seqExpr{
																															pos: position{line: 671, col: 25, offset: 21614},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 671, col: 25, offset: 21614},
																																	val:        "{counter:",
																																	ignoreCase: false,
																																	want:       "\"{counter:\"",
																																},
																																&labeledExpr{
																																	pos:   position{line: 671, col: 37, offset: 21626},
																																	label: "name",
																																	expr: &actionExpr{
																																		pos: position{line: 324, col: 18, offset: 10072},
																																		run: (*parser).callonRelativeLink225,
																																		expr: &seqExpr{
																																			pos: position{line: 324, col: 18, offset: 10072},
																																			exprs: []interface{}{
																																				&charClassMatcher{
																																					pos:        position{line: 324, col: 18, offset: 10072},
																																					val:        "[_0-9\\pL]",
																																					chars:      []rune{'_'},
																																					ranges:     []rune{'0', '9'},
																																					classes:    []*unicode.RangeTable{rangeTable("L")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 324, col: 28, offset: 10082},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 324, col: 29, offset: 10083},
																																						val:        "[-0-9\\pL]",
																																						chars:      []rune{'-'},
																																						ranges:     []rune{'0', '9'},
																																						classes:    []*unicode.RangeTable{rangeTable("L")},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&labeledExpr{
																																	pos:   position{line: 671, col: 56, offset: 21645},
																																	label: "start",
																																	expr: &zeroOrOneExpr{
																																		pos: position{line: 671, col: 62, offset: 21651},
																																		expr: &actionExpr{
																																			pos: position{line: 679, col: 17, offset: 21946},
																																			run: (*parser).callonRelativeLink232,
																																			expr: &seqExpr{
																																				pos: position{line: 679, col: 17, offset: 21946},
																																				exprs: []interface{}{
																																					&litMatcher{
																																						pos:        position{line: 679, col: 17, offset: 21946},
																																						val:        ":",
																																						ignoreCase: false,
																																						want:       "\":\"",
																																					},
																																					&labeledExpr{
																																						pos:   position{line: 679, col: 21, offset: 21950},
																																						label: "start",
																																						expr: &choiceExpr{
																																							pos: position{line: 679, col: 28, offset: 21957},
																																							alternatives: []interface{}{
																																								&actionExpr{
																																									pos: position{line: 679, col: 28, offset: 21957},
																																									run: (*parser).callonRelativeLink237,
																																									expr: &charClassMatcher{
																																										pos:        position{line: 679, col: 28, offset: 21957},
																																										val:        "[A-Za-z]",
																																										ranges:     []rune{'A', 'Z', 'a', 'z'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																								&actionExpr{
																																									pos: position{line: 681, col: 9, offset: 22011},
																																									run: (*parser).callonRelativeLink239,
																																									expr: &oneOrMoreExpr{
																																										pos: position{line: 681, col: 9, offset: 22011},
																																										expr: &charClassMatcher{
																																											pos:        position{line: 681, col: 9, offset: 22011},
																																											val:        "[0-9]",
																																											ranges:     []rune{'0', '9'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&litMatcher{
																																	pos:        position{line: 671, col: 78, offset: 21667},
																																	val:        "}",
																																	ignoreCase: false,
																																	want:       "\"}\"",
																																},
																															},
																														},
																													},
																													&actionExpr{
																														pos: position{line: 675, col: 25, offset: 21785},
																														run: (*parser).callonRelativeLink243,
																														expr: &seqExpr{
																															pos: position{line: 675, col: 25, offset: 21785},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 675, col: 25, offset: 21785},
																																	val:        "{counter2:",
																																	ignoreCase: false,
																																	want:       "\"{counter2:\"",
																																},
																																&labeledExpr{
																																	pos:   position{line: 675, col: 38, offset: 21798},
																																	label: "name",
																																	expr: &actionExpr{
																																		pos: position{line: 324, col: 18, offset: 10072},
																																		run: (*parser).callonRelativeLink247,
																																		expr: &seqExpr{
																																			pos: position{line: 324, col: 18, offset: 10072},
																																			exprs: []interface{}{
																																				&charClassMatcher{
																																					pos:        position{line: 324, col: 18, offset: 10072},
																																					val:        "[_0-9\\pL]",
																																					chars:      []rune{'_'},
																																					ranges:     []rune{'0', '9'},
																																					classes:    []*unicode.RangeTable{rangeTable("L")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 324, col: 28, offset: 10082},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 324, col: 29, offset: 10083},
																																						val:        "[-0-9\\pL]",
																																						chars:      []rune{'-'},
																																						ranges:     []rune{'0', '9'},
																																						classes:    []*unicode.RangeTable{rangeTable("L")},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&labeledExpr{
																																	pos:   position{line: 675, col: 57, offset: 21817},
																																	label: "start",
																																	expr: &zeroOrOneExpr{
																																		pos: position{line: 675, col: 63, offset: 21823},
																																		expr: &actionExpr{
																																			pos: position{line: 679, col: 17, offset: 21946},
																																			run: (*parser).callonRelativeLink254,
																																			expr: &seqExpr{
																																				pos: position{line: 679, col: 17, offset: 21946},
																																				exprs: []interface{}{
																																					&litMatcher{
																																						pos:        position{line: 679, col: 17, offset: 21946},
																																						val:        ":",
																																						ignoreCase: false,
																																						want:       "\":\"",
																																					},
																																					&labeledExpr{
																																						pos:   position{line: 679, col: 21, offset: 21950},
																																						label: "start",
																																						expr: &choiceExpr{
																																							pos: position{line: 679, col: 28, offset: 21957},
																																							alternatives: []interface{}{
																																								&actionExpr{
																																									pos: position{line: 679, col: 28, offset: 21957},
																																									run: (*parser).callonRelativeLink259,
																																									expr: &charClassMatcher{
																																										pos:        position{line: 679, col: 28, offset: 21957},
																																										val:        "[A-Za-z]",
																																										ranges:     []rune{'A', 'Z', 'a', 'z'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																								&actionExpr{
																																									pos: position{line: 681, col: 9, offset: 22011},
																																									run: (*parser).callonRelativeLink261,
																																									expr: &oneOrMoreExpr{
																																										pos: position{line: 681, col: 9, offset: 22011},
																																										expr: &charClassMatcher{
																																											pos:        position{line: 681, col: 9, offset: 22011},
																																											val:        "[0-9]",
																																											ranges:     []rune{'0', '9'},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&litMatcher{
																																	pos:        position{line: 675, col: 79, offset: 21839},
																																	val:        "}",
																																	ignoreCase: false,
																																	want:       "\"}\"",
																																},
																															},
																														},
																													},
																													&actionExpr{
																														pos: position{line: 657, col: 5, offset: 21090},
																														run: (*parser).callonRelativeLink265,
																														expr: &seqExpr{
																															pos: position{line: 657, col: 5, offset: 21090},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 657, col: 5, offset: 21090},
																																	val:        "\\{",
																																	ignoreCase: false,
																																	want:       "\"\\\\{\"",
																																},
																																&labeledExpr{
																																	pos:   position{line: 657, col: 13, offset: 21098},
																																	label: "name",
																																	expr: &actionExpr{
																																		pos: position{line: 324, col: 18, offset: 10072},
																																		run: (*parser).callonRelativeLink269,
																																		expr: &seqExpr{
																																			pos: position{line: 324, col: 18, offset: 10072},
																																			exprs: []interface{}{
																																				&charClassMatcher{
																																					pos:        position{line: 324, col: 18, offset: 10072},
																																					val:        "[_0-9\\pL]",
																																					chars:      []rune{'_'},
																																					ranges:     []rune{'0', '9'},
																																					classes:    []*unicode.RangeTable{rangeTable("L")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 324, col: 28, offset: 10082},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 324, col: 29, offset: 10083},
																																						val:        "[-0-9\\pL]",
																																						chars:      []rune{'-'},
																																						ranges:     []rune{'0', '9'},
																																						classes:    []*unicode.RangeTable{rangeTable("L")},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&litMatcher{
																																	pos:        position{line: 657, col: 32, offset: 21117},
																																	val:        "}",
																																	ignoreCase: false,
																																	want:       "\"}\"",
																																},
																															},
																														},
																													},
																													&actionExpr{
																														pos: position{line: 664, col: 5, offset: 21358},
																														run: (*parser).callonRelativeLink275,
																														expr: &seqExpr{
																															pos: position{line: 664, col: 5, offset: 21358},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 664, col: 5, offset: 21358},
																																	val:        "{",
																																	ignoreCase: false,
																																	want:       "\"{\"",
																																},
																																&labeledExpr{
																																	pos:   position{line: 664, col: 9, offset: 21362},
																																	label: "name",
																																	expr: &actionExpr{
																																		pos: position{line: 324, col: 18, offset: 10072},
																																		run: (*parser).callonRelativeLink279,
																																		expr: &seqExpr{
																																			pos: position{line: 324, col: 18, offset: 10072},
																																			exprs: []interface{}{
																																				&charClassMatcher{
																																					pos:        position{line: 324, col: 18, offset: 10072},
																																					val:        "[_0-9\\pL]",
																																					chars:      []rune{'_'},
																																					ranges:     []rune{'0', '9'},
																																					classes:    []*unicode.RangeTable{rangeTable("L")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																				&zeroOrMoreExpr{
																																					pos: position{line: 324, col: 28, offset: 10082},
																																					expr: &charClassMatcher{
																																						pos:        position{line: 324, col: 29, offset: 10083},
																																						val:        "[-0-9\\pL]",
																																						chars:      []rune{'-'},
																																						ranges:     []rune{'0', '9'},
																																						classes:    []*unicode.RangeTable{rangeTable("L")},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&litMatcher{
																																	pos:        position{line: 664, col: 28, offset: 21381},
																																	val:        "}",
																																	ignoreCase: false,
																																	want:       "\"}\"",
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 2753, col: 5, offset: 90225},
																								run: (*parser).callonRelativeLink285,
																								expr: &seqExpr{
																									pos: position{line: 2753, col: 5, offset: 90225},
																									exprs: []interface{}{
																										&andCodeExpr{
																											pos: position{line: 2753, col: 5, offset: 90225},
																											run: (*parser).callonRelativeLink287,
																										},
																										&labeledExpr{
																											pos:   position{line: 2756, col: 5, offset: 90301},
																											label: "element",
																											expr: &choiceExpr{
																												pos: position{line: 2758, col: 9, offset: 90399},
																												alternatives: []interface{}{
																													&actionExpr{
																														pos: position{line: 2758, col: 9, offset: 90399},
																														run: (*parser).callonRelativeLink290,
																														expr: &choiceExpr{
																															pos: position{line: 699, col: 27, offset: 22665},
																															alternatives: []interface{}{
																																&actionExpr{
																																	pos: position{line: 699, col: 27, offset: 22665},
																																	run: (*parser).callonRelativeLink292,
																																	expr: &seqExpr{
																																		pos: position{line: 699, col: 27, offset: 22665},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 699, col: 27, offset: 22665},
																																				val:        "<<",
																																				ignoreCase: false,
																																				want:       "\"<<\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 699, col: 32, offset: 22670},
																																				label: "id",
																																				expr: &actionExpr{
																																					pos: position{line: 3065, col: 7, offset: 99852},
																																					run: (*parser).callonRelativeLink296,
																																					expr: &oneOrMoreExpr{
																																						pos: position{line: 3065, col: 7, offset: 99852},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 3065, col: 7, offset: 99852},
																																							val:        "[^[]<>,]",
																																							chars:      []rune{'[', ']', '<', '>', ','},
																																							ignoreCase: false,
																																							inverted:   true,
																																						},
																																					},
																																				},
																																			},
																																			&zeroOrMoreExpr{
																																				pos: position{line: 699, col: 40, offset: 22678},
																																				expr: &actionExpr{
																																					pos: position{line: 3080, col: 10, offset: 100200},
																																					run: (*parser).callonRelativeLink300,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 3080, col: 11, offset: 100201},
																																						val:        "[ \\t]",
																																						chars:      []rune{' ', '\t'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 699, col: 47, offset: 22685},
																																				val:        ",",
																																				ignoreCase: false,
																																				want:       "\",\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 699, col: 51, offset: 22689},
																																				label: "label",
																																				expr: &oneOrMoreExpr{
																																					pos: position{line: 709, col: 24, offset: 23090},
																																					expr: &choiceExpr{
																																						pos: position{line: 710, col: 5, offset: 23096},
																																						alternatives: []interface{}{
																																							&actionExpr{
																																								pos: position{line: 710, col: 6, offset: 23097},
																																								run: (*parser).callonRelativeLink306,
																																								expr: &seqExpr{
																																									pos: position{line: 710, col: 6, offset: 23097},
																																									exprs: []interface{}{
																																										&charClassMatcher{
																																											pos:        position{line: 710, col: 6, offset: 23097},
																																											val:        "[0-9\\pL]",
																																											ranges:     []rune{'0', '9'},
																																											classes:    []*unicode.RangeTable{rangeTable("L")},
																																											ignoreCase: false,
																																											inverted:   false,
																																										},
																																										&oneOrMoreExpr{
																																											pos: position{line: 710, col: 14, offset: 23105},
																																											expr: &charClassMatcher{
																																												pos:        position{line: 710, col: 14, offset: 23105},
																																												val:        "[^\\r\\n{<>]",
																																												chars:      []rune{'\r', '\n', '{', '<', '>'},
																																												ignoreCase: false,
																																												inverted:   true,
																																											},
																																										},
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 657, col: 5, offset: 21090},
																																								run: (*parser).callonRelativeLink311,
																																								expr: &seqExpr{
																																									pos: position{line: 657, col: 5, offset: 21090},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 657, col: 5, offset: 21090},
																																											val:        "\\{",
																																											ignoreCase: false,
																																											want:       "\"\\\\{\"",
																																										},
																																										&labeledExpr{
																																											pos:   position{line: 657, col: 13, offset: 21098},
																																											label: "name",
																																											expr: &actionExpr{
																																												pos: position{line: 324, col: 18, offset: 10072},
																																												run: (*parser).callonRelativeLink315,
																																												expr: &seqExpr{
																																													pos: position{line: 324, col: 18, offset: 10072},
																																													exprs: []interface{}{
																																														&charClassMatcher{
																																															pos:        position{line: 324, col: 18, offset: 10072},
																																															val:        "[_0-9\\pL]",
																																															chars:      []rune{'_'},
																																															ranges:     []rune{'0', '9'},
																																															classes:    []*unicode.RangeTable{rangeTable("L")},
																																															ignoreCase: false,
																																															inverted:   false,
																																														},
																																														&zeroOrMoreExpr{
																																															pos: position{line: 324, col: 28, offset: 10082},
																																															expr: &charClassMatcher{
																																																pos:        position{line: 324, col: 29, offset: 10083},
																																																val:        "[-0-9\\pL]",
																																																chars:      []rune{'-'},
																																																ranges:     []rune{'0', '9'},
																																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																														},
																																													},
																																												},
																																											},
																																										},
																																										&litMatcher{
																																											pos:        position{line: 657, col: 32, offset: 21117},
																																											val:        "}",
																																											ignoreCase: false,
																																											want:       "\"}\"",
																																										},
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 664, col: 5, offset: 21358},
																																								run: (*parser).callonRelativeLink321,
																																								expr: &seqExpr{
																																									pos: position{line: 664, col: 5, offset: 21358},
																																									exprs: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 664, col: 5, offset: 21358},
																																											val:        "{",
																																											ignoreCase: false,
																																											want:       "\"{\"",
																																										},
																																										&labeledExpr{
																																											pos:   position{line: 664, col: 9, offset: 21362},
																																											label: "name",
																																											expr: &actionExpr{
																																												pos: position{line: 324, col: 18, offset: 10072},
																																												run: (*parser).callonRelativeLink325,
																																												expr: &seqExpr{
																																													pos: position{line: 324, col: 18, offset: 10072},
																																													exprs: []interface{}{
																																														&charClassMatcher{
																																															pos:        position{line: 324, col: 18, offset: 10072},
																																															val:        "[_0-9\\pL]",
																																															chars:      []rune{'_'},
																																															ranges:     []rune{'0', '9'},
																																															classes:    []*unicode.RangeTable{rangeTable("L")},
																																															ignoreCase: false,
																																															inverted:   false,
																																														},
																																														&zeroOrMoreExpr{
																																															pos: position{line: 324, col: 28, offset: 10082},
																																															expr: &charClassMatcher{
																																																pos:        position{line: 324, col: 29, offset: 10083},
																																																val:        "[-0-9\\pL]",
																																																chars:      []rune{'-'},
																																																ranges:     []rune{'0', '9'},
																																																classes:    []*unicode.RangeTable{rangeTable("L")},
																																																ignoreCase: false,
																																																inverted:   false,
																																															},
																																														},
																																													},
																																												},
																																											},
																																										},
																																										&litMatcher{
																																											pos:        position{line: 664, col: 28, offset: 21381},
																																											val:        "}",
																																											ignoreCase: false,
																																											want:       "\"}\"",
																																										},
																																									},
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 714, col: 8, offset: 23331},
																																								run: (*parser).callonRelativeLink331,
																																								expr: &litMatcher{
																																									pos:        position{line: 714, col: 8, offset: 23331},
																																									val:        "{",
																																									ignoreCase: false,
																																									want:       "\"{\"",
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 699, col: 79, offset: 22717},
																																				val:        ">>",
																																				ignoreCase: false,
																																				want:       "\">>\"",
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 701, col: 9, offset: 22790},
																																	run: (*parser).callonRelativeLink334,
																																	expr: &seqExpr{
																																		pos: position{line: 701, col: 9, offset: 22790},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 701, col: 9, offset: 22790},
																																				val:        "<<",
																																				ignoreCase: false,
																																				want:       "\"<<\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 701, col: 14, offset: 22795},
																																				label: "id",
																																				expr: &actionExpr{
																																					pos: position{line: 3065, col: 7, offset: 99852},
																																					run: (*parser).callonRelativeLink338,
																																					expr: &oneOrMoreExpr{
																																						pos: position{line: 3065, col: 7, offset: 99852},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 3065, col: 7, offset: 99852},
																																							val:        "[^[]<>,]",
																																							chars:      []rune{'[', ']', '<', '>', ','},
																																							ignoreCase: false,
																																							inverted:   true,
																																						},
																																					},
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 701, col: 22, offset: 22803},
																																				val:        ">>",
																																				ignoreCase: false,
																																				want:       "\">>\"",
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																													&actionExpr{
																														pos: position{line: 2761, col: 11, offset: 90503},
																														run: (*parser).callonRelativeLink342,
																														expr: &charClassMatcher{
																															pos:        position{line: 2761, col: 12, offset: 90504},
																															val:        "[<>&]",
																															chars:      []rune{'<', '>', '&'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 3059, col: 11, offset: 99696},
																								run: (*parser).callonRelativeLink344,
																								expr: &litMatcher{
																									pos:        position{line: 3059, col: 11, offset: 99696},
																									val:        "{",
																									ignoreCase: false,
																									want:       "\"{\"",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 1219, col: 23, offset: 38141},
																	run: (*parser).callonRelativeLink346,
																	expr: &seqExpr{
																		pos: position{line: 1219, col: 23, offset: 38141},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 1217, col: 32, offset: 38109},
																				val:        "�",
																				ignoreCase: false,
																				want:       "\"�\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 1219, col: 51, offset: 38169},
																				label: "ref",
																				expr: &actionExpr{
																					pos: position{line: 1219, col: 56, offset: 38174},
																					run: (*parser).callonRelativeLink350,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 1219, col: 56, offset: 38174},
																						expr: &charClassMatcher{
																							pos:        position{line: 1219, col: 56, offset: 38174},
																							val:        "[0-9]",
																							ranges:     []rune{'0', '9'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 1217, col: 32, offset: 38109},
																				val:        "�",
																				ignoreCase: false,
																				want:       "\"�\"",
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1461, col: 28, offset: 47644},
									label: "attributes",
									expr: &ruleRefExpr{
										pos:  position{line: 1461, col: 40, offset: 47656},
										name: "InlineAttributes",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalLink",
			pos:  position{line: 1465, col: 1, offset: 47772},
			expr: &choiceExpr{
				pos: position{line: 1467, col: 5, offset: 47808},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1467, col: 5, offset: 47808},
						run: (*parser).callonExternalLink2,
						expr: &seqExpr{
							pos: position{line: 1467, col: 5, offset: 47808},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1467, col: 5, offset: 47808},
									val:        "\\",
									ignoreCase: false,
									want:       "\"\\\\\"",
								},
								&labeledExpr{
									pos:   position{line: 1467, col: 9, offset: 47812},
									label: "url",
									expr: &actionExpr{
										pos: position{line: 3044, col: 23, offset: 99085},
										run: (*parser).callonExternalLink6,
										expr: &seqExpr{
											pos: position{line: 3044, col: 23, offset: 99085},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 3044, col: 23, offset: 99085},
													expr: &litMatcher{
														pos:        position{line: 3044, col: 24, offset: 99086},
														val:        "[",
														ignoreCase: false,
														want:       "\"[\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 3044, col: 28, offset: 99090},
													label: "scheme",
													expr: &choiceExpr{
														pos: position{line: 3048, col: 11, offset: 99205},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 3048, col: 11, offset: 99205},
																val:        "http://",
																ignoreCase: false,
																want:       "\"http://\"",
															},
															&litMatcher{
																pos:        position{line: 3048, col: 23, offset: 99217},
																val:        "https://",
																ignoreCase: false,
																want:       "\"https://\"",
															},
															&litMatcher{
																pos:        position{line: 3048, col: 36, offset: 99230},
																val:        "ftp://",
																ignoreCase: false,
																want:       "\"ftp://\"",
															},
															&litMatcher{
																pos:        position{line: 3048, col: 47, offset: 99241},
																val:        "irc://",
																ignoreCase: false,
																want:       "\"irc://\"",
															},
															&litMatcher{
																pos:        position{line: 3048, col: 58, offset: 99252},
																val:        "mailto:",
																ignoreCase: false,
																want:       "\"mailto:\"",
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 3044, col: 44, offset: 99106},
													label: "path",
													expr: &oneOrMoreExpr{
														pos: position{line: 3044, col: 49, offset: 99111},
														expr: &actionExpr{
															pos: position{line: 3051, col: 5, offset: 99280},
															run: (*parser).callonExternalLink19,
															expr: &seqExpr{
																pos: position{line: 3051, col: 5, offset: 99280},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 3051, col: 5, offset: 99280},
																		expr: &litMatcher{
																			pos:        position{line: 3051, col: 6, offset: 99281},
																			val:        "[",
																			ignoreCase: false,
																			want:       "\"[\"",
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 3052, col: 5, offset: 99305},
																		label: "elements",
																		expr: &oneOrMoreExpr{
																			pos: position{line: 3052, col: 14, offset: 99314},
																			expr: &choiceExpr{
																				pos: position{line: 3053, col: 9, offset: 99324},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 3053, col: 9, offset: 99324},
																						run: (*parser).callonExternalLink26,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 3053, col: 9, offset: 99324},
																							expr: &charClassMatcher{
																								pos:        position{line: 3053, col: 10, offset: 99325},
																								val:        "[^\\r\\n[]�{.,;?!<> ]",
																								chars:      []rune{'\r', '\n', '[', ']', '�', '{', '.', ',', ';', '?', '!', '<', '>', ' '},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																					&seqExpr{
																						pos: position{line: 3056, col: 11, offset: 99590},
																						exprs: []interface{}{
																							&actionExpr{
																								pos: position{line: 3026, col: 25, offset: 98561},
																								run: (*parser).callonExternalLink30,
																								expr: &charClassMatcher{
																									pos:        position{line: 3026, col: 25, offset: 98561},
																									val:        "[.,;?!]",
																									chars:      []rune{'.', ',', ';', '?', '!'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&andExpr{
																								pos: position{line: 3056, col: 32, offset: 99611},
																								expr: &notExpr{
																									pos: position{line: 3056, col: 34, offset: 99613},
																									expr: &choiceExpr{
																										pos: position{line: 3056, col: 36, offset: 99615},
																										alternatives: []interface{}{
																											&notExpr{
																												pos: position{line: 3093, col: 8, offset: 100474},
																												expr: &anyMatcher{
																													line: 3093, col: 9, offset: 100475,
																												},
																											},
																											&actionExpr{
																												pos: position{line: 3080, col: 10, offset: 100200},
																												run: (*parser).callonExternalLink37,
																												expr: &charClassMatcher{
																													pos:        position{line: 3080, col: 11, offset: 100201},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 648, col: 5, offset: 20883},
																						run: (*parser).callonExternalLink39,
																						expr: &seqExpr{
																							pos: position{line: 648, col: 5, offset: 20883},
																							exprs: []interface{}{
																								&andCodeExpr{
																									pos: position{line: 648, col: 5, offset: 20883},
																									run: (*parser).callonExternalLink41,
																								},
																								&labeledExpr{
																									pos:   position{line: 651, col: 5, offset: 20952},
																									label: "element",
																									expr: &choiceExpr{
																										pos: position{line: 651, col: 14, offset: 20961},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 671, col: 25, offset: 21614},
																												run: (*parser).callonExternalLink44,
																												expr: &seqExpr{
																													pos: position{line: 671, col: 25, offset: 21614},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 671, col: 25, offset: 21614},
																															val:        "{counter:",
																															ignoreCase: false,
																															want:       "\"{counter:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 671, col: 37, offset: 21626},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 324, col: 18, offset: 10072},
																																run: (*parser).callonExternalLink48,
																																expr: &seqExpr{
																																	pos: position{line: 324, col: 18, offset: 10072},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 324, col: 18, offset: 10072},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 324, col: 28, offset: 10082},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 324, col: 29, offset: 10083},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 671, col: 56, offset: 21645},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 671, col: 62, offset: 21651},
																																expr: &actionExpr{
																																	pos: position{line: 679, col: 17, offset: 21946},
																																	run: (*parser).callonExternalLink55,
																																	expr: &seqExpr{
																																		pos: position{line: 679, col: 17, offset: 21946},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 679, col: 17, offset: 21946},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 679, col: 21, offset: 21950},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 679, col: 28, offset: 21957},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 679, col: 28, offset: 21957},
																																							run: (*parser).callonExternalLink60,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 679, col: 28, offset: 21957},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 681, col: 9, offset: 22011},
																																							run: (*parser).callonExternalLink62,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 681, col: 9, offset: 22011},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 681, col: 9, offset: 22011},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 671, col: 78, offset: 21667},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 675, col: 25, offset: 21785},
																												run: (*parser).callonExternalLink66,
																												expr: &seqExpr{
																													pos: position{line: 675, col: 25, offset: 21785},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 675, col: 25, offset: 21785},
																															val:        "{counter2:",
																															ignoreCase: false,
																															want:       "\"{counter2:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 675, col: 38, offset: 21798},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 324, col: 18, offset: 10072},
																																run: (*parser).callonExternalLink70,
																																expr: &seqExpr{
																																	pos: position{line: 324, col: 18, offset: 10072},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 324, col: 18, offset: 10072},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 324, col: 28, offset: 10082},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 324, col: 29, offset: 10083},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 675, col: 57, offset: 21817},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 675, col: 63, offset: 21823},
																																expr: &actionExpr{
																																	pos: position{line: 679, col: 17, offset: 21946},
																																	run: (*parser).callonExternalLink77,
																																	expr: &seqExpr{
																																		pos: position{line: 679, col: 17, offset: 21946},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 679, col: 17, offset: 21946},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 679, col: 21, offset: 21950},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 679, col: 28, offset: 21957},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 679, col: 28, offset: 21957},
																																							run: (*parser).callonExternalLink82,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 679, col: 28, offset: 21957},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 681, col: 9, offset: 22011},
																																							run: (*parser).callonExternalLink84,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 681, col: 9, offset: 22011},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 681, col: 9, offset: 22011},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 675, col: 79, offset: 21839},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 657, col: 5, offset: 21090},
																												run: (*parser).callonExternalLink88,
																												expr: &seqExpr{
																													pos: position{line: 657, col: 5, offset: 21090},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 657, col: 5, offset: 21090},
																															val:        "\\{",
																															ignoreCase: false,
																															want:       "\"\\\\{\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 657, col: 13, offset: 21098},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 324, col: 18, offset: 10072},
																																run: (*parser).callonExternalLink92,
																																expr: &seqExpr{
																																	pos: position{line: 324, col: 18, offset: 10072},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 324, col: 18, offset: 10072},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 324, col: 28, offset: 10082},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 324, col: 29, offset: 10083},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 657, col: 32, offset: 21117},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 664, col: 5, offset: 21358},
																												run: (*parser).callonExternalLink98,
																												expr: &seqExpr{
																													pos: position{line: 664, col: 5, offset: 21358},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 664, col: 5, offset: 21358},
																															val:        "{",
																															ignoreCase: false,
																															want:       "\"{\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 664, col: 9, offset: 21362},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 324, col: 18, offset: 10072},
																																run: (*parser).callonExternalLink102,
																																expr: &seqExpr{
																																	pos: position{line: 324, col: 18, offset: 10072},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 324, col: 18, offset: 10072},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 324, col: 28, offset: 10082},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 324, col: 29, offset: 10083},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 664, col: 28, offset: 21381},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 2753, col: 5, offset: 90225},
																						run: (*parser).callonExternalLink108,
																						expr: &seqExpr{
																							pos: position{line: 2753, col: 5, offset: 90225},
																							exprs: []interface{}{
																								&andCodeExpr{
																									pos: position{line: 2753, col: 5, offset: 90225},
																									run: (*parser).callonExternalLink110,
																								},
																								&labeledExpr{
																									pos:   position{line: 2756, col: 5, offset: 90301},
																									label: "element",
																									expr: &choiceExpr{
																										pos: position{line: 2758, col: 9, offset: 90399},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 2758, col: 9, offset: 90399},
																												run: (*parser).callonExternalLink113,
																												expr: &choiceExpr{
																													pos: position{line: 699, col: 27, offset: 22665},
																													alternatives: []interface{}{
																														&actionExpr{
																															pos: position{line: 699, col: 27, offset: 22665},
																															run: (*parser).callonExternalLink115,
																															expr: &seqExpr{
																																pos: position{line: 699, col: 27, offset: 22665},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 699, col: 27, offset: 22665},
																																		val:        "<<",
																																		ignoreCase: false,
																																		want:       "\"<<\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 699, col: 32, offset: 22670},
																																		label: "id",
																																		expr: &actionExpr{
																																			pos: position{line: 3065, col: 7, offset: 99852},
																																			run: (*parser).callonExternalLink119,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 3065, col: 7, offset: 99852},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 3065, col: 7, offset: 99852},
																																					val:        "[^[]<>,]",
																																					chars:      []rune{'[', ']', '<', '>', ','},
																																					ignoreCase: false,
																																					inverted:   true,
																																				},
																																			},
																																		},
																																	},
																																	&zeroOrMoreExpr{
																																		pos: position{line: 699, col: 40, offset: 22678},
																																		expr: &actionExpr{
																																			pos: position{line: 3080, col: 10, offset: 100200},
																																			run: (*parser).callonExternalLink123,
																																			expr: &charClassMatcher{
																																				pos:        position{line: 3080, col: 11, offset: 100201},
																																				val:        "[ \\t]",
																																				chars:      []rune{' ', '\t'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 699, col: 47, offset: 22685},
																																		val:        ",",
																																		ignoreCase: false,
																																		want:       "\",\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 699, col: 51, offset: 22689},
																																		label: "label",
																																		expr: &oneOrMoreExpr{
																																			pos: position{line: 709, col: 24, offset: 23090},
																																			expr: &choiceExpr{
																																				pos: position{line: 710, col: 5, offset: 23096},
																																				alternatives: []interface{}{
																																					&actionExpr{
																																						pos: position{line: 710, col: 6, offset: 23097},
																																						run: (*parser).callonExternalLink129,
																																						expr: &seqExpr{
																																							pos: position{line: 710, col: 6, offset: 23097},
																																							exprs: []interface{}{
																																								&charClassMatcher{
																																									pos:        position{line: 710, col: 6, offset: 23097},
																																									val:        "[0-9\\pL]",
																																									ranges:     []rune{'0', '9'},
																																									classes:    []*unicode.RangeTable{rangeTable("L")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																								&oneOrMoreExpr{
																																									pos: position{line: 710, col: 14, offset: 23105},
																																									expr: &charClassMatcher{
																																										pos:        position{line: 710, col: 14, offset: 23105},
																																										val:        "[^\\r\\n{<>]",
																																										chars:      []rune{'\r', '\n', '{', '<', '>'},
																																										ignoreCase: false,
																																										inverted:   true,
																																									},
																																								},
																																							},
																																						},
																																					},
																																					&actionExpr{
																																						pos: position{line: 657, col: 5, offset: 21090},
																																						run: (*parser).callonExternalLink134,
																																						expr: &seqExpr{
																																							pos: position{line: 657, col: 5, offset: 21090},
																																							exprs: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 657, col: 5, offset: 21090},
																																									val:        "\\{",
																																									ignoreCase: false,
																																									want:       "\"\\\\{\"",
																																								},
																																								&labeledExpr{
																																									pos:   position{line: 657, col: 13, offset: 21098},
																																									label: "name",
																																									expr: &actionExpr{
																																										pos: position{line: 324, col: 18, offset: 10072},
																																										run: (*parser).callonExternalLink138,
																																										expr: &seqExpr{
																																											pos: position{line: 324, col: 18, offset: 10072},
																																											exprs: []interface{}{
																																												&charClassMatcher{
																																													pos:        position{line: 324, col: 18, offset: 10072},
																																													val:        "[_0-9\\pL]",
																																													chars:      []rune{'_'},
																																													ranges:     []rune{'0', '9'},
																																													classes:    []*unicode.RangeTable{rangeTable("L")},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																												&zeroOrMoreExpr{
																																													pos: position{line: 324, col: 28, offset: 10082},
																																													expr: &charClassMatcher{
																																														pos:        position{line: 324, col: 29, offset: 10083},
																																														val:        "[-0-9\\pL]",
																																														chars:      []rune{'-'},
																																														ranges:     []rune{'0', '9'},
																																														classes:    []*unicode.RangeTable{rangeTable("L")},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																												},
																																											},
																																										},
																																									},
																																								},
																																								&litMatcher{
																																									pos:        position{line: 657, col: 32, offset: 21117},
																																									val:        "}",
																																									ignoreCase: false,
																																									want:       "\"}\"",
																																								},
																																							},
																																						},
																																					},
																																					&actionExpr{
																																						pos: position{line: 664, col: 5, offset: 21358},
																																						run: (*parser).callonExternalLink144,
																																						expr: &seqExpr{
																																							pos: position{line: 664, col: 5, offset: 21358},
																																							exprs: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 664, col: 5, offset: 21358},
																																									val:        "{",
																																									ignoreCase: false,
																																									want:       "\"{\"",
																																								},
																																								&labeledExpr{
																																									pos:   position{line: 664, col: 9, offset: 21362},
																																									label: "name",
																																									expr: &actionExpr{
																																										pos: position{line: 324, col: 18, offset: 10072},
																																										run: (*parser).callonExternalLink148,
																																										expr: &seqExpr{
																																											pos: position{line: 324, col: 18, offset: 10072},
																																											exprs: []interface{}{
																																												&charClassMatcher{
																																													pos:        position{line: 324, col: 18, offset: 10072},
																																													val:        "[_0-9\\pL]",
																																													chars:      []rune{'_'},
																																													ranges:     []rune{'0', '9'},
																																													classes:    []*unicode.RangeTable{rangeTable("L")},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																												&zeroOrMoreExpr{
																																													pos: position{line: 324, col: 28, offset: 10082},
																																													expr: &charClassMatcher{
																																														pos:        position{line: 324, col: 29, offset: 10083},
																																														val:        "[-0-9\\pL]",
																																														chars:      []rune{'-'},
																																														ranges:     []rune{'0', '9'},
																																														classes:    []*unicode.RangeTable{rangeTable("L")},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																												},
																																											},
																																										},
																																									},
																																								},
																																								&litMatcher{
																																									pos:        position{line: 664, col: 28, offset: 21381},
																																									val:        "}",
																																									ignoreCase: false,
																																									want:       "\"}\"",
																																								},
																																							},
																																						},
																																					},
																																					&actionExpr{
																																						pos: position{line: 714, col: 8, offset: 23331},
																																						run: (*parser).callonExternalLink154,
																																						expr: &litMatcher{
																																							pos:        position{line: 714, col: 8, offset: 23331},
																																							val:        "{",
																																							ignoreCase: false,
																																							want:       "\"{\"",
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 699, col: 79, offset: 22717},
																																		val:        ">>",
																																		ignoreCase: false,
																																		want:       "\">>\"",
																																	},
																																},
																															},
																														},
																														&actionExpr{
																															pos: position{line: 701, col: 9, offset: 22790},
																															run: (*parser).callonExternalLink157,
																															expr: &seqExpr{
																																pos: position{line: 701, col: 9, offset: 22790},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 701, col: 9, offset: 22790},
																																		val:        "<<",
																																		ignoreCase: false,
																																		want:       "\"<<\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 701, col: 14, offset: 22795},
																																		label: "id",
																																		expr: &actionExpr{
																																			pos: position{line: 3065, col: 7, offset: 99852},
																																			run: (*parser).callonExternalLink161,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 3065, col: 7, offset: 99852},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 3065, col: 7, offset: 99852},
																																					val:        "[^[]<>,]",
																																					chars:      []rune{'[', ']', '<', '>', ','},
																																					ignoreCase: false,
																																					inverted:   true,
																																				},
																																			},
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 701, col: 22, offset: 22803},
																																		val:        ">>",
																																		ignoreCase: false,
																																		want:       "\">>\"",
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 2761, col: 11, offset: 90503},
																												run: (*parser).callonExternalLink165,
																												expr: &charClassMatcher{
																													pos:        position{line: 2761, col: 12, offset: 90504},
																													val:        "[<>&]",
																													chars:      []rune{'<', '>', '&'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 3059, col: 11, offset: 99696},
																						run: (*parser).callonExternalLink167,
																						expr: &litMatcher{
																							pos:        position{line: 3059, col: 11, offset: 99696},
																							val:        "{",
																							ignoreCase: false,
																							want:       "\"{\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1467, col: 34, offset: 47837},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1467, col: 45, offset: 47848},
										expr: &ruleRefExpr{
											pos:  position{line: 1467, col: 46, offset: 47849},
											name: "InlineAttributes",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1472, col: 5, offset: 47982},
						run: (*parser).callonExternalLink172,
						expr: &seqExpr{
							pos: position{line: 1472, col: 5, offset: 47982},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1472, col: 5, offset: 47982},
									label: "url",
									expr: &actionExpr{
										pos: position{line: 3044, col: 23, offset: 99085},
										run: (*parser).callonExternalLink175,
										expr: &seqExpr{
											pos: position{line: 3044, col: 23, offset: 99085},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 3044, col: 23, offset: 99085},
													expr: &litMatcher{
														pos:        position{line: 3044, col: 24, offset: 99086},
														val:        "[",
														ignoreCase: false,
														want:       "\"[\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 3044, col: 28, offset: 99090},
													label: "scheme",
													expr: &choiceExpr{
														pos: position{line: 3048, col: 11, offset: 99205},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 3048, col: 11, offset: 99205},
																val:        "http://",
																ignoreCase: false,
																want:       "\"http://\"",
															},
															&litMatcher{
																pos:        position{line: 3048, col: 23, offset: 99217},
																val:        "https://",
																ignoreCase: false,
																want:       "\"https://\"",
															},
															&litMatcher{
																pos:        position{line: 3048, col: 36, offset: 99230},
																val:        "ftp://",
																ignoreCase: false,
																want:       "\"ftp://\"",
															},
															&litMatcher{
																pos:        position{line: 3048, col: 47, offset: 99241},
																val:        "irc://",
																ignoreCase: false,
																want:       "\"irc://\"",
															},
															&litMatcher{
																pos:        position{line: 3048, col: 58, offset: 99252},
																val:        "mailto:",
																ignoreCase: false,
																want:       "\"mailto:\"",
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 3044, col: 44, offset: 99106},
													label: "path",
													expr: &oneOrMoreExpr{
														pos: position{line: 3044, col: 49, offset: 99111},
														expr: &actionExpr{
															pos: position{line: 3051, col: 5, offset: 99280},
															run: (*parser).callonExternalLink188,
															expr: &seqExpr{
																pos: position{line: 3051, col: 5, offset: 99280},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 3051, col: 5, offset: 99280},
																		expr: &litMatcher{
																			pos:        position{line: 3051, col: 6, offset: 99281},
																			val:        "[",
																			ignoreCase: false,
																			want:       "\"[\"",
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 3052, col: 5, offset: 99305},
																		label: "elements",
																		expr: &oneOrMoreExpr{
																			pos: position{line: 3052, col: 14, offset: 99314},
																			expr: &choiceExpr{
																				pos: position{line: 3053, col: 9, offset: 99324},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 3053, col: 9, offset: 99324},
																						run: (*parser).callonExternalLink195,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 3053, col: 9, offset: 99324},
																							expr: &charClassMatcher{
																								pos:        position{line: 3053, col: 10, offset: 99325},
																								val:        "[^\\r\\n[]�{.,;?!<> ]",
																								chars:      []rune{'\r', '\n', '[', ']', '�', '{', '.', ',', ';', '?', '!', '<', '>', ' '},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																					&seqExpr{
																						pos: position{line: 3056, col: 11, offset: 99590},
																						exprs: []interface{}{
																							&actionExpr{
																								pos: position{line: 3026, col: 25, offset: 98561},
																								run: (*parser).callonExternalLink199,
																								expr: &charClassMatcher{
																									pos:        position{line: 3026, col: 25, offset: 98561},
																									val:        "[.,;?!]",
																									chars:      []rune{'.', ',', ';', '?', '!'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																							&andExpr{
																								pos: position{line: 3056, col: 32, offset: 99611},
																								expr: &notExpr{
																									pos: position{line: 3056, col: 34, offset: 99613},
																									expr: &choiceExpr{
																										pos: position{line: 3056, col: 36, offset: 99615},
																										alternatives: []interface{}{
																											&notExpr{
																												pos: position{line: 3093, col: 8, offset: 100474},
																												expr: &anyMatcher{
																													line: 3093, col: 9, offset: 100475,
																												},
																											},
																											&actionExpr{
																												pos: position{line: 3080, col: 10, offset: 100200},
																												run: (*parser).callonExternalLink206,
																												expr: &charClassMatcher{
																													pos:        position{line: 3080, col: 11, offset: 100201},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 648, col: 5, offset: 20883},
																						run: (*parser).callonExternalLink208,
																						expr: &seqExpr{
																							pos: position{line: 648, col: 5, offset: 20883},
																							exprs: []interface{}{
																								&andCodeExpr{
																									pos: position{line: 648, col: 5, offset: 20883},
																									run: (*parser).callonExternalLink210,
																								},
																								&labeledExpr{
																									pos:   position{line: 651, col: 5, offset: 20952},
																									label: "element",
																									expr: &choiceExpr{
																										pos: position{line: 651, col: 14, offset: 20961},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 671, col: 25, offset: 21614},
																												run: (*parser).callonExternalLink213,
																												expr: &seqExpr{
																													pos: position{line: 671, col: 25, offset: 21614},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 671, col: 25, offset: 21614},
																															val:        "{counter:",
																															ignoreCase: false,
																															want:       "\"{counter:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 671, col: 37, offset: 21626},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 324, col: 18, offset: 10072},
																																run: (*parser).callonExternalLink217,
																																expr: &seqExpr{
																																	pos: position{line: 324, col: 18, offset: 10072},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 324, col: 18, offset: 10072},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 324, col: 28, offset: 10082},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 324, col: 29, offset: 10083},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 671, col: 56, offset: 21645},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 671, col: 62, offset: 21651},
																																expr: &actionExpr{
																																	pos: position{line: 679, col: 17, offset: 21946},
																																	run: (*parser).callonExternalLink224,
																																	expr: &seqExpr{
																																		pos: position{line: 679, col: 17, offset: 21946},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 679, col: 17, offset: 21946},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 679, col: 21, offset: 21950},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 679, col: 28, offset: 21957},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 679, col: 28, offset: 21957},
																																							run: (*parser).callonExternalLink229,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 679, col: 28, offset: 21957},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 681, col: 9, offset: 22011},
																																							run: (*parser).callonExternalLink231,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 681, col: 9, offset: 22011},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 681, col: 9, offset: 22011},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 671, col: 78, offset: 21667},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 675, col: 25, offset: 21785},
																												run: (*parser).callonExternalLink235,
																												expr: &seqExpr{
																													pos: position{line: 675, col: 25, offset: 21785},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 675, col: 25, offset: 21785},
																															val:        "{counter2:",
																															ignoreCase: false,
																															want:       "\"{counter2:\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 675, col: 38, offset: 21798},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 324, col: 18, offset: 10072},
																																run: (*parser).callonExternalLink239,
																																expr: &seqExpr{
																																	pos: position{line: 324, col: 18, offset: 10072},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 324, col: 18, offset: 10072},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 324, col: 28, offset: 10082},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 324, col: 29, offset: 10083},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 675, col: 57, offset: 21817},
																															label: "start",
																															expr: &zeroOrOneExpr{
																																pos: position{line: 675, col: 63, offset: 21823},
																																expr: &actionExpr{
																																	pos: position{line: 679, col: 17, offset: 21946},
																																	run: (*parser).callonExternalLink246,
																																	expr: &seqExpr{
																																		pos: position{line: 679, col: 17, offset: 21946},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 679, col: 17, offset: 21946},
																																				val:        ":",
																																				ignoreCase: false,
																																				want:       "\":\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 679, col: 21, offset: 21950},
																																				label: "start",
																																				expr: &choiceExpr{
																																					pos: position{line: 679, col: 28, offset: 21957},
																																					alternatives: []interface{}{
																																						&actionExpr{
																																							pos: position{line: 679, col: 28, offset: 21957},
																																							run: (*parser).callonExternalLink251,
																																							expr: &charClassMatcher{
																																								pos:        position{line: 679, col: 28, offset: 21957},
																																								val:        "[A-Za-z]",
																																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																						&actionExpr{
																																							pos: position{line: 681, col: 9, offset: 22011},
																																							run: (*parser).callonExternalLink253,
																																							expr: &oneOrMoreExpr{
																																								pos: position{line: 681, col: 9, offset: 22011},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 681, col: 9, offset: 22011},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 675, col: 79, offset: 21839},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 657, col: 5, offset: 21090},
																												run: (*parser).callonExternalLink257,
																												expr: &seqExpr{
																													pos: position{line: 657, col: 5, offset: 21090},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 657, col: 5, offset: 21090},
																															val:        "\\{",
																															ignoreCase: false,
																															want:       "\"\\\\{\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 657, col: 13, offset: 21098},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 324, col: 18, offset: 10072},
																																run: (*parser).callonExternalLink261,
																																expr: &seqExpr{
																																	pos: position{line: 324, col: 18, offset: 10072},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 324, col: 18, offset: 10072},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 324, col: 28, offset: 10082},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 324, col: 29, offset: 10083},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 657, col: 32, offset: 21117},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 664, col: 5, offset: 21358},
																												run: (*parser).callonExternalLink267,
																												expr: &seqExpr{
																													pos: position{line: 664, col: 5, offset: 21358},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 664, col: 5, offset: 21358},
																															val:        "{",
																															ignoreCase: false,
																															want:       "\"{\"",
																														},
																														&labeledExpr{
																															pos:   position{line: 664, col: 9, offset: 21362},
																															label: "name",
																															expr: &actionExpr{
																																pos: position{line: 324, col: 18, offset: 10072},
																																run: (*parser).callonExternalLink271,
																																expr: &seqExpr{
																																	pos: position{line: 324, col: 18, offset: 10072},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 324, col: 18, offset: 10072},
																																			val:        "[_0-9\\pL]",
																																			chars:      []rune{'_'},
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&zeroOrMoreExpr{
																																			pos: position{line: 324, col: 28, offset: 10082},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 324, col: 29, offset: 10083},
																																				val:        "[-0-9\\pL]",
																																				chars:      []rune{'-'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																														&litMatcher{
																															pos:        position{line: 664, col: 28, offset: 21381},
																															val:        "}",
																															ignoreCase: false,
																															want:       "\"}\"",
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 2753, col: 5, offset: 90225},
																						run: (*parser).callonExternalLink277,
																						expr: &seqExpr{
																							pos: position{line: 2753, col: 5, offset: 90225},
																							exprs: []interface{}{
																								&andCodeExpr{
																									pos: position{line: 2753, col: 5, offset: 90225},
																									run: (*parser).callonExternalLink279,
																								},
																								&labeledExpr{
																									pos:   position{line: 2756, col: 5, offset: 90301},
																									label: "element",
																									expr: &choiceExpr{
																										pos: position{line: 2758, col: 9, offset: 90399},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 2758, col: 9, offset: 90399},
																												run: (*parser).callonExternalLink282,
																												expr: &choiceExpr{
																													pos: position{line: 699, col: 27, offset: 22665},
																													alternatives: []interface{}{
																														&actionExpr{
																															pos: position{line: 699, col: 27, offset: 22665},
																															run: (*parser).callonExternalLink284,
																															expr: &seqExpr{
																																pos: position{line: 699, col: 27, offset: 22665},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 699, col: 27, offset: 22665},
																																		val:        "<<",
																																		ignoreCase: false,
																																		want:       "\"<<\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 699, col: 32, offset: 22670},
																																		label: "id",
																																		expr: &actionExpr{
																																			pos: position{line: 3065, col: 7, offset: 99852},
																																			run: (*parser).callonExternalLink288,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 3065, col: 7, offset: 99852},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 3065, col: 7, offset: 99852},
																																					val:        "[^[]<>,]",
																																					chars:      []rune{'[', ']', '<', '>', ','},
																																					ignoreCase: false,
																																					inverted:   true,
																																				},
																																			},
																																		},
																																	},
																																	&zeroOrMoreExpr{
																																		pos: position{line: 699, col: 40, offset: 22678},
																																		expr: &actionExpr{
																																			pos: position{line: 3080, col: 10, offset: 100200},
																																			run: (*parser).callonExternalLink292,
																																			expr: &charClassMatcher{
																																				pos:        position{line: 3080, col: 11, offset: 100201},
																																				val:        "[ \\t]",
																																				chars:      []rune{' ', '\t'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 699, col: 47, offset: 22685},
																																		val:        ",",
																																		ignoreCase: false,
																																		want:       "\",\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 699, col: 51, offset: 22689},
																																		label: "label",
																																		expr: &oneOrMoreExpr{
																																			pos: position{line: 709, col: 24, offset: 23090},
																																			expr: &choiceExpr{
																																				pos: position{line: 710, col: 5, offset: 23096},
																																				alternatives: []interface{}{
																																					&actionExpr{
																																						pos: position{line: 710, col: 6, offset: 23097},
																																						run: (*parser).callonExternalLink298,
																																						expr: &seqExpr{
																																							pos: position{line: 710, col: 6, offset: 23097},
																																							exprs: []interface{}{
																																								&charClassMatcher{
																																									pos:        position{line: 710, col: 6, offset: 23097},
																																									val:        "[0-9\\pL]",
																																									ranges:     []rune{'0', '9'},
																																									classes:    []*unicode.RangeTable{rangeTable("L")},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																								&oneOrMoreExpr{
																																									pos: position{line: 710, col: 14, offset: 23105},
																																									expr: &charClassMatcher{
																																										pos:        position{line: 710, col: 14, offset: 23105},
																																										val:        "[^\\r\\n{<>]",
																																										chars:      []rune{'\r', '\n', '{', '<', '>'},
																																										ignoreCase: false,
																																										inverted:   true,
																																									},
																																								},
																																							},
																																						},
																																					},
																																					&actionExpr{
																																						pos: position{line: 657, col: 5, offset: 21090},
																																						run: (*parser).callonExternalLink303,
																																						expr: &seqExpr{
																																							pos: position{line: 657, col: 5, offset: 21090},
																																							exprs: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 657, col: 5, offset: 21090},
																																									val:        "\\{",
																																									ignoreCase: false,
																																									want:       "\"\\\\{\"",
																																								},
																																								&labeledExpr{
																																									pos:   position{line: 657, col: 13, offset: 21098},
																																									label: "name",
																																									expr: &actionExpr{
																																										pos: position{line: 324, col: 18, offset: 10072},
																																										run: (*parser).callonExternalLink307,
																																										expr: &seqExpr{
																																											pos: position{line: 324, col: 18, offset: 10072},
																																											exprs: []interface{}{
																																												&charClassMatcher{
																																													pos:        position{line: 324, col: 18, offset: 10072},
																																													val:        "[_0-9\\pL]",
																																													chars:      []rune{'_'},
																																													ranges:     []rune{'0', '9'},
																																													classes:    []*unicode.RangeTable{rangeTable("L")},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																												&zeroOrMoreExpr{
																																													pos: position{line: 324, col: 28, offset: 10082},
																																													expr: &charClassMatcher{
																																														pos:        position{line: 324, col: 29, offset: 10083},
																																														val:        "[-0-9\\pL]",
																																														chars:      []rune{'-'},
																																														ranges:     []rune{'0', '9'},
																																														classes:    []*unicode.RangeTable{rangeTable("L")},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																												},
																																											},
																																										},
																																									},
																																								},
																																								&litMatcher{
																																									pos:        position{line: 657, col: 32, offset: 21117},
																																									val:        "}",
																																									ignoreCase: false,
																																									want:       "\"}\"",
																																								},
																																							},
																																						},
																																					},
																																					&actionExpr{
																																						pos: position{line: 664, col: 5, offset: 21358},
																																						run: (*parser).callonExternalLink313,
																																						expr: &seqExpr{
																																							pos: position{line: 664, col: 5, offset: 21358},
																																							exprs: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 664, col: 5, offset: 21358},
																																									val:        "{",
																																									ignoreCase: false,
																																									want:       "\"{\"",
																																								},
																																								&labeledExpr{
																																									pos:   position{line: 664, col: 9, offset: 21362},
																																									label: "name",
																																									expr: &actionExpr{
																																										pos: position{line: 324, col: 18, offset: 10072},
																																										run: (*parser).callonExternalLink317,
																																										expr: &seqExpr{
																																											pos: position{line: 324, col: 18, offset: 10072},
																																											exprs: []interface{}{
																																												&charClassMatcher{
																																													pos:        position{line: 324, col: 18, offset: 10072},
																																													val:        "[_0-9\\pL]",
																																													chars:      []rune{'_'},
																																													ranges:     []rune{'0', '9'},
																																													classes:    []*unicode.RangeTable{rangeTable("L")},
																																													ignoreCase: false,
																																													inverted:   false,
																																												},
																																												&zeroOrMoreExpr{
																																													pos: position{line: 324, col: 28, offset: 10082},
																																													expr: &charClassMatcher{
																																														pos:        position{line: 324, col: 29, offset: 10083},
																																														val:        "[-0-9\\pL]",
																																														chars:      []rune{'-'},
																																														ranges:     []rune{'0', '9'},
																																														classes:    []*unicode.RangeTable{rangeTable("L")},
																																														ignoreCase: false,
																																														inverted:   false,
																																													},
																																												},
																																											},
																																										},
																																									},
																																								},
																																								&litMatcher{
																																									pos:        position{line: 664, col: 28, offset: 21381},
																																									val:        "}",
																																									ignoreCase: false,
																																									want:       "\"}\"",
																																								},
																																							},
																																						},
																																					},
																																					&actionExpr{
																																						pos: position{line: 714, col: 8, offset: 23331},
																																						run: (*parser).callonExternalLink323,
																																						expr: &litMatcher{
																																							pos:        position{line: 714, col: 8, offset: 23331},
																																							val:        "{",
																																							ignoreCase: false,
																																							want:       "\"{\"",
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 699, col: 79, offset: 22717},
																																		val:        ">>",
																																		ignoreCase: false,
																																		want:       "\">>\"",
																																	},
																																},
																															},
																														},
																														&actionExpr{
																															pos: position{line: 701, col: 9, offset: 22790},
																															run: (*parser).callonExternalLink326,
																															expr: &seqExpr{
																																pos: position{line: 701, col: 9, offset: 22790},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 701, col: 9, offset: 22790},
																																		val:        "<<",
																																		ignoreCase: false,
																																		want:       "\"<<\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 701, col: 14, offset: 22795},
																																		label: "id",
																																		expr: &actionExpr{
																																			pos: position{line: 3065, col: 7, offset: 99852},
																																			run: (*parser).callonExternalLink330,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 3065, col: 7, offset: 99852},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 3065, col: 7, offset: 99852},
																																					val:        "[^[]<>,]",
																																					chars:      []rune{'[', ']', '<', '>', ','},
																																					ignoreCase: false,
																																					inverted:   true,
																																				},
																																			},
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 701, col: 22, offset: 22803},
																																		val:        ">>",
																																		ignoreCase: false,
																																		want:       "\">>\"",
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																											&actionExpr{
																												pos: position{line: 2761, col: 11, offset: 90503},
																												run: (*parser).callonExternalLink334,
																												expr: &charClassMatcher{
																													pos:        position{line: 2761, col: 12, offset: 90504},
																													val:        "[<>&]",
																													chars:      []rune{'<', '>', '&'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 3059, col: 11, offset: 99696},
																						run: (*parser).callonExternalLink336,
																						expr: &litMatcher{
																							pos:        position{line: 3059, col: 11, offset: 99696},
																							val:        "{",
																							ignoreCase: false,
																							want:       "\"{\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1472, col: 30, offset: 48007},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1472, col: 41, offset: 48018},
										expr: &ruleRefExpr{
											pos:  position{line: 1472, col: 42, offset: 48019},
											name: "InlineAttributes",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListElements",
			pos:  position{line: 1480, col: 1, offset: 48373},
			expr: &actionExpr{
				pos: position{line: 1481, col: 5, offset: 48394},
				run: (*parser).callonListElements1,
				expr: &seqExpr{
					pos: position{line: 1481, col: 5, offset: 48394},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1481, col: 5, offset: 48394},
							label: "firstElement",
							expr: &choiceExpr{
								pos: position{line: 1487, col: 5, offset: 48596},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 1634, col: 5, offset: 53403},
										run: (*parser).callonListElements5,
										expr: &seqExpr{
											pos: position{line: 1634, col: 5, offset: 53403},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1634, col: 5, offset: 53403},
													label: "prefix",
													expr: &actionExpr{
														pos: position{line: 1641, col: 5, offset: 53611},
														run: (*parser).callonListElements8,
														expr: &seqExpr{
															pos: position{line: 1641, col: 5, offset: 53611},
															exprs: []interface{}{
																&zeroOrMoreExpr{
																	pos: position{line: 1641, col: 5, offset: 53611},
																	expr: &actionExpr{
																		pos: position{line: 3080, col: 10, offset: 100200},
																		run: (*parser).callonListElements11,
																		expr: &charClassMatcher{
																			pos:        position{line: 3080, col: 11, offset: 100201},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1641, col: 12, offset: 53618},
																	label: "prefix",
																	expr: &choiceExpr{
																		pos: position{line: 1643, col: 9, offset: 53681},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 1643, col: 9, offset: 53681},
																				run: (*parser).callonListElements15,
																				expr: &seqExpr{
																					pos: position{line: 1643, col: 9, offset: 53681},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 1643, col: 9, offset: 53681},
																							label: "depth",
																							expr: &actionExpr{
																								pos: position{line: 1643, col: 16, offset: 53688},
																								run: (*parser).callonListElements18,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 1643, col: 16, offset: 53688},
																									expr: &litMatcher{
																										pos:        position{line: 1643, col: 17, offset: 53689},
																										val:        ".",
																										ignoreCase: false,
																										want:       "\".\"",
																									},
																								},
																							},
																						},
																						&andCodeExpr{
																							pos: position{line: 1647, col: 9, offset: 53789},
																							run: (*parser).callonListElements21,
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1666, col: 11, offset: 54506},
																				run: (*parser).callonListElements22,
																				expr: &seqExpr{
																					pos: position{line: 1666, col: 11, offset: 54506},
																					exprs: []interface{}{
																						&oneOrMoreExpr{
																							pos: position{line: 1666, col: 11, offset: 54506},
																							expr: &charClassMatcher{
																								pos:        position{line: 1666, col: 12, offset: 54507},
																								val:        "[0-9]",
																								ranges:     []rune{'0', '9'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 1666, col: 20, offset: 54515},
																							val:        ".",
																							ignoreCase: false,
																							want:       "\".\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1668, col: 13, offset: 54632},
																				run: (*parser).callonListElements27,
																				expr: &seqExpr{
																					pos: position{line: 1668, col: 13, offset: 54632},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 1668, col: 14, offset: 54633},
																							val:        "[a-z]",
																							ranges:     []rune{'a', 'z'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&litMatcher{
																							pos:        position{line: 1668, col: 21, offset: 54640},
																							val:        ".",
																							ignoreCase: false,
																							want:       "\".\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1670, col: 13, offset: 54760},
																				run: (*parser).callonListElements31,
																				expr: &seqExpr{
																					pos: position{line: 1670, col: 13, offset: 54760},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 1670, col: 14, offset: 54761},
																							val:        "[A-Z]",
																							ranges:     []rune{'A', 'Z'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&litMatcher{
																							pos:        position{line: 1670, col: 21, offset: 54768},
																							val:        ".",
																							ignoreCase: false,
																							want:       "\".\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1672, col: 13, offset: 54888},
																				run: (*parser).callonListElements35,
																				expr: &seqExpr{
																					pos: position{line: 1672, col: 13, offset: 54888},
																					exprs: []interface{}{
																						&oneOrMoreExpr{
																							pos: position{line: 1672, col: 13, offset: 54888},
																							expr: &charClassMatcher{
																								pos:        position{line: 1672, col: 14, offset: 54889},
																								val:        "[ivxdlcm]",
																								chars:      []rune{'i', 'v', 'x', 'd', 'l', 'c', 'm'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 1672, col: 26, offset: 54901},
																							val:        ")",
																							ignoreCase: false,
																							want:       "\")\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1674, col: 13, offset: 55021},
																				run: (*parser).callonListElements40,
																				expr: &seqExpr{
																					pos: position{line: 1674, col: 13, offset: 55021},
																					exprs: []interface{}{
																						&oneOrMoreExpr{
																							pos: position{line: 1674, col: 13, offset: 55021},
																							expr: &charClassMatcher{
																								pos:        position{line: 1674, col: 14, offset: 55022},
																								val:        "[IVXDLCM]",
																								chars:      []rune{'I', 'V', 'X', 'D', 'L', 'C', 'M'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 1674, col: 26, offset: 55034},
																							val:        ")",
																							ignoreCase: false,
																							want:       "\")\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 3084, col: 11, offset: 100267},
																	run: (*parser).callonListElements45,
																	expr: &oneOrMoreExpr{
																		pos: position{line: 3084, col: 11, offset: 100267},
																		expr: &charClassMatcher{
																			pos:        position{line: 3084, col: 12, offset: 100268},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1635, col: 5, offset: 53442},
													label: "content",
													expr: &actionExpr{
														pos: position{line: 1575, col: 5, offset: 51638},
														run: (*parser).callonListElements49,
														expr: &seqExpr{
															pos: position{line: 1575, col: 5, offset: 51638},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1575, col: 5, offset: 51638},
																	label: "rawline",
																	expr: &actionExpr{
																		pos: position{line: 1575, col: 14, offset: 51647},
																		run: (*parser).callonListElements52,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 1575, col: 14, offset: 51647},
																			expr: &charClassMatcher{
																				pos:        position{line: 1575, col: 14, offset: 51647},
																				val:        "[^\\r\\n]",
																				chars:      []rune{'\r', '\n'},
																				ignoreCase: false,
																				inverted:   true,
																			},
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 3096, col: 8, offset: 100524},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 3089, col: 12, offset: 100384},
																			run: (*parser).callonListElements56,
																			expr: &choiceExpr{
																				pos: position{line: 3089, col: 13, offset: 100385},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 3089, col: 13, offset: 100385},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 3089, col: 20, offset: 100392},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 3089, col: 29, offset: 100401},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 3093, col: 8, offset: 100474},
																			expr: &anyMatcher{
																				line: 3093, col: 9, offset: 100475,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1684, col: 5, offset: 55300},
										run: (*parser).callonListElements63,
										expr: &seqExpr{
											pos: position{line: 1684, col: 5, offset: 55300},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1684, col: 5, offset: 55300},
													label: "prefix",
													expr: &actionExpr{
														pos: position{line: 1691, col: 5, offset: 55573},
														run: (*parser).callonListElements66,
														expr: &seqExpr{
															pos: position{line: 1691, col: 5, offset: 55573},
															exprs: []interface{}{
																&zeroOrMoreExpr{
																	pos: position{line: 1691, col: 5, offset: 55573},
																	expr: &actionExpr{
																		pos: position{line: 3080, col: 10, offset: 100200},
																		run: (*parser).callonListElements69,
																		expr: &charClassMatcher{
																			pos:        position{line: 3080, col: 11, offset: 100201},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1691, col: 12, offset: 55580},
																	label: "prefix",
																	expr: &choiceExpr{
																		pos: position{line: 1691, col: 20, offset: 55588},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 1693, col: 9, offset: 55645},
																				run: (*parser).callonListElements73,
																				expr: &seqExpr{
																					pos: position{line: 1693, col: 9, offset: 55645},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 1693, col: 9, offset: 55645},
																							label: "depth",
																							expr: &actionExpr{
																								pos: position{line: 1693, col: 16, offset: 55652},
																								run: (*parser).callonListElements76,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 1693, col: 16, offset: 55652},
																									expr: &litMatcher{
																										pos:        position{line: 1693, col: 17, offset: 55653},
																										val:        "*",
																										ignoreCase: false,
																										want:       "\"*\"",
																									},
																								},
																							},
																						},
																						&andCodeExpr{
																							pos: position{line: 1697, col: 9, offset: 55753},
																							run: (*parser).callonListElements79,
																						},
																					},
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 1714, col: 14, offset: 56460},
																				label: "depth",
																				expr: &actionExpr{
																					pos: position{line: 1714, col: 21, offset: 56467},
																					run: (*parser).callonListElements81,
																					expr: &litMatcher{
																						pos:        position{line: 1714, col: 22, offset: 56468},
																						val:        "-",
																						ignoreCase: false,
																						want:       "\"-\"",
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 3084, col: 11, offset: 100267},
																	run: (*parser).callonListElements83,
																	expr: &oneOrMoreExpr{
																		pos: position{line: 3084, col: 11, offset: 100267},
																		expr: &charClassMatcher{
																			pos:        position{line: 3084, col: 12, offset: 100268},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1685, col: 5, offset: 55341},
													label: "checkstyle",
													expr: &zeroOrOneExpr{
														pos: position{line: 1685, col: 16, offset: 55352},
														expr: &actionExpr{
															pos: position{line: 1721, col: 5, offset: 56629},
															run: (*parser).callonListElements88,
															expr: &seqExpr{
																pos: position{line: 1721, col: 5, offset: 56629},
																exprs: []interface{}{
																	&andExpr{
																		pos: position{line: 1721, col: 5, offset: 56629},
																		expr: &litMatcher{
																			pos:        position{line: 1721, col: 6, offset: 56630},
																			val:        "[",
																			ignoreCase: false,
																			want:       "\"[\"",
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 1721, col: 10, offset: 56634},
																		label: "style",
																		expr: &choiceExpr{
																			pos: position{line: 1722, col: 7, offset: 56648},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 1722, col: 7, offset: 56648},
																					run: (*parser).callonListElements94,
																					expr: &litMatcher{
																						pos:        position{line: 1722, col: 7, offset: 56648},
																						val:        "[ ]",
																						ignoreCase: false,
																						want:       "\"[ ]\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 1723, col: 7, offset: 56693},
																					run: (*parser).callonListElements96,
																					expr: &litMatcher{
																						pos:        position{line: 1723, col: 7, offset: 56693},
																						val:        "[*]",
																						ignoreCase: false,
																						want:       "\"[*]\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 1724, col: 7, offset: 56736},
																					run: (*parser).callonListElements98,
																					expr: &litMatcher{
																						pos:        position{line: 1724, col: 7, offset: 56736},
																						val:        "[x]",
																						ignoreCase: false,
																						want:       "\"[x]\"",
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 3084, col: 11, offset: 100267},
																		run: (*parser).callonListElements100,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 3084, col: 11, offset: 100267},
																			expr: &charClassMatcher{
																				pos:        position{line: 3084, col: 12, offset: 100268},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1686, col: 5, offset: 55391},
													label: "content",
													expr: &actionExpr{
														pos: position{line: 1575, col: 5, offset: 51638},
														run: (*parser).callonListElements104,
														expr: &seqExpr{
															pos: position{line: 1575, col: 5, offset: 51638},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1575, col: 5, offset: 51638},
																	label: "rawline",
																	expr: &actionExpr{
																		pos: position{line: 1575, col: 14, offset: 51647},
																		run: (*parser).callonListElements107,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 1575, col: 14, offset: 51647},
																			expr: &charClassMatcher{
																				pos:        position{line: 1575, col: 14, offset: 51647},
																				val:        "[^\\r\\n]",
																				chars:      []rune{'\r', '\n'},
																				ignoreCase: false,
																				inverted:   true,
																			},
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 3096, col: 8, offset: 100524},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 3089, col: 12, offset: 100384},
																			run: (*parser).callonListElements111,
																			expr: &choiceExpr{
																				pos: position{line: 3089, col: 13, offset: 100385},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 3089, col: 13, offset: 100385},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 3089, col: 20, offset: 100392},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 3089, col: 29, offset: 100401},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 3093, col: 8, offset: 100474},
																			expr: &anyMatcher{
																				line: 3093, col: 9, offset: 100475,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1791, col: 5, offset: 58609},
										run: (*parser).callonListElements118,
										expr: &seqExpr{
											pos: position{line: 1791, col: 5, offset: 58609},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1791, col: 5, offset: 58609},
													label: "ref",
													expr: &actionExpr{
														pos: position{line: 1797, col: 5, offset: 58810},
														run: (*parser).callonListElements121,
														expr: &seqExpr{
															pos: position{line: 1797, col: 5, offset: 58810},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 1797, col: 5, offset: 58810},
																	val:        "<",
																	ignoreCase: false,
																	want:       "\"<\"",
																},
																&labeledExpr{
																	pos:   position{line: 1797, col: 9, offset: 58814},
																	label: "ref",
																	expr: &actionExpr{
																		pos: position{line: 1797, col: 14, offset: 58819},
																		run: (*parser).callonListElements125,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 1797, col: 14, offset: 58819},
																			expr: &charClassMatcher{
																				pos:        position{line: 1797, col: 14, offset: 58819},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 1797, col: 62, offset: 58867},
																	val:        ">",
																	ignoreCase: false,
																	want:       "\">\"",
																},
																&actionExpr{
																	pos: position{line: 3084, col: 11, offset: 100267},
																	run: (*parser).callonListElements129,
																	expr: &oneOrMoreExpr{
																		pos: position{line: 3084, col: 11, offset: 100267},
																		expr: &charClassMatcher{
																			pos:        position{line: 3084, col: 12, offset: 100268},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1792, col: 5, offset: 58645},
													label: "description",
													expr: &actionExpr{
														pos: position{line: 1802, col: 5, offset: 58993},
														run: (*parser).callonListElements133,
														expr: &seqExpr{
															pos: position{line: 1802, col: 5, offset: 58993},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1802, col: 5, offset: 58993},
																	label: "rawline",
																	expr: &actionExpr{
																		pos: position{line: 1802, col: 14, offset: 59002},
																		run: (*parser).callonListElements136,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 1802, col: 14, offset: 59002},
																			expr: &charClassMatcher{
																				pos:        position{line: 1802, col: 14, offset: 59002},
																				val:        "[^\\r\\n]",
																				chars:      []rune{'\r', '\n'},
																				ignoreCase: false,
																				inverted:   true,
																			},
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 3096, col: 8, offset: 100524},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 3089, col: 12, offset: 100384},
																			run: (*parser).callonListElements140,
																			expr: &choiceExpr{
																				pos: position{line: 3089, col: 13, offset: 100385},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 3089, col: 13, offset: 100385},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 3089, col: 20, offset: 100392},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 3089, col: 29, offset: 100401},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 3093, col: 8, offset: 100474},
																			expr: &anyMatcher{
																				line: 3093, col: 9, offset: 100475,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1733, col: 5, offset: 56929},
										run: (*parser).callonListElements147,
										expr: &seqExpr{
											pos: position{line: 1733, col: 5, offset: 56929},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1733, col: 5, offset: 56929},
													label: "term",
													expr: &actionExpr{
														pos: position{line: 1741, col: 5, offset: 57188},
														run: (*parser).callonListElements150,
														expr: &oneOrMoreExpr{
															pos: position{line: 1741, col: 5, offset: 57188},
															expr: &seqExpr{
																pos: position{line: 1741, col: 6, offset: 57189},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1741, col: 6, offset: 57189},
																		expr: &actionExpr{
																			pos: position{line: 1746, col: 5, offset: 57339},
																			run: (*parser).callonListElements154,
																			expr: &seqExpr{
																				pos: position{line: 1746, col: 5, offset: 57339},
																				exprs: []interface{}{
																					&labeledExpr{
																						pos:   position{line: 1746, col: 5, offset: 57339},
																						label: "separator",
																						expr: &actionExpr{
																							pos: position{line: 1746, col: 16, offset: 57350},
																							run: (*parser).callonListElements157,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 1746, col: 16, offset: 57350},
																								expr: &litMatcher{
																									pos:        position{line: 1746, col: 17, offset: 57351},
																									val:        ":",
																									ignoreCase: false,
																									want:       "\":\"",
																								},
																							},
																						},
																					},
																					&andCodeExpr{
																						pos: position{line: 1749, col: 5, offset: 57408},
																						run: (*parser).callonListElements160,
																					},
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 1741, col: 35, offset: 57218},
																		expr: &choiceExpr{
																			pos: position{line: 3096, col: 8, offset: 100524},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 3089, col: 12, offset: 100384},
																					run: (*parser).callonListElements163,
																					expr: &choiceExpr{
																						pos: position{line: 3089, col: 13, offset: 100385},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 3089, col: 13, offset: 100385},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 3089, col: 20, offset: 100392},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 3089, col: 29, offset: 100401},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 3093, col: 8, offset: 100474},
																					expr: &anyMatcher{
																						line: 3093, col: 9, offset: 100475,
																					},
																				},
																			},
																		},
																	},
																	&anyMatcher{
																		line: 1741, col: 40, offset: 57223,
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1734, col: 5, offset: 56964},
													label: "separator",
													expr: &actionExpr{
														pos: position{line: 1746, col: 5, offset: 57339},
														run: (*parser).callonListElements172,
														expr: &seqExpr{
															pos: position{line: 1746, col: 5, offset: 57339},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1746, col: 5, offset: 57339},
																	label: "separator",
																	expr: &actionExpr{
																		pos: position{line: 1746, col: 16, offset: 57350},
																		run: (*parser).callonListElements175,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 1746, col: 16, offset: 57350},
																			expr: &litMatcher{
																				pos:        position{line: 1746, col: 17, offset: 57351},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																		},
																	},
																},
																&andCodeExpr{
																	pos: position{line: 1749, col: 5, offset: 57408},
																	run: (*parser).callonListElements178,
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1735, col: 5, offset: 57009},
													label: "description",
													expr: &choiceExpr{
														pos: position{line: 1757, col: 5, offset: 57658},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 1759, col: 9, offset: 57723},
																run: (*parser).callonListElements181,
																expr: &seqExpr{
																	pos: position{line: 1759, col: 9, offset: 57723},
																	exprs: []interface{}{
																		&zeroOrMoreExpr{
																			pos: position{line: 1759, col: 9, offset: 57723},
																			expr: &actionExpr{
																				pos: position{line: 3080, col: 10, offset: 100200},
																				run: (*parser).callonListElements184,
																				expr: &charClassMatcher{
																					pos:        position{line: 3080, col: 11, offset: 100201},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 3096, col: 8, offset: 100524},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 3089, col: 12, offset: 100384},
																					run: (*parser).callonListElements187,
																					expr: &choiceExpr{
																						pos: position{line: 3089, col: 13, offset: 100385},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 3089, col: 13, offset: 100385},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 3089, col: 20, offset: 100392},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 3089, col: 29, offset: 100401},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 3093, col: 8, offset: 100474},
																					expr: &anyMatcher{
																						line: 3093, col: 9, offset: 100475,
																					},
																				},
																			},
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 1760, col: 9, offset: 57743},
																			expr: &actionExpr{
																				pos: position{line: 690, col: 14, offset: 22312},
																				run: (*parser).callonListElements195,
																				expr: &seqExpr{
																					pos: position{line: 690, col: 14, offset: 22312},
																					exprs: []interface{}{
																						&notExpr{
																							pos: position{line: 690, col: 14, offset: 22312},
																							expr: &notExpr{
																								pos: position{line: 3093, col: 8, offset: 100474},
																								expr: &anyMatcher{
																									line: 3093, col: 9, offset: 100475,
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 690, col: 19, offset: 22317},
																							expr: &actionExpr{
																								pos: position{line: 3080, col: 10, offset: 100200},
																								run: (*parser).callonListElements201,
																								expr: &charClassMatcher{
																									pos:        position{line: 3080, col: 11, offset: 100201},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 3096, col: 8, offset: 100524},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 3089, col: 12, offset: 100384},
																									run: (*parser).callonListElements204,
																									expr: &choiceExpr{
																										pos: position{line: 3089, col: 13, offset: 100385},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 3089, col: 13, offset: 100385},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 3089, col: 20, offset: 100392},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 3089, col: 29, offset: 100401},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 3093, col: 8, offset: 100474},
																									expr: &anyMatcher{
																										line: 3093, col: 9, offset: 100475,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 1761, col: 9, offset: 57763},
																			label: "content",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 1761, col: 17, offset: 57771},
																				expr: &choiceExpr{
																					pos: position{line: 1555, col: 5, offset: 51005},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 1555, col: 5, offset: 51005},
																							run: (*parser).callonListElements214,
																							expr: &actionExpr{
																								pos: position{line: 2770, col: 22, offset: 90863},
																								run: (*parser).callonListElements215,
																								expr: &seqExpr{
																									pos: position{line: 2770, col: 22, offset: 90863},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2775, col: 31, offset: 91084},
																											val:        "//",
																											ignoreCase: false,
																											want:       "\"//\"",
																										},
																										&notExpr{
																											pos: position{line: 2775, col: 36, offset: 91089},
																											expr: &litMatcher{
																												pos:        position{line: 2775, col: 37, offset: 91090},
																												val:        "//",
																												ignoreCase: false,
																												want:       "\"//\"",
																											},
																										},
																										&labeledExpr{
																											pos:   position{line: 2770, col: 49, offset: 90890},
																											label: "content",
																											expr: &actionExpr{
																												pos: position{line: 2777, col: 29, offset: 91125},
																												run: (*parser).callonListElements221,
																												expr: &zeroOrMoreExpr{
																													pos: position{line: 2777, col: 29, offset: 91125},
																													expr: &charClassMatcher{
																														pos:        position{line: 2777, col: 29, offset: 91125},
																														val:        "[^\\r\\n]",
																														chars:      []rune{'\r', '\n'},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 3096, col: 8, offset: 100524},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 3089, col: 12, offset: 100384},
																													run: (*parser).callonListElements225,
																													expr: &choiceExpr{
																														pos: position{line: 3089, col: 13, offset: 100385},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 3089, col: 13, offset: 100385},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 3089, col: 20, offset: 100392},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 3089, col: 29, offset: 100401},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 3093, col: 8, offset: 100474},
																													expr: &anyMatcher{
																														line: 3093, col: 9, offset: 100475,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 1559, col: 9, offset: 51158},
																							run: (*parser).callonListElements232,
																							expr: &seqExpr{
																								pos: position{line: 1559, col: 9, offset: 51158},
																								exprs: []interface{}{
																									&notExpr{
																										pos: position{line: 1559, col: 9, offset: 51158},
																										expr: &actionExpr{
																											pos: position{line: 690, col: 14, offset: 22312},
																											run: (*parser).callonListElements235,
																											expr: &seqExpr{
																												pos: position{line: 690, col: 14, offset: 22312},
																												exprs: []interface{}{
																													&notExpr{
																														pos: position{line: 690, col: 14, offset: 22312},
																														expr: &notExpr{
																															pos: position{line: 3093, col: 8, offset: 100474},
																															expr: &anyMatcher{
																																line: 3093, col: 9, offset: 100475,
																															},
																														},
																													},
																													&zeroOrMoreExpr{
																														pos: position{line: 690, col: 19, offset: 22317},
																														expr: &actionExpr{
																															pos: position{line: 3080, col: 10, offset: 100200},
																															run: (*parser).callonListElements241,
																															expr: &charClassMatcher{
																																pos:        position{line: 3080, col: 11, offset: 100201},
																																val:        "[ \\t]",
																																chars:      []rune{' ', '\t'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																													&choiceExpr{
																														pos: position{line: 3096, col: 8, offset: 100524},
																														alternatives: []interface{}{
																															&actionExpr{
																																pos: position{line: 3089, col: 12, offset: 100384},
																																run: (*parser).callonListElements244,
																																expr: &choiceExpr{
																																	pos: position{line: 3089, col: 13, offset: 100385},
																																	alternatives: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 3089, col: 13, offset: 100385},
																																			val:        "\n",
																																			ignoreCase: false,
																																			want:       "\"\\n\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 3089, col: 20, offset: 100392},
																																			val:        "\r\n",
																																			ignoreCase: false,
																																			want:       "\"\\r\\n\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 3089, col: 29, offset: 100401},
																																			val:        "\r",
																																			ignoreCase: false,
																																			want:       "\"\\r\"",
																																		},
																																	},
																																},
																															},
																															&notExpr{
																																pos: position{line: 3093, col: 8, offset: 100474},
																																expr: &anyMatcher{
																																	line: 3093, col: 9, offset: 100475,
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 1560, col: 9, offset: 51177},
																										expr: &seqExpr{
																											pos: position{line: 1593, col: 34, offset: 52137},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 1593, col: 34, offset: 52137},
																													val:        "+",
																													ignoreCase: false,
																													want:       "\"+\"",
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 1593, col: 38, offset: 52141},
																													expr: &actionExpr{
																														pos: position{line: 3080, col: 10, offset: 100200},
																														run: (*parser).callonListElements255,
																														expr: &charClassMatcher{
																															pos:        position{line: 3080, col: 11, offset: 100201},
																															val:        "[ \\t]",
																															chars:      []rune{' ', '\t'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																												&actionExpr{
																													pos: position{line: 3089, col: 12, offset: 100384},
																													run: (*parser).callonListElements257,
																													expr: &choiceExpr{
																														pos: position{line: 3089, col: 13, offset: 100385},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 3089, col: 13, offset: 100385},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 3089, col: 20, offset: 100392},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 3089, col: 29, offset: 100401},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 1561, col: 9, offset: 51216},
																										expr: &actionExpr{
																											pos: position{line: 1641, col: 5, offset: 53611},
																											run: (*parser).callonListElements263,
																											expr: &seqExpr{
																												pos: position{line: 1641, col: 5, offset: 53611},
																												exprs: []interface{}{
																													&zeroOrMoreExpr{
																														pos: position{line: 1641, col: 5, offset: 53611},
																														expr: &actionExpr{
																															pos: position{line: 3080, col: 10, offset: 100200},
																															run: (*parser).callonListElements266,
																															expr: &charClassMatcher{
																																pos:        position{line: 3080, col: 11, offset: 100201},
																																val:        "[ \\t]",
																																chars:      []rune{' ', '\t'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																													&labeledExpr{
																														pos:   position{line: 1641, col: 12, offset: 53618},
																														label: "prefix",
																														expr: &choiceExpr{
																															pos: position{line: 1643, col: 9, offset: 53681},
																															alternatives: []interface{}{
																																&actionExpr{
																																	pos: position{line: 1643, col: 9, offset: 53681},
																																	run: (*parser).callonListElements270,
																																	expr: &seqExpr{
																																		pos: position{line: 1643, col: 9, offset: 53681},
																																		exprs: []interface{}{
																																			&labeledExpr{
																																				pos:   position{line: 1643, col: 9, offset: 53681},
																																				label: "depth",
																																				expr: &actionExpr{
																																					pos: position{line: 1643, col: 16, offset: 53688},
																																					run: (*parser).callonListElements273,
																																					expr: &oneOrMoreExpr{
																																						pos: position{line: 1643, col: 16, offset: 53688},
																																						expr: &litMatcher{
																																							pos:        position{line: 1643, col: 17, offset: 53689},
																																							val:        ".",
																																							ignoreCase: false,
																																							want:       "\".\"",
																																						},
																																					},
																																				},
																																			},
																																			&andCodeExpr{
																																				pos: position{line: 1647, col: 9, offset: 53789},
																																				run: (*parser).callonListElements276,
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 1666, col: 11, offset: 54506},
																																	run: (*parser).callonListElements277,
																																	expr: &seqExpr{
																																		pos: position{line: 1666, col: 11, offset: 54506},
																																		exprs: []interface{}{
																																			&oneOrMoreExpr{
																																				pos: position{line: 1666, col: 11, offset: 54506},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 1666, col: 12, offset: 54507},
																																					val:        "[0-9]",
																																					ranges:     []rune{'0', '9'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 1666, col: 20, offset: 54515},
																																				val:        ".",
																																				ignoreCase: false,
																																				want:       "\".\"",
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 1668, col: 13, offset: 54632},
																																	run: (*parser).callonListElements282,
																																	expr: &seqExpr{
																																		pos: position{line: 1668, col: 13, offset: 54632},
																																		exprs: []interface{}{
																																			&charClassMatcher{
																																				pos:        position{line: 1668, col: 14, offset: 54633},
																																				val:        "[a-z]",
																																				ranges:     []rune{'a', 'z'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&litMatcher{
																																				pos:        position{line: 1668, col: 21, offset: 54640},
																																				val:        ".",
																																				ignoreCase: false,
																																				want:       "\".\"",
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 1670, col: 13, offset: 54760},
																																	run: (*parser).callonListElements286,
																																	expr: &seqExpr{
																																		pos: position{line: 1670, col: 13, offset: 54760},
																																		exprs: []interface{}{
																																			&charClassMatcher{
																																				pos:        position{line: 1670, col: 14, offset: 54761},
																																				val:        "[A-Z]",
																																				ranges:     []rune{'A', 'Z'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&litMatcher{
																																				pos:        position{line: 1670, col: 21, offset: 54768},
																																				val:        ".",
																																				ignoreCase: false,
																																				want:       "\".\"",
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 1672, col: 13, offset: 54888},
																																	run: (*parser).callonListElements290,
																																	expr: &seqExpr{
																																		pos: position{line: 1672, col: 13, offset: 54888},
																																		exprs: []interface{}{
																																			&oneOrMoreExpr{
																																				pos: position{line: 1672, col: 13, offset: 54888},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 1672, col: 14, offset: 54889},
																																					val:        "[ivxdlcm]",
																																					chars:      []rune{'i', 'v', 'x', 'd', 'l', 'c', 'm'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 1672, col: 26, offset: 54901},
																																				val:        ")",
																																				ignoreCase: false,
																																				want:       "\")\"",
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 1674, col: 13, offset: 55021},
																																	run: (*parser).callonListElements295,
																																	expr: &seqExpr{
																																		pos: position{line: 1674, col: 13, offset: 55021},
																																		exprs: []interface{}{
																																			&oneOrMoreExpr{
																																				pos: position{line: 1674, col: 13, offset: 55021},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 1674, col: 14, offset: 55022},
																																					val:        "[IVXDLCM]",
																																					chars:      []rune{'I', 'V', 'X', 'D', 'L', 'C', 'M'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 1674, col: 26, offset: 55034},
																																				val:        ")",
																																				ignoreCase: false,
																																				want:       "\")\"",
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																													&actionExpr{
																														pos: position{line: 3084, col: 11, offset: 100267},
																														run: (*parser).callonListElements300,
																														expr: &oneOrMoreExpr{
																															pos: position{line: 3084, col: 11, offset: 100267},
																															expr: &charClassMatcher{
																																pos:        position{line: 3084, col: 12, offset: 100268},
																																val:        "[ \\t]",
																																chars:      []rune{' ', '\t'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 1562, col: 9, offset: 51250},
																										expr: &actionExpr{
																											pos: position{line: 1691, col: 5, offset: 55573},
																											run: (*parser).callonListElements304,
																											expr: &seqExpr{
																												pos: position{line: 1691, col: 5, offset: 55573},
																												exprs: []interface{}{
																													&zeroOrMoreExpr{
																														pos: position{line: 1691, col: 5, offset: 55573},
																														expr: &actionExpr{
																															pos: position{line: 3080, col: 10, offset: 100200},
																															run: (*parser).callonListElements307,
																															expr: &charClassMatcher{
																																pos:        position{line: 3080, col: 11, offset: 100201},
																																val:        "[ \\t]",
																																chars:      []rune{' ', '\t'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																													&labeledExpr{
																														pos:   position{line: 1691, col: 12, offset: 55580},
																														label: "prefix",
																														expr: &choiceExpr{
																															pos: position{line: 1691, col: 20, offset: 55588},
																															alternatives: []interface{}{
																																&actionExpr{
																																	pos: position{line: 1693, col: 9, offset: 55645},
																																	run: (*parser).callonListElements311,
																																	expr: &seqExpr{
																																		pos: position{line: 1693, col: 9, offset: 55645},
																																		exprs: []interface{}{
																																			&labeledExpr{
																																				pos:   position{line: 1693, col: 9, offset: 55645},
																																				label: "depth",
																																				expr: &actionExpr{
																																					pos: position{line: 1693, col: 16, offset: 55652},
																																					run: (*parser).callonListElements314,
																																					expr: &oneOrMoreExpr{
																																						pos: position{line: 1693, col: 16, offset: 55652},
																																						expr: &litMatcher{
																																							pos:        position{line: 1693, col: 17, offset: 55653},
																																							val:        "*",
																																							ignoreCase: false,
																																							want:       "\"*\"",
																																						},
																																					},
																																				},
																																			},
																																			&andCodeExpr{
																																				pos: position{line: 1697, col: 9, offset: 55753},
																																				run: (*parser).callonListElements317,
																																			},
																																		},
																																	},
																																},
																																&labeledExpr{
																																	pos:   position{line: 1714, col: 14, offset: 56460},
																																	label: "depth",
																																	expr: &actionExpr{
																																		pos: position{line: 1714, col: 21, offset: 56467},
																																		run: (*parser).callonListElements319,
																																		expr: &litMatcher{
																																			pos:        position{line: 1714, col: 22, offset: 56468},
																																			val:        "-",
																																			ignoreCase: false,
																																			want:       "\"-\"",
																																		},
																																	},
																																},
																															},
																														},
																													},
																													&actionExpr{
																														pos: position{line: 3084, col: 11, offset: 100267},
																														run: (*parser).callonListElements321,
																														expr: &oneOrMoreExpr{
																															pos: position{line: 3084, col: 11, offset: 100267},
																															expr: &charClassMatcher{
																																pos:        position{line: 3084, col: 12, offset: 100268},
																																val:        "[ \\t]",
																																chars:      []rune{' ', '\t'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 1563, col: 9, offset: 51286},
																										expr: &actionExpr{
																											pos: position{line: 1797, col: 5, offset: 58810},
																											run: (*parser).callonListElements325,
																											expr: &seqExpr{
																												pos: position{line: 1797, col: 5, offset: 58810},
																												exprs: []interface{}{
																													&litMatcher{
																														pos:        position{line: 1797, col: 5, offset: 58810},
																														val:        "<",
																														ignoreCase: false,
																														want:       "\"<\"",
																													},
																													&labeledExpr{
																														pos:   position{line: 1797, col: 9, offset: 58814},
																														label: "ref",
																														expr: &actionExpr{
																															pos: position{line: 1797, col: 14, offset: 58819},
																															run: (*parser).callonListElements329,
																															expr: &oneOrMoreExpr{
																																pos: position{line: 1797, col: 14, offset: 58819},
																																expr: &charClassMatcher{
																																	pos:        position{line: 1797, col: 14, offset: 58819},
																																	val:        "[0-9]",
																																	ranges:     []rune{'0', '9'},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																													},
																													&litMatcher{
																														pos:        position{line: 1797, col: 62, offset: 58867},
																														val:        ">",
																														ignoreCase: false,
																														want:       "\">\"",
																													},
																													&actionExpr{
																														pos: position{line: 3084, col: 11, offset: 100267},
																														run: (*parser).callonListElements333,
																														expr: &oneOrMoreExpr{
																															pos: position{line: 3084, col: 11, offset: 100267},
																															expr: &charClassMatcher{
																																pos:        position{line: 3084, col: 12, offset: 100268},
																																val:        "[ \\t]",
																																chars:      []rune{' ', '\t'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 1564, col: 9, offset: 51320},
																										expr: &seqExpr{
																											pos: position{line: 1564, col: 11, offset: 51322},
																											exprs: []interface{}{
																												&actionExpr{
																													pos: position{line: 1741, col: 5, offset: 57188},
																													run: (*parser).callonListElements338,
																													expr: &oneOrMoreExpr{
																														pos: position{line: 1741, col: 5, offset: 57188},
																														expr: &seqExpr{
																															pos: position{line: 1741, col: 6, offset: 57189},
																															exprs: []interface{}{
																																&notExpr{
																																	pos: position{line: 1741, col: 6, offset: 57189},
																																	expr: &actionExpr{
																																		pos: position{line: 1746, col: 5, offset: 57339},
																																		run: (*parser).callonListElements342,
																																		expr: &seqExpr{
																																			pos: position{line: 1746, col: 5, offset: 57339},
																																			exprs: []interface{}{
																																				&labeledExpr{
																																					pos:   position{line: 1746, col: 5, offset: 57339},
																																					label: "separator",
																																					expr: &actionExpr{
																																						pos: position{line: 1746, col: 16, offset: 57350},
																																						run: (*parser).callonListElements345,
																																						expr: &oneOrMoreExpr{
																																							pos: position{line: 1746, col: 16, offset: 57350},
																																							expr: &litMatcher{
																																								pos:        position{line: 1746, col: 17, offset: 57351},
																																								val:        ":",
																																								ignoreCase: false,
																																								want:       "\":\"",
																																							},
																																						},
																																					},
																																				},
																																				&andCodeExpr{
																																					pos: position{line: 1749, col: 5, offset: 57408},
																																					run: (*parser).callonListElements348,
																																				},
																																			},
																																		},
																																	},
																																},
																																&notExpr{
																																	pos: position{line: 1741, col: 35, offset: 57218},
																																	expr: &choiceExpr{
																																		pos: position{line: 3096, col: 8, offset: 100524},
																																		alternatives: []interface{}{
																																			&actionExpr{
																																				pos: position{line: 3089, col: 12, offset: 100384},
																																				run: (*parser).callonListElements351,
																																				expr: &choiceExpr{
																																					pos: position{line: 3089, col: 13, offset: 100385},
																																					alternatives: []interface{}{
																																						&litMatcher{
																																							pos:        position{line: 3089, col: 13, offset: 100385},
																																							val:        "\n",
																																							ignoreCase: false,
																																							want:       "\"\\n\"",
																																						},
																																						&litMatcher{
																																							pos:        position{line: 3089, col: 20, offset: 100392},
																																							val:        "\r\n",
																																							ignoreCase: false,
																																							want:       "\"\\r\\n\"",
																																						},
																																						&litMatcher{
																																							pos:        position{line: 3089, col: 29, offset: 100401},
																																							val:        "\r",
																																							ignoreCase: false,
																																							want:       "\"\\r\"",
																																						},
																																					},
																																				},
																																			},
																																			&notExpr{
																																				pos: position{line: 3093, col: 8, offset: 100474},
																																				expr: &anyMatcher{
																																					line: 3093, col: 9, offset: 100475,
																																				},
																																			},
																																		},
																																	},
																																},
																																&anyMatcher{
																																	line: 1741, col: 40, offset: 57223,
																																},
																															},
																														},
																													},
																												},
																												&actionExpr{
																													pos: position{line: 1746, col: 5, offset: 57339},
																													run: (*parser).callonListElements359,
																													expr: &seqExpr{
																														pos: position{line: 1746, col: 5, offset: 57339},
																														exprs: []interface{}{
																															&labeledExpr{
																																pos:   position{line: 1746, col: 5, offset: 57339},
																																label: "separator",
																																expr: &actionExpr{
																																	pos: position{line: 1746, col: 16, offset: 57350},
																																	run: (*parser).callonListElements362,
																																	expr: &oneOrMoreExpr{
																																		pos: position{line: 1746, col: 16, offset: 57350},
																																		expr: &litMatcher{
																																			pos:        position{line: 1746, col: 17, offset: 57351},
																																			val:        ":",
																																			ignoreCase: false,
																																			want:       "\":\"",
																																		},
																																	},
																																},
																															},
																															&andCodeExpr{
																																pos: position{line: 1749, col: 5, offset: 57408},
																																run: (*parser).callonListElements365,
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 1565, col: 9, offset: 51382},
																										expr: &actionExpr{
																											pos: position{line: 736, col: 5, offset: 23847},
																											run: (*parser).callonListElements367,
																											expr: &seqExpr{
																												pos: position{line: 736, col: 5, offset: 23847},
																												exprs: []interface{}{
																													&notExpr{
																														pos: position{line: 736, col: 5, offset: 23847},
																														expr: &charClassMatcher{
																															pos:        position{line: 2994, col: 13, offset: 97463},
																															val:        "[0-9\\pL]",
																															ranges:     []rune{'0', '9'},
																															classes:    []*unicode.RangeTable{rangeTable("L")},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																													&labeledExpr{
																														pos:   position{line: 737, col: 5, offset: 23877},
																														label: "delimiter",
																														expr: &choiceExpr{
																															pos: position{line: 738, col: 9, offset: 23897},
																															alternatives: []interface{}{
																																&actionExpr{
																																	pos: position{line: 752, col: 5, offset: 24389},
																																	run: (*parser).callonListElements373,
																																	expr: &seqExpr{
																																		pos: position{line: 752, col: 5, offset: 24389},
																																		exprs: []interface{}{
																																			&labeledExpr{
																																				pos:   position{line: 752, col: 5, offset: 24389},
																																				label: "delimiter",
																																				expr: &actionExpr{
																																					pos: position{line: 752, col: 16, offset: 24400},
																																					run: (*parser).callonListElements376,
																																					expr: &seqExpr{
																																						pos: position{line: 752, col: 16, offset: 24400},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 752, col: 16, offset: 24400},
																																								val:        "////",
																																								ignoreCase: false,
																																								want:       "\"////\"",
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 752, col: 23, offset: 24407},
																																								expr: &litMatcher{
																																									pos:        position{line: 752, col: 23, offset: 24407},
																																									val:        "/",
																																									ignoreCase: false,
																																									want:       "\"/\"",
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&zeroOrMoreExpr{
																																				pos: position{line: 754, col: 8, offset: 24491},
																																				expr: &actionExpr{
																																					pos: position{line: 3080, col: 10, offset: 100200},
																																					run: (*parser).callonListElements382,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 3080, col: 11, offset: 100201},
																																						val:        "[ \\t]",
																																						chars:      []rune{' ', '\t'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																			&choiceExpr{
																																				pos: position{line: 3096, col: 8, offset: 100524},
																																				alternatives: []interface{}{
																																					&actionExpr{
																																						pos: position{line: 3089, col: 12, offset: 100384},
																																						run: (*parser).callonListElements385,
																																						expr: &choiceExpr{
																																							pos: position{line: 3089, col: 13, offset: 100385},
																																							alternatives: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 3089, col: 13, offset: 100385},
																																									val:        "\n",
																																									ignoreCase: false,
																																									want:       "\"\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 3089, col: 20, offset: 100392},
																																									val:        "\r\n",
																																									ignoreCase: false,
																																									want:       "\"\\r\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 3089, col: 29, offset: 100401},
																																									val:        "\r",
																																									ignoreCase: false,
																																									want:       "\"\\r\"",
																																								},
																																							},
																																						},
																																					},
																																					&notExpr{
																																						pos: position{line: 3093, col: 8, offset: 100474},
																																						expr: &anyMatcher{
																																							line: 3093, col: 9, offset: 100475,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 759, col: 5, offset: 24637},
																																	run: (*parser).callonListElements392,
																																	expr: &seqExpr{
																																		pos: position{line: 759, col: 5, offset: 24637},
																																		exprs: []interface{}{
																																			&labeledExpr{
																																				pos:   position{line: 759, col: 5, offset: 24637},
																																				label: "delimiter",
																																				expr: &actionExpr{
																																					pos: position{line: 759, col: 16, offset: 24648},
																																					run: (*parser).callonListElements395,
																																					expr: &seqExpr{
																																						pos: position{line: 759, col: 16, offset: 24648},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 759, col: 16, offset: 24648},
																																								val:        "====",
																																								ignoreCase: false,
																																								want:       "\"====\"",
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 759, col: 23, offset: 24655},
																																								expr: &litMatcher{
																																									pos:        position{line: 759, col: 23, offset: 24655},
																																									val:        "=",
																																									ignoreCase: false,
																																									want:       "\"=\"",
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&zeroOrMoreExpr{
																																				pos: position{line: 761, col: 8, offset: 24739},
																																				expr: &actionExpr{
																																					pos: position{line: 3080, col: 10, offset: 100200},
																																					run: (*parser).callonListElements401,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 3080, col: 11, offset: 100201},
																																						val:        "[ \\t]",
																																						chars:      []rune{' ', '\t'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																			&choiceExpr{
																																				pos: position{line: 3096, col: 8, offset: 100524},
																																				alternatives: []interface{}{
																																					&actionExpr{
																																						pos: position{line: 3089, col: 12, offset: 100384},
																																						run: (*parser).callonListElements404,
																																						expr: &choiceExpr{
																																							pos: position{line: 3089, col: 13, offset: 100385},
																																							alternatives: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 3089, col: 13, offset: 100385},
																																									val:        "\n",
																																									ignoreCase: false,
																																									want:       "\"\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 3089, col: 20, offset: 100392},
																																									val:        "\r\n",
																																									ignoreCase: false,
																																									want:       "\"\\r\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 3089, col: 29, offset: 100401},
																																									val:        "\r",
																																									ignoreCase: false,
																																									want:       "\"\\r\"",
																																								},
																																							},
																																						},
																																					},
																																					&notExpr{
																																						pos: position{line: 3093, col: 8, offset: 100474},
																																						expr: &anyMatcher{
																																							line: 3093, col: 9, offset: 100475,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 772, col: 26, offset: 25125},
																																	run: (*parser).callonListElements411,
																																	expr: &seqExpr{
																																		pos: position{line: 772, col: 26, offset: 25125},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 772, col: 26, offset: 25125},
																																				val:        "```",
																																				ignoreCase: false,
																																				want:       "\"```\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 772, col: 32, offset: 25131},
																																				label: "language",
																																				expr: &actionExpr{
																																					pos: position{line: 776, col: 13, offset: 25261},
																																					run: (*parser).callonListElements415,
																																					expr: &oneOrMoreExpr{
																																						pos: position{line: 776, col: 14, offset: 25262},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 776, col: 14, offset: 25262},
																																							val:        "[^\\r\\n` ]",
																																							chars:      []rune{'\r', '\n', '`', ' '},
																																							ignoreCase: false,
																																							inverted:   true,
																																						},
																																					},
																																				},
																																			},
																																			&zeroOrMoreExpr{
																																				pos: position{line: 772, col: 52, offset: 25151},
																																				expr: &actionExpr{
																																					pos: position{line: 3080, col: 10, offset: 100200},
																																					run: (*parser).callonListElements419,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 3080, col: 11, offset: 100201},
																																						val:        "[ \\t]",
																																						chars:      []rune{' ', '\t'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																			&choiceExpr{
																																				pos: position{line: 3096, col: 8, offset: 100524},
																																				alternatives: []interface{}{
																																					&actionExpr{
																																						pos: position{line: 3089, col: 12, offset: 100384},
																																						run: (*parser).callonListElements422,
																																						expr: &choiceExpr{
																																							pos: position{line: 3089, col: 13, offset: 100385},
																																							alternatives: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 3089, col: 13, offset: 100385},
																																									val:        "\n",
																																									ignoreCase: false,
																																									want:       "\"\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 3089, col: 20, offset: 100392},
																																									val:        "\r\n",
																																									ignoreCase: false,
																																									want:       "\"\\r\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 3089, col: 29, offset: 100401},
																																									val:        "\r",
																																									ignoreCase: false,
																																									want:       "\"\\r\"",
																																								},
																																							},
																																						},
																																					},
																																					&notExpr{
																																						pos: position{line: 3093, col: 8, offset: 100474},
																																						expr: &anyMatcher{
																																							line: 3093, col: 9, offset: 100475,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 766, col: 5, offset: 24884},
																																	run: (*parser).callonListElements429,
																																	expr: &seqExpr{
																																		pos: position{line: 766, col: 5, offset: 24884},
																																		exprs: []interface{}{
																																			&labeledExpr{
																																				pos:   position{line: 766, col: 5, offset: 24884},
																																				label: "delimiter",
																																				expr: &actionExpr{
																																					pos: position{line: 766, col: 16, offset: 24895},
																																					run: (*parser).callonListElements432,
																																					expr: &seqExpr{
																																						pos: position{line: 766, col: 16, offset: 24895},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 766, col: 16, offset: 24895},
																																								val:        "```",
																																								ignoreCase: false,
																																								want:       "\"```\"",
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 766, col: 22, offset: 24901},
																																								expr: &litMatcher{
																																									pos:        position{line: 766, col: 22, offset: 24901},
																																									val:        "`",
																																									ignoreCase: false,
																																									want:       "\"`\"",
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&zeroOrMoreExpr{
																																				pos: position{line: 768, col: 8, offset: 24985},
																																				expr: &actionExpr{
																																					pos: position{line: 3080, col: 10, offset: 100200},
																																					run: (*parser).callonListElements438,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 3080, col: 11, offset: 100201},
																																						val:        "[ \\t]",
																																						chars:      []rune{' ', '\t'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																			&choiceExpr{
																																				pos: position{line: 3096, col: 8, offset: 100524},
																																				alternatives: []interface{}{
																																					&actionExpr{
																																						pos: position{line: 3089, col: 12, offset: 100384},
																																						run: (*parser).callonListElements441,
																																						expr: &choiceExpr{
																																							pos: position{line: 3089, col: 13, offset: 100385},
																																							alternatives: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 3089, col: 13, offset: 100385},
																																									val:        "\n",
																																									ignoreCase: false,
																																									want:       "\"\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 3089, col: 20, offset: 100392},
																																									val:        "\r\n",
																																									ignoreCase: false,
																																									want:       "\"\\r\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 3089, col: 29, offset: 100401},
																																									val:        "\r",
																																									ignoreCase: false,
																																									want:       "\"\\r\"",
																																								},
																																							},
																																						},
																																					},
																																					&notExpr{
																																						pos: position{line: 3093, col: 8, offset: 100474},
																																						expr: &anyMatcher{
																																							line: 3093, col: 9, offset: 100475,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 781, col: 5, offset: 25421},
																																	run: (*parser).callonListElements448,
																																	expr: &seqExpr{
																																		pos: position{line: 781, col: 5, offset: 25421},
																																		exprs: []interface{}{
																																			&labeledExpr{
																																				pos:   position{line: 781, col: 5, offset: 25421},
																																				label: "delimiter",
																																				expr: &actionExpr{
																																					pos: position{line: 781, col: 16, offset: 25432},
																																					run: (*parser).callonListElements451,
																																					expr: &seqExpr{
																																						pos: position{line: 781, col: 16, offset: 25432},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 781, col: 16, offset: 25432},
																																								val:        "----",
																																								ignoreCase: false,
																																								want:       "\"----\"",
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 781, col: 23, offset: 25439},
																																								expr: &litMatcher{
																																									pos:        position{line: 781, col: 23, offset: 25439},
																																									val:        "-",
																																									ignoreCase: false,
																																									want:       "\"-\"",
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&zeroOrMoreExpr{
																																				pos: position{line: 783, col: 8, offset: 25523},
																																				expr: &actionExpr{
																																					pos: position{line: 3080, col: 10, offset: 100200},
																																					run: (*parser).callonListElements457,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 3080, col: 11, offset: 100201},
																																						val:        "[ \\t]",
																																						chars:      []rune{' ', '\t'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																			&choiceExpr{
																																				pos: position{line: 3096, col: 8, offset: 100524},
																																				alternatives: []interface{}{
																																					&actionExpr{
																																						pos: position{line: 3089, col: 12, offset: 100384},
																																						run: (*parser).callonListElements460,
																																						expr: &choiceExpr{
																																							pos: position{line: 3089, col: 13, offset: 100385},
																																							alternatives: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 3089, col: 13, offset: 100385},
																																									val:        "\n",
																																									ignoreCase: false,
																																									want:       "\"\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 3089, col: 20, offset: 100392},
																																									val:        "\r\n",
																																									ignoreCase: false,
																																									want:       "\"\\r\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 3089, col: 29, offset: 100401},
																																									val:        "\r",
																																									ignoreCase: false,
																																									want:       "\"\\r\"",
																																								},
																																							},
																																						},
																																					},
																																					&notExpr{
																																						pos: position{line: 3093, col: 8, offset: 100474},
																																						expr: &anyMatcher{
																																							line: 3093, col: 9, offset: 100475,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 788, col: 5, offset: 25669},
																																	run: (*parser).callonListElements467,
																																	expr: &seqExpr{
																																		pos: position{line: 788, col: 5, offset: 25669},
																																		exprs: []interface{}{
																																			&labeledExpr{
																																				pos:   position{line: 788, col: 5, offset: 25669},
																																				label: "delimiter",
																																				expr: &actionExpr{
																																					pos: position{line: 788, col: 16, offset: 25680},
																																					run: (*parser).callonListElements470,
																																					expr: &seqExpr{
																																						pos: position{line: 788, col: 16, offset: 25680},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 788, col: 16, offset: 25680},
																																								val:        "....",
																																								ignoreCase: false,
																																								want:       "\"....\"",
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 788, col: 23, offset: 25687},
																																								expr: &litMatcher{
																																									pos:        position{line: 788, col: 23, offset: 25687},
																																									val:        ".",
																																									ignoreCase: false,
																																									want:       "\".\"",
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&zeroOrMoreExpr{
																																				pos: position{line: 790, col: 8, offset: 25771},
																																				expr: &actionExpr{
																																					pos: position{line: 3080, col: 10, offset: 100200},
																																					run: (*parser).callonListElements476,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 3080, col: 11, offset: 100201},
																																						val:        "[ \\t]",
																																						chars:      []rune{' ', '\t'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																			&choiceExpr{
																																				pos: position{line: 3096, col: 8, offset: 100524},
																																				alternatives: []interface{}{
																																					&actionExpr{
																																						pos: position{line: 3089, col: 12, offset: 100384},
																																						run: (*parser).callonListElements479,
																																						expr: &choiceExpr{
																																							pos: position{line: 3089, col: 13, offset: 100385},
																																							alternatives: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 3089, col: 13, offset: 100385},
																																									val:        "\n",
																																									ignoreCase: false,
																																									want:       "\"\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 3089, col: 20, offset: 100392},
																																									val:        "\r\n",
																																									ignoreCase: false,
																																									want:       "\"\\r\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 3089, col: 29, offset: 100401},
																																									val:        "\r",
																																									ignoreCase: false,
																																									want:       "\"\\r\"",
																																								},
																																							},
																																						},
																																					},
																																					&notExpr{
																																						pos: position{line: 3093, col: 8, offset: 100474},
																																						expr: &anyMatcher{
																																							line: 3093, col: 9, offset: 100475,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 795, col: 5, offset: 25921},
																																	run: (*parser).callonListElements486,
																																	expr: &seqExpr{
																																		pos: position{line: 795, col: 5, offset: 25921},
																																		exprs: []interface{}{
																																			&labeledExpr{
																																				pos:   position{line: 795, col: 5, offset: 25921},
																																				label: "delimiter",
																																				expr: &actionExpr{
																																					pos: position{line: 795, col: 16, offset: 25932},
																																					run: (*parser).callonListElements489,
																																					expr: &seqExpr{
																																						pos: position{line: 795, col: 16, offset: 25932},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 795, col: 16, offset: 25932},
																																								val:        "++++",
																																								ignoreCase: false,
																																								want:       "\"++++\"",
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 795, col: 23, offset: 25939},
																																								expr: &litMatcher{
																																									pos:        position{line: 795, col: 23, offset: 25939},
																																									val:        "+",
																																									ignoreCase: false,
																																									want:       "\"+\"",
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&zeroOrMoreExpr{
																																				pos: position{line: 797, col: 8, offset: 26023},
																																				expr: &actionExpr{
																																					pos: position{line: 3080, col: 10, offset: 100200},
																																					run: (*parser).callonListElements495,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 3080, col: 11, offset: 100201},
																																						val:        "[ \\t]",
																																						chars:      []rune{' ', '\t'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																			&choiceExpr{
																																				pos: position{line: 3096, col: 8, offset: 100524},
																																				alternatives: []interface{}{
																																					&actionExpr{
																																						pos: position{line: 3089, col: 12, offset: 100384},
																																						run: (*parser).callonListElements498,
																																						expr: &choiceExpr{
																																							pos: position{line: 3089, col: 13, offset: 100385},
																																							alternatives: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 3089, col: 13, offset: 100385},
																																									val:        "\n",
																																									ignoreCase: false,
																																									want:       "\"\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 3089, col: 20, offset: 100392},
																																									val:        "\r\n",
																																									ignoreCase: false,
																																									want:       "\"\\r\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 3089, col: 29, offset: 100401},
																																									val:        "\r",
																																									ignoreCase: false,
																																									want:       "\"\\r\"",
																																								},
																																							},
																																						},
																																					},
																																					&notExpr{
																																						pos: position{line: 3093, col: 8, offset: 100474},
																																						expr: &anyMatcher{
																																							line: 3093, col: 9, offset: 100475,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 802, col: 5, offset: 26171},
																																	run: (*parser).callonListElements505,
																																	expr: &seqExpr{
																																		pos: position{line: 802, col: 5, offset: 26171},
																																		exprs: []interface{}{
																																			&labeledExpr{
																																				pos:   position{line: 802, col: 5, offset: 26171},
																																				label: "delimiter",
																																				expr: &actionExpr{
																																					pos: position{line: 802, col: 16, offset: 26182},
																																					run: (*parser).callonListElements508,
																																					expr: &seqExpr{
																																						pos: position{line: 802, col: 16, offset: 26182},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 802, col: 16, offset: 26182},
																																								val:        "____",
																																								ignoreCase: false,
																																								want:       "\"____\"",
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 802, col: 23, offset: 26189},
																																								expr: &litMatcher{
																																									pos:        position{line: 802, col: 23, offset: 26189},
																																									val:        "_",
																																									ignoreCase: false,
																																									want:       "\"_\"",
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&zeroOrMoreExpr{
																																				pos: position{line: 804, col: 8, offset: 26273},
																																				expr: &actionExpr{
																																					pos: position{line: 3080, col: 10, offset: 100200},
																																					run: (*parser).callonListElements514,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 3080, col: 11, offset: 100201},
																																						val:        "[ \\t]",
																																						chars:      []rune{' ', '\t'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																			&choiceExpr{
																																				pos: position{line: 3096, col: 8, offset: 100524},
																																				alternatives: []interface{}{
																																					&actionExpr{
																																						pos: position{line: 3089, col: 12, offset: 100384},
																																						run: (*parser).callonListElements517,
																																						expr: &choiceExpr{
																																							pos: position{line: 3089, col: 13, offset: 100385},
																																							alternatives: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 3089, col: 13, offset: 100385},
																																									val:        "\n",
																																									ignoreCase: false,
																																									want:       "\"\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 3089, col: 20, offset: 100392},
																																									val:        "\r\n",
																																									ignoreCase: false,
																																									want:       "\"\\r\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 3089, col: 29, offset: 100401},
																																									val:        "\r",
																																									ignoreCase: false,
																																									want:       "\"\\r\"",
																																								},
																																							},
																																						},
																																					},
																																					&notExpr{
																																						pos: position{line: 3093, col: 8, offset: 100474},
																																						expr: &anyMatcher{
																																							line: 3093, col: 9, offset: 100475,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 809, col: 5, offset: 26417},
																																	run: (*parser).callonListElements524,
																																	expr: &seqExpr{
																																		pos: position{line: 809, col: 5, offset: 26417},
																																		exprs: []interface{}{
																																			&labeledExpr{
																																				pos:   position{line: 809, col: 5, offset: 26417},
																																				label: "delimiter",
																																				expr: &actionExpr{
																																					pos: position{line: 809, col: 16, offset: 26428},
																																					run: (*parser).callonListElements527,
																																					expr: &seqExpr{
																																						pos: position{line: 809, col: 16, offset: 26428},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 809, col: 16, offset: 26428},
																																								val:        "****",
																																								ignoreCase: false,
																																								want:       "\"****\"",
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 809, col: 23, offset: 26435},
																																								expr: &litMatcher{
																																									pos:        position{line: 809, col: 23, offset: 26435},
																																									val:        "*",
																																									ignoreCase: false,
																																									want:       "\"*\"",
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&zeroOrMoreExpr{
																																				pos: position{line: 811, col: 8, offset: 26519},
																																				expr: &actionExpr{
																																					pos: position{line: 3080, col: 10, offset: 100200},
																																					run: (*parser).callonListElements533,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 3080, col: 11, offset: 100201},
																																						val:        "[ \\t]",
																																						chars:      []rune{' ', '\t'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																			&choiceExpr{
																																				pos: position{line: 3096, col: 8, offset: 100524},
																																				alternatives: []interface{}{
																																					&actionExpr{
																																						pos: position{line: 3089, col: 12, offset: 100384},
																																						run: (*parser).callonListElements536,
																																						expr: &choiceExpr{
																																							pos: position{line: 3089, col: 13, offset: 100385},
																																							alternatives: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 3089, col: 13, offset: 100385},
																																									val:        "\n",
																																									ignoreCase: false,
																																									want:       "\"\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 3089, col: 20, offset: 100392},
																																									val:        "\r\n",
																																									ignoreCase: false,
																																									want:       "\"\\r\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 3089, col: 29, offset: 100401},
																																									val:        "\r",
																																									ignoreCase: false,
																																									want:       "\"\\r\"",
																																								},
																																							},
																																						},
																																					},
																																					&notExpr{
																																						pos: position{line: 3093, col: 8, offset: 100474},
																																						expr: &anyMatcher{
																																							line: 3093, col: 9, offset: 100475,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&labeledExpr{
																										pos:   position{line: 1566, col: 9, offset: 51406},
																										label: "content",
																										expr: &actionExpr{
																											pos: position{line: 1566, col: 18, offset: 51415},
																											run: (*parser).callonListElements544,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 1566, col: 18, offset: 51415},
																												expr: &charClassMatcher{
																													pos:        position{line: 1566, col: 18, offset: 51415},
																													val:        "[^\\r\\n]",
																													chars:      []rune{'\r', '\n'},
																													ignoreCase: false,
																													inverted:   true,
																												},
																											},
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 3096, col: 8, offset: 100524},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 3089, col: 12, offset: 100384},
																												run: (*parser).callonListElements548,
																												expr: &choiceExpr{
																													pos: position{line: 3089, col: 13, offset: 100385},
																													alternatives: []interface{}{
																														&litMatcher{
																															pos:        position{line: 3089, col: 13, offset: 100385},
																															val:        "\n",
																															ignoreCase: false,
																															want:       "\"\\n\"",
																														},
																														&litMatcher{
																															pos:        position{line: 3089, col: 20, offset: 100392},
																															val:        "\r\n",
																															ignoreCase: false,
																															want:       "\"\\r\\n\"",
																														},
																														&litMatcher{
																															pos:        position{line: 3089, col: 29, offset: 100401},
																															val:        "\r",
																															ignoreCase: false,
																															want:       "\"\\r\"",
																														},
																													},
																												},
																											},
																											&notExpr{
																												pos: position{line: 3093, col: 8, offset: 100474},
																												expr: &anyMatcher{
																													line: 3093, col: 9, offset: 100475,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 1769, col: 9, offset: 58006},
																run: (*parser).callonListElements555,
																expr: &seqExpr{
																	pos: position{line: 1769, col: 9, offset: 58006},
																	exprs: []interface{}{
																		&actionExpr{
																			pos: position{line: 3084, col: 11, offset: 100267},
																			run: (*parser).callonListElements557,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 3084, col: 11, offset: 100267},
																				expr: &charClassMatcher{
																					pos:        position{line: 3084, col: 12, offset: 100268},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 1770, col: 9, offset: 58058},
																			label: "content",
																			expr: &actionExpr{
																				pos: position{line: 1770, col: 18, offset: 58067},
																				run: (*parser).callonListElements561,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 1770, col: 18, offset: 58067},
																					expr: &charClassMatcher{
																						pos:        position{line: 1770, col: 18, offset: 58067},
																						val:        "[^\\r\\n]",
																						chars:      []rune{'\r', '\n'},
																						ignoreCase: false,
																						inverted:   true,
																					},
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 3096, col: 8, offset: 100524},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 3089, col: 12, offset: 100384},
																					run: (*parser).callonListElements565,
																					expr: &choiceExpr{
																						pos: position{line: 3089, col: 13, offset: 100385},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 3089, col: 13, offset: 100385},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 3089, col: 20, offset: 100392},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 3089, col: 29, offset: 100401},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 3093, col: 8, offset: 100474},
																					expr: &anyMatcher{
																						line: 3093, col: 9, offset: 100475,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1482, col: 5, offset: 48425},
							label: "extraElements",
							expr: &ruleRefExpr{
								pos:  position{line: 1482, col: 20, offset: 48440},
								name: "ExtraListElements",
							},
						},
					},
				},
			},
		},
		{
			name: "ExtraListElements",
			pos:  position{line: 1492, col: 1, offset: 48695},
			expr: &actionExpr{
				pos: position{line: 1492, col: 22, offset: 48716},
				run: (*parser).callonExtraListElements1,
				expr: &labeledExpr{
					pos:   position{line: 1492, col: 22, offset: 48716},
					label: "elements",
					expr: &zeroOrMoreExpr{
						pos: position{line: 1492, col: 31, offset: 48725},
						expr: &ruleRefExpr{
							pos:  position{line: 1492, col: 32, offset: 48726},
							name: "ExtraListElement",
						},
					},
				},
			},
		},
		{
			name: "ExtraListElement",
			pos:  position{line: 1496, col: 1, offset: 48806},
			expr: &actionExpr{
				pos: position{line: 1497, col: 5, offset: 48945},
				run: (*parser).callonExtraListElement1,
				expr: &seqExpr{
					pos: position{line: 1497, col: 5, offset: 48945},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1497, col: 5, offset: 48945},
							expr: &notExpr{
								pos: position{line: 3093, col: 8, offset: 100474},
								expr: &anyMatcher{
									line: 3093, col: 9, offset: 100475,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1498, col: 5, offset: 48955},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1499, col: 9, offset: 48973},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 1499, col: 13, offset: 48977},
										run: (*parser).callonExtraListElement8,
										expr: &seqExpr{
											pos: position{line: 1499, col: 13, offset: 48977},
											exprs: []interface{}{
												&zeroOrMoreExpr{
													pos: position{line: 1499, col: 13, offset: 48977},
													expr: &actionExpr{
														pos: position{line: 690, col: 14, offset: 22312},
														run: (*parser).callonExtraListElement11,
														expr: &seqExpr{
															pos: position{line: 690, col: 14, offset: 22312},
															exprs: []interface{}{
																&notExpr{
																	pos: position{line: 690, col: 14, offset: 22312},
																	expr: &notExpr{
																		pos: position{line: 3093, col: 8, offset: 100474},
																		expr: &anyMatcher{
																			line: 3093, col: 9, offset: 100475,
																		},
																	},
																},
																&zeroOrMoreExpr{
																	pos: position{line: 690, col: 19, offset: 22317},
																	expr: &actionExpr{
																		pos: position{line: 3080, col: 10, offset: 100200},
																		run: (*parser).callonExtraListElement17,
																		expr: &charClassMatcher{
																			pos:        position{line: 3080, col: 11, offset: 100201},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 3096, col: 8, offset: 100524},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 3089, col: 12, offset: 100384},
																			run: (*parser).callonExtraListElement20,
																			expr: &choiceExpr{
																				pos: position{line: 3089, col: 13, offset: 100385},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 3089, col: 13, offset: 100385},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 3089, col: 20, offset: 100392},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 3089, col: 29, offset: 100401},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 3093, col: 8, offset: 100474},
																			expr: &anyMatcher{
																				line: 3093, col: 9, offset: 100475,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1500, col: 13, offset: 49001},
													label: "element",
													expr: &actionExpr{
														pos: position{line: 1634, col: 5, offset: 53403},
														run: (*parser).callonExtraListElement28,
														expr: &seqExpr{
															pos: position{line: 1634, col: 5, offset: 53403},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1634, col: 5, offset: 53403},
																	label: "prefix",
																	expr: &actionExpr{
																		pos: position{line: 1641, col: 5, offset: 53611},
																		run: (*parser).callonExtraListElement31,
																		expr: &seqExpr{
																			pos: position{line: 1641, col: 5, offset: 53611},
																			exprs: []interface{}{
																				&zeroOrMoreExpr{
																					pos: position{line: 1641, col: 5, offset: 53611},
																					expr: &actionExpr{
																						pos: position{line: 3080, col: 10, offset: 100200},
																						run: (*parser).callonExtraListElement34,
																						expr: &charClassMatcher{
																							pos:        position{line: 3080, col: 11, offset: 100201},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 1641, col: 12, offset: 53618},
																					label: "prefix",
																					expr: &choiceExpr{
																						pos: position{line: 1643, col: 9, offset: 53681},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 1643, col: 9, offset: 53681},
																								run: (*parser).callonExtraListElement38,
																								expr: &seqExpr{
																									pos: position{line: 1643, col: 9, offset: 53681},
																									exprs: []interface{}{
																										&labeledExpr{
																											pos:   position{line: 1643, col: 9, offset: 53681},
																											label: "depth",
																											expr: &actionExpr{
																												pos: position{line: 1643, col: 16, offset: 53688},
																												run: (*parser).callonExtraListElement41,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 1643, col: 16, offset: 53688},
																													expr: &litMatcher{
																														pos:        position{line: 1643, col: 17, offset: 53689},
																														val:        ".",
																														ignoreCase: false,
																														want:       "\".\"",
																													},
																												},
																											},
																										},
																										&andCodeExpr{
																											pos: position{line: 1647, col: 9, offset: 53789},
																											run: (*parser).callonExtraListElement44,
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 1666, col: 11, offset: 54506},
																								run: (*parser).callonExtraListElement45,
																								expr: &seqExpr{
																									pos: position{line: 1666, col: 11, offset: 54506},
																									exprs: []interface{}{
																										&oneOrMoreExpr{
																											pos: position{line: 1666, col: 11, offset: 54506},
																											expr: &charClassMatcher{
																												pos:        position{line: 1666, col: 12, offset: 54507},
																												val:        "[0-9]",
																												ranges:     []rune{'0', '9'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 1666, col: 20, offset: 54515},
																											val:        ".",
																											ignoreCase: false,
																											want:       "\".\"",
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 1668, col: 13, offset: 54632},
																								run: (*parser).callonExtraListElement50,
																								expr: &seqExpr{
																									pos: position{line: 1668, col: 13, offset: 54632},
																									exprs: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 1668, col: 14, offset: 54633},
																											val:        "[a-z]",
																											ranges:     []rune{'a', 'z'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&litMatcher{
																											pos:        position{line: 1668, col: 21, offset: 54640},
																											val:        ".",
																											ignoreCase: false,
																											want:       "\".\"",
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 1670, col: 13, offset: 54760},
																								run: (*parser).callonExtraListElement54,
																								expr: &seqExpr{
																									pos: position{line: 1670, col: 13, offset: 54760},
																									exprs: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 1670, col: 14, offset: 54761},
																											val:        "[A-Z]",
																											ranges:     []rune{'A', 'Z'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&litMatcher{
																											pos:        position{line: 1670, col: 21, offset: 54768},
																											val:        ".",
																											ignoreCase: false,
																											want:       "\".\"",
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 1672, col: 13, offset: 54888},
																								run: (*parser).callonExtraListElement58,
																								expr: &seqExpr{
																									pos: position{line: 1672, col: 13, offset: 54888},
																									exprs: []interface{}{
																										&oneOrMoreExpr{
																											pos: position{line: 1672, col: 13, offset: 54888},
																											expr: &charClassMatcher{
																												pos:        position{line: 1672, col: 14, offset: 54889},
																												val:        "[ivxdlcm]",
																												chars:      []rune{'i', 'v', 'x', 'd', 'l', 'c', 'm'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 1672, col: 26, offset: 54901},
																											val:        ")",
																											ignoreCase: false,
																											want:       "\")\"",
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 1674, col: 13, offset: 55021},
																								run: (*parser).callonExtraListElement63,
																								expr: &seqExpr{
																									pos: position{line: 1674, col: 13, offset: 55021},
																									exprs: []interface{}{
																										&oneOrMoreExpr{
																											pos: position{line: 1674, col: 13, offset: 55021},
																											expr: &charClassMatcher{
																												pos:        position{line: 1674, col: 14, offset: 55022},
																												val:        "[IVXDLCM]",
																												chars:      []rune{'I', 'V', 'X', 'D', 'L', 'C', 'M'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 1674, col: 26, offset: 55034},
																											val:        ")",
																											ignoreCase: false,
																											want:       "\")\"",
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 3084, col: 11, offset: 100267},
																					run: (*parser).callonExtraListElement68,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 3084, col: 11, offset: 100267},
																						expr: &charClassMatcher{
																							pos:        position{line: 3084, col: 12, offset: 100268},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1635, col: 5, offset: 53442},
																	label: "content",
																	expr: &actionExpr{
																		pos: position{line: 1575, col: 5, offset: 51638},
																		run: (*parser).callonExtraListElement72,
																		expr: &seqExpr{
																			pos: position{line: 1575, col: 5, offset: 51638},
																			exprs: []interface{}{
																				&labeledExpr{
																					pos:   position{line: 1575, col: 5, offset: 51638},
																					label: "rawline",
																					expr: &actionExpr{
																						pos: position{line: 1575, col: 14, offset: 51647},
																						run: (*parser).callonExtraListElement75,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 1575, col: 14, offset: 51647},
																							expr: &charClassMatcher{
																								pos:        position{line: 1575, col: 14, offset: 51647},
																								val:        "[^\\r\\n]",
																								chars:      []rune{'\r', '\n'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 3096, col: 8, offset: 100524},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 3089, col: 12, offset: 100384},
																							run: (*parser).callonExtraListElement79,
																							expr: &choiceExpr{
																								pos: position{line: 3089, col: 13, offset: 100385},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 3089, col: 13, offset: 100385},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 3089, col: 20, offset: 100392},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 3089, col: 29, offset: 100401},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 3093, col: 8, offset: 100474},
																							expr: &anyMatcher{
																								line: 3093, col: 9, offset: 100475,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1503, col: 13, offset: 49093},
										run: (*parser).callonExtraListElement86,
										expr: &seqExpr{
											pos: position{line: 1503, col: 13, offset: 49093},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1503, col: 13, offset: 49093},
													label: "attributes",
													expr: &oneOrMoreExpr{
														pos: position{line: 1503, col: 24, offset: 49104},
														expr: &ruleRefExpr{
															pos:  position{line: 1503, col: 25, offset: 49105},
															name: "BlockAttributes",
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1504, col: 13, offset: 49136},
													label: "element",
													expr: &actionExpr{
														pos: position{line: 1634, col: 5, offset: 53403},
														run: (*parser).callonExtraListElement92,
														expr: &seqExpr{
															pos: position{line: 1634, col: 5, offset: 53403},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1634, col: 5, offset: 53403},
																	label: "prefix",
																	expr: &actionExpr{
																		pos: position{line: 1641, col: 5, offset: 53611},
																		run: (*parser).callonExtraListElement95,
																		expr: &seqExpr{
																			pos: position{line: 1641, col: 5, offset: 53611},
																			exprs: []interface{}{
																				&zeroOrMoreExpr{
																					pos: position{line: 1641, col: 5, offset: 53611},
																					expr: &actionExpr{
																						pos: position{line: 3080, col: 10, offset: 100200},
																						run: (*parser).callonExtraListElement98,
																						expr: &charClassMatcher{
																							pos:        position{line: 3080, col: 11, offset: 100201},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 1641, col: 12, offset: 53618},
																					label: "prefix",
																					expr: &choiceExpr{
																						pos: position{line: 1643, col: 9, offset: 53681},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 1643, col: 9, offset: 53681},
																								run: (*parser).callonExtraListElement102,
																								expr: &seqExpr{
																									pos: position{line: 1643, col: 9, offset: 53681},
																									exprs: []interface{}{
																										&labeledExpr{
																											pos:   position{line: 1643, col: 9, offset: 53681},
																											label: "depth",
																											expr: &actionExpr{
																												pos: position{line: 1643, col: 16, offset: 53688},
																												run: (*parser).callonExtraListElement105,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 1643, col: 16, offset: 53688},
																													expr: &litMatcher{
																														pos:        position{line: 1643, col: 17, offset: 53689},
																														val:        ".",
																														ignoreCase: false,
																														want:       "\".\"",
																													},
																												},
																											},
																										},
																										&andCodeExpr{
																											pos: position{line: 1647, col: 9, offset: 53789},
																											run: (*parser).callonExtraListElement108,
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 1666, col: 11, offset: 54506},
																								run: (*parser).callonExtraListElement109,
																								expr: &seqExpr{
																									pos: position{line: 1666, col: 11, offset: 54506},
																									exprs: []interface{}{
																										&oneOrMoreExpr{
																											pos: position{line: 1666, col: 11, offset: 54506},
																											expr: &charClassMatcher{
																												pos:        position{line: 1666, col: 12, offset: 54507},
																												val:        "[0-9]",
																												ranges:     []rune{'0', '9'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 1666, col: 20, offset: 54515},
																											val:        ".",
																											ignoreCase: false,
																											want:       "\".\"",
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 1668, col: 13, offset: 54632},
																								run: (*parser).callonExtraListElement114,
																								expr: &seqExpr{
																									pos: position{line: 1668, col: 13, offset: 54632},
																									exprs: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 1668, col: 14, offset: 54633},
																											val:        "[a-z]",
																											ranges:     []rune{'a', 'z'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&litMatcher{
																											pos:        position{line: 1668, col: 21, offset: 54640},
																											val:        ".",
																											ignoreCase: false,
																											want:       "\".\"",
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 1670, col: 13, offset: 54760},
																								run: (*parser).callonExtraListElement118,
																								expr: &seqExpr{
																									pos: position{line: 1670, col: 13, offset: 54760},
																									exprs: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 1670, col: 14, offset: 54761},
																											val:        "[A-Z]",
																											ranges:     []rune{'A', 'Z'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&litMatcher{
																											pos:        position{line: 1670, col: 21, offset: 54768},
																											val:        ".",
																											ignoreCase: false,
																											want:       "\".\"",
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 1672, col: 13, offset: 54888},
																								run: (*parser).callonExtraListElement122,
																								expr: &seqExpr{
																									pos: position{line: 1672, col: 13, offset: 54888},
																									exprs: []interface{}{
																										&oneOrMoreExpr{
																											pos: position{line: 1672, col: 13, offset: 54888},
																											expr: &charClassMatcher{
																												pos:        position{line: 1672, col: 14, offset: 54889},
																												val:        "[ivxdlcm]",
																												chars:      []rune{'i', 'v', 'x', 'd', 'l', 'c', 'm'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 1672, col: 26, offset: 54901},
																											val:        ")",
																											ignoreCase: false,
																											want:       "\")\"",
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 1674, col: 13, offset: 55021},
																								run: (*parser).callonExtraListElement127,
																								expr: &seqExpr{
																									pos: position{line: 1674, col: 13, offset: 55021},
																									exprs: []interface{}{
																										&oneOrMoreExpr{
																											pos: position{line: 1674, col: 13, offset: 55021},
																											expr: &charClassMatcher{
																												pos:        position{line: 1674, col: 14, offset: 55022},
																												val:        "[IVXDLCM]",
																												chars:      []rune{'I', 'V', 'X', 'D', 'L', 'C', 'M'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 1674, col: 26, offset: 55034},
																											val:        ")",
																											ignoreCase: false,
																											want:       "\")\"",
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 3084, col: 11, offset: 100267},
																					run: (*parser).callonExtraListElement132,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 3084, col: 11, offset: 100267},
																						expr: &charClassMatcher{
																							pos:        position{line: 3084, col: 12, offset: 100268},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1635, col: 5, offset: 53442},
																	label: "content",
																	expr: &actionExpr{
																		pos: position{line: 1575, col: 5, offset: 51638},
																		run: (*parser).callonExtraListElement136,
																		expr: &seqExpr{
																			pos: position{line: 1575, col: 5, offset: 51638},
																			exprs: []interface{}{
																				&labeledExpr{
																					pos:   position{line: 1575, col: 5, offset: 51638},
																					label: "rawline",
																					expr: &actionExpr{
																						pos: position{line: 1575, col: 14, offset: 51647},
																						run: (*parser).callonExtraListElement139,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 1575, col: 14, offset: 51647},
																							expr: &charClassMatcher{
																								pos:        position{line: 1575, col: 14, offset: 51647},
																								val:        "[^\\r\\n]",
																								chars:      []rune{'\r', '\n'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 3096, col: 8, offset: 100524},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 3089, col: 12, offset: 100384},
																							run: (*parser).callonExtraListElement143,
																							expr: &choiceExpr{
																								pos: position{line: 3089, col: 13, offset: 100385},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 3089, col: 13, offset: 100385},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 3089, col: 20, offset: 100392},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 3089, col: 29, offset: 100401},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 3093, col: 8, offset: 100474},
																							expr: &anyMatcher{
																								line: 3093, col: 9, offset: 100475,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1507, col: 13, offset: 49264},
										run: (*parser).callonExtraListElement150,
										expr: &seqExpr{
											pos: position{line: 1507, col: 13, offset: 49264},
											exprs: []interface{}{
												&zeroOrMoreExpr{
													pos: position{line: 1507, col: 13, offset: 49264},
													expr: &actionExpr{
														pos: position{line: 690, col: 14, offset: 22312},
														run: (*parser).callonExtraListElement153,
														expr: &seqExpr{
															pos: position{line: 690, col: 14, offset: 22312},
															exprs: []interface{}{
																&notExpr{
																	pos: position{line: 690, col: 14, offset: 22312},
																	expr: &notExpr{
																		pos: position{line: 3093, col: 8, offset: 100474},
																		expr: &anyMatcher{
																			line: 3093, col: 9, offset: 100475,
																		},
																	},
																},
																&zeroOrMoreExpr{
																	pos: position{line: 690, col: 19, offset: 22317},
																	expr: &actionExpr{
																		pos: position{line: 3080, col: 10, offset: 100200},
																		run: (*parser).callonExtraListElement159,
																		expr: &charClassMatcher{
																			pos:        position{line: 3080, col: 11, offset: 100201},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 3096, col: 8, offset: 100524},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 3089, col: 12, offset: 100384},
																			run: (*parser).callonExtraListElement162,
																			expr: &choiceExpr{
																				pos: position{line: 3089, col: 13, offset: 100385},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 3089, col: 13, offset: 100385},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 3089, col: 20, offset: 100392},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 3089, col: 29, offset: 100401},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 3093, col: 8, offset: 100474},
																			expr: &anyMatcher{
																				line: 3093, col: 9, offset: 100475,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1508, col: 13, offset: 49288},
													label: "element",
													expr: &actionExpr{
														pos: position{line: 1684, col: 5, offset: 55300},
														run: (*parser).callonExtraListElement170,
														expr: &seqExpr{
															pos: position{line: 1684, col: 5, offset: 55300},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1684, col: 5, offset: 55300},
																	label: "prefix",
																	expr: &actionExpr{
																		pos: position{line: 1691, col: 5, offset: 55573},
																		run: (*parser).callonExtraListElement173,
																		expr: &seqExpr{
																			pos: position{line: 1691, col: 5, offset: 55573},
																			exprs: []interface{}{
																				&zeroOrMoreExpr{
																					pos: position{line: 1691, col: 5, offset: 55573},
																					expr: &actionExpr{
																						pos: position{line: 3080, col: 10, offset: 100200},
																						run: (*parser).callonExtraListElement176,
																						expr: &charClassMatcher{
																							pos:        position{line: 3080, col: 11, offset: 100201},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 1691, col: 12, offset: 55580},
																					label: "prefix",
																					expr: &choiceExpr{
																						pos: position{line: 1691, col: 20, offset: 55588},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 1693, col: 9, offset: 55645},
																								run: (*parser).callonExtraListElement180,
																								expr: &seqExpr{
																									pos: position{line: 1693, col: 9, offset: 55645},
																									exprs: []interface{}{
																										&labeledExpr{
																											pos:   position{line: 1693, col: 9, offset: 55645},
																											label: "depth",
																											expr: &actionExpr{
																												pos: position{line: 1693, col: 16, offset: 55652},
																												run: (*parser).callonExtraListElement183,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 1693, col: 16, offset: 55652},
																													expr: &litMatcher{
																														pos:        position{line: 1693, col: 17, offset: 55653},
																														val:        "*",
																														ignoreCase: false,
																														want:       "\"*\"",
																													},
																												},
																											},
																										},
																										&andCodeExpr{
																											pos: position{line: 1697, col: 9, offset: 55753},
																											run: (*parser).callonExtraListElement186,
																										},
																									},
																								},
																							},
																							&labeledExpr{
																								pos:   position{line: 1714, col: 14, offset: 56460},
																								label: "depth",
																								expr: &actionExpr{
																									pos: position{line: 1714, col: 21, offset: 56467},
																									run: (*parser).callonExtraListElement188,
																									expr: &litMatcher{
																										pos:        position{line: 1714, col: 22, offset: 56468},
																										val:        "-",
																										ignoreCase: false,
																										want:       "\"-\"",
																									},
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 3084, col: 11, offset: 100267},
																					run: (*parser).callonExtraListElement190,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 3084, col: 11, offset: 100267},
																						expr: &charClassMatcher{
																							pos:        position{line: 3084, col: 12, offset: 100268},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1685, col: 5, offset: 55341},
																	label: "checkstyle",
																	expr: &zeroOrOneExpr{
																		pos: position{line: 1685, col: 16, offset: 55352},
																		expr: &actionExpr{
																			pos: position{line: 1721, col: 5, offset: 56629},
																			run: (*parser).callonExtraListElement195,
																			expr: &seqExpr{
																				pos: position{line: 1721, col: 5, offset: 56629},
																				exprs: []interface{}{
																					&andExpr{
																						pos: position{line: 1721, col: 5, offset: 56629},
																						expr: &litMatcher{
																							pos:        position{line: 1721, col: 6, offset: 56630},
																							val:        "[",
																							ignoreCase: false,
																							want:       "\"[\"",
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 1721, col: 10, offset: 56634},
																						label: "style",
																						expr: &choiceExpr{
																							pos: position{line: 1722, col: 7, offset: 56648},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 1722, col: 7, offset: 56648},
																									run: (*parser).callonExtraListElement201,
																									expr: &litMatcher{
																										pos:        position{line: 1722, col: 7, offset: 56648},
																										val:        "[ ]",
																										ignoreCase: false,
																										want:       "\"[ ]\"",
																									},
																								},
																								&actionExpr{
																									pos: position{line: 1723, col: 7, offset: 56693},
																									run: (*parser).callonExtraListElement203,
																									expr: &litMatcher{
																										pos:        position{line: 1723, col: 7, offset: 56693},
																										val:        "[*]",
																										ignoreCase: false,
																										want:       "\"[*]\"",
																									},
																								},
																								&actionExpr{
																									pos: position{line: 1724, col: 7, offset: 56736},
																									run: (*parser).callonExtraListElement205,
																									expr: &litMatcher{
																										pos:        position{line: 1724, col: 7, offset: 56736},
																										val:        "[x]",
																										ignoreCase: false,
																										want:       "\"[x]\"",
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 3084, col: 11, offset: 100267},
																						run: (*parser).callonExtraListElement207,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 3084, col: 11, offset: 100267},
																							expr: &charClassMatcher{
																								pos:        position{line: 3084, col: 12, offset: 100268},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1686, col: 5, offset: 55391},
																	label: "content",
																	expr: &actionExpr{
																		pos: position{line: 1575, col: 5, offset: 51638},
																		run: (*parser).callonExtraListElement211,
																		expr: &seqExpr{
																			pos: position{line: 1575, col: 5, offset: 51638},
																			exprs: []interface{}{
																				&labeledExpr{
																					pos:   position{line: 1575, col: 5, offset: 51638},
																					label: "rawline",
																					expr: &actionExpr{
																						pos: position{line: 1575, col: 14, offset: 51647},
																						run: (*parser).callonExtraListElement214,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 1575, col: 14, offset: 51647},
																							expr: &charClassMatcher{
																								pos:        position{line: 1575, col: 14, offset: 51647},
																								val:        "[^\\r\\n]",
																								chars:      []rune{'\r', '\n'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 3096, col: 8, offset: 100524},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 3089, col: 12, offset: 100384},
																							run: (*parser).callonExtraListElement218,
																							expr: &choiceExpr{
																								pos: position{line: 3089, col: 13, offset: 100385},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 3089, col: 13, offset: 100385},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 3089, col: 20, offset: 100392},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 3089, col: 29, offset: 100401},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 3093, col: 8, offset: 100474},
																							expr: &anyMatcher{
																								line: 3093, col: 9, offset: 100475,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1511, col: 13, offset: 49382},
										run: (*parser).callonExtraListElement225,
										expr: &seqExpr{
											pos: position{line: 1511, col: 13, offset: 49382},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1511, col: 13, offset: 49382},
													label: "attributes",
													expr: &oneOrMoreExpr{
														pos: position{line: 1511, col: 24, offset: 49393},
														expr: &ruleRefExpr{
															pos:  position{line: 1511, col: 25, offset: 49394},
															name: "BlockAttributes",
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1512, col: 13, offset: 49425},
													label: "element",
													expr: &actionExpr{
														pos: position{line: 1684, col: 5, offset: 55300},
														run: (*parser).callonExtraListElement231,
														expr: &seqExpr{
															pos: position{line: 1684, col: 5, offset: 55300},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1684, col: 5, offset: 55300},
																	label: "prefix",
																	expr: &actionExpr{
																		pos: position{line: 1691, col: 5, offset: 55573},
																		run: (*parser).callonExtraListElement234,
																		expr: &seqExpr{
																			pos: position{line: 1691, col: 5, offset: 55573},
																			exprs: []interface{}{
																				&zeroOrMoreExpr{
																					pos: position{line: 1691, col: 5, offset: 55573},
																					expr: &actionExpr{
																						pos: position{line: 3080, col: 10, offset: 100200},
																						run: (*parser).callonExtraListElement237,
																						expr: &charClassMatcher{
																							pos:        position{line: 3080, col: 11, offset: 100201},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 1691, col: 12, offset: 55580},
																					label: "prefix",
																					expr: &choiceExpr{
																						pos: position{line: 1691, col: 20, offset: 55588},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 1693, col: 9, offset: 55645},
																								run: (*parser).callonExtraListElement241,
																								expr: &seqExpr{
																									pos: position{line: 1693, col: 9, offset: 55645},
																									exprs: []interface{}{
																										&labeledExpr{
																											pos:   position{line: 1693, col: 9, offset: 55645},
																											label: "depth",
																											expr: &actionExpr{
																												pos: position{line: 1693, col: 16, offset: 55652},
																												run: (*parser).callonExtraListElement244,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 1693, col: 16, offset: 55652},
																													expr: &litMatcher{
																														pos:        position{line: 1693, col: 17, offset: 55653},
																														val:        "*",
																														ignoreCase: false,
																														want:       "\"*\"",
																													},
																												},
																											},
																										},
																										&andCodeExpr{
																											pos: position{line: 1697, col: 9, offset: 55753},
																											run: (*parser).callonExtraListElement247,
																										},
																									},
																								},
																							},
																							&labeledExpr{
																								pos:   position{line: 1714, col: 14, offset: 56460},
																								label: "depth",
																								expr: &actionExpr{
																									pos: position{line: 1714, col: 21, offset: 56467},
																									run: (*parser).callonExtraListElement249,
																									expr: &litMatcher{
																										pos:        position{line: 1714, col: 22, offset: 56468},
																										val:        "-",
																										ignoreCase: false,
																										want:       "\"-\"",
																									},
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 3084, col: 11, offset: 100267},
																					run: (*parser).callonExtraListElement251,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 3084, col: 11, offset: 100267},
																						expr: &charClassMatcher{
																							pos:        position{line: 3084, col: 12, offset: 100268},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1685, col: 5, offset: 55341},
																	label: "checkstyle",
																	expr: &zeroOrOneExpr{
																		pos: position{line: 1685, col: 16, offset: 55352},
																		expr: &actionExpr{
																			pos: position{line: 1721, col: 5, offset: 56629},
																			run: (*parser).callonExtraListElement256,
																			expr: &seqExpr{
																				pos: position{line: 1721, col: 5, offset: 56629},
																				exprs: []interface{}{
																					&andExpr{
																						pos: position{line: 1721, col: 5, offset: 56629},
																						expr: &litMatcher{
																							pos:        position{line: 1721, col: 6, offset: 56630},
																							val:        "[",
																							ignoreCase: false,
																							want:       "\"[\"",
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 1721, col: 10, offset: 56634},
																						label: "style",
																						expr: &choiceExpr{
																							pos: position{line: 1722, col: 7, offset: 56648},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 1722, col: 7, offset: 56648},
																									run: (*parser).callonExtraListElement262,
																									expr: &litMatcher{
																										pos:        position{line: 1722, col: 7, offset: 56648},
																										val:        "[ ]",
																										ignoreCase: false,
																										want:       "\"[ ]\"",
																									},
																								},
																								&actionExpr{
																									pos: position{line: 1723, col: 7, offset: 56693},
																									run: (*parser).callonExtraListElement264,
																									expr: &litMatcher{
																										pos:        position{line: 1723, col: 7, offset: 56693},
																										val:        "[*]",
																										ignoreCase: false,
																										want:       "\"[*]\"",
																									},
																								},
																								&actionExpr{
																									pos: position{line: 1724, col: 7, offset: 56736},
																									run: (*parser).callonExtraListElement266,
																									expr: &litMatcher{
																										pos:        position{line: 1724, col: 7, offset: 56736},
																										val:        "[x]",
																										ignoreCase: false,
																										want:       "\"[x]\"",
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 3084, col: 11, offset: 100267},
																						run: (*parser).callonExtraListElement268,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 3084, col: 11, offset: 100267},
																							expr: &charClassMatcher{
																								pos:        position{line: 3084, col: 12, offset: 100268},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1686, col: 5, offset: 55391},
																	label: "content",
																	expr: &actionExpr{
																		pos: position{line: 1575, col: 5, offset: 51638},
																		run: (*parser).callonExtraListElement272,
																		expr: &seqExpr{
																			pos: position{line: 1575, col: 5, offset: 51638},
																			exprs: []interface{}{
																				&labeledExpr{
																					pos:   position{line: 1575, col: 5, offset: 51638},
																					label: "rawline",
																					expr: &actionExpr{
																						pos: position{line: 1575, col: 14, offset: 51647},
																						run: (*parser).callonExtraListElement275,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 1575, col: 14, offset: 51647},
																							expr: &charClassMatcher{
																								pos:        position{line: 1575, col: 14, offset: 51647},
																								val:        "[^\\r\\n]",
																								chars:      []rune{'\r', '\n'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 3096, col: 8, offset: 100524},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 3089, col: 12, offset: 100384},
																							run: (*parser).callonExtraListElement279,
																							expr: &choiceExpr{
																								pos: position{line: 3089, col: 13, offset: 100385},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 3089, col: 13, offset: 100385},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 3089, col: 20, offset: 100392},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 3089, col: 29, offset: 100401},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 3093, col: 8, offset: 100474},
																							expr: &anyMatcher{
																								line: 3093, col: 9, offset: 100475,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1515, col: 13, offset: 49555},
										run: (*parser).callonExtraListElement286,
										expr: &seqExpr{
											pos: position{line: 1515, col: 13, offset: 49555},
											exprs: []interface{}{
												&zeroOrMoreExpr{
													pos: position{line: 1515, col: 13, offset: 49555},
													expr: &actionExpr{
														pos: position{line: 690, col: 14, offset: 22312},
														run: (*parser).callonExtraListElement289,
														expr: &seqExpr{
															pos: position{line: 690, col: 14, offset: 22312},
															exprs: []interface{}{
																&notExpr{
																	pos: position{line: 690, col: 14, offset: 22312},
																	expr: &notExpr{
																		pos: position{line: 3093, col: 8, offset: 100474},
																		expr: &anyMatcher{
																			line: 3093, col: 9, offset: 100475,
																		},
																	},
																},
																&zeroOrMoreExpr{
																	pos: position{line: 690, col: 19, offset: 22317},
																	expr: &actionExpr{
																		pos: position{line: 3080, col: 10, offset: 100200},
																		run: (*parser).callonExtraListElement295,
																		expr: &charClassMatcher{
																			pos:        position{line: 3080, col: 11, offset: 100201},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 3096, col: 8, offset: 100524},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 3089, col: 12, offset: 100384},
																			run: (*parser).callonExtraListElement298,
																			expr: &choiceExpr{
																				pos: position{line: 3089, col: 13, offset: 100385},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 3089, col: 13, offset: 100385},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 3089, col: 20, offset: 100392},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 3089, col: 29, offset: 100401},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 3093, col: 8, offset: 100474},
																			expr: &anyMatcher{
																				line: 3093, col: 9, offset: 100475,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1516, col: 13, offset: 49579},
													label: "element",
													expr: &actionExpr{
														pos: position{line: 1791, col: 5, offset: 58609},
														run: (*parser).callonExtraListElement306,
														expr: &seqExpr{
															pos: position{line: 1791, col: 5, offset: 58609},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1791, col: 5, offset: 58609},
																	label: "ref",
																	expr: &actionExpr{
																		pos: position{line: 1797, col: 5, offset: 58810},
																		run: (*parser).callonExtraListElement309,
																		expr: &seqExpr{
																			pos: position{line: 1797, col: 5, offset: 58810},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 1797, col: 5, offset: 58810},
																					val:        "<",
																					ignoreCase: false,
																					want:       "\"<\"",
																				},
																				&labeledExpr{
																					pos:   position{line: 1797, col: 9, offset: 58814},
																					label: "ref",
																					expr: &actionExpr{
																						pos: position{line: 1797, col: 14, offset: 58819},
																						run: (*parser).callonExtraListElement313,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 1797, col: 14, offset: 58819},
																							expr: &charClassMatcher{
																								pos:        position{line: 1797, col: 14, offset: 58819},
																								val:        "[0-9]",
																								ranges:     []rune{'0', '9'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 1797, col: 62, offset: 58867},
																					val:        ">",
																					ignoreCase: false,
																					want:       "\">\"",
																				},
																				&actionExpr{
																					pos: position{line: 3084, col: 11, offset: 100267},
																					run: (*parser).callonExtraListElement317,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 3084, col: 11, offset: 100267},
																						expr: &charClassMatcher{
																							pos:        position{line: 3084, col: 12, offset: 100268},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1792, col: 5, offset: 58645},
																	label: "description",
																	expr: &actionExpr{
																		pos: position{line: 1802, col: 5, offset: 58993},
																		run: (*parser).callonExtraListElement321,
																		expr: &seqExpr{
																			pos: position{line: 1802, col: 5, offset: 58993},
																			exprs: []interface{}{
																				&labeledExpr{
																					pos:   position{line: 1802, col: 5, offset: 58993},
																					label: "rawline",
																					expr: &actionExpr{
																						pos: position{line: 1802, col: 14, offset: 59002},
																						run: (*parser).callonExtraListElement324,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 1802, col: 14, offset: 59002},
																							expr: &charClassMatcher{
																								pos:        position{line: 1802, col: 14, offset: 59002},
																								val:        "[^\\r\\n]",
																								chars:      []rune{'\r', '\n'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 3096, col: 8, offset: 100524},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 3089, col: 12, offset: 100384},
																							run: (*parser).callonExtraListElement328,
																							expr: &choiceExpr{
																								pos: position{line: 3089, col: 13, offset: 100385},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 3089, col: 13, offset: 100385},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 3089, col: 20, offset: 100392},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 3089, col: 29, offset: 100401},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 3093, col: 8, offset: 100474},
																							expr: &anyMatcher{
																								line: 3093, col: 9, offset: 100475,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1519, col: 13, offset: 49671},
										run: (*parser).callonExtraListElement335,
										expr: &seqExpr{
											pos: position{line: 1519, col: 13, offset: 49671},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1519, col: 13, offset: 49671},
													label: "attributes",
													expr: &oneOrMoreExpr{
														pos: position{line: 1519, col: 24, offset: 49682},
														expr: &ruleRefExpr{
															pos:  position{line: 1519, col: 25, offset: 49683},
															name: "BlockAttributes",
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1520, col: 13, offset: 49714},
													label: "element",
													expr: &actionExpr{
														pos: position{line: 1791, col: 5, offset: 58609},
														run: (*parser).callonExtraListElement341,
														expr: &seqExpr{
															pos: position{line: 1791, col: 5, offset: 58609},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1791, col: 5, offset: 58609},
																	label: "ref",
																	expr: &actionExpr{
																		pos: position{line: 1797, col: 5, offset: 58810},
																		run: (*parser).callonExtraListElement344,
																		expr: &seqExpr{
																			pos: position{line: 1797, col: 5, offset: 58810},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 1797, col: 5, offset: 58810},
																					val:        "<",
																					ignoreCase: false,
																					want:       "\"<\"",
																				},
																				&labeledExpr{
																					pos:   position{line: 1797, col: 9, offset: 58814},
																					label: "ref",
																					expr: &actionExpr{
																						pos: position{line: 1797, col: 14, offset: 58819},
																						run: (*parser).callonExtraListElement348,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 1797, col: 14, offset: 58819},
																							expr: &charClassMatcher{
																								pos:        position{line: 1797, col: 14, offset: 58819},
																								val:        "[0-9]",
																								ranges:     []rune{'0', '9'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 1797, col: 62, offset: 58867},
																					val:        ">",
																					ignoreCase: false,
																					want:       "\">\"",
																				},
																				&actionExpr{
																					pos: position{line: 3084, col: 11, offset: 100267},
																					run: (*parser).callonExtraListElement352,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 3084, col: 11, offset: 100267},
																						expr: &charClassMatcher{
																							pos:        position{line: 3084, col: 12, offset: 100268},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1792, col: 5, offset: 58645},
																	label: "description",
																	expr: &actionExpr{
																		pos: position{line: 1802, col: 5, offset: 58993},
																		run: (*parser).callonExtraListElement356,
																		expr: &seqExpr{
																			pos: position{line: 1802, col: 5, offset: 58993},
																			exprs: []interface{}{
																				&labeledExpr{
																					pos:   position{line: 1802, col: 5, offset: 58993},
																					label: "rawline",
																					expr: &actionExpr{
																						pos: position{line: 1802, col: 14, offset: 59002},
																						run: (*parser).callonExtraListElement359,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 1802, col: 14, offset: 59002},
																							expr: &charClassMatcher{
																								pos:        position{line: 1802, col: 14, offset: 59002},
																								val:        "[^\\r\\n]",
																								chars:      []rune{'\r', '\n'},
																								ignoreCase: false,
																								inverted:   true,
																							},
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 3096, col: 8, offset: 100524},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 3089, col: 12, offset: 100384},
																							run: (*parser).callonExtraListElement363,
																							expr: &choiceExpr{
																								pos: position{line: 3089, col: 13, offset: 100385},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 3089, col: 13, offset: 100385},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 3089, col: 20, offset: 100392},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 3089, col: 29, offset: 100401},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 3093, col: 8, offset: 100474},
																							expr: &anyMatcher{
																								line: 3093, col: 9, offset: 100475,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1523, col: 11, offset: 49840},
										name: "ListElementContinuation",
									},
									&actionExpr{
										pos: position{line: 1524, col: 13, offset: 49876},
										run: (*parser).callonExtraListElement371,
										expr: &seqExpr{
											pos: position{line: 1524, col: 13, offset: 49876},
											exprs: []interface{}{
												&zeroOrMoreExpr{
													pos: position{line: 1524, col: 13, offset: 49876},
													expr: &actionExpr{
														pos: position{line: 690, col: 14, offset: 22312},
														run: (*parser).callonExtraListElement374,
														expr: &seqExpr{
															pos: position{line: 690, col: 14, offset: 22312},
															exprs: []interface{}{
																&notExpr{
																	pos: position{line: 690, col: 14, offset: 22312},
																	expr: &notExpr{
																		pos: position{line: 3093, col: 8, offset: 100474},
																		expr: &anyMatcher{
																			line: 3093, col: 9, offset: 100475,
																		},
																	},
																},
																&zeroOrMoreExpr{
																	pos: position{line: 690, col: 19, offset: 22317},
																	expr: &actionExpr{
																		pos: position{line: 3080, col: 10, offset: 100200},
																		run: (*parser).callonExtraListElement380,
																		expr: &charClassMatcher{
																			pos:        position{line: 3080, col: 11, offset: 100201},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 3096, col: 8, offset: 100524},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 3089, col: 12, offset: 100384},
																			run: (*parser).callonExtraListElement383,
																			expr: &choiceExpr{
																				pos: position{line: 3089, col: 13, offset: 100385},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 3089, col: 13, offset: 100385},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 3089, col: 20, offset: 100392},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 3089, col: 29, offset: 100401},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 3093, col: 8, offset: 100474},
																			expr: &anyMatcher{
																				line: 3093, col: 9, offset: 100475,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1525, col: 13, offset: 49900},
													label: "element",
													expr: &actionExpr{
														pos: position{line: 1733, col: 5, offset: 56929},
														run: (*parser).callonExtraListElement391,
														expr: &seqExpr{
															pos: position{line: 1733, col: 5, offset: 56929},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1733, col: 5, offset: 56929},
																	label: "term",
																	expr: &actionExpr{
																		pos: position{line: 1741, col: 5, offset: 57188},
																		run: (*parser).callonExtraListElement394,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 1741, col: 5, offset: 57188},
																			expr: &seqExpr{
																				pos: position{line: 1741, col: 6, offset: 57189},
																				exprs: []interface{}{
																					&notExpr{
																						pos: position{line: 1741, col: 6, offset: 57189},
																						expr: &actionExpr{
																							pos: position{line: 1746, col: 5, offset: 57339},
																							run: (*parser).callonExtraListElement398,
																							expr: &seqExpr{
																								pos: position{line: 1746, col: 5, offset: 57339},
																								exprs: []interface{}{
																									&labeledExpr{
																										pos:   position{line: 1746, col: 5, offset: 57339},
																										label: "separator",
																										expr: &actionExpr{
																											pos: position{line: 1746, col: 16, offset: 57350},
																											run: (*parser).callonExtraListElement401,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 1746, col: 16, offset: 57350},
																												expr: &litMatcher{
																													pos:        position{line: 1746, col: 17, offset: 57351},
																													val:        ":",
																													ignoreCase: false,
																													want:       "\":\"",
																												},
																											},
																										},
																									},
																									&andCodeExpr{
																										pos: position{line: 1749, col: 5, offset: 57408},
																										run: (*parser).callonExtraListElement404,
																									},
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 1741, col: 35, offset: 57218},
																						expr: &choiceExpr{
																							pos: position{line: 3096, col: 8, offset: 100524},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 3089, col: 12, offset: 100384},
																									run: (*parser).callonExtraListElement407,
																									expr: &choiceExpr{
																										pos: position{line: 3089, col: 13, offset: 100385},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 3089, col: 13, offset: 100385},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 3089, col: 20, offset: 100392},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 3089, col: 29, offset: 100401},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 3093, col: 8, offset: 100474},
																									expr: &anyMatcher{
																										line: 3093, col: 9, offset: 100475,
																									},
																								},
																							},
																						},
																					},
																					&anyMatcher{
																						line: 1741, col: 40, offset: 57223,
																					},
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1734, col: 5, offset: 56964},
																	label: "separator",
																	expr: &actionExpr{
																		pos: position{line: 1746, col: 5, offset: 57339},
																		run: (*parser).callonExtraListElement416,
																		expr: &seqExpr{
																			pos: position{line: 1746, col: 5, offset: 57339},
																			exprs: []interface{}{
																				&labeledExpr{
																					pos:   position{line: 1746, col: 5, offset: 57339},
																					label: "separator",
																					expr: &actionExpr{
																						pos: position{line: 1746, col: 16, offset: 57350},
																						run: (*parser).callonExtraListElement419,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 1746, col: 16, offset: 57350},
																							expr: &litMatcher{
																								pos:        position{line: 1746, col: 17, offset: 57351},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																						},
																					},
																				},
																				&andCodeExpr{
																					pos: position{line: 1749, col: 5, offset: 57408},
																					run: (*parser).callonExtraListElement422,
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1735, col: 5, offset: 57009},
																	label: "description",
																	expr: &choiceExpr{
																		pos: position{line: 1757, col: 5, offset: 57658},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 1759, col: 9, offset: 57723},
																				run: (*parser).callonExtraListElement425,
																				expr: &seqExpr{
																					pos: position{line: 1759, col: 9, offset: 57723},
																					exprs: []interface{}{
																						&zeroOrMoreExpr{
																							pos: position{line: 1759, col: 9, offset: 57723},
																							expr: &actionExpr{
																								pos: position{line: 3080, col: 10, offset: 100200},
																								run: (*parser).callonExtraListElement428,
																								expr: &charClassMatcher{
																									pos:        position{line: 3080, col: 11, offset: 100201},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 3096, col: 8, offset: 100524},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 3089, col: 12, offset: 100384},
																									run: (*parser).callonExtraListElement431,
																									expr: &choiceExpr{
																										pos: position{line: 3089, col: 13, offset: 100385},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 3089, col: 13, offset: 100385},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 3089, col: 20, offset: 100392},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 3089, col: 29, offset: 100401},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 3093, col: 8, offset: 100474},
																									expr: &anyMatcher{
																										line: 3093, col: 9, offset: 100475,
																									},
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 1760, col: 9, offset: 57743},
																							expr: &actionExpr{
																								pos: position{line: 690, col: 14, offset: 22312},
																								run: (*parser).callonExtraListElement439,
																								expr: &seqExpr{
																									pos: position{line: 690, col: 14, offset: 22312},
																									exprs: []interface{}{
																										&notExpr{
																											pos: position{line: 690, col: 14, offset: 22312},
																											expr: &notExpr{
																												pos: position{line: 3093, col: 8, offset: 100474},
																												expr: &anyMatcher{
																													line: 3093, col: 9, offset: 100475,
																												},
																											},
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 690, col: 19, offset: 22317},
																											expr: &actionExpr{
																												pos: position{line: 3080, col: 10, offset: 100200},
																												run: (*parser).callonExtraListElement445,
																												expr: &charClassMatcher{
																													pos:        position{line: 3080, col: 11, offset: 100201},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 3096, col: 8, offset: 100524},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 3089, col: 12, offset: 100384},
																													run: (*parser).callonExtraListElement448,
																													expr: &choiceExpr{
																														pos: position{line: 3089, col: 13, offset: 100385},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 3089, col: 13, offset: 100385},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 3089, col: 20, offset: 100392},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 3089, col: 29, offset: 100401},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 3093, col: 8, offset: 100474},
																													expr: &anyMatcher{
																														line: 3093, col: 9, offset: 100475,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 1761, col: 9, offset: 57763},
																							label: "content",
																							expr: &zeroOrOneExpr{
																								pos: position{line: 1761, col: 17, offset: 57771},
																								expr: &choiceExpr{
																									pos: position{line: 1555, col: 5, offset: 51005},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 1555, col: 5, offset: 51005},
																											run: (*parser).callonExtraListElement458,
																											expr: &actionExpr{
																												pos: position{line: 2770, col: 22, offset: 90863},
																												run: (*parser).callonExtraListElement459,
																												expr: &seqExpr{
																													pos: position{line: 2770, col: 22, offset: 90863},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 2775, col: 31, offset: 91084},
																															val:        "//",
																															ignoreCase: false,
																															want:       "\"//\"",
																														},
																														&notExpr{
																															pos: position{line: 2775, col: 36, offset: 91089},
																															expr: &litMatcher{
																																pos:        position{line: 2775, col: 37, offset: 91090},
																																val:        "//",
																																ignoreCase: false,
																																want:       "\"//\"",
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 2770, col: 49, offset: 90890},
																															label: "content",
																															expr: &actionExpr{
																																pos: position{line: 2777, col: 29, offset: 91125},
																																run: (*parser).callonExtraListElement465,
																																expr: &zeroOrMoreExpr{
																																	pos: position{line: 2777, col: 29, offset: 91125},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 2777, col: 29, offset: 91125},
																																		val:        "[^\\r\\n]",
																																		chars:      []rune{'\r', '\n'},
																																		ignoreCase: false,
																																		inverted:   true,
																																	},
																																},
																															},
																														},
																														&choiceExpr{
																															pos: position{line: 3096, col: 8, offset: 100524},
																															alternatives: []interface{}{
																																&actionExpr{
																																	pos: position{line: 3089, col: 12, offset: 100384},
																																	run: (*parser).callonExtraListElement469,
																																	expr: &choiceExpr{
																																		pos: position{line: 3089, col: 13, offset: 100385},
																																		alternatives: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 3089, col: 13, offset: 100385},
																																				val:        "\n",
																																				ignoreCase: false,
																																				want:       "\"\\n\"",
																																			},
																																			&litMatcher{
																																				pos:        position{line: 3089, col: 20, offset: 100392},
																																				val:        "\r\n",
																																				ignoreCase: false,
																																				want:       "\"\\r\\n\"",
																																			},
																																			&litMatcher{
																																				pos:        position{line: 3089, col: 29, offset: 100401},
																																				val:        "\r",
																																				ignoreCase: false,
																																				want:       "\"\\r\"",
																																			},
																																		},
																																	},
																																},
																																&notExpr{
																																	pos: position{line: 3093, col: 8, offset: 100474},
																																	expr: &anyMatcher{
																																		line: 3093, col: 9, offset: 100475,
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																										&actionExpr{
																											pos: position{line: 1559, col: 9, offset: 51158},
																											run: (*parser).callonExtraListElement476,
																											expr: &seqExpr{
																												pos: position{line: 1559, col: 9, offset: 51158},
																												exprs: []interface{}{
																													&notExpr{
																														pos: position{line: 1559, col: 9, offset: 51158},
																														expr: &actionExpr{
																															pos: position{line: 690, col: 14, offset: 22312},
																															run: (*parser).callonExtraListElement479,
																															expr: &seqExpr{
																																pos: position{line: 690, col: 14, offset: 22312},
																																exprs: []interface{}{
																																	&notExpr{
																																		pos: position{line: 690, col: 14, offset: 22312},
																																		expr: &notExpr{
																																			pos: position{line: 3093, col: 8, offset: 100474},
																																			expr: &anyMatcher{
																																				line: 3093, col: 9, offset: 100475,
																																			},
																																		},
																																	},
																																	&zeroOrMoreExpr{
																																		pos: position{line: 690, col: 19, offset: 22317},
																																		expr: &actionExpr{
																																			pos: position{line: 3080, col: 10, offset: 100200},
																																			run: (*parser).callonExtraListElement485,
																																			expr: &charClassMatcher{
																																				pos:        position{line: 3080, col: 11, offset: 100201},
																																				val:        "[ \\t]",
																																				chars:      []rune{' ', '\t'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																	&choiceExpr{
																																		pos: position{line: 3096, col: 8, offset: 100524},
																																		alternatives: []interface{}{
																																			&actionExpr{
																																				pos: position{line: 3089, col: 12, offset: 100384},
																																				run: (*parser).callonExtraListElement488,
																																				expr: &choiceExpr{
																																					pos: position{line: 3089, col: 13, offset: 100385},
																																					alternatives: []interface{}{
																																						&litMatcher{
																																							pos:        position{line: 3089, col: 13, offset: 100385},
																																							val:        "\n",
																																							ignoreCase: false,
																																							want:       "\"\\n\"",
																																						},
																																						&litMatcher{
																																							pos:        position{line: 3089, col: 20, offset: 100392},
																																							val:        "\r\n",
																																							ignoreCase: false,
																																							want:       "\"\\r\\n\"",
																																						},
																																						&litMatcher{
																																							pos:        position{line: 3089, col: 29, offset: 100401},
																																							val:        "\r",
																																							ignoreCase: false,
																																							want:       "\"\\r\"",
																																						},
																																					},
																																				},
																																			},
																																			&notExpr{
																																				pos: position{line: 3093, col: 8, offset: 100474},
																																				expr: &anyMatcher{
																																					line: 3093, col: 9, offset: 100475,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																													&notExpr{
																														pos: position{line: 1560, col: 9, offset: 51177},
																														expr: &seqExpr{
																															pos: position{line: 1593, col: 34, offset: 52137},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 1593, col: 34, offset: 52137},
																																	val:        "+",
																																	ignoreCase: false,
																																	want:       "\"+\"",
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 1593, col: 38, offset: 52141},
																																	expr: &actionExpr{
																																		pos: position{line: 3080, col: 10, offset: 100200},
																																		run: (*parser).callonExtraListElement499,
																																		expr: &charClassMatcher{
																																			pos:        position{line: 3080, col: 11, offset: 100201},
																																			val:        "[ \\t]",
																																			chars:      []rune{' ', '\t'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 3089, col: 12, offset: 100384},
																																	run: (*parser).callonExtraListElement501,
																																	expr: &choiceExpr{
																																		pos: position{line: 3089, col: 13, offset: 100385},
																																		alternatives: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 3089, col: 13, offset: 100385},
																																				val:        "\n",
																																				ignoreCase: false,
																																				want:       "\"\\n\"",
																																			},
																																			&litMatcher{
																																				pos:        position{line: 3089, col: 20, offset: 100392},
																																				val:        "\r\n",
																																				ignoreCase: false,
																																				want:       "\"\\r\\n\"",
																																			},
																																			&litMatcher{
																																				pos:        position{line: 3089, col: 29, offset: 100401},
																																				val:        "\r",
																																				ignoreCase: false,
																																				want:       "\"\\r\"",
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																													&notExpr{
																														pos: position{line: 1561, col: 9, offset: 51216},
																														expr: &actionExpr{
																															pos: position{line: 1641, col: 5, offset: 53611},
																															run: (*parser).callonExtraListElement507,
																															expr: &seqExpr{
																																pos: position{line: 1641, col: 5, offset: 53611},
																																exprs: []interface{}{
																																	&zeroOrMoreExpr{
																																		pos: position{line: 1641, col: 5, offset: 53611},
																																		expr: &actionExpr{
																																			pos: position{line: 3080, col: 10, offset: 100200},
																																			run: (*parser).callonExtraListElement510,
																																			expr: &charClassMatcher{
																																				pos:        position{line: 3080, col: 11, offset: 100201},
																																				val:        "[ \\t]",
																																				chars:      []rune{' ', '\t'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 1641, col: 12, offset: 53618},
																																		label: "prefix",
																																		expr: &choiceExpr{
																																			pos: position{line: 1643, col: 9, offset: 53681},
																																			alternatives: []interface{}{
																																				&actionExpr{
																																					pos: position{line: 1643, col: 9, offset: 53681},
																																					run: (*parser).callonExtraListElement514,
																																					expr: &seqExpr{
																																						pos: position{line: 1643, col: 9, offset: 53681},
																																						exprs: []interface{}{
																																							&labeledExpr{
																																								pos:   position{line: 1643, col: 9, offset: 53681},
																																								label: "depth",
																																								expr: &actionExpr{
																																									pos: position{line: 1643, col: 16, offset: 53688},
																																									run: (*parser).callonExtraListElement517,
																																									expr: &oneOrMoreExpr{
																																										pos: position{line: 1643, col: 16, offset: 53688},
																																										expr: &litMatcher{
																																											pos:        position{line: 1643, col: 17, offset: 53689},
																																											val:        ".",
																																											ignoreCase: false,
																																											want:       "\".\"",
																																										},
																																									},
																																								},
																																							},
																																							&andCodeExpr{
																																								pos: position{line: 1647, col: 9, offset: 53789},
																																								run: (*parser).callonExtraListElement520,
																																							},
																																						},
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 1666, col: 11, offset: 54506},
																																					run: (*parser).callonExtraListElement521,
																																					expr: &seqExpr{
																																						pos: position{line: 1666, col: 11, offset: 54506},
																																						exprs: []interface{}{
																																							&oneOrMoreExpr{
																																								pos: position{line: 1666, col: 11, offset: 54506},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 1666, col: 12, offset: 54507},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																							&litMatcher{
																																								pos:        position{line: 1666, col: 20, offset: 54515},
																																								val:        ".",
																																								ignoreCase: false,
																																								want:       "\".\"",
																																							},
																																						},
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 1668, col: 13, offset: 54632},
																																					run: (*parser).callonExtraListElement526,
																																					expr: &seqExpr{
																																						pos: position{line: 1668, col: 13, offset: 54632},
																																						exprs: []interface{}{
																																							&charClassMatcher{
																																								pos:        position{line: 1668, col: 14, offset: 54633},
																																								val:        "[a-z]",
																																								ranges:     []rune{'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																							&litMatcher{
																																								pos:        position{line: 1668, col: 21, offset: 54640},
																																								val:        ".",
																																								ignoreCase: false,
																																								want:       "\".\"",
																																							},
																																						},
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 1670, col: 13, offset: 54760},
																																					run: (*parser).callonExtraListElement530,
																																					expr: &seqExpr{
																																						pos: position{line: 1670, col: 13, offset: 54760},
																																						exprs: []interface{}{
																																							&charClassMatcher{
																																								pos:        position{line: 1670, col: 14, offset: 54761},
																																								val:        "[A-Z]",
																																								ranges:     []rune{'A', 'Z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																							&litMatcher{
																																								pos:        position{line: 1670, col: 21, offset: 54768},
																																								val:        ".",
																																								ignoreCase: false,
																																								want:       "\".\"",
																																							},
																																						},
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 1672, col: 13, offset: 54888},
																																					run: (*parser).callonExtraListElement534,
																																					expr: &seqExpr{
																																						pos: position{line: 1672, col: 13, offset: 54888},
																																						exprs: []interface{}{
																																							&oneOrMoreExpr{
																																								pos: position{line: 1672, col: 13, offset: 54888},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 1672, col: 14, offset: 54889},
																																									val:        "[ivxdlcm]",
																																									chars:      []rune{'i', 'v', 'x', 'd', 'l', 'c', 'm'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																							&litMatcher{
																																								pos:        position{line: 1672, col: 26, offset: 54901},
																																								val:        ")",
																																								ignoreCase: false,
																																								want:       "\")\"",
																																							},
																																						},
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 1674, col: 13, offset: 55021},
																																					run: (*parser).callonExtraListElement539,
																																					expr: &seqExpr{
																																						pos: position{line: 1674, col: 13, offset: 55021},
																																						exprs: []interface{}{
																																							&oneOrMoreExpr{
																																								pos: position{line: 1674, col: 13, offset: 55021},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 1674, col: 14, offset: 55022},
																																									val:        "[IVXDLCM]",
																																									chars:      []rune{'I', 'V', 'X', 'D', 'L', 'C', 'M'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																							&litMatcher{
																																								pos:        position{line: 1674, col: 26, offset: 55034},
																																								val:        ")",
																																								ignoreCase: false,
																																								want:       "\")\"",
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&actionExpr{
																																		pos: position{line: 3084, col: 11, offset: 100267},
																																		run: (*parser).callonExtraListElement544,
																																		expr: &oneOrMoreExpr{
																																			pos: position{line: 3084, col: 11, offset: 100267},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 3084, col: 12, offset: 100268},
																																				val:        "[ \\t]",
																																				chars:      []rune{' ', '\t'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																													&notExpr{
																														pos: position{line: 1562, col: 9, offset: 51250},
																														expr: &actionExpr{
																															pos: position{line: 1691, col: 5, offset: 55573},
																															run: (*parser).callonExtraListElement548,
																															expr: &seqExpr{
																																pos: position{line: 1691, col: 5, offset: 55573},
																																exprs: []interface{}{
																																	&zeroOrMoreExpr{
																																		pos: position{line: 1691, col: 5, offset: 55573},
																																		expr: &actionExpr{
																																			pos: position{line: 3080, col: 10, offset: 100200},
																																			run: (*parser).callonExtraListElement551,
																																			expr: &charClassMatcher{
																																				pos:        position{line: 3080, col: 11, offset: 100201},
																																				val:        "[ \\t]",
																																				chars:      []rune{' ', '\t'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 1691, col: 12, offset: 55580},
																																		label: "prefix",
																																		expr: &choiceExpr{
																																			pos: position{line: 1691, col: 20, offset: 55588},
																																			alternatives: []interface{}{
																																				&actionExpr{
																																					pos: position{line: 1693, col: 9, offset: 55645},
																																					run: (*parser).callonExtraListElement555,
																																					expr: &seqExpr{
																																						pos: position{line: 1693, col: 9, offset: 55645},
																																						exprs: []interface{}{
																																							&labeledExpr{
																																								pos:   position{line: 1693, col: 9, offset: 55645},
																																								label: "depth",
																																								expr: &actionExpr{
																																									pos: position{line: 1693, col: 16, offset: 55652},
																																									run: (*parser).callonExtraListElement558,
																																									expr: &oneOrMoreExpr{
																																										pos: position{line: 1693, col: 16, offset: 55652},
																																										expr: &litMatcher{
																																											pos:        position{line: 1693, col: 17, offset: 55653},
																																											val:        "*",
																																											ignoreCase: false,
																																											want:       "\"*\"",
																																										},
																																									},
																																								},
																																							},
																																							&andCodeExpr{
																																								pos: position{line: 1697, col: 9, offset: 55753},
																																								run: (*parser).callonExtraListElement561,
																																							},
																																						},
																																					},
																																				},
																																				&labeledExpr{
																																					pos:   position{line: 1714, col: 14, offset: 56460},
																																					label: "depth",
																																					expr: &actionExpr{
																																						pos: position{line: 1714, col: 21, offset: 56467},
																																						run: (*parser).callonExtraListElement563,
																																						expr: &litMatcher{
																																							pos:        position{line: 1714, col: 22, offset: 56468},
																																							val:        "-",
																																							ignoreCase: false,
																																							want:       "\"-\"",
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&actionExpr{
																																		pos: position{line: 3084, col: 11, offset: 100267},
																																		run: (*parser).callonExtraListElement565,
																																		expr: &oneOrMoreExpr{
																																			pos: position{line: 3084, col: 11, offset: 100267},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 3084, col: 12, offset: 100268},
																																				val:        "[ \\t]",
																																				chars:      []rune{' ', '\t'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																													&notExpr{
																														pos: position{line: 1563, col: 9, offset: 51286},
																														expr: &actionExpr{
																															pos: position{line: 1797, col: 5, offset: 58810},
																															run: (*parser).callonExtraListElement569,
																															expr: &seqExpr{
																																pos: position{line: 1797, col: 5, offset: 58810},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 1797, col: 5, offset: 58810},
																																		val:        "<",
																																		ignoreCase: false,
																																		want:       "\"<\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 1797, col: 9, offset: 58814},
																																		label: "ref",
																																		expr: &actionExpr{
																																			pos: position{line: 1797, col: 14, offset: 58819},
																																			run: (*parser).callonExtraListElement573,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 1797, col: 14, offset: 58819},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 1797, col: 14, offset: 58819},
																																					val:        "[0-9]",
																																					ranges:     []rune{'0', '9'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 1797, col: 62, offset: 58867},
																																		val:        ">",
																																		ignoreCase: false,
																																		want:       "\">\"",
																																	},
																																	&actionExpr{
																																		pos: position{line: 3084, col: 11, offset: 100267},
																																		run: (*parser).callonExtraListElement577,
																																		expr: &oneOrMoreExpr{
																																			pos: position{line: 3084, col: 11, offset: 100267},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 3084, col: 12, offset: 100268},
																																				val:        "[ \\t]",
																																				chars:      []rune{' ', '\t'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																													&notExpr{
																														pos: position{line: 1564, col: 9, offset: 51320},
																														expr: &seqExpr{
																															pos: position{line: 1564, col: 11, offset: 51322},
																															exprs: []interface{}{
																																&actionExpr{
																																	pos: position{line: 1741, col: 5, offset: 57188},
																																	run: (*parser).callonExtraListElement582,
																																	expr: &oneOrMoreExpr{
																																		pos: position{line: 1741, col: 5, offset: 57188},
																																		expr: &seqExpr{
																																			pos: position{line: 1741, col: 6, offset: 57189},
																																			exprs: []interface{}{
																																				&notExpr{
																																					pos: position{line: 1741, col: 6, offset: 57189},
																																					expr: &actionExpr{
																																						pos: position{line: 1746, col: 5, offset: 57339},
																																						run: (*parser).callonExtraListElement586,
																																						expr: &seqExpr{
																																							pos: position{line: 1746, col: 5, offset: 57339},
																																							exprs: []interface{}{
																																								&labeledExpr{
																																									pos:   position{line: 1746, col: 5, offset: 57339},
																																									label: "separator",
																																									expr: &actionExpr{
																																										pos: position{line: 1746, col: 16, offset: 57350},
																																										run: (*parser).callonExtraListElement589,
																																										expr: &oneOrMoreExpr{
																																											pos: position{line: 1746, col: 16, offset: 57350},
																																											expr: &litMatcher{
																																												pos:        position{line: 1746, col: 17, offset: 57351},
																																												val:        ":",
																																												ignoreCase: false,
																																												want:       "\":\"",
																																											},
																																										},
																																									},
																																								},
																																								&andCodeExpr{
																																									pos: position{line: 1749, col: 5, offset: 57408},
																																									run: (*parser).callonExtraListElement592,
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&notExpr{
																																					pos: position{line: 1741, col: 35, offset: 57218},
																																					expr: &choiceExpr{
																																						pos: position{line: 3096, col: 8, offset: 100524},
																																						alternatives: []interface{}{
																																							&actionExpr{
																																								pos: position{line: 3089, col: 12, offset: 100384},
																																								run: (*parser).callonExtraListElement595,
																																								expr: &choiceExpr{
																																									pos: position{line: 3089, col: 13, offset: 100385},
																																									alternatives: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 3089, col: 13, offset: 100385},
																																											val:        "\n",
																																											ignoreCase: false,
																																											want:       "\"\\n\"",
																																										},
																																										&litMatcher{
																																											pos:        position{line: 3089, col: 20, offset: 100392},
																																											val:        "\r\n",
																																											ignoreCase: false,
																																											want:       "\"\\r\\n\"",
																																										},
																																										&litMatcher{
																																											pos:        position{line: 3089, col: 29, offset: 100401},
																																											val:        "\r",
																																											ignoreCase: false,
																																											want:       "\"\\r\"",
																																										},
																																									},
																																								},
																																							},
																																							&notExpr{
																																								pos: position{line: 3093, col: 8, offset: 100474},
																																								expr: &anyMatcher{
																																									line: 3093, col: 9, offset: 100475,
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&anyMatcher{
																																					line: 1741, col: 40, offset: 57223,
																																				},
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 1746, col: 5, offset: 57339},
																																	run: (*parser).callonExtraListElement603,
																																	expr: &seqExpr{
																																		pos: position{line: 1746, col: 5, offset: 57339},
																																		exprs: []interface{}{
																																			&labeledExpr{
																																				pos:   position{line: 1746, col: 5, offset: 57339},
																																				label: "separator",
																																				expr: &actionExpr{
																																					pos: position{line: 1746, col: 16, offset: 57350},
																																					run: (*parser).callonExtraListElement606,
																																					expr: &oneOrMoreExpr{
																																						pos: position{line: 1746, col: 16, offset: 57350},
																																						expr: &litMatcher{
																																							pos:        position{line: 1746, col: 17, offset: 57351},
																																							val:        ":",
																																							ignoreCase: false,
																																							want:       "\":\"",
																																						},
																																					},
																																				},
																																			},
																																			&andCodeExpr{
																																				pos: position{line: 1749, col: 5, offset: 57408},
																																				run: (*parser).callonExtraListElement609,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																													&notExpr{
																														pos: position{line: 1565, col: 9, offset: 51382},
																														expr: &actionExpr{
																															pos: position{line: 736, col: 5, offset: 23847},
																															run: (*parser).callonExtraListElement611,
																															expr: &seqExpr{
																																pos: position{line: 736, col: 5, offset: 23847},
																																exprs: []interface{}{
																																	&notExpr{
																																		pos: position{line: 736, col: 5, offset: 23847},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2994, col: 13, offset: 97463},
																																			val:        "[0-9\\pL]",
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 737, col: 5, offset: 23877},
																																		label: "delimiter",
																																		expr: &choiceExpr{
																																			pos: position{line: 738, col: 9, offset: 23897},
																																			alternatives: []interface{}{
																																				&actionExpr{
																																					pos: position{line: 752, col: 5, offset: 24389},
																																					run: (*parser).callonExtraListElement617,
																																					expr: &seqExpr{
																																						pos: position{line: 752, col: 5, offset: 24389},
																																						exprs: []interface{}{
																																							&labeledExpr{
																																								pos:   position{line: 752, col: 5, offset: 24389},
																																								label: "delimiter",
																																								expr: &actionExpr{
																																									pos: position{line: 752, col: 16, offset: 24400},
																																									run: (*parser).callonExtraListElement620,
																																									expr: &seqExpr{
																																										pos: position{line: 752, col: 16, offset: 24400},
																																										exprs: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 752, col: 16, offset: 24400},
																																												val:        "////",
																																												ignoreCase: false,
																																												want:       "\"////\"",
																																											},
																																											&zeroOrMoreExpr{
																																												pos: position{line: 752, col: 23, offset: 24407},
																																												expr: &litMatcher{
																																													pos:        position{line: 752, col: 23, offset: 24407},
																																													val:        "/",
																																													ignoreCase: false,
																																													want:       "\"/\"",
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 754, col: 8, offset: 24491},
																																								expr: &actionExpr{
																																									pos: position{line: 3080, col: 10, offset: 100200},
																																									run: (*parser).callonExtraListElement626,
																																									expr: &charClassMatcher{
																																										pos:        position{line: 3080, col: 11, offset: 100201},
																																										val:        "[ \\t]",
																																										chars:      []rune{' ', '\t'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&choiceExpr{
																																								pos: position{line: 3096, col: 8, offset: 100524},
																																								alternatives: []interface{}{
																																									&actionExpr{
																																										pos: position{line: 3089, col: 12, offset: 100384},
																																										run: (*parser).callonExtraListElement629,
																																										expr: &choiceExpr{
																																											pos: position{line: 3089, col: 13, offset: 100385},
																																											alternatives: []interface{}{
																																												&litMatcher{
																																													pos:        position{line: 3089, col: 13, offset: 100385},
																																													val:        "\n",
																																													ignoreCase: false,
																																													want:       "\"\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 3089, col: 20, offset: 100392},
																																													val:        "\r\n",
																																													ignoreCase: false,
																																													want:       "\"\\r\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 3089, col: 29, offset: 100401},
																																													val:        "\r",
																																													ignoreCase: false,
																																													want:       "\"\\r\"",
																																												},
																																											},
																																										},
																																									},
																																									&notExpr{
																																										pos: position{line: 3093, col: 8, offset: 100474},
																																										expr: &anyMatcher{
																																											line: 3093, col: 9, offset: 100475,
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 759, col: 5, offset: 24637},
																																					run: (*parser).callonExtraListElement636,
																																					expr: &seqExpr{
																																						pos: position{line: 759, col: 5, offset: 24637},
																																						exprs: []interface{}{
																																							&labeledExpr{
																																								pos:   position{line: 759, col: 5, offset: 24637},
																																								label: "delimiter",
																																								expr: &actionExpr{
																																									pos: position{line: 759, col: 16, offset: 24648},
																																									run: (*parser).callonExtraListElement639,
																																									expr: &seqExpr{
																																										pos: position{line: 759, col: 16, offset: 24648},
																																										exprs: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 759, col: 16, offset: 24648},
																																												val:        "====",
																																												ignoreCase: false,
																																												want:       "\"====\"",
																																											},
																																											&zeroOrMoreExpr{
																																												pos: position{line: 759, col: 23, offset: 24655},
																																												expr: &litMatcher{
																																													pos:        position{line: 759, col: 23, offset: 24655},
																																													val:        "=",
																																													ignoreCase: false,
																																													want:       "\"=\"",
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 761, col: 8, offset: 24739},
																																								expr: &actionExpr{
																																									pos: position{line: 3080, col: 10, offset: 100200},
																																									run: (*parser).callonExtraListElement645,
																																									expr: &charClassMatcher{
																																										pos:        position{line: 3080, col: 11, offset: 100201},
																																										val:        "[ \\t]",
																																										chars:      []rune{' ', '\t'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&choiceExpr{
																																								pos: position{line: 3096, col: 8, offset: 100524},
																																								alternatives: []interface{}{
																																									&actionExpr{
																																										pos: position{line: 3089, col: 12, offset: 100384},
																																										run: (*parser).callonExtraListElement648,
																																										expr: &choiceExpr{
																																											pos: position{line: 3089, col: 13, offset: 100385},
																																											alternatives: []interface{}{
																																												&litMatcher{
																																													pos:        position{line: 3089, col: 13, offset: 100385},
																																													val:        "\n",
																																													ignoreCase: false,
																																													want:       "\"\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 3089, col: 20, offset: 100392},
																																													val:        "\r\n",
																																													ignoreCase: false,
																																													want:       "\"\\r\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 3089, col: 29, offset: 100401},
																																													val:        "\r",
																																													ignoreCase: false,
																																													want:       "\"\\r\"",
																																												},
																																											},
																																										},
																																									},
																																									&notExpr{
																																										pos: position{line: 3093, col: 8, offset: 100474},
																																										expr: &anyMatcher{
																																											line: 3093, col: 9, offset: 100475,
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 772, col: 26, offset: 25125},
																																					run: (*parser).callonExtraListElement655,
																																					expr: &seqExpr{
																																						pos: position{line: 772, col: 26, offset: 25125},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 772, col: 26, offset: 25125},
																																								val:        "```",
																																								ignoreCase: false,
																																								want:       "\"```\"",
																																							},
																																							&labeledExpr{
																																								pos:   position{line: 772, col: 32, offset: 25131},
																																								label: "language",
																																								expr: &actionExpr{
																																									pos: position{line: 776, col: 13, offset: 25261},
																																									run: (*parser).callonExtraListElement659,
																																									expr: &oneOrMoreExpr{
																																										pos: position{line: 776, col: 14, offset: 25262},
																																										expr: &charClassMatcher{
																																											pos:        position{line: 776, col: 14, offset: 25262},
																																											val:        "[^\\r\\n` ]",
																																											chars:      []rune{'\r', '\n', '`', ' '},
																																											ignoreCase: false,
																																											inverted:   true,
																																										},
																																									},
																																								},
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 772, col: 52, offset: 25151},
																																								expr: &actionExpr{
																																									pos: position{line: 3080, col: 10, offset: 100200},
																																									run: (*parser).callonExtraListElement663,
																																									expr: &charClassMatcher{
																																										pos:        position{line: 3080, col: 11, offset: 100201},
																																										val:        "[ \\t]",
																																										chars:      []rune{' ', '\t'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&choiceExpr{
																																								pos: position{line: 3096, col: 8, offset: 100524},
																																								alternatives: []interface{}{
																																									&actionExpr{
																																										pos: position{line: 3089, col: 12, offset: 100384},
																																										run: (*parser).callonExtraListElement666,
																																										expr: &choiceExpr{
																																											pos: position{line: 3089, col: 13, offset: 100385},
																																											alternatives: []interface{}{
																																												&litMatcher{
																																													pos:        position{line: 3089, col: 13, offset: 100385},
																																													val:        "\n",
																																													ignoreCase: false,
																																													want:       "\"\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 3089, col: 20, offset: 100392},
																																													val:        "\r\n",
																																													ignoreCase: false,
																																													want:       "\"\\r\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 3089, col: 29, offset: 100401},
																																													val:        "\r",
																																													ignoreCase: false,
																																													want:       "\"\\r\"",
																																												},
																																											},
																																										},
																																									},
																																									&notExpr{
																																										pos: position{line: 3093, col: 8, offset: 100474},
																																										expr: &anyMatcher{
																																											line: 3093, col: 9, offset: 100475,
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 766, col: 5, offset: 24884},
																																					run: (*parser).callonExtraListElement673,
																																					expr: &seqExpr{
																																						pos: position{line: 766, col: 5, offset: 24884},
																																						exprs: []interface{}{
																																							&labeledExpr{
																																								pos:   position{line: 766, col: 5, offset: 24884},
																																								label: "delimiter",
																																								expr: &actionExpr{
																																									pos: position{line: 766, col: 16, offset: 24895},
																																									run: (*parser).callonExtraListElement676,
																																									expr: &seqExpr{
																																										pos: position{line: 766, col: 16, offset: 24895},
																																										exprs: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 766, col: 16, offset: 24895},
																																												val:        "```",
																																												ignoreCase: false,
																																												want:       "\"```\"",
																																											},
																																											&zeroOrMoreExpr{
																																												pos: position{line: 766, col: 22, offset: 24901},
																																												expr: &litMatcher{
																																													pos:        position{line: 766, col: 22, offset: 24901},
																																													val:        "`",
																																													ignoreCase: false,
																																													want:       "\"`\"",
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 768, col: 8, offset: 24985},
																																								expr: &actionExpr{
																																									pos: position{line: 3080, col: 10, offset: 100200},
																																									run: (*parser).callonExtraListElement682,
																																									expr: &charClassMatcher{
																																										pos:        position{line: 3080, col: 11, offset: 100201},
																																										val:        "[ \\t]",
																																										chars:      []rune{' ', '\t'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&choiceExpr{
																																								pos: position{line: 3096, col: 8, offset: 100524},
																																								alternatives: []interface{}{
																																									&actionExpr{
																																										pos: position{line: 3089, col: 12, offset: 100384},
																																										run: (*parser).callonExtraListElement685,
																																										expr: &choiceExpr{
																																											pos: position{line: 3089, col: 13, offset: 100385},
																																											alternatives: []interface{}{
																																												&litMatcher{
																																													pos:        position{line: 3089, col: 13, offset: 100385},
																																													val:        "\n",
																																													ignoreCase: false,
																																													want:       "\"\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 3089, col: 20, offset: 100392},
																																													val:        "\r\n",
																																													ignoreCase: false,
																																													want:       "\"\\r\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 3089, col: 29, offset: 100401},
																																													val:        "\r",
																																													ignoreCase: false,
																																													want:       "\"\\r\"",
																																												},
																																											},
																																										},
																																									},
																																									&notExpr{
																																										pos: position{line: 3093, col: 8, offset: 100474},
																																										expr: &anyMatcher{
																																											line: 3093, col: 9, offset: 100475,
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 781, col: 5, offset: 25421},
																																					run: (*parser).callonExtraListElement692,
																																					expr: &seqExpr{
																																						pos: position{line: 781, col: 5, offset: 25421},
																																						exprs: []interface{}{
																																							&labeledExpr{
																																								pos:   position{line: 781, col: 5, offset: 25421},
																																								label: "delimiter",
																																								expr: &actionExpr{
																																									pos: position{line: 781, col: 16, offset: 25432},
																																									run: (*parser).callonExtraListElement695,
																																									expr: &seqExpr{
																																										pos: position{line: 781, col: 16, offset: 25432},
																																										exprs: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 781, col: 16, offset: 25432},
																																												val:        "----",
																																												ignoreCase: false,
																																												want:       "\"----\"",
																																											},
																																											&zeroOrMoreExpr{
																																												pos: position{line: 781, col: 23, offset: 25439},
																																												expr: &litMatcher{
																																													pos:        position{line: 781, col: 23, offset: 25439},
																																													val:        "-",
																																													ignoreCase: false,
																																													want:       "\"-\"",
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 783, col: 8, offset: 25523},
																																								expr: &actionExpr{
																																									pos: position{line: 3080, col: 10, offset: 100200},
																																									run: (*parser).callonExtraListElement701,
																																									expr: &charClassMatcher{
																																										pos:        position{line: 3080, col: 11, offset: 100201},
																																										val:        "[ \\t]",
																																										chars:      []rune{' ', '\t'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&choiceExpr{
																																								pos: position{line: 3096, col: 8, offset: 100524},
																																								alternatives: []interface{}{
																																									&actionExpr{
																																										pos: position{line: 3089, col: 12, offset: 100384},
																																										run: (*parser).callonExtraListElement704,
																																										expr: &choiceExpr{
																																											pos: position{line: 3089, col: 13, offset: 100385},
																																											alternatives: []interface{}{
																																												&litMatcher{
																																													pos:        position{line: 3089, col: 13, offset: 100385},
																																													val:        "\n",
																																													ignoreCase: false,
																																													want:       "\"\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 3089, col: 20, offset: 100392},
																																													val:        "\r\n",
																																													ignoreCase: false,
																																													want:       "\"\\r\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 3089, col: 29, offset: 100401},
																																													val:        "\r",
																																													ignoreCase: false,
																																													want:       "\"\\r\"",
																																												},
																																											},
																																										},
																																									},
																																									&notExpr{
																																										pos: position{line: 3093, col: 8, offset: 100474},
																																										expr: &anyMatcher{
																																											line: 3093, col: 9, offset: 100475,
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 788, col: 5, offset: 25669},
																																					run: (*parser).callonExtraListElement711,
																																					expr: &seqExpr{
																																						pos: position{line: 788, col: 5, offset: 25669},
																																						exprs: []interface{}{
																																							&labeledExpr{
																																								pos:   position{line: 788, col: 5, offset: 25669},
																																								label: "delimiter",
																																								expr: &actionExpr{
																																									pos: position{line: 788, col: 16, offset: 25680},
																																									run: (*parser).callonExtraListElement714,
																																									expr: &seqExpr{
																																										pos: position{line: 788, col: 16, offset: 25680},
																																										exprs: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 788, col: 16, offset: 25680},
																																												val:        "....",
																																												ignoreCase: false,
																																												want:       "\"....\"",
																																											},
																																											&zeroOrMoreExpr{
																																												pos: position{line: 788, col: 23, offset: 25687},
																																												expr: &litMatcher{
																																													pos:        position{line: 788, col: 23, offset: 25687},
																																													val:        ".",
																																													ignoreCase: false,
																																													want:       "\".\"",
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 790, col: 8, offset: 25771},
																																								expr: &actionExpr{
																																									pos: position{line: 3080, col: 10, offset: 100200},
																																									run: (*parser).callonExtraListElement720,
																																									expr: &charClassMatcher{
																																										pos:        position{line: 3080, col: 11, offset: 100201},
																																										val:        "[ \\t]",
																																										chars:      []rune{' ', '\t'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&choiceExpr{
																																								pos: position{line: 3096, col: 8, offset: 100524},
																																								alternatives: []interface{}{
																																									&actionExpr{
																																										pos: position{line: 3089, col: 12, offset: 100384},
																																										run: (*parser).callonExtraListElement723,
																																										expr: &choiceExpr{
																																											pos: position{line: 3089, col: 13, offset: 100385},
																																											alternatives: []interface{}{
																																												&litMatcher{
																																													pos:        position{line: 3089, col: 13, offset: 100385},
																																													val:        "\n",
																																													ignoreCase: false,
																																													want:       "\"\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 3089, col: 20, offset: 100392},
																																													val:        "\r\n",
																																													ignoreCase: false,
																																													want:       "\"\\r\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 3089, col: 29, offset: 100401},
																																													val:        "\r",
																																													ignoreCase: false,
																																													want:       "\"\\r\"",
																																												},
																																											},
																																										},
																																									},
																																									&notExpr{
																																										pos: position{line: 3093, col: 8, offset: 100474},
																																										expr: &anyMatcher{
																																											line: 3093, col: 9, offset: 100475,
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 795, col: 5, offset: 25921},
																																					run: (*parser).callonExtraListElement730,
																																					expr: &seqExpr{
																																						pos: position{line: 795, col: 5, offset: 25921},
																																						exprs: []interface{}{
																																							&labeledExpr{
																																								pos:   position{line: 795, col: 5, offset: 25921},
																																								label: "delimiter",
																																								expr: &actionExpr{
																																									pos: position{line: 795, col: 16, offset: 25932},
																																									run: (*parser).callonExtraListElement733,
																																									expr: &seqExpr{
																																										pos: position{line: 795, col: 16, offset: 25932},
																																										exprs: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 795, col: 16, offset: 25932},
																																												val:        "++++",
																																												ignoreCase: false,
																																												want:       "\"++++\"",
																																											},
																																											&zeroOrMoreExpr{
																																												pos: position{line: 795, col: 23, offset: 25939},
																																												expr: &litMatcher{
																																													pos:        position{line: 795, col: 23, offset: 25939},
																																													val:        "+",
																																													ignoreCase: false,
																																													want:       "\"+\"",
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 797, col: 8, offset: 26023},
																																								expr: &actionExpr{
																																									pos: position{line: 3080, col: 10, offset: 100200},
																																									run: (*parser).callonExtraListElement739,
																																									expr: &charClassMatcher{
																																										pos:        position{line: 3080, col: 11, offset: 100201},
																																										val:        "[ \\t]",
																																										chars:      []rune{' ', '\t'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&choiceExpr{
																																								pos: position{line: 3096, col: 8, offset: 100524},
																																								alternatives: []interface{}{
																																									&actionExpr{
																																										pos: position{line: 3089, col: 12, offset: 100384},
																																										run: (*parser).callonExtraListElement742,
																																										expr: &choiceExpr{
																																											pos: position{line: 3089, col: 13, offset: 100385},
																																											alternatives: []interface{}{
																																												&litMatcher{
																																													pos:        position{line: 3089, col: 13, offset: 100385},
																																													val:        "\n",
																																													ignoreCase: false,
																																													want:       "\"\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 3089, col: 20, offset: 100392},
																																													val:        "\r\n",
																																													ignoreCase: false,
																																													want:       "\"\\r\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 3089, col: 29, offset: 100401},
																																													val:        "\r",
																																													ignoreCase: false,
																																													want:       "\"\\r\"",
																																												},
																																											},
																																										},
																																									},
																																									&notExpr{
																																										pos: position{line: 3093, col: 8, offset: 100474},
																																										expr: &anyMatcher{
																																											line: 3093, col: 9, offset: 100475,
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 802, col: 5, offset: 26171},
																																					run: (*parser).callonExtraListElement749,
																																					expr: &seqExpr{
																																						pos: position{line: 802, col: 5, offset: 26171},
																																						exprs: []interface{}{
																																							&labeledExpr{
																																								pos:   position{line: 802, col: 5, offset: 26171},
																																								label: "delimiter",
																																								expr: &actionExpr{
																																									pos: position{line: 802, col: 16, offset: 26182},
																																									run: (*parser).callonExtraListElement752,
																																									expr: &seqExpr{
																																										pos: position{line: 802, col: 16, offset: 26182},
																																										exprs: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 802, col: 16, offset: 26182},
																																												val:        "____",
																																												ignoreCase: false,
																																												want:       "\"____\"",
																																											},
																																											&zeroOrMoreExpr{
																																												pos: position{line: 802, col: 23, offset: 26189},
																																												expr: &litMatcher{
																																													pos:        position{line: 802, col: 23, offset: 26189},
																																													val:        "_",
																																													ignoreCase: false,
																																													want:       "\"_\"",
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 804, col: 8, offset: 26273},
																																								expr: &actionExpr{
																																									pos: position{line: 3080, col: 10, offset: 100200},
																																									run: (*parser).callonExtraListElement758,
																																									expr: &charClassMatcher{
																																										pos:        position{line: 3080, col: 11, offset: 100201},
																																										val:        "[ \\t]",
																																										chars:      []rune{' ', '\t'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&choiceExpr{
																																								pos: position{line: 3096, col: 8, offset: 100524},
																																								alternatives: []interface{}{
																																									&actionExpr{
																																										pos: position{line: 3089, col: 12, offset: 100384},
																																										run: (*parser).callonExtraListElement761,
																																										expr: &choiceExpr{
																																											pos: position{line: 3089, col: 13, offset: 100385},
																																											alternatives: []interface{}{
																																												&litMatcher{
																																													pos:        position{line: 3089, col: 13, offset: 100385},
																																													val:        "\n",
																																													ignoreCase: false,
																																													want:       "\"\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 3089, col: 20, offset: 100392},
																																													val:        "\r\n",
																																													ignoreCase: false,
																																													want:       "\"\\r\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 3089, col: 29, offset: 100401},
																																													val:        "\r",
																																													ignoreCase: false,
																																													want:       "\"\\r\"",
																																												},
																																											},
																																										},
																																									},
																																									&notExpr{
																																										pos: position{line: 3093, col: 8, offset: 100474},
																																										expr: &anyMatcher{
																																											line: 3093, col: 9, offset: 100475,
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 809, col: 5, offset: 26417},
																																					run: (*parser).callonExtraListElement768,
																																					expr: &seqExpr{
																																						pos: position{line: 809, col: 5, offset: 26417},
																																						exprs: []interface{}{
																																							&labeledExpr{
																																								pos:   position{line: 809, col: 5, offset: 26417},
																																								label: "delimiter",
																																								expr: &actionExpr{
																																									pos: position{line: 809, col: 16, offset: 26428},
																																									run: (*parser).callonExtraListElement771,
																																									expr: &seqExpr{
																																										pos: position{line: 809, col: 16, offset: 26428},
																																										exprs: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 809, col: 16, offset: 26428},
																																												val:        "****",
																																												ignoreCase: false,
																																												want:       "\"****\"",
																																											},
																																											&zeroOrMoreExpr{
																																												pos: position{line: 809, col: 23, offset: 26435},
																																												expr: &litMatcher{
																																													pos:        position{line: 809, col: 23, offset: 26435},
																																													val:        "*",
																																													ignoreCase: false,
																																													want:       "\"*\"",
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 811, col: 8, offset: 26519},
																																								expr: &actionExpr{
																																									pos: position{line: 3080, col: 10, offset: 100200},
																																									run: (*parser).callonExtraListElement777,
																																									expr: &charClassMatcher{
																																										pos:        position{line: 3080, col: 11, offset: 100201},
																																										val:        "[ \\t]",
																																										chars:      []rune{' ', '\t'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&choiceExpr{
																																								pos: position{line: 3096, col: 8, offset: 100524},
																																								alternatives: []interface{}{
																																									&actionExpr{
																																										pos: position{line: 3089, col: 12, offset: 100384},
																																										run: (*parser).callonExtraListElement780,
																																										expr: &choiceExpr{
																																											pos: position{line: 3089, col: 13, offset: 100385},
																																											alternatives: []interface{}{
																																												&litMatcher{
																																													pos:        position{line: 3089, col: 13, offset: 100385},
																																													val:        "\n",
																																													ignoreCase: false,
																																													want:       "\"\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 3089, col: 20, offset: 100392},
																																													val:        "\r\n",
																																													ignoreCase: false,
																																													want:       "\"\\r\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 3089, col: 29, offset: 100401},
																																													val:        "\r",
																																													ignoreCase: false,
																																													want:       "\"\\r\"",
																																												},
																																											},
																																										},
																																									},
																																									&notExpr{
																																										pos: position{line: 3093, col: 8, offset: 100474},
																																										expr: &anyMatcher{
																																											line: 3093, col: 9, offset: 100475,
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																													&labeledExpr{
																														pos:   position{line: 1566, col: 9, offset: 51406},
																														label: "content",
																														expr: &actionExpr{
																															pos: position{line: 1566, col: 18, offset: 51415},
																															run: (*parser).callonExtraListElement788,
																															expr: &oneOrMoreExpr{
																																pos: position{line: 1566, col: 18, offset: 51415},
																																expr: &charClassMatcher{
																																	pos:        position{line: 1566, col: 18, offset: 51415},
																																	val:        "[^\\r\\n]",
																																	chars:      []rune{'\r', '\n'},
																																	ignoreCase: false,
																																	inverted:   true,
																																},
																															},
																														},
																													},
																													&choiceExpr{
																														pos: position{line: 3096, col: 8, offset: 100524},
																														alternatives: []interface{}{
																															&actionExpr{
																																pos: position{line: 3089, col: 12, offset: 100384},
																																run: (*parser).callonExtraListElement792,
																																expr: &choiceExpr{
																																	pos: position{line: 3089, col: 13, offset: 100385},
																																	alternatives: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 3089, col: 13, offset: 100385},
																																			val:        "\n",
																																			ignoreCase: false,
																																			want:       "\"\\n\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 3089, col: 20, offset: 100392},
																																			val:        "\r\n",
																																			ignoreCase: false,
																																			want:       "\"\\r\\n\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 3089, col: 29, offset: 100401},
																																			val:        "\r",
																																			ignoreCase: false,
																																			want:       "\"\\r\"",
																																		},
																																	},
																																},
																															},
																															&notExpr{
																																pos: position{line: 3093, col: 8, offset: 100474},
																																expr: &anyMatcher{
																																	line: 3093, col: 9, offset: 100475,
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1769, col: 9, offset: 58006},
																				run: (*parser).callonExtraListElement799,
																				expr: &seqExpr{
																					pos: position{line: 1769, col: 9, offset: 58006},
																					exprs: []interface{}{
																						&actionExpr{
																							pos: position{line: 3084, col: 11, offset: 100267},
																							run: (*parser).callonExtraListElement801,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 3084, col: 11, offset: 100267},
																								expr: &charClassMatcher{
																									pos:        position{line: 3084, col: 12, offset: 100268},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 1770, col: 9, offset: 58058},
																							label: "content",
																							expr: &actionExpr{
																								pos: position{line: 1770, col: 18, offset: 58067},
																								run: (*parser).callonExtraListElement805,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 1770, col: 18, offset: 58067},
																									expr: &charClassMatcher{
																										pos:        position{line: 1770, col: 18, offset: 58067},
																										val:        "[^\\r\\n]",
																										chars:      []rune{'\r', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 3096, col: 8, offset: 100524},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 3089, col: 12, offset: 100384},
																									run: (*parser).callonExtraListElement809,
																									expr: &choiceExpr{
																										pos: position{line: 3089, col: 13, offset: 100385},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 3089, col: 13, offset: 100385},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 3089, col: 20, offset: 100392},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 3089, col: 29, offset: 100401},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 3093, col: 8, offset: 100474},
																									expr: &anyMatcher{
																										line: 3093, col: 9, offset: 100475,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1528, col: 13, offset: 49992},
										run: (*parser).callonExtraListElement816,
										expr: &seqExpr{
											pos: position{line: 1528, col: 13, offset: 49992},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1528, col: 13, offset: 49992},
													label: "attributes",
													expr: &oneOrMoreExpr{
														pos: position{line: 1528, col: 24, offset: 50003},
														expr: &ruleRefExpr{
															pos:  position{line: 1528, col: 25, offset: 50004},
															name: "BlockAttributes",
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1529, col: 13, offset: 50035},
													label: "element",
													expr: &actionExpr{
														pos: position{line: 1733, col: 5, offset: 56929},
														run: (*parser).callonExtraListElement822,
														expr: &seqExpr{
															pos: position{line: 1733, col: 5, offset: 56929},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1733, col: 5, offset: 56929},
																	label: "term",
																	expr: &actionExpr{
																		pos: position{line: 1741, col: 5, offset: 57188},
																		run: (*parser).callonExtraListElement825,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 1741, col: 5, offset: 57188},
																			expr: &seqExpr{
																				pos: position{line: 1741, col: 6, offset: 57189},
																				exprs: []interface{}{
																					&notExpr{
																						pos: position{line: 1741, col: 6, offset: 57189},
																						expr: &actionExpr{
																							pos: position{line: 1746, col: 5, offset: 57339},
																							run: (*parser).callonExtraListElement829,
																							expr: &seqExpr{
																								pos: position{line: 1746, col: 5, offset: 57339},
																								exprs: []interface{}{
																									&labeledExpr{
																										pos:   position{line: 1746, col: 5, offset: 57339},
																										label: "separator",
																										expr: &actionExpr{
																											pos: position{line: 1746, col: 16, offset: 57350},
																											run: (*parser).callonExtraListElement832,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 1746, col: 16, offset: 57350},
																												expr: &litMatcher{
																													pos:        position{line: 1746, col: 17, offset: 57351},
																													val:        ":",
																													ignoreCase: false,
																													want:       "\":\"",
																												},
																											},
																										},
																									},
																									&andCodeExpr{
																										pos: position{line: 1749, col: 5, offset: 57408},
																										run: (*parser).callonExtraListElement835,
																									},
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 1741, col: 35, offset: 57218},
																						expr: &choiceExpr{
																							pos: position{line: 3096, col: 8, offset: 100524},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 3089, col: 12, offset: 100384},
																									run: (*parser).callonExtraListElement838,
																									expr: &choiceExpr{
																										pos: position{line: 3089, col: 13, offset: 100385},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 3089, col: 13, offset: 100385},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 3089, col: 20, offset: 100392},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 3089, col: 29, offset: 100401},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 3093, col: 8, offset: 100474},
																									expr: &anyMatcher{
																										line: 3093, col: 9, offset: 100475,
																									},
																								},
																							},
																						},
																					},
																					&anyMatcher{
																						line: 1741, col: 40, offset: 57223,
																					},
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1734, col: 5, offset: 56964},
																	label: "separator",
																	expr: &actionExpr{
																		pos: position{line: 1746, col: 5, offset: 57339},
																		run: (*parser).callonExtraListElement847,
																		expr: &seqExpr{
																			pos: position{line: 1746, col: 5, offset: 57339},
																			exprs: []interface{}{
																				&labeledExpr{
																					pos:   position{line: 1746, col: 5, offset: 57339},
																					label: "separator",
																					expr: &actionExpr{
																						pos: position{line: 1746, col: 16, offset: 57350},
																						run: (*parser).callonExtraListElement850,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 1746, col: 16, offset: 57350},
																							expr: &litMatcher{
																								pos:        position{line: 1746, col: 17, offset: 57351},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																						},
																					},
																				},
																				&andCodeExpr{
																					pos: position{line: 1749, col: 5, offset: 57408},
																					run: (*parser).callonExtraListElement853,
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1735, col: 5, offset: 57009},
																	label: "description",
																	expr: &choiceExpr{
																		pos: position{line: 1757, col: 5, offset: 57658},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 1759, col: 9, offset: 57723},
																				run: (*parser).callonExtraListElement856,
																				expr: &seqExpr{
																					pos: position{line: 1759, col: 9, offset: 57723},
																					exprs: []interface{}{
																						&zeroOrMoreExpr{
																							pos: position{line: 1759, col: 9, offset: 57723},
																							expr: &actionExpr{
																								pos: position{line: 3080, col: 10, offset: 100200},
																								run: (*parser).callonExtraListElement859,
																								expr: &charClassMatcher{
																									pos:        position{line: 3080, col: 11, offset: 100201},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 3096, col: 8, offset: 100524},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 3089, col: 12, offset: 100384},
																									run: (*parser).callonExtraListElement862,
																									expr: &choiceExpr{
																										pos: position{line: 3089, col: 13, offset: 100385},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 3089, col: 13, offset: 100385},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 3089, col: 20, offset: 100392},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 3089, col: 29, offset: 100401},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 3093, col: 8, offset: 100474},
																									expr: &anyMatcher{
																										line: 3093, col: 9, offset: 100475,
																									},
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 1760, col: 9, offset: 57743},
																							expr: &actionExpr{
																								pos: position{line: 690, col: 14, offset: 22312},
																								run: (*parser).callonExtraListElement870,
																								expr: &seqExpr{
																									pos: position{line: 690, col: 14, offset: 22312},
																									exprs: []interface{}{
																										&notExpr{
																											pos: position{line: 690, col: 14, offset: 22312},
																											expr: &notExpr{
																												pos: position{line: 3093, col: 8, offset: 100474},
																												expr: &anyMatcher{
																													line: 3093, col: 9, offset: 100475,
																												},
																											},
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 690, col: 19, offset: 22317},
																											expr: &actionExpr{
																												pos: position{line: 3080, col: 10, offset: 100200},
																												run: (*parser).callonExtraListElement876,
																												expr: &charClassMatcher{
																													pos:        position{line: 3080, col: 11, offset: 100201},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 3096, col: 8, offset: 100524},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 3089, col: 12, offset: 100384},
																													run: (*parser).callonExtraListElement879,
																													expr: &choiceExpr{
																														pos: position{line: 3089, col: 13, offset: 100385},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 3089, col: 13, offset: 100385},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 3089, col: 20, offset: 100392},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 3089, col: 29, offset: 100401},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 3093, col: 8, offset: 100474},
																													expr: &anyMatcher{
																														line: 3093, col: 9, offset: 100475,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 1761, col: 9, offset: 57763},
																							label: "content",
																							expr: &zeroOrOneExpr{
																								pos: position{line: 1761, col: 17, offset: 57771},
																								expr: &choiceExpr{
																									pos: position{line: 1555, col: 5, offset: 51005},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 1555, col: 5, offset: 51005},
																											run: (*parser).callonExtraListElement889,
																											expr: &actionExpr{
																												pos: position{line: 2770, col: 22, offset: 90863},
																												run: (*parser).callonExtraListElement890,
																												expr: &seqExpr{
																													pos: position{line: 2770, col: 22, offset: 90863},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 2775, col: 31, offset: 91084},
																															val:        "//",
																															ignoreCase: false,
																															want:       "\"//\"",
																														},
																														&notExpr{
																															pos: position{line: 2775, col: 36, offset: 91089},
																															expr: &litMatcher{
																																pos:        position{line: 2775, col: 37, offset: 91090},
																																val:        "//",
																																ignoreCase: false,
																																want:       "\"//\"",
																															},
																														},
																														&labeledExpr{
																															pos:   position{line: 2770, col: 49, offset: 90890},
																															label: "content",
																															expr: &actionExpr{
																																pos: position{line: 2777, col: 29, offset: 91125},
																																run: (*parser).callonExtraListElement896,
																																expr: &zeroOrMoreExpr{
																																	pos: position{line: 2777, col: 29, offset: 91125},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 2777, col: 29, offset: 91125},
																																		val:        "[^\\r\\n]",
																																		chars:      []rune{'\r', '\n'},
																																		ignoreCase: false,
																																		inverted:   true,
																																	},
																																},
																															},
																														},
																														&choiceExpr{
																															pos: position{line: 3096, col: 8, offset: 100524},
																															alternatives: []interface{}{
																																&actionExpr{
																																	pos: position{line: 3089, col: 12, offset: 100384},
																																	run: (*parser).callonExtraListElement900,
																																	expr: &choiceExpr{
																																		pos: position{line: 3089, col: 13, offset: 100385},
																																		alternatives: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 3089, col: 13, offset: 100385},
																																				val:        "\n",
																																				ignoreCase: false,
																																				want:       "\"\\n\"",
																																			},
																																			&litMatcher{
																																				pos:        position{line: 3089, col: 20, offset: 100392},
																																				val:        "\r\n",
																																				ignoreCase: false,
																																				want:       "\"\\r\\n\"",
																																			},
																																			&litMatcher{
																																				pos:        position{line: 3089, col: 29, offset: 100401},
																																				val:        "\r",
																																				ignoreCase: false,
																																				want:       "\"\\r\"",
																																			},
																																		},
																																	},
																																},
																																&notExpr{
																																	pos: position{line: 3093, col: 8, offset: 100474},
																																	expr: &anyMatcher{
																																		line: 3093, col: 9, offset: 100475,
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																										&actionExpr{
																											pos: position{line: 1559, col: 9, offset: 51158},
																											run: (*parser).callonExtraListElement907,
																											expr: &seqExpr{
																												pos: position{line: 1559, col: 9, offset: 51158},
																												exprs: []interface{}{
																													&notExpr{
																														pos: position{line: 1559, col: 9, offset: 51158},
																														expr: &actionExpr{
																															pos: position{line: 690, col: 14, offset: 22312},
																															run: (*parser).callonExtraListElement910,
																															expr: &seqExpr{
																																pos: position{line: 690, col: 14, offset: 22312},
																																exprs: []interface{}{
																																	&notExpr{
																																		pos: position{line: 690, col: 14, offset: 22312},
																																		expr: &notExpr{
																																			pos: position{line: 3093, col: 8, offset: 100474},
																																			expr: &anyMatcher{
																																				line: 3093, col: 9, offset: 100475,
																																			},
																																		},
																																	},
																																	&zeroOrMoreExpr{
																																		pos: position{line: 690, col: 19, offset: 22317},
																																		expr: &actionExpr{
																																			pos: position{line: 3080, col: 10, offset: 100200},
																																			run: (*parser).callonExtraListElement916,
																																			expr: &charClassMatcher{
																																				pos:        position{line: 3080, col: 11, offset: 100201},
																																				val:        "[ \\t]",
																																				chars:      []rune{' ', '\t'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																	&choiceExpr{
																																		pos: position{line: 3096, col: 8, offset: 100524},
																																		alternatives: []interface{}{
																																			&actionExpr{
																																				pos: position{line: 3089, col: 12, offset: 100384},
																																				run: (*parser).callonExtraListElement919,
																																				expr: &choiceExpr{
																																					pos: position{line: 3089, col: 13, offset: 100385},
																																					alternatives: []interface{}{
																																						&litMatcher{
																																							pos:        position{line: 3089, col: 13, offset: 100385},
																																							val:        "\n",
																																							ignoreCase: false,
																																							want:       "\"\\n\"",
																																						},
																																						&litMatcher{
																																							pos:        position{line: 3089, col: 20, offset: 100392},
																																							val:        "\r\n",
																																							ignoreCase: false,
																																							want:       "\"\\r\\n\"",
																																						},
																																						&litMatcher{
																																							pos:        position{line: 3089, col: 29, offset: 100401},
																																							val:        "\r",
																																							ignoreCase: false,
																																							want:       "\"\\r\"",
																																						},
																																					},
																																				},
																																			},
																																			&notExpr{
																																				pos: position{line: 3093, col: 8, offset: 100474},
																																				expr: &anyMatcher{
																																					line: 3093, col: 9, offset: 100475,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																													&notExpr{
																														pos: position{line: 1560, col: 9, offset: 51177},
																														expr: &seqExpr{
																															pos: position{line: 1593, col: 34, offset: 52137},
																															exprs: []interface{}{
																																&litMatcher{
																																	pos:        position{line: 1593, col: 34, offset: 52137},
																																	val:        "+",
																																	ignoreCase: false,
																																	want:       "\"+\"",
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 1593, col: 38, offset: 52141},
																																	expr: &actionExpr{
																																		pos: position{line: 3080, col: 10, offset: 100200},
																																		run: (*parser).callonExtraListElement930,
																																		expr: &charClassMatcher{
																																			pos:        position{line: 3080, col: 11, offset: 100201},
																																			val:        "[ \\t]",
																																			chars:      []rune{' ', '\t'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 3089, col: 12, offset: 100384},
																																	run: (*parser).callonExtraListElement932,
																																	expr: &choiceExpr{
																																		pos: position{line: 3089, col: 13, offset: 100385},
																																		alternatives: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 3089, col: 13, offset: 100385},
																																				val:        "\n",
																																				ignoreCase: false,
																																				want:       "\"\\n\"",
																																			},
																																			&litMatcher{
																																				pos:        position{line: 3089, col: 20, offset: 100392},
																																				val:        "\r\n",
																																				ignoreCase: false,
																																				want:       "\"\\r\\n\"",
																																			},
																																			&litMatcher{
																																				pos:        position{line: 3089, col: 29, offset: 100401},
																																				val:        "\r",
																																				ignoreCase: false,
																																				want:       "\"\\r\"",
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																													&notExpr{
																														pos: position{line: 1561, col: 9, offset: 51216},
																														expr: &actionExpr{
																															pos: position{line: 1641, col: 5, offset: 53611},
																															run: (*parser).callonExtraListElement938,
																															expr: &seqExpr{
																																pos: position{line: 1641, col: 5, offset: 53611},
																																exprs: []interface{}{
																																	&zeroOrMoreExpr{
																																		pos: position{line: 1641, col: 5, offset: 53611},
																																		expr: &actionExpr{
																																			pos: position{line: 3080, col: 10, offset: 100200},
																																			run: (*parser).callonExtraListElement941,
																																			expr: &charClassMatcher{
																																				pos:        position{line: 3080, col: 11, offset: 100201},
																																				val:        "[ \\t]",
																																				chars:      []rune{' ', '\t'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 1641, col: 12, offset: 53618},
																																		label: "prefix",
																																		expr: &choiceExpr{
																																			pos: position{line: 1643, col: 9, offset: 53681},
																																			alternatives: []interface{}{
																																				&actionExpr{
																																					pos: position{line: 1643, col: 9, offset: 53681},
																																					run: (*parser).callonExtraListElement945,
																																					expr: &seqExpr{
																																						pos: position{line: 1643, col: 9, offset: 53681},
																																						exprs: []interface{}{
																																							&labeledExpr{
																																								pos:   position{line: 1643, col: 9, offset: 53681},
																																								label: "depth",
																																								expr: &actionExpr{
																																									pos: position{line: 1643, col: 16, offset: 53688},
																																									run: (*parser).callonExtraListElement948,
																																									expr: &oneOrMoreExpr{
																																										pos: position{line: 1643, col: 16, offset: 53688},
																																										expr: &litMatcher{
																																											pos:        position{line: 1643, col: 17, offset: 53689},
																																											val:        ".",
																																											ignoreCase: false,
																																											want:       "\".\"",
																																										},
																																									},
																																								},
																																							},
																																							&andCodeExpr{
																																								pos: position{line: 1647, col: 9, offset: 53789},
																																								run: (*parser).callonExtraListElement951,
																																							},
																																						},
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 1666, col: 11, offset: 54506},
																																					run: (*parser).callonExtraListElement952,
																																					expr: &seqExpr{
																																						pos: position{line: 1666, col: 11, offset: 54506},
																																						exprs: []interface{}{
																																							&oneOrMoreExpr{
																																								pos: position{line: 1666, col: 11, offset: 54506},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 1666, col: 12, offset: 54507},
																																									val:        "[0-9]",
																																									ranges:     []rune{'0', '9'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																							&litMatcher{
																																								pos:        position{line: 1666, col: 20, offset: 54515},
																																								val:        ".",
																																								ignoreCase: false,
																																								want:       "\".\"",
																																							},
																																						},
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 1668, col: 13, offset: 54632},
																																					run: (*parser).callonExtraListElement957,
																																					expr: &seqExpr{
																																						pos: position{line: 1668, col: 13, offset: 54632},
																																						exprs: []interface{}{
																																							&charClassMatcher{
																																								pos:        position{line: 1668, col: 14, offset: 54633},
																																								val:        "[a-z]",
																																								ranges:     []rune{'a', 'z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																							&litMatcher{
																																								pos:        position{line: 1668, col: 21, offset: 54640},
																																								val:        ".",
																																								ignoreCase: false,
																																								want:       "\".\"",
																																							},
																																						},
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 1670, col: 13, offset: 54760},
																																					run: (*parser).callonExtraListElement961,
																																					expr: &seqExpr{
																																						pos: position{line: 1670, col: 13, offset: 54760},
																																						exprs: []interface{}{
																																							&charClassMatcher{
																																								pos:        position{line: 1670, col: 14, offset: 54761},
																																								val:        "[A-Z]",
																																								ranges:     []rune{'A', 'Z'},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																							&litMatcher{
																																								pos:        position{line: 1670, col: 21, offset: 54768},
																																								val:        ".",
																																								ignoreCase: false,
																																								want:       "\".\"",
																																							},
																																						},
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 1672, col: 13, offset: 54888},
																																					run: (*parser).callonExtraListElement965,
																																					expr: &seqExpr{
																																						pos: position{line: 1672, col: 13, offset: 54888},
																																						exprs: []interface{}{
																																							&oneOrMoreExpr{
																																								pos: position{line: 1672, col: 13, offset: 54888},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 1672, col: 14, offset: 54889},
																																									val:        "[ivxdlcm]",
																																									chars:      []rune{'i', 'v', 'x', 'd', 'l', 'c', 'm'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																							&litMatcher{
																																								pos:        position{line: 1672, col: 26, offset: 54901},
																																								val:        ")",
																																								ignoreCase: false,
																																								want:       "\")\"",
																																							},
																																						},
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 1674, col: 13, offset: 55021},
																																					run: (*parser).callonExtraListElement970,
																																					expr: &seqExpr{
																																						pos: position{line: 1674, col: 13, offset: 55021},
																																						exprs: []interface{}{
																																							&oneOrMoreExpr{
																																								pos: position{line: 1674, col: 13, offset: 55021},
																																								expr: &charClassMatcher{
																																									pos:        position{line: 1674, col: 14, offset: 55022},
																																									val:        "[IVXDLCM]",
																																									chars:      []rune{'I', 'V', 'X', 'D', 'L', 'C', 'M'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																							&litMatcher{
																																								pos:        position{line: 1674, col: 26, offset: 55034},
																																								val:        ")",
																																								ignoreCase: false,
																																								want:       "\")\"",
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&actionExpr{
																																		pos: position{line: 3084, col: 11, offset: 100267},
																																		run: (*parser).callonExtraListElement975,
																																		expr: &oneOrMoreExpr{
																																			pos: position{line: 3084, col: 11, offset: 100267},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 3084, col: 12, offset: 100268},
																																				val:        "[ \\t]",
																																				chars:      []rune{' ', '\t'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																													&notExpr{
																														pos: position{line: 1562, col: 9, offset: 51250},
																														expr: &actionExpr{
																															pos: position{line: 1691, col: 5, offset: 55573},
																															run: (*parser).callonExtraListElement979,
																															expr: &seqExpr{
																																pos: position{line: 1691, col: 5, offset: 55573},
																																exprs: []interface{}{
																																	&zeroOrMoreExpr{
																																		pos: position{line: 1691, col: 5, offset: 55573},
																																		expr: &actionExpr{
																																			pos: position{line: 3080, col: 10, offset: 100200},
																																			run: (*parser).callonExtraListElement982,
																																			expr: &charClassMatcher{
																																				pos:        position{line: 3080, col: 11, offset: 100201},
																																				val:        "[ \\t]",
																																				chars:      []rune{' ', '\t'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 1691, col: 12, offset: 55580},
																																		label: "prefix",
																																		expr: &choiceExpr{
																																			pos: position{line: 1691, col: 20, offset: 55588},
																																			alternatives: []interface{}{
																																				&actionExpr{
																																					pos: position{line: 1693, col: 9, offset: 55645},
																																					run: (*parser).callonExtraListElement986,
																																					expr: &seqExpr{
																																						pos: position{line: 1693, col: 9, offset: 55645},
																																						exprs: []interface{}{
																																							&labeledExpr{
																																								pos:   position{line: 1693, col: 9, offset: 55645},
																																								label: "depth",
																																								expr: &actionExpr{
																																									pos: position{line: 1693, col: 16, offset: 55652},
																																									run: (*parser).callonExtraListElement989,
																																									expr: &oneOrMoreExpr{
																																										pos: position{line: 1693, col: 16, offset: 55652},
																																										expr: &litMatcher{
																																											pos:        position{line: 1693, col: 17, offset: 55653},
																																											val:        "*",
																																											ignoreCase: false,
																																											want:       "\"*\"",
																																										},
																																									},
																																								},
																																							},
																																							&andCodeExpr{
																																								pos: position{line: 1697, col: 9, offset: 55753},
																																								run: (*parser).callonExtraListElement992,
																																							},
																																						},
																																					},
																																				},
																																				&labeledExpr{
																																					pos:   position{line: 1714, col: 14, offset: 56460},
																																					label: "depth",
																																					expr: &actionExpr{
																																						pos: position{line: 1714, col: 21, offset: 56467},
																																						run: (*parser).callonExtraListElement994,
																																						expr: &litMatcher{
																																							pos:        position{line: 1714, col: 22, offset: 56468},
																																							val:        "-",
																																							ignoreCase: false,
																																							want:       "\"-\"",
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&actionExpr{
																																		pos: position{line: 3084, col: 11, offset: 100267},
																																		run: (*parser).callonExtraListElement996,
																																		expr: &oneOrMoreExpr{
																																			pos: position{line: 3084, col: 11, offset: 100267},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 3084, col: 12, offset: 100268},
																																				val:        "[ \\t]",
																																				chars:      []rune{' ', '\t'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																													&notExpr{
																														pos: position{line: 1563, col: 9, offset: 51286},
																														expr: &actionExpr{
																															pos: position{line: 1797, col: 5, offset: 58810},
																															run: (*parser).callonExtraListElement1000,
																															expr: &seqExpr{
																																pos: position{line: 1797, col: 5, offset: 58810},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 1797, col: 5, offset: 58810},
																																		val:        "<",
																																		ignoreCase: false,
																																		want:       "\"<\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 1797, col: 9, offset: 58814},
																																		label: "ref",
																																		expr: &actionExpr{
																																			pos: position{line: 1797, col: 14, offset: 58819},
																																			run: (*parser).callonExtraListElement1004,
																																			expr: &oneOrMoreExpr{
																																				pos: position{line: 1797, col: 14, offset: 58819},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 1797, col: 14, offset: 58819},
																																					val:        "[0-9]",
																																					ranges:     []rune{'0', '9'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 1797, col: 62, offset: 58867},
																																		val:        ">",
																																		ignoreCase: false,
																																		want:       "\">\"",
																																	},
																																	&actionExpr{
																																		pos: position{line: 3084, col: 11, offset: 100267},
																																		run: (*parser).callonExtraListElement1008,
																																		expr: &oneOrMoreExpr{
																																			pos: position{line: 3084, col: 11, offset: 100267},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 3084, col: 12, offset: 100268},
																																				val:        "[ \\t]",
																																				chars:      []rune{' ', '\t'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																													&notExpr{
																														pos: position{line: 1564, col: 9, offset: 51320},
																														expr: &seqExpr{
																															pos: position{line: 1564, col: 11, offset: 51322},
																															exprs: []interface{}{
																																&actionExpr{
																																	pos: position{line: 1741, col: 5, offset: 57188},
																																	run: (*parser).callonExtraListElement1013,
																																	expr: &oneOrMoreExpr{
																																		pos: position{line: 1741, col: 5, offset: 57188},
																																		expr: &seqExpr{
																																			pos: position{line: 1741, col: 6, offset: 57189},
																																			exprs: []interface{}{
																																				&notExpr{
																																					pos: position{line: 1741, col: 6, offset: 57189},
																																					expr: &actionExpr{
																																						pos: position{line: 1746, col: 5, offset: 57339},
																																						run: (*parser).callonExtraListElement1017,
																																						expr: &seqExpr{
																																							pos: position{line: 1746, col: 5, offset: 57339},
																																							exprs: []interface{}{
																																								&labeledExpr{
																																									pos:   position{line: 1746, col: 5, offset: 57339},
																																									label: "separator",
																																									expr: &actionExpr{
																																										pos: position{line: 1746, col: 16, offset: 57350},
																																										run: (*parser).callonExtraListElement1020,
																																										expr: &oneOrMoreExpr{
																																											pos: position{line: 1746, col: 16, offset: 57350},
																																											expr: &litMatcher{
																																												pos:        position{line: 1746, col: 17, offset: 57351},
																																												val:        ":",
																																												ignoreCase: false,
																																												want:       "\":\"",
																																											},
																																										},
																																									},
																																								},
																																								&andCodeExpr{
																																									pos: position{line: 1749, col: 5, offset: 57408},
																																									run: (*parser).callonExtraListElement1023,
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&notExpr{
																																					pos: position{line: 1741, col: 35, offset: 57218},
																																					expr: &choiceExpr{
																																						pos: position{line: 3096, col: 8, offset: 100524},
																																						alternatives: []interface{}{
																																							&actionExpr{
																																								pos: position{line: 3089, col: 12, offset: 100384},
																																								run: (*parser).callonExtraListElement1026,
																																								expr: &choiceExpr{
																																									pos: position{line: 3089, col: 13, offset: 100385},
																																									alternatives: []interface{}{
																																										&litMatcher{
																																											pos:        position{line: 3089, col: 13, offset: 100385},
																																											val:        "\n",
																																											ignoreCase: false,
																																											want:       "\"\\n\"",
																																										},
																																										&litMatcher{
																																											pos:        position{line: 3089, col: 20, offset: 100392},
																																											val:        "\r\n",
																																											ignoreCase: false,
																																											want:       "\"\\r\\n\"",
																																										},
																																										&litMatcher{
																																											pos:        position{line: 3089, col: 29, offset: 100401},
																																											val:        "\r",
																																											ignoreCase: false,
																																											want:       "\"\\r\"",
																																										},
																																									},
																																								},
																																							},
																																							&notExpr{
																																								pos: position{line: 3093, col: 8, offset: 100474},
																																								expr: &anyMatcher{
																																									line: 3093, col: 9, offset: 100475,
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&anyMatcher{
																																					line: 1741, col: 40, offset: 57223,
																																				},
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 1746, col: 5, offset: 57339},
																																	run: (*parser).callonExtraListElement1034,
																																	expr: &seqExpr{
																																		pos: position{line: 1746, col: 5, offset: 57339},
																																		exprs: []interface{}{
																																			&labeledExpr{
																																				pos:   position{line: 1746, col: 5, offset: 57339},
																																				label: "separator",
																																				expr: &actionExpr{
																																					pos: position{line: 1746, col: 16, offset: 57350},
																																					run: (*parser).callonExtraListElement1037,
																																					expr: &oneOrMoreExpr{
																																						pos: position{line: 1746, col: 16, offset: 57350},
																																						expr: &litMatcher{
																																							pos:        position{line: 1746, col: 17, offset: 57351},
																																							val:        ":",
																																							ignoreCase: false,
																																							want:       "\":\"",
																																						},
																																					},
																																				},
																																			},
																																			&andCodeExpr{
																																				pos: position{line: 1749, col: 5, offset: 57408},
																																				run: (*parser).callonExtraListElement1040,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																													&notExpr{
																														pos: position{line: 1565, col: 9, offset: 51382},
																														expr: &actionExpr{
																															pos: position{line: 736, col: 5, offset: 23847},
																															run: (*parser).callonExtraListElement1042,
																															expr: &seqExpr{
																																pos: position{line: 736, col: 5, offset: 23847},
																																exprs: []interface{}{
																																	&notExpr{
																																		pos: position{line: 736, col: 5, offset: 23847},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2994, col: 13, offset: 97463},
																																			val:        "[0-9\\pL]",
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 737, col: 5, offset: 23877},
																																		label: "delimiter",
																																		expr: &choiceExpr{
																																			pos: position{line: 738, col: 9, offset: 23897},
																																			alternatives: []interface{}{
																																				&actionExpr{
																																					pos: position{line: 752, col: 5, offset: 24389},
																																					run: (*parser).callonExtraListElement1048,
																																					expr: &seqExpr{
																																						pos: position{line: 752, col: 5, offset: 24389},
																																						exprs: []interface{}{
																																							&labeledExpr{
																																								pos:   position{line: 752, col: 5, offset: 24389},
																																								label: "delimiter",
																																								expr: &actionExpr{
																																									pos: position{line: 752, col: 16, offset: 24400},
																																									run: (*parser).callonExtraListElement1051,
																																									expr: &seqExpr{
																																										pos: position{line: 752, col: 16, offset: 24400},
																																										exprs: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 752, col: 16, offset: 24400},
																																												val:        "////",
																																												ignoreCase: false,
																																												want:       "\"////\"",
																																											},
																																											&zeroOrMoreExpr{
																																												pos: position{line: 752, col: 23, offset: 24407},
																																												expr: &litMatcher{
																																													pos:        position{line: 752, col: 23, offset: 24407},
																																													val:        "/",
																																													ignoreCase: false,
																																													want:       "\"/\"",
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 754, col: 8, offset: 24491},
																																								expr: &actionExpr{
																																									pos: position{line: 3080, col: 10, offset: 100200},
																																									run: (*parser).callonExtraListElement1057,
																																									expr: &charClassMatcher{
																																										pos:        position{line: 3080, col: 11, offset: 100201},
																																										val:        "[ \\t]",
																																										chars:      []rune{' ', '\t'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&choiceExpr{
																																								pos: position{line: 3096, col: 8, offset: 100524},
																																								alternatives: []interface{}{
																																									&actionExpr{
																																										pos: position{line: 3089, col: 12, offset: 100384},
																																										run: (*parser).callonExtraListElement1060,
																																										expr: &choiceExpr{
																																											pos: position{line: 3089, col: 13, offset: 100385},
																																											alternatives: []interface{}{
																																												&litMatcher{
																																													pos:        position{line: 3089, col: 13, offset: 100385},
																																													val:        "\n",
																																													ignoreCase: false,
																																													want:       "\"\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 3089, col: 20, offset: 100392},
																																													val:        "\r\n",
																																													ignoreCase: false,
																																													want:       "\"\\r\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 3089, col: 29, offset: 100401},
																																													val:        "\r",
																																													ignoreCase: false,
																																													want:       "\"\\r\"",
																																												},
																																											},
																																										},
																																									},
																																									&notExpr{
																																										pos: position{line: 3093, col: 8, offset: 100474},
																																										expr: &anyMatcher{
																																											line: 3093, col: 9, offset: 100475,
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 759, col: 5, offset: 24637},
																																					run: (*parser).callonExtraListElement1067,
																																					expr: &seqExpr{
																																						pos: position{line: 759, col: 5, offset: 24637},
																																						exprs: []interface{}{
																																							&labeledExpr{
																																								pos:   position{line: 759, col: 5, offset: 24637},
																																								label: "delimiter",
																																								expr: &actionExpr{
																																									pos: position{line: 759, col: 16, offset: 24648},
																																									run: (*parser).callonExtraListElement1070,
																																									expr: &seqExpr{
																																										pos: position{line: 759, col: 16, offset: 24648},
																																										exprs: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 759, col: 16, offset: 24648},
																																												val:        "====",
																																												ignoreCase: false,
																																												want:       "\"====\"",
																																											},
																																											&zeroOrMoreExpr{
																																												pos: position{line: 759, col: 23, offset: 24655},
																																												expr: &litMatcher{
																																													pos:        position{line: 759, col: 23, offset: 24655},
																																													val:        "=",
																																													ignoreCase: false,
																																													want:       "\"=\"",
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 761, col: 8, offset: 24739},
																																								expr: &actionExpr{
																																									pos: position{line: 3080, col: 10, offset: 100200},
																																									run: (*parser).callonExtraListElement1076,
																																									expr: &charClassMatcher{
																																										pos:        position{line: 3080, col: 11, offset: 100201},
																																										val:        "[ \\t]",
																																										chars:      []rune{' ', '\t'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&choiceExpr{
																																								pos: position{line: 3096, col: 8, offset: 100524},
																																								alternatives: []interface{}{
																																									&actionExpr{
																																										pos: position{line: 3089, col: 12, offset: 100384},
																																										run: (*parser).callonExtraListElement1079,
																																										expr: &choiceExpr{
																																											pos: position{line: 3089, col: 13, offset: 100385},
																																											alternatives: []interface{}{
																																												&litMatcher{
																																													pos:        position{line: 3089, col: 13, offset: 100385},
																																													val:        "\n",
																																													ignoreCase: false,
																																													want:       "\"\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 3089, col: 20, offset: 100392},
																																													val:        "\r\n",
																																													ignoreCase: false,
																																													want:       "\"\\r\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 3089, col: 29, offset: 100401},
																																													val:        "\r",
																																													ignoreCase: false,
																																													want:       "\"\\r\"",
																																												},
																																											},
																																										},
																																									},
																																									&notExpr{
																																										pos: position{line: 3093, col: 8, offset: 100474},
																																										expr: &anyMatcher{
																																											line: 3093, col: 9, offset: 100475,
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 772, col: 26, offset: 25125},
																																					run: (*parser).callonExtraListElement1086,
																																					expr: &seqExpr{
																																						pos: position{line: 772, col: 26, offset: 25125},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 772, col: 26, offset: 25125},
																																								val:        "```",
																																								ignoreCase: false,
																																								want:       "\"```\"",
																																							},
																																							&labeledExpr{
																																								pos:   position{line: 772, col: 32, offset: 25131},
																																								label: "language",
																																								expr: &actionExpr{
																																									pos: position{line: 776, col: 13, offset: 25261},
																																									run: (*parser).callonExtraListElement1090,
																																									expr: &oneOrMoreExpr{
																																										pos: position{line: 776, col: 14, offset: 25262},
																																										expr: &charClassMatcher{
																																											pos:        position{line: 776, col: 14, offset: 25262},
																																											val:        "[^\\r\\n` ]",
																																											chars:      []rune{'\r', '\n', '`', ' '},
																																											ignoreCase: false,
																																											inverted:   true,
																																										},
																																									},
																																								},
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 772, col: 52, offset: 25151},
																																								expr: &actionExpr{
																																									pos: position{line: 3080, col: 10, offset: 100200},
																																									run: (*parser).callonExtraListElement1094,
																																									expr: &charClassMatcher{
																																										pos:        position{line: 3080, col: 11, offset: 100201},
																																										val:        "[ \\t]",
																																										chars:      []rune{' ', '\t'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&choiceExpr{
																																								pos: position{line: 3096, col: 8, offset: 100524},
																																								alternatives: []interface{}{
																																									&actionExpr{
																																										pos: position{line: 3089, col: 12, offset: 100384},
																																										run: (*parser).callonExtraListElement1097,
																																										expr: &choiceExpr{
																																											pos: position{line: 3089, col: 13, offset: 100385},
																																											alternatives: []interface{}{
																																												&litMatcher{
																																													pos:        position{line: 3089, col: 13, offset: 100385},
																																													val:        "\n",
																																													ignoreCase: false,
																																													want:       "\"\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 3089, col: 20, offset: 100392},
																																													val:        "\r\n",
																																													ignoreCase: false,
																																													want:       "\"\\r\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 3089, col: 29, offset: 100401},
																																													val:        "\r",
																																													ignoreCase: false,
																																													want:       "\"\\r\"",
																																												},
																																											},
																																										},
																																									},
																																									&notExpr{
																																										pos: position{line: 3093, col: 8, offset: 100474},
																																										expr: &anyMatcher{
																																											line: 3093, col: 9, offset: 100475,
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 766, col: 5, offset: 24884},
																																					run: (*parser).callonExtraListElement1104,
																																					expr: &seqExpr{
																																						pos: position{line: 766, col: 5, offset: 24884},
																																						exprs: []interface{}{
																																							&labeledExpr{
																																								pos:   position{line: 766, col: 5, offset: 24884},
																																								label: "delimiter",
																																								expr: &actionExpr{
																																									pos: position{line: 766, col: 16, offset: 24895},
																																									run: (*parser).callonExtraListElement1107,
																																									expr: &seqExpr{
																																										pos: position{line: 766, col: 16, offset: 24895},
																																										exprs: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 766, col: 16, offset: 24895},
																																												val:        "```",
																																												ignoreCase: false,
																																												want:       "\"```\"",
																																											},
																																											&zeroOrMoreExpr{
																																												pos: position{line: 766, col: 22, offset: 24901},
																																												expr: &litMatcher{
																																													pos:        position{line: 766, col: 22, offset: 24901},
																																													val:        "`",
																																													ignoreCase: false,
																																													want:       "\"`\"",
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 768, col: 8, offset: 24985},
																																								expr: &actionExpr{
																																									pos: position{line: 3080, col: 10, offset: 100200},
																																									run: (*parser).callonExtraListElement1113,
																																									expr: &charClassMatcher{
																																										pos:        position{line: 3080, col: 11, offset: 100201},
																																										val:        "[ \\t]",
																																										chars:      []rune{' ', '\t'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&choiceExpr{
																																								pos: position{line: 3096, col: 8, offset: 100524},
																																								alternatives: []interface{}{
																																									&actionExpr{
																																										pos: position{line: 3089, col: 12, offset: 100384},
																																										run: (*parser).callonExtraListElement1116,
																																										expr: &choiceExpr{
																																											pos: position{line: 3089, col: 13, offset: 100385},
																																											alternatives: []interface{}{
																																												&litMatcher{
																																													pos:        position{line: 3089, col: 13, offset: 100385},
																																													val:        "\n",
																																													ignoreCase: false,
																																													want:       "\"\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 3089, col: 20, offset: 100392},
																																													val:        "\r\n",
																																													ignoreCase: false,
																																													want:       "\"\\r\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 3089, col: 29, offset: 100401},
																																													val:        "\r",
																																													ignoreCase: false,
																																													want:       "\"\\r\"",
																																												},
																																											},
																																										},
																																									},
																																									&notExpr{
																																										pos: position{line: 3093, col: 8, offset: 100474},
																																										expr: &anyMatcher{
																																											line: 3093, col: 9, offset: 100475,
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 781, col: 5, offset: 25421},
																																					run: (*parser).callonExtraListElement1123,
																																					expr: &seqExpr{
																																						pos: position{line: 781, col: 5, offset: 25421},
																																						exprs: []interface{}{
																																							&labeledExpr{
																																								pos:   position{line: 781, col: 5, offset: 25421},
																																								label: "delimiter",
																																								expr: &actionExpr{
																																									pos: position{line: 781, col: 16, offset: 25432},
																																									run: (*parser).callonExtraListElement1126,
																																									expr: &seqExpr{
																																										pos: position{line: 781, col: 16, offset: 25432},
																																										exprs: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 781, col: 16, offset: 25432},
																																												val:        "----",
																																												ignoreCase: false,
																																												want:       "\"----\"",
																																											},
																																											&zeroOrMoreExpr{
																																												pos: position{line: 781, col: 23, offset: 25439},
																																												expr: &litMatcher{
																																													pos:        position{line: 781, col: 23, offset: 25439},
																																													val:        "-",
																																													ignoreCase: false,
																																													want:       "\"-\"",
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 783, col: 8, offset: 25523},
																																								expr: &actionExpr{
																																									pos: position{line: 3080, col: 10, offset: 100200},
																																									run: (*parser).callonExtraListElement1132,
																																									expr: &charClassMatcher{
																																										pos:        position{line: 3080, col: 11, offset: 100201},
																																										val:        "[ \\t]",
																																										chars:      []rune{' ', '\t'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&choiceExpr{
																																								pos: position{line: 3096, col: 8, offset: 100524},
																																								alternatives: []interface{}{
																																									&actionExpr{
																																										pos: position{line: 3089, col: 12, offset: 100384},
																																										run: (*parser).callonExtraListElement1135,
																																										expr: &choiceExpr{
																																											pos: position{line: 3089, col: 13, offset: 100385},
																																											alternatives: []interface{}{
																																												&litMatcher{
																																													pos:        position{line: 3089, col: 13, offset: 100385},
																																													val:        "\n",
																																													ignoreCase: false,
																																													want:       "\"\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 3089, col: 20, offset: 100392},
																																													val:        "\r\n",
																																													ignoreCase: false,
																																													want:       "\"\\r\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 3089, col: 29, offset: 100401},
																																													val:        "\r",
																																													ignoreCase: false,
																																													want:       "\"\\r\"",
																																												},
																																											},
																																										},
																																									},
																																									&notExpr{
																																										pos: position{line: 3093, col: 8, offset: 100474},
																																										expr: &anyMatcher{
																																											line: 3093, col: 9, offset: 100475,
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 788, col: 5, offset: 25669},
																																					run: (*parser).callonExtraListElement1142,
																																					expr: &seqExpr{
																																						pos: position{line: 788, col: 5, offset: 25669},
																																						exprs: []interface{}{
																																							&labeledExpr{
																																								pos:   position{line: 788, col: 5, offset: 25669},
																																								label: "delimiter",
																																								expr: &actionExpr{
																																									pos: position{line: 788, col: 16, offset: 25680},
																																									run: (*parser).callonExtraListElement1145,
																																									expr: &seqExpr{
																																										pos: position{line: 788, col: 16, offset: 25680},
																																										exprs: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 788, col: 16, offset: 25680},
																																												val:        "....",
																																												ignoreCase: false,
																																												want:       "\"....\"",
																																											},
																																											&zeroOrMoreExpr{
																																												pos: position{line: 788, col: 23, offset: 25687},
																																												expr: &litMatcher{
																																													pos:        position{line: 788, col: 23, offset: 25687},
																																													val:        ".",
																																													ignoreCase: false,
																																													want:       "\".\"",
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 790, col: 8, offset: 25771},
																																								expr: &actionExpr{
																																									pos: position{line: 3080, col: 10, offset: 100200},
																																									run: (*parser).callonExtraListElement1151,
																																									expr: &charClassMatcher{
																																										pos:        position{line: 3080, col: 11, offset: 100201},
																																										val:        "[ \\t]",
																																										chars:      []rune{' ', '\t'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&choiceExpr{
																																								pos: position{line: 3096, col: 8, offset: 100524},
																																								alternatives: []interface{}{
																																									&actionExpr{
																																										pos: position{line: 3089, col: 12, offset: 100384},
																																										run: (*parser).callonExtraListElement1154,
																																										expr: &choiceExpr{
																																											pos: position{line: 3089, col: 13, offset: 100385},
																																											alternatives: []interface{}{
																																												&litMatcher{
																																													pos:        position{line: 3089, col: 13, offset: 100385},
																																													val:        "\n",
																																													ignoreCase: false,
																																													want:       "\"\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 3089, col: 20, offset: 100392},
																																													val:        "\r\n",
																																													ignoreCase: false,
																																													want:       "\"\\r\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 3089, col: 29, offset: 100401},
																																													val:        "\r",
																																													ignoreCase: false,
																																													want:       "\"\\r\"",
																																												},
																																											},
																																										},
																																									},
																																									&notExpr{
																																										pos: position{line: 3093, col: 8, offset: 100474},
																																										expr: &anyMatcher{
																																											line: 3093, col: 9, offset: 100475,
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 795, col: 5, offset: 25921},
																																					run: (*parser).callonExtraListElement1161,
																																					expr: &seqExpr{
																																						pos: position{line: 795, col: 5, offset: 25921},
																																						exprs: []interface{}{
																																							&labeledExpr{
																																								pos:   position{line: 795, col: 5, offset: 25921},
																																								label: "delimiter",
																																								expr: &actionExpr{
																																									pos: position{line: 795, col: 16, offset: 25932},
																																									run: (*parser).callonExtraListElement1164,
																																									expr: &seqExpr{
																																										pos: position{line: 795, col: 16, offset: 25932},
																																										exprs: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 795, col: 16, offset: 25932},
																																												val:        "++++",
																																												ignoreCase: false,
																																												want:       "\"++++\"",
																																											},
																																											&zeroOrMoreExpr{
																																												pos: position{line: 795, col: 23, offset: 25939},
																																												expr: &litMatcher{
																																													pos:        position{line: 795, col: 23, offset: 25939},
																																													val:        "+",
																																													ignoreCase: false,
																																													want:       "\"+\"",
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 797, col: 8, offset: 26023},
																																								expr: &actionExpr{
																																									pos: position{line: 3080, col: 10, offset: 100200},
																																									run: (*parser).callonExtraListElement1170,
																																									expr: &charClassMatcher{
																																										pos:        position{line: 3080, col: 11, offset: 100201},
																																										val:        "[ \\t]",
																																										chars:      []rune{' ', '\t'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&choiceExpr{
																																								pos: position{line: 3096, col: 8, offset: 100524},
																																								alternatives: []interface{}{
																																									&actionExpr{
																																										pos: position{line: 3089, col: 12, offset: 100384},
																																										run: (*parser).callonExtraListElement1173,
																																										expr: &choiceExpr{
																																											pos: position{line: 3089, col: 13, offset: 100385},
																																											alternatives: []interface{}{
																																												&litMatcher{
																																													pos:        position{line: 3089, col: 13, offset: 100385},
																																													val:        "\n",
																																													ignoreCase: false,
																																													want:       "\"\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 3089, col: 20, offset: 100392},
																																													val:        "\r\n",
																																													ignoreCase: false,
																																													want:       "\"\\r\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 3089, col: 29, offset: 100401},
																																													val:        "\r",
																																													ignoreCase: false,
																																													want:       "\"\\r\"",
																																												},
																																											},
																																										},
																																									},
																																									&notExpr{
																																										pos: position{line: 3093, col: 8, offset: 100474},
																																										expr: &anyMatcher{
																																											line: 3093, col: 9, offset: 100475,
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 802, col: 5, offset: 26171},
																																					run: (*parser).callonExtraListElement1180,
																																					expr: &seqExpr{
																																						pos: position{line: 802, col: 5, offset: 26171},
																																						exprs: []interface{}{
																																							&labeledExpr{
																																								pos:   position{line: 802, col: 5, offset: 26171},
																																								label: "delimiter",
																																								expr: &actionExpr{
																																									pos: position{line: 802, col: 16, offset: 26182},
																																									run: (*parser).callonExtraListElement1183,
																																									expr: &seqExpr{
																																										pos: position{line: 802, col: 16, offset: 26182},
																																										exprs: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 802, col: 16, offset: 26182},
																																												val:        "____",
																																												ignoreCase: false,
																																												want:       "\"____\"",
																																											},
																																											&zeroOrMoreExpr{
																																												pos: position{line: 802, col: 23, offset: 26189},
																																												expr: &litMatcher{
																																													pos:        position{line: 802, col: 23, offset: 26189},
																																													val:        "_",
																																													ignoreCase: false,
																																													want:       "\"_\"",
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 804, col: 8, offset: 26273},
																																								expr: &actionExpr{
																																									pos: position{line: 3080, col: 10, offset: 100200},
																																									run: (*parser).callonExtraListElement1189,
																																									expr: &charClassMatcher{
																																										pos:        position{line: 3080, col: 11, offset: 100201},
																																										val:        "[ \\t]",
																																										chars:      []rune{' ', '\t'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&choiceExpr{
																																								pos: position{line: 3096, col: 8, offset: 100524},
																																								alternatives: []interface{}{
																																									&actionExpr{
																																										pos: position{line: 3089, col: 12, offset: 100384},
																																										run: (*parser).callonExtraListElement1192,
																																										expr: &choiceExpr{
																																											pos: position{line: 3089, col: 13, offset: 100385},
																																											alternatives: []interface{}{
																																												&litMatcher{
																																													pos:        position{line: 3089, col: 13, offset: 100385},
																																													val:        "\n",
																																													ignoreCase: false,
																																													want:       "\"\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 3089, col: 20, offset: 100392},
																																													val:        "\r\n",
																																													ignoreCase: false,
																																													want:       "\"\\r\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 3089, col: 29, offset: 100401},
																																													val:        "\r",
																																													ignoreCase: false,
																																													want:       "\"\\r\"",
																																												},
																																											},
																																										},
																																									},
																																									&notExpr{
																																										pos: position{line: 3093, col: 8, offset: 100474},
																																										expr: &anyMatcher{
																																											line: 3093, col: 9, offset: 100475,
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																				&actionExpr{
																																					pos: position{line: 809, col: 5, offset: 26417},
																																					run: (*parser).callonExtraListElement1199,
																																					expr: &seqExpr{
																																						pos: position{line: 809, col: 5, offset: 26417},
																																						exprs: []interface{}{
																																							&labeledExpr{
																																								pos:   position{line: 809, col: 5, offset: 26417},
																																								label: "delimiter",
																																								expr: &actionExpr{
																																									pos: position{line: 809, col: 16, offset: 26428},
																																									run: (*parser).callonExtraListElement1202,
																																									expr: &seqExpr{
																																										pos: position{line: 809, col: 16, offset: 26428},
																																										exprs: []interface{}{
																																											&litMatcher{
																																												pos:        position{line: 809, col: 16, offset: 26428},
																																												val:        "****",
																																												ignoreCase: false,
																																												want:       "\"****\"",
																																											},
																																											&zeroOrMoreExpr{
																																												pos: position{line: 809, col: 23, offset: 26435},
																																												expr: &litMatcher{
																																													pos:        position{line: 809, col: 23, offset: 26435},
																																													val:        "*",
																																													ignoreCase: false,
																																													want:       "\"*\"",
																																												},
																																											},
																																										},
																																									},
																																								},
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 811, col: 8, offset: 26519},
																																								expr: &actionExpr{
																																									pos: position{line: 3080, col: 10, offset: 100200},
																																									run: (*parser).callonExtraListElement1208,
																																									expr: &charClassMatcher{
																																										pos:        position{line: 3080, col: 11, offset: 100201},
																																										val:        "[ \\t]",
																																										chars:      []rune{' ', '\t'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																							&choiceExpr{
																																								pos: position{line: 3096, col: 8, offset: 100524},
																																								alternatives: []interface{}{
																																									&actionExpr{
																																										pos: position{line: 3089, col: 12, offset: 100384},
																																										run: (*parser).callonExtraListElement1211,
																																										expr: &choiceExpr{
																																											pos: position{line: 3089, col: 13, offset: 100385},
																																											alternatives: []interface{}{
																																												&litMatcher{
																																													pos:        position{line: 3089, col: 13, offset: 100385},
																																													val:        "\n",
																																													ignoreCase: false,
																																													want:       "\"\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 3089, col: 20, offset: 100392},
																																													val:        "\r\n",
																																													ignoreCase: false,
																																													want:       "\"\\r\\n\"",
																																												},
																																												&litMatcher{
																																													pos:        position{line: 3089, col: 29, offset: 100401},
																																													val:        "\r",
																																													ignoreCase: false,
																																													want:       "\"\\r\"",
																																												},
																																											},
																																										},
																																									},
																																									&notExpr{
																																										pos: position{line: 3093, col: 8, offset: 100474},
																																										expr: &anyMatcher{
																																											line: 3093, col: 9, offset: 100475,
																																										},
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																													&labeledExpr{
																														pos:   position{line: 1566, col: 9, offset: 51406},
																														label: "content",
																														expr: &actionExpr{
																															pos: position{line: 1566, col: 18, offset: 51415},
																															run: (*parser).callonExtraListElement1219,
																															expr: &oneOrMoreExpr{
																																pos: position{line: 1566, col: 18, offset: 51415},
																																expr: &charClassMatcher{
																																	pos:        position{line: 1566, col: 18, offset: 51415},
																																	val:        "[^\\r\\n]",
																																	chars:      []rune{'\r', '\n'},
																																	ignoreCase: false,
																																	inverted:   true,
																																},
																															},
																														},
																													},
																													&choiceExpr{
																														pos: position{line: 3096, col: 8, offset: 100524},
																														alternatives: []interface{}{
																															&actionExpr{
																																pos: position{line: 3089, col: 12, offset: 100384},
																																run: (*parser).callonExtraListElement1223,
																																expr: &choiceExpr{
																																	pos: position{line: 3089, col: 13, offset: 100385},
																																	alternatives: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 3089, col: 13, offset: 100385},
																																			val:        "\n",
																																			ignoreCase: false,
																																			want:       "\"\\n\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 3089, col: 20, offset: 100392},
																																			val:        "\r\n",
																																			ignoreCase: false,
																																			want:       "\"\\r\\n\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 3089, col: 29, offset: 100401},
																																			val:        "\r",
																																			ignoreCase: false,
																																			want:       "\"\\r\"",
																																		},
																																	},
																																},
																															},
																															&notExpr{
																																pos: position{line: 3093, col: 8, offset: 100474},
																																expr: &anyMatcher{
																																	line: 3093, col: 9, offset: 100475,
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1769, col: 9, offset: 58006},
																				run: (*parser).callonExtraListElement1230,
																				expr: &seqExpr{
																					pos: position{line: 1769, col: 9, offset: 58006},
																					exprs: []interface{}{
																						&actionExpr{
																							pos: position{line: 3084, col: 11, offset: 100267},
																							run: (*parser).callonExtraListElement1232,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 3084, col: 11, offset: 100267},
																								expr: &charClassMatcher{
																									pos:        position{line: 3084, col: 12, offset: 100268},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 1770, col: 9, offset: 58058},
																							label: "content",
																							expr: &actionExpr{
																								pos: position{line: 1770, col: 18, offset: 58067},
																								run: (*parser).callonExtraListElement1236,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 1770, col: 18, offset: 58067},
																									expr: &charClassMatcher{
																										pos:        position{line: 1770, col: 18, offset: 58067},
																										val:        "[^\\r\\n]",
																										chars:      []rune{'\r', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 3096, col: 8, offset: 100524},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 3089, col: 12, offset: 100384},
																									run: (*parser).callonExtraListElement1240,
																									expr: &choiceExpr{
																										pos: position{line: 3089, col: 13, offset: 100385},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 3089, col: 13, offset: 100385},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 3089, col: 20, offset: 100392},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 3089, col: 29, offset: 100401},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 3093, col: 8, offset: 100474},
																									expr: &anyMatcher{
																										line: 3093, col: 9, offset: 100475,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2770, col: 22, offset: 90863},
										run: (*parser).callonExtraListElement1247,
										expr: &seqExpr{
											pos: position{line: 2770, col: 22, offset: 90863},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 2775, col: 31, offset: 91084},
													val:        "//",
													ignoreCase: false,
													want:       "\"//\"",
												},
												&notExpr{
													pos: position{line: 2775, col: 36, offset: 91089},
													expr: &litMatcher{
														pos:        position{line: 2775, col: 37, offset: 91090},
														val:        "//",
														ignoreCase: false,
														want:       "\"//\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 2770, col: 49, offset: 90890},
													label: "content",
													expr: &actionExpr{
														pos: position{line: 2777, col: 29, offset: 91125},
														run: (*parser).callonExtraListElement1253,
														expr: &zeroOrMoreExpr{
															pos: position{line: 2777, col: 29, offset: 91125},
															expr: &charClassMatcher{
																pos:        position{line: 2777, col: 29, offset: 91125},
																val:        "[^\\r\\n]",
																chars:      []rune{'\r', '\n'},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 3096, col: 8, offset: 100524},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 3089, col: 12, offset: 100384},
															run: (*parser).callonExtraListElement1257,
															expr: &choiceExpr{
																pos: position{line: 3089, col: 13, offset: 100385},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 3089, col: 13, offset: 100385},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 3089, col: 20, offset: 100392},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 3089, col: 29, offset: 100401},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 3093, col: 8, offset: 100474},
															expr: &anyMatcher{
																line: 3093, col: 9, offset: 100475,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1533, col: 13, offset: 50191},
										run: (*parser).callonExtraListElement1264,
										expr: &seqExpr{
											pos: position{line: 1533, col: 13, offset: 50191},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 1533, col: 13, offset: 50191},
													expr: &actionExpr{
														pos: position{line: 690, col: 14, offset: 22312},
														run: (*parser).callonExtraListElement1267,
														expr: &seqExpr{
															pos: position{line: 690, col: 14, offset: 22312},
															exprs: []interface{}{
																&notExpr{
																	pos: position{line: 690, col: 14, offset: 22312},
																	expr: &notExpr{
																		pos: position{line: 3093, col: 8, offset: 100474},
																		expr: &anyMatcher{
																			line: 3093, col: 9, offset: 100475,
																		},
																	},
																},
																&zeroOrMoreExpr{
																	pos: position{line: 690, col: 19, offset: 22317},
																	expr: &actionExpr{
																		pos: position{line: 3080, col: 10, offset: 100200},
																		run: (*parser).callonExtraListElement1273,
																		expr: &charClassMatcher{
																			pos:        position{line: 3080, col: 11, offset: 100201},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 3096, col: 8, offset: 100524},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 3089, col: 12, offset: 100384},
																			run: (*parser).callonExtraListElement1276,
																			expr: &choiceExpr{
																				pos: position{line: 3089, col: 13, offset: 100385},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 3089, col: 13, offset: 100385},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 3089, col: 20, offset: 100392},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 3089, col: 29, offset: 100401},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 3093, col: 8, offset: 100474},
																			expr: &anyMatcher{
																				line: 3093, col: 9, offset: 100475,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1534, col: 13, offset: 50214},
													label: "attributes",
													expr: &zeroOrMoreExpr{
														pos: position{line: 1534, col: 24, offset: 50225},
														expr: &ruleRefExpr{
															pos:  position{line: 1534, col: 25, offset: 50226},
															name: "BlockAttributes",
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1535, col: 13, offset: 50257},
													label: "element",
													expr: &actionExpr{
														pos: position{line: 1876, col: 5, offset: 61417},
														run: (*parser).callonExtraListElement1287,
														expr: &seqExpr{
															pos: position{line: 1876, col: 5, offset: 61417},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1876, col: 5, offset: 61417},
																	label: "firstLine",
																	expr: &actionExpr{
																		pos: position{line: 1883, col: 5, offset: 61702},
																		run: (*parser).callonExtraListElement1290,
																		expr: &seqExpr{
																			pos: position{line: 1883, col: 5, offset: 61702},
																			exprs: []interface{}{
																				&labeledExpr{
																					pos:   position{line: 1883, col: 5, offset: 61702},
																					label: "content",
																					expr: &actionExpr{
																						pos: position{line: 1883, col: 14, offset: 61711},
																						run: (*parser).callonExtraListElement1293,
																						expr: &seqExpr{
																							pos: position{line: 1883, col: 14, offset: 61711},
																							exprs: []interface{}{
																								&actionExpr{
																									pos: position{line: 3084, col: 11, offset: 100267},
																									run: (*parser).callonExtraListElement1295,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 3084, col: 11, offset: 100267},
																										expr: &charClassMatcher{
																											pos:        position{line: 3084, col: 12, offset: 100268},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&oneOrMoreExpr{
																									pos: position{line: 1883, col: 21, offset: 61718},
																									expr: &charClassMatcher{
																										pos:        position{line: 1883, col: 21, offset: 61718},
																										val:        "[^\\r\\n]",
																										chars:      []rune{'\r', '\n'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																					},
																				},
																				&andCodeExpr{
																					pos: position{line: 1886, col: 5, offset: 61775},
																					run: (*parser).callonExtraListElement1300,
																				},
																				&choiceExpr{
																					pos: position{line: 3096, col: 8, offset: 100524},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 3089, col: 12, offset: 100384},
																							run: (*parser).callonExtraListElement1302,
																							expr: &choiceExpr{
																								pos: position{line: 3089, col: 13, offset: 100385},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 3089, col: 13, offset: 100385},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 3089, col: 20, offset: 100392},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 3089, col: 29, offset: 100401},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 3093, col: 8, offset: 100474},
																							expr: &anyMatcher{
																								line: 3093, col: 9, offset: 100475,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1877, col: 5, offset: 61458},
																	label: "otherLines",
																	expr: &zeroOrMoreExpr{
																		pos: position{line: 1877, col: 16, offset: 61469},
																		expr: &choiceExpr{
																			pos: position{line: 1877, col: 17, offset: 61470},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2770, col: 22, offset: 90863},
																					run: (*parser).callonExtraListElement1312,
																					expr: &seqExpr{
																						pos: position{line: 2770, col: 22, offset: 90863},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2775, col: 31, offset: 91084},
																								val:        "//",
																								ignoreCase: false,
																								want:       "\"//\"",
																							},
																							&notExpr{
																								pos: position{line: 2775, col: 36, offset: 91089},
																								expr: &litMatcher{
																									pos:        position{line: 2775, col: 37, offset: 91090},
																									val:        "//",
																									ignoreCase: false,
																									want:       "\"//\"",
																								},
																							},
																							&labeledExpr{
																								pos:   position{line: 2770, col: 49, offset: 90890},
																								label: "content",
																								expr: &actionExpr{
																									pos: position{line: 2777, col: 29, offset: 91125},
																									run: (*parser).callonExtraListElement1318,
																									expr: &zeroOrMoreExpr{
																										pos: position{line: 2777, col: 29, offset: 91125},
																										expr: &charClassMatcher{
																											pos:        position{line: 2777, col: 29, offset: 91125},
																											val:        "[^\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 3096, col: 8, offset: 100524},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 3089, col: 12, offset: 100384},
																										run: (*parser).callonExtraListElement1322,
																										expr: &choiceExpr{
																											pos: position{line: 3089, col: 13, offset: 100385},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 3089, col: 13, offset: 100385},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 3089, col: 20, offset: 100392},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 3089, col: 29, offset: 100401},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 3093, col: 8, offset: 100474},
																										expr: &anyMatcher{
																											line: 3093, col: 9, offset: 100475,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 1865, col: 5, offset: 61135},
																					run: (*parser).callonExtraListElement1329,
																					expr: &seqExpr{
																						pos: position{line: 1865, col: 5, offset: 61135},
																						exprs: []interface{}{
																							&labeledExpr{
																								pos:   position{line: 1865, col: 5, offset: 61135},
																								label: "content",
																								expr: &actionExpr{
																									pos: position{line: 1865, col: 14, offset: 61144},
																									run: (*parser).callonExtraListElement1332,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 1865, col: 14, offset: 61144},
																										expr: &charClassMatcher{
																											pos:        position{line: 1865, col: 14, offset: 61144},
																											val:        "[^\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																								},
																							},
																							&andCodeExpr{
																								pos: position{line: 1868, col: 5, offset: 61251},
																								run: (*parser).callonExtraListElement1335,
																							},
																							&choiceExpr{
																								pos: position{line: 3096, col: 8, offset: 100524},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 3089, col: 12, offset: 100384},
																										run: (*parser).callonExtraListElement1337,
																										expr: &choiceExpr{
																											pos: position{line: 3089, col: 13, offset: 100385},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 3089, col: 13, offset: 100385},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 3089, col: 20, offset: 100392},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 3089, col: 29, offset: 100401},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 3093, col: 8, offset: 100474},
																										expr: &anyMatcher{
																											line: 3093, col: 9, offset: 100475,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1547, col: 13, offset: 50804},
										run: (*parser).callonExtraListElement1344,
										expr: &labeledExpr{
											pos:   position{line: 1547, col: 13, offset: 50804},
											label: "element",
											expr: &choiceExpr{
												pos: position{line: 1555, col: 5, offset: 51005},
												alternatives: []interface{}{
													&actionExpr{
														pos: position{line: 1555, col: 5, offset: 51005},
														run: (*parser).callonExtraListElement1347,
														expr: &actionExpr{
															pos: position{line: 2770, col: 22, offset: 90863},
															run: (*parser).callonExtraListElement1348,
															expr: &seqExpr{
																pos: position{line: 2770, col: 22, offset: 90863},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2775, col: 31, offset: 91084},
																		val:        "//",
																		ignoreCase: false,
																		want:       "\"//\"",
																	},
																	&notExpr{
																		pos: position{line: 2775, col: 36, offset: 91089},
																		expr: &litMatcher{
																			pos:        position{line: 2775, col: 37, offset: 91090},
																			val:        "//",
																			ignoreCase: false,
																			want:       "\"//\"",
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 2770, col: 49, offset: 90890},
																		label: "content",
																		expr: &actionExpr{
																			pos: position{line: 2777, col: 29, offset: 91125},
																			run: (*parser).callonExtraListElement1354,
																			expr: &zeroOrMoreExpr{
																				pos: position{line: 2777, col: 29, offset: 91125},
																				expr: &charClassMatcher{
																					pos:        position{line: 2777, col: 29, offset: 91125},
																					val:        "[^\\r\\n]",
																					chars:      []rune{'\r', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 3096, col: 8, offset: 100524},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 3089, col: 12, offset: 100384},
																				run: (*parser).callonExtraListElement1358,
																				expr: &choiceExpr{
																					pos: position{line: 3089, col: 13, offset: 100385},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 3089, col: 13, offset: 100385},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 3089, col: 20, offset: 100392},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 3089, col: 29, offset: 100401},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3093, col: 8, offset: 100474},
																				expr: &anyMatcher{
																					line: 3093, col: 9, offset: 100475,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
													&actionExpr{
														pos: position{line: 1559, col: 9, offset: 51158},
														run: (*parser).callonExtraListElement1365,
														expr: &seqExpr{
															pos: position{line: 1559, col: 9, offset: 51158},
															exprs: []interface{}{
																&notExpr{
																	pos: position{line: 1559, col: 9, offset: 51158},
																	expr: &actionExpr{
																		pos: position{line: 690, col: 14, offset: 22312},
																		run: (*parser).callonExtraListElement1368,
																		expr: &seqExpr{
																			pos: position{line: 690, col: 14, offset: 22312},
																			exprs: []interface{}{
																				&notExpr{
																					pos: position{line: 690, col: 14, offset: 22312},
																					expr: &notExpr{
																						pos: position{line: 3093, col: 8, offset: 100474},
																						expr: &anyMatcher{
																							line: 3093, col: 9, offset: 100475,
																						},
																					},
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 690, col: 19, offset: 22317},
																					expr: &actionExpr{
																						pos: position{line: 3080, col: 10, offset: 100200},
																						run: (*parser).callonExtraListElement1374,
																						expr: &charClassMatcher{
																							pos:        position{line: 3080, col: 11, offset: 100201},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 3096, col: 8, offset: 100524},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 3089, col: 12, offset: 100384},
																							run: (*parser).callonExtraListElement1377,
																							expr: &choiceExpr{
																								pos: position{line: 3089, col: 13, offset: 100385},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 3089, col: 13, offset: 100385},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 3089, col: 20, offset: 100392},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 3089, col: 29, offset: 100401},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 3093, col: 8, offset: 100474},
																							expr: &anyMatcher{
																								line: 3093, col: 9, offset: 100475,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 1560, col: 9, offset: 51177},
																	expr: &seqExpr{
																		pos: position{line: 1593, col: 34, offset: 52137},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 1593, col: 34, offset: 52137},
																				val:        "+",
																				ignoreCase: false,
																				want:       "\"+\"",
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 1593, col: 38, offset: 52141},
																				expr: &actionExpr{
																					pos: position{line: 3080, col: 10, offset: 100200},
																					run: (*parser).callonExtraListElement1388,
																					expr: &charClassMatcher{
																						pos:        position{line: 3080, col: 11, offset: 100201},
																						val:        "[ \\t]",
																						chars:      []rune{' ', '\t'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 3089, col: 12, offset: 100384},
																				run: (*parser).callonExtraListElement1390,
																				expr: &choiceExpr{
																					pos: position{line: 3089, col: 13, offset: 100385},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 3089, col: 13, offset: 100385},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 3089, col: 20, offset: 100392},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 3089, col: 29, offset: 100401},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 1561, col: 9, offset: 51216},
																	expr: &actionExpr{
																		pos: position{line: 1641, col: 5, offset: 53611},
																		run: (*parser).callonExtraListElement1396,
																		expr: &seqExpr{
																			pos: position{line: 1641, col: 5, offset: 53611},
																			exprs: []interface{}{
																				&zeroOrMoreExpr{
																					pos: position{line: 1641, col: 5, offset: 53611},
																					expr: &actionExpr{
																						pos: position{line: 3080, col: 10, offset: 100200},
																						run: (*parser).callonExtraListElement1399,
																						expr: &charClassMatcher{
																							pos:        position{line: 3080, col: 11, offset: 100201},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 1641, col: 12, offset: 53618},
																					label: "prefix",
																					expr: &choiceExpr{
																						pos: position{line: 1643, col: 9, offset: 53681},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 1643, col: 9, offset: 53681},
																								run: (*parser).callonExtraListElement1403,
																								expr: &seqExpr{
																									pos: position{line: 1643, col: 9, offset: 53681},
																									exprs: []interface{}{
																										&labeledExpr{
																											pos:   position{line: 1643, col: 9, offset: 53681},
																											label: "depth",
																											expr: &actionExpr{
																												pos: position{line: 1643, col: 16, offset: 53688},
																												run: (*parser).callonExtraListElement1406,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 1643, col: 16, offset: 53688},
																													expr: &litMatcher{
																														pos:        position{line: 1643, col: 17, offset: 53689},
																														val:        ".",
																														ignoreCase: false,
																														want:       "\".\"",
																													},
																												},
																											},
																										},
																										&andCodeExpr{
																											pos: position{line: 1647, col: 9, offset: 53789},
																											run: (*parser).callonExtraListElement1409,
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 1666, col: 11, offset: 54506},
																								run: (*parser).callonExtraListElement1410,
																								expr: &seqExpr{
																									pos: position{line: 1666, col: 11, offset: 54506},
																									exprs: []interface{}{
																										&oneOrMoreExpr{
																											pos: position{line: 1666, col: 11, offset: 54506},
																											expr: &charClassMatcher{
																												pos:        position{line: 1666, col: 12, offset: 54507},
																												val:        "[0-9]",
																												ranges:     []rune{'0', '9'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 1666, col: 20, offset: 54515},
																											val:        ".",
																											ignoreCase: false,
																											want:       "\".\"",
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 1668, col: 13, offset: 54632},
																								run: (*parser).callonExtraListElement1415,
																								expr: &seqExpr{
																									pos: position{line: 1668, col: 13, offset: 54632},
																									exprs: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 1668, col: 14, offset: 54633},
																											val:        "[a-z]",
																											ranges:     []rune{'a', 'z'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&litMatcher{
																											pos:        position{line: 1668, col: 21, offset: 54640},
																											val:        ".",
																											ignoreCase: false,
																											want:       "\".\"",
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 1670, col: 13, offset: 54760},
																								run: (*parser).callonExtraListElement1419,
																								expr: &seqExpr{
																									pos: position{line: 1670, col: 13, offset: 54760},
																									exprs: []interface{}{
																										&charClassMatcher{
																											pos:        position{line: 1670, col: 14, offset: 54761},
																											val:        "[A-Z]",
																											ranges:     []rune{'A', 'Z'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																										&litMatcher{
																											pos:        position{line: 1670, col: 21, offset: 54768},
																											val:        ".",
																											ignoreCase: false,
																											want:       "\".\"",
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 1672, col: 13, offset: 54888},
																								run: (*parser).callonExtraListElement1423,
																								expr: &seqExpr{
																									pos: position{line: 1672, col: 13, offset: 54888},
																									exprs: []interface{}{
																										&oneOrMoreExpr{
																											pos: position{line: 1672, col: 13, offset: 54888},
																											expr: &charClassMatcher{
																												pos:        position{line: 1672, col: 14, offset: 54889},
																												val:        "[ivxdlcm]",
																												chars:      []rune{'i', 'v', 'x', 'd', 'l', 'c', 'm'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 1672, col: 26, offset: 54901},
																											val:        ")",
																											ignoreCase: false,
																											want:       "\")\"",
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 1674, col: 13, offset: 55021},
																								run: (*parser).callonExtraListElement1428,
																								expr: &seqExpr{
																									pos: position{line: 1674, col: 13, offset: 55021},
																									exprs: []interface{}{
																										&oneOrMoreExpr{
																											pos: position{line: 1674, col: 13, offset: 55021},
																											expr: &charClassMatcher{
																												pos:        position{line: 1674, col: 14, offset: 55022},
																												val:        "[IVXDLCM]",
																												chars:      []rune{'I', 'V', 'X', 'D', 'L', 'C', 'M'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 1674, col: 26, offset: 55034},
																											val:        ")",
																											ignoreCase: false,
																											want:       "\")\"",
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 3084, col: 11, offset: 100267},
																					run: (*parser).callonExtraListElement1433,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 3084, col: 11, offset: 100267},
																						expr: &charClassMatcher{
																							pos:        position{line: 3084, col: 12, offset: 100268},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 1562, col: 9, offset: 51250},
																	expr: &actionExpr{
																		pos: position{line: 1691, col: 5, offset: 55573},
																		run: (*parser).callonExtraListElement1437,
																		expr: &seqExpr{
																			pos: position{line: 1691, col: 5, offset: 55573},
																			exprs: []interface{}{
																				&zeroOrMoreExpr{
																					pos: position{line: 1691, col: 5, offset: 55573},
																					expr: &actionExpr{
																						pos: position{line: 3080, col: 10, offset: 100200},
																						run: (*parser).callonExtraListElement1440,
																						expr: &charClassMatcher{
																							pos:        position{line: 3080, col: 11, offset: 100201},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 1691, col: 12, offset: 55580},
																					label: "prefix",
																					expr: &choiceExpr{
																						pos: position{line: 1691, col: 20, offset: 55588},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 1693, col: 9, offset: 55645},
																								run: (*parser).callonExtraListElement1444,
																								expr: &seqExpr{
																									pos: position{line: 1693, col: 9, offset: 55645},
																									exprs: []interface{}{
																										&labeledExpr{
																											pos:   position{line: 1693, col: 9, offset: 55645},
																											label: "depth",
																											expr: &actionExpr{
																												pos: position{line: 1693, col: 16, offset: 55652},
																												run: (*parser).callonExtraListElement1447,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 1693, col: 16, offset: 55652},
																													expr: &litMatcher{
																														pos:        position{line: 1693, col: 17, offset: 55653},
																														val:        "*",
																														ignoreCase: false,
																														want:       "\"*\"",
																													},
																												},
																											},
																										},
																										&andCodeExpr{
																											pos: position{line: 1697, col: 9, offset: 55753},
																											run: (*parser).callonExtraListElement1450,
																										},
																									},
																								},
																							},
																							&labeledExpr{
																								pos:   position{line: 1714, col: 14, offset: 56460},
																								label: "depth",
																								expr: &actionExpr{
																									pos: position{line: 1714, col: 21, offset: 56467},
																									run: (*parser).callonExtraListElement1452,
																									expr: &litMatcher{
																										pos:        position{line: 1714, col: 22, offset: 56468},
																										val:        "-",
																										ignoreCase: false,
																										want:       "\"-\"",
																									},
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 3084, col: 11, offset: 100267},
																					run: (*parser).callonExtraListElement1454,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 3084, col: 11, offset: 100267},
																						expr: &charClassMatcher{
																							pos:        position{line: 3084, col: 12, offset: 100268},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 1563, col: 9, offset: 51286},
																	expr: &actionExpr{
																		pos: position{line: 1797, col: 5, offset: 58810},
																		run: (*parser).callonExtraListElement1458,
																		expr: &seqExpr{
																			pos: position{line: 1797, col: 5, offset: 58810},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 1797, col: 5, offset: 58810},
																					val:        "<",
																					ignoreCase: false,
																					want:       "\"<\"",
																				},
																				&labeledExpr{
																					pos:   position{line: 1797, col: 9, offset: 58814},
																					label: "ref",
																					expr: &actionExpr{
																						pos: position{line: 1797, col: 14, offset: 58819},
																						run: (*parser).callonExtraListElement1462,
																						expr: &oneOrMoreExpr{
																							pos: position{line: 1797, col: 14, offset: 58819},
																							expr: &charClassMatcher{
																								pos:        position{line: 1797, col: 14, offset: 58819},
																								val:        "[0-9]",
																								ranges:     []rune{'0', '9'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																				&litMatcher{
																					pos:        position{line: 1797, col: 62, offset: 58867},
																					val:        ">",
																					ignoreCase: false,
																					want:       "\">\"",
																				},
																				&actionExpr{
																					pos: position{line: 3084, col: 11, offset: 100267},
																					run: (*parser).callonExtraListElement1466,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 3084, col: 11, offset: 100267},
																						expr: &charClassMatcher{
																							pos:        position{line: 3084, col: 12, offset: 100268},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 1564, col: 9, offset: 51320},
																	expr: &seqExpr{
																		pos: position{line: 1564, col: 11, offset: 51322},
																		exprs: []interface{}{
																			&actionExpr{
																				pos: position{line: 1741, col: 5, offset: 57188},
																				run: (*parser).callonExtraListElement1471,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 1741, col: 5, offset: 57188},
																					expr: &seqExpr{
																						pos: position{line: 1741, col: 6, offset: 57189},
																						exprs: []interface{}{
																							&notExpr{
																								pos: position{line: 1741, col: 6, offset: 57189},
																								expr: &actionExpr{
																									pos: position{line: 1746, col: 5, offset: 57339},
																									run: (*parser).callonExtraListElement1475,
																									expr: &seqExpr{
																										pos: position{line: 1746, col: 5, offset: 57339},
																										exprs: []interface{}{
																											&labeledExpr{
																												pos:   position{line: 1746, col: 5, offset: 57339},
																												label: "separator",
																												expr: &actionExpr{
																													pos: position{line: 1746, col: 16, offset: 57350},
																													run: (*parser).callonExtraListElement1478,
																													expr: &oneOrMoreExpr{
																														pos: position{line: 1746, col: 16, offset: 57350},
																														expr: &litMatcher{
																															pos:        position{line: 1746, col: 17, offset: 57351},
																															val:        ":",
																															ignoreCase: false,
																															want:       "\":\"",
																														},
																													},
																												},
																											},
																											&andCodeExpr{
																												pos: position{line: 1749, col: 5, offset: 57408},
																												run: (*parser).callonExtraListElement1481,
																											},
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 1741, col: 35, offset: 57218},
																								expr: &choiceExpr{
																									pos: position{line: 3096, col: 8, offset: 100524},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 3089, col: 12, offset: 100384},
																											run: (*parser).callonExtraListElement1484,
																											expr: &choiceExpr{
																												pos: position{line: 3089, col: 13, offset: 100385},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 3089, col: 13, offset: 100385},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 3089, col: 20, offset: 100392},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 3089, col: 29, offset: 100401},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 3093, col: 8, offset: 100474},
																											expr: &anyMatcher{
																												line: 3093, col: 9, offset: 100475,
																											},
																										},
																									},
																								},
																							},
																							&anyMatcher{
																								line: 1741, col: 40, offset: 57223,
																							},
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1746, col: 5, offset: 57339},
																				run: (*parser).callonExtraListElement1492,
																				expr: &seqExpr{
																					pos: position{line: 1746, col: 5, offset: 57339},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 1746, col: 5, offset: 57339},
																							label: "separator",
																							expr: &actionExpr{
																								pos: position{line: 1746, col: 16, offset: 57350},
																								run: (*parser).callonExtraListElement1495,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 1746, col: 16, offset: 57350},
																									expr: &litMatcher{
																										pos:        position{line: 1746, col: 17, offset: 57351},
																										val:        ":",
																										ignoreCase: false,
																										want:       "\":\"",
																									},
																								},
																							},
																						},
																						&andCodeExpr{
																							pos: position{line: 1749, col: 5, offset: 57408},
																							run: (*parser).callonExtraListElement1498,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 1565, col: 9, offset: 51382},
																	expr: &actionExpr{
																		pos: position{line: 736, col: 5, offset: 23847},
																		run: (*parser).callonExtraListElement1500,
																		expr: &seqExpr{
																			pos: position{line: 736, col: 5, offset: 23847},
																			exprs: []interface{}{
																				&notExpr{
																					pos: position{line: 736, col: 5, offset: 23847},
																					expr: &charClassMatcher{
																						pos:        position{line: 2994, col: 13, offset: 97463},
																						val:        "[0-9\\pL]",
																						ranges:     []rune{'0', '9'},
																						classes:    []*unicode.RangeTable{rangeTable("L")},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&labeledExpr{
																					pos:   position{line: 737, col: 5, offset: 23877},
																					label: "delimiter",
																					expr: &choiceExpr{
																						pos: position{line: 738, col: 9, offset: 23897},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 752, col: 5, offset: 24389},
																								run: (*parser).callonExtraListElement1506,
																								expr: &seqExpr{
																									pos: position{line: 752, col: 5, offset: 24389},
																									exprs: []interface{}{
																										&labeledExpr{
																											pos:   position{line: 752, col: 5, offset: 24389},
																											label: "delimiter",
																											expr: &actionExpr{
																												pos: position{line: 752, col: 16, offset: 24400},
																												run: (*parser).callonExtraListElement1509,
																												expr: &seqExpr{
																													pos: position{line: 752, col: 16, offset: 24400},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 752, col: 16, offset: 24400},
																															val:        "////",
																															ignoreCase: false,
																															want:       "\"////\"",
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 752, col: 23, offset: 24407},
																															expr: &litMatcher{
																																pos:        position{line: 752, col: 23, offset: 24407},
																																val:        "/",
																																ignoreCase: false,
																																want:       "\"/\"",
																															},
																														},
																													},
																												},
																											},
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 754, col: 8, offset: 24491},
																											expr: &actionExpr{
																												pos: position{line: 3080, col: 10, offset: 100200},
																												run: (*parser).callonExtraListElement1515,
																												expr: &charClassMatcher{
																													pos:        position{line: 3080, col: 11, offset: 100201},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 3096, col: 8, offset: 100524},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 3089, col: 12, offset: 100384},
																													run: (*parser).callonExtraListElement1518,
																													expr: &choiceExpr{
																														pos: position{line: 3089, col: 13, offset: 100385},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 3089, col: 13, offset: 100385},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 3089, col: 20, offset: 100392},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 3089, col: 29, offset: 100401},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 3093, col: 8, offset: 100474},
																													expr: &anyMatcher{
																														line: 3093, col: 9, offset: 100475,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 759, col: 5, offset: 24637},
																								run: (*parser).callonExtraListElement1525,
																								expr: &seqExpr{
																									pos: position{line: 759, col: 5, offset: 24637},
																									exprs: []interface{}{
																										&labeledExpr{
																											pos:   position{line: 759, col: 5, offset: 24637},
																											label: "delimiter",
																											expr: &actionExpr{
																												pos: position{line: 759, col: 16, offset: 24648},
																												run: (*parser).callonExtraListElement1528,
																												expr: &seqExpr{
																													pos: position{line: 759, col: 16, offset: 24648},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 759, col: 16, offset: 24648},
																															val:        "====",
																															ignoreCase: false,
																															want:       "\"====\"",
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 759, col: 23, offset: 24655},
																															expr: &litMatcher{
																																pos:        position{line: 759, col: 23, offset: 24655},
																																val:        "=",
																																ignoreCase: false,
																																want:       "\"=\"",
																															},
																														},
																													},
																												},
																											},
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 761, col: 8, offset: 24739},
																											expr: &actionExpr{
																												pos: position{line: 3080, col: 10, offset: 100200},
																												run: (*parser).callonExtraListElement1534,
																												expr: &charClassMatcher{
																													pos:        position{line: 3080, col: 11, offset: 100201},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 3096, col: 8, offset: 100524},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 3089, col: 12, offset: 100384},
																													run: (*parser).callonExtraListElement1537,
																													expr: &choiceExpr{
																														pos: position{line: 3089, col: 13, offset: 100385},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 3089, col: 13, offset: 100385},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 3089, col: 20, offset: 100392},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 3089, col: 29, offset: 100401},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 3093, col: 8, offset: 100474},
																													expr: &anyMatcher{
																														line: 3093, col: 9, offset: 100475,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 772, col: 26, offset: 25125},
																								run: (*parser).callonExtraListElement1544,
																								expr: &seqExpr{
																									pos: position{line: 772, col: 26, offset: 25125},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 772, col: 26, offset: 25125},
																											val:        "```",
																											ignoreCase: false,
																											want:       "\"```\"",
																										},
																										&labeledExpr{
																											pos:   position{line: 772, col: 32, offset: 25131},
																											label: "language",
																											expr: &actionExpr{
																												pos: position{line: 776, col: 13, offset: 25261},
																												run: (*parser).callonExtraListElement1548,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 776, col: 14, offset: 25262},
																													expr: &charClassMatcher{
																														pos:        position{line: 776, col: 14, offset: 25262},
																														val:        "[^\\r\\n` ]",
																														chars:      []rune{'\r', '\n', '`', ' '},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 772, col: 52, offset: 25151},
																											expr: &actionExpr{
																												pos: position{line: 3080, col: 10, offset: 100200},
																												run: (*parser).callonExtraListElement1552,
																												expr: &charClassMatcher{
																													pos:        position{line: 3080, col: 11, offset: 100201},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 3096, col: 8, offset: 100524},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 3089, col: 12, offset: 100384},
																													run: (*parser).callonExtraListElement1555,
																													expr: &choiceExpr{
																														pos: position{line: 3089, col: 13, offset: 100385},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 3089, col: 13, offset: 100385},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 3089, col: 20, offset: 100392},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 3089, col: 29, offset: 100401},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 3093, col: 8, offset: 100474},
																													expr: &anyMatcher{
																														line: 3093, col: 9, offset: 100475,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 766, col: 5, offset: 24884},
																								run: (*parser).callonExtraListElement1562,
																								expr: &seqExpr{
																									pos: position{line: 766, col: 5, offset: 24884},
																									exprs: []interface{}{
																										&labeledExpr{
																											pos:   position{line: 766, col: 5, offset: 24884},
																											label: "delimiter",
																											expr: &actionExpr{
																												pos: position{line: 766, col: 16, offset: 24895},
																												run: (*parser).callonExtraListElement1565,
																												expr: &seqExpr{
																													pos: position{line: 766, col: 16, offset: 24895},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 766, col: 16, offset: 24895},
																															val:        "```",
																															ignoreCase: false,
																															want:       "\"```\"",
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 766, col: 22, offset: 24901},
																															expr: &litMatcher{
																																pos:        position{line: 766, col: 22, offset: 24901},
																																val:        "`",
																																ignoreCase: false,
																																want:       "\"`\"",
																															},
																														},
																													},
																												},
																											},
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 768, col: 8, offset: 24985},
																											expr: &actionExpr{
																												pos: position{line: 3080, col: 10, offset: 100200},
																												run: (*parser).callonExtraListElement1571,
																												expr: &charClassMatcher{
																													pos:        position{line: 3080, col: 11, offset: 100201},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 3096, col: 8, offset: 100524},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 3089, col: 12, offset: 100384},
																													run: (*parser).callonExtraListElement1574,
																													expr: &choiceExpr{
																														pos: position{line: 3089, col: 13, offset: 100385},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 3089, col: 13, offset: 100385},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 3089, col: 20, offset: 100392},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 3089, col: 29, offset: 100401},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 3093, col: 8, offset: 100474},
																													expr: &anyMatcher{
																														line: 3093, col: 9, offset: 100475,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 781, col: 5, offset: 25421},
																								run: (*parser).callonExtraListElement1581,
																								expr: &seqExpr{
																									pos: position{line: 781, col: 5, offset: 25421},
																									exprs: []interface{}{
																										&labeledExpr{
																											pos:   position{line: 781, col: 5, offset: 25421},
																											label: "delimiter",
																											expr: &actionExpr{
																												pos: position{line: 781, col: 16, offset: 25432},
																												run: (*parser).callonExtraListElement1584,
																												expr: &seqExpr{
																													pos: position{line: 781, col: 16, offset: 25432},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 781, col: 16, offset: 25432},
																															val:        "----",
																															ignoreCase: false,
																															want:       "\"----\"",
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 781, col: 23, offset: 25439},
																															expr: &litMatcher{
																																pos:        position{line: 781, col: 23, offset: 25439},
																																val:        "-",
																																ignoreCase: false,
																																want:       "\"-\"",
																															},
																														},
																													},
																												},
																											},
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 783, col: 8, offset: 25523},
																											expr: &actionExpr{
																												pos: position{line: 3080, col: 10, offset: 100200},
																												run: (*parser).callonExtraListElement1590,
																												expr: &charClassMatcher{
																													pos:        position{line: 3080, col: 11, offset: 100201},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 3096, col: 8, offset: 100524},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 3089, col: 12, offset: 100384},
																													run: (*parser).callonExtraListElement1593,
																													expr: &choiceExpr{
																														pos: position{line: 3089, col: 13, offset: 100385},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 3089, col: 13, offset: 100385},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 3089, col: 20, offset: 100392},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 3089, col: 29, offset: 100401},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 3093, col: 8, offset: 100474},
																													expr: &anyMatcher{
																														line: 3093, col: 9, offset: 100475,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 788, col: 5, offset: 25669},
																								run: (*parser).callonExtraListElement1600,
																								expr: &seqExpr{
																									pos: position{line: 788, col: 5, offset: 25669},
																									exprs: []interface{}{
																										&labeledExpr{
																											pos:   position{line: 788, col: 5, offset: 25669},
																											label: "delimiter",
																											expr: &actionExpr{
																												pos: position{line: 788, col: 16, offset: 25680},
																												run: (*parser).callonExtraListElement1603,
																												expr: &seqExpr{
																													pos: position{line: 788, col: 16, offset: 25680},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 788, col: 16, offset: 25680},
																															val:        "....",
																															ignoreCase: false,
																															want:       "\"....\"",
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 788, col: 23, offset: 25687},
																															expr: &litMatcher{
																																pos:        position{line: 788, col: 23, offset: 25687},
																																val:        ".",
																																ignoreCase: false,
																																want:       "\".\"",
																															},
																														},
																													},
																												},
																											},
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 790, col: 8, offset: 25771},
																											expr: &actionExpr{
																												pos: position{line: 3080, col: 10, offset: 100200},
																												run: (*parser).callonExtraListElement1609,
																												expr: &charClassMatcher{
																													pos:        position{line: 3080, col: 11, offset: 100201},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 3096, col: 8, offset: 100524},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 3089, col: 12, offset: 100384},
																													run: (*parser).callonExtraListElement1612,
																													expr: &choiceExpr{
																														pos: position{line: 3089, col: 13, offset: 100385},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 3089, col: 13, offset: 100385},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 3089, col: 20, offset: 100392},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 3089, col: 29, offset: 100401},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 3093, col: 8, offset: 100474},
																													expr: &anyMatcher{
																														line: 3093, col: 9, offset: 100475,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 795, col: 5, offset: 25921},
																								run: (*parser).callonExtraListElement1619,
																								expr: &seqExpr{
																									pos: position{line: 795, col: 5, offset: 25921},
																									exprs: []interface{}{
																										&labeledExpr{
																											pos:   position{line: 795, col: 5, offset: 25921},
																											label: "delimiter",
																											expr: &actionExpr{
																												pos: position{line: 795, col: 16, offset: 25932},
																												run: (*parser).callonExtraListElement1622,
																												expr: &seqExpr{
																													pos: position{line: 795, col: 16, offset: 25932},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 795, col: 16, offset: 25932},
																															val:        "++++",
																															ignoreCase: false,
																															want:       "\"++++\"",
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 795, col: 23, offset: 25939},
																															expr: &litMatcher{
																																pos:        position{line: 795, col: 23, offset: 25939},
																																val:        "+",
																																ignoreCase: false,
																																want:       "\"+\"",
																															},
																														},
																													},
																												},
																											},
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 797, col: 8, offset: 26023},
																											expr: &actionExpr{
																												pos: position{line: 3080, col: 10, offset: 100200},
																												run: (*parser).callonExtraListElement1628,
																												expr: &charClassMatcher{
																													pos:        position{line: 3080, col: 11, offset: 100201},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 3096, col: 8, offset: 100524},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 3089, col: 12, offset: 100384},
																													run: (*parser).callonExtraListElement1631,
																													expr: &choiceExpr{
																														pos: position{line: 3089, col: 13, offset: 100385},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 3089, col: 13, offset: 100385},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 3089, col: 20, offset: 100392},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 3089, col: 29, offset: 100401},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 3093, col: 8, offset: 100474},
																													expr: &anyMatcher{
																														line: 3093, col: 9, offset: 100475,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 802, col: 5, offset: 26171},
																								run: (*parser).callonExtraListElement1638,
																								expr: &seqExpr{
																									pos: position{line: 802, col: 5, offset: 26171},
																									exprs: []interface{}{
																										&labeledExpr{
																											pos:   position{line: 802, col: 5, offset: 26171},
																											label: "delimiter",
																											expr: &actionExpr{
																												pos: position{line: 802, col: 16, offset: 26182},
																												run: (*parser).callonExtraListElement1641,
																												expr: &seqExpr{
																													pos: position{line: 802, col: 16, offset: 26182},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 802, col: 16, offset: 26182},
																															val:        "____",
																															ignoreCase: false,
																															want:       "\"____\"",
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 802, col: 23, offset: 26189},
																															expr: &litMatcher{
																																pos:        position{line: 802, col: 23, offset: 26189},
																																val:        "_",
																																ignoreCase: false,
																																want:       "\"_\"",
																															},
																														},
																													},
																												},
																											},
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 804, col: 8, offset: 26273},
																											expr: &actionExpr{
																												pos: position{line: 3080, col: 10, offset: 100200},
																												run: (*parser).callonExtraListElement1647,
																												expr: &charClassMatcher{
																													pos:        position{line: 3080, col: 11, offset: 100201},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 3096, col: 8, offset: 100524},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 3089, col: 12, offset: 100384},
																													run: (*parser).callonExtraListElement1650,
																													expr: &choiceExpr{
																														pos: position{line: 3089, col: 13, offset: 100385},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 3089, col: 13, offset: 100385},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 3089, col: 20, offset: 100392},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 3089, col: 29, offset: 100401},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 3093, col: 8, offset: 100474},
																													expr: &anyMatcher{
																														line: 3093, col: 9, offset: 100475,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 809, col: 5, offset: 26417},
																								run: (*parser).callonExtraListElement1657,
																								expr: &seqExpr{
																									pos: position{line: 809, col: 5, offset: 26417},
																									exprs: []interface{}{
																										&labeledExpr{
																											pos:   position{line: 809, col: 5, offset: 26417},
																											label: "delimiter",
																											expr: &actionExpr{
																												pos: position{line: 809, col: 16, offset: 26428},
																												run: (*parser).callonExtraListElement1660,
																												expr: &seqExpr{
																													pos: position{line: 809, col: 16, offset: 26428},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 809, col: 16, offset: 26428},
																															val:        "****",
																															ignoreCase: false,
																															want:       "\"****\"",
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 809, col: 23, offset: 26435},
																															expr: &litMatcher{
																																pos:        position{line: 809, col: 23, offset: 26435},
																																val:        "*",
																																ignoreCase: false,
																																want:       "\"*\"",
																															},
																														},
																													},
																												},
																											},
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 811, col: 8, offset: 26519},
																											expr: &actionExpr{
																												pos: position{line: 3080, col: 10, offset: 100200},
																												run: (*parser).callonExtraListElement1666,
																												expr: &charClassMatcher{
																													pos:        position{line: 3080, col: 11, offset: 100201},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 3096, col: 8, offset: 100524},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 3089, col: 12, offset: 100384},
																													run: (*parser).callonExtraListElement1669,
																													expr: &choiceExpr{
																														pos: position{line: 3089, col: 13, offset: 100385},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 3089, col: 13, offset: 100385},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 3089, col: 20, offset: 100392},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 3089, col: 29, offset: 100401},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 3093, col: 8, offset: 100474},
																													expr: &anyMatcher{
																														line: 3093, col: 9, offset: 100475,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1566, col: 9, offset: 51406},
																	label: "content",
																	expr: &actionExpr{
																		pos: position{line: 1566, col: 18, offset: 51415},
																		run: (*parser).callonExtraListElement1677,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 1566, col: 18, offset: 51415},
																			expr: &charClassMatcher{
																				pos:        position{line: 1566, col: 18, offset: 51415},
																				val:        "[^\\r\\n]",
																				chars:      []rune{'\r', '\n'},
																				ignoreCase: false,
																				inverted:   true,
																			},
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 3096, col: 8, offset: 100524},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 3089, col: 12, offset: 100384},
																			run: (*parser).callonExtraListElement1681,
																			expr: &choiceExpr{
																				pos: position{line: 3089, col: 13, offset: 100385},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 3089, col: 13, offset: 100385},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 3089, col: 20, offset: 100392},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 3089, col: 29, offset: 100401},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 3093, col: 8, offset: 100474},
																			expr: &anyMatcher{
																				line: 3093, col: 9, offset: 100475,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListElementContinuation",
			pos:  position{line: 1585, col: 1, offset: 51865},
			expr: &actionExpr{
				pos: position{line: 1586, col: 5, offset: 51897},
				run: (*parser).callonListElementContinuation1,
				expr: &seqExpr{
					pos: position{line: 1586, col: 5, offset: 51897},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1586, col: 5, offset: 51897},
							label: "offset",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1586, col: 12, offset: 51904},
								expr: &seqExpr{
									pos: position{line: 1586, col: 13, offset: 51905},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 1586, col: 13, offset: 51905},
											expr: &actionExpr{
												pos: position{line: 3080, col: 10, offset: 100200},
												run: (*parser).callonListElementContinuation7,
												expr: &charClassMatcher{
													pos:        position{line: 3080, col: 11, offset: 100201},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
										&actionExpr{
											pos: position{line: 3089, col: 12, offset: 100384},
											run: (*parser).callonListElementContinuation9,
											expr: &choiceExpr{
												pos: position{line: 3089, col: 13, offset: 100385},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 3089, col: 13, offset: 100385},
														val:        "\n",
														ignoreCase: false,
														want:       "\"\\n\"",
													},
													&litMatcher{
														pos:        position{line: 3089, col: 20, offset: 100392},
														val:        "\r\n",
														ignoreCase: false,
														want:       "\"\\r\\n\"",
													},
													&litMatcher{
														pos:        position{line: 3089, col: 29, offset: 100401},
														val:        "\r",
														ignoreCase: false,
														want:       "\"\\r\"",
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1593, col: 34, offset: 52137},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1593, col: 38, offset: 52141},
							expr: &actionExpr{
								pos: position{line: 3080, col: 10, offset: 100200},
								run: (*parser).callonListElementContinuation16,
								expr: &charClassMatcher{
									pos:        position{line: 3080, col: 11, offset: 100201},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&actionExpr{
							pos: position{line: 3089, col: 12, offset: 100384},
							run: (*parser).callonListElementContinuation18,
							expr: &choiceExpr{
								pos: position{line: 3089, col: 13, offset: 100385},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 3089, col: 13, offset: 100385},
										val:        "\n",
										ignoreCase: false,
										want:       "\"\\n\"",
									},
									&litMatcher{
										pos:        position{line: 3089, col: 20, offset: 100392},
										val:        "\r\n",
										ignoreCase: false,
										want:       "\"\\r\\n\"",
									},
									&litMatcher{
										pos:        position{line: 3089, col: 29, offset: 100401},
										val:        "\r",
										ignoreCase: false,
										want:       "\"\\r\"",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1588, col: 5, offset: 51961},
							label: "element",
							expr: &zeroOrOneExpr{
								pos: position{line: 1588, col: 13, offset: 51969},
								expr: &ruleRefExpr{
									pos:  position{line: 1588, col: 13, offset: 51969},
									name: "ListElementContinuationElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListElementContinuationElement",
			pos:  position{line: 1595, col: 1, offset: 52157},
			expr: &actionExpr{
				pos: position{line: 1596, col: 5, offset: 52235},
				run: (*parser).callonListElementContinuationElement1,
				expr: &seqExpr{
					pos: position{line: 1596, col: 5, offset: 52235},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1596, col: 5, offset: 52235},
							expr: &notExpr{
								pos: position{line: 3093, col: 8, offset: 100474},
								expr: &anyMatcher{
									line: 3093, col: 9, offset: 100475,
								},
							},
						},
						&notExpr{
							pos: position{line: 1597, col: 5, offset: 52261},
							expr: &choiceExpr{
								pos: position{line: 1487, col: 5, offset: 48596},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 1634, col: 5, offset: 53403},
										run: (*parser).callonListElementContinuationElement8,
										expr: &seqExpr{
											pos: position{line: 1634, col: 5, offset: 53403},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1634, col: 5, offset: 53403},
													label: "prefix",
													expr: &actionExpr{
														pos: position{line: 1641, col: 5, offset: 53611},
														run: (*parser).callonListElementContinuationElement11,
														expr: &seqExpr{
															pos: position{line: 1641, col: 5, offset: 53611},
															exprs: []interface{}{
																&zeroOrMoreExpr{
																	pos: position{line: 1641, col: 5, offset: 53611},
																	expr: &actionExpr{
																		pos: position{line: 3080, col: 10, offset: 100200},
																		run: (*parser).callonListElementContinuationElement14,
																		expr: &charClassMatcher{
																			pos:        position{line: 3080, col: 11, offset: 100201},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1641, col: 12, offset: 53618},
																	label: "prefix",
																	expr: &choiceExpr{
																		pos: position{line: 1643, col: 9, offset: 53681},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 1643, col: 9, offset: 53681},
																				run: (*parser).callonListElementContinuationElement18,
																				expr: &seqExpr{
																					pos: position{line: 1643, col: 9, offset: 53681},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 1643, col: 9, offset: 53681},
																							label: "depth",
																							expr: &actionExpr{
																								pos: position{line: 1643, col: 16, offset: 53688},
																								run: (*parser).callonListElementContinuationElement21,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 1643, col: 16, offset: 53688},
																									expr: &litMatcher{
																										pos:        position{line: 1643, col: 17, offset: 53689},
																										val:        ".",
																										ignoreCase: false,
																										want:       "\".\"",
																									},
																								},
																							},
																						},
																						&andCodeExpr{
																							pos: position{line: 1647, col: 9, offset: 53789},
																							run: (*parser).callonListElementContinuationElement24,
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1666, col: 11, offset: 54506},
																				run: (*parser).callonListElementContinuationElement25,
																				expr: &seqExpr{
																					pos: position{line: 1666, col: 11, offset: 54506},
																					exprs: []interface{}{
																						&oneOrMoreExpr{
																							pos: position{line: 1666, col: 11, offset: 54506},
																							expr: &charClassMatcher{
																								pos:        position{line: 1666, col: 12, offset: 54507},
																								val:        "[0-9]",
																								ranges:     []rune{'0', '9'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 1666, col: 20, offset: 54515},
																							val:        ".",
																							ignoreCase: false,
																							want:       "\".\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1668, col: 13, offset: 54632},
																				run: (*parser).callonListElementContinuationElement30,
																				expr: &seqExpr{
																					pos: position{line: 1668, col: 13, offset: 54632},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 1668, col: 14, offset: 54633},
																							val:        "[a-z]",
																							ranges:     []rune{'a', 'z'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&litMatcher{
																							pos:        position{line: 1668, col: 21, offset: 54640},
																							val:        ".",
																							ignoreCase: false,
																							want:       "\".\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1670, col: 13, offset: 54760},
																				run: (*parser).callonListElementContinuationElement34,
																				expr: &seqExpr{
																					pos: position{line: 1670, col: 13, offset: 54760},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 1670, col: 14, offset: 54761},
																							val:        "[A-Z]",
																							ranges:     []rune{'A', 'Z'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&litMatcher{
																							pos:        position{line: 1670, col: 21, offset: 54768},
																							val:        ".",
																							ignoreCase: false,
																							want:       "\".\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1672, col: 13, offset: 54888},
																				run: (*parser).callonListElementContinuationElement38,
																				expr: &seqExpr{
																					pos: position{line: 1672, col: 13, offset: 54888},
																					exprs: []interface{}{
																						&oneOrMoreExpr{
																							pos: position{line: 1672, col: 13, offset: 54888},
																							expr: &charClassMatcher{
																								pos:        position{line: 1672, col: 14, offset: 54889},
																								val:        "[ivxdlcm]",
																								chars:      []rune{'i', 'v', 'x', 'd', 'l', 'c', 'm'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 1672, col: 26, offset: 54901},
																							val:        ")",
																							ignoreCase: false,
																							want:       "\")\"",
																						},
																					},
																				},
																			},
																			&actionExpr{
																				pos: position{line: 1674, col: 13, offset: 55021},
																				run: (*parser).callonListElementContinuationElement43,
																				expr: &seqExpr{
																					pos: position{line: 1674, col: 13, offset: 55021},
																					exprs: []interface{}{
																						&oneOrMoreExpr{
																							pos: position{line: 1674, col: 13, offset: 55021},
																							expr: &charClassMatcher{
																								pos:        position{line: 1674, col: 14, offset: 55022},
																								val:        "[IVXDLCM]",
																								chars:      []rune{'I', 'V', 'X', 'D', 'L', 'C', 'M'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&litMatcher{
																							pos:        position{line: 1674, col: 26, offset: 55034},
																							val:        ")",
																							ignoreCase: false,
																							want:       "\")\"",
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 3084, col: 11, offset: 100267},
																	run: (*parser).callonListElementContinuationElement48,
																	expr: &oneOrMoreExpr{
																		pos: position{line: 3084, col: 11, offset: 100267},
																		expr: &charClassMatcher{
																			pos:        position{line: 3084, col: 12, offset: 100268},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1635, col: 5, offset: 53442},
													label: "content",
													expr: &actionExpr{
														pos: position{line: 1575, col: 5, offset: 51638},
														run: (*parser).callonListElementContinuationElement52,
														expr: &seqExpr{
															pos: position{line: 1575, col: 5, offset: 51638},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1575, col: 5, offset: 51638},
																	label: "rawline",
																	expr: &actionExpr{
																		pos: position{line: 1575, col: 14, offset: 51647},
																		run: (*parser).callonListElementContinuationElement55,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 1575, col: 14, offset: 51647},
																			expr: &charClassMatcher{
																				pos:        position{line: 1575, col: 14, offset: 51647},
																				val:        "[^\\r\\n]",
																				chars:      []rune{'\r', '\n'},
																				ignoreCase: false,
																				inverted:   true,
																			},
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 3096, col: 8, offset: 100524},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 3089, col: 12, offset: 100384},
																			run: (*parser).callonListElementContinuationElement59,
																			expr: &choiceExpr{
																				pos: position{line: 3089, col: 13, offset: 100385},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 3089, col: 13, offset: 100385},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 3089, col: 20, offset: 100392},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 3089, col: 29, offset: 100401},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 3093, col: 8, offset: 100474},
																			expr: &anyMatcher{
																				line: 3093, col: 9, offset: 100475,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1684, col: 5, offset: 55300},
										run: (*parser).callonListElementContinuationElement66,
										expr: &seqExpr{
											pos: position{line: 1684, col: 5, offset: 55300},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1684, col: 5, offset: 55300},
													label: "prefix",
													expr: &actionExpr{
														pos: position{line: 1691, col: 5, offset: 55573},
														run: (*parser).callonListElementContinuationElement69,
														expr: &seqExpr{
															pos: position{line: 1691, col: 5, offset: 55573},
															exprs: []interface{}{
																&zeroOrMoreExpr{
																	pos: position{line: 1691, col: 5, offset: 55573},
																	expr: &actionExpr{
																		pos: position{line: 3080, col: 10, offset: 100200},
																		run: (*parser).callonListElementContinuationElement72,
																		expr: &charClassMatcher{
																			pos:        position{line: 3080, col: 11, offset: 100201},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&labeledExpr{
																	pos:   position{line: 1691, col: 12, offset: 55580},
																	label: "prefix",
																	expr: &choiceExpr{
																		pos: position{line: 1691, col: 20, offset: 55588},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 1693, col: 9, offset: 55645},
																				run: (*parser).callonListElementContinuationElement76,
																				expr: &seqExpr{
																					pos: position{line: 1693, col: 9, offset: 55645},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 1693, col: 9, offset: 55645},
																							label: "depth",
																							expr: &actionExpr{
																								pos: position{line: 1693, col: 16, offset: 55652},
																								run: (*parser).callonListElementContinuationElement79,
																								expr: &oneOrMoreExpr{
																									pos: position{line: 1693, col: 16, offset: 55652},
																									expr: &litMatcher{
																										pos:        position{line: 1693, col: 17, offset: 55653},
																										val:        "*",
																										ignoreCase: false,
																										want:       "\"*\"",
																									},
																								},
																							},
																						},
																						&andCodeExpr{
																							pos: position{line: 1697, col: 9, offset: 55753},
																							run: (*parser).callonListElementContinuationElement82,
																						},
																					},
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 1714, col: 14, offset: 56460},
																				label: "depth",
																				expr: &actionExpr{
																					pos: position{line: 1714, col: 21, offset: 56467},
																					run: (*parser).callonListElementContinuationElement84,
																					expr: &litMatcher{
																						pos:        position{line: 1714, col: 22, offset: 56468},
																						val:        "-",
																						ignoreCase: false,
																						want:       "\"-\"",
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 3084, col: 11, offset: 100267},
																	run: (*parser).callonListElementContinuationElement86,
																	expr: &oneOrMoreExpr{
																		pos: position{line: 3084, col: 11, offset: 100267},
																		expr: &charClassMatcher{
																			pos:        position{line: 3084, col: 12, offset: 100268},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1685, col: 5, offset: 55341},
													label: "checkstyle",
													expr: &zeroOrOneExpr{
														pos: position{line: 1685, col: 16, offset: 55352},
														expr: &actionExpr{
															pos: position{line: 1721, col: 5, offset: 56629},
															run: (*parser).callonListElementContinuationElement91,
															expr: &seqExpr{
																pos: position{line: 1721, col: 5, offset: 56629},
																exprs: []interface{}{
																	&andExpr{
																		pos: position{line: 1721, col: 5, offset: 56629},
																		expr: &litMatcher{
																			pos:        position{line: 1721, col: 6, offset: 56630},
																			val:        "[",
																			ignoreCase: false,
																			want:       "\"[\"",
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 1721, col: 10, offset: 56634},
																		label: "style",
																		expr: &choiceExpr{
																			pos: position{line: 1722, col: 7, offset: 56648},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 1722, col: 7, offset: 56648},
																					run: (*parser).callonListElementContinuationElement97,
																					expr: &litMatcher{
																						pos:        position{line: 1722, col: 7, offset: 56648},
																						val:        "[ ]",
																						ignoreCase: false,
																						want:       "\"[ ]\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 1723, col: 7, offset: 56693},
																					run: (*parser).callonListElementContinuationElement99,
																					expr: &litMatcher{
																						pos:        position{line: 1723, col: 7, offset: 56693},
																						val:        "[*]",
																						ignoreCase: false,
																						want:       "\"[*]\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 1724, col: 7, offset: 56736},
																					run: (*parser).callonListElementContinuationElement101,
																					expr: &litMatcher{
																						pos:        position{line: 1724, col: 7, offset: 56736},
																						val:        "[x]",
																						ignoreCase: false,
																						want:       "\"[x]\"",
																					},
																				},
																			},
																		},
																	},
																	&actionExpr{
																		pos: position{line: 3084, col: 11, offset: 100267},
																		run: (*parser).callonListElementContinuationElement103,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 3084, col: 11, offset: 100267},
																			expr: &charClassMatcher{
																				pos:        position{line: 3084, col: 12, offset: 100268},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1686, col: 5, offset: 55391},
													label: "content",
													expr: &actionExpr{
														pos: position{line: 1575, col: 5, offset: 51638},
														run: (*parser).callonListElementContinuationElement107,
														expr: &seqExpr{
															pos: position{line: 1575, col: 5, offset: 51638},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1575, col: 5, offset: 51638},
																	label: "rawline",
																	expr: &actionExpr{
																		pos: position{line: 1575, col: 14, offset: 51647},
																		run: (*parser).callonListElementContinuationElement110,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 1575, col: 14, offset: 51647},
																			expr: &charClassMatcher{
																				pos:        position{line: 1575, col: 14, offset: 51647},
																				val:        "[^\\r\\n]",
																				chars:      []rune{'\r', '\n'},
																				ignoreCase: false,
																				inverted:   true,
																			},
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 3096, col: 8, offset: 100524},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 3089, col: 12, offset: 100384},
																			run: (*parser).callonListElementContinuationElement114,
																			expr: &choiceExpr{
																				pos: position{line: 3089, col: 13, offset: 100385},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 3089, col: 13, offset: 100385},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 3089, col: 20, offset: 100392},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 3089, col: 29, offset: 100401},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 3093, col: 8, offset: 100474},
																			expr: &anyMatcher{
																				line: 3093, col: 9, offset: 100475,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1791, col: 5, offset: 58609},
										run: (*parser).callonListElementContinuationElement121,
										expr: &seqExpr{
											pos: position{line: 1791, col: 5, offset: 58609},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1791, col: 5, offset: 58609},
													label: "ref",
													expr: &actionExpr{
														pos: position{line: 1797, col: 5, offset: 58810},
														run: (*parser).callonListElementContinuationElement124,
														expr: &seqExpr{
															pos: position{line: 1797, col: 5, offset: 58810},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 1797, col: 5, offset: 58810},
																	val:        "<",
																	ignoreCase: false,
																	want:       "\"<\"",
																},
																&labeledExpr{
																	pos:   position{line: 1797, col: 9, offset: 58814},
																	label: "ref",
																	expr: &actionExpr{
																		pos: position{line: 1797, col: 14, offset: 58819},
																		run: (*parser).callonListElementContinuationElement128,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 1797, col: 14, offset: 58819},
																			expr: &charClassMatcher{
																				pos:        position{line: 1797, col: 14, offset: 58819},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 1797, col: 62, offset: 58867},
																	val:        ">",
																	ignoreCase: false,
																	want:       "\">\"",
																},
																&actionExpr{
																	pos: position{line: 3084, col: 11, offset: 100267},
																	run: (*parser).callonListElementContinuationElement132,
																	expr: &oneOrMoreExpr{
																		pos: position{line: 3084, col: 11, offset: 100267},
																		expr: &charClassMatcher{
																			pos:        position{line: 3084, col: 12, offset: 100268},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1792, col: 5, offset: 58645},
													label: "description",
													expr: &actionExpr{
														pos: position{line: 1802, col: 5, offset: 58993},
														run: (*parser).callonListElementContinuationElement136,
														expr: &seqExpr{
															pos: position{line: 1802, col: 5, offset: 58993},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1802, col: 5, offset: 58993},
																	label: "rawline",
																	expr: &actionExpr{
																		pos: position{line: 1802, col: 14, offset: 59002},
																		run: (*parser).callonListElementContinuationElement139,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 1802, col: 14, offset: 59002},
																			expr: &charClassMatcher{
																				pos:        position{line: 1802, col: 14, offset: 59002},
																				val:        "[^\\r\\n]",
																				chars:      []rune{'\r', '\n'},
																				ignoreCase: false,
																				inverted:   true,
																			},
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 3096, col: 8, offset: 100524},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 3089, col: 12, offset: 100384},
																			run: (*parser).callonListElementContinuationElement143,
																			expr: &choiceExpr{
																				pos: position{line: 3089, col: 13, offset: 100385},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 3089, col: 13, offset: 100385},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 3089, col: 20, offset: 100392},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 3089, col: 29, offset: 100401},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 3093, col: 8, offset: 100474},
																			expr: &anyMatcher{
																				line: 3093, col: 9, offset: 100475,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1733, col: 5, offset: 56929},
										run: (*parser).callonListElementContinuationElement150,
										expr: &seqExpr{
											pos: position{line: 1733, col: 5, offset: 56929},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1733, col: 5, offset: 56929},
													label: "term",
													expr: &actionExpr{
														pos: position{line: 1741, col: 5, offset: 57188},
														run: (*parser).callonListElementContinuationElement153,
														expr: &oneOrMoreExpr{
															pos: position{line: 1741, col: 5, offset: 57188},
															expr: &seqExpr{
																pos: position{line: 1741, col: 6, offset: 57189},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1741, col: 6, offset: 57189},
																		expr: &actionExpr{
																			pos: position{line: 1746, col: 5, offset: 57339},
																			run: (*parser).callonListElementContinuationElement157,
																			expr: &seqExpr{
																				pos: position{line: 1746, col: 5, offset: 57339},
																				exprs: []interface{}{
																					&labeledExpr{
																						pos:   position{line: 1746, col: 5, offset: 57339},
																						label: "separator",
																						expr: &actionExpr{
																							pos: position{line: 1746, col: 16, offset: 57350},
																							run: (*parser).callonListElementContinuationElement160,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 1746, col: 16, offset: 57350},
																								expr: &litMatcher{
																									pos:        position{line: 1746, col: 17, offset: 57351},
																									val:        ":",
																									ignoreCase: false,
																									want:       "\":\"",
																								},
																							},
																						},
																					},
																					&andCodeExpr{
																						pos: position{line: 1749, col: 5, offset: 57408},
																						run: (*parser).callonListElementContinuationElement163,
																					},
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 1741, col: 35, offset: 57218},
																		expr: &choiceExpr{
																			pos: position{line: 3096, col: 8, offset: 100524},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 3089, col: 12, offset: 100384},
																					run: (*parser).callonListElementContinuationElement166,
																					expr: &choiceExpr{
																						pos: position{line: 3089, col: 13, offset: 100385},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 3089, col: 13, offset: 100385},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 3089, col: 20, offset: 100392},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 3089, col: 29, offset: 100401},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 3093, col: 8, offset: 100474},
																					expr: &anyMatcher{
																						line: 3093, col: 9, offset: 100475,
																					},
																				},
																			},
																		},
																	},
																	&anyMatcher{
																		line: 1741, col: 40, offset: 57223,
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1734, col: 5, offset: 56964},
													label: "separator",
													expr: &actionExpr{
														pos: position{line: 1746, col: 5, offset: 57339},
														run: (*parser).callonListElementContinuationElement175,
														expr: &seqExpr{
															pos: position{line: 1746, col: 5, offset: 57339},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1746, col: 5, offset: 57339},
																	label: "separator",
																	expr: &actionExpr{
																		pos: position{line: 1746, col: 16, offset: 57350},
																		run: (*parser).callonListElementContinuationElement178,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 1746, col: 16, offset: 57350},
																			expr: &litMatcher{
																				pos:        position{line: 1746, col: 17, offset: 57351},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																		},
																	},
																},
																&andCodeExpr{
																	pos: position{line: 1749, col: 5, offset: 57408},
																	run: (*parser).callonListElementContinuationElement181,
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1735, col: 5, offset: 57009},
													label: "description",
													expr: &choiceExpr{
														pos: position{line: 1757, col: 5, offset: 57658},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 1759, col: 9, offset: 57723},
																run: (*parser).callonListElementContinuationElement184,
																expr: &seqExpr{
																	pos: position{line: 1759, col: 9, offset: 57723},
																	exprs: []interface{}{
																		&zeroOrMoreExpr{
																			pos: position{line: 1759, col: 9, offset: 57723},
																			expr: &actionExpr{
																				pos: position{line: 3080, col: 10, offset: 100200},
																				run: (*parser).callonListElementContinuationElement187,
																				expr: &charClassMatcher{
																					pos:        position{line: 3080, col: 11, offset: 100201},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 3096, col: 8, offset: 100524},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 3089, col: 12, offset: 100384},
																					run: (*parser).callonListElementContinuationElement190,
																					expr: &choiceExpr{
																						pos: position{line: 3089, col: 13, offset: 100385},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 3089, col: 13, offset: 100385},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 3089, col: 20, offset: 100392},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 3089, col: 29, offset: 100401},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 3093, col: 8, offset: 100474},
																					expr: &anyMatcher{
																						line: 3093, col: 9, offset: 100475,
																					},
																				},
																			},
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 1760, col: 9, offset: 57743},
																			expr: &actionExpr{
																				pos: position{line: 690, col: 14, offset: 22312},
																				run: (*parser).callonListElementContinuationElement198,
																				expr: &seqExpr{
																					pos: position{line: 690, col: 14, offset: 22312},
																					exprs: []interface{}{
																						&notExpr{
																							pos: position{line: 690, col: 14, offset: 22312},
																							expr: &notExpr{
																								pos: position{line: 3093, col: 8, offset: 100474},
																								expr: &anyMatcher{
																									line: 3093, col: 9, offset: 100475,
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 690, col: 19, offset: 22317},
																							expr: &actionExpr{
																								pos: position{line: 3080, col: 10, offset: 100200},
																								run: (*parser).callonListElementContinuationElement204,
																								expr: &charClassMatcher{
																									pos:        position{line: 3080, col: 11, offset: 100201},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 3096, col: 8, offset: 100524},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 3089, col: 12, offset: 100384},
																									run: (*parser).callonListElementContinuationElement207,
																									expr: &choiceExpr{
																										pos: position{line: 3089, col: 13, offset: 100385},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 3089, col: 13, offset: 100385},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 3089, col: 20, offset: 100392},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 3089, col: 29, offset: 100401},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 3093, col: 8, offset: 100474},
																									expr: &anyMatcher{
																										line: 3093, col: 9, offset: 100475,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 1761, col: 9, offset: 57763},
																			label: "content",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 1761, col: 17, offset: 57771},
																				expr: &choiceExpr{
																					pos: position{line: 1555, col: 5, offset: 51005},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 1555, col: 5, offset: 51005},
																							run: (*parser).callonListElementContinuationElement217,
																							expr: &actionExpr{
																								pos: position{line: 2770, col: 22, offset: 90863},
																								run: (*parser).callonListElementContinuationElement218,
																								expr: &seqExpr{
																									pos: position{line: 2770, col: 22, offset: 90863},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2775, col: 31, offset: 91084},
																											val:        "//",
																											ignoreCase: false,
																											want:       "\"//\"",
																										},
																										&notExpr{
																											pos: position{line: 2775, col: 36, offset: 91089},
																											expr: &litMatcher{
																												pos:        position{line: 2775, col: 37, offset: 91090},
																												val:        "//",
																												ignoreCase: false,
																												want:       "\"//\"",
																											},
																										},
																										&labeledExpr{
																											pos:   position{line: 2770, col: 49, offset: 90890},
																											label: "content",
																											expr: &actionExpr{
																												pos: position{line: 2777, col: 29, offset: 91125},
																												run: (*parser).callonListElementContinuationElement224,
																												expr: &zeroOrMoreExpr{
																													pos: position{line: 2777, col: 29, offset: 91125},
																													expr: &charClassMatcher{
																														pos:        position{line: 2777, col: 29, offset: 91125},
																														val:        "[^\\r\\n]",
																														chars:      []rune{'\r', '\n'},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 3096, col: 8, offset: 100524},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 3089, col: 12, offset: 100384},
																													run: (*parser).callonListElementContinuationElement228,
																													expr: &choiceExpr{
																														pos: position{line: 3089, col: 13, offset: 100385},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 3089, col: 13, offset: 100385},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 3089, col: 20, offset: 100392},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 3089, col: 29, offset: 100401},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 3093, col: 8, offset: 100474},
																													expr: &anyMatcher{
																														line: 3093, col: 9, offset: 100475,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 1559, col: 9, offset: 51158},
																							run: (*parser).callonListElementContinuationElement235,
																							expr: &seqExpr{
																								pos: position{line: 1559, col: 9, offset: 51158},
																								exprs: []interface{}{
																									&notExpr{
																										pos: position{line: 1559, col: 9, offset: 51158},
																										expr: &actionExpr{
																											pos: position{line: 690, col: 14, offset: 22312},
																											run: (*parser).callonListElementContinuationElement238,
																											expr: &seqExpr{
																												pos: position{line: 690, col: 14, offset: 22312},
																												exprs: []interface{}{
																													&notExpr{
																														pos: position{line: 690, col: 14, offset: 22312},
																														expr: &notExpr{
																															pos: position{line: 3093, col: 8, offset: 100474},
																															expr: &anyMatcher{
																																line: 3093, col: 9, offset: 100475,
																															},
																														},
																													},
																													&zeroOrMoreExpr{
																														pos: position{line: 690, col: 19, offset: 22317},
																														expr: &actionExpr{
																															pos: position{line: 3080, col: 10, offset: 100200},
																															run: (*parser).callonListElementContinuationElement244,
																															expr: &charClassMatcher{
																																pos:        position{line: 3080, col: 11, offset: 100201},
																																val:        "[ \\t]",
																																chars:      []rune{' ', '\t'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																													&choiceExpr{
																														pos: position{line: 3096, col: 8, offset: 100524},
																														alternatives: []interface{}{
																															&actionExpr{
																																pos: position{line: 3089, col: 12, offset: 100384},
																																run: (*parser).callonListElementContinuationElement247,
																																expr: &choiceExpr{
																																	pos: position{line: 3089, col: 13, offset: 100385},
																																	alternatives: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 3089, col: 13, offset: 100385},
																																			val:        "\n",
																																			ignoreCase: false,
																																			want:       "\"\\n\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 3089, col: 20, offset: 100392},
																																			val:        "\r\n",
																																			ignoreCase: false,
																																			want:       "\"\\r\\n\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 3089, col: 29, offset: 100401},
																																			val:        "\r",
																																			ignoreCase: false,
																																			want:       "\"\\r\"",
																																		},
																																	},
																																},
																															},
																															&notExpr{
																																pos: position{line: 3093, col: 8, offset: 100474},
																																expr: &anyMatcher{
																																	line: 3093, col: 9, offset: 100475,
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 1560, col: 9, offset: 51177},
																										expr: &seqExpr{
																											pos: position{line: 1593, col: 34, offset: 52137},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 1593, col: 34, offset: 52137},
																													val:        "+",
																													ignoreCase: false,
																													want:       "\"+\"",
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 1593, col: 38, offset: 52141},
																													expr: &actionExpr{
																														pos: position{line: 3080, col: 10, offset: 100200},
																														run: (*parser).callonListElementContinuationElement258,
																														expr: &charClassMatcher{
																															pos:        position{line: 3080, col: 11, offset: 100201},
																															val:        "[ \\t]",
																															chars:      []rune{' ', '\t'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																												&actionExpr{
																													pos: position{line: 3089, col: 12, offset: 100384},
																													run: (*parser).callonListElementContinuationElement260,
																													expr: &choiceExpr{
																														pos: position{line: 3089, col: 13, offset: 100385},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 3089, col: 13, offset: 100385},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 3089, col: 20, offset: 100392},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 3089, col: 29, offset: 100401},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 1561, col: 9, offset: 51216},
																										expr: &actionExpr{
																											pos: position{line: 1641, col: 5, offset: 53611},
																											run: (*parser).callonListElementContinuationElement266,
																											expr: &seqExpr{
																												pos: position{line: 1641, col: 5, offset: 53611},
																												exprs: []interface{}{
																													&zeroOrMoreExpr{
																														pos: position{line: 1641, col: 5, offset: 53611},
																														expr: &actionExpr{
																															pos: position{line: 3080, col: 10, offset: 100200},
																															run: (*parser).callonListElementContinuationElement269,
																															expr: &charClassMatcher{
																																pos:        position{line: 3080, col: 11, offset: 100201},
																																val:        "[ \\t]",
																																chars:      []rune{' ', '\t'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																													&labeledExpr{
																														pos:   position{line: 1641, col: 12, offset: 53618},
																														label: "prefix",
																														expr: &choiceExpr{
																															pos: position{line: 1643, col: 9, offset: 53681},
																															alternatives: []interface{}{
																																&actionExpr{
																																	pos: position{line: 1643, col: 9, offset: 53681},
																																	run: (*parser).callonListElementContinuationElement273,
																																	expr: &seqExpr{
																																		pos: position{line: 1643, col: 9, offset: 53681},
																																		exprs: []interface{}{
																																			&labeledExpr{
																																				pos:   position{line: 1643, col: 9, offset: 53681},
																																				label: "depth",
																																				expr: &actionExpr{
																																					pos: position{line: 1643, col: 16, offset: 53688},
																																					run: (*parser).callonListElementContinuationElement276,
																																					expr: &oneOrMoreExpr{
																																						pos: position{line: 1643, col: 16, offset: 53688},
																																						expr: &litMatcher{
																																							pos:        position{line: 1643, col: 17, offset: 53689},
																																							val:        ".",
																																							ignoreCase: false,
																																							want:       "\".\"",
																																						},
																																					},
																																				},
																																			},
																																			&andCodeExpr{
																																				pos: position{line: 1647, col: 9, offset: 53789},
																																				run: (*parser).callonListElementContinuationElement279,
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 1666, col: 11, offset: 54506},
																																	run: (*parser).callonListElementContinuationElement280,
																																	expr: &seqExpr{
																																		pos: position{line: 1666, col: 11, offset: 54506},
																																		exprs: []interface{}{
																																			&oneOrMoreExpr{
																																				pos: position{line: 1666, col: 11, offset: 54506},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 1666, col: 12, offset: 54507},
																																					val:        "[0-9]",
																																					ranges:     []rune{'0', '9'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 1666, col: 20, offset: 54515},
																																				val:        ".",
																																				ignoreCase: false,
																																				want:       "\".\"",
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 1668, col: 13, offset: 54632},
																																	run: (*parser).callonListElementContinuationElement285,
																																	expr: &seqExpr{
																																		pos: position{line: 1668, col: 13, offset: 54632},
																																		exprs: []interface{}{
																																			&charClassMatcher{
																																				pos:        position{line: 1668, col: 14, offset: 54633},
																																				val:        "[a-z]",
																																				ranges:     []rune{'a', 'z'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&litMatcher{
																																				pos:        position{line: 1668, col: 21, offset: 54640},
																																				val:        ".",
																																				ignoreCase: false,
																																				want:       "\".\"",
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 1670, col: 13, offset: 54760},
																																	run: (*parser).callonListElementContinuationElement289,
																																	expr: &seqExpr{
																																		pos: position{line: 1670, col: 13, offset: 54760},
																																		exprs: []interface{}{
																																			&charClassMatcher{
																																				pos:        position{line: 1670, col: 14, offset: 54761},
																																				val:        "[A-Z]",
																																				ranges:     []rune{'A', 'Z'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&litMatcher{
																																				pos:        position{line: 1670, col: 21, offset: 54768},
																																				val:        ".",
																																				ignoreCase: false,
																																				want:       "\".\"",
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 1672, col: 13, offset: 54888},
																																	run: (*parser).callonListElementContinuationElement293,
																																	expr: &seqExpr{
																																		pos: position{line: 1672, col: 13, offset: 54888},
																																		exprs: []interface{}{
																																			&oneOrMoreExpr{
																																				pos: position{line: 1672, col: 13, offset: 54888},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 1672, col: 14, offset: 54889},
																																					val:        "[ivxdlcm]",
																																					chars:      []rune{'i', 'v', 'x', 'd', 'l', 'c', 'm'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 1672, col: 26, offset: 54901},
																																				val:        ")",
																																				ignoreCase: false,
																																				want:       "\")\"",
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 1674, col: 13, offset: 55021},
																																	run: (*parser).callonListElementContinuationElement298,
																																	expr: &seqExpr{
																																		pos: position{line: 1674, col: 13, offset: 55021},
																																		exprs: []interface{}{
																																			&oneOrMoreExpr{
																																				pos: position{line: 1674, col: 13, offset: 55021},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 1674, col: 14, offset: 55022},
																																					val:        "[IVXDLCM]",
																																					chars:      []rune{'I', 'V', 'X', 'D', 'L', 'C', 'M'},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																			&litMatcher{
																																				pos:        position{line: 1674, col: 26, offset: 55034},
																																				val:        ")",
																																				ignoreCase: false,
																																				want:       "\")\"",
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																													&actionExpr{
																														pos: position{line: 3084, col: 11, offset: 100267},
																														run: (*parser).callonListElementContinuationElement303,
																														expr: &oneOrMoreExpr{
																															pos: position{line: 3084, col: 11, offset: 100267},
																															expr: &charClassMatcher{
																																pos:        position{line: 3084, col: 12, offset: 100268},
																																val:        "[ \\t]",
																																chars:      []rune{' ', '\t'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 1562, col: 9, offset: 51250},
																										expr: &actionExpr{
																											pos: position{line: 1691, col: 5, offset: 55573},
																											run: (*parser).callonListElementContinuationElement307,
																											expr: &seqExpr{
																												pos: position{line: 1691, col: 5, offset: 55573},
																												exprs: []interface{}{
																													&zeroOrMoreExpr{
																														pos: position{line: 1691, col: 5, offset: 55573},
																														expr: &actionExpr{
																															pos: position{line: 3080, col: 10, offset: 100200},
																															run: (*parser).callonListElementContinuationElement310,
																															expr: &charClassMatcher{
																																pos:        position{line: 3080, col: 11, offset: 100201},
																																val:        "[ \\t]",
																																chars:      []rune{' ', '\t'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																													&labeledExpr{
																														pos:   position{line: 1691, col: 12, offset: 55580},
																														label: "prefix",
																														expr: &choiceExpr{
																															pos: position{line: 1691, col: 20, offset: 55588},
																															alternatives: []interface{}{
																																&actionExpr{
																																	pos: position{line: 1693, col: 9, offset: 55645},
																																	run: (*parser).callonListElementContinuationElement314,
																																	expr: &seqExpr{
																																		pos: position{line: 1693, col: 9, offset: 55645},
																																		exprs: []interface{}{
																																			&labeledExpr{
																																				pos:   position{line: 1693, col: 9, offset: 55645},
																																				label: "depth",
																																				expr: &actionExpr{
																																					pos: position{line: 1693, col: 16, offset: 55652},
																																					run: (*parser).callonListElementContinuationElement317,
																																					expr: &oneOrMoreExpr{
																																						pos: position{line: 1693, col: 16, offset: 55652},
																																						expr: &litMatcher{
																																							pos:        position{line: 1693, col: 17, offset: 55653},
																																							val:        "*",
																																							ignoreCase: false,
																																							want:       "\"*\"",
																																						},
																																					},
																																				},
																																			},
																																			&andCodeExpr{
																																				pos: position{line: 1697, col: 9, offset: 55753},
																																				run: (*parser).callonListElementContinuationElement320,
																																			},
																																		},
																																	},
																																},
																																&labeledExpr{
																																	pos:   position{line: 1714, col: 14, offset: 56460},
																																	label: "depth",
																																	expr: &actionExpr{
																																		pos: position{line: 1714, col: 21, offset: 56467},
																																		run: (*parser).callonListElementContinuationElement322,
																																		expr: &litMatcher{
																																			pos:        position{line: 1714, col: 22, offset: 56468},
																																			val:        "-",
																																			ignoreCase: false,
																																			want:       "\"-\"",
																																		},
																																	},
																																},
																															},
																														},
																													},
																													&actionExpr{
																														pos: position{line: 3084, col: 11, offset: 100267},
																														run: (*parser).callonListElementContinuationElement324,
																														expr: &oneOrMoreExpr{
																															pos: position{line: 3084, col: 11, offset: 100267},
																															expr: &charClassMatcher{
																																pos:        position{line: 3084, col: 12, offset: 100268},
																																val:        "[ \\t]",
																																chars:      []rune{' ', '\t'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 1563, col: 9, offset: 51286},
																										expr: &actionExpr{
																											pos: position{line: 1797, col: 5, offset: 58810},
																											run: (*parser).callonListElementContinuationElement328,
																											expr: &seqExpr{
																												pos: position{line: 1797, col: 5, offset: 58810},
																												exprs: []interface{}{
																													&litMatcher{
																														pos:        position{line: 1797, col: 5, offset: 58810},
																														val:        "<",
																														ignoreCase: false,
																														want:       "\"<\"",
																													},
																													&labeledExpr{
																														pos:   position{line: 1797, col: 9, offset: 58814},
																														label: "ref",
																														expr: &actionExpr{
																															pos: position{line: 1797, col: 14, offset: 58819},
																															run: (*parser).callonListElementContinuationElement332,
																															expr: &oneOrMoreExpr{
																																pos: position{line: 1797, col: 14, offset: 58819},
																																expr: &charClassMatcher{
																																	pos:        position{line: 1797, col: 14, offset: 58819},
																																	val:        "[0-9]",
																																	ranges:     []rune{'0', '9'},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																														},
																													},
																													&litMatcher{
																														pos:        position{line: 1797, col: 62, offset: 58867},
																														val:        ">",
																														ignoreCase: false,
																														want:       "\">\"",
																													},
																													&actionExpr{
																														pos: position{line: 3084, col: 11, offset: 100267},
																														run: (*parser).callonListElementContinuationElement336,
																														expr: &oneOrMoreExpr{
																															pos: position{line: 3084, col: 11, offset: 100267},
																															expr: &charClassMatcher{
																																pos:        position{line: 3084, col: 12, offset: 100268},
																																val:        "[ \\t]",
																																chars:      []rune{' ', '\t'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 1564, col: 9, offset: 51320},
																										expr: &seqExpr{
																											pos: position{line: 1564, col: 11, offset: 51322},
																											exprs: []interface{}{
																												&actionExpr{
																													pos: position{line: 1741, col: 5, offset: 57188},
																													run: (*parser).callonListElementContinuationElement341,
																													expr: &oneOrMoreExpr{
																														pos: position{line: 1741, col: 5, offset: 57188},
																														expr: &seqExpr{
																															pos: position{line: 1741, col: 6, offset: 57189},
																															exprs: []interface{}{
																																&notExpr{
																																	pos: position{line: 1741, col: 6, offset: 57189},
																																	expr: &actionExpr{
																																		pos: position{line: 1746, col: 5, offset: 57339},
																																		run: (*parser).callonListElementContinuationElement345,
																																		expr: &seqExpr{
																																			pos: position{line: 1746, col: 5, offset: 57339},
																																			exprs: []interface{}{
																																				&labeledExpr{
																																					pos:   position{line: 1746, col: 5, offset: 57339},
																																					label: "separator",
																																					expr: &actionExpr{
																																						pos: position{line: 1746, col: 16, offset: 57350},
																																						run: (*parser).callonListElementContinuationElement348,
																																						expr: &oneOrMoreExpr{
																																							pos: position{line: 1746, col: 16, offset: 57350},
																																							expr: &litMatcher{
																																								pos:        position{line: 1746, col: 17, offset: 57351},
																																								val:        ":",
																																								ignoreCase: false,
																																								want:       "\":\"",
																																							},
																																						},
																																					},
																																				},
																																				&andCodeExpr{
																																					pos: position{line: 1749, col: 5, offset: 57408},
																																					run: (*parser).callonListElementContinuationElement351,
																																				},
																																			},
																																		},
																																	},
																																},
																																&notExpr{
																																	pos: position{line: 1741, col: 35, offset: 57218},
																																	expr: &choiceExpr{
																																		pos: position{line: 3096, col: 8, offset: 100524},
																																		alternatives: []interface{}{
																																			&actionExpr{
																																				pos: position{line: 3089, col: 12, offset: 100384},
																																				run: (*parser).callonListElementContinuationElement354,
																																				expr: &choiceExpr{
																																					pos: position{line: 3089, col: 13, offset: 100385},
																																					alternatives: []interface{}{
																																						&litMatcher{
																																							pos:        position{line: 3089, col: 13, offset: 100385},
																																							val:        "\n",
																																							ignoreCase: false,
																																							want:       "\"\\n\"",
																																						},
																																						&litMatcher{
																																							pos:        position{line: 3089, col: 20, offset: 100392},
																																							val:        "\r\n",
																																							ignoreCase: false,
																																							want:       "\"\\r\\n\"",
																																						},
																																						&litMatcher{
																																							pos:        position{line: 3089, col: 29, offset: 100401},
																																							val:        "\r",
																																							ignoreCase: false,
																																							want:       "\"\\r\"",
																																						},
																																					},
																																				},
																																			},
																																			&notExpr{
																																				pos: position{line: 3093, col: 8, offset: 100474},
																																				expr: &anyMatcher{
																																					line: 3093, col: 9, offset: 100475,
																																				},
																																			},
																																		},
																																	},
																																},
																																&anyMatcher{
																																	line: 1741, col: 40, offset: 57223,
																																},
																															},
																														},
																													},
																												},
																												&actionExpr{
																													pos: position{line: 1746, col: 5, offset: 57339},
																													run: (*parser).callonListElementContinuationElement362,
																													expr: &seqExpr{
																														pos: position{line: 1746, col: 5, offset: 57339},
																														exprs: []interface{}{
																															&labeledExpr{
																																pos:   position{line: 1746, col: 5, offset: 57339},
																																label: "separator",
																																expr: &actionExpr{
																																	pos: position{line: 1746, col: 16, offset: 57350},
																																	run: (*parser).callonListElementContinuationElement365,
																																	expr: &oneOrMoreExpr{
																																		pos: position{line: 1746, col: 16, offset: 57350},
																																		expr: &litMatcher{
																																			pos:        position{line: 1746, col: 17, offset: 57351},
																																			val:        ":",
																																			ignoreCase: false,
																																			want:       "\":\"",
																																		},
																																	},
																																},
																															},
																															&andCodeExpr{
																																pos: position{line: 1749, col: 5, offset: 57408},
																																run: (*parser).callonListElementContinuationElement368,
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 1565, col: 9, offset: 51382},
																										expr: &actionExpr{
																											pos: position{line: 736, col: 5, offset: 23847},
																											run: (*parser).callonListElementContinuationElement370,
																											expr: &seqExpr{
																												pos: position{line: 736, col: 5, offset: 23847},
																												exprs: []interface{}{
																													&notExpr{
																														pos: position{line: 736, col: 5, offset: 23847},
																														expr: &charClassMatcher{
																															pos:        position{line: 2994, col: 13, offset: 97463},
																															val:        "[0-9\\pL]",
																															ranges:     []rune{'0', '9'},
																															classes:    []*unicode.RangeTable{rangeTable("L")},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																													&labeledExpr{
																														pos:   position{line: 737, col: 5, offset: 23877},
																														label: "delimiter",
																														expr: &choiceExpr{
																															pos: position{line: 738, col: 9, offset: 23897},
																															alternatives: []interface{}{
																																&actionExpr{
																																	pos: position{line: 752, col: 5, offset: 24389},
																																	run: (*parser).callonListElementContinuationElement376,
																																	expr: &seqExpr{
																																		pos: position{line: 752, col: 5, offset: 24389},
																																		exprs: []interface{}{
																																			&labeledExpr{
																																				pos:   position{line: 752, col: 5, offset: 24389},
																																				label: "delimiter",
																																				expr: &actionExpr{
																																					pos: position{line: 752, col: 16, offset: 24400},
																																					run: (*parser).callonListElementContinuationElement379,
																																					expr: &seqExpr{
																																						pos: position{line: 752, col: 16, offset: 24400},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 752, col: 16, offset: 24400},
																																								val:        "////",
																																								ignoreCase: false,
																																								want:       "\"////\"",
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 752, col: 23, offset: 24407},
																																								expr: &litMatcher{
																																									pos:        position{line: 752, col: 23, offset: 24407},
																																									val:        "/",
																																									ignoreCase: false,
																																									want:       "\"/\"",
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&zeroOrMoreExpr{
																																				pos: position{line: 754, col: 8, offset: 24491},
																																				expr: &actionExpr{
																																					pos: position{line: 3080, col: 10, offset: 100200},
																																					run: (*parser).callonListElementContinuationElement385,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 3080, col: 11, offset: 100201},
																																						val:        "[ \\t]",
																																						chars:      []rune{' ', '\t'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																			&choiceExpr{
																																				pos: position{line: 3096, col: 8, offset: 100524},
																																				alternatives: []interface{}{
																																					&actionExpr{
																																						pos: position{line: 3089, col: 12, offset: 100384},
																																						run: (*parser).callonListElementContinuationElement388,
																																						expr: &choiceExpr{
																																							pos: position{line: 3089, col: 13, offset: 100385},
																																							alternatives: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 3089, col: 13, offset: 100385},
																																									val:        "\n",
																																									ignoreCase: false,
																																									want:       "\"\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 3089, col: 20, offset: 100392},
																																									val:        "\r\n",
																																									ignoreCase: false,
																																									want:       "\"\\r\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 3089, col: 29, offset: 100401},
																																									val:        "\r",
																																									ignoreCase: false,
																																									want:       "\"\\r\"",
																																								},
																																							},
																																						},
																																					},
																																					&notExpr{
																																						pos: position{line: 3093, col: 8, offset: 100474},
																																						expr: &anyMatcher{
																																							line: 3093, col: 9, offset: 100475,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 759, col: 5, offset: 24637},
																																	run: (*parser).callonListElementContinuationElement395,
																																	expr: &seqExpr{
																																		pos: position{line: 759, col: 5, offset: 24637},
																																		exprs: []interface{}{
																																			&labeledExpr{
																																				pos:   position{line: 759, col: 5, offset: 24637},
																																				label: "delimiter",
																																				expr: &actionExpr{
																																					pos: position{line: 759, col: 16, offset: 24648},
																																					run: (*parser).callonListElementContinuationElement398,
																																					expr: &seqExpr{
																																						pos: position{line: 759, col: 16, offset: 24648},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 759, col: 16, offset: 24648},
																																								val:        "====",
																																								ignoreCase: false,
																																								want:       "\"====\"",
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 759, col: 23, offset: 24655},
																																								expr: &litMatcher{
																																									pos:        position{line: 759, col: 23, offset: 24655},
																																									val:        "=",
																																									ignoreCase: false,
																																									want:       "\"=\"",
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&zeroOrMoreExpr{
																																				pos: position{line: 761, col: 8, offset: 24739},
																																				expr: &actionExpr{
																																					pos: position{line: 3080, col: 10, offset: 100200},
																																					run: (*parser).callonListElementContinuationElement404,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 3080, col: 11, offset: 100201},
																																						val:        "[ \\t]",
																																						chars:      []rune{' ', '\t'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																			&choiceExpr{
																																				pos: position{line: 3096, col: 8, offset: 100524},
																																				alternatives: []interface{}{
																																					&actionExpr{
																																						pos: position{line: 3089, col: 12, offset: 100384},
																																						run: (*parser).callonListElementContinuationElement407,
																																						expr: &choiceExpr{
																																							pos: position{line: 3089, col: 13, offset: 100385},
																																							alternatives: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 3089, col: 13, offset: 100385},
																																									val:        "\n",
																																									ignoreCase: false,
																																									want:       "\"\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 3089, col: 20, offset: 100392},
																																									val:        "\r\n",
																																									ignoreCase: false,
																																									want:       "\"\\r\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 3089, col: 29, offset: 100401},
																																									val:        "\r",
																																									ignoreCase: false,
																																									want:       "\"\\r\"",
																																								},
																																							},
																																						},
																																					},
																																					&notExpr{
																																						pos: position{line: 3093, col: 8, offset: 100474},
																																						expr: &anyMatcher{
																																							line: 3093, col: 9, offset: 100475,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 772, col: 26, offset: 25125},
																																	run: (*parser).callonListElementContinuationElement414,
																																	expr: &seqExpr{
																																		pos: position{line: 772, col: 26, offset: 25125},
																																		exprs: []interface{}{
																																			&litMatcher{
																																				pos:        position{line: 772, col: 26, offset: 25125},
																																				val:        "```",
																																				ignoreCase: false,
																																				want:       "\"```\"",
																																			},
																																			&labeledExpr{
																																				pos:   position{line: 772, col: 32, offset: 25131},
																																				label: "language",
																																				expr: &actionExpr{
																																					pos: position{line: 776, col: 13, offset: 25261},
																																					run: (*parser).callonListElementContinuationElement418,
																																					expr: &oneOrMoreExpr{
																																						pos: position{line: 776, col: 14, offset: 25262},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 776, col: 14, offset: 25262},
																																							val:        "[^\\r\\n` ]",
																																							chars:      []rune{'\r', '\n', '`', ' '},
																																							ignoreCase: false,
																																							inverted:   true,
																																						},
																																					},
																																				},
																																			},
																																			&zeroOrMoreExpr{
																																				pos: position{line: 772, col: 52, offset: 25151},
																																				expr: &actionExpr{
																																					pos: position{line: 3080, col: 10, offset: 100200},
																																					run: (*parser).callonListElementContinuationElement422,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 3080, col: 11, offset: 100201},
																																						val:        "[ \\t]",
																																						chars:      []rune{' ', '\t'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																			&choiceExpr{
																																				pos: position{line: 3096, col: 8, offset: 100524},
																																				alternatives: []interface{}{
																																					&actionExpr{
																																						pos: position{line: 3089, col: 12, offset: 100384},
																																						run: (*parser).callonListElementContinuationElement425,
																																						expr: &choiceExpr{
																																							pos: position{line: 3089, col: 13, offset: 100385},
																																							alternatives: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 3089, col: 13, offset: 100385},
																																									val:        "\n",
																																									ignoreCase: false,
																																									want:       "\"\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 3089, col: 20, offset: 100392},
																																									val:        "\r\n",
																																									ignoreCase: false,
																																									want:       "\"\\r\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 3089, col: 29, offset: 100401},
																																									val:        "\r",
																																									ignoreCase: false,
																																									want:       "\"\\r\"",
																																								},
																																							},
																																						},
																																					},
																																					&notExpr{
																																						pos: position{line: 3093, col: 8, offset: 100474},
																																						expr: &anyMatcher{
																																							line: 3093, col: 9, offset: 100475,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 766, col: 5, offset: 24884},
																																	run: (*parser).callonListElementContinuationElement432,
																																	expr: &seqExpr{
																																		pos: position{line: 766, col: 5, offset: 24884},
																																		exprs: []interface{}{
																																			&labeledExpr{
																																				pos:   position{line: 766, col: 5, offset: 24884},
																																				label: "delimiter",
																																				expr: &actionExpr{
																																					pos: position{line: 766, col: 16, offset: 24895},
																																					run: (*parser).callonListElementContinuationElement435,
																																					expr: &seqExpr{
																																						pos: position{line: 766, col: 16, offset: 24895},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 766, col: 16, offset: 24895},
																																								val:        "```",
																																								ignoreCase: false,
																																								want:       "\"```\"",
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 766, col: 22, offset: 24901},
																																								expr: &litMatcher{
																																									pos:        position{line: 766, col: 22, offset: 24901},
																																									val:        "`",
																																									ignoreCase: false,
																																									want:       "\"`\"",
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&zeroOrMoreExpr{
																																				pos: position{line: 768, col: 8, offset: 24985},
																																				expr: &actionExpr{
																																					pos: position{line: 3080, col: 10, offset: 100200},
																																					run: (*parser).callonListElementContinuationElement441,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 3080, col: 11, offset: 100201},
																																						val:        "[ \\t]",
																																						chars:      []rune{' ', '\t'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																			&choiceExpr{
																																				pos: position{line: 3096, col: 8, offset: 100524},
																																				alternatives: []interface{}{
																																					&actionExpr{
																																						pos: position{line: 3089, col: 12, offset: 100384},
																																						run: (*parser).callonListElementContinuationElement444,
																																						expr: &choiceExpr{
																																							pos: position{line: 3089, col: 13, offset: 100385},
																																							alternatives: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 3089, col: 13, offset: 100385},
																																									val:        "\n",
																																									ignoreCase: false,
																																									want:       "\"\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 3089, col: 20, offset: 100392},
																																									val:        "\r\n",
																																									ignoreCase: false,
																																									want:       "\"\\r\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 3089, col: 29, offset: 100401},
																																									val:        "\r",
																																									ignoreCase: false,
																																									want:       "\"\\r\"",
																																								},
																																							},
																																						},
																																					},
																																					&notExpr{
																																						pos: position{line: 3093, col: 8, offset: 100474},
																																						expr: &anyMatcher{
																																							line: 3093, col: 9, offset: 100475,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 781, col: 5, offset: 25421},
																																	run: (*parser).callonListElementContinuationElement451,
																																	expr: &seqExpr{
																																		pos: position{line: 781, col: 5, offset: 25421},
																																		exprs: []interface{}{
																																			&labeledExpr{
																																				pos:   position{line: 781, col: 5, offset: 25421},
																																				label: "delimiter",
																																				expr: &actionExpr{
																																					pos: position{line: 781, col: 16, offset: 25432},
																																					run: (*parser).callonListElementContinuationElement454,
																																					expr: &seqExpr{
																																						pos: position{line: 781, col: 16, offset: 25432},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 781, col: 16, offset: 25432},
																																								val:        "----",
																																								ignoreCase: false,
																																								want:       "\"----\"",
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 781, col: 23, offset: 25439},
																																								expr: &litMatcher{
																																									pos:        position{line: 781, col: 23, offset: 25439},
																																									val:        "-",
																																									ignoreCase: false,
																																									want:       "\"-\"",
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&zeroOrMoreExpr{
																																				pos: position{line: 783, col: 8, offset: 25523},
																																				expr: &actionExpr{
																																					pos: position{line: 3080, col: 10, offset: 100200},
																																					run: (*parser).callonListElementContinuationElement460,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 3080, col: 11, offset: 100201},
																																						val:        "[ \\t]",
																																						chars:      []rune{' ', '\t'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																			&choiceExpr{
																																				pos: position{line: 3096, col: 8, offset: 100524},
																																				alternatives: []interface{}{
																																					&actionExpr{
																																						pos: position{line: 3089, col: 12, offset: 100384},
																																						run: (*parser).callonListElementContinuationElement463,
																																						expr: &choiceExpr{
																																							pos: position{line: 3089, col: 13, offset: 100385},
																																							alternatives: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 3089, col: 13, offset: 100385},
																																									val:        "\n",
																																									ignoreCase: false,
																																									want:       "\"\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 3089, col: 20, offset: 100392},
																																									val:        "\r\n",
																																									ignoreCase: false,
																																									want:       "\"\\r\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 3089, col: 29, offset: 100401},
																																									val:        "\r",
																																									ignoreCase: false,
																																									want:       "\"\\r\"",
																																								},
																																							},
																																						},
																																					},
																																					&notExpr{
																																						pos: position{line: 3093, col: 8, offset: 100474},
																																						expr: &anyMatcher{
																																							line: 3093, col: 9, offset: 100475,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 788, col: 5, offset: 25669},
																																	run: (*parser).callonListElementContinuationElement470,
																																	expr: &seqExpr{
																																		pos: position{line: 788, col: 5, offset: 25669},
																																		exprs: []interface{}{
																																			&labeledExpr{
																																				pos:   position{line: 788, col: 5, offset: 25669},
																																				label: "delimiter",
																																				expr: &actionExpr{
																																					pos: position{line: 788, col: 16, offset: 25680},
																																					run: (*parser).callonListElementContinuationElement473,
																																					expr: &seqExpr{
																																						pos: position{line: 788, col: 16, offset: 25680},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 788, col: 16, offset: 25680},
																																								val:        "....",
																																								ignoreCase: false,
																																								want:       "\"....\"",
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 788, col: 23, offset: 25687},
																																								expr: &litMatcher{
																																									pos:        position{line: 788, col: 23, offset: 25687},
																																									val:        ".",
																																									ignoreCase: false,
																																									want:       "\".\"",
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&zeroOrMoreExpr{
																																				pos: position{line: 790, col: 8, offset: 25771},
																																				expr: &actionExpr{
																																					pos: position{line: 3080, col: 10, offset: 100200},
																																					run: (*parser).callonListElementContinuationElement479,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 3080, col: 11, offset: 100201},
																																						val:        "[ \\t]",
																																						chars:      []rune{' ', '\t'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																			&choiceExpr{
																																				pos: position{line: 3096, col: 8, offset: 100524},
																																				alternatives: []interface{}{
																																					&actionExpr{
																																						pos: position{line: 3089, col: 12, offset: 100384},
																																						run: (*parser).callonListElementContinuationElement482,
																																						expr: &choiceExpr{
																																							pos: position{line: 3089, col: 13, offset: 100385},
																																							alternatives: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 3089, col: 13, offset: 100385},
																																									val:        "\n",
																																									ignoreCase: false,
																																									want:       "\"\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 3089, col: 20, offset: 100392},
																																									val:        "\r\n",
																																									ignoreCase: false,
																																									want:       "\"\\r\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 3089, col: 29, offset: 100401},
																																									val:        "\r",
																																									ignoreCase: false,
																																									want:       "\"\\r\"",
																																								},
																																							},
																																						},
																																					},
																																					&notExpr{
																																						pos: position{line: 3093, col: 8, offset: 100474},
																																						expr: &anyMatcher{
																																							line: 3093, col: 9, offset: 100475,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 795, col: 5, offset: 25921},
																																	run: (*parser).callonListElementContinuationElement489,
																																	expr: &seqExpr{
																																		pos: position{line: 795, col: 5, offset: 25921},
																																		exprs: []interface{}{
																																			&labeledExpr{
																																				pos:   position{line: 795, col: 5, offset: 25921},
																																				label: "delimiter",
																																				expr: &actionExpr{
																																					pos: position{line: 795, col: 16, offset: 25932},
																																					run: (*parser).callonListElementContinuationElement492,
																																					expr: &seqExpr{
																																						pos: position{line: 795, col: 16, offset: 25932},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 795, col: 16, offset: 25932},
																																								val:        "++++",
																																								ignoreCase: false,
																																								want:       "\"++++\"",
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 795, col: 23, offset: 25939},
																																								expr: &litMatcher{
																																									pos:        position{line: 795, col: 23, offset: 25939},
																																									val:        "+",
																																									ignoreCase: false,
																																									want:       "\"+\"",
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&zeroOrMoreExpr{
																																				pos: position{line: 797, col: 8, offset: 26023},
																																				expr: &actionExpr{
																																					pos: position{line: 3080, col: 10, offset: 100200},
																																					run: (*parser).callonListElementContinuationElement498,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 3080, col: 11, offset: 100201},
																																						val:        "[ \\t]",
																																						chars:      []rune{' ', '\t'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																			&choiceExpr{
																																				pos: position{line: 3096, col: 8, offset: 100524},
																																				alternatives: []interface{}{
																																					&actionExpr{
																																						pos: position{line: 3089, col: 12, offset: 100384},
																																						run: (*parser).callonListElementContinuationElement501,
																																						expr: &choiceExpr{
																																							pos: position{line: 3089, col: 13, offset: 100385},
																																							alternatives: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 3089, col: 13, offset: 100385},
																																									val:        "\n",
																																									ignoreCase: false,
																																									want:       "\"\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 3089, col: 20, offset: 100392},
																																									val:        "\r\n",
																																									ignoreCase: false,
																																									want:       "\"\\r\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 3089, col: 29, offset: 100401},
																																									val:        "\r",
																																									ignoreCase: false,
																																									want:       "\"\\r\"",
																																								},
																																							},
																																						},
																																					},
																																					&notExpr{
																																						pos: position{line: 3093, col: 8, offset: 100474},
																																						expr: &anyMatcher{
																																							line: 3093, col: 9, offset: 100475,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 802, col: 5, offset: 26171},
																																	run: (*parser).callonListElementContinuationElement508,
																																	expr: &seqExpr{
																																		pos: position{line: 802, col: 5, offset: 26171},
																																		exprs: []interface{}{
																																			&labeledExpr{
																																				pos:   position{line: 802, col: 5, offset: 26171},
																																				label: "delimiter",
																																				expr: &actionExpr{
																																					pos: position{line: 802, col: 16, offset: 26182},
																																					run: (*parser).callonListElementContinuationElement511,
																																					expr: &seqExpr{
																																						pos: position{line: 802, col: 16, offset: 26182},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 802, col: 16, offset: 26182},
																																								val:        "____",
																																								ignoreCase: false,
																																								want:       "\"____\"",
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 802, col: 23, offset: 26189},
																																								expr: &litMatcher{
																																									pos:        position{line: 802, col: 23, offset: 26189},
																																									val:        "_",
																																									ignoreCase: false,
																																									want:       "\"_\"",
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&zeroOrMoreExpr{
																																				pos: position{line: 804, col: 8, offset: 26273},
																																				expr: &actionExpr{
																																					pos: position{line: 3080, col: 10, offset: 100200},
																																					run: (*parser).callonListElementContinuationElement517,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 3080, col: 11, offset: 100201},
																																						val:        "[ \\t]",
																																						chars:      []rune{' ', '\t'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																			&choiceExpr{
																																				pos: position{line: 3096, col: 8, offset: 100524},
																																				alternatives: []interface{}{
																																					&actionExpr{
																																						pos: position{line: 3089, col: 12, offset: 100384},
																																						run: (*parser).callonListElementContinuationElement520,
																																						expr: &choiceExpr{
																																							pos: position{line: 3089, col: 13, offset: 100385},
																																							alternatives: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 3089, col: 13, offset: 100385},
																																									val:        "\n",
																																									ignoreCase: false,
																																									want:       "\"\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 3089, col: 20, offset: 100392},
																																									val:        "\r\n",
																																									ignoreCase: false,
																																									want:       "\"\\r\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 3089, col: 29, offset: 100401},
																																									val:        "\r",
																																									ignoreCase: false,
																																									want:       "\"\\r\"",
																																								},
																																							},
																																						},
																																					},
																																					&notExpr{
																																						pos: position{line: 3093, col: 8, offset: 100474},
																																						expr: &anyMatcher{
																																							line: 3093, col: 9, offset: 100475,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 809, col: 5, offset: 26417},
																																	run: (*parser).callonListElementContinuationElement527,
																																	expr: &seqExpr{
																																		pos: position{line: 809, col: 5, offset: 26417},
																																		exprs: []interface{}{
																																			&labeledExpr{
																																				pos:   position{line: 809, col: 5, offset: 26417},
																																				label: "delimiter",
																																				expr: &actionExpr{
																																					pos: position{line: 809, col: 16, offset: 26428},
																																					run: (*parser).callonListElementContinuationElement530,
																																					expr: &seqExpr{
																																						pos: position{line: 809, col: 16, offset: 26428},
																																						exprs: []interface{}{
																																							&litMatcher{
																																								pos:        position{line: 809, col: 16, offset: 26428},
																																								val:        "****",
																																								ignoreCase: false,
																																								want:       "\"****\"",
																																							},
																																							&zeroOrMoreExpr{
																																								pos: position{line: 809, col: 23, offset: 26435},
																																								expr: &litMatcher{
																																									pos:        position{line: 809, col: 23, offset: 26435},
																																									val:        "*",
																																									ignoreCase: false,
																																									want:       "\"*\"",
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																			&zeroOrMoreExpr{
																																				pos: position{line: 811, col: 8, offset: 26519},
																																				expr: &actionExpr{
																																					pos: position{line: 3080, col: 10, offset: 100200},
																																					run: (*parser).callonListElementContinuationElement536,
																																					expr: &charClassMatcher{
																																						pos:        position{line: 3080, col: 11, offset: 100201},
																																						val:        "[ \\t]",
																																						chars:      []rune{' ', '\t'},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																				},
																																			},
																																			&choiceExpr{
																																				pos: position{line: 3096, col: 8, offset: 100524},
																																				alternatives: []interface{}{
																																					&actionExpr{
																																						pos: position{line: 3089, col: 12, offset: 100384},
																																						run: (*parser).callonListElementContinuationElement539,
																																						expr: &choiceExpr{
																																							pos: position{line: 3089, col: 13, offset: 100385},
																																							alternatives: []interface{}{
																																								&litMatcher{
																																									pos:        position{line: 3089, col: 13, offset: 100385},
																																									val:        "\n",
																																									ignoreCase: false,
																																									want:       "\"\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 3089, col: 20, offset: 100392},
																																									val:        "\r\n",
																																									ignoreCase: false,
																																									want:       "\"\\r\\n\"",
																																								},
																																								&litMatcher{
																																									pos:        position{line: 3089, col: 29, offset: 100401},
																																									val:        "\r",
																																									ignoreCase: false,
																																									want:       "\"\\r\"",
																																								},
																																							},
																																						},
																																					},
																																					&notExpr{
																																						pos: position{line: 3093, col: 8, offset: 100474},
																																						expr: &anyMatcher{
																																							line: 3093, col: 9, offset: 100475,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																									&labeledExpr{
																										pos:   position{line: 1566, col: 9, offset: 51406},
																										label: "content",
																										expr: &actionExpr{
																											pos: position{line: 1566, col: 18, offset: 51415},
																											run: (*parser).callonListElementContinuationElement547,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 1566, col: 18, offset: 51415},
																												expr: &charClassMatcher{
																													pos:        position{line: 1566, col: 18, offset: 51415},
																													val:        "[^\\r\\n]",
																													chars:      []rune{'\r', '\n'},
																													ignoreCase: false,
																													inverted:   true,
																												},
																											},
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 3096, col: 8, offset: 100524},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 3089, col: 12, offset: 100384},
																												run: (*parser).callonListElementContinuationElement551,
																												expr: &choiceExpr{
																													pos: position{line: 3089, col: 13, offset: 100385},
																													alternatives: []interface{}{
																														&litMatcher{
																															pos:        position{line: 3089, col: 13, offset: 100385},
																															val:        "\n",
																															ignoreCase: false,
																															want:       "\"\\n\"",
																														},
																														&litMatcher{
																															pos:        position{line: 3089, col: 20, offset: 100392},
																															val:        "\r\n",
																															ignoreCase: false,
																															want:       "\"\\r\\n\"",
																														},
																														&litMatcher{
																															pos:        position{line: 3089, col: 29, offset: 100401},
																															val:        "\r",
																															ignoreCase: false,
																															want:       "\"\\r\"",
																														},
																													},
																												},
																											},
																											&notExpr{
																												pos: position{line: 3093, col: 8, offset: 100474},
																												expr: &anyMatcher{
																													line: 3093, col: 9, offset: 100475,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 1769, col: 9, offset: 58006},
																run: (*parser).callonListElementContinuationElement558,
																expr: &seqExpr{
																	pos: position{line: 1769, col: 9, offset: 58006},
																	exprs: []interface{}{
																		&actionExpr{
																			pos: position{line: 3084, col: 11, offset: 100267},
																			run: (*parser).callonListElementContinuationElement560,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 3084, col: 11, offset: 100267},
																				expr: &charClassMatcher{
																					pos:        position{line: 3084, col: 12, offset: 100268},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 1770, col: 9, offset: 58058},
																			label: "content",
																			expr: &actionExpr{
																				pos: position{line: 1770, col: 18, offset: 58067},
																				run: (*parser).callonListElementContinuationElement564,
																				expr: &oneOrMoreExpr{
																					pos: position{line: 1770, col: 18, offset: 58067},
																					expr: &charClassMatcher{
																						pos:        position{line: 1770, col: 18, offset: 58067},
																						val:        "[^\\r\\n]",
																						chars:      []rune{'\r', '\n'},
																						ignoreCase: false,
																						inverted:   true,
																					},
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 3096, col: 8, offset: 100524},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 3089, col: 12, offset: 100384},
																					run: (*parser).callonListElementContinuationElement568,
																					expr: &choiceExpr{
																						pos: position{line: 3089, col: 13, offset: 100385},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 3089, col: 13, offset: 100385},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 3089, col: 20, offset: 100392},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 3089, col: 29, offset: 100401},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 3093, col: 8, offset: 100474},
																					expr: &anyMatcher{
																						line: 3093, col: 9, offset: 100475,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1598, col: 5, offset: 52278},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1598, col: 16, offset: 52289},
								expr: &ruleRefExpr{
									pos:  position{line: 1598, col: 17, offset: 52290},
									name: "BlockAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1599, col: 5, offset: 52312},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1600, col: 9, offset: 52330},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 690, col: 14, offset: 22312},
										run: (*parser).callonListElementContinuationElement580,
										expr: &seqExpr{
											pos: position{line: 690, col: 14, offset: 22312},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 690, col: 14, offset: 22312},
													expr: &notExpr{
														pos: position{line: 3093, col: 8, offset: 100474},
														expr: &anyMatcher{
															line: 3093, col: 9, offset: 100475,
														},
													},
												},
												&zeroOrMoreExpr{
													pos: position{line: 690, col: 19, offset: 22317},
													expr: &actionExpr{
														pos: position{line: 3080, col: 10, offset: 100200},
														run: (*parser).callonListElementContinuationElement586,
														expr: &charClassMatcher{
															pos:        position{line: 3080, col: 11, offset: 100201},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&choiceExpr{
													pos: position{line: 3096, col: 8, offset: 100524},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 3089, col: 12, offset: 100384},
															run: (*parser).callonListElementContinuationElement589,
															expr: &choiceExpr{
																pos: position{line: 3089, col: 13, offset: 100385},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 3089, col: 13, offset: 100385},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 3089, col: 20, offset: 100392},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 3089, col: 29, offset: 100401},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 3093, col: 8, offset: 100474},
															expr: &anyMatcher{
																line: 3093, col: 9, offset: 100475,
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1601, col: 11, offset: 52350},
										name: "AttributeDeclaration",
									},
									&actionExpr{
										pos: position{line: 364, col: 19, offset: 11171},
										run: (*parser).callonListElementContinuationElement597,
										expr: &seqExpr{
											pos: position{line: 364, col: 19, offset: 11171},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 364, col: 19, offset: 11171},
													val:        ":!",
													ignoreCase: false,
													want:       "\":!\"",
												},
												&labeledExpr{
													pos:   position{line: 364, col: 24, offset: 11176},
													label: "name",
													expr: &actionExpr{
														pos: position{line: 324, col: 18, offset: 10072},
														run: (*parser).callonListElementContinuationElement601,
														expr: &seqExpr{
															pos: position{line: 324, col: 18, offset: 10072},
															exprs: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 324, col: 18, offset: 10072},
																	val:        "[_0-9\\pL]",
																	chars:      []rune{'_'},
																	ranges:     []rune{'0', '9'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
																&zeroOrMoreExpr{
																	pos: position{line: 324, col: 28, offset: 10082},
																	expr: &charClassMatcher{
																		pos:        position{line: 324, col: 29, offset: 10083},
																		val:        "[-0-9\\pL]",
																		chars:      []rune{'-'},
																		ranges:     []rune{'0', '9'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 364, col: 45, offset: 11197},
													val:        ":",
													ignoreCase: false,
													want:       "\":\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 364, col: 49, offset: 11201},
													expr: &actionExpr{
														pos: position{line: 3080, col: 10, offset: 100200},
														run: (*parser).callonListElementContinuationElement608,
														expr: &charClassMatcher{
															pos:        position{line: 3080, col: 11, offset: 100201},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&choiceExpr{
													pos: position{line: 3096, col: 8, offset: 100524},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 3089, col: 12, offset: 100384},
															run: (*parser).callonListElementContinuationElement611,
															expr: &choiceExpr{
																pos: position{line: 3089, col: 13, offset: 100385},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 3089, col: 13, offset: 100385},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 3089, col: 20, offset: 100392},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 3089, col: 29, offset: 100401},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 3093, col: 8, offset: 100474},
															expr: &anyMatcher{
																line: 3093, col: 9, offset: 100475,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 366, col: 9, offset: 11292},
										run: (*parser).callonListElementContinuationElement618,
										expr: &seqExpr{
											pos: position{line: 366, col: 9, offset: 11292},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 366, col: 9, offset: 11292},
													val:        ":",
													ignoreCase: false,
													want:       "\":\"",
												},
												&labeledExpr{
													pos:   position{line: 366, col: 13, offset: 11296},
													label: "name",
													expr: &actionExpr{
														pos: position{line: 324, col: 18, offset: 10072},
														run: (*parser).callonListElementContinuationElement622,
														expr: &seqExpr{
															pos: position{line: 324, col: 18, offset: 10072},
															exprs: []interface{}{
																&charClassMatcher{
																	pos:        position{line: 324, col: 18, offset: 10072},
																	val:        "[_0-9\\pL]",
																	chars:      []rune{'_'},
																	ranges:     []rune{'0', '9'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
																&zeroOrMoreExpr{
																	pos: position{line: 324, col: 28, offset: 10082},
																	expr: &charClassMatcher{
																		pos:        position{line: 324, col: 29, offset: 10083},
																		val:        "[-0-9\\pL]",
																		chars:      []rune{'-'},
																		ranges:     []rune{'0', '9'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 366, col: 34, offset: 11317},
													val:        "!:",
													ignoreCase: false,
													want:       "\"!:\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 366, col: 39, offset: 11322},
													expr: &actionExpr{
														pos: position{line: 3080, col: 10, offset: 100200},
														run: (*parser).callonListElementContinuationElement629,
														expr: &charClassMatcher{
															pos:        position{line: 3080, col: 11, offset: 100201},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&choiceExpr{
													pos: position{line: 3096, col: 8, offset: 100524},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 3089, col: 12, offset: 100384},
															run: (*parser).callonListElementContinuationElement632,
															expr: &choiceExpr{
																pos: position{line: 3089, col: 13, offset: 100385},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 3089, col: 13, offset: 100385},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 3089, col: 20, offset: 100392},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 3089, col: 29, offset: 100401},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 3093, col: 8, offset: 100474},
															expr: &anyMatcher{
																line: 3093, col: 9, offset: 100475,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 827, col: 5, offset: 26970},
										run: (*parser).callonListElementContinuationElement639,
										expr: &seqExpr{
											pos: position{line: 827, col: 5, offset: 26970},
											exprs: []interface{}{
												&actionExpr{
													pos: position{line: 752, col: 5, offset: 24389},
													run: (*parser).callonListElementContinuationElement641,
													expr: &seqExpr{
														pos: position{line: 752, col: 5, offset: 24389},
														exprs: []interface{}{
															&labeledExpr{
																pos:   position{line: 752, col: 5, offset: 24389},
																label: "delimiter",
																expr: &actionExpr{
																	pos: position{line: 752, col: 16, offset: 24400},
																	run: (*parser).callonListElementContinuationElement644,
																	expr: &seqExpr{
																		pos: position{line: 752, col: 16, offset: 24400},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 752, col: 16, offset: 24400},
																				val:        "////",
																				ignoreCase: false,
																				want:       "\"////\"",
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 752, col: 23, offset: 24407},
																				expr: &litMatcher{
																					pos:        position{line: 752, col: 23, offset: 24407},
																					val:        "/",
																					ignoreCase: false,
																					want:       "\"/\"",
																				},
																			},
																		},
																	},
																},
															},
															&zeroOrMoreExpr{
																pos: position{line: 754, col: 8, offset: 24491},
																expr: &actionExpr{
																	pos: position{line: 3080, col: 10, offset: 100200},
																	run: (*parser).callonListElementContinuationElement650,
																	expr: &charClassMatcher{
																		pos:        position{line: 3080, col: 11, offset: 100201},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 3096, col: 8, offset: 100524},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 3089, col: 12, offset: 100384},
																		run: (*parser).callonListElementContinuationElement653,
																		expr: &choiceExpr{
																			pos: position{line: 3089, col: 13, offset: 100385},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 3089, col: 13, offset: 100385},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 3089, col: 20, offset: 100392},
																					val:        "\r\n",
																					ignoreCase: false,
																					want:       "\"\\r\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 3089, col: 29, offset: 100401},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 3093, col: 8, offset: 100474},
																		expr: &anyMatcher{
																			line: 3093, col: 9, offset: 100475,
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 828, col: 5, offset: 27001},
													label: "content",
													expr: &zeroOrMoreExpr{
														pos: position{line: 838, col: 5, offset: 27287},
														expr: &actionExpr{
															pos: position{line: 838, col: 6, offset: 27288},
															run: (*parser).callonListElementContinuationElement662,
															expr: &seqExpr{
																pos: position{line: 838, col: 6, offset: 27288},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 838, col: 6, offset: 27288},
																		expr: &choiceExpr{
																			pos: position{line: 835, col: 29, offset: 27230},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 752, col: 5, offset: 24389},
																					run: (*parser).callonListElementContinuationElement666,
																					expr: &seqExpr{
																						pos: position{line: 752, col: 5, offset: 24389},
																						exprs: []interface{}{
																							&labeledExpr{
																								pos:   position{line: 752, col: 5, offset: 24389},
																								label: "delimiter",
																								expr: &actionExpr{
																									pos: position{line: 752, col: 16, offset: 24400},
																									run: (*parser).callonListElementContinuationElement669,
																									expr: &seqExpr{
																										pos: position{line: 752, col: 16, offset: 24400},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 752, col: 16, offset: 24400},
																												val:        "////",
																												ignoreCase: false,
																												want:       "\"////\"",
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 752, col: 23, offset: 24407},
																												expr: &litMatcher{
																													pos:        position{line: 752, col: 23, offset: 24407},
																													val:        "/",
																													ignoreCase: false,
																													want:       "\"/\"",
																												},
																											},
																										},
																									},
																								},
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 754, col: 8, offset: 24491},
																								expr: &actionExpr{
																									pos: position{line: 3080, col: 10, offset: 100200},
																									run: (*parser).callonListElementContinuationElement675,
																									expr: &charClassMatcher{
																										pos:        position{line: 3080, col: 11, offset: 100201},
																										val:        "[ \\t]",
																										chars:      []rune{' ', '\t'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 3096, col: 8, offset: 100524},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 3089, col: 12, offset: 100384},
																										run: (*parser).callonListElementContinuationElement678,
																										expr: &choiceExpr{
																											pos: position{line: 3089, col: 13, offset: 100385},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 3089, col: 13, offset: 100385},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 3089, col: 20, offset: 100392},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 3089, col: 29, offset: 100401},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 3093, col: 8, offset: 100474},
																										expr: &anyMatcher{
																											line: 3093, col: 9, offset: 100475,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 3093, col: 8, offset: 100474},
																					expr: &anyMatcher{
																						line: 3093, col: 9, offset: 100475,
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 839, col: 5, offset: 27318},
																		label: "line",
																		expr: &actionExpr{
																			pos: position{line: 816, col: 5, offset: 26665},
																			run: (*parser).callonListElementContinuationElement688,
																			expr: &seqExpr{
																				pos: position{line: 816, col: 5, offset: 26665},
																				exprs: []interface{}{
																					&notExpr{
																						pos: position{line: 816, col: 5, offset: 26665},
																						expr: &notExpr{
																							pos: position{line: 3093, col: 8, offset: 100474},
																							expr: &anyMatcher{
																								line: 3093, col: 9, offset: 100475,
																							},
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 817, col: 5, offset: 26738},
																						label: "content",
																						expr: &actionExpr{
																							pos: position{line: 817, col: 14, offset: 26747},
																							run: (*parser).callonListElementContinuationElement694,
																							expr: &zeroOrMoreExpr{
																								pos: position{line: 817, col: 14, offset: 26747},
																								expr: &charClassMatcher{
																									pos:        position{line: 817, col: 14, offset: 26747},
																									val:        "[^\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 3096, col: 8, offset: 100524},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 3089, col: 12, offset: 100384},
																								run: (*parser).callonListElementContinuationElement698,
																								expr: &choiceExpr{
																									pos: position{line: 3089, col: 13, offset: 100385},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 3089, col: 13, offset: 100385},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 3089, col: 20, offset: 100392},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 3089, col: 29, offset: 100401},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 3093, col: 8, offset: 100474},
																								expr: &anyMatcher{
																									line: 3093, col: 9, offset: 100475,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 829, col: 5, offset: 27035},
													expr: &choiceExpr{
														pos: position{line: 835, col: 29, offset: 27230},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 752, col: 5, offset: 24389},
																run: (*parser).callonListElementContinuationElement707,
																expr: &seqExpr{
																	pos: position{line: 752, col: 5, offset: 24389},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 752, col: 5, offset: 24389},
																			label: "delimiter",
																			expr: &actionExpr{
																				pos: position{line: 752, col: 16, offset: 24400},
																				run: (*parser).callonListElementContinuationElement710,
																				expr: &seqExpr{
																					pos: position{line: 752, col: 16, offset: 24400},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 752, col: 16, offset: 24400},
																							val:        "////",
																							ignoreCase: false,
																							want:       "\"////\"",
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 752, col: 23, offset: 24407},
																							expr: &litMatcher{
																								pos:        position{line: 752, col: 23, offset: 24407},
																								val:        "/",
																								ignoreCase: false,
																								want:       "\"/\"",
																							},
																						},
																					},
																				},
																			},
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 754, col: 8, offset: 24491},
																			expr: &actionExpr{
																				pos: position{line: 3080, col: 10, offset: 100200},
																				run: (*parser).callonListElementContinuationElement716,
																				expr: &charClassMatcher{
																					pos:        position{line: 3080, col: 11, offset: 100201},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&choiceExpr{
																			pos: position{line: 3096, col: 8, offset: 100524},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 3089, col: 12, offset: 100384},
																					run: (*parser).callonListElementContinuationElement719,
																					expr: &choiceExpr{
																						pos: position{line: 3089, col: 13, offset: 100385},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 3089, col: 13, offset: 100385},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 3089, col: 20, offset: 100392},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 3089, col: 29, offset: 100401},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 3093, col: 8, offset: 100474},
																					expr: &anyMatcher{
																						line: 3093, col: 9, offset: 100475,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&notExpr{
																pos: position{line: 3093, col: 8, offset: 100474},
																expr: &anyMatcher{
																	line: 3093, col: 9, offset: 100475,
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 847, col: 5, offset: 27471},
										run: (*parser).callonListElementContinuationElement728,
										expr: &seqExpr{
											pos: position{line: 847, col: 5, offset: 27471},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 847, col: 5, offset: 27471},
													label: "start",
													expr: &actionExpr{
														pos: position{line: 759, col: 5, offset: 24637},
														run: (*parser).callonListElementContinuationElement731,
														expr: &seqExpr{
															pos: position{line: 759, col: 5, offset: 24637},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 759, col: 5, offset: 24637},
																	label: "delimiter",
																	expr: &actionExpr{
																		pos: position{line: 759, col: 16, offset: 24648},
																		run: (*parser).callonListElementContinuationElement734,
																		expr: &seqExpr{
																			pos: position{line: 759, col: 16, offset: 24648},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 759, col: 16, offset: 24648},
																					val:        "====",
																					ignoreCase: false,
																					want:       "\"====\"",
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 759, col: 23, offset: 24655},
																					expr: &litMatcher{
																						pos:        position{line: 759, col: 23, offset: 24655},
																						val:        "=",
																						ignoreCase: false,
																						want:       "\"=\"",
																					},
																				},
																			},
																		},
																	},
																},
																&zeroOrMoreExpr{
																	pos: position{line: 761, col: 8, offset: 24739},
																	expr: &actionExpr{
																		pos: position{line: 3080, col: 10, offset: 100200},
																		run: (*parser).callonListElementContinuationElement740,
																		expr: &charClassMatcher{
																			pos:        position{line: 3080, col: 11, offset: 100201},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 3096, col: 8, offset: 100524},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 3089, col: 12, offset: 100384},
																			run: (*parser).callonListElementContinuationElement743,
																			expr: &choiceExpr{
																				pos: position{line: 3089, col: 13, offset: 100385},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 3089, col: 13, offset: 100385},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 3089, col: 20, offset: 100392},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 3089, col: 29, offset: 100401},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 3093, col: 8, offset: 100474},
																			expr: &anyMatcher{
																				line: 3093, col: 9, offset: 100475,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 848, col: 5, offset: 27510},
													run: (*parser).callonListElementContinuationElement750,
												},
												&labeledExpr{
													pos:   position{line: 851, col: 5, offset: 27602},
													label: "content",
													expr: &zeroOrMoreExpr{
														pos: position{line: 866, col: 4, offset: 27999},
														expr: &actionExpr{
															pos: position{line: 866, col: 5, offset: 28000},
															run: (*parser).callonListElementContinuationElement753,
															expr: &seqExpr{
																pos: position{line: 866, col: 5, offset: 28000},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 866, col: 5, offset: 28000},
																		expr: &choiceExpr{
																			pos: position{line: 859, col: 5, offset: 27842},
																			alternatives: []interface{}{
																				&seqExpr{
																					pos: position{line: 859, col: 5, offset: 27842},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 859, col: 5, offset: 27842},
																							label: "end",
																							expr: &actionExpr{
																								pos: position{line: 759, col: 5, offset: 24637},
																								run: (*parser).callonListElementContinuationElement759,
																								expr: &seqExpr{
																									pos: position{line: 759, col: 5, offset: 24637},
																									exprs: []interface{}{
																										&labeledExpr{
																											pos:   position{line: 759, col: 5, offset: 24637},
																											label: "delimiter",
																											expr: &actionExpr{
																												pos: position{line: 759, col: 16, offset: 24648},
																												run: (*parser).callonListElementContinuationElement762,
																												expr: &seqExpr{
																													pos: position{line: 759, col: 16, offset: 24648},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 759, col: 16, offset: 24648},
																															val:        "====",
																															ignoreCase: false,
																															want:       "\"====\"",
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 759, col: 23, offset: 24655},
																															expr: &litMatcher{
																																pos:        position{line: 759, col: 23, offset: 24655},
																																val:        "=",
																																ignoreCase: false,
																																want:       "\"=\"",
																															},
																														},
																													},
																												},
																											},
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 761, col: 8, offset: 24739},
																											expr: &actionExpr{
																												pos: position{line: 3080, col: 10, offset: 100200},
																												run: (*parser).callonListElementContinuationElement768,
																												expr: &charClassMatcher{
																													pos:        position{line: 3080, col: 11, offset: 100201},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 3096, col: 8, offset: 100524},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 3089, col: 12, offset: 100384},
																													run: (*parser).callonListElementContinuationElement771,
																													expr: &choiceExpr{
																														pos: position{line: 3089, col: 13, offset: 100385},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 3089, col: 13, offset: 100385},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 3089, col: 20, offset: 100392},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 3089, col: 29, offset: 100401},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 3093, col: 8, offset: 100474},
																													expr: &anyMatcher{
																														line: 3093, col: 9, offset: 100475,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&andCodeExpr{
																							pos: position{line: 860, col: 5, offset: 27873},
																							run: (*parser).callonListElementContinuationElement778,
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 3093, col: 8, offset: 100474},
																					expr: &anyMatcher{
																						line: 3093, col: 9, offset: 100475,
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 867, col: 5, offset: 28030},
																		label: "line",
																		expr: &actionExpr{
																			pos: position{line: 816, col: 5, offset: 26665},
																			run: (*parser).callonListElementContinuationElement782,
																			expr: &seqExpr{
																				pos: position{line: 816, col: 5, offset: 26665},
																				exprs: []interface{}{
																					&notExpr{
																						pos: position{line: 816, col: 5, offset: 26665},
																						expr: &notExpr{
																							pos: position{line: 3093, col: 8, offset: 100474},
																							expr: &anyMatcher{
																								line: 3093, col: 9, offset: 100475,
																							},
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 817, col: 5, offset: 26738},
																						label: "content",
																						expr: &actionExpr{
																							pos: position{line: 817, col: 14, offset: 26747},
																							run: (*parser).callonListElementContinuationElement788,
																							expr: &zeroOrMoreExpr{
																								pos: position{line: 817, col: 14, offset: 26747},
																								expr: &charClassMatcher{
																									pos:        position{line: 817, col: 14, offset: 26747},
																									val:        "[^\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 3096, col: 8, offset: 100524},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 3089, col: 12, offset: 100384},
																								run: (*parser).callonListElementContinuationElement792,
																								expr: &choiceExpr{
																									pos: position{line: 3089, col: 13, offset: 100385},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 3089, col: 13, offset: 100385},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 3089, col: 20, offset: 100392},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 3089, col: 29, offset: 100401},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 3093, col: 8, offset: 100474},
																								expr: &anyMatcher{
																									line: 3093, col: 9, offset: 100475,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 852, col: 5, offset: 27636},
													label: "end",
													expr: &zeroOrOneExpr{
														pos: position{line: 852, col: 9, offset: 27640},
														expr: &choiceExpr{
															pos: position{line: 859, col: 5, offset: 27842},
															alternatives: []interface{}{
																&seqExpr{
																	pos: position{line: 859, col: 5, offset: 27842},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 859, col: 5, offset: 27842},
																			label: "end",
																			expr: &actionExpr{
																				pos: position{line: 759, col: 5, offset: 24637},
																				run: (*parser).callonListElementContinuationElement804,
																				expr: &seqExpr{
																					pos: position{line: 759, col: 5, offset: 24637},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 759, col: 5, offset: 24637},
																							label: "delimiter",
																							expr: &actionExpr{
																								pos: position{line: 759, col: 16, offset: 24648},
																								run: (*parser).callonListElementContinuationElement807,
																								expr: &seqExpr{
																									pos: position{line: 759, col: 16, offset: 24648},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 759, col: 16, offset: 24648},
																											val:        "====",
																											ignoreCase: false,
																											want:       "\"====\"",
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 759, col: 23, offset: 24655},
																											expr: &litMatcher{
																												pos:        position{line: 759, col: 23, offset: 24655},
																												val:        "=",
																												ignoreCase: false,
																												want:       "\"=\"",
																											},
																										},
																									},
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 761, col: 8, offset: 24739},
																							expr: &actionExpr{
																								pos: position{line: 3080, col: 10, offset: 100200},
																								run: (*parser).callonListElementContinuationElement813,
																								expr: &charClassMatcher{
																									pos:        position{line: 3080, col: 11, offset: 100201},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 3096, col: 8, offset: 100524},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 3089, col: 12, offset: 100384},
																									run: (*parser).callonListElementContinuationElement816,
																									expr: &choiceExpr{
																										pos: position{line: 3089, col: 13, offset: 100385},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 3089, col: 13, offset: 100385},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 3089, col: 20, offset: 100392},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 3089, col: 29, offset: 100401},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 3093, col: 8, offset: 100474},
																									expr: &anyMatcher{
																										line: 3093, col: 9, offset: 100475,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&andCodeExpr{
																			pos: position{line: 860, col: 5, offset: 27873},
																			run: (*parser).callonListElementContinuationElement823,
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 3093, col: 8, offset: 100474},
																	expr: &anyMatcher{
																		line: 3093, col: 9, offset: 100475,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 959, col: 5, offset: 30322},
										run: (*parser).callonListElementContinuationElement826,
										expr: &seqExpr{
											pos: position{line: 959, col: 5, offset: 30322},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 959, col: 5, offset: 30322},
													label: "delimiter",
													expr: &actionExpr{
														pos: position{line: 772, col: 26, offset: 25125},
														run: (*parser).callonListElementContinuationElement829,
														expr: &seqExpr{
															pos: position{line: 772, col: 26, offset: 25125},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 772, col: 26, offset: 25125},
																	val:        "```",
																	ignoreCase: false,
																	want:       "\"```\"",
																},
																&labeledExpr{
																	pos:   position{line: 772, col: 32, offset: 25131},
																	label: "language",
																	expr: &actionExpr{
																		pos: position{line: 776, col: 13, offset: 25261},
																		run: (*parser).callonListElementContinuationElement833,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 776, col: 14, offset: 25262},
																			expr: &charClassMatcher{
																				pos:        position{line: 776, col: 14, offset: 25262},
																				val:        "[^\\r\\n` ]",
																				chars:      []rune{'\r', '\n', '`', ' '},
																				ignoreCase: false,
																				inverted:   true,
																			},
																		},
																	},
																},
																&zeroOrMoreExpr{
																	pos: position{line: 772, col: 52, offset: 25151},
																	expr: &actionExpr{
																		pos: position{line: 3080, col: 10, offset: 100200},
																		run: (*parser).callonListElementContinuationElement837,
																		expr: &charClassMatcher{
																			pos:        position{line: 3080, col: 11, offset: 100201},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 3096, col: 8, offset: 100524},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 3089, col: 12, offset: 100384},
																			run: (*parser).callonListElementContinuationElement840,
																			expr: &choiceExpr{
																				pos: position{line: 3089, col: 13, offset: 100385},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 3089, col: 13, offset: 100385},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 3089, col: 20, offset: 100392},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 3089, col: 29, offset: 100401},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 3093, col: 8, offset: 100474},
																			expr: &anyMatcher{
																				line: 3093, col: 9, offset: 100475,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 960, col: 5, offset: 30368},
													label: "content",
													expr: &zeroOrMoreExpr{
														pos: position{line: 973, col: 5, offset: 30841},
														expr: &actionExpr{
															pos: position{line: 973, col: 6, offset: 30842},
															run: (*parser).callonListElementContinuationElement849,
															expr: &seqExpr{
																pos: position{line: 973, col: 6, offset: 30842},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 973, col: 6, offset: 30842},
																		expr: &seqExpr{
																			pos: position{line: 970, col: 34, offset: 30789},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 970, col: 34, offset: 30789},
																					val:        "```",
																					ignoreCase: false,
																					want:       "\"```\"",
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 970, col: 40, offset: 30795},
																					expr: &actionExpr{
																						pos: position{line: 3080, col: 10, offset: 100200},
																						run: (*parser).callonListElementContinuationElement855,
																						expr: &charClassMatcher{
																							pos:        position{line: 3080, col: 11, offset: 100201},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 3096, col: 8, offset: 100524},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 3089, col: 12, offset: 100384},
																							run: (*parser).callonListElementContinuationElement858,
																							expr: &choiceExpr{
																								pos: position{line: 3089, col: 13, offset: 100385},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 3089, col: 13, offset: 100385},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 3089, col: 20, offset: 100392},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 3089, col: 29, offset: 100401},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 3093, col: 8, offset: 100474},
																							expr: &anyMatcher{
																								line: 3093, col: 9, offset: 100475,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 974, col: 5, offset: 30877},
																		label: "line",
																		expr: &actionExpr{
																			pos: position{line: 816, col: 5, offset: 26665},
																			run: (*parser).callonListElementContinuationElement866,
																			expr: &seqExpr{
																				pos: position{line: 816, col: 5, offset: 26665},
																				exprs: []interface{}{
																					&notExpr{
																						pos: position{line: 816, col: 5, offset: 26665},
																						expr: &notExpr{
																							pos: position{line: 3093, col: 8, offset: 100474},
																							expr: &anyMatcher{
																								line: 3093, col: 9, offset: 100475,
																							},
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 817, col: 5, offset: 26738},
																						label: "content",
																						expr: &actionExpr{
																							pos: position{line: 817, col: 14, offset: 26747},
																							run: (*parser).callonListElementContinuationElement872,
																							expr: &zeroOrMoreExpr{
																								pos: position{line: 817, col: 14, offset: 26747},
																								expr: &charClassMatcher{
																									pos:        position{line: 817, col: 14, offset: 26747},
																									val:        "[^\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 3096, col: 8, offset: 100524},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 3089, col: 12, offset: 100384},
																								run: (*parser).callonListElementContinuationElement876,
																								expr: &choiceExpr{
																									pos: position{line: 3089, col: 13, offset: 100385},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 3089, col: 13, offset: 100385},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 3089, col: 20, offset: 100392},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 3089, col: 29, offset: 100401},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 3093, col: 8, offset: 100474},
																								expr: &anyMatcher{
																									line: 3093, col: 9, offset: 100475,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 961, col: 5, offset: 30407},
													expr: &seqExpr{
														pos: position{line: 970, col: 34, offset: 30789},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 970, col: 34, offset: 30789},
																val:        "```",
																ignoreCase: false,
																want:       "\"```\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 970, col: 40, offset: 30795},
																expr: &actionExpr{
																	pos: position{line: 3080, col: 10, offset: 100200},
																	run: (*parser).callonListElementContinuationElement887,
																	expr: &charClassMatcher{
																		pos:        position{line: 3080, col: 11, offset: 100201},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 3096, col: 8, offset: 100524},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 3089, col: 12, offset: 100384},
																		run: (*parser).callonListElementContinuationElement890,
																		expr: &choiceExpr{
																			pos: position{line: 3089, col: 13, offset: 100385},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 3089, col: 13, offset: 100385},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 3089, col: 20, offset: 100392},
																					val:        "\r\n",
																					ignoreCase: false,
																					want:       "\"\\r\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 3089, col: 29, offset: 100401},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 3093, col: 8, offset: 100474},
																		expr: &anyMatcher{
																			line: 3093, col: 9, offset: 100475,
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 875, col: 5, offset: 28183},
										run: (*parser).callonListElementContinuationElement897,
										expr: &seqExpr{
											pos: position{line: 875, col: 5, offset: 28183},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 875, col: 5, offset: 28183},
													label: "start",
													expr: &actionExpr{
														pos: position{line: 766, col: 5, offset: 24884},
														run: (*parser).callonListElementContinuationElement900,
														expr: &seqExpr{
															pos: position{line: 766, col: 5, offset: 24884},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 766, col: 5, offset: 24884},
																	label: "delimiter",
																	expr: &actionExpr{
																		pos: position{line: 766, col: 16, offset: 24895},
																		run: (*parser).callonListElementContinuationElement903,
																		expr: &seqExpr{
																			pos: position{line: 766, col: 16, offset: 24895},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 766, col: 16, offset: 24895},
																					val:        "```",
																					ignoreCase: false,
																					want:       "\"```\"",
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 766, col: 22, offset: 24901},
																					expr: &litMatcher{
																						pos:        position{line: 766, col: 22, offset: 24901},
																						val:        "`",
																						ignoreCase: false,
																						want:       "\"`\"",
																					},
																				},
																			},
																		},
																	},
																},
																&zeroOrMoreExpr{
																	pos: position{line: 768, col: 8, offset: 24985},
																	expr: &actionExpr{
																		pos: position{line: 3080, col: 10, offset: 100200},
																		run: (*parser).callonListElementContinuationElement909,
																		expr: &charClassMatcher{
																			pos:        position{line: 3080, col: 11, offset: 100201},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 3096, col: 8, offset: 100524},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 3089, col: 12, offset: 100384},
																			run: (*parser).callonListElementContinuationElement912,
																			expr: &choiceExpr{
																				pos: position{line: 3089, col: 13, offset: 100385},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 3089, col: 13, offset: 100385},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 3089, col: 20, offset: 100392},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 3089, col: 29, offset: 100401},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 3093, col: 8, offset: 100474},
																			expr: &anyMatcher{
																				line: 3093, col: 9, offset: 100475,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 876, col: 5, offset: 28221},
													run: (*parser).callonListElementContinuationElement919,
												},
												&labeledExpr{
													pos:   position{line: 879, col: 5, offset: 28313},
													label: "content",
													expr: &zeroOrMoreExpr{
														pos: position{line: 894, col: 5, offset: 28703},
														expr: &actionExpr{
															pos: position{line: 894, col: 6, offset: 28704},
															run: (*parser).callonListElementContinuationElement922,
															expr: &seqExpr{
																pos: position{line: 894, col: 6, offset: 28704},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 894, col: 6, offset: 28704},
																		expr: &choiceExpr{
																			pos: position{line: 887, col: 5, offset: 28547},
																			alternatives: []interface{}{
																				&seqExpr{
																					pos: position{line: 887, col: 5, offset: 28547},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 887, col: 5, offset: 28547},
																							label: "end",
																							expr: &actionExpr{
																								pos: position{line: 766, col: 5, offset: 24884},
																								run: (*parser).callonListElementContinuationElement928,
																								expr: &seqExpr{
																									pos: position{line: 766, col: 5, offset: 24884},
																									exprs: []interface{}{
																										&labeledExpr{
																											pos:   position{line: 766, col: 5, offset: 24884},
																											label: "delimiter",
																											expr: &actionExpr{
																												pos: position{line: 766, col: 16, offset: 24895},
																												run: (*parser).callonListElementContinuationElement931,
																												expr: &seqExpr{
																													pos: position{line: 766, col: 16, offset: 24895},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 766, col: 16, offset: 24895},
																															val:        "```",
																															ignoreCase: false,
																															want:       "\"```\"",
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 766, col: 22, offset: 24901},
																															expr: &litMatcher{
																																pos:        position{line: 766, col: 22, offset: 24901},
																																val:        "`",
																																ignoreCase: false,
																																want:       "\"`\"",
																															},
																														},
																													},
																												},
																											},
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 768, col: 8, offset: 24985},
																											expr: &actionExpr{
																												pos: position{line: 3080, col: 10, offset: 100200},
																												run: (*parser).callonListElementContinuationElement937,
																												expr: &charClassMatcher{
																													pos:        position{line: 3080, col: 11, offset: 100201},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 3096, col: 8, offset: 100524},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 3089, col: 12, offset: 100384},
																													run: (*parser).callonListElementContinuationElement940,
																													expr: &choiceExpr{
																														pos: position{line: 3089, col: 13, offset: 100385},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 3089, col: 13, offset: 100385},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 3089, col: 20, offset: 100392},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 3089, col: 29, offset: 100401},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 3093, col: 8, offset: 100474},
																													expr: &anyMatcher{
																														line: 3093, col: 9, offset: 100475,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&andCodeExpr{
																							pos: position{line: 888, col: 5, offset: 28577},
																							run: (*parser).callonListElementContinuationElement947,
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 3093, col: 8, offset: 100474},
																					expr: &anyMatcher{
																						line: 3093, col: 9, offset: 100475,
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 895, col: 5, offset: 28733},
																		label: "line",
																		expr: &actionExpr{
																			pos: position{line: 816, col: 5, offset: 26665},
																			run: (*parser).callonListElementContinuationElement951,
																			expr: &seqExpr{
																				pos: position{line: 816, col: 5, offset: 26665},
																				exprs: []interface{}{
																					&notExpr{
																						pos: position{line: 816, col: 5, offset: 26665},
																						expr: &notExpr{
																							pos: position{line: 3093, col: 8, offset: 100474},
																							expr: &anyMatcher{
																								line: 3093, col: 9, offset: 100475,
																							},
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 817, col: 5, offset: 26738},
																						label: "content",
																						expr: &actionExpr{
																							pos: position{line: 817, col: 14, offset: 26747},
																							run: (*parser).callonListElementContinuationElement957,
																							expr: &zeroOrMoreExpr{
																								pos: position{line: 817, col: 14, offset: 26747},
																								expr: &charClassMatcher{
																									pos:        position{line: 817, col: 14, offset: 26747},
																									val:        "[^\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 3096, col: 8, offset: 100524},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 3089, col: 12, offset: 100384},
																								run: (*parser).callonListElementContinuationElement961,
																								expr: &choiceExpr{
																									pos: position{line: 3089, col: 13, offset: 100385},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 3089, col: 13, offset: 100385},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 3089, col: 20, offset: 100392},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 3089, col: 29, offset: 100401},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 3093, col: 8, offset: 100474},
																								expr: &anyMatcher{
																									line: 3093, col: 9, offset: 100475,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 880, col: 5, offset: 28346},
													label: "end",
													expr: &zeroOrOneExpr{
														pos: position{line: 880, col: 9, offset: 28350},
														expr: &choiceExpr{
															pos: position{line: 887, col: 5, offset: 28547},
															alternatives: []interface{}{
																&seqExpr{
																	pos: position{line: 887, col: 5, offset: 28547},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 887, col: 5, offset: 28547},
																			label: "end",
																			expr: &actionExpr{
																				pos: position{line: 766, col: 5, offset: 24884},
																				run: (*parser).callonListElementContinuationElement973,
																				expr: &seqExpr{
																					pos: position{line: 766, col: 5, offset: 24884},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 766, col: 5, offset: 24884},
																							label: "delimiter",
																							expr: &actionExpr{
																								pos: position{line: 766, col: 16, offset: 24895},
																								run: (*parser).callonListElementContinuationElement976,
																								expr: &seqExpr{
																									pos: position{line: 766, col: 16, offset: 24895},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 766, col: 16, offset: 24895},
																											val:        "```",
																											ignoreCase: false,
																											want:       "\"```\"",
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 766, col: 22, offset: 24901},
																											expr: &litMatcher{
																												pos:        position{line: 766, col: 22, offset: 24901},
																												val:        "`",
																												ignoreCase: false,
																												want:       "\"`\"",
																											},
																										},
																									},
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 768, col: 8, offset: 24985},
																							expr: &actionExpr{
																								pos: position{line: 3080, col: 10, offset: 100200},
																								run: (*parser).callonListElementContinuationElement982,
																								expr: &charClassMatcher{
																									pos:        position{line: 3080, col: 11, offset: 100201},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 3096, col: 8, offset: 100524},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 3089, col: 12, offset: 100384},
																									run: (*parser).callonListElementContinuationElement985,
																									expr: &choiceExpr{
																										pos: position{line: 3089, col: 13, offset: 100385},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 3089, col: 13, offset: 100385},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 3089, col: 20, offset: 100392},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 3089, col: 29, offset: 100401},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 3093, col: 8, offset: 100474},
																									expr: &anyMatcher{
																										line: 3093, col: 9, offset: 100475,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&andCodeExpr{
																			pos: position{line: 888, col: 5, offset: 28577},
																			run: (*parser).callonListElementContinuationElement992,
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 3093, col: 8, offset: 100474},
																	expr: &anyMatcher{
																		line: 3093, col: 9, offset: 100475,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 903, col: 5, offset: 28888},
										run: (*parser).callonListElementContinuationElement995,
										expr: &seqExpr{
											pos: position{line: 903, col: 5, offset: 28888},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 903, col: 5, offset: 28888},
													label: "start",
													expr: &actionExpr{
														pos: position{line: 781, col: 5, offset: 25421},
														run: (*parser).callonListElementContinuationElement998,
														expr: &seqExpr{
															pos: position{line: 781, col: 5, offset: 25421},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 781, col: 5, offset: 25421},
																	label: "delimiter",
																	expr: &actionExpr{
																		pos: position{line: 781, col: 16, offset: 25432},
																		run: (*parser).callonListElementContinuationElement1001,
																		expr: &seqExpr{
																			pos: position{line: 781, col: 16, offset: 25432},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 781, col: 16, offset: 25432},
																					val:        "----",
																					ignoreCase: false,
																					want:       "\"----\"",
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 781, col: 23, offset: 25439},
																					expr: &litMatcher{
																						pos:        position{line: 781, col: 23, offset: 25439},
																						val:        "-",
																						ignoreCase: false,
																						want:       "\"-\"",
																					},
																				},
																			},
																		},
																	},
																},
																&zeroOrMoreExpr{
																	pos: position{line: 783, col: 8, offset: 25523},
																	expr: &actionExpr{
																		pos: position{line: 3080, col: 10, offset: 100200},
																		run: (*parser).callonListElementContinuationElement1007,
																		expr: &charClassMatcher{
																			pos:        position{line: 3080, col: 11, offset: 100201},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 3096, col: 8, offset: 100524},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 3089, col: 12, offset: 100384},
																			run: (*parser).callonListElementContinuationElement1010,
																			expr: &choiceExpr{
																				pos: position{line: 3089, col: 13, offset: 100385},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 3089, col: 13, offset: 100385},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 3089, col: 20, offset: 100392},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 3089, col: 29, offset: 100401},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 3093, col: 8, offset: 100474},
																			expr: &anyMatcher{
																				line: 3093, col: 9, offset: 100475,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 904, col: 5, offset: 28927},
													run: (*parser).callonListElementContinuationElement1017,
												},
												&labeledExpr{
													pos:   position{line: 907, col: 5, offset: 29019},
													label: "content",
													expr: &zeroOrMoreExpr{
														pos: position{line: 922, col: 5, offset: 29417},
														expr: &actionExpr{
															pos: position{line: 922, col: 6, offset: 29418},
															run: (*parser).callonListElementContinuationElement1020,
															expr: &seqExpr{
																pos: position{line: 922, col: 6, offset: 29418},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 922, col: 6, offset: 29418},
																		expr: &choiceExpr{
																			pos: position{line: 915, col: 5, offset: 29259},
																			alternatives: []interface{}{
																				&seqExpr{
																					pos: position{line: 915, col: 5, offset: 29259},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 915, col: 5, offset: 29259},
																							label: "end",
																							expr: &actionExpr{
																								pos: position{line: 781, col: 5, offset: 25421},
																								run: (*parser).callonListElementContinuationElement1026,
																								expr: &seqExpr{
																									pos: position{line: 781, col: 5, offset: 25421},
																									exprs: []interface{}{
																										&labeledExpr{
																											pos:   position{line: 781, col: 5, offset: 25421},
																											label: "delimiter",
																											expr: &actionExpr{
																												pos: position{line: 781, col: 16, offset: 25432},
																												run: (*parser).callonListElementContinuationElement1029,
																												expr: &seqExpr{
																													pos: position{line: 781, col: 16, offset: 25432},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 781, col: 16, offset: 25432},
																															val:        "----",
																															ignoreCase: false,
																															want:       "\"----\"",
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 781, col: 23, offset: 25439},
																															expr: &litMatcher{
																																pos:        position{line: 781, col: 23, offset: 25439},
																																val:        "-",
																																ignoreCase: false,
																																want:       "\"-\"",
																															},
																														},
																													},
																												},
																											},
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 783, col: 8, offset: 25523},
																											expr: &actionExpr{
																												pos: position{line: 3080, col: 10, offset: 100200},
																												run: (*parser).callonListElementContinuationElement1035,
																												expr: &charClassMatcher{
																													pos:        position{line: 3080, col: 11, offset: 100201},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 3096, col: 8, offset: 100524},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 3089, col: 12, offset: 100384},
																													run: (*parser).callonListElementContinuationElement1038,
																													expr: &choiceExpr{
																														pos: position{line: 3089, col: 13, offset: 100385},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 3089, col: 13, offset: 100385},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 3089, col: 20, offset: 100392},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 3089, col: 29, offset: 100401},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 3093, col: 8, offset: 100474},
																													expr: &anyMatcher{
																														line: 3093, col: 9, offset: 100475,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&andCodeExpr{
																							pos: position{line: 916, col: 5, offset: 29290},
																							run: (*parser).callonListElementContinuationElement1045,
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 3093, col: 8, offset: 100474},
																					expr: &anyMatcher{
																						line: 3093, col: 9, offset: 100475,
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 923, col: 5, offset: 29448},
																		label: "line",
																		expr: &actionExpr{
																			pos: position{line: 816, col: 5, offset: 26665},
																			run: (*parser).callonListElementContinuationElement1049,
																			expr: &seqExpr{
																				pos: position{line: 816, col: 5, offset: 26665},
																				exprs: []interface{}{
																					&notExpr{
																						pos: position{line: 816, col: 5, offset: 26665},
																						expr: &notExpr{
																							pos: position{line: 3093, col: 8, offset: 100474},
																							expr: &anyMatcher{
																								line: 3093, col: 9, offset: 100475,
																							},
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 817, col: 5, offset: 26738},
																						label: "content",
																						expr: &actionExpr{
																							pos: position{line: 817, col: 14, offset: 26747},
																							run: (*parser).callonListElementContinuationElement1055,
																							expr: &zeroOrMoreExpr{
																								pos: position{line: 817, col: 14, offset: 26747},
																								expr: &charClassMatcher{
																									pos:        position{line: 817, col: 14, offset: 26747},
																									val:        "[^\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 3096, col: 8, offset: 100524},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 3089, col: 12, offset: 100384},
																								run: (*parser).callonListElementContinuationElement1059,
																								expr: &choiceExpr{
																									pos: position{line: 3089, col: 13, offset: 100385},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 3089, col: 13, offset: 100385},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 3089, col: 20, offset: 100392},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 3089, col: 29, offset: 100401},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 3093, col: 8, offset: 100474},
																								expr: &anyMatcher{
																									line: 3093, col: 9, offset: 100475,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 908, col: 5, offset: 29053},
													label: "end",
													expr: &zeroOrOneExpr{
														pos: position{line: 908, col: 9, offset: 29057},
														expr: &choiceExpr{
															pos: position{line: 915, col: 5, offset: 29259},
															alternatives: []interface{}{
																&seqExpr{
																	pos: position{line: 915, col: 5, offset: 29259},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 915, col: 5, offset: 29259},
																			label: "end",
																			expr: &actionExpr{
																				pos: position{line: 781, col: 5, offset: 25421},
																				run: (*parser).callonListElementContinuationElement1071,
																				expr: &seqExpr{
																					pos: position{line: 781, col: 5, offset: 25421},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 781, col: 5, offset: 25421},
																							label: "delimiter",
																							expr: &actionExpr{
																								pos: position{line: 781, col: 16, offset: 25432},
																								run: (*parser).callonListElementContinuationElement1074,
																								expr: &seqExpr{
																									pos: position{line: 781, col: 16, offset: 25432},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 781, col: 16, offset: 25432},
																											val:        "----",
																											ignoreCase: false,
																											want:       "\"----\"",
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 781, col: 23, offset: 25439},
																											expr: &litMatcher{
																												pos:        position{line: 781, col: 23, offset: 25439},
																												val:        "-",
																												ignoreCase: false,
																												want:       "\"-\"",
																											},
																										},
																									},
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 783, col: 8, offset: 25523},
																							expr: &actionExpr{
																								pos: position{line: 3080, col: 10, offset: 100200},
																								run: (*parser).callonListElementContinuationElement1080,
																								expr: &charClassMatcher{
																									pos:        position{line: 3080, col: 11, offset: 100201},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 3096, col: 8, offset: 100524},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 3089, col: 12, offset: 100384},
																									run: (*parser).callonListElementContinuationElement1083,
																									expr: &choiceExpr{
																										pos: position{line: 3089, col: 13, offset: 100385},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 3089, col: 13, offset: 100385},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 3089, col: 20, offset: 100392},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 3089, col: 29, offset: 100401},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 3093, col: 8, offset: 100474},
																									expr: &anyMatcher{
																										line: 3093, col: 9, offset: 100475,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&andCodeExpr{
																			pos: position{line: 916, col: 5, offset: 29290},
																			run: (*parser).callonListElementContinuationElement1090,
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 3093, col: 8, offset: 100474},
																	expr: &anyMatcher{
																		line: 3093, col: 9, offset: 100475,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 931, col: 5, offset: 29603},
										run: (*parser).callonListElementContinuationElement1093,
										expr: &seqExpr{
											pos: position{line: 931, col: 5, offset: 29603},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 931, col: 5, offset: 29603},
													label: "start",
													expr: &actionExpr{
														pos: position{line: 788, col: 5, offset: 25669},
														run: (*parser).callonListElementContinuationElement1096,
														expr: &seqExpr{
															pos: position{line: 788, col: 5, offset: 25669},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 788, col: 5, offset: 25669},
																	label: "delimiter",
																	expr: &actionExpr{
																		pos: position{line: 788, col: 16, offset: 25680},
																		run: (*parser).callonListElementContinuationElement1099,
																		expr: &seqExpr{
																			pos: position{line: 788, col: 16, offset: 25680},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 788, col: 16, offset: 25680},
																					val:        "....",
																					ignoreCase: false,
																					want:       "\"....\"",
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 788, col: 23, offset: 25687},
																					expr: &litMatcher{
																						pos:        position{line: 788, col: 23, offset: 25687},
																						val:        ".",
																						ignoreCase: false,
																						want:       "\".\"",
																					},
																				},
																			},
																		},
																	},
																},
																&zeroOrMoreExpr{
																	pos: position{line: 790, col: 8, offset: 25771},
																	expr: &actionExpr{
																		pos: position{line: 3080, col: 10, offset: 100200},
																		run: (*parser).callonListElementContinuationElement1105,
																		expr: &charClassMatcher{
																			pos:        position{line: 3080, col: 11, offset: 100201},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 3096, col: 8, offset: 100524},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 3089, col: 12, offset: 100384},
																			run: (*parser).callonListElementContinuationElement1108,
																			expr: &choiceExpr{
																				pos: position{line: 3089, col: 13, offset: 100385},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 3089, col: 13, offset: 100385},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 3089, col: 20, offset: 100392},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 3089, col: 29, offset: 100401},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 3093, col: 8, offset: 100474},
																			expr: &anyMatcher{
																				line: 3093, col: 9, offset: 100475,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 932, col: 5, offset: 29642},
													run: (*parser).callonListElementContinuationElement1115,
												},
												&labeledExpr{
													pos:   position{line: 935, col: 5, offset: 29734},
													label: "content",
													expr: &zeroOrMoreExpr{
														pos: position{line: 950, col: 5, offset: 30132},
														expr: &actionExpr{
															pos: position{line: 950, col: 6, offset: 30133},
															run: (*parser).callonListElementContinuationElement1118,
															expr: &seqExpr{
																pos: position{line: 950, col: 6, offset: 30133},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 950, col: 6, offset: 30133},
																		expr: &choiceExpr{
																			pos: position{line: 943, col: 5, offset: 29974},
																			alternatives: []interface{}{
																				&seqExpr{
																					pos: position{line: 943, col: 5, offset: 29974},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 943, col: 5, offset: 29974},
																							label: "end",
																							expr: &actionExpr{
																								pos: position{line: 788, col: 5, offset: 25669},
																								run: (*parser).callonListElementContinuationElement1124,
																								expr: &seqExpr{
																									pos: position{line: 788, col: 5, offset: 25669},
																									exprs: []interface{}{
																										&labeledExpr{
																											pos:   position{line: 788, col: 5, offset: 25669},
																											label: "delimiter",
																											expr: &actionExpr{
																												pos: position{line: 788, col: 16, offset: 25680},
																												run: (*parser).callonListElementContinuationElement1127,
																												expr: &seqExpr{
																													pos: position{line: 788, col: 16, offset: 25680},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 788, col: 16, offset: 25680},
																															val:        "....",
																															ignoreCase: false,
																															want:       "\"....\"",
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 788, col: 23, offset: 25687},
																															expr: &litMatcher{
																																pos:        position{line: 788, col: 23, offset: 25687},
																																val:        ".",
																																ignoreCase: false,
																																want:       "\".\"",
																															},
																														},
																													},
																												},
																											},
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 790, col: 8, offset: 25771},
																											expr: &actionExpr{
																												pos: position{line: 3080, col: 10, offset: 100200},
																												run: (*parser).callonListElementContinuationElement1133,
																												expr: &charClassMatcher{
																													pos:        position{line: 3080, col: 11, offset: 100201},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 3096, col: 8, offset: 100524},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 3089, col: 12, offset: 100384},
																													run: (*parser).callonListElementContinuationElement1136,
																													expr: &choiceExpr{
																														pos: position{line: 3089, col: 13, offset: 100385},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 3089, col: 13, offset: 100385},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 3089, col: 20, offset: 100392},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 3089, col: 29, offset: 100401},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 3093, col: 8, offset: 100474},
																													expr: &anyMatcher{
																														line: 3093, col: 9, offset: 100475,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&andCodeExpr{
																							pos: position{line: 944, col: 5, offset: 30005},
																							run: (*parser).callonListElementContinuationElement1143,
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 3093, col: 8, offset: 100474},
																					expr: &anyMatcher{
																						line: 3093, col: 9, offset: 100475,
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 951, col: 5, offset: 30163},
																		label: "line",
																		expr: &actionExpr{
																			pos: position{line: 816, col: 5, offset: 26665},
																			run: (*parser).callonListElementContinuationElement1147,
																			expr: &seqExpr{
																				pos: position{line: 816, col: 5, offset: 26665},
																				exprs: []interface{}{
																					&notExpr{
																						pos: position{line: 816, col: 5, offset: 26665},
																						expr: &notExpr{
																							pos: position{line: 3093, col: 8, offset: 100474},
																							expr: &anyMatcher{
																								line: 3093, col: 9, offset: 100475,
																							},
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 817, col: 5, offset: 26738},
																						label: "content",
																						expr: &actionExpr{
																							pos: position{line: 817, col: 14, offset: 26747},
																							run: (*parser).callonListElementContinuationElement1153,
																							expr: &zeroOrMoreExpr{
																								pos: position{line: 817, col: 14, offset: 26747},
																								expr: &charClassMatcher{
																									pos:        position{line: 817, col: 14, offset: 26747},
																									val:        "[^\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 3096, col: 8, offset: 100524},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 3089, col: 12, offset: 100384},
																								run: (*parser).callonListElementContinuationElement1157,
																								expr: &choiceExpr{
																									pos: position{line: 3089, col: 13, offset: 100385},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 3089, col: 13, offset: 100385},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 3089, col: 20, offset: 100392},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 3089, col: 29, offset: 100401},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 3093, col: 8, offset: 100474},
																								expr: &anyMatcher{
																									line: 3093, col: 9, offset: 100475,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 936, col: 5, offset: 29768},
													label: "end",
													expr: &zeroOrOneExpr{
														pos: position{line: 936, col: 9, offset: 29772},
														expr: &choiceExpr{
															pos: position{line: 943, col: 5, offset: 29974},
															alternatives: []interface{}{
																&seqExpr{
																	pos: position{line: 943, col: 5, offset: 29974},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 943, col: 5, offset: 29974},
																			label: "end",
																			expr: &actionExpr{
																				pos: position{line: 788, col: 5, offset: 25669},
																				run: (*parser).callonListElementContinuationElement1169,
																				expr: &seqExpr{
																					pos: position{line: 788, col: 5, offset: 25669},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 788, col: 5, offset: 25669},
																							label: "delimiter",
																							expr: &actionExpr{
																								pos: position{line: 788, col: 16, offset: 25680},
																								run: (*parser).callonListElementContinuationElement1172,
																								expr: &seqExpr{
																									pos: position{line: 788, col: 16, offset: 25680},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 788, col: 16, offset: 25680},
																											val:        "....",
																											ignoreCase: false,
																											want:       "\"....\"",
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 788, col: 23, offset: 25687},
																											expr: &litMatcher{
																												pos:        position{line: 788, col: 23, offset: 25687},
																												val:        ".",
																												ignoreCase: false,
																												want:       "\".\"",
																											},
																										},
																									},
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 790, col: 8, offset: 25771},
																							expr: &actionExpr{
																								pos: position{line: 3080, col: 10, offset: 100200},
																								run: (*parser).callonListElementContinuationElement1178,
																								expr: &charClassMatcher{
																									pos:        position{line: 3080, col: 11, offset: 100201},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 3096, col: 8, offset: 100524},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 3089, col: 12, offset: 100384},
																									run: (*parser).callonListElementContinuationElement1181,
																									expr: &choiceExpr{
																										pos: position{line: 3089, col: 13, offset: 100385},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 3089, col: 13, offset: 100385},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 3089, col: 20, offset: 100392},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 3089, col: 29, offset: 100401},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 3093, col: 8, offset: 100474},
																									expr: &anyMatcher{
																										line: 3093, col: 9, offset: 100475,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&andCodeExpr{
																			pos: position{line: 944, col: 5, offset: 30005},
																			run: (*parser).callonListElementContinuationElement1188,
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 3093, col: 8, offset: 100474},
																	expr: &anyMatcher{
																		line: 3093, col: 9, offset: 100475,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 982, col: 5, offset: 31046},
										run: (*parser).callonListElementContinuationElement1191,
										expr: &seqExpr{
											pos: position{line: 982, col: 5, offset: 31046},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 982, col: 5, offset: 31046},
													label: "firstLine",
													expr: &actionExpr{
														pos: position{line: 989, col: 5, offset: 31305},
														run: (*parser).callonListElementContinuationElement1194,
														expr: &seqExpr{
															pos: position{line: 989, col: 5, offset: 31305},
															exprs: []interface{}{
																&notExpr{
																	pos: position{line: 989, col: 5, offset: 31305},
																	expr: &actionExpr{
																		pos: position{line: 690, col: 14, offset: 22312},
																		run: (*parser).callonListElementContinuationElement1197,
																		expr: &seqExpr{
																			pos: position{line: 690, col: 14, offset: 22312},
																			exprs: []interface{}{
																				&notExpr{
																					pos: position{line: 690, col: 14, offset: 22312},
																					expr: &notExpr{
																						pos: position{line: 3093, col: 8, offset: 100474},
																						expr: &anyMatcher{
																							line: 3093, col: 9, offset: 100475,
																						},
																					},
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 690, col: 19, offset: 22317},
																					expr: &actionExpr{
																						pos: position{line: 3080, col: 10, offset: 100200},
																						run: (*parser).callonListElementContinuationElement1203,
																						expr: &charClassMatcher{
																							pos:        position{line: 3080, col: 11, offset: 100201},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&choiceExpr{
																					pos: position{line: 3096, col: 8, offset: 100524},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 3089, col: 12, offset: 100384},
																							run: (*parser).callonListElementContinuationElement1206,
																							expr: &choiceExpr{
																								pos: position{line: 3089, col: 13, offset: 100385},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 3089, col: 13, offset: 100385},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 3089, col: 20, offset: 100392},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 3089, col: 29, offset: 100401},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 3093, col: 8, offset: 100474},
																							expr: &anyMatcher{
																								line: 3093, col: 9, offset: 100475,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 990, col: 5, offset: 31320},
																	val:        "> ",
																	ignoreCase: false,
																	want:       "\"> \"",
																},
																&labeledExpr{
																	pos:   position{line: 991, col: 5, offset: 31330},
																	label: "content",
																	expr: &actionExpr{
																		pos: position{line: 991, col: 14, offset: 31339},
																		run: (*parser).callonListElementContinuationElement1215,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 991, col: 15, offset: 31340},
																			expr: &charClassMatcher{
																				pos:        position{line: 991, col: 15, offset: 31340},
																				val:        "[^\\r\\n]",
																				chars:      []rune{'\r', '\n'},
																				ignoreCase: false,
																				inverted:   true,
																			},
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 3096, col: 8, offset: 100524},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 3089, col: 12, offset: 100384},
																			run: (*parser).callonListElementContinuationElement1219,
																			expr: &choiceExpr{
																				pos: position{line: 3089, col: 13, offset: 100385},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 3089, col: 13, offset: 100385},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 3089, col: 20, offset: 100392},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 3089, col: 29, offset: 100401},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 3093, col: 8, offset: 100474},
																			expr: &anyMatcher{
																				line: 3093, col: 9, offset: 100475,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 983, col: 5, offset: 31083},
													label: "otherLines",
													expr: &zeroOrMoreExpr{
														pos: position{line: 983, col: 16, offset: 31094},
														expr: &choiceExpr{
															pos: position{line: 983, col: 17, offset: 31095},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 989, col: 5, offset: 31305},
																	run: (*parser).callonListElementContinuationElement1229,
																	expr: &seqExpr{
																		pos: position{line: 989, col: 5, offset: 31305},
																		exprs: []interface{}{
																			&notExpr{
																				pos: position{line: 989, col: 5, offset: 31305},
																				expr: &actionExpr{
																					pos: position{line: 690, col: 14, offset: 22312},
																					run: (*parser).callonListElementContinuationElement1232,
																					expr: &seqExpr{
																						pos: position{line: 690, col: 14, offset: 22312},
																						exprs: []interface{}{
																							&notExpr{
																								pos: position{line: 690, col: 14, offset: 22312},
																								expr: &notExpr{
																									pos: position{line: 3093, col: 8, offset: 100474},
																									expr: &anyMatcher{
																										line: 3093, col: 9, offset: 100475,
																									},
																								},
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 690, col: 19, offset: 22317},
																								expr: &actionExpr{
																									pos: position{line: 3080, col: 10, offset: 100200},
																									run: (*parser).callonListElementContinuationElement1238,
																									expr: &charClassMatcher{
																										pos:        position{line: 3080, col: 11, offset: 100201},
																										val:        "[ \\t]",
																										chars:      []rune{' ', '\t'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 3096, col: 8, offset: 100524},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 3089, col: 12, offset: 100384},
																										run: (*parser).callonListElementContinuationElement1241,
																										expr: &choiceExpr{
																											pos: position{line: 3089, col: 13, offset: 100385},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 3089, col: 13, offset: 100385},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 3089, col: 20, offset: 100392},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 3089, col: 29, offset: 100401},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 3093, col: 8, offset: 100474},
																										expr: &anyMatcher{
																											line: 3093, col: 9, offset: 100475,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&litMatcher{
																				pos:        position{line: 990, col: 5, offset: 31320},
																				val:        "> ",
																				ignoreCase: false,
																				want:       "\"> \"",
																			},
																			&labeledExpr{
																				pos:   position{line: 991, col: 5, offset: 31330},
																				label: "content",
																				expr: &actionExpr{
																					pos: position{line: 991, col: 14, offset: 31339},
																					run: (*parser).callonListElementContinuationElement1250,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 991, col: 15, offset: 31340},
																						expr: &charClassMatcher{
																							pos:        position{line: 991, col: 15, offset: 31340},
																							val:        "[^\\r\\n]",
																							chars:      []rune{'\r', '\n'},
																							ignoreCase: false,
																							inverted:   true,
																						},
																					},
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 3096, col: 8, offset: 100524},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 3089, col: 12, offset: 100384},
																						run: (*parser).callonListElementContinuationElement1254,
																						expr: &choiceExpr{
																							pos: position{line: 3089, col: 13, offset: 100385},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 3089, col: 13, offset: 100385},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 3089, col: 20, offset: 100392},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 3089, col: 29, offset: 100401},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 3093, col: 8, offset: 100474},
																						expr: &anyMatcher{
																							line: 3093, col: 9, offset: 100475,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 1865, col: 5, offset: 61135},
																	run: (*parser).callonListElementContinuationElement1261,
																	expr: &seqExpr{
																		pos: position{line: 1865, col: 5, offset: 61135},
																		exprs: []interface{}{
																			&labeledExpr{
																				pos:   position{line: 1865, col: 5, offset: 61135},
																				label: "content",
																				expr: &actionExpr{
																					pos: position{line: 1865, col: 14, offset: 61144},
																					run: (*parser).callonListElementContinuationElement1264,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 1865, col: 14, offset: 61144},
																						expr: &charClassMatcher{
																							pos:        position{line: 1865, col: 14, offset: 61144},
																							val:        "[^\\r\\n]",
																							chars:      []rune{'\r', '\n'},
																							ignoreCase: false,
																							inverted:   true,
																						},
																					},
																				},
																			},
																			&andCodeExpr{
																				pos: position{line: 1868, col: 5, offset: 61251},
																				run: (*parser).callonListElementContinuationElement1267,
																			},
																			&choiceExpr{
																				pos: position{line: 3096, col: 8, offset: 100524},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 3089, col: 12, offset: 100384},
																						run: (*parser).callonListElementContinuationElement1269,
																						expr: &choiceExpr{
																							pos: position{line: 3089, col: 13, offset: 100385},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 3089, col: 13, offset: 100385},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 3089, col: 20, offset: 100392},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 3089, col: 29, offset: 100401},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 3093, col: 8, offset: 100474},
																						expr: &anyMatcher{
																							line: 3093, col: 9, offset: 100475,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1008, col: 5, offset: 31698},
										run: (*parser).callonListElementContinuationElement1276,
										expr: &seqExpr{
											pos: position{line: 1008, col: 5, offset: 31698},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1008, col: 5, offset: 31698},
													label: "start",
													expr: &actionExpr{
														pos: position{line: 795, col: 5, offset: 25921},
														run: (*parser).callonListElementContinuationElement1279,
														expr: &seqExpr{
															pos: position{line: 795, col: 5, offset: 25921},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 795, col: 5, offset: 25921},
																	label: "delimiter",
																	expr: &actionExpr{
																		pos: position{line: 795, col: 16, offset: 25932},
																		run: (*parser).callonListElementContinuationElement1282,
																		expr: &seqExpr{
																			pos: position{line: 795, col: 16, offset: 25932},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 795, col: 16, offset: 25932},
																					val:        "++++",
																					ignoreCase: false,
																					want:       "\"++++\"",
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 795, col: 23, offset: 25939},
																					expr: &litMatcher{
																						pos:        position{line: 795, col: 23, offset: 25939},
																						val:        "+",
																						ignoreCase: false,
																						want:       "\"+\"",
																					},
																				},
																			},
																		},
																	},
																},
																&zeroOrMoreExpr{
																	pos: position{line: 797, col: 8, offset: 26023},
																	expr: &actionExpr{
																		pos: position{line: 3080, col: 10, offset: 100200},
																		run: (*parser).callonListElementContinuationElement1288,
																		expr: &charClassMatcher{
																			pos:        position{line: 3080, col: 11, offset: 100201},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 3096, col: 8, offset: 100524},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 3089, col: 12, offset: 100384},
																			run: (*parser).callonListElementContinuationElement1291,
																			expr: &choiceExpr{
																				pos: position{line: 3089, col: 13, offset: 100385},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 3089, col: 13, offset: 100385},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 3089, col: 20, offset: 100392},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 3089, col: 29, offset: 100401},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 3093, col: 8, offset: 100474},
																			expr: &anyMatcher{
																				line: 3093, col: 9, offset: 100475,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 1009, col: 5, offset: 31741},
													run: (*parser).callonListElementContinuationElement1298,
												},
												&labeledExpr{
													pos:   position{line: 1012, col: 5, offset: 31833},
													label: "content",
													expr: &zeroOrMoreExpr{
														pos: position{line: 1027, col: 5, offset: 32263},
														expr: &actionExpr{
															pos: position{line: 1027, col: 6, offset: 32264},
															run: (*parser).callonListElementContinuationElement1301,
															expr: &seqExpr{
																pos: position{line: 1027, col: 6, offset: 32264},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1027, col: 6, offset: 32264},
																		expr: &choiceExpr{
																			pos: position{line: 1020, col: 5, offset: 32097},
																			alternatives: []interface{}{
																				&seqExpr{
																					pos: position{line: 1020, col: 5, offset: 32097},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 1020, col: 5, offset: 32097},
																							label: "end",
																							expr: &actionExpr{
																								pos: position{line: 795, col: 5, offset: 25921},
																								run: (*parser).callonListElementContinuationElement1307,
																								expr: &seqExpr{
																									pos: position{line: 795, col: 5, offset: 25921},
																									exprs: []interface{}{
																										&labeledExpr{
																											pos:   position{line: 795, col: 5, offset: 25921},
																											label: "delimiter",
																											expr: &actionExpr{
																												pos: position{line: 795, col: 16, offset: 25932},
																												run: (*parser).callonListElementContinuationElement1310,
																												expr: &seqExpr{
																													pos: position{line: 795, col: 16, offset: 25932},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 795, col: 16, offset: 25932},
																															val:        "++++",
																															ignoreCase: false,
																															want:       "\"++++\"",
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 795, col: 23, offset: 25939},
																															expr: &litMatcher{
																																pos:        position{line: 795, col: 23, offset: 25939},
																																val:        "+",
																																ignoreCase: false,
																																want:       "\"+\"",
																															},
																														},
																													},
																												},
																											},
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 797, col: 8, offset: 26023},
																											expr: &actionExpr{
																												pos: position{line: 3080, col: 10, offset: 100200},
																												run: (*parser).callonListElementContinuationElement1316,
																												expr: &charClassMatcher{
																													pos:        position{line: 3080, col: 11, offset: 100201},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 3096, col: 8, offset: 100524},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 3089, col: 12, offset: 100384},
																													run: (*parser).callonListElementContinuationElement1319,
																													expr: &choiceExpr{
																														pos: position{line: 3089, col: 13, offset: 100385},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 3089, col: 13, offset: 100385},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 3089, col: 20, offset: 100392},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 3089, col: 29, offset: 100401},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 3093, col: 8, offset: 100474},
																													expr: &anyMatcher{
																														line: 3093, col: 9, offset: 100475,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&andCodeExpr{
																							pos: position{line: 1021, col: 5, offset: 32132},
																							run: (*parser).callonListElementContinuationElement1326,
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 3093, col: 8, offset: 100474},
																					expr: &anyMatcher{
																						line: 3093, col: 9, offset: 100475,
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 1028, col: 5, offset: 32298},
																		label: "line",
																		expr: &actionExpr{
																			pos: position{line: 816, col: 5, offset: 26665},
																			run: (*parser).callonListElementContinuationElement1330,
																			expr: &seqExpr{
																				pos: position{line: 816, col: 5, offset: 26665},
																				exprs: []interface{}{
																					&notExpr{
																						pos: position{line: 816, col: 5, offset: 26665},
																						expr: &notExpr{
																							pos: position{line: 3093, col: 8, offset: 100474},
																							expr: &anyMatcher{
																								line: 3093, col: 9, offset: 100475,
																							},
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 817, col: 5, offset: 26738},
																						label: "content",
																						expr: &actionExpr{
																							pos: position{line: 817, col: 14, offset: 26747},
																							run: (*parser).callonListElementContinuationElement1336,
																							expr: &zeroOrMoreExpr{
																								pos: position{line: 817, col: 14, offset: 26747},
																								expr: &charClassMatcher{
																									pos:        position{line: 817, col: 14, offset: 26747},
																									val:        "[^\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 3096, col: 8, offset: 100524},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 3089, col: 12, offset: 100384},
																								run: (*parser).callonListElementContinuationElement1340,
																								expr: &choiceExpr{
																									pos: position{line: 3089, col: 13, offset: 100385},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 3089, col: 13, offset: 100385},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 3089, col: 20, offset: 100392},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 3089, col: 29, offset: 100401},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 3093, col: 8, offset: 100474},
																								expr: &anyMatcher{
																									line: 3093, col: 9, offset: 100475,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1013, col: 5, offset: 31871},
													label: "end",
													expr: &zeroOrOneExpr{
														pos: position{line: 1013, col: 9, offset: 31875},
														expr: &choiceExpr{
															pos: position{line: 1020, col: 5, offset: 32097},
															alternatives: []interface{}{
																&seqExpr{
																	pos: position{line: 1020, col: 5, offset: 32097},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 1020, col: 5, offset: 32097},
																			label: "end",
																			expr: &actionExpr{
																				pos: position{line: 795, col: 5, offset: 25921},
																				run: (*parser).callonListElementContinuationElement1352,
																				expr: &seqExpr{
																					pos: position{line: 795, col: 5, offset: 25921},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 795, col: 5, offset: 25921},
																							label: "delimiter",
																							expr: &actionExpr{
																								pos: position{line: 795, col: 16, offset: 25932},
																								run: (*parser).callonListElementContinuationElement1355,
																								expr: &seqExpr{
																									pos: position{line: 795, col: 16, offset: 25932},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 795, col: 16, offset: 25932},
																											val:        "++++",
																											ignoreCase: false,
																											want:       "\"++++\"",
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 795, col: 23, offset: 25939},
																											expr: &litMatcher{
																												pos:        position{line: 795, col: 23, offset: 25939},
																												val:        "+",
																												ignoreCase: false,
																												want:       "\"+\"",
																											},
																										},
																									},
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 797, col: 8, offset: 26023},
																							expr: &actionExpr{
																								pos: position{line: 3080, col: 10, offset: 100200},
																								run: (*parser).callonListElementContinuationElement1361,
																								expr: &charClassMatcher{
																									pos:        position{line: 3080, col: 11, offset: 100201},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 3096, col: 8, offset: 100524},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 3089, col: 12, offset: 100384},
																									run: (*parser).callonListElementContinuationElement1364,
																									expr: &choiceExpr{
																										pos: position{line: 3089, col: 13, offset: 100385},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 3089, col: 13, offset: 100385},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 3089, col: 20, offset: 100392},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 3089, col: 29, offset: 100401},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 3093, col: 8, offset: 100474},
																									expr: &anyMatcher{
																										line: 3093, col: 9, offset: 100475,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&andCodeExpr{
																			pos: position{line: 1021, col: 5, offset: 32132},
																			run: (*parser).callonListElementContinuationElement1371,
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 3093, col: 8, offset: 100474},
																	expr: &anyMatcher{
																		line: 3093, col: 9, offset: 100475,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1036, col: 5, offset: 32449},
										run: (*parser).callonListElementContinuationElement1374,
										expr: &seqExpr{
											pos: position{line: 1036, col: 5, offset: 32449},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1036, col: 5, offset: 32449},
													label: "start",
													expr: &actionExpr{
														pos: position{line: 802, col: 5, offset: 26171},
														run: (*parser).callonListElementContinuationElement1377,
														expr: &seqExpr{
															pos: position{line: 802, col: 5, offset: 26171},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 802, col: 5, offset: 26171},
																	label: "delimiter",
																	expr: &actionExpr{
																		pos: position{line: 802, col: 16, offset: 26182},
																		run: (*parser).callonListElementContinuationElement1380,
																		expr: &seqExpr{
																			pos: position{line: 802, col: 16, offset: 26182},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 802, col: 16, offset: 26182},
																					val:        "____",
																					ignoreCase: false,
																					want:       "\"____\"",
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 802, col: 23, offset: 26189},
																					expr: &litMatcher{
																						pos:        position{line: 802, col: 23, offset: 26189},
																						val:        "_",
																						ignoreCase: false,
																						want:       "\"_\"",
																					},
																				},
																			},
																		},
																	},
																},
																&zeroOrMoreExpr{
																	pos: position{line: 804, col: 8, offset: 26273},
																	expr: &actionExpr{
																		pos: position{line: 3080, col: 10, offset: 100200},
																		run: (*parser).callonListElementContinuationElement1386,
																		expr: &charClassMatcher{
																			pos:        position{line: 3080, col: 11, offset: 100201},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 3096, col: 8, offset: 100524},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 3089, col: 12, offset: 100384},
																			run: (*parser).callonListElementContinuationElement1389,
																			expr: &choiceExpr{
																				pos: position{line: 3089, col: 13, offset: 100385},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 3089, col: 13, offset: 100385},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 3089, col: 20, offset: 100392},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 3089, col: 29, offset: 100401},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 3093, col: 8, offset: 100474},
																			expr: &anyMatcher{
																				line: 3093, col: 9, offset: 100475,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 1037, col: 5, offset: 32486},
													run: (*parser).callonListElementContinuationElement1396,
												},
												&labeledExpr{
													pos:   position{line: 1040, col: 5, offset: 32578},
													label: "content",
													expr: &zeroOrMoreExpr{
														pos: position{line: 1055, col: 4, offset: 32959},
														expr: &actionExpr{
															pos: position{line: 1055, col: 5, offset: 32960},
															run: (*parser).callonListElementContinuationElement1399,
															expr: &seqExpr{
																pos: position{line: 1055, col: 5, offset: 32960},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1055, col: 5, offset: 32960},
																		expr: &choiceExpr{
																			pos: position{line: 1048, col: 5, offset: 32806},
																			alternatives: []interface{}{
																				&seqExpr{
																					pos: position{line: 1048, col: 5, offset: 32806},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 1048, col: 5, offset: 32806},
																							label: "end",
																							expr: &actionExpr{
																								pos: position{line: 802, col: 5, offset: 26171},
																								run: (*parser).callonListElementContinuationElement1405,
																								expr: &seqExpr{
																									pos: position{line: 802, col: 5, offset: 26171},
																									exprs: []interface{}{
																										&labeledExpr{
																											pos:   position{line: 802, col: 5, offset: 26171},
																											label: "delimiter",
																											expr: &actionExpr{
																												pos: position{line: 802, col: 16, offset: 26182},
																												run: (*parser).callonListElementContinuationElement1408,
																												expr: &seqExpr{
																													pos: position{line: 802, col: 16, offset: 26182},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 802, col: 16, offset: 26182},
																															val:        "____",
																															ignoreCase: false,
																															want:       "\"____\"",
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 802, col: 23, offset: 26189},
																															expr: &litMatcher{
																																pos:        position{line: 802, col: 23, offset: 26189},
																																val:        "_",
																																ignoreCase: false,
																																want:       "\"_\"",
																															},
																														},
																													},
																												},
																											},
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 804, col: 8, offset: 26273},
																											expr: &actionExpr{
																												pos: position{line: 3080, col: 10, offset: 100200},
																												run: (*parser).callonListElementContinuationElement1414,
																												expr: &charClassMatcher{
																													pos:        position{line: 3080, col: 11, offset: 100201},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 3096, col: 8, offset: 100524},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 3089, col: 12, offset: 100384},
																													run: (*parser).callonListElementContinuationElement1417,
																													expr: &choiceExpr{
																														pos: position{line: 3089, col: 13, offset: 100385},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 3089, col: 13, offset: 100385},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 3089, col: 20, offset: 100392},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 3089, col: 29, offset: 100401},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 3093, col: 8, offset: 100474},
																													expr: &anyMatcher{
																														line: 3093, col: 9, offset: 100475,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&andCodeExpr{
																							pos: position{line: 1049, col: 5, offset: 32835},
																							run: (*parser).callonListElementContinuationElement1424,
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 3093, col: 8, offset: 100474},
																					expr: &anyMatcher{
																						line: 3093, col: 9, offset: 100475,
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 1056, col: 5, offset: 32988},
																		label: "line",
																		expr: &actionExpr{
																			pos: position{line: 816, col: 5, offset: 26665},
																			run: (*parser).callonListElementContinuationElement1428,
																			expr: &seqExpr{
																				pos: position{line: 816, col: 5, offset: 26665},
																				exprs: []interface{}{
																					&notExpr{
																						pos: position{line: 816, col: 5, offset: 26665},
																						expr: &notExpr{
																							pos: position{line: 3093, col: 8, offset: 100474},
																							expr: &anyMatcher{
																								line: 3093, col: 9, offset: 100475,
																							},
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 817, col: 5, offset: 26738},
																						label: "content",
																						expr: &actionExpr{
																							pos: position{line: 817, col: 14, offset: 26747},
																							run: (*parser).callonListElementContinuationElement1434,
																							expr: &zeroOrMoreExpr{
																								pos: position{line: 817, col: 14, offset: 26747},
																								expr: &charClassMatcher{
																									pos:        position{line: 817, col: 14, offset: 26747},
																									val:        "[^\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 3096, col: 8, offset: 100524},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 3089, col: 12, offset: 100384},
																								run: (*parser).callonListElementContinuationElement1438,
																								expr: &choiceExpr{
																									pos: position{line: 3089, col: 13, offset: 100385},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 3089, col: 13, offset: 100385},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 3089, col: 20, offset: 100392},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 3089, col: 29, offset: 100401},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 3093, col: 8, offset: 100474},
																								expr: &anyMatcher{
																									line: 3093, col: 9, offset: 100475,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1041, col: 5, offset: 32610},
													label: "end",
													expr: &zeroOrOneExpr{
														pos: position{line: 1041, col: 9, offset: 32614},
														expr: &choiceExpr{
															pos: position{line: 1048, col: 5, offset: 32806},
															alternatives: []interface{}{
																&seqExpr{
																	pos: position{line: 1048, col: 5, offset: 32806},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 1048, col: 5, offset: 32806},
																			label: "end",
																			expr: &actionExpr{
																				pos: position{line: 802, col: 5, offset: 26171},
																				run: (*parser).callonListElementContinuationElement1450,
																				expr: &seqExpr{
																					pos: position{line: 802, col: 5, offset: 26171},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 802, col: 5, offset: 26171},
																							label: "delimiter",
																							expr: &actionExpr{
																								pos: position{line: 802, col: 16, offset: 26182},
																								run: (*parser).callonListElementContinuationElement1453,
																								expr: &seqExpr{
																									pos: position{line: 802, col: 16, offset: 26182},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 802, col: 16, offset: 26182},
																											val:        "____",
																											ignoreCase: false,
																											want:       "\"____\"",
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 802, col: 23, offset: 26189},
																											expr: &litMatcher{
																												pos:        position{line: 802, col: 23, offset: 26189},
																												val:        "_",
																												ignoreCase: false,
																												want:       "\"_\"",
																											},
																										},
																									},
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 804, col: 8, offset: 26273},
																							expr: &actionExpr{
																								pos: position{line: 3080, col: 10, offset: 100200},
																								run: (*parser).callonListElementContinuationElement1459,
																								expr: &charClassMatcher{
																									pos:        position{line: 3080, col: 11, offset: 100201},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 3096, col: 8, offset: 100524},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 3089, col: 12, offset: 100384},
																									run: (*parser).callonListElementContinuationElement1462,
																									expr: &choiceExpr{
																										pos: position{line: 3089, col: 13, offset: 100385},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 3089, col: 13, offset: 100385},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 3089, col: 20, offset: 100392},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 3089, col: 29, offset: 100401},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 3093, col: 8, offset: 100474},
																									expr: &anyMatcher{
																										line: 3093, col: 9, offset: 100475,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&andCodeExpr{
																			pos: position{line: 1049, col: 5, offset: 32835},
																			run: (*parser).callonListElementContinuationElement1469,
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 3093, col: 8, offset: 100474},
																	expr: &anyMatcher{
																		line: 3093, col: 9, offset: 100475,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1064, col: 5, offset: 33143},
										run: (*parser).callonListElementContinuationElement1472,
										expr: &seqExpr{
											pos: position{line: 1064, col: 5, offset: 33143},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1064, col: 5, offset: 33143},
													label: "start",
													expr: &actionExpr{
														pos: position{line: 809, col: 5, offset: 26417},
														run: (*parser).callonListElementContinuationElement1475,
														expr: &seqExpr{
															pos: position{line: 809, col: 5, offset: 26417},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 809, col: 5, offset: 26417},
																	label: "delimiter",
																	expr: &actionExpr{
																		pos: position{line: 809, col: 16, offset: 26428},
																		run: (*parser).callonListElementContinuationElement1478,
																		expr: &seqExpr{
																			pos: position{line: 809, col: 16, offset: 26428},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 809, col: 16, offset: 26428},
																					val:        "****",
																					ignoreCase: false,
																					want:       "\"****\"",
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 809, col: 23, offset: 26435},
																					expr: &litMatcher{
																						pos:        position{line: 809, col: 23, offset: 26435},
																						val:        "*",
																						ignoreCase: false,
																						want:       "\"*\"",
																					},
																				},
																			},
																		},
																	},
																},
																&zeroOrMoreExpr{
																	pos: position{line: 811, col: 8, offset: 26519},
																	expr: &actionExpr{
																		pos: position{line: 3080, col: 10, offset: 100200},
																		run: (*parser).callonListElementContinuationElement1484,
																		expr: &charClassMatcher{
																			pos:        position{line: 3080, col: 11, offset: 100201},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 3096, col: 8, offset: 100524},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 3089, col: 12, offset: 100384},
																			run: (*parser).callonListElementContinuationElement1487,
																			expr: &choiceExpr{
																				pos: position{line: 3089, col: 13, offset: 100385},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 3089, col: 13, offset: 100385},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 3089, col: 20, offset: 100392},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 3089, col: 29, offset: 100401},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 3093, col: 8, offset: 100474},
																			expr: &anyMatcher{
																				line: 3093, col: 9, offset: 100475,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 1065, col: 5, offset: 33182},
													run: (*parser).callonListElementContinuationElement1494,
												},
												&labeledExpr{
													pos:   position{line: 1068, col: 5, offset: 33274},
													label: "content",
													expr: &zeroOrMoreExpr{
														pos: position{line: 1083, col: 4, offset: 33671},
														expr: &actionExpr{
															pos: position{line: 1083, col: 5, offset: 33672},
															run: (*parser).callonListElementContinuationElement1497,
															expr: &seqExpr{
																pos: position{line: 1083, col: 5, offset: 33672},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1083, col: 5, offset: 33672},
																		expr: &choiceExpr{
																			pos: position{line: 1076, col: 5, offset: 33514},
																			alternatives: []interface{}{
																				&seqExpr{
																					pos: position{line: 1076, col: 5, offset: 33514},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 1076, col: 5, offset: 33514},
																							label: "end",
																							expr: &actionExpr{
																								pos: position{line: 809, col: 5, offset: 26417},
																								run: (*parser).callonListElementContinuationElement1503,
																								expr: &seqExpr{
																									pos: position{line: 809, col: 5, offset: 26417},
																									exprs: []interface{}{
																										&labeledExpr{
																											pos:   position{line: 809, col: 5, offset: 26417},
																											label: "delimiter",
																											expr: &actionExpr{
																												pos: position{line: 809, col: 16, offset: 26428},
																												run: (*parser).callonListElementContinuationElement1506,
																												expr: &seqExpr{
																													pos: position{line: 809, col: 16, offset: 26428},
																													exprs: []interface{}{
																														&litMatcher{
																															pos:        position{line: 809, col: 16, offset: 26428},
																															val:        "****",
																															ignoreCase: false,
																															want:       "\"****\"",
																														},
																														&zeroOrMoreExpr{
																															pos: position{line: 809, col: 23, offset: 26435},
																															expr: &litMatcher{
																																pos:        position{line: 809, col: 23, offset: 26435},
																																val:        "*",
																																ignoreCase: false,
																																want:       "\"*\"",
																															},
																														},
																													},
																												},
																											},
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 811, col: 8, offset: 26519},
																											expr: &actionExpr{
																												pos: position{line: 3080, col: 10, offset: 100200},
																												run: (*parser).callonListElementContinuationElement1512,
																												expr: &charClassMatcher{
																													pos:        position{line: 3080, col: 11, offset: 100201},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 3096, col: 8, offset: 100524},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 3089, col: 12, offset: 100384},
																													run: (*parser).callonListElementContinuationElement1515,
																													expr: &choiceExpr{
																														pos: position{line: 3089, col: 13, offset: 100385},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 3089, col: 13, offset: 100385},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 3089, col: 20, offset: 100392},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 3089, col: 29, offset: 100401},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 3093, col: 8, offset: 100474},
																													expr: &anyMatcher{
																														line: 3093, col: 9, offset: 100475,
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&andCodeExpr{
																							pos: position{line: 1077, col: 5, offset: 33545},
																							run: (*parser).callonListElementContinuationElement1522,
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 3093, col: 8, offset: 100474},
																					expr: &anyMatcher{
																						line: 3093, col: 9, offset: 100475,
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 1084, col: 5, offset: 33702},
																		label: "line",
																		expr: &actionExpr{
																			pos: position{line: 816, col: 5, offset: 26665},
																			run: (*parser).callonListElementContinuationElement1526,
																			expr: &seqExpr{
																				pos: position{line: 816, col: 5, offset: 26665},
																				exprs: []interface{}{
																					&notExpr{
																						pos: position{line: 816, col: 5, offset: 26665},
																						expr: &notExpr{
																							pos: position{line: 3093, col: 8, offset: 100474},
																							expr: &anyMatcher{
																								line: 3093, col: 9, offset: 100475,
																							},
																						},
																					},
																					&labeledExpr{
																						pos:   position{line: 817, col: 5, offset: 26738},
																						label: "content",
																						expr: &actionExpr{
																							pos: position{line: 817, col: 14, offset: 26747},
																							run: (*parser).callonListElementContinuationElement1532,
																							expr: &zeroOrMoreExpr{
																								pos: position{line: 817, col: 14, offset: 26747},
																								expr: &charClassMatcher{
																									pos:        position{line: 817, col: 14, offset: 26747},
																									val:        "[^\\r\\n]",
																									chars:      []rune{'\r', '\n'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 3096, col: 8, offset: 100524},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 3089, col: 12, offset: 100384},
																								run: (*parser).callonListElementContinuationElement1536,
																								expr: &choiceExpr{
																									pos: position{line: 3089, col: 13, offset: 100385},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 3089, col: 13, offset: 100385},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 3089, col: 20, offset: 100392},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 3089, col: 29, offset: 100401},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 3093, col: 8, offset: 100474},
																								expr: &anyMatcher{
																									line: 3093, col: 9, offset: 100475,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1069, col: 5, offset: 33308},
													label: "end",
													expr: &zeroOrOneExpr{
														pos: position{line: 1069, col: 9, offset: 33312},
														expr: &choiceExpr{
															pos: position{line: 1076, col: 5, offset: 33514},
															alternatives: []interface{}{
																&seqExpr{
																	pos: position{line: 1076, col: 5, offset: 33514},
																	exprs: []interface{}{
																		&labeledExpr{
																			pos:   position{line: 1076, col: 5, offset: 33514},
																			label: "end",
																			expr: &actionExpr{
																				pos: position{line: 809, col: 5, offset: 26417},
																				run: (*parser).callonListElementContinuationElement1548,
																				expr: &seqExpr{
																					pos: position{line: 809, col: 5, offset: 26417},
																					exprs: []interface{}{
																						&labeledExpr{
																							pos:   position{line: 809, col: 5, offset: 26417},
																							label: "delimiter",
																							expr: &actionExpr{
																								pos: position{line: 809, col: 16, offset: 26428},
																								run: (*parser).callonListElementContinuationElement1551,
																								expr: &seqExpr{
																									pos: position{line: 809, col: 16, offset: 26428},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 809, col: 16, offset: 26428},
																											val:        "****",
																											ignoreCase: false,
																											want:       "\"****\"",
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 809, col: 23, offset: 26435},
																											expr: &litMatcher{
																												pos:        position{line: 809, col: 23, offset: 26435},
																												val:        "*",
																												ignoreCase: false,
																												want:       "\"*\"",
																											},
																										},
																									},
																								},
																							},
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 811, col: 8, offset: 26519},
																							expr: &actionExpr{
																								pos: position{line: 3080, col: 10, offset: 100200},
																								run: (*parser).callonListElementContinuationElement1557,
																								expr: &charClassMatcher{
																									pos:        position{line: 3080, col: 11, offset: 100201},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&choiceExpr{
																							pos: position{line: 3096, col: 8, offset: 100524},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 3089, col: 12, offset: 100384},
																									run: (*parser).callonListElementContinuationElement1560,
																									expr: &choiceExpr{
																										pos: position{line: 3089, col: 13, offset: 100385},
																										alternatives: []interface{}{
																											&litMatcher{
																												pos:        position{line: 3089, col: 13, offset: 100385},
																												val:        "\n",
																												ignoreCase: false,
																												want:       "\"\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 3089, col: 20, offset: 100392},
																												val:        "\r\n",
																												ignoreCase: false,
																												want:       "\"\\r\\n\"",
																											},
																											&litMatcher{
																												pos:        position{line: 3089, col: 29, offset: 100401},
																												val:        "\r",
																												ignoreCase: false,
																												want:       "\"\\r\"",
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 3093, col: 8, offset: 100474},
																									expr: &anyMatcher{
																										line: 3093, col: 9, offset: 100475,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&andCodeExpr{
																			pos: position{line: 1077, col: 5, offset: 33545},
																			run: (*parser).callonListElementContinuationElement1567,
																		},
																	},
																},
																&notExpr{
																	pos: position{line: 3093, col: 8, offset: 100474},
																	expr: &anyMatcher{
																		line: 3093, col: 9, offset: 100475,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2949, col: 18, offset: 95934},
										run: (*parser).callonListElementContinuationElement1570,
										expr: &seqExpr{
											pos: position{line: 2949, col: 18, offset: 95934},
											exprs: []interface{}{
												&choiceExpr{
													pos: position{line: 2950, col: 9, offset: 95944},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 2950, col: 9, offset: 95944},
															val:        "'''",
															ignoreCase: false,
															want:       "\"'''\"",
														},
														&litMatcher{
															pos:        position{line: 2951, col: 11, offset: 95980},
															val:        "***",
															ignoreCase: false,
															want:       "\"***\"",
														},
														&litMatcher{
															pos:        position{line: 2951, col: 19, offset: 95988},
															val:        "* * *",
															ignoreCase: false,
															want:       "\"* * *\"",
														},
														&litMatcher{
															pos:        position{line: 2951, col: 29, offset: 95998},
															val:        "---",
															ignoreCase: false,
															want:       "\"---\"",
														},
														&litMatcher{
															pos:        position{line: 2951, col: 37, offset: 96006},
															val:        "- - -",
															ignoreCase: false,
															want:       "\"- - -\"",
														},
														&litMatcher{
															pos:        position{line: 2951, col: 47, offset: 96016},
															val:        "___",
															ignoreCase: false,
															want:       "\"___\"",
														},
														&litMatcher{
															pos:        position{line: 2951, col: 55, offset: 96024},
															val:        "_ _ _",
															ignoreCase: false,
															want:       "\"_ _ _\"",
														},
													},
												},
												&zeroOrMoreExpr{
													pos: position{line: 2952, col: 11, offset: 96082},
													expr: &actionExpr{
														pos: position{line: 3080, col: 10, offset: 100200},
														run: (*parser).callonListElementContinuationElement1581,
														expr: &charClassMatcher{
															pos:        position{line: 3080, col: 11, offset: 100201},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&choiceExpr{
													pos: position{line: 3096, col: 8, offset: 100524},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 3089, col: 12, offset: 100384},
															run: (*parser).callonListElementContinuationElement1584,
															expr: &choiceExpr{
																pos: position{line: 3089, col: 13, offset: 100385},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 3089, col: 13, offset: 100385},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 3089, col: 20, offset: 100392},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 3089, col: 29, offset: 100401},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 3093, col: 8, offset: 100474},
															expr: &anyMatcher{
																line: 3093, col: 9, offset: 100475,
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 3096, col: 8, offset: 100524},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 3089, col: 12, offset: 100384},
															run: (*parser).callonListElementContinuationElement1592,
															expr: &choiceExpr{
																pos: position{line: 3089, col: 13, offset: 100385},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 3089, col: 13, offset: 100385},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 3089, col: 20, offset: 100392},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 3089, col: 29, offset: 100401},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 3093, col: 8, offset: 100474},
															expr: &anyMatcher{
																line: 3093, col: 9, offset: 100475,
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1605, col: 11, offset: 52492},
										name: "ImageBlock",
									},
									&actionExpr{
										pos: position{line: 2847, col: 5, offset: 93063},
										run: (*parser).callonListElementContinuationElement1600,
										expr: &seqExpr{
											pos: position{line: 2847, col: 5, offset: 93063},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 2855, col: 19, offset: 93240},
													val:        "|===",
													ignoreCase: false,
													want:       "\"|===\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 2855, col: 26, offset: 93247},
													expr: &actionExpr{
														pos: position{line: 3080, col: 10, offset: 100200},
														run: (*parser).callonListElementContinuationElement1604,
														expr: &charClassMatcher{
															pos:        position{line: 3080, col: 11, offset: 100201},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&choiceExpr{
													pos: position{line: 3096, col: 8, offset: 100524},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 3089, col: 12, offset: 100384},
															run: (*parser).callonListElementContinuationElement1607,
															expr: &choiceExpr{
																pos: position{line: 3089, col: 13, offset: 100385},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 3089, col: 13, offset: 100385},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 3089, col: 20, offset: 100392},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 3089, col: 29, offset: 100401},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 3093, col: 8, offset: 100474},
															expr: &anyMatcher{
																line: 3093, col: 9, offset: 100475,
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 2848, col: 5, offset: 93087},
													label: "header",
													expr: &zeroOrOneExpr{
														pos: position{line: 2848, col: 12, offset: 93094},
														expr: &actionExpr{
															pos: position{line: 2863, col: 5, offset: 93407},
															run: (*parser).callonListElementContinuationElement1616,
															expr: &seqExpr{
																pos: position{line: 2863, col: 5, offset: 93407},
																exprs: []interface{}{
																	&labeledExpr{
																		pos:   position{line: 2863, col: 5, offset: 93407},
																		label: "cells",
																		expr: &oneOrMoreExpr{
																			pos: position{line: 2863, col: 11, offset: 93413},
																			expr: &actionExpr{
																				pos: position{line: 2869, col: 5, offset: 93530},
																				run: (*parser).callonListElementContinuationElement1620,
																				expr: &seqExpr{
																					pos: position{line: 2869, col: 5, offset: 93530},
																					exprs: []interface{}{
																						&litMatcher{
																							pos:        position{line: 2869, col: 5, offset: 93530},
																							val:        "|",
																							ignoreCase: false,
																							want:       "\"|\"",
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 2869, col: 9, offset: 93534},
																							expr: &actionExpr{
																								pos: position{line: 3080, col: 10, offset: 100200},
																								run: (*parser).callonListElementContinuationElement1624,
																								expr: &charClassMatcher{
																									pos:        position{line: 3080, col: 11, offset: 100201},
																									val:        "[ \\t]",
																									chars:      []rune{' ', '\t'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																						&labeledExpr{
																							pos:   position{line: 2870, col: 5, offset: 93546},
																							label: "content",
																							expr: &zeroOrOneExpr{
																								pos: position{line: 2870, col: 14, offset: 93555},
																								expr: &actionExpr{
																									pos: position{line: 2902, col: 5, offset: 94343},
																									run: (*parser).callonListElementContinuationElement1628,
																									expr: &labeledExpr{
																										pos:   position{line: 2902, col: 5, offset: 94343},
																										label: "content",
																										expr: &actionExpr{
																											pos: position{line: 2902, col: 14, offset: 94352},
																											run: (*parser).callonListElementContinuationElement1630,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 2902, col: 14, offset: 94352},
																												expr: &charClassMatcher{
																													pos:        position{line: 2902, col: 14, offset: 94352},
																													val:        "[^\\r\\n|]",
																													chars:      []rune{'\r', '\n', '|'},
																													ignoreCase: false,
																													inverted:   true,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 3096, col: 8, offset: 100524},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 3089, col: 12, offset: 100384},
																				run: (*parser).callonListElementContinuationElement1634,
																				expr: &choiceExpr{
																					pos: position{line: 3089, col: 13, offset: 100385},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 3089, col: 13, offset: 100385},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 3089, col: 20, offset: 100392},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 3089, col: 29, offset: 100401},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3093, col: 8, offset: 100474},
																				expr: &anyMatcher{
																					line: 3093, col: 9, offset: 100475,
																				},
																			},
																		},
																	},
																	&oneOrMoreExpr{
																		pos: position{line: 2864, col: 5, offset: 93435},
																		expr: &actionExpr{
																			pos: position{line: 690, col: 14, offset: 22312},
																			run: (*parser).callonListElementContinuationElement1642,
																			expr: &seqExpr{
																				pos: position{line: 690, col: 14, offset: 22312},
																				exprs: []interface{}{
																					&notExpr{
																						pos: position{line: 690, col: 14, offset: 22312},
																						expr: &notExpr{
																							pos: position{line: 3093, col: 8, offset: 100474},
																							expr: &anyMatcher{
																								line: 3093, col: 9, offset: 100475,
																							},
																						},
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 690, col: 19, offset: 22317},
																						expr: &actionExpr{
																							pos: position{line: 3080, col: 10, offset: 100200},
																							run: (*parser).callonListElementContinuationElement1648,
																							expr: &charClassMatcher{
																								pos:        position{line: 3080, col: 11, offset: 100201},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&choiceExpr{
																						pos: position{line: 3096, col: 8, offset: 100524},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 3089, col: 12, offset: 100384},
																								run: (*parser).callonListElementContinuationElement1651,
																								expr: &choiceExpr{
																									pos: position{line: 3089, col: 13, offset: 100385},
																									alternatives: []interface{}{
																										&litMatcher{
																											pos:        position{line: 3089, col: 13, offset: 100385},
																											val:        "\n",
																											ignoreCase: false,
																											want:       "\"\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 3089, col: 20, offset: 100392},
																											val:        "\r\n",
																											ignoreCase: false,
																											want:       "\"\\r\\n\"",
																										},
																										&litMatcher{
																											pos:        position{line: 3089, col: 29, offset: 100401},
																											val:        "\r",
																											ignoreCase: false,
																											want:       "\"\\r\"",
																										},
																									},
																								},
																							},
																							&notExpr{
																								pos: position{line: 3093, col: 8, offset: 100474},
																								expr: &anyMatcher{
																									line: 3093, col: 9, offset: 100475,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 2849, col: 5, offset: 93113},
													label: "rows",
													expr: &zeroOrMoreExpr{
														pos: position{line: 2849, col: 10, offset: 93118},
														expr: &choiceExpr{
															pos: position{line: 2874, col: 13, offset: 93652},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 2884, col: 5, offset: 93871},
																	run: (*parser).callonListElementContinuationElement1661,
																	expr: &seqExpr{
																		pos: position{line: 2884, col: 5, offset: 93871},
																		exprs: []interface{}{
																			&notExpr{
																				pos: position{line: 2884, col: 5, offset: 93871},
																				expr: &choiceExpr{
																					pos: position{line: 2859, col: 22, offset: 93320},
																					alternatives: []interface{}{
																						&seqExpr{
																							pos: position{line: 2855, col: 19, offset: 93240},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2855, col: 19, offset: 93240},
																									val:        "|===",
																									ignoreCase: false,
																									want:       "\"|===\"",
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 2855, col: 26, offset: 93247},
																									expr: &actionExpr{
																										pos: position{line: 3080, col: 10, offset: 100200},
																										run: (*parser).callonListElementContinuationElement1668,
																										expr: &charClassMatcher{
																											pos:        position{line: 3080, col: 11, offset: 100201},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 3096, col: 8, offset: 100524},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 3089, col: 12, offset: 100384},
																											run: (*parser).callonListElementContinuationElement1671,
																											expr: &choiceExpr{
																												pos: position{line: 3089, col: 13, offset: 100385},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 3089, col: 13, offset: 100385},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 3089, col: 20, offset: 100392},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 3089, col: 29, offset: 100401},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 3093, col: 8, offset: 100474},
																											expr: &anyMatcher{
																												line: 3093, col: 9, offset: 100475,
																											},
																										},
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 3093, col: 8, offset: 100474},
																							expr: &anyMatcher{
																								line: 3093, col: 9, offset: 100475,
																							},
																						},
																					},
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 2885, col: 5, offset: 93894},
																				label: "cells",
																				expr: &oneOrMoreExpr{
																					pos: position{line: 2885, col: 11, offset: 93900},
																					expr: &actionExpr{
																						pos: position{line: 2885, col: 12, offset: 93901},
																						run: (*parser).callonListElementContinuationElement1682,
																						expr: &seqExpr{
																							pos: position{line: 2885, col: 12, offset: 93901},
																							exprs: []interface{}{
																								&labeledExpr{
																									pos:   position{line: 2885, col: 12, offset: 93901},
																									label: "cell",
																									expr: &actionExpr{
																										pos: position{line: 2894, col: 5, offset: 94142},
																										run: (*parser).callonListElementContinuationElement1685,
																										expr: &seqExpr{
																											pos: position{line: 2894, col: 5, offset: 94142},
																											exprs: []interface{}{
																												&notExpr{
																													pos: position{line: 2894, col: 5, offset: 94142},
																													expr: &choiceExpr{
																														pos: position{line: 2859, col: 22, offset: 93320},
																														alternatives: []interface{}{
																															&seqExpr{
																																pos: position{line: 2855, col: 19, offset: 93240},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 2855, col: 19, offset: 93240},
																																		val:        "|===",
																																		ignoreCase: false,
																																		want:       "\"|===\"",
																																	},
																																	&zeroOrMoreExpr{
																																		pos: position{line: 2855, col: 26, offset: 93247},
																																		expr: &actionExpr{
																																			pos: position{line: 3080, col: 10, offset: 100200},
																																			run: (*parser).callonListElementContinuationElement1692,
																																			expr: &charClassMatcher{
																																				pos:        position{line: 3080, col: 11, offset: 100201},
																																				val:        "[ \\t]",
																																				chars:      []rune{' ', '\t'},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																		},
																																	},
																																	&choiceExpr{
																																		pos: position{line: 3096, col: 8, offset: 100524},
																																		alternatives: []interface{}{
																																			&actionExpr{
																																				pos: position{line: 3089, col: 12, offset: 100384},
																																				run: (*parser).callonListElementContinuationElement1695,
																																				expr: &choiceExpr{
																																					pos: position{line: 3089, col: 13, offset: 100385},
																																					alternatives: []interface{}{
																																						&litMatcher{
																																							pos:        position{line: 3089, col: 13, offset: 100385},
																																							val:        "\n",
																																							ignoreCase: false,
																																							want:       "\"\\n\"",
																																						},
																																						&litMatcher{
																																							pos:        position{line: 3089, col: 20, offset: 100392},
																																							val:        "\r\n",
																																							ignoreCase: false,
																																							want:       "\"\\r\\n\"",
																																						},
																																						&litMatcher{
																																							pos:        position{line: 3089, col: 29, offset: 100401},
																																							val:        "\r",
																																							ignoreCase: false,
																																							want:       "\"\\r\"",
																																						},
																																					},
																																				},
																																			},
																																			&notExpr{
																																				pos: position{line: 3093, col: 8, offset: 100474},
																																				expr: &anyMatcher{
																																					line: 3093, col: 9, offset: 100475,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																															&notExpr{
																																pos: position{line: 3093, col: 8, offset: 100474},
																																expr: &anyMatcher{
																																	line: 3093, col: 9, offset: 100475,
																																},
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 2895, col: 5, offset: 94165},
																													expr: &actionExpr{
																														pos: position{line: 690, col: 14, offset: 22312},
																														run: (*parser).callonListElementContinuationElement1705,
																														expr: &seqExpr{
																															pos: position{line: 690, col: 14, offset: 22312},
																															exprs: []interface{}{
																																&notExpr{
																																	pos: position{line: 690, col: 14, offset: 22312},
																																	expr: &notExpr{
																																		pos: position{line: 3093, col: 8, offset: 100474},
																																		expr: &anyMatcher{
																																			line: 3093, col: 9, offset: 100475,
																																		},
																																	},
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 690, col: 19, offset: 22317},
																																	expr: &actionExpr{
																																		pos: position{line: 3080, col: 10, offset: 100200},
																																		run: (*parser).callonListElementContinuationElement1711,
																																		expr: &charClassMatcher{
																																			pos:        position{line: 3080, col: 11, offset: 100201},
																																			val:        "[ \\t]",
																																			chars:      []rune{' ', '\t'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																																&choiceExpr{
																																	pos: position{line: 3096, col: 8, offset: 100524},
																																	alternatives: []interface{}{
																																		&actionExpr{
																																			pos: position{line: 3089, col: 12, offset: 100384},
																																			run: (*parser).callonListElementContinuationElement1714,
																																			expr: &choiceExpr{
																																				pos: position{line: 3089, col: 13, offset: 100385},
																																				alternatives: []interface{}{
																																					&litMatcher{
																																						pos:        position{line: 3089, col: 13, offset: 100385},
																																						val:        "\n",
																																						ignoreCase: false,
																																						want:       "\"\\n\"",
																																					},
																																					&litMatcher{
																																						pos:        position{line: 3089, col: 20, offset: 100392},
																																						val:        "\r\n",
																																						ignoreCase: false,
																																						want:       "\"\\r\\n\"",
																																					},
																																					&litMatcher{
																																						pos:        position{line: 3089, col: 29, offset: 100401},
																																						val:        "\r",
																																						ignoreCase: false,
																																						want:       "\"\\r\"",
																																					},
																																				},
																																			},
																																		},
																																		&notExpr{
																																			pos: position{line: 3093, col: 8, offset: 100474},
																																			expr: &anyMatcher{
																																				line: 3093, col: 9, offset: 100475,
																																			},
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 2896, col: 5, offset: 94180},
																													val:        "|",
																													ignoreCase: false,
																													want:       "\"|\"",
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 2896, col: 9, offset: 94184},
																													expr: &actionExpr{
																														pos: position{line: 3080, col: 10, offset: 100200},
																														run: (*parser).callonListElementContinuationElement1723,
																														expr: &charClassMatcher{
																															pos:        position{line: 3080, col: 11, offset: 100201},
																															val:        "[ \\t]",
																															chars:      []rune{' ', '\t'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																												&labeledExpr{
																													pos:   position{line: 2896, col: 16, offset: 94191},
																													label: "content",
																													expr: &zeroOrOneExpr{
																														pos: position{line: 2896, col: 25, offset: 94200},
																														expr: &actionExpr{
																															pos: position{line: 2902, col: 5, offset: 94343},
																															run: (*parser).callonListElementContinuationElement1727,
																															expr: &labeledExpr{
																																pos:   position{line: 2902, col: 5, offset: 94343},
																																label: "content",
																																expr: &actionExpr{
																																	pos: position{line: 2902, col: 14, offset: 94352},
																																	run: (*parser).callonListElementContinuationElement1729,
																																	expr: &oneOrMoreExpr{
																																		pos: position{line: 2902, col: 14, offset: 94352},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 2902, col: 14, offset: 94352},
																																			val:        "[^\\r\\n|]",
																																			chars:      []rune{'\r', '\n', '|'},
																																			ignoreCase: false,
																																			inverted:   true,
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 3096, col: 8, offset: 100524},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 3089, col: 12, offset: 100384},
																											run: (*parser).callonListElementContinuationElement1733,
																											expr: &choiceExpr{
																												pos: position{line: 3089, col: 13, offset: 100385},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 3089, col: 13, offset: 100385},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 3089, col: 20, offset: 100392},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 3089, col: 29, offset: 100401},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 3093, col: 8, offset: 100474},
																											expr: &anyMatcher{
																												line: 3093, col: 9, offset: 100475,
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 2888, col: 6, offset: 93963},
																				alternatives: []interface{}{
																					&oneOrMoreExpr{
																						pos: position{line: 2888, col: 6, offset: 93963},
																						expr: &actionExpr{
																							pos: position{line: 690, col: 14, offset: 22312},
																							run: (*parser).callonListElementContinuationElement1742,
																							expr: &seqExpr{
																								pos: position{line: 690, col: 14, offset: 22312},
																								exprs: []interface{}{
																									&notExpr{
																										pos: position{line: 690, col: 14, offset: 22312},
																										expr: &notExpr{
																											pos: position{line: 3093, col: 8, offset: 100474},
																											expr: &anyMatcher{
																												line: 3093, col: 9, offset: 100475,
																											},
																										},
																									},
																									&zeroOrMoreExpr{
																										pos: position{line: 690, col: 19, offset: 22317},
																										expr: &actionExpr{
																											pos: position{line: 3080, col: 10, offset: 100200},
																											run: (*parser).callonListElementContinuationElement1748,
																											expr: &charClassMatcher{
																												pos:        position{line: 3080, col: 11, offset: 100201},
																												val:        "[ \\t]",
																												chars:      []rune{' ', '\t'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																									},
																									&choiceExpr{
																										pos: position{line: 3096, col: 8, offset: 100524},
																										alternatives: []interface{}{
																											&actionExpr{
																												pos: position{line: 3089, col: 12, offset: 100384},
																												run: (*parser).callonListElementContinuationElement1751,
																												expr: &choiceExpr{
																													pos: position{line: 3089, col: 13, offset: 100385},
																													alternatives: []interface{}{
																														&litMatcher{
																															pos:        position{line: 3089, col: 13, offset: 100385},
																															val:        "\n",
																															ignoreCase: false,
																															want:       "\"\\n\"",
																														},
																														&litMatcher{
																															pos:        position{line: 3089, col: 20, offset: 100392},
																															val:        "\r\n",
																															ignoreCase: false,
																															want:       "\"\\r\\n\"",
																														},
																														&litMatcher{
																															pos:        position{line: 3089, col: 29, offset: 100401},
																															val:        "\r",
																															ignoreCase: false,
																															want:       "\"\\r\"",
																														},
																													},
																												},
																											},
																											&notExpr{
																												pos: position{line: 3093, col: 8, offset: 100474},
																												expr: &anyMatcher{
																													line: 3093, col: 9, offset: 100475,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&andExpr{
																						pos: position{line: 2888, col: 19, offset: 93976},
																						expr: &choiceExpr{
																							pos: position{line: 2859, col: 22, offset: 93320},
																							alternatives: []interface{}{
																								&seqExpr{
																									pos: position{line: 2855, col: 19, offset: 93240},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 2855, col: 19, offset: 93240},
																											val:        "|===",
																											ignoreCase: false,
																											want:       "\"|===\"",
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 2855, col: 26, offset: 93247},
																											expr: &actionExpr{
																												pos: position{line: 3080, col: 10, offset: 100200},
																												run: (*parser).callonListElementContinuationElement1763,
																												expr: &charClassMatcher{
																													pos:        position{line: 3080, col: 11, offset: 100201},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&choiceExpr{
																											pos: position{line: 3096, col: 8, offset: 100524},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 3089, col: 12, offset: 100384},
																													run: (*parser).callonListElementContinuationElement1766,
																													expr: &choiceExpr{
																														pos: position{line: 3089, col: 13, offset: 100385},
																														alternatives: []interface{}{
																															&litMatcher{
																																pos:        position{line: 3089, col: 13, offset: 100385},
																																val:        "\n",
																																ignoreCase: false,
																																want:       "\"\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 3089, col: 20, offset: 100392},
																																val:        "\r\n",
																																ignoreCase: false,
																																want:       "\"\\r\\n\"",
																															},
																															&litMatcher{
																																pos:        position{line: 3089, col: 29, offset: 100401},
																																val:        "\r",
																																ignoreCase: false,
																																want:       "\"\\r\"",
																															},
																														},
																													},
																												},
																												&notExpr{
																													pos: position{line: 3093, col: 8, offset: 100474},
																													expr: &anyMatcher{
																														line: 3093, col: 9, offset: 100475,
																													},
																												},
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 3093, col: 8, offset: 100474},
																									expr: &anyMatcher{
																										line: 3093, col: 9, offset: 100475,
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 2877, col: 5, offset: 93719},
																	run: (*parser).callonListElementContinuationElement1775,
																	expr: &seqExpr{
																		pos: position{line: 2877, col: 5, offset: 93719},
																		exprs: []interface{}{
																			&notExpr{
																				pos: position{line: 2877, col: 5, offset: 93719},
																				expr: &choiceExpr{
																					pos: position{line: 2859, col: 22, offset: 93320},
																					alternatives: []interface{}{
																						&seqExpr{
																							pos: position{line: 2855, col: 19, offset: 93240},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 2855, col: 19, offset: 93240},
																									val:        "|===",
																									ignoreCase: false,
																									want:       "\"|===\"",
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 2855, col: 26, offset: 93247},
																									expr: &actionExpr{
																										pos: position{line: 3080, col: 10, offset: 100200},
																										run: (*parser).callonListElementContinuationElement1782,
																										expr: &charClassMatcher{
																											pos:        position{line: 3080, col: 11, offset: 100201},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&choiceExpr{
																									pos: position{line: 3096, col: 8, offset: 100524},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 3089, col: 12, offset: 100384},
																											run: (*parser).callonListElementContinuationElement1785,
																											expr: &choiceExpr{
																												pos: position{line: 3089, col: 13, offset: 100385},
																												alternatives: []interface{}{
																													&litMatcher{
																														pos:        position{line: 3089, col: 13, offset: 100385},
																														val:        "\n",
																														ignoreCase: false,
																														want:       "\"\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 3089, col: 20, offset: 100392},
																														val:        "\r\n",
																														ignoreCase: false,
																														want:       "\"\\r\\n\"",
																													},
																													&litMatcher{
																														pos:        position{line: 3089, col: 29, offset: 100401},
																														val:        "\r",
																														ignoreCase: false,
																														want:       "\"\\r\"",
																													},
																												},
																											},
																										},
																										&notExpr{
																											pos: position{line: 3093, col: 8, offset: 100474},
																											expr: &anyMatcher{
																												line: 3093, col: 9, offset: 100475,
																											},
																										},
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 3093, col: 8, offset: 100474},
																							expr: &anyMatcher{
																								line: 3093, col: 9, offset: 100475,
																							},
																						},
																					},
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 2878, col: 5, offset: 93742},
																				label: "cells",
																				expr: &oneOrMoreExpr{
																					pos: position{line: 2878, col: 11, offset: 93748},
																					expr: &actionExpr{
																						pos: position{line: 2894, col: 5, offset: 94142},
																						run: (*parser).callonListElementContinuationElement1796,
																						expr: &seqExpr{
																							pos: position{line: 2894, col: 5, offset: 94142},
																							exprs: []interface{}{
																								&notExpr{
																									pos: position{line: 2894, col: 5, offset: 94142},
																									expr: &choiceExpr{
																										pos: position{line: 2859, col: 22, offset: 93320},
																										alternatives: []interface{}{
																											&seqExpr{
																												pos: position{line: 2855, col: 19, offset: 93240},
																												exprs: []interface{}{
																													&litMatcher{
																														pos:        position{line: 2855, col: 19, offset: 93240},
																														val:        "|===",
																														ignoreCase: false,
																														want:       "\"|===\"",
																													},
																													&zeroOrMoreExpr{
																														pos: position{line: 2855, col: 26, offset: 93247},
																														expr: &actionExpr{
																															pos: position{line: 3080, col: 10, offset: 100200},
																															run: (*parser).callonListElementContinuationElement1803,
																															expr: &charClassMatcher{
																																pos:        position{line: 3080, col: 11, offset: 100201},
																																val:        "[ \\t]",
																																chars:      []rune{' ', '\t'},
																																ignoreCase: false,
																																inverted:   false,
																															},
																														},
																													},
																													&choiceExpr{
																														pos: position{line: 3096, col: 8, offset: 100524},
																														alternatives: []interface{}{
																															&actionExpr{
																																pos: position{line: 3089, col: 12, offset: 100384},
																																run: (*parser).callonListElementContinuationElement1806,
																																expr: &choiceExpr{
																																	pos: position{line: 3089, col: 13, offset: 100385},
																																	alternatives: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 3089, col: 13, offset: 100385},
																																			val:        "\n",
																																			ignoreCase: false,
																																			want:       "\"\\n\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 3089, col: 20, offset: 100392},
																																			val:        "\r\n",
																																			ignoreCase: false,
																																			want:       "\"\\r\\n\"",
																																		},
																																		&litMatcher{
																																			pos:        position{line: 3089, col: 29, offset: 100401},
																																			val:        "\r",
																																			ignoreCase: false,
																																			want:       "\"\\r\"",
																																		},
																																	},
																																},
																															},
																															&notExpr{
																																pos: position{line: 3093, col: 8, offset: 100474},
																																expr: &anyMatcher{
																																	line: 3093, col: 9, offset: 100475,
																																},
																															},
																														},
																													},
																												},
																											},
																											&notExpr{
																												pos: position{line: 3093, col: 8, offset: 100474},
																												expr: &anyMatcher{
																													line: 3093, col: 9, offset: 100475,
																												},
																											},
																										},
																									},
																								},
																								&notExpr{
																									pos: position{line: 2895, col: 5, offset: 94165},
																									expr: &actionExpr{
																										pos: position{line: 690, col: 14, offset: 22312},
																										run: (*parser).callonListElementContinuationElement1816,
																										expr: &seqExpr{
																											pos: position{line: 690, col: 14, offset: 22312},
																											exprs: []interface{}{
																												&notExpr{
																													pos: position{line: 690, col: 14, offset: 22312},
																													expr: &notExpr{
																														pos: position{line: 3093, col: 8, offset: 100474},
																														expr: &anyMatcher{
																															line: 3093, col: 9, offset: 100475,
																														},
																													},
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 690, col: 19, offset: 22317},
																													expr: &actionExpr{
																														pos: position{line: 3080, col: 10, offset: 100200},
																														run: (*parser).callonListElementContinuationElement1822,
																														expr: &charClassMatcher{
																															pos:        position{line: 3080, col: 11, offset: 100201},
																															val:        "[ \\t]",
																															chars:      []rune{' ', '\t'},
																															ignoreCase: false,
																															inverted:   false,
																														},
																													},
																												},
																												&choiceExpr{
																													pos: position{line: 3096, col: 8, offset: 100524},
																													alternatives: []interface{}{
																														&actionExpr{
																															pos: position{line: 3089, col: 12, offset: 100384},
																															run: (*parser).callonListElementContinuationElement1825,
																															expr: &choiceExpr{
																																pos: position{line: 3089, col: 13, offset: 100385},
																																alternatives: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 3089, col: 13, offset: 100385},
																																		val:        "\n",
																																		ignoreCase: false,
																																		want:       "\"\\n\"",
																																	},
																																	&litMatcher{
																																		pos:        position{line: 3089, col: 20, offset: 100392},
																																		val:        "\r\n",
																																		ignoreCase: false,
																																		want:       "\"\\r\\n\"",
																																	},
																																	&litMatcher{
																																		pos:        position{line: 3089, col: 29, offset: 100401},
																																		val:        "\r",
																																		ignoreCase: false,
																																		want:       "\"\\r\"",
																																	},
																																},
																															},
																														},
																														&notExpr{
																															pos: position{line: 3093, col: 8, offset: 100474},
																															expr: &anyMatcher{
																																line: 3093, col: 9, offset: 100475,
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 2896, col: 5, offset: 94180},
																									val:        "|",
																									ignoreCase: false,
																									want:       "\"|\"",
																								},
																								&zeroOrMoreExpr{
																									pos: position{line: 2896, col: 9, offset: 94184},
																									expr: &actionExpr{
																										pos: position{line: 3080, col: 10, offset: 100200},
																										run: (*parser).callonListElementContinuationElement1834,
																										expr: &charClassMatcher{
																											pos:        position{line: 3080, col: 11, offset: 100201},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&labeledExpr{
																									pos:   position{line: 2896, col: 16, offset: 94191},
																									label: "content",
																									expr: &zeroOrOneExpr{
																										pos: position{line: 2896, col: 25, offset: 94200},
																										expr: &actionExpr{
																											pos: position{line: 2902, col: 5, offset: 94343},
																											run: (*parser).callonListElementContinuationElement1838,
																											expr: &labeledExpr{
																												pos:   position{line: 2902, col: 5, offset: 94343},
																												label: "content",
																												expr: &actionExpr{
																													pos: position{line: 2902, col: 14, offset: 94352},
																													run: (*parser).callonListElementContinuationElement1840,
																													expr: &oneOrMoreExpr{
																														pos: position{line: 2902, col: 14, offset: 94352},
																														expr: &charClassMatcher{
																															pos:        position{line: 2902, col: 14, offset: 94352},
																															val:        "[^\\r\\n|]",
																															chars:      []rune{'\r', '\n', '|'},
																															ignoreCase: false,
																															inverted:   true,
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 3096, col: 8, offset: 100524},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 3089, col: 12, offset: 100384},
																						run: (*parser).callonListElementContinuationElement1844,
																						expr: &choiceExpr{
																							pos: position{line: 3089, col: 13, offset: 100385},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 3089, col: 13, offset: 100385},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 3089, col: 20, offset: 100392},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 3089, col: 29, offset: 100401},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 3093, col: 8, offset: 100474},
																						expr: &anyMatcher{
																							line: 3093, col: 9, offset: 100475,
																						},
																					},
																				},
																			},
																			&zeroOrMoreExpr{
																				pos: position{line: 2879, col: 5, offset: 93769},
																				expr: &actionExpr{
																					pos: position{line: 690, col: 14, offset: 22312},
																					run: (*parser).callonListElementContinuationElement1852,
																					expr: &seqExpr{
																						pos: position{line: 690, col: 14, offset: 22312},
																						exprs: []interface{}{
																							&notExpr{
																								pos: position{line: 690, col: 14, offset: 22312},
																								expr: &notExpr{
																									pos: position{line: 3093, col: 8, offset: 100474},
																									expr: &anyMatcher{
																										line: 3093, col: 9, offset: 100475,
																									},
																								},
																							},
																							&zeroOrMoreExpr{
																								pos: position{line: 690, col: 19, offset: 22317},
																								expr: &actionExpr{
																									pos: position{line: 3080, col: 10, offset: 100200},
																									run: (*parser).callonListElementContinuationElement1858,
																									expr: &charClassMatcher{
																										pos:        position{line: 3080, col: 11, offset: 100201},
																										val:        "[ \\t]",
																										chars:      []rune{' ', '\t'},
																										ignoreCase: false,
																										inverted:   false,
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 3096, col: 8, offset: 100524},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 3089, col: 12, offset: 100384},
																										run: (*parser).callonListElementContinuationElement1861,
																										expr: &choiceExpr{
																											pos: position{line: 3089, col: 13, offset: 100385},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 3089, col: 13, offset: 100385},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 3089, col: 20, offset: 100392},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 3089, col: 29, offset: 100401},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 3093, col: 8, offset: 100474},
																										expr: &anyMatcher{
																											line: 3093, col: 9, offset: 100475,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 2859, col: 22, offset: 93320},
													alternatives: []interface{}{
														&seqExpr{
															pos: position{line: 2855, col: 19, offset: 93240},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 2855, col: 19, offset: 93240},
																	val:        "|===",
																	ignoreCase: false,
																	want:       "\"|===\"",
																},
																&zeroOrMoreExpr{
																	pos: position{line: 2855, col: 26, offset: 93247},
																	expr: &actionExpr{
																		pos: position{line: 3080, col: 10, offset: 100200},
																		run: (*parser).callonListElementContinuationElement1872,
																		expr: &charClassMatcher{
																			pos:        position{line: 3080, col: 11, offset: 100201},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
																&choiceExpr{
																	pos: position{line: 3096, col: 8, offset: 100524},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 3089, col: 12, offset: 100384},
																			run: (*parser).callonListElementContinuationElement1875,
																			expr: &choiceExpr{
																				pos: position{line: 3089, col: 13, offset: 100385},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 3089, col: 13, offset: 100385},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 3089, col: 20, offset: 100392},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 3089, col: 29, offset: 100401},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 3093, col: 8, offset: 100474},
																			expr: &anyMatcher{
																				line: 3093, col: 9, offset: 100475,
																			},
																		},
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 3093, col: 8, offset: 100474},
															expr: &anyMatcher{
																line: 3093, col: 9, offset: 100475,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2770, col: 22, offset: 90863},
										run: (*parser).callonListElementContinuationElement1884,
										expr: &seqExpr{
											pos: position{line: 2770, col: 22, offset: 90863},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 2775, col: 31, offset: 91084},
													val:        "//",
													ignoreCase: false,
													want:       "\"//\"",
												},
												&notExpr{
													pos: position{line: 2775, col: 36, offset: 91089},
													expr: &litMatcher{
														pos:        position{line: 2775, col: 37, offset: 91090},
														val:        "//",
														ignoreCase: false,
														want:       "\"//\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 2770, col: 49, offset: 90890},
													label: "content",
													expr: &actionExpr{
														pos: position{line: 2777, col: 29, offset: 91125},
														run: (*parser).callonListElementContinuationElement1890,
														expr: &zeroOrMoreExpr{
															pos: position{line: 2777, col: 29, offset: 91125},
															expr: &charClassMatcher{
																pos:        position{line: 2777, col: 29, offset: 91125},
																val:        "[^\\r\\n]",
																chars:      []rune{'\r', '\n'},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 3096, col: 8, offset: 100524},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 3089, col: 12, offset: 100384},
															run: (*parser).callonListElementContinuationElement1894,
															expr: &choiceExpr{
																pos: position{line: 3089, col: 13, offset: 100385},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 3089, col: 13, offset: 100385},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 3089, col: 20, offset: 100392},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 3089, col: 29, offset: 100401},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 3093, col: 8, offset: 100474},
															expr: &anyMatcher{
																line: 3093, col: 9, offset: 100475,
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1853, col: 5, offset: 60759},
										run: (*parser).callonListElementContinuationElement1901,
										expr: &seqExpr{
											pos: position{line: 1853, col: 5, offset: 60759},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1853, col: 5, offset: 60759},
													label: "kind",
													expr: &choiceExpr{
														pos: position{line: 293, col: 19, offset: 9062},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 293, col: 19, offset: 9062},
																run: (*parser).callonListElementContinuationElement1905,
																expr: &litMatcher{
																	pos:        position{line: 293, col: 19, offset: 9062},
																	val:        "TIP",
																	ignoreCase: false,
																	want:       "\"TIP\"",
																},
															},
															&actionExpr{
																pos: position{line: 295, col: 5, offset: 9100},
																run: (*parser).callonListElementContinuationElement1907,
																expr: &litMatcher{
																	pos:        position{line: 295, col: 5, offset: 9100},
																	val:        "NOTE",
																	ignoreCase: false,
																	want:       "\"NOTE\"",
																},
															},
															&actionExpr{
																pos: position{line: 297, col: 5, offset: 9140},
																run: (*parser).callonListElementContinuationElement1909,
																expr: &litMatcher{
																	pos:        position{line: 297, col: 5, offset: 9140},
																	val:        "IMPORTANT",
																	ignoreCase: false,
																	want:       "\"IMPORTANT\"",
																},
															},
															&actionExpr{
																pos: position{line: 299, col: 5, offset: 9190},
																run: (*parser).callonListElementContinuationElement1911,
																expr: &litMatcher{
																	pos:        position{line: 299, col: 5, offset: 9190},
																	val:        "WARNING",
																	ignoreCase: false,
																	want:       "\"WARNING\"",
																},
															},
															&actionExpr{
																pos: position{line: 301, col: 5, offset: 9236},
																run: (*parser).callonListElementContinuationElement1913,
																expr: &litMatcher{
																	pos:        position{line: 301, col: 5, offset: 9236},
																	val:        "CAUTION",
																	ignoreCase: false,
																	want:       "\"CAUTION\"",
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1853, col: 27, offset: 60781},
													val:        ": ",
													ignoreCase: false,
													want:       "\": \"",
												},
												&labeledExpr{
													pos:   position{line: 1854, col: 5, offset: 60791},
													label: "firstLine",
													expr: &actionExpr{
														pos: position{line: 1865, col: 5, offset: 61135},
														run: (*parser).callonListElementContinuationElement1917,
														expr: &seqExpr{
															pos: position{line: 1865, col: 5, offset: 61135},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1865, col: 5, offset: 61135},
																	label: "content",
																	expr: &actionExpr{
																		pos: position{line: 1865, col: 14, offset: 61144},
																		run: (*parser).callonListElementContinuationElement1920,
																		expr: &oneOrMoreExpr{
																			pos: position{line: 1865, col: 14, offset: 61144},
																			expr: &charClassMatcher{
																				pos:        position{line: 1865, col: 14, offset: 61144},
																				val:        "[^\\r\\n]",
																				chars:      []rune{'\r', '\n'},
																				ignoreCase: false,
																				inverted:   true,
																			},
																		},
																	},
																},
																&andCodeExpr{
																	pos: position{line: 1868, col: 5, offset: 61251},
																	run: (*parser).callonListElementContinuationElement1923,
																},
																&choiceExpr{
																	pos: position{line: 3096, col: 8, offset: 100524},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 3089, col: 12, offset: 100384},
																			run: (*parser).callonListElementContinuationElement1925,
																			expr: &choiceExpr{
																				pos: position{line: 3089, col: 13, offset: 100385},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 3089, col: 13, offset: 100385},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 3089, col: 20, offset: 100392},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 3089, col: 29, offset: 100401},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 3093, col: 8, offset: 100474},
																			expr: &anyMatcher{
																				line: 3093, col: 9, offset: 100475,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1855, col: 5, offset: 60825},
													label: "otherLines",
													expr: &zeroOrMoreExpr{
														pos: position{line: 1855, col: 16, offset: 60836},
														expr: &actionExpr{
															pos: position{line: 1856, col: 9, offset: 60846},
															run: (*parser).callonListElementContinuationElement1934,
															expr: &seqExpr{
																pos: position{line: 1856, col: 9, offset: 60846},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1856, col: 9, offset: 60846},
																		expr: &seqExpr{
																			pos: position{line: 1593, col: 34, offset: 52137},
																			exprs: []interface{}{
																				&litMatcher{
																					pos:        position{line: 1593, col: 34, offset: 52137},
																					val:        "+",
																					ignoreCase: false,
																					want:       "\"+\"",
																				},
																				&zeroOrMoreExpr{
																					pos: position{line: 1593, col: 38, offset: 52141},
																					expr: &actionExpr{
																						pos: position{line: 3080, col: 10, offset: 100200},
																						run: (*parser).callonListElementContinuationElement1940,
																						expr: &charClassMatcher{
																							pos:        position{line: 3080, col: 11, offset: 100201},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 3089, col: 12, offset: 100384},
																					run: (*parser).callonListElementContinuationElement1942,
																					expr: &choiceExpr{
																						pos: position{line: 3089, col: 13, offset: 100385},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 3089, col: 13, offset: 100385},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 3089, col: 20, offset: 100392},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 3089, col: 29, offset: 100401},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 1857, col: 9, offset: 60885},
																		label: "line",
																		expr: &choiceExpr{
																			pos: position{line: 1857, col: 15, offset: 60891},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2770, col: 22, offset: 90863},
																					run: (*parser).callonListElementContinuationElement1949,
																					expr: &seqExpr{
																						pos: position{line: 2770, col: 22, offset: 90863},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2775, col: 31, offset: 91084},
																								val:        "//",
																								ignoreCase: false,
																								want:       "\"//\"",
																							},
																							&notExpr{
																								pos: position{line: 2775, col: 36, offset: 91089},
																								expr: &litMatcher{
																									pos:        position{line: 2775, col: 37, offset: 91090},
																									val:        "//",
																									ignoreCase: false,
																									want:       "\"//\"",
																								},
																							},
																							&labeledExpr{
																								pos:   position{line: 2770, col: 49, offset: 90890},
																								label: "content",
																								expr: &actionExpr{
																									pos: position{line: 2777, col: 29, offset: 91125},
																									run: (*parser).callonListElementContinuationElement1955,
																									expr: &zeroOrMoreExpr{
																										pos: position{line: 2777, col: 29, offset: 91125},
																										expr: &charClassMatcher{
																											pos:        position{line: 2777, col: 29, offset: 91125},
																											val:        "[^\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																								},
																							},
																							&choiceExpr{
																								pos: position{line: 3096, col: 8, offset: 100524},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 3089, col: 12, offset: 100384},
																										run: (*parser).callonListElementContinuationElement1959,
																										expr: &choiceExpr{
																											pos: position{line: 3089, col: 13, offset: 100385},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 3089, col: 13, offset: 100385},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 3089, col: 20, offset: 100392},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 3089, col: 29, offset: 100401},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 3093, col: 8, offset: 100474},
																										expr: &anyMatcher{
																											line: 3093, col: 9, offset: 100475,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 1865, col: 5, offset: 61135},
																					run: (*parser).callonListElementContinuationElement1966,
																					expr: &seqExpr{
																						pos: position{line: 1865, col: 5, offset: 61135},
																						exprs: []interface{}{
																							&labeledExpr{
																								pos:   position{line: 1865, col: 5, offset: 61135},
																								label: "content",
																								expr: &actionExpr{
																									pos: position{line: 1865, col: 14, offset: 61144},
																									run: (*parser).callonListElementContinuationElement1969,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 1865, col: 14, offset: 61144},
																										expr: &charClassMatcher{
																											pos:        position{line: 1865, col: 14, offset: 61144},
																											val:        "[^\\r\\n]",
																											chars:      []rune{'\r', '\n'},
																											ignoreCase: false,
																											inverted:   true,
																										},
																									},
																								},
																							},
																							&andCodeExpr{
																								pos: position{line: 1868, col: 5, offset: 61251},
																								run: (*parser).callonListElementContinuationElement1972,
																							},
																							&choiceExpr{
																								pos: position{line: 3096, col: 8, offset: 100524},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 3089, col: 12, offset: 100384},
																										run: (*parser).callonListElementContinuationElement1974,
																										expr: &choiceExpr{
																											pos: position{line: 3089, col: 13, offset: 100385},
																											alternatives: []interface{}{
																												&litMatcher{
																													pos:        position{line: 3089, col: 13, offset: 100385},
																													val:        "\n",
																													ignoreCase: false,
																													want:       "\"\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 3089, col: 20, offset: 100392},
																													val:        "\r\n",
																													ignoreCase: false,
																													want:       "\"\\r\\n\"",
																												},
																												&litMatcher{
																													pos:        position{line: 3089, col: 29, offset: 100401},
																													val:        "\r",
																													ignoreCase: false,
																													want:       "\"\\r\"",
																												},
																											},
																										},
																									},
																									&notExpr{
																										pos: position{line: 3093, col: 8, offset: 100474},
																										expr: &anyMatcher{
																											line: 3093, col: 9, offset: 100475,
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1876, col: 5, offset: 61417},
										run: (*parser).callonListElementContinuationElement1981,
										expr: &seqExpr{
											pos: position{line: 1876, col: 5, offset: 61417},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1876, col: 5, offset: 61417},
													label: "firstLine",
													expr: &actionExpr{
														pos: position{line: 1883, col: 5, offset: 61702},
														run: (*parser).callonListElementContinuationElement1984,
														expr: &seqExpr{
															pos: position{line: 1883, col: 5, offset: 61702},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 1883, col: 5, offset: 61702},
																	label: "content",
																	expr: &actionExpr{
																		pos: position{line: 1883, col: 14, offset: 61711},
																		run: (*parser).callonListElementContinuationElement1987,
																		expr: &seqExpr{
																			pos: position{line: 1883, col: 14, offset: 61711},
																			exprs: []interface{}{
																				&actionExpr{
																					pos: position{line: 3084, col: 11, offset: 100267},
																					run: (*parser).callonListElementContinuationElement1989,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 3084, col: 11, offset: 100267},
																						expr: &charClassMatcher{
																							pos:        position{line: 3084, col: 12, offset: 100268},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																				&oneOrMoreExpr{
																					pos: position{line: 1883, col: 21, offset: 61718},
																					expr: &charClassMatcher{
																						pos:        position{line: 1883, col: 21, offset: 61718},
																						val:        "[^\\r\\n]",
																						chars:      []rune{'\r', '\n'},
																						ignoreCase: false,
																						inverted:   true,
																					},
																				},
																			},
																		},
																	},
																},
																&andCodeExpr{
																	pos: position{line: 1886, col: 5, offset: 61775},
																	run: (*parser).callonListElementContinuationElement1994,
																},
																&choiceExpr{
																	pos: position{line: 3096, col: 8, offset: 100524},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 3089, col: 12, offset: 100384},
																			run: (*parser).callonListElementContinuationElement1996,
																			expr: &choiceExpr{
																				pos: position{line: 3089, col: 13, offset: 100385},
																				alternatives: []interface{}{
																					&litMatcher{
																						pos:        position{line: 3089, col: 13, offset: 100385},
																						val:        "\n",
																						ignoreCase: false,
																						want:       "\"\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 3089, col: 20, offset: 100392},
																						val:        "\r\n",
																						ignoreCase: false,
																						want:       "\"\\r\\n\"",
																					},
																					&litMatcher{
																						pos:        position{line: 3089, col: 29, offset: 100401},
																						val:        "\r",
																						ignoreCase: false,
																						want:       "\"\\r\"",
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 3093, col: 8, offset: 100474},
																			expr: &anyMatcher{
																				line: 3093, col: 9, offset: 100475,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1877, col: 5, offset: 61458},
													label: "otherLines",
													expr: &zeroOrMoreExpr{
														pos: position{line: 1877, col: 16, offset: 61469},
														expr: &choiceExpr{
															pos: position{line: 1877, col: 17, offset: 61470},
															alternatives: []interface{}{
																&actionExpr{
																	pos: position{line: 2770, col: 22, offset: 90863},
																	run: (*parser).callonListElementContinuationElement2006,
																	expr: &seqExpr{
																		pos: position{line: 2770, col: 22, offset: 90863},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 2775, col: 31, offset: 91084},
																				val:        "//",
																				ignoreCase: false,
																				want:       "\"//\"",
																			},
																			&notExpr{
																				pos: position{line: 2775, col: 36, offset: 91089},
																				expr: &litMatcher{
																					pos:        position{line: 2775, col: 37, offset: 91090},
																					val:        "//",
																					ignoreCase: false,
																					want:       "\"//\"",
																				},
																			},
																			&labeledExpr{
																				pos:   position{line: 2770, col: 49, offset: 90890},
																				label: "content",
																				expr: &actionExpr{
																					pos: position{line: 2777, col: 29, offset: 91125},
																					run: (*parser).callonListElementContinuationElement2012,
																					expr: &zeroOrMoreExpr{
																						pos: position{line: 2777, col: 29, offset: 91125},
																						expr: &charClassMatcher{
																							pos:        position{line: 2777, col: 29, offset: 91125},
																							val:        "[^\\r\\n]",
																							chars:      []rune{'\r', '\n'},
																							ignoreCase: false,
																							inverted:   true,
																						},
																					},
																				},
																			},
																			&choiceExpr{
																				pos: position{line: 3096, col: 8, offset: 100524},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 3089, col: 12, offset: 100384},
																						run: (*parser).callonListElementContinuationElement2016,
																						expr: &choiceExpr{
																							pos: position{line: 3089, col: 13, offset: 100385},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 3089, col: 13, offset: 100385},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 3089, col: 20, offset: 100392},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 3089, col: 29, offset: 100401},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 3093, col: 8, offset: 100474},
																						expr: &anyMatcher{
																							line: 3093, col: 9, offset: 100475,
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&actionExpr{
																	pos: position{line: 1865, col: 5, offset: 61135},
																	run: (*parser).callonListElementContinuationElement2023,
																	expr: &seqExpr{
																		pos: position{line: 1865, col: 5, offset: 61135},
																		exprs: []interface{}{
																			&labeledExpr{
																				pos:   position{line: 1865, col: 5, offset: 61135},
																				label: "content",
																				expr: &actionExpr{
																					pos: position{line: 1865, col: 14, offset: 61144},
																					run: (*parser).callonListElementContinuationElement2026,
																					expr: &oneOrMoreExpr{
																						pos: position{line: 1865, col: 14, offset: 61144},
																						expr: &charClassMatcher{
																							pos:        position{line: 1865, col: 14, offset: 61144},
																							val:        "[^\\r\\n]",
																							chars:      []rune{'\r', '\n'},
																							ignoreCase: false,
																							inverted:   true,
																						},
																					},
																				},
																			},
																			&andCodeExpr{
																				pos: position{line: 1868, col: 5, offset: 61251},
																				run: (*parser).callonListElementContinuationElement2029,
																			},
																			&choiceExpr{
																				pos: position{line: 3096, col: 8, offset: 100524},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 3089, col: 12, offset: 100384},
																						run: (*parser).callonListElementContinuationElement2031,
																						expr: &choiceExpr{
																							pos: position{line: 3089, col: 13, offset: 100385},
																							alternatives: []interface{}{
																								&litMatcher{
																									pos:        position{line: 3089, col: 13, offset: 100385},
																									val:        "\n",
																									ignoreCase: false,
																									want:       "\"\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 3089, col: 20, offset: 100392},
																									val:        "\r\n",
																									ignoreCase: false,
																									want:       "\"\\r\\n\"",
																								},
																								&litMatcher{
																									pos:        position{line: 3089, col: 29, offset: 100401},
																									val:        "\r",
																									ignoreCase: false,
																									want:       "\"\\r\"",
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 3093, col: 8, offset: 100474},
																						expr: &anyMatcher{
																							line: 3093, col: 9, offset: 100475,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1623, col: 5, offset: 53118},
										run: (*parser).callonListElementContinuationElement2038,
										expr: &seqExpr{
											pos: position{line: 1623, col: 5, offset: 53118},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1623, col: 5, offset: 53118},
													label: "content",
													expr: &actionExpr{
														pos: position{line: 1623, col: 14, offset: 53127},
														run: (*parser).callonListElementContinuationElement2041,
														expr: &oneOrMoreExpr{
															pos: position{line: 1623, col: 14, offset: 53127},
															expr: &charClassMatcher{
																pos:        position{line: 1623, col: 14, offset: 53127},
																val:        "[^\\r\\n]",
																chars:      []rune{'\r', '\n'},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
												},
												&choiceExpr{
													pos: position{line: 3096, col: 8, offset: 100524},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 3089, col: 12, offset: 100384},
															run: (*parser).callonListElementContinuationElement2045,
															expr: &choiceExpr{
																pos: position{line: 3089, col: 13, offset: 100385},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 3089, col: 13, offset: 100385},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 3089, col: 20, offset: 100392},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 3089, col: 29, offset: 100401},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&notExpr{
															pos: position{line: 3093, col: 8, offset: 100474},
															expr: &anyMatcher{
																line: 3093, col: 9, offset: 100475,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Callout",
			pos:  position{line: 1781, col: 1, offset: 58300},
			expr: &actionExpr{
				pos: position{line: 1783, col: 5, offset: 58378},
				run: (*parser).callonCallout1,
				expr: &seqExpr{
					pos: position{line: 1783, col: 5, offset: 58378},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 1783, col: 5, offset: 58378},
							run: (*parser).callonCallout3,
						},
						&litMatcher{
							pos:        position{line: 1786, col: 5, offset: 58445},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 1786, col: 9, offset: 58449},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1786, col: 14, offset: 58454},
								run: (*parser).callonCallout6,
								expr: &oneOrMoreExpr{
									pos: position{line: 1786, col: 14, offset: 58454},
									expr: &charClassMatcher{
										pos:        position{line: 1786, col: 14, offset: 58454},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1786, col: 62, offset: 58502},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1786, col: 66, offset: 58506},
							expr: &actionExpr{
								pos: position{line: 3080, col: 10, offset: 100200},
								run: (*parser).callonCallout11,
								expr: &charClassMatcher{
									pos:        position{line: 3080, col: 11, offset: 100201},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&andExpr{
							pos: position{line: 1786, col: 73, offset: 58513},
							expr: &choiceExpr{
								pos: position{line: 1786, col: 75, offset: 58515},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 3089, col: 12, offset: 100384},
										run: (*parser).callonCallout15,
										expr: &choiceExpr{
											pos: position{line: 3089, col: 13, offset: 100385},
											alternatives: []interface{}{
												&litMatcher{
													pos:        position{line: 3089, col: 13, offset: 100385},
													val:        "\n",
													ignoreCase: false,
													want:       "\"\\n\"",
												},
												&litMatcher{
													pos:        position{line: 3089, col: 20, offset: 100392},
													val:        "\r\n",
													ignoreCase: false,
													want:       "\"\\r\\n\"",
												},
												&litMatcher{
													pos:        position{line: 3089, col: 29, offset: 100401},
													val:        "\r",
													ignoreCase: false,
													want:       "\"\\r\"",
												},
											},
										},
									},
									&notExpr{
										pos: position{line: 3093, col: 8, offset: 100474},
										expr: &anyMatcher{
											line: 3093, col: 9, offset: 100475,
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1786, col: 81, offset: 58521},
										name: "Callout",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ShortcutParagraph",
			pos:  position{line: 1812, col: 1, offset: 59382},
			expr: &actionExpr{
				pos: position{line: 1813, col: 5, offset: 59408},
				run: (*parser).callonShortcutParagraph1,
				expr: &seqExpr{
					pos: position{line: 1813, col: 5, offset: 59408},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 1813, col: 5, offset: 59408},
							expr: &charClassMatcher{
								pos:        position{line: 2994, col: 13, offset: 97463},
								val:        "[0-9\\pL]",
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&andExpr{
							pos: position{line: 1814, col: 5, offset: 59519},
							expr: &notExpr{
								pos: position{line: 1814, col: 7, offset: 59521},
								expr: &actionExpr{
									pos: position{line: 1641, col: 5, offset: 53611},
									run: (*parser).callonShortcutParagraph7,
									expr: &seqExpr{
										pos: position{line: 1641, col: 5, offset: 53611},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 1641, col: 5, offset: 53611},
												expr: &actionExpr{
													pos: position{line: 3080, col: 10, offset: 100200},
													run: (*parser).callonShortcutParagraph10,
													expr: &charClassMatcher{
														pos:        position{line: 3080, col: 11, offset: 100201},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 1641, col: 12, offset: 53618},
												label: "prefix",
												expr: &choiceExpr{
													pos: position{line: 1643, col: 9, offset: 53681},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 1643, col: 9, offset: 53681},
															run: (*parser).callonShortcutParagraph14,
															expr: &seqExpr{
																pos: position{line: 1643, col: 9, offset: 53681},
																exprs: []interface{}{
																	&labeledExpr{
																		pos:   position{line: 1643, col: 9, offset: 53681},
																		label: "depth",
																		expr: &actionExpr{
																			pos: position{line: 1643, col: 16, offset: 53688},
																			run: (*parser).callonShortcutParagraph17,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 1643, col: 16, offset: 53688},
																				expr: &litMatcher{
																					pos:        position{line: 1643, col: 17, offset: 53689},
																					val:        ".",
																					ignoreCase: false,
																					want:       "\".\"",
																				},
																			},
																		},
																	},
																	&andCodeExpr{
																		pos: position{line: 1647, col: 9, offset: 53789},
																		run: (*parser).callonShortcutParagraph20,
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 1666, col: 11, offset: 54506},
															run: (*parser).callonShortcutParagraph21,
															expr: &seqExpr{
																pos: position{line: 1666, col: 11, offset: 54506},
																exprs: []interface{}{
																	&oneOrMoreExpr{
																		pos: position{line: 1666, col: 11, offset: 54506},
																		expr: &charClassMatcher{
																			pos:        position{line: 1666, col: 12, offset: 54507},
																			val:        "[0-9]",
																			ranges:     []rune{'0', '9'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 1666, col: 20, offset: 54515},
																		val:        ".",
																		ignoreCase: false,
																		want:       "\".\"",
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 1668, col: 13, offset: 54632},
															run: (*parser).callonShortcutParagraph26,
															expr: &seqExpr{
																pos: position{line: 1668, col: 13, offset: 54632},
																exprs: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 1668, col: 14, offset: 54633},
																		val:        "[a-z]",
																		ranges:     []rune{'a', 'z'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&litMatcher{
																		pos:        position{line: 1668, col: 21, offset: 54640},
																		val:        ".",
																		ignoreCase: false,
																		want:       "\".\"",
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 1670, col: 13, offset: 54760},
															run: (*parser).callonShortcutParagraph30,
															expr: &seqExpr{
																pos: position{line: 1670, col: 13, offset: 54760},
																exprs: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 1670, col: 14, offset: 54761},
																		val:        "[A-Z]",
																		ranges:     []rune{'A', 'Z'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&litMatcher{
																		pos:        position{line: 1670, col: 21, offset: 54768},
																		val:        ".",
																		ignoreCase: false,
																		want:       "\".\"",
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 1672, col: 13, offset: 54888},
															run: (*parser).callonShortcutParagraph34,
															expr: &seqExpr{
																pos: position{line: 1672, col: 13, offset: 54888},
																exprs: []interface{}{
																	&oneOrMoreExpr{
																		pos: position{line: 1672, col: 13, offset: 54888},
																		expr: &charClassMatcher{
																			pos:        position{line: 1672, col: 14, offset: 54889},
																			val:        "[ivxdlcm]",
																			chars:      []rune{'i', 'v', 'x', 'd', 'l', 'c', 'm'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 1672, col: 26, offset: 54901},
																		val:        ")",
																		ignoreCase: false,
																		want:       "\")\"",
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 1674, col: 13, offset: 55021},
															run: (*parser).callonShortcutParagraph39,
															expr: &seqExpr{
																pos: position{line: 1674, col: 13, offset: 55021},
																exprs: []interface{}{
																	&oneOrMoreExpr{
																		pos: position{line: 1674, col: 13, offset: 55021},
																		expr: &charClassMatcher{
																			pos:        position{line: 1674, col: 14, offset: 55022},
																			val:        "[IVXDLCM]",
																			chars:      []rune{'I', 'V', 'X', 'D', 'L', 'C', 'M'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 1674, col: 26, offset: 55034},
																		val:        ")",
																		ignoreCase: false,
																		want:       "\")\"",
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 3084, col: 11, offset: 100267},
												run: (*parser).callonShortcutParagraph44,
												expr: &oneOrMoreExpr{
													pos: position{line: 3084, col: 11, offset: 100267},
													expr: &charClassMatcher{
														pos:        position{line: 3084, col: 12, offset: 100268},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 1815, col: 5, offset: 59552},
							expr: &notExpr{
								pos: position{line: 1815, col: 7, offset: 59554},
								expr: &actionExpr{
									pos: position{line: 1691, col: 5, offset: 55573},
									run: (*parser).callonShortcutParagraph49,
									expr: &seqExpr{
										pos: position{line: 1691, col: 5, offset: 55573},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 1691, col: 5, offset: 55573},
												expr: &actionExpr{
													pos: position{line: 3080, col: 10, offset: 100200},
													run: (*parser).callonShortcutParagraph52,
													expr: &charClassMatcher{
														pos:        position{line: 3080, col: 11, offset: 100201},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 1691, col: 12, offset: 55580},
												label: "prefix",
												expr: &choiceExpr{
													pos: position{line: 1691, col: 20, offset: 55588},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 1693, col: 9, offset: 55645},
															run: (*parser).callonShortcutParagraph56,
															expr: &seqExpr{
																pos: position{line: 1693, col: 9, offset: 55645},
																exprs: []interface{}{
																	&labeledExpr{
																		pos:   position{line: 1693, col: 9, offset: 55645},
																		label: "depth",
																		expr: &actionExpr{
																			pos: position{line: 1693, col: 16, offset: 55652},
																			run: (*parser).callonShortcutParagraph59,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 1693, col: 16, offset: 55652},
																				expr: &litMatcher{
																					pos:        position{line: 1693, col: 17, offset: 55653},
																					val:        "*",
																					ignoreCase: false,
																					want:       "\"*\"",
																				},
																			},
																		},
																	},
																	&andCodeExpr{
																		pos: position{line: 1697, col: 9, offset: 55753},
																		run: (*parser).callonShortcutParagraph62,
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 1714, col: 14, offset: 56460},
															label: "depth",
															expr: &actionExpr{
																pos: position{line: 1714, col: 21, offset: 56467},
																run: (*parser).callonShortcutParagraph64,
																expr: &litMatcher{
																	pos:        position{line: 1714, col: 22, offset: 56468},
																	val:        "-",
																	ignoreCase: false,
																	want:       "\"-\"",
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 3084, col: 11, offset: 100267},
												run: (*parser).callonShortcutParagraph66,
												expr: &oneOrMoreExpr{
													pos: position{line: 3084, col: 11, offset: 100267},
													expr: &charClassMatcher{
														pos:        position{line: 3084, col: 12, offset: 100268},
														val:        "[ \\t]",
														chars:      []rune{' ', '\t'},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 1816, col: 5, offset: 59587},
							expr: &notExpr{
								pos: position{line: 1816, col: 7, offset: 59589},
								expr: &choiceExpr{
									pos: position{line: 293, col: 19, offset: 9062},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 293, col: 19, offset: 9062},
											run: (*parser).callonShortcutParagraph72,
											expr: &litMatcher{
												pos:        position{line: 293, col: 19, offset: 9062},
												val:        "TIP",
												ignoreCase: false,
												want:       "\"TIP\"",
											},
										},
										&actionExpr{
											pos: position{line: 295, col: 5, offset: 9100},
											run: (*parser).callonShortcutParagraph74,
											expr: &litMatcher{
												pos:        position{line: 295, col: 5, offset: 9100},
												val:        "NOTE",
												ignoreCase: false,
												want:       "\"NOTE\"",
											},
										},
										&actionExpr{
											pos: position{line: 297, col: 5, offset: 9140},
											run: (*parser).callonShortcutParagraph76,
											expr: &litMatcher{
												pos:        position{line: 297, col: 5, offset: 9140},
												val:        "IMPORTANT",
												ignoreCase: false,
												want:       "\"IMPORTANT\"",
											},
										},
										&actionExpr{
											pos: position{line: 299, col: 5, offset: 9190},
											run: (*parser).callonShortcutParagraph78,
											expr: &litMatcher{
												pos:        position{line: 299, col: 5, offset: 9190},
												val:        "WARNING",
												ignoreCase: false,
												want:       "\"WARNING\"",
											},
										},
										&actionExpr{
											pos: position{line: 301, col: 5, offset: 9236},
											run: (*parser).callonShortcutParagraph80,
											expr: &litMatcher{
												pos:        position{line: 301, col: 5, offset: 9236},
												val:        "CAUTION",
												ignoreCase: false,
												want:       "\"CAUTION\"",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1817, col: 5, offset: 59610},
							label: "firstLine",
							expr: &actionExpr{
								pos: position{line: 1865, col: 5, offset: 61135},
								run: (*parser).callonShortcutParagraph83,
								expr: &seqExpr{
									pos: position{line: 1865, col: 5, offset: 61135},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 1865, col: 5, offset: 61135},
											label: "content",
											expr: &actionExpr{
												pos: position{line: 1865, col: 14, offset: 61144},
												run: (*parser).callonShortcutParagraph86,
												expr: &oneOrMoreExpr{
													pos: position{line: 1865, col: 14, offset: 61144},
													expr: &charClassMatcher{
														pos:        position{line: 1865, col: 14, offset: 61144},
														val:        "[^\\r\\n]",
														chars:      []rune{'\r', '\n'},
														ignoreCase: false,
														inverted:   true,
													},
												},
											},
										},
										&andCodeExpr{
											pos: position{line: 1868, col: 5, offset: 61251},
											run: (*parser).callonShortcutParagraph89,
										},
										&choiceExpr{
											pos: position{line: 3096, col: 8, offset: 100524},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 3089, col: 12, offset: 100384},
													run: (*parser).callonShortcutParagraph91,
													expr: &choiceExpr{
														pos: position{line: 3089, col: 13, offset: 100385},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 3089, col: 13, offset: 100385},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
															&litMatcher{
																pos:        position{line: 3089, col: 20, offset: 100392},
																val:        "\r\n",
																ignoreCase: false,
																want:       "\"\\r\\n\"",
															},
															&litMatcher{
																pos:        position{line: 3089, col: 29, offset: 100401},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
													},
												},
												&notExpr{
													pos: position{line: 3093, col: 8, offset: 100474},
													expr: &anyMatcher{
														line: 3093, col: 9, offset: 100475,
													},
												},
											},
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1818, col: 5, offset: 59644},
							run: (*parser).callonShortcutParagraph98,
						},
						&labeledExpr{
							pos:   position{line: 1825, col: 5, offset: 60006},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1825, col: 16, offset: 60017},
								expr: &actionExpr{
									pos: position{line: 1826, col: 9, offset: 60027},
									run: (*parser).callonShortcutParagraph101,
									expr: &seqExpr{
										pos: position{line: 1826, col: 9, offset: 60027},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1826, col: 9, offset: 60027},
												expr: &notExpr{
													pos: position{line: 3093, col: 8, offset: 100474},
													expr: &anyMatcher{
														line: 3093, col: 9, offset: 100475,
													},
												},
											},
											&notExpr{
												pos: position{line: 1827, col: 9, offset: 60041},
												expr: &actionExpr{
													pos: position{line: 690, col: 14, offset: 22312},
													run: (*parser).callonShortcutParagraph107,
													expr: &seqExpr{
														pos: position{line: 690, col: 14, offset: 22312},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 690, col: 14, offset: 22312},
																expr: &notExpr{
																	pos: position{line: 3093, col: 8, offset: 100474},
																	expr: &anyMatcher{
																		line: 3093, col: 9, offset: 100475,
																	},
																},
															},
															&zeroOrMoreExpr{
																pos: position{line: 690, col: 19, offset: 22317},
																expr: &actionExpr{
																	pos: position{line: 3080, col: 10, offset: 100200},
																	run: (*parser).callonShortcutParagraph113,
																	expr: &charClassMatcher{
																		pos:        position{line: 3080, col: 11, offset: 100201},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 3096, col: 8, offset: 100524},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 3089, col: 12, offset: 100384},
																		run: (*parser).callonShortcutParagraph116,
																		expr: &choiceExpr{
																			pos: position{line: 3089, col: 13, offset: 100385},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 3089, col: 13, offset: 100385},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 3089, col: 20, offset: 100392},
																					val:        "\r\n",
																					ignoreCase: false,
																					want:       "\"\\r\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 3089, col: 29, offset: 100401},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 3093, col: 8, offset: 100474},
																		expr: &anyMatcher{
																			line: 3093, col: 9, offset: 100475,
																		},
																	},
																},
															},
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 1828, col: 9, offset: 60060},
												expr: &ruleRefExpr{
													pos:  position{line: 1828, col: 10, offset: 60061},
													name: "BlockAttributes",
												},
											},
											&notExpr{
												pos: position{line: 1829, col: 9, offset: 60085},
												expr: &seqExpr{
													pos: position{line: 1593, col: 34, offset: 52137},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 1593, col: 34, offset: 52137},
															val:        "+",
															ignoreCase: false,
															want:       "\"+\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 1593, col: 38, offset: 52141},
															expr: &actionExpr{
																pos: position{line: 3080, col: 10, offset: 100200},
																run: (*parser).callonShortcutParagraph129,
																expr: &charClassMatcher{
																	pos:        position{line: 3080, col: 11, offset: 100201},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
														&actionExpr{
															pos: position{line: 3089, col: 12, offset: 100384},
															run: (*parser).callonShortcutParagraph131,
															expr: &choiceExpr{
																pos: position{line: 3089, col: 13, offset: 100385},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 3089, col: 13, offset: 100385},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 3089, col: 20, offset: 100392},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 3089, col: 29, offset: 100401},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 1830, col: 9, offset: 60124},
												label: "line",
												expr: &choiceExpr{
													pos: position{line: 1830, col: 15, offset: 60130},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2770, col: 22, offset: 90863},
															run: (*parser).callonShortcutParagraph138,
															expr: &seqExpr{
																pos: position{line: 2770, col: 22, offset: 90863},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2775, col: 31, offset: 91084},
																		val:        "//",
																		ignoreCase: false,
																		want:       "\"//\"",
																	},
																	&notExpr{
																		pos: position{line: 2775, col: 36, offset: 91089},
																		expr: &litMatcher{
																			pos:        position{line: 2775, col: 37, offset: 91090},
																			val:        "//",
																			ignoreCase: false,
																			want:       "\"//\"",
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 2770, col: 49, offset: 90890},
																		label: "content",
																		expr: &actionExpr{
																			pos: position{line: 2777, col: 29, offset: 91125},
																			run: (*parser).callonShortcutParagraph144,
																			expr: &zeroOrMoreExpr{
																				pos: position{line: 2777, col: 29, offset: 91125},
																				expr: &charClassMatcher{
																					pos:        position{line: 2777, col: 29, offset: 91125},
																					val:        "[^\\r\\n]",
																					chars:      []rune{'\r', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 3096, col: 8, offset: 100524},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 3089, col: 12, offset: 100384},
																				run: (*parser).callonShortcutParagraph148,
																				expr: &choiceExpr{
																					pos: position{line: 3089, col: 13, offset: 100385},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 3089, col: 13, offset: 100385},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 3089, col: 20, offset: 100392},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 3089, col: 29, offset: 100401},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3093, col: 8, offset: 100474},
																				expr: &anyMatcher{
																					line: 3093, col: 9, offset: 100475,
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 1865, col: 5, offset: 61135},
															run: (*parser).callonShortcutParagraph155,
															expr: &seqExpr{
																pos: position{line: 1865, col: 5, offset: 61135},
																exprs: []interface{}{
																	&labeledExpr{
																		pos:   position{line: 1865, col: 5, offset: 61135},
																		label: "content",
																		expr: &actionExpr{
																			pos: position{line: 1865, col: 14, offset: 61144},
																			run: (*parser).callonShortcutParagraph158,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 1865, col: 14, offset: 61144},
																				expr: &charClassMatcher{
																					pos:        position{line: 1865, col: 14, offset: 61144},
																					val:        "[^\\r\\n]",
																					chars:      []rune{'\r', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&andCodeExpr{
																		pos: position{line: 1868, col: 5, offset: 61251},
																		run: (*parser).callonShortcutParagraph161,
																	},
																	&choiceExpr{
																		pos: position{line: 3096, col: 8, offset: 100524},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 3089, col: 12, offset: 100384},
																				run: (*parser).callonShortcutParagraph163,
																				expr: &choiceExpr{
																					pos: position{line: 3089, col: 13, offset: 100385},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 3089, col: 13, offset: 100385},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 3089, col: 20, offset: 100392},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 3089, col: 29, offset: 100401},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3093, col: 8, offset: 100474},
																				expr: &anyMatcher{
																					line: 3093, col: 9, offset: 100475,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Paragraph",
			pos:  position{line: 1837, col: 1, offset: 60327},
			expr: &actionExpr{
				pos: position{line: 1838, col: 5, offset: 60345},
				run: (*parser).callonParagraph1,
				expr: &seqExpr{
					pos: position{line: 1838, col: 5, offset: 60345},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1838, col: 5, offset: 60345},
							label: "firstLine",
							expr: &actionExpr{
								pos: position{line: 1865, col: 5, offset: 61135},
								run: (*parser).callonParagraph4,
								expr: &seqExpr{
									pos: position{line: 1865, col: 5, offset: 61135},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 1865, col: 5, offset: 61135},
											label: "content",
											expr: &actionExpr{
												pos: position{line: 1865, col: 14, offset: 61144},
												run: (*parser).callonParagraph7,
												expr: &oneOrMoreExpr{
													pos: position{line: 1865, col: 14, offset: 61144},
													expr: &charClassMatcher{
														pos:        position{line: 1865, col: 14, offset: 61144},
														val:        "[^\\r\\n]",
														chars:      []rune{'\r', '\n'},
														ignoreCase: false,
														inverted:   true,
													},
												},
											},
										},
										&andCodeExpr{
											pos: position{line: 1868, col: 5, offset: 61251},
											run: (*parser).callonParagraph10,
										},
										&choiceExpr{
											pos: position{line: 3096, col: 8, offset: 100524},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 3089, col: 12, offset: 100384},
													run: (*parser).callonParagraph12,
													expr: &choiceExpr{
														pos: position{line: 3089, col: 13, offset: 100385},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 3089, col: 13, offset: 100385},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
															&litMatcher{
																pos:        position{line: 3089, col: 20, offset: 100392},
																val:        "\r\n",
																ignoreCase: false,
																want:       "\"\\r\\n\"",
															},
															&litMatcher{
																pos:        position{line: 3089, col: 29, offset: 100401},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
													},
												},
												&notExpr{
													pos: position{line: 3093, col: 8, offset: 100474},
													expr: &anyMatcher{
														line: 3093, col: 9, offset: 100475,
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1839, col: 5, offset: 60379},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1839, col: 16, offset: 60390},
								expr: &actionExpr{
									pos: position{line: 1840, col: 9, offset: 60400},
									run: (*parser).callonParagraph21,
									expr: &seqExpr{
										pos: position{line: 1840, col: 9, offset: 60400},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1840, col: 9, offset: 60400},
												expr: &notExpr{
													pos: position{line: 3093, col: 8, offset: 100474},
													expr: &anyMatcher{
														line: 3093, col: 9, offset: 100475,
													},
												},
											},
											&notExpr{
												pos: position{line: 1841, col: 9, offset: 60413},
												expr: &actionExpr{
													pos: position{line: 690, col: 14, offset: 22312},
													run: (*parser).callonParagraph27,
													expr: &seqExpr{
														pos: position{line: 690, col: 14, offset: 22312},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 690, col: 14, offset: 22312},
																expr: &notExpr{
																	pos: position{line: 3093, col: 8, offset: 100474},
																	expr: &anyMatcher{
																		line: 3093, col: 9, offset: 100475,
																	},
																},
															},
															&zeroOrMoreExpr{
																pos: position{line: 690, col: 19, offset: 22317},
																expr: &actionExpr{
																	pos: position{line: 3080, col: 10, offset: 100200},
																	run: (*parser).callonParagraph33,
																	expr: &charClassMatcher{
																		pos:        position{line: 3080, col: 11, offset: 100201},
																		val:        "[ \\t]",
																		chars:      []rune{' ', '\t'},
																		ignoreCase: false,
																		inverted:   false,
																	},
																},
															},
															&choiceExpr{
																pos: position{line: 3096, col: 8, offset: 100524},
																alternatives: []interface{}{
																	&actionExpr{
																		pos: position{line: 3089, col: 12, offset: 100384},
																		run: (*parser).callonParagraph36,
																		expr: &choiceExpr{
																			pos: position{line: 3089, col: 13, offset: 100385},
																			alternatives: []interface{}{
																				&litMatcher{
																					pos:        position{line: 3089, col: 13, offset: 100385},
																					val:        "\n",
																					ignoreCase: false,
																					want:       "\"\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 3089, col: 20, offset: 100392},
																					val:        "\r\n",
																					ignoreCase: false,
																					want:       "\"\\r\\n\"",
																				},
																				&litMatcher{
																					pos:        position{line: 3089, col: 29, offset: 100401},
																					val:        "\r",
																					ignoreCase: false,
																					want:       "\"\\r\"",
																				},
																			},
																		},
																	},
																	&notExpr{
																		pos: position{line: 3093, col: 8, offset: 100474},
																		expr: &anyMatcher{
																			line: 3093, col: 9, offset: 100475,
																		},
																	},
																},
															},
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 1842, col: 9, offset: 60432},
												expr: &ruleRefExpr{
													pos:  position{line: 1842, col: 10, offset: 60433},
													name: "BlockAttributes",
												},
											},
											&notExpr{
												pos: position{line: 1843, col: 9, offset: 60457},
												expr: &seqExpr{
													pos: position{line: 1593, col: 34, offset: 52137},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 1593, col: 34, offset: 52137},
															val:        "+",
															ignoreCase: false,
															want:       "\"+\"",
														},
														&zeroOrMoreExpr{
															pos: position{line: 1593, col: 38, offset: 52141},
															expr: &actionExpr{
																pos: position{line: 3080, col: 10, offset: 100200},
																run: (*parser).callonParagraph49,
																expr: &charClassMatcher{
																	pos:        position{line: 3080, col: 11, offset: 100201},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
														&actionExpr{
															pos: position{line: 3089, col: 12, offset: 100384},
															run: (*parser).callonParagraph51,
															expr: &choiceExpr{
																pos: position{line: 3089, col: 13, offset: 100385},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 3089, col: 13, offset: 100385},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 3089, col: 20, offset: 100392},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 3089, col: 29, offset: 100401},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 1844, col: 9, offset: 60496},
												label: "line",
												expr: &choiceExpr{
													pos: position{line: 1844, col: 15, offset: 60502},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2770, col: 22, offset: 90863},
															run: (*parser).callonParagraph58,
															expr: &seqExpr{
																pos: position{line: 2770, col: 22, offset: 90863},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 2775, col: 31, offset: 91084},
																		val:        "//",
																		ignoreCase: false,
																		want:       "\"//\"",
																	},
																	&notExpr{
																		pos: position{line: 2775, col: 36, offset: 91089},
																		expr: &litMatcher{
																			pos:        position{line: 2775, col: 37, offset: 91090},
																			val:        "//",
																			ignoreCase: false,
																			want:       "\"//\"",
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 2770, col: 49, offset: 90890},
																		label: "content",
																		expr: &actionExpr{
																			pos: position{line: 2777, col: 29, offset: 91125},
																			run: (*parser).callonParagraph64,
																			expr: &zeroOrMoreExpr{
																				pos: position{line: 2777, col: 29, offset: 91125},
																				expr: &charClassMatcher{
																					pos:        position{line: 2777, col: 29, offset: 91125},
																					val:        "[^\\r\\n]",
																					chars:      []rune{'\r', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 3096, col: 8, offset: 100524},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 3089, col: 12, offset: 100384},
																				run: (*parser).callonParagraph68,
																				expr: &choiceExpr{
																					pos: position{line: 3089, col: 13, offset: 100385},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 3089, col: 13, offset: 100385},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 3089, col: 20, offset: 100392},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 3089, col: 29, offset: 100401},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3093, col: 8, offset: 100474},
																				expr: &anyMatcher{
																					line: 3093, col: 9, offset: 100475,
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 1865, col: 5, offset: 61135},
															run: (*parser).callonParagraph75,
															expr: &seqExpr{
																pos: position{line: 1865, col: 5, offset: 61135},
																exprs: []interface{}{
																	&labeledExpr{
																		pos:   position{line: 1865, col: 5, offset: 61135},
																		label: "content",
																		expr: &actionExpr{
																			pos: position{line: 1865, col: 14, offset: 61144},
																			run: (*parser).callonParagraph78,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 1865, col: 14, offset: 61144},
																				expr: &charClassMatcher{
																					pos:        position{line: 1865, col: 14, offset: 61144},
																					val:        "[^\\r\\n]",
																					chars:      []rune{'\r', '\n'},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&andCodeExpr{
																		pos: position{line: 1868, col: 5, offset: 61251},
																		run: (*parser).callonParagraph81,
																	},
																	&choiceExpr{
																		pos: position{line: 3096, col: 8, offset: 100524},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 3089, col: 12, offset: 100384},
																				run: (*parser).callonParagraph83,
																				expr: &choiceExpr{
																					pos: position{line: 3089, col: 13, offset: 100385},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 3089, col: 13, offset: 100385},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 3089, col: 20, offset: 100392},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 3089, col: 29, offset: 100401},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 3093, col: 8, offset: 100474},
																				expr: &anyMatcher{
																					line: 3093, col: 9, offset: 100475,
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedText",
			pos:  position{line: 1896, col: 1, offset: 62237},
			expr: &choiceExpr{
				pos: position{line: 1900, col: 5, offset: 62458},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1900, col: 5, offset: 62458},
						run: (*parser).callonQuotedText2,
						expr: &seqExpr{
							pos: position{line: 1900, col: 5, offset: 62458},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1900, col: 5, offset: 62458},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1900, col: 16, offset: 62469},
										expr: &actionExpr{
											pos: position{line: 1900, col: 17, offset: 62470},
											run: (*parser).callonQuotedText6,
											expr: &ruleRefExpr{
												pos:  position{line: 1900, col: 17, offset: 62470},
												name: "LongHandAttributes",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1903, col: 5, offset: 62558},
									label: "text",
									expr: &ruleRefExpr{
										pos:  position{line: 1903, col: 10, offset: 62563},
										name: "EscapedQuotedText",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1909, col: 5, offset: 62747},
						run: (*parser).callonQuotedText10,
						expr: &seqExpr{
							pos: position{line: 1909, col: 5, offset: 62747},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1909, col: 5, offset: 62747},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1909, col: 16, offset: 62758},
										expr: &ruleRefExpr{
											pos:  position{line: 1909, col: 17, offset: 62759},
											name: "LongHandAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1910, col: 5, offset: 62785},
									label: "text",
									expr: &choiceExpr{
										pos: position{line: 1910, col: 11, offset: 62791},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1910, col: 11, offset: 62791},
												name: "UnconstrainedQuotedText",
											},
											&ruleRefExpr{
												pos:  position{line: 1910, col: 37, offset: 62817},
												name: "ConstrainedQuotedText",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedText",
			pos:  position{line: 1919, col: 1, offset: 63093},
			expr: &choiceExpr{
				pos: position{line: 1920, col: 5, offset: 63123},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1920, col: 5, offset: 63123},
						name: "SingleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1921, col: 7, offset: 63150},
						name: "SingleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1922, col: 7, offset: 63178},
						name: "SingleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1923, col: 7, offset: 63206},
						name: "SingleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1924, col: 7, offset: 63238},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1925, col: 7, offset: 63259},
						name: "SuperscriptText",
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedText",
			pos:  position{line: 1927, col: 1, offset: 63277},
			expr: &choiceExpr{
				pos: position{line: 1928, col: 5, offset: 63309},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1928, col: 5, offset: 63309},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1929, col: 7, offset: 63335},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1930, col: 7, offset: 63363},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1931, col: 7, offset: 63391},
						name: "DoubleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "EscapedQuotedText",
			pos:  position{line: 1933, col: 1, offset: 63417},
			expr: &actionExpr{
				pos: position{line: 1934, col: 5, offset: 63498},
				run: (*parser).callonEscapedQuotedText1,
				expr: &seqExpr{
					pos: position{line: 1934, col: 5, offset: 63498},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 1934, col: 5, offset: 63498},
							expr: &litMatcher{
								pos:        position{line: 1934, col: 7, offset: 63500},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1935, col: 5, offset: 63509},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1936, col: 9, offset: 63527},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1936, col: 9, offset: 63527},
										name: "EscapedBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1937, col: 11, offset: 63554},
										name: "EscapedItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1938, col: 11, offset: 63582},
										name: "EscapedMarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1939, col: 11, offset: 63610},
										name: "EscapedMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1940, col: 11, offset: 63641},
										name: "EscapedSubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1941, col: 11, offset: 63672},
										name: "EscapedSuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BoldText",
			pos:  position{line: 1961, col: 1, offset: 64199},
			expr: &choiceExpr{
				pos: position{line: 1961, col: 13, offset: 64211},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1961, col: 13, offset: 64211},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1961, col: 35, offset: 64233},
						name: "SingleQuoteBoldText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldText",
			pos:  position{line: 1975, col: 1, offset: 64595},
			expr: &actionExpr{
				pos: position{line: 1976, col: 5, offset: 64623},
				run: (*parser).callonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 1976, col: 5, offset: 64623},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1973, col: 33, offset: 64589},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
						&labeledExpr{
							pos:   position{line: 1977, col: 5, offset: 64657},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1977, col: 15, offset: 64667},
								name: "DoubleQuoteBoldTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1973, col: 33, offset: 64589},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElements",
			pos:  position{line: 1982, col: 1, offset: 64824},
			expr: &oneOrMoreExpr{
				pos: position{line: 1982, col: 32, offset: 64855},
				expr: &ruleRefExpr{
					pos:  position{line: 1982, col: 32, offset: 64855},
					name: "DoubleQuoteBoldTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElement",
			pos:  position{line: 1984, col: 1, offset: 64886},
			expr: &actionExpr{
				pos: position{line: 1985, col: 5, offset: 64921},
				run: (*parser).callonDoubleQuoteBoldTextElement1,
				expr: &seqExpr{
					pos: position{line: 1985, col: 5, offset: 64921},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1985, col: 5, offset: 64921},
							expr: &litMatcher{
								pos:        position{line: 1973, col: 33, offset: 64589},
								val:        "**",
								ignoreCase: false,
								want:       "\"**\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1986, col: 5, offset: 64955},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1987, col: 9, offset: 64973},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 1966, col: 5, offset: 64347},
										run: (*parser).callonDoubleQuoteBoldTextElement7,
										expr: &seqExpr{
											pos: position{line: 1966, col: 5, offset: 64347},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 1966, col: 5, offset: 64347},
													expr: &charClassMatcher{
														pos:        position{line: 1966, col: 5, offset: 64347},
														val:        "[,?!;0-9\\pL]",
														chars:      []rune{',', '?', '!', ';'},
														ranges:     []rune{'0', '9'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&andExpr{
													pos: position{line: 1966, col: 19, offset: 64361},
													expr: &choiceExpr{
														pos: position{line: 1966, col: 21, offset: 64363},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 3080, col: 10, offset: 100200},
																run: (*parser).callonDoubleQuoteBoldTextElement13,
																expr: &charClassMatcher{
																	pos:        position{line: 3080, col: 11, offset: 100201},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&litMatcher{
																pos:        position{line: 1963, col: 22, offset: 64321},
																val:        "*",
																ignoreCase: false,
																want:       "\"*\"",
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 3084, col: 11, offset: 100267},
										run: (*parser).callonDoubleQuoteBoldTextElement16,
										expr: &oneOrMoreExpr{
											pos: position{line: 3084, col: 11, offset: 100267},
											expr: &charClassMatcher{
												pos:        position{line: 3084, col: 12, offset: 100268},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
									&seqExpr{
										pos: position{line: 1989, col: 11, offset: 65046},
										exprs: []interface{}{
											&actionExpr{
												pos: position{line: 3089, col: 12, offset: 100384},
												run: (*parser).callonDoubleQuoteBoldTextElement20,
												expr: &choiceExpr{
													pos: position{line: 3089, col: 13, offset: 100385},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 3089, col: 13, offset: 100385},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&litMatcher{
															pos:        position{line: 3089, col: 20, offset: 100392},
															val:        "\r\n",
															ignoreCase: false,
															want:       "\"\\r\\n\"",
														},
														&litMatcher{
															pos:        position{line: 3089, col: 29, offset: 100401},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 1989, col: 19, offset: 65054},
												expr: &actionExpr{
													pos: position{line: 3089, col: 12, offset: 100384},
													run: (*parser).callonDoubleQuoteBoldTextElement26,
													expr: &choiceExpr{
														pos: position{line: 3089, col: 13, offset: 100385},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 3089, col: 13, offset: 100385},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
															&litMatcher{
																pos:        position{line: 3089, col: 20, offset: 100392},
																val:        "\r\n",
																ignoreCase: false,
																want:       "\"\\r\\n\"",
															},
															&litMatcher{
																pos:        position{line: 3089, col: 29, offset: 100401},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 648, col: 5, offset: 20883},
										run: (*parser).callonDoubleQuoteBoldTextElement31,
										expr: &seqExpr{
											pos: position{line: 648, col: 5, offset: 20883},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 648, col: 5, offset: 20883},
													run: (*parser).callonDoubleQuoteBoldTextElement33,
												},
												&labeledExpr{
													pos:   position{line: 651, col: 5, offset: 20952},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 651, col: 14, offset: 20961},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 671, col: 25, offset: 21614},
																run: (*parser).callonDoubleQuoteBoldTextElement36,
																expr: &seqExpr{
																	pos: position{line: 671, col: 25, offset: 21614},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 671, col: 25, offset: 21614},
																			val:        "{counter:",
																			ignoreCase: false,
																			want:       "\"{counter:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 671, col: 37, offset: 21626},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 324, col: 18, offset: 10072},
																				run: (*parser).callonDoubleQuoteBoldTextElement40,
																				expr: &seqExpr{
																					pos: position{line: 324, col: 18, offset: 10072},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 324, col: 18, offset: 10072},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 324, col: 28, offset: 10082},
																							expr: &charClassMatcher{
																								pos:        position{line: 324, col: 29, offset: 10083},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 671, col: 56, offset: 21645},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 671, col: 62, offset: 21651},
																				expr: &actionExpr{
																					pos: position{line: 679, col: 17, offset: 21946},
																					run: (*parser).callonDoubleQuoteBoldTextElement47,
																					expr: &seqExpr{
																						pos: position{line: 679, col: 17, offset: 21946},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 679, col: 17, offset: 21946},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 679, col: 21, offset: 21950},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 679, col: 28, offset: 21957},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 679, col: 28, offset: 21957},
																											run: (*parser).callonDoubleQuoteBoldTextElement52,
																											expr: &charClassMatcher{
																												pos:        position{line: 679, col: 28, offset: 21957},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 681, col: 9, offset: 22011},
																											run: (*parser).callonDoubleQuoteBoldTextElement54,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 681, col: 9, offset: 22011},
																												expr: &charClassMatcher{
																													pos:        position{line: 681, col: 9, offset: 22011},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 671, col: 78, offset: 21667},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 675, col: 25, offset: 21785},
																run: (*parser).callonDoubleQuoteBoldTextElement58,
																expr: &seqExpr{
																	pos: position{line: 675, col: 25, offset: 21785},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 675, col: 25, offset: 21785},
																			val:        "{counter2:",
																			ignoreCase: false,
																			want:       "\"{counter2:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 675, col: 38, offset: 21798},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 324, col: 18, offset: 10072},
																				run: (*parser).callonDoubleQuoteBoldTextElement62,
																				expr: &seqExpr{
																					pos: position{line: 324, col: 18, offset: 10072},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 324, col: 18, offset: 10072},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 324, col: 28, offset: 10082},
																							expr: &charClassMatcher{
																								pos:        position{line: 324, col: 29, offset: 10083},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 675, col: 57, offset: 21817},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 675, col: 63, offset: 21823},
																				expr: &actionExpr{
																					pos: position{line: 679, col: 17, offset: 21946},
																					run: (*parser).callonDoubleQuoteBoldTextElement69,
																					expr: &seqExpr{
																						pos: position{line: 679, col: 17, offset: 21946},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 679, col: 17, offset: 21946},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 679, col: 21, offset: 21950},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 679, col: 28, offset: 21957},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 679, col: 28, offset: 21957},
																											run: (*parser).callonDoubleQuoteBoldTextElement74,
																											expr: &charClassMatcher{
																												pos:        position{line: 679, col: 28, offset: 21957},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 681, col: 9, offset: 22011},
																											run: (*parser).callonDoubleQuoteBoldTextElement76,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 681, col: 9, offset: 22011},
																												expr: &charClassMatcher{
																													pos:        position{line: 681, col: 9, offset: 22011},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 675, col: 79, offset: 21839},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 657, col: 5, offset: 21090},
																run: (*parser).callonDoubleQuoteBoldTextElement80,
																expr: &seqExpr{
																	pos: position{line: 657, col: 5, offset: 21090},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 657, col: 5, offset: 21090},
																			val:        "\\{",
																			ignoreCase: false,
																			want:       "\"\\\\{\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 657, col: 13, offset: 21098},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 324, col: 18, offset: 10072},
																				run: (*parser).callonDoubleQuoteBoldTextElement84,
																				expr: &seqExpr{
																					pos: position{line: 324, col: 18, offset: 10072},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 324, col: 18, offset: 10072},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 324, col: 28, offset: 10082},
																							expr: &charClassMatcher{
																								pos:        position{line: 324, col: 29, offset: 10083},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 657, col: 32, offset: 21117},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 664, col: 5, offset: 21358},
																run: (*parser).callonDoubleQuoteBoldTextElement90,
																expr: &seqExpr{
																	pos: position{line: 664, col: 5, offset: 21358},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 664, col: 5, offset: 21358},
																			val:        "{",
																			ignoreCase: false,
																			want:       "\"{\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 664, col: 9, offset: 21362},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 324, col: 18, offset: 10072},
																				run: (*parser).callonDoubleQuoteBoldTextElement94,
																				expr: &seqExpr{
																					pos: position{line: 324, col: 18, offset: 10072},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 324, col: 18, offset: 10072},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 324, col: 28, offset: 10082},
																							expr: &charClassMatcher{
																								pos:        position{line: 324, col: 29, offset: 10083},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 664, col: 28, offset: 21381},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1991, col: 11, offset: 65136},
										name: "InlineMacro",
									},
									&actionExpr{
										pos: position{line: 2753, col: 5, offset: 90225},
										run: (*parser).callonDoubleQuoteBoldTextElement101,
										expr: &seqExpr{
											pos: position{line: 2753, col: 5, offset: 90225},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 2753, col: 5, offset: 90225},
													run: (*parser).callonDoubleQuoteBoldTextElement103,
												},
												&labeledExpr{
													pos:   position{line: 2756, col: 5, offset: 90301},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 2758, col: 9, offset: 90399},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2758, col: 9, offset: 90399},
																run: (*parser).callonDoubleQuoteBoldTextElement106,
																expr: &choiceExpr{
																	pos: position{line: 699, col: 27, offset: 22665},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 699, col: 27, offset: 22665},
																			run: (*parser).callonDoubleQuoteBoldTextElement108,
																			expr: &seqExpr{
																				pos: position{line: 699, col: 27, offset: 22665},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 699, col: 27, offset: 22665},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 699, col: 32, offset: 22670},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 3065, col: 7, offset: 99852},
																							run: (*parser).callonDoubleQuoteBoldTextElement112,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 3065, col: 7, offset: 99852},
																								expr: &charClassMatcher{
																									pos:        position{line: 3065, col: 7, offset: 99852},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 699, col: 40, offset: 22678},
																						expr: &actionExpr{
																							pos: position{line: 3080, col: 10, offset: 100200},
																							run: (*parser).callonDoubleQuoteBoldTextElement116,
																							expr: &charClassMatcher{
																								pos:        position{line: 3080, col: 11, offset: 100201},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 699, col: 47, offset: 22685},
																						val:        ",",
																						ignoreCase: false,
																						want:       "\",\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 699, col: 51, offset: 22689},
																						label: "label",
																						expr: &oneOrMoreExpr{
																							pos: position{line: 709, col: 24, offset: 23090},
																							expr: &choiceExpr{
																								pos: position{line: 710, col: 5, offset: 23096},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 710, col: 6, offset: 23097},
																										run: (*parser).callonDoubleQuoteBoldTextElement122,
																										expr: &seqExpr{
																											pos: position{line: 710, col: 6, offset: 23097},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 710, col: 6, offset: 23097},
																													val:        "[0-9\\pL]",
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&oneOrMoreExpr{
																													pos: position{line: 710, col: 14, offset: 23105},
																													expr: &charClassMatcher{
																														pos:        position{line: 710, col: 14, offset: 23105},
																														val:        "[^\\r\\n{<>]",
																														chars:      []rune{'\r', '\n', '{', '<', '>'},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 657, col: 5, offset: 21090},
																										run: (*parser).callonDoubleQuoteBoldTextElement127,
																										expr: &seqExpr{
																											pos: position{line: 657, col: 5, offset: 21090},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 657, col: 5, offset: 21090},
																													val:        "\\{",
																													ignoreCase: false,
																													want:       "\"\\\\{\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 657, col: 13, offset: 21098},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 324, col: 18, offset: 10072},
																														run: (*parser).callonDoubleQuoteBoldTextElement131,
																														expr: &seqExpr{
																															pos: position{line: 324, col: 18, offset: 10072},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 324, col: 18, offset: 10072},
																																	val:        "[_0-9\\pL]",
																																	chars:      []rune{'_'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 324, col: 28, offset: 10082},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 324, col: 29, offset: 10083},
																																		val:        "[-0-9\\pL]",
																																		chars:      []rune{'-'},
																																		ranges:     []rune{'0', '9'},
																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 657, col: 32, offset: 21117},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 664, col: 5, offset: 21358},
																										run: (*parser).callonDoubleQuoteBoldTextElement137,
																										expr: &seqExpr{
																											pos: position{line: 664, col: 5, offset: 21358},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 664, col: 5, offset: 21358},
																													val:        "{",
																													ignoreCase: false,
																													want:       "\"{\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 664, col: 9, offset: 21362},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 324, col: 18, offset: 10072},
																														run: (*parser).callonDoubleQuoteBoldTextElement141,
																														expr: &seqExpr{
																															pos: position{line: 324, col: 18, offset: 10072},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 324, col: 18, offset: 10072},
																																	val:        "[_0-9\\pL]",
																																	chars:      []rune{'_'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 324, col: 28, offset: 10082},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 324, col: 29, offset: 10083},
																																		val:        "[-0-9\\pL]",
																																		chars:      []rune{'-'},
																																		ranges:     []rune{'0', '9'},
																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 664, col: 28, offset: 21381},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 714, col: 8, offset: 23331},
																										run: (*parser).callonDoubleQuoteBoldTextElement147,
																										expr: &litMatcher{
																											pos:        position{line: 714, col: 8, offset: 23331},
																											val:        "{",
																											ignoreCase: false,
																											want:       "\"{\"",
																										},
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 699, col: 79, offset: 22717},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 701, col: 9, offset: 22790},
																			run: (*parser).callonDoubleQuoteBoldTextElement150,
																			expr: &seqExpr{
																				pos: position{line: 701, col: 9, offset: 22790},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 701, col: 9, offset: 22790},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 701, col: 14, offset: 22795},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 3065, col: 7, offset: 99852},
																							run: (*parser).callonDoubleQuoteBoldTextElement154,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 3065, col: 7, offset: 99852},
																								expr: &charClassMatcher{
																									pos:        position{line: 3065, col: 7, offset: 99852},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 701, col: 22, offset: 22803},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2761, col: 11, offset: 90503},
																run: (*parser).callonDoubleQuoteBoldTextElement158,
																expr: &charClassMatcher{
																	pos:        position{line: 2761, col: 12, offset: 90504},
																	val:        "[<>&]",
																	chars:      []rune{'<', '>', '&'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2786, col: 5, offset: 91397},
										run: (*parser).callonDoubleQuoteBoldTextElement160,
										expr: &seqExpr{
											pos: position{line: 2786, col: 5, offset: 91397},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 2786, col: 5, offset: 91397},
													val:        "\\",
													ignoreCase: false,
													want:       "\"\\\\\"",
												},
												&choiceExpr{
													pos: position{line: 2786, col: 10, offset: 91402},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2795, col: 5, offset: 91692},
															run: (*parser).callonDoubleQuoteBoldTextElement164,
															expr: &litMatcher{
																pos:        position{line: 2795, col: 5, offset: 91692},
																val:        "\"`",
																ignoreCase: false,
																want:       "\"\\\"`\"",
															},
														},
														&actionExpr{
															pos: position{line: 2798, col: 7, offset: 91750},
															run: (*parser).callonDoubleQuoteBoldTextElement166,
															expr: &litMatcher{
																pos:        position{line: 2798, col: 7, offset: 91750},
																val:        "`\"",
																ignoreCase: false,
																want:       "\"`\\\"\"",
															},
														},
														&actionExpr{
															pos: position{line: 2801, col: 7, offset: 91808},
															run: (*parser).callonDoubleQuoteBoldTextElement168,
															expr: &litMatcher{
																pos:        position{line: 2801, col: 7, offset: 91808},
																val:        "'`",
																ignoreCase: false,
																want:       "\"'`\"",
															},
														},
														&actionExpr{
															pos: position{line: 2804, col: 7, offset: 91864},
															run: (*parser).callonDoubleQuoteBoldTextElement170,
															expr: &litMatcher{
																pos:        position{line: 2804, col: 7, offset: 91864},
																val:        "`'",
																ignoreCase: false,
																want:       "\"`'\"",
															},
														},
														&actionExpr{
															pos: position{line: 2810, col: 14, offset: 91986},
															run: (*parser).callonDoubleQuoteBoldTextElement172,
															expr: &litMatcher{
																pos:        position{line: 2810, col: 14, offset: 91986},
																val:        "(C)",
																ignoreCase: false,
																want:       "\"(C)\"",
															},
														},
														&actionExpr{
															pos: position{line: 2814, col: 14, offset: 92052},
															run: (*parser).callonDoubleQuoteBoldTextElement174,
															expr: &litMatcher{
																pos:        position{line: 2814, col: 14, offset: 92052},
																val:        "(TM)",
																ignoreCase: false,
																want:       "\"(TM)\"",
															},
														},
														&actionExpr{
															pos: position{line: 2818, col: 15, offset: 92121},
															run: (*parser).callonDoubleQuoteBoldTextElement176,
															expr: &litMatcher{
																pos:        position{line: 2818, col: 15, offset: 92121},
																val:        "(R)",
																ignoreCase: false,
																want:       "\"(R)\"",
															},
														},
														&actionExpr{
															pos: position{line: 2822, col: 13, offset: 92186},
															run: (*parser).callonDoubleQuoteBoldTextElement178,
															expr: &litMatcher{
																pos:        position{line: 2822, col: 13, offset: 92186},
																val:        "...",
																ignoreCase: false,
																want:       "\"...\"",
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2795, col: 5, offset: 91692},
										run: (*parser).callonDoubleQuoteBoldTextElement180,
										expr: &litMatcher{
											pos:        position{line: 2795, col: 5, offset: 91692},
											val:        "\"`",
											ignoreCase: false,
											want:       "\"\\\"`\"",
										},
									},
									&actionExpr{
										pos: position{line: 2798, col: 7, offset: 91750},
										run: (*parser).callonDoubleQuoteBoldTextElement182,
										expr: &litMatcher{
											pos:        position{line: 2798, col: 7, offset: 91750},
											val:        "`\"",
											ignoreCase: false,
											want:       "\"`\\\"\"",
										},
									},
									&actionExpr{
										pos: position{line: 2801, col: 7, offset: 91808},
										run: (*parser).callonDoubleQuoteBoldTextElement184,
										expr: &litMatcher{
											pos:        position{line: 2801, col: 7, offset: 91808},
											val:        "'`",
											ignoreCase: false,
											want:       "\"'`\"",
										},
									},
									&actionExpr{
										pos: position{line: 2804, col: 7, offset: 91864},
										run: (*parser).callonDoubleQuoteBoldTextElement186,
										expr: &litMatcher{
											pos:        position{line: 2804, col: 7, offset: 91864},
											val:        "`'",
											ignoreCase: false,
											want:       "\"`'\"",
										},
									},
									&actionExpr{
										pos: position{line: 2810, col: 14, offset: 91986},
										run: (*parser).callonDoubleQuoteBoldTextElement188,
										expr: &litMatcher{
											pos:        position{line: 2810, col: 14, offset: 91986},
											val:        "(C)",
											ignoreCase: false,
											want:       "\"(C)\"",
										},
									},
									&actionExpr{
										pos: position{line: 2814, col: 14, offset: 92052},
										run: (*parser).callonDoubleQuoteBoldTextElement190,
										expr: &litMatcher{
											pos:        position{line: 2814, col: 14, offset: 92052},
											val:        "(TM)",
											ignoreCase: false,
											want:       "\"(TM)\"",
										},
									},
									&actionExpr{
										pos: position{line: 2818, col: 15, offset: 92121},
										run: (*parser).callonDoubleQuoteBoldTextElement192,
										expr: &litMatcher{
											pos:        position{line: 2818, col: 15, offset: 92121},
											val:        "(R)",
											ignoreCase: false,
											want:       "\"(R)\"",
										},
									},
									&actionExpr{
										pos: position{line: 2822, col: 13, offset: 92186},
										run: (*parser).callonDoubleQuoteBoldTextElement194,
										expr: &litMatcher{
											pos:        position{line: 2822, col: 13, offset: 92186},
											val:        "...",
											ignoreCase: false,
											want:       "\"...\"",
										},
									},
									&actionExpr{
										pos: position{line: 2833, col: 5, offset: 92496},
										run: (*parser).callonDoubleQuoteBoldTextElement196,
										expr: &seqExpr{
											pos: position{line: 2833, col: 5, offset: 92496},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 2994, col: 13, offset: 97463},
													val:        "[0-9\\pL]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 2833, col: 14, offset: 92505},
													val:        "\\'",
													ignoreCase: false,
													want:       "\"\\\\'\"",
												},
												&andExpr{
													pos: position{line: 2833, col: 19, offset: 92510},
													expr: &charClassMatcher{
														pos:        position{line: 2833, col: 20, offset: 92511},
														val:        "[\\pL]",
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2839, col: 5, offset: 92742},
										run: (*parser).callonDoubleQuoteBoldTextElement202,
										expr: &seqExpr{
											pos: position{line: 2839, col: 5, offset: 92742},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 2994, col: 13, offset: 97463},
													val:        "[0-9\\pL]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 2839, col: 14, offset: 92751},
													val:        "'",
													ignoreCase: false,
													want:       "\"'\"",
												},
												&andExpr{
													pos: position{line: 2839, col: 18, offset: 92755},
													expr: &charClassMatcher{
														pos:        position{line: 2839, col: 19, offset: 92756},
														val:        "[\\pL]",
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1994, col: 11, offset: 65252},
										name: "QuotedTextInDoubleQuoteBoldText",
									},
									&actionExpr{
										pos: position{line: 1219, col: 23, offset: 38141},
										run: (*parser).callonDoubleQuoteBoldTextElement209,
										expr: &seqExpr{
											pos: position{line: 1219, col: 23, offset: 38141},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1217, col: 32, offset: 38109},
													val:        "�",
													ignoreCase: false,
													want:       "\"�\"",
												},
												&labeledExpr{
													pos:   position{line: 1219, col: 51, offset: 38169},
													label: "ref",
													expr: &actionExpr{
														pos: position{line: 1219, col: 56, offset: 38174},
														run: (*parser).callonDoubleQuoteBoldTextElement213,
														expr: &oneOrMoreExpr{
															pos: position{line: 1219, col: 56, offset: 38174},
															expr: &charClassMatcher{
																pos:        position{line: 1219, col: 56, offset: 38174},
																val:        "[0-9]",
																ranges:     []rune{'0', '9'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1217, col: 32, offset: 38109},
													val:        "�",
													ignoreCase: false,
													want:       "\"�\"",
												},
											},
										},
									},
									&charClassMatcher{
										pos:        position{line: 2013, col: 5, offset: 65764},
										val:        "[^\\r\\n*]",
										chars:      []rune{'\r', '\n', '*'},
										ignoreCase: false,
										inverted:   true,
									},
									&actionExpr{
										pos: position{line: 2014, col: 7, offset: 65861},
										run: (*parser).callonDoubleQuoteBoldTextElement218,
										expr: &seqExpr{
											pos: position{line: 2014, col: 7, offset: 65861},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1973, col: 33, offset: 64589},
													val:        "**",
													ignoreCase: false,
													want:       "\"**\"",
												},
												&actionExpr{
													pos: position{line: 2998, col: 14, offset: 97537},
													run: (*parser).callonDoubleQuoteBoldTextElement221,
													expr: &oneOrMoreExpr{
														pos: position{line: 2998, col: 14, offset: 97537},
														expr: &charClassMatcher{
															pos:        position{line: 2998, col: 14, offset: 97537},
															val:        "[0-9\\pL]",
															ranges:     []rune{'0', '9'},
															classes:    []*unicode.RangeTable{rangeTable("L")},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInDoubleQuoteBoldText",
			pos:  position{line: 2000, col: 1, offset: 65406},
			expr: &actionExpr{
				pos: position{line: 2001, col: 5, offset: 65446},
				run: (*parser).callonQuotedTextInDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 2001, col: 5, offset: 65446},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2001, col: 5, offset: 65446},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 2001, col: 16, offset: 65457},
								expr: &ruleRefExpr{
									pos:  position{line: 2001, col: 17, offset: 65458},
									name: "LongHandAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2002, col: 5, offset: 65484},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 2003, col: 9, offset: 65499},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 2003, col: 9, offset: 65499},
										name: "SingleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 2004, col: 11, offset: 65529},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 2005, col: 11, offset: 65550},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 2006, col: 11, offset: 65571},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 2007, col: 11, offset: 65595},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 2008, col: 11, offset: 65619},
										name: "SuperscriptText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldText",
			pos:  position{line: 2025, col: 1, offset: 66248},
			expr: &actionExpr{
				pos: position{line: 2026, col: 4, offset: 66275},
				run: (*parser).callonSingleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 2026, col: 4, offset: 66275},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2021, col: 38, offset: 66202},
							val:        "*",
							ignoreCase: false,
							want:       "\"*\"",
						},
						&labeledExpr{
							pos:   position{line: 2027, col: 5, offset: 66313},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 2027, col: 15, offset: 66323},
								name: "SingleQuoteBoldTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 2023, col: 36, offset: 66242},
							val:        "*",
							ignoreCase: false,
							want:       "\"*\"",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElements",
			pos:  position{line: 2032, col: 1, offset: 66483},
			expr: &actionExpr{
				pos: position{line: 2033, col: 5, offset: 66520},
				run: (*parser).callonSingleQuoteBoldTextElements1,
				expr: &seqExpr{
					pos: position{line: 2033, col: 5, offset: 66520},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2033, col: 5, offset: 66520},
							expr: &notExpr{
								pos: position{line: 3093, col: 8, offset: 100474},
								expr: &anyMatcher{
									line: 3093, col: 9, offset: 100475,
								},
							},
						},
						&notExpr{
							pos: position{line: 2033, col: 10, offset: 66525},
							expr: &actionExpr{
								pos: position{line: 3080, col: 10, offset: 100200},
								run: (*parser).callonSingleQuoteBoldTextElements7,
								expr: &charClassMatcher{
									pos:        position{line: 3080, col: 11, offset: 100201},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2034, col: 5, offset: 66564},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 2034, col: 14, offset: 66573},
								expr: &ruleRefExpr{
									pos:  position{line: 2034, col: 15, offset: 66574},
									name: "SingleQuoteBoldTextElement",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 2035, col: 5, offset: 66608},
							run: (*parser).callonSingleQuoteBoldTextElements12,
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElement",
			pos:  position{line: 2041, col: 1, offset: 66749},
			expr: &choiceExpr{
				pos: position{line: 2042, col: 5, offset: 66784},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1966, col: 5, offset: 64347},
						run: (*parser).callonSingleQuoteBoldTextElement2,
						expr: &seqExpr{
							pos: position{line: 1966, col: 5, offset: 64347},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 1966, col: 5, offset: 64347},
									expr: &charClassMatcher{
										pos:        position{line: 1966, col: 5, offset: 64347},
										val:        "[,?!;0-9\\pL]",
										chars:      []rune{',', '?', '!', ';'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 1966, col: 19, offset: 64361},
									expr: &choiceExpr{
										pos: position{line: 1966, col: 21, offset: 64363},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 3080, col: 10, offset: 100200},
												run: (*parser).callonSingleQuoteBoldTextElement8,
												expr: &charClassMatcher{
													pos:        position{line: 3080, col: 11, offset: 100201},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&litMatcher{
												pos:        position{line: 1963, col: 22, offset: 64321},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3084, col: 11, offset: 100267},
						run: (*parser).callonSingleQuoteBoldTextElement11,
						expr: &oneOrMoreExpr{
							pos: position{line: 3084, col: 11, offset: 100267},
							expr: &charClassMatcher{
								pos:        position{line: 3084, col: 12, offset: 100268},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
					&seqExpr{
						pos: position{line: 2044, col: 7, offset: 66816},
						exprs: []interface{}{
							&actionExpr{
								pos: position{line: 3089, col: 12, offset: 100384},
								run: (*parser).callonSingleQuoteBoldTextElement15,
								expr: &choiceExpr{
									pos: position{line: 3089, col: 13, offset: 100385},
									alternatives: []interface{}{
										&litMatcher{
											pos:        position{line: 3089, col: 13, offset: 100385},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
										&litMatcher{
											pos:        position{line: 3089, col: 20, offset: 100392},
											val:        "\r\n",
											ignoreCase: false,
											want:       "\"\\r\\n\"",
										},
										&litMatcher{
											pos:        position{line: 3089, col: 29, offset: 100401},
											val:        "\r",
											ignoreCase: false,
											want:       "\"\\r\"",
										},
									},
								},
							},
							&notExpr{
								pos: position{line: 2044, col: 15, offset: 66824},
								expr: &actionExpr{
									pos: position{line: 3089, col: 12, offset: 100384},
									run: (*parser).callonSingleQuoteBoldTextElement21,
									expr: &choiceExpr{
										pos: position{line: 3089, col: 13, offset: 100385},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 3089, col: 13, offset: 100385},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
											&litMatcher{
												pos:        position{line: 3089, col: 20, offset: 100392},
												val:        "\r\n",
												ignoreCase: false,
												want:       "\"\\r\\n\"",
											},
											&litMatcher{
												pos:        position{line: 3089, col: 29, offset: 100401},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 648, col: 5, offset: 20883},
						run: (*parser).callonSingleQuoteBoldTextElement26,
						expr: &seqExpr{
							pos: position{line: 648, col: 5, offset: 20883},
							exprs: []interface{}{
								&andCodeExpr{
									pos: position{line: 648, col: 5, offset: 20883},
									run: (*parser).callonSingleQuoteBoldTextElement28,
								},
								&labeledExpr{
									pos:   position{line: 651, col: 5, offset: 20952},
									label: "element",
									expr: &choiceExpr{
										pos: position{line: 651, col: 14, offset: 20961},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 671, col: 25, offset: 21614},
												run: (*parser).callonSingleQuoteBoldTextElement31,
												expr: &seqExpr{
													pos: position{line: 671, col: 25, offset: 21614},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 671, col: 25, offset: 21614},
															val:        "{counter:",
															ignoreCase: false,
															want:       "\"{counter:\"",
														},
														&labeledExpr{
															pos:   position{line: 671, col: 37, offset: 21626},
															label: "name",
															expr: &actionExpr{
																pos: position{line: 324, col: 18, offset: 10072},
																run: (*parser).callonSingleQuoteBoldTextElement35,
																expr: &seqExpr{
																	pos: position{line: 324, col: 18, offset: 10072},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 324, col: 18, offset: 10072},
																			val:        "[_0-9\\pL]",
																			chars:      []rune{'_'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 324, col: 28, offset: 10082},
																			expr: &charClassMatcher{
																				pos:        position{line: 324, col: 29, offset: 10083},
																				val:        "[-0-9\\pL]",
																				chars:      []rune{'-'},
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 671, col: 56, offset: 21645},
															label: "start",
															expr: &zeroOrOneExpr{
																pos: position{line: 671, col: 62, offset: 21651},
																expr: &actionExpr{
																	pos: position{line: 679, col: 17, offset: 21946},
																	run: (*parser).callonSingleQuoteBoldTextElement42,
																	expr: &seqExpr{
																		pos: position{line: 679, col: 17, offset: 21946},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 679, col: 17, offset: 21946},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 679, col: 21, offset: 21950},
																				label: "start",
																				expr: &choiceExpr{
																					pos: position{line: 679, col: 28, offset: 21957},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 679, col: 28, offset: 21957},
																							run: (*parser).callonSingleQuoteBoldTextElement47,
																							expr: &charClassMatcher{
																								pos:        position{line: 679, col: 28, offset: 21957},
																								val:        "[A-Za-z]",
																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&actionExpr{
																							pos: position{line: 681, col: 9, offset: 22011},
																							run: (*parser).callonSingleQuoteBoldTextElement49,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 681, col: 9, offset: 22011},
																								expr: &charClassMatcher{
																									pos:        position{line: 681, col: 9, offset: 22011},
																									val:        "[0-9]",
																									ranges:     []rune{'0', '9'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 671, col: 78, offset: 21667},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 675, col: 25, offset: 21785},
												run: (*parser).callonSingleQuoteBoldTextElement53,
												expr: &seqExpr{
													pos: position{line: 675, col: 25, offset: 21785},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 675, col: 25, offset: 21785},
															val:        "{counter2:",
															ignoreCase: false,
															want:       "\"{counter2:\"",
														},
														&labeledExpr{
															pos:   position{line: 675, col: 38, offset: 21798},
															label: "name",
															expr: &actionExpr{
																pos: position{line: 324, col: 18, offset: 10072},
																run: (*parser).callonSingleQuoteBoldTextElement57,
																expr: &seqExpr{
																	pos: position{line: 324, col: 18, offset: 10072},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 324, col: 18, offset: 10072},
																			val:        "[_0-9\\pL]",
																			chars:      []rune{'_'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 324, col: 28, offset: 10082},
																			expr: &charClassMatcher{
																				pos:        position{line: 324, col: 29, offset: 10083},
																				val:        "[-0-9\\pL]",
																				chars:      []rune{'-'},
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 675, col: 57, offset: 21817},
															label: "start",
															expr: &zeroOrOneExpr{
																pos: position{line: 675, col: 63, offset: 21823},
																expr: &actionExpr{
																	pos: position{line: 679, col: 17, offset: 21946},
																	run: (*parser).callonSingleQuoteBoldTextElement64,
																	expr: &seqExpr{
																		pos: position{line: 679, col: 17, offset: 21946},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 679, col: 17, offset: 21946},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 679, col: 21, offset: 21950},
																				label: "start",
																				expr: &choiceExpr{
																					pos: position{line: 679, col: 28, offset: 21957},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 679, col: 28, offset: 21957},
																							run: (*parser).callonSingleQuoteBoldTextElement69,
																							expr: &charClassMatcher{
																								pos:        position{line: 679, col: 28, offset: 21957},
																								val:        "[A-Za-z]",
																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&actionExpr{
																							pos: position{line: 681, col: 9, offset: 22011},
																							run: (*parser).callonSingleQuoteBoldTextElement71,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 681, col: 9, offset: 22011},
																								expr: &charClassMatcher{
																									pos:        position{line: 681, col: 9, offset: 22011},
																									val:        "[0-9]",
																									ranges:     []rune{'0', '9'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 675, col: 79, offset: 21839},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 657, col: 5, offset: 21090},
												run: (*parser).callonSingleQuoteBoldTextElement75,
												expr: &seqExpr{
													pos: position{line: 657, col: 5, offset: 21090},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 657, col: 5, offset: 21090},
															val:        "\\{",
															ignoreCase: false,
															want:       "\"\\\\{\"",
														},
														&labeledExpr{
															pos:   position{line: 657, col: 13, offset: 21098},
															label: "name",
															expr: &actionExpr{
																pos: position{line: 324, col: 18, offset: 10072},
																run: (*parser).callonSingleQuoteBoldTextElement79,
																expr: &seqExpr{
																	pos: position{line: 324, col: 18, offset: 10072},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 324, col: 18, offset: 10072},
																			val:        "[_0-9\\pL]",
																			chars:      []rune{'_'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 324, col: 28, offset: 10082},
																			expr: &charClassMatcher{
																				pos:        position{line: 324, col: 29, offset: 10083},
																				val:        "[-0-9\\pL]",
																				chars:      []rune{'-'},
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 657, col: 32, offset: 21117},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 664, col: 5, offset: 21358},
												run: (*parser).callonSingleQuoteBoldTextElement85,
												expr: &seqExpr{
													pos: position{line: 664, col: 5, offset: 21358},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 664, col: 5, offset: 21358},
															val:        "{",
															ignoreCase: false,
															want:       "\"{\"",
														},
														&labeledExpr{
															pos:   position{line: 664, col: 9, offset: 21362},
															label: "name",
															expr: &actionExpr{
																pos: position{line: 324, col: 18, offset: 10072},
																run: (*parser).callonSingleQuoteBoldTextElement89,
																expr: &seqExpr{
																	pos: position{line: 324, col: 18, offset: 10072},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 324, col: 18, offset: 10072},
																			val:        "[_0-9\\pL]",
																			chars:      []rune{'_'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 324, col: 28, offset: 10082},
																			expr: &charClassMatcher{
																				pos:        position{line: 324, col: 29, offset: 10083},
																				val:        "[-0-9\\pL]",
																				chars:      []rune{'-'},
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 664, col: 28, offset: 21381},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2046, col: 7, offset: 66898},
						name: "InlineMacro",
					},
					&actionExpr{
						pos: position{line: 2753, col: 5, offset: 90225},
						run: (*parser).callonSingleQuoteBoldTextElement96,
						expr: &seqExpr{
							pos: position{line: 2753, col: 5, offset: 90225},
							exprs: []interface{}{
								&andCodeExpr{
									pos: position{line: 2753, col: 5, offset: 90225},
									run: (*parser).callonSingleQuoteBoldTextElement98,
								},
								&labeledExpr{
									pos:   position{line: 2756, col: 5, offset: 90301},
									label: "element",
									expr: &choiceExpr{
										pos: position{line: 2758, col: 9, offset: 90399},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 2758, col: 9, offset: 90399},
												run: (*parser).callonSingleQuoteBoldTextElement101,
												expr: &choiceExpr{
													pos: position{line: 699, col: 27, offset: 22665},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 699, col: 27, offset: 22665},
															run: (*parser).callonSingleQuoteBoldTextElement103,
															expr: &seqExpr{
																pos: position{line: 699, col: 27, offset: 22665},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 699, col: 27, offset: 22665},
																		val:        "<<",
																		ignoreCase: false,
																		want:       "\"<<\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 699, col: 32, offset: 22670},
																		label: "id",
																		expr: &actionExpr{
																			pos: position{line: 3065, col: 7, offset: 99852},
																			run: (*parser).callonSingleQuoteBoldTextElement107,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 3065, col: 7, offset: 99852},
																				expr: &charClassMatcher{
																					pos:        position{line: 3065, col: 7, offset: 99852},
																					val:        "[^[]<>,]",
																					chars:      []rune{'[', ']', '<', '>', ','},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 699, col: 40, offset: 22678},
																		expr: &actionExpr{
																			pos: position{line: 3080, col: 10, offset: 100200},
																			run: (*parser).callonSingleQuoteBoldTextElement111,
																			expr: &charClassMatcher{
																				pos:        position{line: 3080, col: 11, offset: 100201},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 699, col: 47, offset: 22685},
																		val:        ",",
																		ignoreCase: false,
																		want:       "\",\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 699, col: 51, offset: 22689},
																		label: "label",
																		expr: &oneOrMoreExpr{
																			pos: position{line: 709, col: 24, offset: 23090},
																			expr: &choiceExpr{
																				pos: position{line: 710, col: 5, offset: 23096},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 710, col: 6, offset: 23097},
																						run: (*parser).callonSingleQuoteBoldTextElement117,
																						expr: &seqExpr{
																							pos: position{line: 710, col: 6, offset: 23097},
																							exprs: []interface{}{
																								&charClassMatcher{
																									pos:        position{line: 710, col: 6, offset: 23097},
																									val:        "[0-9\\pL]",
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&oneOrMoreExpr{
																									pos: position{line: 710, col: 14, offset: 23105},
																									expr: &charClassMatcher{
																										pos:        position{line: 710, col: 14, offset: 23105},
																										val:        "[^\\r\\n{<>]",
																										chars:      []rune{'\r', '\n', '{', '<', '>'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 657, col: 5, offset: 21090},
																						run: (*parser).callonSingleQuoteBoldTextElement122,
																						expr: &seqExpr{
																							pos: position{line: 657, col: 5, offset: 21090},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 657, col: 5, offset: 21090},
																									val:        "\\{",
																									ignoreCase: false,
																									want:       "\"\\\\{\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 657, col: 13, offset: 21098},
																									label: "name",
																									expr: &actionExpr{
																										pos: position{line: 324, col: 18, offset: 10072},
																										run: (*parser).callonSingleQuoteBoldTextElement126,
																										expr: &seqExpr{
																											pos: position{line: 324, col: 18, offset: 10072},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 324, col: 18, offset: 10072},
																													val:        "[_0-9\\pL]",
																													chars:      []rune{'_'},
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 324, col: 28, offset: 10082},
																													expr: &charClassMatcher{
																														pos:        position{line: 324, col: 29, offset: 10083},
																														val:        "[-0-9\\pL]",
																														chars:      []rune{'-'},
																														ranges:     []rune{'0', '9'},
																														classes:    []*unicode.RangeTable{rangeTable("L")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 657, col: 32, offset: 21117},
																									val:        "}",
																									ignoreCase: false,
																									want:       "\"}\"",
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 664, col: 5, offset: 21358},
																						run: (*parser).callonSingleQuoteBoldTextElement132,
																						expr: &seqExpr{
																							pos: position{line: 664, col: 5, offset: 21358},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 664, col: 5, offset: 21358},
																									val:        "{",
																									ignoreCase: false,
																									want:       "\"{\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 664, col: 9, offset: 21362},
																									label: "name",
																									expr: &actionExpr{
																										pos: position{line: 324, col: 18, offset: 10072},
																										run: (*parser).callonSingleQuoteBoldTextElement136,
																										expr: &seqExpr{
																											pos: position{line: 324, col: 18, offset: 10072},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 324, col: 18, offset: 10072},
																													val:        "[_0-9\\pL]",
																													chars:      []rune{'_'},
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 324, col: 28, offset: 10082},
																													expr: &charClassMatcher{
																														pos:        position{line: 324, col: 29, offset: 10083},
																														val:        "[-0-9\\pL]",
																														chars:      []rune{'-'},
																														ranges:     []rune{'0', '9'},
																														classes:    []*unicode.RangeTable{rangeTable("L")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 664, col: 28, offset: 21381},
																									val:        "}",
																									ignoreCase: false,
																									want:       "\"}\"",
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 714, col: 8, offset: 23331},
																						run: (*parser).callonSingleQuoteBoldTextElement142,
																						expr: &litMatcher{
																							pos:        position{line: 714, col: 8, offset: 23331},
																							val:        "{",
																							ignoreCase: false,
																							want:       "\"{\"",
																						},
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 699, col: 79, offset: 22717},
																		val:        ">>",
																		ignoreCase: false,
																		want:       "\">>\"",
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 701, col: 9, offset: 22790},
															run: (*parser).callonSingleQuoteBoldTextElement145,
															expr: &seqExpr{
																pos: position{line: 701, col: 9, offset: 22790},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 701, col: 9, offset: 22790},
																		val:        "<<",
																		ignoreCase: false,
																		want:       "\"<<\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 701, col: 14, offset: 22795},
																		label: "id",
																		expr: &actionExpr{
																			pos: position{line: 3065, col: 7, offset: 99852},
																			run: (*parser).callonSingleQuoteBoldTextElement149,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 3065, col: 7, offset: 99852},
																				expr: &charClassMatcher{
																					pos:        position{line: 3065, col: 7, offset: 99852},
																					val:        "[^[]<>,]",
																					chars:      []rune{'[', ']', '<', '>', ','},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 701, col: 22, offset: 22803},
																		val:        ">>",
																		ignoreCase: false,
																		want:       "\">>\"",
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 2761, col: 11, offset: 90503},
												run: (*parser).callonSingleQuoteBoldTextElement153,
												expr: &charClassMatcher{
													pos:        position{line: 2761, col: 12, offset: 90504},
													val:        "[<>&]",
													chars:      []rune{'<', '>', '&'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2786, col: 5, offset: 91397},
						run: (*parser).callonSingleQuoteBoldTextElement155,
						expr: &seqExpr{
							pos: position{line: 2786, col: 5, offset: 91397},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2786, col: 5, offset: 91397},
									val:        "\\",
									ignoreCase: false,
									want:       "\"\\\\\"",
								},
								&choiceExpr{
									pos: position{line: 2786, col: 10, offset: 91402},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 2795, col: 5, offset: 91692},
											run: (*parser).callonSingleQuoteBoldTextElement159,
											expr: &litMatcher{
												pos:        position{line: 2795, col: 5, offset: 91692},
												val:        "\"`",
												ignoreCase: false,
												want:       "\"\\\"`\"",
											},
										},
										&actionExpr{
											pos: position{line: 2798, col: 7, offset: 91750},
											run: (*parser).callonSingleQuoteBoldTextElement161,
											expr: &litMatcher{
												pos:        position{line: 2798, col: 7, offset: 91750},
												val:        "`\"",
												ignoreCase: false,
												want:       "\"`\\\"\"",
											},
										},
										&actionExpr{
											pos: position{line: 2801, col: 7, offset: 91808},
											run: (*parser).callonSingleQuoteBoldTextElement163,
											expr: &litMatcher{
												pos:        position{line: 2801, col: 7, offset: 91808},
												val:        "'`",
												ignoreCase: false,
												want:       "\"'`\"",
											},
										},
										&actionExpr{
											pos: position{line: 2804, col: 7, offset: 91864},
											run: (*parser).callonSingleQuoteBoldTextElement165,
											expr: &litMatcher{
												pos:        position{line: 2804, col: 7, offset: 91864},
												val:        "`'",
												ignoreCase: false,
												want:       "\"`'\"",
											},
										},
										&actionExpr{
											pos: position{line: 2810, col: 14, offset: 91986},
											run: (*parser).callonSingleQuoteBoldTextElement167,
											expr: &litMatcher{
												pos:        position{line: 2810, col: 14, offset: 91986},
												val:        "(C)",
												ignoreCase: false,
												want:       "\"(C)\"",
											},
										},
										&actionExpr{
											pos: position{line: 2814, col: 14, offset: 92052},
											run: (*parser).callonSingleQuoteBoldTextElement169,
											expr: &litMatcher{
												pos:        position{line: 2814, col: 14, offset: 92052},
												val:        "(TM)",
												ignoreCase: false,
												want:       "\"(TM)\"",
											},
										},
										&actionExpr{
											pos: position{line: 2818, col: 15, offset: 92121},
											run: (*parser).callonSingleQuoteBoldTextElement171,
											expr: &litMatcher{
												pos:        position{line: 2818, col: 15, offset: 92121},
												val:        "(R)",
												ignoreCase: false,
												want:       "\"(R)\"",
											},
										},
										&actionExpr{
											pos: position{line: 2822, col: 13, offset: 92186},
											run: (*parser).callonSingleQuoteBoldTextElement173,
											expr: &litMatcher{
												pos:        position{line: 2822, col: 13, offset: 92186},
												val:        "...",
												ignoreCase: false,
												want:       "\"...\"",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2795, col: 5, offset: 91692},
						run: (*parser).callonSingleQuoteBoldTextElement175,
						expr: &litMatcher{
							pos:        position{line: 2795, col: 5, offset: 91692},
							val:        "\"`",
							ignoreCase: false,
							want:       "\"\\\"`\"",
						},
					},
					&actionExpr{
						pos: position{line: 2798, col: 7, offset: 91750},
						run: (*parser).callonSingleQuoteBoldTextElement177,
						expr: &litMatcher{
							pos:        position{line: 2798, col: 7, offset: 91750},
							val:        "`\"",
							ignoreCase: false,
							want:       "\"`\\\"\"",
						},
					},
					&actionExpr{
						pos: position{line: 2801, col: 7, offset: 91808},
						run: (*parser).callonSingleQuoteBoldTextElement179,
						expr: &litMatcher{
							pos:        position{line: 2801, col: 7, offset: 91808},
							val:        "'`",
							ignoreCase: false,
							want:       "\"'`\"",
						},
					},
					&actionExpr{
						pos: position{line: 2804, col: 7, offset: 91864},
						run: (*parser).callonSingleQuoteBoldTextElement181,
						expr: &litMatcher{
							pos:        position{line: 2804, col: 7, offset: 91864},
							val:        "`'",
							ignoreCase: false,
							want:       "\"`'\"",
						},
					},
					&actionExpr{
						pos: position{line: 2810, col: 14, offset: 91986},
						run: (*parser).callonSingleQuoteBoldTextElement183,
						expr: &litMatcher{
							pos:        position{line: 2810, col: 14, offset: 91986},
							val:        "(C)",
							ignoreCase: false,
							want:       "\"(C)\"",
						},
					},
					&actionExpr{
						pos: position{line: 2814, col: 14, offset: 92052},
						run: (*parser).callonSingleQuoteBoldTextElement185,
						expr: &litMatcher{
							pos:        position{line: 2814, col: 14, offset: 92052},
							val:        "(TM)",
							ignoreCase: false,
							want:       "\"(TM)\"",
						},
					},
					&actionExpr{
						pos: position{line: 2818, col: 15, offset: 92121},
						run: (*parser).callonSingleQuoteBoldTextElement187,
						expr: &litMatcher{
							pos:        position{line: 2818, col: 15, offset: 92121},
							val:        "(R)",
							ignoreCase: false,
							want:       "\"(R)\"",
						},
					},
					&actionExpr{
						pos: position{line: 2822, col: 13, offset: 92186},
						run: (*parser).callonSingleQuoteBoldTextElement189,
						expr: &litMatcher{
							pos:        position{line: 2822, col: 13, offset: 92186},
							val:        "...",
							ignoreCase: false,
							want:       "\"...\"",
						},
					},
					&actionExpr{
						pos: position{line: 2833, col: 5, offset: 92496},
						run: (*parser).callonSingleQuoteBoldTextElement191,
						expr: &seqExpr{
							pos: position{line: 2833, col: 5, offset: 92496},
							exprs: []interface{}{
								&charClassMatcher{
									pos:        position{line: 2994, col: 13, offset: 97463},
									val:        "[0-9\\pL]",
									ranges:     []rune{'0', '9'},
									classes:    []*unicode.RangeTable{rangeTable("L")},
									ignoreCase: false,
									inverted:   false,
								},
								&litMatcher{
									pos:        position{line: 2833, col: 14, offset: 92505},
									val:        "\\'",
									ignoreCase: false,
									want:       "\"\\\\'\"",
								},
								&andExpr{
									pos: position{line: 2833, col: 19, offset: 92510},
									expr: &charClassMatcher{
										pos:        position{line: 2833, col: 20, offset: 92511},
										val:        "[\\pL]",
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2839, col: 5, offset: 92742},
						run: (*parser).callonSingleQuoteBoldTextElement197,
						expr: &seqExpr{
							pos: position{line: 2839, col: 5, offset: 92742},
							exprs: []interface{}{
								&charClassMatcher{
									pos:        position{line: 2994, col: 13, offset: 97463},
									val:        "[0-9\\pL]",
									ranges:     []rune{'0', '9'},
									classes:    []*unicode.RangeTable{rangeTable("L")},
									ignoreCase: false,
									inverted:   false,
								},
								&litMatcher{
									pos:        position{line: 2839, col: 14, offset: 92751},
									val:        "'",
									ignoreCase: false,
									want:       "\"'\"",
								},
								&andExpr{
									pos: position{line: 2839, col: 18, offset: 92755},
									expr: &charClassMatcher{
										pos:        position{line: 2839, col: 19, offset: 92756},
										val:        "[\\pL]",
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2049, col: 7, offset: 67002},
						name: "QuotedTextInSingleQuoteBoldText",
					},
					&actionExpr{
						pos: position{line: 1219, col: 23, offset: 38141},
						run: (*parser).callonSingleQuoteBoldTextElement204,
						expr: &seqExpr{
							pos: position{line: 1219, col: 23, offset: 38141},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1217, col: 32, offset: 38109},
									val:        "�",
									ignoreCase: false,
									want:       "\"�\"",
								},
								&labeledExpr{
									pos:   position{line: 1219, col: 51, offset: 38169},
									label: "ref",
									expr: &actionExpr{
										pos: position{line: 1219, col: 56, offset: 38174},
										run: (*parser).callonSingleQuoteBoldTextElement208,
										expr: &oneOrMoreExpr{
											pos: position{line: 1219, col: 56, offset: 38174},
											expr: &charClassMatcher{
												pos:        position{line: 1219, col: 56, offset: 38174},
												val:        "[0-9]",
												ranges:     []rune{'0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1217, col: 32, offset: 38109},
									val:        "�",
									ignoreCase: false,
									want:       "\"�\"",
								},
							},
						},
					},
					&charClassMatcher{
						pos:        position{line: 2079, col: 5, offset: 67731},
						val:        "[^\\r\\n *]",
						chars:      []rune{'\r', '\n', ' ', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 2080, col: 7, offset: 67836},
						run: (*parser).callonSingleQuoteBoldTextElement213,
						expr: &seqExpr{
							pos: position{line: 2080, col: 7, offset: 67836},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2080, col: 7, offset: 67836},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&actionExpr{
									pos: position{line: 2998, col: 14, offset: 97537},
									run: (*parser).callonSingleQuoteBoldTextElement216,
									expr: &oneOrMoreExpr{
										pos: position{line: 2998, col: 14, offset: 97537},
										expr: &charClassMatcher{
											pos:        position{line: 2998, col: 14, offset: 97537},
											val:        "[0-9\\pL]",
											ranges:     []rune{'0', '9'},
											classes:    []*unicode.RangeTable{rangeTable("L")},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInSingleQuoteBoldText",
			pos:  position{line: 2053, col: 1, offset: 67103},
			expr: &choiceExpr{
				pos: position{line: 2055, col: 5, offset: 67166},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2055, col: 5, offset: 67166},
						run: (*parser).callonQuotedTextInSingleQuoteBoldText2,
						expr: &seqExpr{
							pos: position{line: 2055, col: 5, offset: 67166},
							exprs: []interface{}{
								&andExpr{
									pos: position{line: 2055, col: 5, offset: 67166},
									expr: &litMatcher{
										pos:        position{line: 2055, col: 7, offset: 67168},
										val:        "\\",
										ignoreCase: false,
										want:       "\"\\\\\"",
									},
								},
								&labeledExpr{
									pos:   position{line: 2056, col: 5, offset: 67177},
									label: "element",
									expr: &choiceExpr{
										pos: position{line: 2057, col: 9, offset: 67195},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 2057, col: 9, offset: 67195},
												name: "EscapedItalicText",
											},
											&ruleRefExpr{
												pos:  position{line: 2058, col: 11, offset: 67223},
												name: "EscapedMarkedText",
											},
											&ruleRefExpr{
												pos:  position{line: 2059, col: 11, offset: 67251},
												name: "EscapedMonospaceText",
											},
											&ruleRefExpr{
												pos:  position{line: 2060, col: 11, offset: 67282},
												name: "EscapedSubscriptText",
											},
											&ruleRefExpr{
												pos:  position{line: 2061, col: 11, offset: 67313},
												name: "EscapedSuperscriptText",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2067, col: 5, offset: 67413},
						run: (*parser).callonQuotedTextInSingleQuoteBoldText13,
						expr: &seqExpr{
							pos: position{line: 2067, col: 5, offset: 67413},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 2067, col: 5, offset: 67413},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 2067, col: 16, offset: 67424},
										expr: &ruleRefExpr{
											pos:  position{line: 2067, col: 17, offset: 67425},
											name: "LongHandAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2068, col: 5, offset: 67451},
									label: "text",
									expr: &choiceExpr{
										pos: position{line: 2069, col: 9, offset: 67466},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 2069, col: 9, offset: 67466},
												name: "DoubleQuoteBoldText",
											},
											&ruleRefExpr{
												pos:  position{line: 2070, col: 11, offset: 67496},
												name: "ItalicText",
											},
											&ruleRefExpr{
												pos:  position{line: 2071, col: 11, offset: 67517},
												name: "MonospaceText",
											},
											&ruleRefExpr{
												pos:  position{line: 2072, col: 11, offset: 67541},
												name: "MarkedText",
											},
											&ruleRefExpr{
												pos:  position{line: 2073, col: 11, offset: 67562},
												name: "SubscriptText",
											},
											&ruleRefExpr{
												pos:  position{line: 2074, col: 11, offset: 67586},
												name: "SuperscriptText",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedBoldText",
			pos:  position{line: 2084, col: 1, offset: 68011},
			expr: &choiceExpr{
				pos: position{line: 2086, col: 5, offset: 68072},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2086, col: 5, offset: 68072},
						run: (*parser).callonEscapedBoldText2,
						expr: &seqExpr{
							pos: position{line: 2086, col: 5, offset: 68072},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 2086, col: 5, offset: 68072},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1954, col: 25, offset: 64015},
										run: (*parser).callonEscapedBoldText5,
										expr: &seqExpr{
											pos: position{line: 1954, col: 25, offset: 64015},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1954, col: 25, offset: 64015},
													val:        "\\\\",
													ignoreCase: false,
													want:       "\"\\\\\\\\\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 1954, col: 30, offset: 64020},
													expr: &litMatcher{
														pos:        position{line: 1954, col: 30, offset: 64020},
														val:        "\\",
														ignoreCase: false,
														want:       "\"\\\\\"",
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 2086, col: 40, offset: 68107},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 2086, col: 45, offset: 68112},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 2086, col: 55, offset: 68122},
										name: "DoubleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 2086, col: 84, offset: 68151},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2090, col: 7, offset: 68315},
						run: (*parser).callonEscapedBoldText14,
						expr: &seqExpr{
							pos: position{line: 2090, col: 7, offset: 68315},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 2090, col: 7, offset: 68315},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1950, col: 25, offset: 63942},
										run: (*parser).callonEscapedBoldText17,
										expr: &oneOrMoreExpr{
											pos: position{line: 1950, col: 25, offset: 63942},
											expr: &litMatcher{
												pos:        position{line: 1950, col: 25, offset: 63942},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 2090, col: 42, offset: 68350},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 2090, col: 47, offset: 68355},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 2090, col: 57, offset: 68365},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 2090, col: 86, offset: 68394},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2095, col: 7, offset: 68596},
						run: (*parser).callonEscapedBoldText24,
						expr: &seqExpr{
							pos: position{line: 2095, col: 7, offset: 68596},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 2095, col: 7, offset: 68596},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1950, col: 25, offset: 63942},
										run: (*parser).callonEscapedBoldText27,
										expr: &oneOrMoreExpr{
											pos: position{line: 1950, col: 25, offset: 63942},
											expr: &litMatcher{
												pos:        position{line: 1950, col: 25, offset: 63942},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 2095, col: 42, offset: 68631},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 2095, col: 46, offset: 68635},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 2095, col: 56, offset: 68645},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 2095, col: 85, offset: 68674},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ItalicText",
			pos:  position{line: 2103, col: 1, offset: 68928},
			expr: &choiceExpr{
				pos: position{line: 2103, col: 15, offset: 68942},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2103, col: 15, offset: 68942},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 2103, col: 39, offset: 68966},
						name: "SingleQuoteItalicText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicText",
			pos:  position{line: 2117, col: 1, offset: 69294},
			expr: &actionExpr{
				pos: position{line: 2118, col: 5, offset: 69324},
				run: (*parser).callonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 2118, col: 5, offset: 69324},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2115, col: 35, offset: 69288},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
						&labeledExpr{
							pos:   position{line: 2119, col: 5, offset: 69360},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 2119, col: 15, offset: 69370},
								name: "DoubleQuoteItalicTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 2115, col: 35, offset: 69288},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElements",
			pos:  position{line: 2124, col: 1, offset: 69578},
			expr: &oneOrMoreExpr{
				pos: position{line: 2124, col: 34, offset: 69611},
				expr: &ruleRefExpr{
					pos:  position{line: 2124, col: 34, offset: 69611},
					name: "DoubleQuoteItalicTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElement",
			pos:  position{line: 2126, col: 1, offset: 69643},
			expr: &actionExpr{
				pos: position{line: 2127, col: 5, offset: 69680},
				run: (*parser).callonDoubleQuoteItalicTextElement1,
				expr: &seqExpr{
					pos: position{line: 2127, col: 5, offset: 69680},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2127, col: 5, offset: 69680},
							expr: &litMatcher{
								pos:        position{line: 2115, col: 35, offset: 69288},
								val:        "__",
								ignoreCase: false,
								want:       "\"__\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 2128, col: 5, offset: 69716},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 2129, col: 9, offset: 69734},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 2108, col: 5, offset: 69040},
										run: (*parser).callonDoubleQuoteItalicTextElement7,
										expr: &seqExpr{
											pos: position{line: 2108, col: 5, offset: 69040},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 2108, col: 5, offset: 69040},
													expr: &charClassMatcher{
														pos:        position{line: 2108, col: 5, offset: 69040},
														val:        "[0-9\\pL]",
														ranges:     []rune{'0', '9'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&andExpr{
													pos: position{line: 2108, col: 15, offset: 69050},
													expr: &choiceExpr{
														pos: position{line: 2108, col: 17, offset: 69052},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 3080, col: 10, offset: 100200},
																run: (*parser).callonDoubleQuoteItalicTextElement13,
																expr: &charClassMatcher{
																	pos:        position{line: 3080, col: 11, offset: 100201},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&litMatcher{
																pos:        position{line: 2105, col: 24, offset: 69012},
																val:        "_",
																ignoreCase: false,
																want:       "\"_\"",
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 3084, col: 11, offset: 100267},
										run: (*parser).callonDoubleQuoteItalicTextElement16,
										expr: &oneOrMoreExpr{
											pos: position{line: 3084, col: 11, offset: 100267},
											expr: &charClassMatcher{
												pos:        position{line: 3084, col: 12, offset: 100268},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
									&seqExpr{
										pos: position{line: 2131, col: 11, offset: 69809},
										exprs: []interface{}{
											&actionExpr{
												pos: position{line: 3089, col: 12, offset: 100384},
												run: (*parser).callonDoubleQuoteItalicTextElement20,
												expr: &choiceExpr{
													pos: position{line: 3089, col: 13, offset: 100385},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 3089, col: 13, offset: 100385},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&litMatcher{
															pos:        position{line: 3089, col: 20, offset: 100392},
															val:        "\r\n",
															ignoreCase: false,
															want:       "\"\\r\\n\"",
														},
														&litMatcher{
															pos:        position{line: 3089, col: 29, offset: 100401},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 2131, col: 19, offset: 69817},
												expr: &actionExpr{
													pos: position{line: 3089, col: 12, offset: 100384},
													run: (*parser).callonDoubleQuoteItalicTextElement26,
													expr: &choiceExpr{
														pos: position{line: 3089, col: 13, offset: 100385},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 3089, col: 13, offset: 100385},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
															&litMatcher{
																pos:        position{line: 3089, col: 20, offset: 100392},
																val:        "\r\n",
																ignoreCase: false,
																want:       "\"\\r\\n\"",
															},
															&litMatcher{
																pos:        position{line: 3089, col: 29, offset: 100401},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 648, col: 5, offset: 20883},
										run: (*parser).callonDoubleQuoteItalicTextElement31,
										expr: &seqExpr{
											pos: position{line: 648, col: 5, offset: 20883},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 648, col: 5, offset: 20883},
													run: (*parser).callonDoubleQuoteItalicTextElement33,
												},
												&labeledExpr{
													pos:   position{line: 651, col: 5, offset: 20952},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 651, col: 14, offset: 20961},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 671, col: 25, offset: 21614},
																run: (*parser).callonDoubleQuoteItalicTextElement36,
																expr: &seqExpr{
																	pos: position{line: 671, col: 25, offset: 21614},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 671, col: 25, offset: 21614},
																			val:        "{counter:",
																			ignoreCase: false,
																			want:       "\"{counter:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 671, col: 37, offset: 21626},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 324, col: 18, offset: 10072},
																				run: (*parser).callonDoubleQuoteItalicTextElement40,
																				expr: &seqExpr{
																					pos: position{line: 324, col: 18, offset: 10072},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 324, col: 18, offset: 10072},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 324, col: 28, offset: 10082},
																							expr: &charClassMatcher{
																								pos:        position{line: 324, col: 29, offset: 10083},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 671, col: 56, offset: 21645},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 671, col: 62, offset: 21651},
																				expr: &actionExpr{
																					pos: position{line: 679, col: 17, offset: 21946},
																					run: (*parser).callonDoubleQuoteItalicTextElement47,
																					expr: &seqExpr{
																						pos: position{line: 679, col: 17, offset: 21946},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 679, col: 17, offset: 21946},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 679, col: 21, offset: 21950},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 679, col: 28, offset: 21957},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 679, col: 28, offset: 21957},
																											run: (*parser).callonDoubleQuoteItalicTextElement52,
																											expr: &charClassMatcher{
																												pos:        position{line: 679, col: 28, offset: 21957},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 681, col: 9, offset: 22011},
																											run: (*parser).callonDoubleQuoteItalicTextElement54,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 681, col: 9, offset: 22011},
																												expr: &charClassMatcher{
																													pos:        position{line: 681, col: 9, offset: 22011},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 671, col: 78, offset: 21667},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 675, col: 25, offset: 21785},
																run: (*parser).callonDoubleQuoteItalicTextElement58,
																expr: &seqExpr{
																	pos: position{line: 675, col: 25, offset: 21785},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 675, col: 25, offset: 21785},
																			val:        "{counter2:",
																			ignoreCase: false,
																			want:       "\"{counter2:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 675, col: 38, offset: 21798},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 324, col: 18, offset: 10072},
																				run: (*parser).callonDoubleQuoteItalicTextElement62,
																				expr: &seqExpr{
																					pos: position{line: 324, col: 18, offset: 10072},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 324, col: 18, offset: 10072},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 324, col: 28, offset: 10082},
																							expr: &charClassMatcher{
																								pos:        position{line: 324, col: 29, offset: 10083},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 675, col: 57, offset: 21817},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 675, col: 63, offset: 21823},
																				expr: &actionExpr{
																					pos: position{line: 679, col: 17, offset: 21946},
																					run: (*parser).callonDoubleQuoteItalicTextElement69,
																					expr: &seqExpr{
																						pos: position{line: 679, col: 17, offset: 21946},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 679, col: 17, offset: 21946},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 679, col: 21, offset: 21950},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 679, col: 28, offset: 21957},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 679, col: 28, offset: 21957},
																											run: (*parser).callonDoubleQuoteItalicTextElement74,
																											expr: &charClassMatcher{
																												pos:        position{line: 679, col: 28, offset: 21957},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 681, col: 9, offset: 22011},
																											run: (*parser).callonDoubleQuoteItalicTextElement76,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 681, col: 9, offset: 22011},
																												expr: &charClassMatcher{
																													pos:        position{line: 681, col: 9, offset: 22011},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 675, col: 79, offset: 21839},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 657, col: 5, offset: 21090},
																run: (*parser).callonDoubleQuoteItalicTextElement80,
																expr: &seqExpr{
																	pos: position{line: 657, col: 5, offset: 21090},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 657, col: 5, offset: 21090},
																			val:        "\\{",
																			ignoreCase: false,
																			want:       "\"\\\\{\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 657, col: 13, offset: 21098},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 324, col: 18, offset: 10072},
																				run: (*parser).callonDoubleQuoteItalicTextElement84,
																				expr: &seqExpr{
																					pos: position{line: 324, col: 18, offset: 10072},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 324, col: 18, offset: 10072},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 324, col: 28, offset: 10082},
																							expr: &charClassMatcher{
																								pos:        position{line: 324, col: 29, offset: 10083},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 657, col: 32, offset: 21117},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 664, col: 5, offset: 21358},
																run: (*parser).callonDoubleQuoteItalicTextElement90,
																expr: &seqExpr{
																	pos: position{line: 664, col: 5, offset: 21358},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 664, col: 5, offset: 21358},
																			val:        "{",
																			ignoreCase: false,
																			want:       "\"{\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 664, col: 9, offset: 21362},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 324, col: 18, offset: 10072},
																				run: (*parser).callonDoubleQuoteItalicTextElement94,
																				expr: &seqExpr{
																					pos: position{line: 324, col: 18, offset: 10072},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 324, col: 18, offset: 10072},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 324, col: 28, offset: 10082},
																							expr: &charClassMatcher{
																								pos:        position{line: 324, col: 29, offset: 10083},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 664, col: 28, offset: 21381},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2133, col: 11, offset: 69899},
										name: "InlineMacro",
									},
									&actionExpr{
										pos: position{line: 2753, col: 5, offset: 90225},
										run: (*parser).callonDoubleQuoteItalicTextElement101,
										expr: &seqExpr{
											pos: position{line: 2753, col: 5, offset: 90225},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 2753, col: 5, offset: 90225},
													run: (*parser).callonDoubleQuoteItalicTextElement103,
												},
												&labeledExpr{
													pos:   position{line: 2756, col: 5, offset: 90301},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 2758, col: 9, offset: 90399},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2758, col: 9, offset: 90399},
																run: (*parser).callonDoubleQuoteItalicTextElement106,
																expr: &choiceExpr{
																	pos: position{line: 699, col: 27, offset: 22665},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 699, col: 27, offset: 22665},
																			run: (*parser).callonDoubleQuoteItalicTextElement108,
																			expr: &seqExpr{
																				pos: position{line: 699, col: 27, offset: 22665},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 699, col: 27, offset: 22665},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 699, col: 32, offset: 22670},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 3065, col: 7, offset: 99852},
																							run: (*parser).callonDoubleQuoteItalicTextElement112,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 3065, col: 7, offset: 99852},
																								expr: &charClassMatcher{
																									pos:        position{line: 3065, col: 7, offset: 99852},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 699, col: 40, offset: 22678},
																						expr: &actionExpr{
																							pos: position{line: 3080, col: 10, offset: 100200},
																							run: (*parser).callonDoubleQuoteItalicTextElement116,
																							expr: &charClassMatcher{
																								pos:        position{line: 3080, col: 11, offset: 100201},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 699, col: 47, offset: 22685},
																						val:        ",",
																						ignoreCase: false,
																						want:       "\",\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 699, col: 51, offset: 22689},
																						label: "label",
																						expr: &oneOrMoreExpr{
																							pos: position{line: 709, col: 24, offset: 23090},
																							expr: &choiceExpr{
																								pos: position{line: 710, col: 5, offset: 23096},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 710, col: 6, offset: 23097},
																										run: (*parser).callonDoubleQuoteItalicTextElement122,
																										expr: &seqExpr{
																											pos: position{line: 710, col: 6, offset: 23097},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 710, col: 6, offset: 23097},
																													val:        "[0-9\\pL]",
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&oneOrMoreExpr{
																													pos: position{line: 710, col: 14, offset: 23105},
																													expr: &charClassMatcher{
																														pos:        position{line: 710, col: 14, offset: 23105},
																														val:        "[^\\r\\n{<>]",
																														chars:      []rune{'\r', '\n', '{', '<', '>'},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 657, col: 5, offset: 21090},
																										run: (*parser).callonDoubleQuoteItalicTextElement127,
																										expr: &seqExpr{
																											pos: position{line: 657, col: 5, offset: 21090},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 657, col: 5, offset: 21090},
																													val:        "\\{",
																													ignoreCase: false,
																													want:       "\"\\\\{\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 657, col: 13, offset: 21098},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 324, col: 18, offset: 10072},
																														run: (*parser).callonDoubleQuoteItalicTextElement131,
																														expr: &seqExpr{
																															pos: position{line: 324, col: 18, offset: 10072},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 324, col: 18, offset: 10072},
																																	val:        "[_0-9\\pL]",
																																	chars:      []rune{'_'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 324, col: 28, offset: 10082},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 324, col: 29, offset: 10083},
																																		val:        "[-0-9\\pL]",
																																		chars:      []rune{'-'},
																																		ranges:     []rune{'0', '9'},
																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 657, col: 32, offset: 21117},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 664, col: 5, offset: 21358},
																										run: (*parser).callonDoubleQuoteItalicTextElement137,
																										expr: &seqExpr{
																											pos: position{line: 664, col: 5, offset: 21358},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 664, col: 5, offset: 21358},
																													val:        "{",
																													ignoreCase: false,
																													want:       "\"{\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 664, col: 9, offset: 21362},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 324, col: 18, offset: 10072},
																														run: (*parser).callonDoubleQuoteItalicTextElement141,
																														expr: &seqExpr{
																															pos: position{line: 324, col: 18, offset: 10072},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 324, col: 18, offset: 10072},
																																	val:        "[_0-9\\pL]",
																																	chars:      []rune{'_'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 324, col: 28, offset: 10082},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 324, col: 29, offset: 10083},
																																		val:        "[-0-9\\pL]",
																																		chars:      []rune{'-'},
																																		ranges:     []rune{'0', '9'},
																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 664, col: 28, offset: 21381},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 714, col: 8, offset: 23331},
																										run: (*parser).callonDoubleQuoteItalicTextElement147,
																										expr: &litMatcher{
																											pos:        position{line: 714, col: 8, offset: 23331},
																											val:        "{",
																											ignoreCase: false,
																											want:       "\"{\"",
																										},
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 699, col: 79, offset: 22717},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 701, col: 9, offset: 22790},
																			run: (*parser).callonDoubleQuoteItalicTextElement150,
																			expr: &seqExpr{
																				pos: position{line: 701, col: 9, offset: 22790},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 701, col: 9, offset: 22790},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 701, col: 14, offset: 22795},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 3065, col: 7, offset: 99852},
																							run: (*parser).callonDoubleQuoteItalicTextElement154,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 3065, col: 7, offset: 99852},
																								expr: &charClassMatcher{
																									pos:        position{line: 3065, col: 7, offset: 99852},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 701, col: 22, offset: 22803},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2761, col: 11, offset: 90503},
																run: (*parser).callonDoubleQuoteItalicTextElement158,
																expr: &charClassMatcher{
																	pos:        position{line: 2761, col: 12, offset: 90504},
																	val:        "[<>&]",
																	chars:      []rune{'<', '>', '&'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2786, col: 5, offset: 91397},
										run: (*parser).callonDoubleQuoteItalicTextElement160,
										expr: &seqExpr{
											pos: position{line: 2786, col: 5, offset: 91397},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 2786, col: 5, offset: 91397},
													val:        "\\",
													ignoreCase: false,
													want:       "\"\\\\\"",
												},
												&choiceExpr{
													pos: position{line: 2786, col: 10, offset: 91402},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2795, col: 5, offset: 91692},
															run: (*parser).callonDoubleQuoteItalicTextElement164,
															expr: &litMatcher{
																pos:        position{line: 2795, col: 5, offset: 91692},
																val:        "\"`",
																ignoreCase: false,
																want:       "\"\\\"`\"",
															},
														},
														&actionExpr{
															pos: position{line: 2798, col: 7, offset: 91750},
															run: (*parser).callonDoubleQuoteItalicTextElement166,
															expr: &litMatcher{
																pos:        position{line: 2798, col: 7, offset: 91750},
																val:        "`\"",
																ignoreCase: false,
																want:       "\"`\\\"\"",
															},
														},
														&actionExpr{
															pos: position{line: 2801, col: 7, offset: 91808},
															run: (*parser).callonDoubleQuoteItalicTextElement168,
															expr: &litMatcher{
																pos:        position{line: 2801, col: 7, offset: 91808},
																val:        "'`",
																ignoreCase: false,
																want:       "\"'`\"",
															},
														},
														&actionExpr{
															pos: position{line: 2804, col: 7, offset: 91864},
															run: (*parser).callonDoubleQuoteItalicTextElement170,
															expr: &litMatcher{
																pos:        position{line: 2804, col: 7, offset: 91864},
																val:        "`'",
																ignoreCase: false,
																want:       "\"`'\"",
															},
														},
														&actionExpr{
															pos: position{line: 2810, col: 14, offset: 91986},
															run: (*parser).callonDoubleQuoteItalicTextElement172,
															expr: &litMatcher{
																pos:        position{line: 2810, col: 14, offset: 91986},
																val:        "(C)",
																ignoreCase: false,
																want:       "\"(C)\"",
															},
														},
														&actionExpr{
															pos: position{line: 2814, col: 14, offset: 92052},
															run: (*parser).callonDoubleQuoteItalicTextElement174,
															expr: &litMatcher{
																pos:        position{line: 2814, col: 14, offset: 92052},
																val:        "(TM)",
																ignoreCase: false,
																want:       "\"(TM)\"",
															},
														},
														&actionExpr{
															pos: position{line: 2818, col: 15, offset: 92121},
															run: (*parser).callonDoubleQuoteItalicTextElement176,
															expr: &litMatcher{
																pos:        position{line: 2818, col: 15, offset: 92121},
																val:        "(R)",
																ignoreCase: false,
																want:       "\"(R)\"",
															},
														},
														&actionExpr{
															pos: position{line: 2822, col: 13, offset: 92186},
															run: (*parser).callonDoubleQuoteItalicTextElement178,
															expr: &litMatcher{
																pos:        position{line: 2822, col: 13, offset: 92186},
																val:        "...",
																ignoreCase: false,
																want:       "\"...\"",
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2795, col: 5, offset: 91692},
										run: (*parser).callonDoubleQuoteItalicTextElement180,
										expr: &litMatcher{
											pos:        position{line: 2795, col: 5, offset: 91692},
											val:        "\"`",
											ignoreCase: false,
											want:       "\"\\\"`\"",
										},
									},
									&actionExpr{
										pos: position{line: 2798, col: 7, offset: 91750},
										run: (*parser).callonDoubleQuoteItalicTextElement182,
										expr: &litMatcher{
											pos:        position{line: 2798, col: 7, offset: 91750},
											val:        "`\"",
											ignoreCase: false,
											want:       "\"`\\\"\"",
										},
									},
									&actionExpr{
										pos: position{line: 2801, col: 7, offset: 91808},
										run: (*parser).callonDoubleQuoteItalicTextElement184,
										expr: &litMatcher{
											pos:        position{line: 2801, col: 7, offset: 91808},
											val:        "'`",
											ignoreCase: false,
											want:       "\"'`\"",
										},
									},
									&actionExpr{
										pos: position{line: 2804, col: 7, offset: 91864},
										run: (*parser).callonDoubleQuoteItalicTextElement186,
										expr: &litMatcher{
											pos:        position{line: 2804, col: 7, offset: 91864},
											val:        "`'",
											ignoreCase: false,
											want:       "\"`'\"",
										},
									},
									&actionExpr{
										pos: position{line: 2810, col: 14, offset: 91986},
										run: (*parser).callonDoubleQuoteItalicTextElement188,
										expr: &litMatcher{
											pos:        position{line: 2810, col: 14, offset: 91986},
											val:        "(C)",
											ignoreCase: false,
											want:       "\"(C)\"",
										},
									},
									&actionExpr{
										pos: position{line: 2814, col: 14, offset: 92052},
										run: (*parser).callonDoubleQuoteItalicTextElement190,
										expr: &litMatcher{
											pos:        position{line: 2814, col: 14, offset: 92052},
											val:        "(TM)",
											ignoreCase: false,
											want:       "\"(TM)\"",
										},
									},
									&actionExpr{
										pos: position{line: 2818, col: 15, offset: 92121},
										run: (*parser).callonDoubleQuoteItalicTextElement192,
										expr: &litMatcher{
											pos:        position{line: 2818, col: 15, offset: 92121},
											val:        "(R)",
											ignoreCase: false,
											want:       "\"(R)\"",
										},
									},
									&actionExpr{
										pos: position{line: 2822, col: 13, offset: 92186},
										run: (*parser).callonDoubleQuoteItalicTextElement194,
										expr: &litMatcher{
											pos:        position{line: 2822, col: 13, offset: 92186},
											val:        "...",
											ignoreCase: false,
											want:       "\"...\"",
										},
									},
									&actionExpr{
										pos: position{line: 2833, col: 5, offset: 92496},
										run: (*parser).callonDoubleQuoteItalicTextElement196,
										expr: &seqExpr{
											pos: position{line: 2833, col: 5, offset: 92496},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 2994, col: 13, offset: 97463},
													val:        "[0-9\\pL]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 2833, col: 14, offset: 92505},
													val:        "\\'",
													ignoreCase: false,
													want:       "\"\\\\'\"",
												},
												&andExpr{
													pos: position{line: 2833, col: 19, offset: 92510},
													expr: &charClassMatcher{
														pos:        position{line: 2833, col: 20, offset: 92511},
														val:        "[\\pL]",
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2839, col: 5, offset: 92742},
										run: (*parser).callonDoubleQuoteItalicTextElement202,
										expr: &seqExpr{
											pos: position{line: 2839, col: 5, offset: 92742},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 2994, col: 13, offset: 97463},
													val:        "[0-9\\pL]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 2839, col: 14, offset: 92751},
													val:        "'",
													ignoreCase: false,
													want:       "\"'\"",
												},
												&andExpr{
													pos: position{line: 2839, col: 18, offset: 92755},
													expr: &charClassMatcher{
														pos:        position{line: 2839, col: 19, offset: 92756},
														val:        "[\\pL]",
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2136, col: 11, offset: 70015},
										name: "QuotedTextInDoubleQuoteItalicText",
									},
									&actionExpr{
										pos: position{line: 1219, col: 23, offset: 38141},
										run: (*parser).callonDoubleQuoteItalicTextElement209,
										expr: &seqExpr{
											pos: position{line: 1219, col: 23, offset: 38141},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1217, col: 32, offset: 38109},
													val:        "�",
													ignoreCase: false,
													want:       "\"�\"",
												},
												&labeledExpr{
													pos:   position{line: 1219, col: 51, offset: 38169},
													label: "ref",
													expr: &actionExpr{
														pos: position{line: 1219, col: 56, offset: 38174},
														run: (*parser).callonDoubleQuoteItalicTextElement213,
														expr: &oneOrMoreExpr{
															pos: position{line: 1219, col: 56, offset: 38174},
															expr: &charClassMatcher{
																pos:        position{line: 1219, col: 56, offset: 38174},
																val:        "[0-9]",
																ranges:     []rune{'0', '9'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1217, col: 32, offset: 38109},
													val:        "�",
													ignoreCase: false,
													want:       "\"�\"",
												},
											},
										},
									},
									&charClassMatcher{
										pos:        position{line: 2167, col: 5, offset: 70795},
										val:        "[^\\r\\n_]",
										chars:      []rune{'\r', '\n', '_'},
										ignoreCase: false,
										inverted:   true,
									},
									&actionExpr{
										pos: position{line: 2168, col: 7, offset: 70894},
										run: (*parser).callonDoubleQuoteItalicTextElement218,
										expr: &seqExpr{
											pos: position{line: 2168, col: 7, offset: 70894},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 2168, col: 7, offset: 70894},
													val:        "__",
													ignoreCase: false,
													want:       "\"__\"",
												},
												&actionExpr{
													pos: position{line: 2998, col: 14, offset: 97537},
													run: (*parser).callonDoubleQuoteItalicTextElement221,
													expr: &oneOrMoreExpr{
														pos: position{line: 2998, col: 14, offset: 97537},
														expr: &charClassMatcher{
															pos:        position{line: 2998, col: 14, offset: 97537},
															val:        "[0-9\\pL]",
															ranges:     []rune{'0', '9'},
															classes:    []*unicode.RangeTable{rangeTable("L")},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInDoubleQuoteItalicText",
			pos:  position{line: 2142, col: 1, offset: 70173},
			expr: &choiceExpr{
				pos: position{line: 2144, col: 5, offset: 70238},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2144, col: 5, offset: 70238},
						run: (*parser).callonQuotedTextInDoubleQuoteItalicText2,
						expr: &seqExpr{
							pos: position{line: 2144, col: 5, offset: 70238},
							exprs: []interface{}{
								&andExpr{
									pos: position{line: 2144, col: 5, offset: 70238},
									expr: &litMatcher{
										pos:        position{line: 2144, col: 7, offset: 70240},
										val:        "\\",
										ignoreCase: false,
										want:       "\"\\\\\"",
									},
								},
								&labeledExpr{
									pos:   position{line: 2145, col: 5, offset: 70249},
									label: "element",
									expr: &choiceExpr{
										pos: position{line: 2146, col: 9, offset: 70267},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 2146, col: 9, offset: 70267},
												name: "EscapedBoldText",
											},
											&ruleRefExpr{
												pos:  position{line: 2147, col: 11, offset: 70294},
												name: "EscapedMarkedText",
											},
											&ruleRefExpr{
												pos:  position{line: 2148, col: 11, offset: 70322},
												name: "EscapedMonospaceText",
											},
											&ruleRefExpr{
												pos:  position{line: 2149, col: 11, offset: 70353},
												name: "EscapedSubscriptText",
											},
											&ruleRefExpr{
												pos:  position{line: 2150, col: 11, offset: 70384},
												name: "EscapedSuperscriptText",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2156, col: 5, offset: 70484},
						run: (*parser).callonQuotedTextInDoubleQuoteItalicText13,
						expr: &seqExpr{
							pos: position{line: 2156, col: 5, offset: 70484},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 2156, col: 5, offset: 70484},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 2156, col: 16, offset: 70495},
										expr: &ruleRefExpr{
											pos:  position{line: 2156, col: 17, offset: 70496},
											name: "LongHandAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2157, col: 5, offset: 70522},
									label: "text",
									expr: &choiceExpr{
										pos: position{line: 2157, col: 11, offset: 70528},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 2157, col: 11, offset: 70528},
												name: "SingleQuoteItalicText",
											},
											&ruleRefExpr{
												pos:  position{line: 2158, col: 11, offset: 70560},
												name: "BoldText",
											},
											&ruleRefExpr{
												pos:  position{line: 2159, col: 11, offset: 70579},
												name: "MarkedText",
											},
											&ruleRefExpr{
												pos:  position{line: 2160, col: 11, offset: 70600},
												name: "MonospaceText",
											},
											&ruleRefExpr{
												pos:  position{line: 2161, col: 11, offset: 70624},
												name: "SubscriptText",
											},
											&ruleRefExpr{
												pos:  position{line: 2162, col: 11, offset: 70648},
												name: "SuperscriptText",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicText",
			pos:  position{line: 2179, col: 1, offset: 71270},
			expr: &actionExpr{
				pos: position{line: 2180, col: 5, offset: 71300},
				run: (*parser).callonSingleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 2180, col: 5, offset: 71300},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2175, col: 40, offset: 71221},
							val:        "_",
							ignoreCase: false,
							want:       "\"_\"",
						},
						&labeledExpr{
							pos:   position{line: 2181, col: 5, offset: 71340},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 2181, col: 15, offset: 71350},
								name: "SingleQuoteItalicTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 2177, col: 38, offset: 71264},
							val:        "_",
							ignoreCase: false,
							want:       "\"_\"",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElements",
			pos:  position{line: 2186, col: 1, offset: 71517},
			expr: &actionExpr{
				pos: position{line: 2187, col: 5, offset: 71555},
				run: (*parser).callonSingleQuoteItalicTextElements1,
				expr: &seqExpr{
					pos: position{line: 2187, col: 5, offset: 71555},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2187, col: 5, offset: 71555},
							expr: &notExpr{
								pos: position{line: 3093, col: 8, offset: 100474},
								expr: &anyMatcher{
									line: 3093, col: 9, offset: 100475,
								},
							},
						},
						&notExpr{
							pos: position{line: 2187, col: 10, offset: 71560},
							expr: &actionExpr{
								pos: position{line: 3080, col: 10, offset: 100200},
								run: (*parser).callonSingleQuoteItalicTextElements7,
								expr: &charClassMatcher{
									pos:        position{line: 3080, col: 11, offset: 100201},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2188, col: 5, offset: 71599},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 2188, col: 14, offset: 71608},
								expr: &ruleRefExpr{
									pos:  position{line: 2188, col: 15, offset: 71609},
									name: "SingleQuoteItalicTextElement",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 2189, col: 5, offset: 71644},
							run: (*parser).callonSingleQuoteItalicTextElements12,
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElement",
			pos:  position{line: 2195, col: 1, offset: 71785},
			expr: &choiceExpr{
				pos: position{line: 2196, col: 5, offset: 71822},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2108, col: 5, offset: 69040},
						run: (*parser).callonSingleQuoteItalicTextElement2,
						expr: &seqExpr{
							pos: position{line: 2108, col: 5, offset: 69040},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2108, col: 5, offset: 69040},
									expr: &charClassMatcher{
										pos:        position{line: 2108, col: 5, offset: 69040},
										val:        "[0-9\\pL]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 2108, col: 15, offset: 69050},
									expr: &choiceExpr{
										pos: position{line: 2108, col: 17, offset: 69052},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 3080, col: 10, offset: 100200},
												run: (*parser).callonSingleQuoteItalicTextElement8,
												expr: &charClassMatcher{
													pos:        position{line: 3080, col: 11, offset: 100201},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&litMatcher{
												pos:        position{line: 2105, col: 24, offset: 69012},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3084, col: 11, offset: 100267},
						run: (*parser).callonSingleQuoteItalicTextElement11,
						expr: &oneOrMoreExpr{
							pos: position{line: 3084, col: 11, offset: 100267},
							expr: &charClassMatcher{
								pos:        position{line: 3084, col: 12, offset: 100268},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
					&seqExpr{
						pos: position{line: 2198, col: 7, offset: 71856},
						exprs: []interface{}{
							&actionExpr{
								pos: position{line: 3089, col: 12, offset: 100384},
								run: (*parser).callonSingleQuoteItalicTextElement15,
								expr: &choiceExpr{
									pos: position{line: 3089, col: 13, offset: 100385},
									alternatives: []interface{}{
										&litMatcher{
											pos:        position{line: 3089, col: 13, offset: 100385},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
										&litMatcher{
											pos:        position{line: 3089, col: 20, offset: 100392},
											val:        "\r\n",
											ignoreCase: false,
											want:       "\"\\r\\n\"",
										},
										&litMatcher{
											pos:        position{line: 3089, col: 29, offset: 100401},
											val:        "\r",
											ignoreCase: false,
											want:       "\"\\r\"",
										},
									},
								},
							},
							&notExpr{
								pos: position{line: 2198, col: 15, offset: 71864},
								expr: &actionExpr{
									pos: position{line: 3089, col: 12, offset: 100384},
									run: (*parser).callonSingleQuoteItalicTextElement21,
									expr: &choiceExpr{
										pos: position{line: 3089, col: 13, offset: 100385},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 3089, col: 13, offset: 100385},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
											&litMatcher{
												pos:        position{line: 3089, col: 20, offset: 100392},
												val:        "\r\n",
												ignoreCase: false,
												want:       "\"\\r\\n\"",
											},
											&litMatcher{
												pos:        position{line: 3089, col: 29, offset: 100401},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 648, col: 5, offset: 20883},
						run: (*parser).callonSingleQuoteItalicTextElement26,
						expr: &seqExpr{
							pos: position{line: 648, col: 5, offset: 20883},
							exprs: []interface{}{
								&andCodeExpr{
									pos: position{line: 648, col: 5, offset: 20883},
									run: (*parser).callonSingleQuoteItalicTextElement28,
								},
								&labeledExpr{
									pos:   position{line: 651, col: 5, offset: 20952},
									label: "element",
									expr: &choiceExpr{
										pos: position{line: 651, col: 14, offset: 20961},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 671, col: 25, offset: 21614},
												run: (*parser).callonSingleQuoteItalicTextElement31,
												expr: &seqExpr{
													pos: position{line: 671, col: 25, offset: 21614},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 671, col: 25, offset: 21614},
															val:        "{counter:",
															ignoreCase: false,
															want:       "\"{counter:\"",
														},
														&labeledExpr{
															pos:   position{line: 671, col: 37, offset: 21626},
															label: "name",
															expr: &actionExpr{
																pos: position{line: 324, col: 18, offset: 10072},
																run: (*parser).callonSingleQuoteItalicTextElement35,
																expr: &seqExpr{
																	pos: position{line: 324, col: 18, offset: 10072},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 324, col: 18, offset: 10072},
																			val:        "[_0-9\\pL]",
																			chars:      []rune{'_'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 324, col: 28, offset: 10082},
																			expr: &charClassMatcher{
																				pos:        position{line: 324, col: 29, offset: 10083},
																				val:        "[-0-9\\pL]",
																				chars:      []rune{'-'},
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 671, col: 56, offset: 21645},
															label: "start",
															expr: &zeroOrOneExpr{
																pos: position{line: 671, col: 62, offset: 21651},
																expr: &actionExpr{
																	pos: position{line: 679, col: 17, offset: 21946},
																	run: (*parser).callonSingleQuoteItalicTextElement42,
																	expr: &seqExpr{
																		pos: position{line: 679, col: 17, offset: 21946},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 679, col: 17, offset: 21946},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 679, col: 21, offset: 21950},
																				label: "start",
																				expr: &choiceExpr{
																					pos: position{line: 679, col: 28, offset: 21957},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 679, col: 28, offset: 21957},
																							run: (*parser).callonSingleQuoteItalicTextElement47,
																							expr: &charClassMatcher{
																								pos:        position{line: 679, col: 28, offset: 21957},
																								val:        "[A-Za-z]",
																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&actionExpr{
																							pos: position{line: 681, col: 9, offset: 22011},
																							run: (*parser).callonSingleQuoteItalicTextElement49,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 681, col: 9, offset: 22011},
																								expr: &charClassMatcher{
																									pos:        position{line: 681, col: 9, offset: 22011},
																									val:        "[0-9]",
																									ranges:     []rune{'0', '9'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 671, col: 78, offset: 21667},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 675, col: 25, offset: 21785},
												run: (*parser).callonSingleQuoteItalicTextElement53,
												expr: &seqExpr{
													pos: position{line: 675, col: 25, offset: 21785},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 675, col: 25, offset: 21785},
															val:        "{counter2:",
															ignoreCase: false,
															want:       "\"{counter2:\"",
														},
														&labeledExpr{
															pos:   position{line: 675, col: 38, offset: 21798},
															label: "name",
															expr: &actionExpr{
																pos: position{line: 324, col: 18, offset: 10072},
																run: (*parser).callonSingleQuoteItalicTextElement57,
																expr: &seqExpr{
																	pos: position{line: 324, col: 18, offset: 10072},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 324, col: 18, offset: 10072},
																			val:        "[_0-9\\pL]",
																			chars:      []rune{'_'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 324, col: 28, offset: 10082},
																			expr: &charClassMatcher{
																				pos:        position{line: 324, col: 29, offset: 10083},
																				val:        "[-0-9\\pL]",
																				chars:      []rune{'-'},
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 675, col: 57, offset: 21817},
															label: "start",
															expr: &zeroOrOneExpr{
																pos: position{line: 675, col: 63, offset: 21823},
																expr: &actionExpr{
																	pos: position{line: 679, col: 17, offset: 21946},
																	run: (*parser).callonSingleQuoteItalicTextElement64,
																	expr: &seqExpr{
																		pos: position{line: 679, col: 17, offset: 21946},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 679, col: 17, offset: 21946},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 679, col: 21, offset: 21950},
																				label: "start",
																				expr: &choiceExpr{
																					pos: position{line: 679, col: 28, offset: 21957},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 679, col: 28, offset: 21957},
																							run: (*parser).callonSingleQuoteItalicTextElement69,
																							expr: &charClassMatcher{
																								pos:        position{line: 679, col: 28, offset: 21957},
																								val:        "[A-Za-z]",
																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&actionExpr{
																							pos: position{line: 681, col: 9, offset: 22011},
																							run: (*parser).callonSingleQuoteItalicTextElement71,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 681, col: 9, offset: 22011},
																								expr: &charClassMatcher{
																									pos:        position{line: 681, col: 9, offset: 22011},
																									val:        "[0-9]",
																									ranges:     []rune{'0', '9'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 675, col: 79, offset: 21839},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 657, col: 5, offset: 21090},
												run: (*parser).callonSingleQuoteItalicTextElement75,
												expr: &seqExpr{
													pos: position{line: 657, col: 5, offset: 21090},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 657, col: 5, offset: 21090},
															val:        "\\{",
															ignoreCase: false,
															want:       "\"\\\\{\"",
														},
														&labeledExpr{
															pos:   position{line: 657, col: 13, offset: 21098},
															label: "name",
															expr: &actionExpr{
																pos: position{line: 324, col: 18, offset: 10072},
																run: (*parser).callonSingleQuoteItalicTextElement79,
																expr: &seqExpr{
																	pos: position{line: 324, col: 18, offset: 10072},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 324, col: 18, offset: 10072},
																			val:        "[_0-9\\pL]",
																			chars:      []rune{'_'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 324, col: 28, offset: 10082},
																			expr: &charClassMatcher{
																				pos:        position{line: 324, col: 29, offset: 10083},
																				val:        "[-0-9\\pL]",
																				chars:      []rune{'-'},
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 657, col: 32, offset: 21117},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 664, col: 5, offset: 21358},
												run: (*parser).callonSingleQuoteItalicTextElement85,
												expr: &seqExpr{
													pos: position{line: 664, col: 5, offset: 21358},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 664, col: 5, offset: 21358},
															val:        "{",
															ignoreCase: false,
															want:       "\"{\"",
														},
														&labeledExpr{
															pos:   position{line: 664, col: 9, offset: 21362},
															label: "name",
															expr: &actionExpr{
																pos: position{line: 324, col: 18, offset: 10072},
																run: (*parser).callonSingleQuoteItalicTextElement89,
																expr: &seqExpr{
																	pos: position{line: 324, col: 18, offset: 10072},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 324, col: 18, offset: 10072},
																			val:        "[_0-9\\pL]",
																			chars:      []rune{'_'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 324, col: 28, offset: 10082},
																			expr: &charClassMatcher{
																				pos:        position{line: 324, col: 29, offset: 10083},
																				val:        "[-0-9\\pL]",
																				chars:      []rune{'-'},
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 664, col: 28, offset: 21381},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2200, col: 7, offset: 71938},
						name: "InlineMacro",
					},
					&actionExpr{
						pos: position{line: 2753, col: 5, offset: 90225},
						run: (*parser).callonSingleQuoteItalicTextElement96,
						expr: &seqExpr{
							pos: position{line: 2753, col: 5, offset: 90225},
							exprs: []interface{}{
								&andCodeExpr{
									pos: position{line: 2753, col: 5, offset: 90225},
									run: (*parser).callonSingleQuoteItalicTextElement98,
								},
								&labeledExpr{
									pos:   position{line: 2756, col: 5, offset: 90301},
									label: "element",
									expr: &choiceExpr{
										pos: position{line: 2758, col: 9, offset: 90399},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 2758, col: 9, offset: 90399},
												run: (*parser).callonSingleQuoteItalicTextElement101,
												expr: &choiceExpr{
													pos: position{line: 699, col: 27, offset: 22665},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 699, col: 27, offset: 22665},
															run: (*parser).callonSingleQuoteItalicTextElement103,
															expr: &seqExpr{
																pos: position{line: 699, col: 27, offset: 22665},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 699, col: 27, offset: 22665},
																		val:        "<<",
																		ignoreCase: false,
																		want:       "\"<<\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 699, col: 32, offset: 22670},
																		label: "id",
																		expr: &actionExpr{
																			pos: position{line: 3065, col: 7, offset: 99852},
																			run: (*parser).callonSingleQuoteItalicTextElement107,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 3065, col: 7, offset: 99852},
																				expr: &charClassMatcher{
																					pos:        position{line: 3065, col: 7, offset: 99852},
																					val:        "[^[]<>,]",
																					chars:      []rune{'[', ']', '<', '>', ','},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 699, col: 40, offset: 22678},
																		expr: &actionExpr{
																			pos: position{line: 3080, col: 10, offset: 100200},
																			run: (*parser).callonSingleQuoteItalicTextElement111,
																			expr: &charClassMatcher{
																				pos:        position{line: 3080, col: 11, offset: 100201},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 699, col: 47, offset: 22685},
																		val:        ",",
																		ignoreCase: false,
																		want:       "\",\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 699, col: 51, offset: 22689},
																		label: "label",
																		expr: &oneOrMoreExpr{
																			pos: position{line: 709, col: 24, offset: 23090},
																			expr: &choiceExpr{
																				pos: position{line: 710, col: 5, offset: 23096},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 710, col: 6, offset: 23097},
																						run: (*parser).callonSingleQuoteItalicTextElement117,
																						expr: &seqExpr{
																							pos: position{line: 710, col: 6, offset: 23097},
																							exprs: []interface{}{
																								&charClassMatcher{
																									pos:        position{line: 710, col: 6, offset: 23097},
																									val:        "[0-9\\pL]",
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&oneOrMoreExpr{
																									pos: position{line: 710, col: 14, offset: 23105},
																									expr: &charClassMatcher{
																										pos:        position{line: 710, col: 14, offset: 23105},
																										val:        "[^\\r\\n{<>]",
																										chars:      []rune{'\r', '\n', '{', '<', '>'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 657, col: 5, offset: 21090},
																						run: (*parser).callonSingleQuoteItalicTextElement122,
																						expr: &seqExpr{
																							pos: position{line: 657, col: 5, offset: 21090},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 657, col: 5, offset: 21090},
																									val:        "\\{",
																									ignoreCase: false,
																									want:       "\"\\\\{\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 657, col: 13, offset: 21098},
																									label: "name",
																									expr: &actionExpr{
																										pos: position{line: 324, col: 18, offset: 10072},
																										run: (*parser).callonSingleQuoteItalicTextElement126,
																										expr: &seqExpr{
																											pos: position{line: 324, col: 18, offset: 10072},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 324, col: 18, offset: 10072},
																													val:        "[_0-9\\pL]",
																													chars:      []rune{'_'},
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 324, col: 28, offset: 10082},
																													expr: &charClassMatcher{
																														pos:        position{line: 324, col: 29, offset: 10083},
																														val:        "[-0-9\\pL]",
																														chars:      []rune{'-'},
																														ranges:     []rune{'0', '9'},
																														classes:    []*unicode.RangeTable{rangeTable("L")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 657, col: 32, offset: 21117},
																									val:        "}",
																									ignoreCase: false,
																									want:       "\"}\"",
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 664, col: 5, offset: 21358},
																						run: (*parser).callonSingleQuoteItalicTextElement132,
																						expr: &seqExpr{
																							pos: position{line: 664, col: 5, offset: 21358},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 664, col: 5, offset: 21358},
																									val:        "{",
																									ignoreCase: false,
																									want:       "\"{\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 664, col: 9, offset: 21362},
																									label: "name",
																									expr: &actionExpr{
																										pos: position{line: 324, col: 18, offset: 10072},
																										run: (*parser).callonSingleQuoteItalicTextElement136,
																										expr: &seqExpr{
																											pos: position{line: 324, col: 18, offset: 10072},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 324, col: 18, offset: 10072},
																													val:        "[_0-9\\pL]",
																													chars:      []rune{'_'},
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 324, col: 28, offset: 10082},
																													expr: &charClassMatcher{
																														pos:        position{line: 324, col: 29, offset: 10083},
																														val:        "[-0-9\\pL]",
																														chars:      []rune{'-'},
																														ranges:     []rune{'0', '9'},
																														classes:    []*unicode.RangeTable{rangeTable("L")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 664, col: 28, offset: 21381},
																									val:        "}",
																									ignoreCase: false,
																									want:       "\"}\"",
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 714, col: 8, offset: 23331},
																						run: (*parser).callonSingleQuoteItalicTextElement142,
																						expr: &litMatcher{
																							pos:        position{line: 714, col: 8, offset: 23331},
																							val:        "{",
																							ignoreCase: false,
																							want:       "\"{\"",
																						},
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 699, col: 79, offset: 22717},
																		val:        ">>",
																		ignoreCase: false,
																		want:       "\">>\"",
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 701, col: 9, offset: 22790},
															run: (*parser).callonSingleQuoteItalicTextElement145,
															expr: &seqExpr{
																pos: position{line: 701, col: 9, offset: 22790},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 701, col: 9, offset: 22790},
																		val:        "<<",
																		ignoreCase: false,
																		want:       "\"<<\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 701, col: 14, offset: 22795},
																		label: "id",
																		expr: &actionExpr{
																			pos: position{line: 3065, col: 7, offset: 99852},
																			run: (*parser).callonSingleQuoteItalicTextElement149,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 3065, col: 7, offset: 99852},
																				expr: &charClassMatcher{
																					pos:        position{line: 3065, col: 7, offset: 99852},
																					val:        "[^[]<>,]",
																					chars:      []rune{'[', ']', '<', '>', ','},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 701, col: 22, offset: 22803},
																		val:        ">>",
																		ignoreCase: false,
																		want:       "\">>\"",
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 2761, col: 11, offset: 90503},
												run: (*parser).callonSingleQuoteItalicTextElement153,
												expr: &charClassMatcher{
													pos:        position{line: 2761, col: 12, offset: 90504},
													val:        "[<>&]",
													chars:      []rune{'<', '>', '&'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2786, col: 5, offset: 91397},
						run: (*parser).callonSingleQuoteItalicTextElement155,
						expr: &seqExpr{
							pos: position{line: 2786, col: 5, offset: 91397},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2786, col: 5, offset: 91397},
									val:        "\\",
									ignoreCase: false,
									want:       "\"\\\\\"",
								},
								&choiceExpr{
									pos: position{line: 2786, col: 10, offset: 91402},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 2795, col: 5, offset: 91692},
											run: (*parser).callonSingleQuoteItalicTextElement159,
											expr: &litMatcher{
												pos:        position{line: 2795, col: 5, offset: 91692},
												val:        "\"`",
												ignoreCase: false,
												want:       "\"\\\"`\"",
											},
										},
										&actionExpr{
											pos: position{line: 2798, col: 7, offset: 91750},
											run: (*parser).callonSingleQuoteItalicTextElement161,
											expr: &litMatcher{
												pos:        position{line: 2798, col: 7, offset: 91750},
												val:        "`\"",
												ignoreCase: false,
												want:       "\"`\\\"\"",
											},
										},
										&actionExpr{
											pos: position{line: 2801, col: 7, offset: 91808},
											run: (*parser).callonSingleQuoteItalicTextElement163,
											expr: &litMatcher{
												pos:        position{line: 2801, col: 7, offset: 91808},
												val:        "'`",
												ignoreCase: false,
												want:       "\"'`\"",
											},
										},
										&actionExpr{
											pos: position{line: 2804, col: 7, offset: 91864},
											run: (*parser).callonSingleQuoteItalicTextElement165,
											expr: &litMatcher{
												pos:        position{line: 2804, col: 7, offset: 91864},
												val:        "`'",
												ignoreCase: false,
												want:       "\"`'\"",
											},
										},
										&actionExpr{
											pos: position{line: 2810, col: 14, offset: 91986},
											run: (*parser).callonSingleQuoteItalicTextElement167,
											expr: &litMatcher{
												pos:        position{line: 2810, col: 14, offset: 91986},
												val:        "(C)",
												ignoreCase: false,
												want:       "\"(C)\"",
											},
										},
										&actionExpr{
											pos: position{line: 2814, col: 14, offset: 92052},
											run: (*parser).callonSingleQuoteItalicTextElement169,
											expr: &litMatcher{
												pos:        position{line: 2814, col: 14, offset: 92052},
												val:        "(TM)",
												ignoreCase: false,
												want:       "\"(TM)\"",
											},
										},
										&actionExpr{
											pos: position{line: 2818, col: 15, offset: 92121},
											run: (*parser).callonSingleQuoteItalicTextElement171,
											expr: &litMatcher{
												pos:        position{line: 2818, col: 15, offset: 92121},
												val:        "(R)",
												ignoreCase: false,
												want:       "\"(R)\"",
											},
										},
										&actionExpr{
											pos: position{line: 2822, col: 13, offset: 92186},
											run: (*parser).callonSingleQuoteItalicTextElement173,
											expr: &litMatcher{
												pos:        position{line: 2822, col: 13, offset: 92186},
												val:        "...",
												ignoreCase: false,
												want:       "\"...\"",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2795, col: 5, offset: 91692},
						run: (*parser).callonSingleQuoteItalicTextElement175,
						expr: &litMatcher{
							pos:        position{line: 2795, col: 5, offset: 91692},
							val:        "\"`",
							ignoreCase: false,
							want:       "\"\\\"`\"",
						},
					},
					&actionExpr{
						pos: position{line: 2798, col: 7, offset: 91750},
						run: (*parser).callonSingleQuoteItalicTextElement177,
						expr: &litMatcher{
							pos:        position{line: 2798, col: 7, offset: 91750},
							val:        "`\"",
							ignoreCase: false,
							want:       "\"`\\\"\"",
						},
					},
					&actionExpr{
						pos: position{line: 2801, col: 7, offset: 91808},
						run: (*parser).callonSingleQuoteItalicTextElement179,
						expr: &litMatcher{
							pos:        position{line: 2801, col: 7, offset: 91808},
							val:        "'`",
							ignoreCase: false,
							want:       "\"'`\"",
						},
					},
					&actionExpr{
						pos: position{line: 2804, col: 7, offset: 91864},
						run: (*parser).callonSingleQuoteItalicTextElement181,
						expr: &litMatcher{
							pos:        position{line: 2804, col: 7, offset: 91864},
							val:        "`'",
							ignoreCase: false,
							want:       "\"`'\"",
						},
					},
					&actionExpr{
						pos: position{line: 2810, col: 14, offset: 91986},
						run: (*parser).callonSingleQuoteItalicTextElement183,
						expr: &litMatcher{
							pos:        position{line: 2810, col: 14, offset: 91986},
							val:        "(C)",
							ignoreCase: false,
							want:       "\"(C)\"",
						},
					},
					&actionExpr{
						pos: position{line: 2814, col: 14, offset: 92052},
						run: (*parser).callonSingleQuoteItalicTextElement185,
						expr: &litMatcher{
							pos:        position{line: 2814, col: 14, offset: 92052},
							val:        "(TM)",
							ignoreCase: false,
							want:       "\"(TM)\"",
						},
					},
					&actionExpr{
						pos: position{line: 2818, col: 15, offset: 92121},
						run: (*parser).callonSingleQuoteItalicTextElement187,
						expr: &litMatcher{
							pos:        position{line: 2818, col: 15, offset: 92121},
							val:        "(R)",
							ignoreCase: false,
							want:       "\"(R)\"",
						},
					},
					&actionExpr{
						pos: position{line: 2822, col: 13, offset: 92186},
						run: (*parser).callonSingleQuoteItalicTextElement189,
						expr: &litMatcher{
							pos:        position{line: 2822, col: 13, offset: 92186},
							val:        "...",
							ignoreCase: false,
							want:       "\"...\"",
						},
					},
					&actionExpr{
						pos: position{line: 2833, col: 5, offset: 92496},
						run: (*parser).callonSingleQuoteItalicTextElement191,
						expr: &seqExpr{
							pos: position{line: 2833, col: 5, offset: 92496},
							exprs: []interface{}{
								&charClassMatcher{
									pos:        position{line: 2994, col: 13, offset: 97463},
									val:        "[0-9\\pL]",
									ranges:     []rune{'0', '9'},
									classes:    []*unicode.RangeTable{rangeTable("L")},
									ignoreCase: false,
									inverted:   false,
								},
								&litMatcher{
									pos:        position{line: 2833, col: 14, offset: 92505},
									val:        "\\'",
									ignoreCase: false,
									want:       "\"\\\\'\"",
								},
								&andExpr{
									pos: position{line: 2833, col: 19, offset: 92510},
									expr: &charClassMatcher{
										pos:        position{line: 2833, col: 20, offset: 92511},
										val:        "[\\pL]",
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2839, col: 5, offset: 92742},
						run: (*parser).callonSingleQuoteItalicTextElement197,
						expr: &seqExpr{
							pos: position{line: 2839, col: 5, offset: 92742},
							exprs: []interface{}{
								&charClassMatcher{
									pos:        position{line: 2994, col: 13, offset: 97463},
									val:        "[0-9\\pL]",
									ranges:     []rune{'0', '9'},
									classes:    []*unicode.RangeTable{rangeTable("L")},
									ignoreCase: false,
									inverted:   false,
								},
								&litMatcher{
									pos:        position{line: 2839, col: 14, offset: 92751},
									val:        "'",
									ignoreCase: false,
									want:       "\"'\"",
								},
								&andExpr{
									pos: position{line: 2839, col: 18, offset: 92755},
									expr: &charClassMatcher{
										pos:        position{line: 2839, col: 19, offset: 92756},
										val:        "[\\pL]",
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2203, col: 7, offset: 72042},
						name: "QuotedTextInSingleQuoteItalicText",
					},
					&actionExpr{
						pos: position{line: 1219, col: 23, offset: 38141},
						run: (*parser).callonSingleQuoteItalicTextElement204,
						expr: &seqExpr{
							pos: position{line: 1219, col: 23, offset: 38141},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1217, col: 32, offset: 38109},
									val:        "�",
									ignoreCase: false,
									want:       "\"�\"",
								},
								&labeledExpr{
									pos:   position{line: 1219, col: 51, offset: 38169},
									label: "ref",
									expr: &actionExpr{
										pos: position{line: 1219, col: 56, offset: 38174},
										run: (*parser).callonSingleQuoteItalicTextElement208,
										expr: &oneOrMoreExpr{
											pos: position{line: 1219, col: 56, offset: 38174},
											expr: &charClassMatcher{
												pos:        position{line: 1219, col: 56, offset: 38174},
												val:        "[0-9]",
												ranges:     []rune{'0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1217, col: 32, offset: 38109},
									val:        "�",
									ignoreCase: false,
									want:       "\"�\"",
								},
							},
						},
					},
					&charClassMatcher{
						pos:        position{line: 2232, col: 5, offset: 72768},
						val:        "[^\\r\\n _]",
						chars:      []rune{'\r', '\n', ' ', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 2233, col: 7, offset: 72875},
						run: (*parser).callonSingleQuoteItalicTextElement213,
						expr: &seqExpr{
							pos: position{line: 2233, col: 7, offset: 72875},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2233, col: 7, offset: 72875},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&actionExpr{
									pos: position{line: 2998, col: 14, offset: 97537},
									run: (*parser).callonSingleQuoteItalicTextElement216,
									expr: &oneOrMoreExpr{
										pos: position{line: 2998, col: 14, offset: 97537},
										expr: &charClassMatcher{
											pos:        position{line: 2998, col: 14, offset: 97537},
											val:        "[0-9\\pL]",
											ranges:     []rune{'0', '9'},
											classes:    []*unicode.RangeTable{rangeTable("L")},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInSingleQuoteItalicText",
			pos:  position{line: 2207, col: 1, offset: 72147},
			expr: &choiceExpr{
				pos: position{line: 2209, col: 5, offset: 72211},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2209, col: 5, offset: 72211},
						run: (*parser).callonQuotedTextInSingleQuoteItalicText2,
						expr: &seqExpr{
							pos: position{line: 2209, col: 5, offset: 72211},
							exprs: []interface{}{
								&andExpr{
									pos: position{line: 2209, col: 5, offset: 72211},
									expr: &litMatcher{
										pos:        position{line: 2209, col: 7, offset: 72213},
										val:        "\\",
										ignoreCase: false,
										want:       "\"\\\\\"",
									},
								},
								&labeledExpr{
									pos:   position{line: 2210, col: 5, offset: 72222},
									label: "element",
									expr: &choiceExpr{
										pos: position{line: 2211, col: 9, offset: 72240},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 2211, col: 9, offset: 72240},
												name: "EscapedBoldText",
											},
											&ruleRefExpr{
												pos:  position{line: 2212, col: 11, offset: 72267},
												name: "EscapedMarkedText",
											},
											&ruleRefExpr{
												pos:  position{line: 2213, col: 11, offset: 72295},
												name: "EscapedMonospaceText",
											},
											&ruleRefExpr{
												pos:  position{line: 2214, col: 11, offset: 72326},
												name: "EscapedSubscriptText",
											},
											&ruleRefExpr{
												pos:  position{line: 2215, col: 11, offset: 72357},
												name: "EscapedSuperscriptText",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2221, col: 5, offset: 72457},
						run: (*parser).callonQuotedTextInSingleQuoteItalicText13,
						expr: &seqExpr{
							pos: position{line: 2221, col: 5, offset: 72457},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 2221, col: 5, offset: 72457},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 2221, col: 16, offset: 72468},
										expr: &ruleRefExpr{
											pos:  position{line: 2221, col: 17, offset: 72469},
											name: "LongHandAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2222, col: 5, offset: 72495},
									label: "text",
									expr: &choiceExpr{
										pos: position{line: 2222, col: 11, offset: 72501},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 2222, col: 11, offset: 72501},
												name: "BoldText",
											},
											&ruleRefExpr{
												pos:  position{line: 2223, col: 11, offset: 72520},
												name: "DoubleQuoteItalicText",
											},
											&ruleRefExpr{
												pos:  position{line: 2224, col: 11, offset: 72552},
												name: "MarkedText",
											},
											&ruleRefExpr{
												pos:  position{line: 2225, col: 11, offset: 72573},
												name: "MonospaceText",
											},
											&ruleRefExpr{
												pos:  position{line: 2226, col: 11, offset: 72597},
												name: "SubscriptText",
											},
											&ruleRefExpr{
												pos:  position{line: 2227, col: 11, offset: 72621},
												name: "SuperscriptText",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedItalicText",
			pos:  position{line: 2237, col: 1, offset: 73053},
			expr: &choiceExpr{
				pos: position{line: 2239, col: 5, offset: 73118},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2239, col: 5, offset: 73118},
						run: (*parser).callonEscapedItalicText2,
						expr: &seqExpr{
							pos: position{line: 2239, col: 5, offset: 73118},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 2239, col: 5, offset: 73118},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1954, col: 25, offset: 64015},
										run: (*parser).callonEscapedItalicText5,
										expr: &seqExpr{
											pos: position{line: 1954, col: 25, offset: 64015},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1954, col: 25, offset: 64015},
													val:        "\\\\",
													ignoreCase: false,
													want:       "\"\\\\\\\\\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 1954, col: 30, offset: 64020},
													expr: &litMatcher{
														pos:        position{line: 1954, col: 30, offset: 64020},
														val:        "\\",
														ignoreCase: false,
														want:       "\"\\\\\"",
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 2239, col: 40, offset: 73153},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 2239, col: 45, offset: 73158},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 2239, col: 55, offset: 73168},
										name: "DoubleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 2239, col: 86, offset: 73199},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2243, col: 7, offset: 73364},
						run: (*parser).callonEscapedItalicText14,
						expr: &seqExpr{
							pos: position{line: 2243, col: 7, offset: 73364},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 2243, col: 7, offset: 73364},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1950, col: 25, offset: 63942},
										run: (*parser).callonEscapedItalicText17,
										expr: &oneOrMoreExpr{
											pos: position{line: 1950, col: 25, offset: 63942},
											expr: &litMatcher{
												pos:        position{line: 1950, col: 25, offset: 63942},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 2243, col: 42, offset: 73399},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 2243, col: 47, offset: 73404},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 2243, col: 57, offset: 73414},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 2243, col: 88, offset: 73445},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2248, col: 7, offset: 73686},
						run: (*parser).callonEscapedItalicText24,
						expr: &seqExpr{
							pos: position{line: 2248, col: 7, offset: 73686},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 2248, col: 7, offset: 73686},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1950, col: 25, offset: 63942},
										run: (*parser).callonEscapedItalicText27,
										expr: &oneOrMoreExpr{
											pos: position{line: 1950, col: 25, offset: 63942},
											expr: &litMatcher{
												pos:        position{line: 1950, col: 25, offset: 63942},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 2248, col: 42, offset: 73721},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 2248, col: 46, offset: 73725},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 2248, col: 56, offset: 73735},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 2248, col: 87, offset: 73766},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MonospaceText",
			pos:  position{line: 2255, col: 1, offset: 74085},
			expr: &choiceExpr{
				pos: position{line: 2255, col: 18, offset: 74102},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2255, col: 18, offset: 74102},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 2255, col: 45, offset: 74129},
						name: "SingleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceText",
			pos:  position{line: 2269, col: 1, offset: 74481},
			expr: &actionExpr{
				pos: position{line: 2270, col: 5, offset: 74514},
				run: (*parser).callonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 2270, col: 5, offset: 74514},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2267, col: 38, offset: 74475},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
						&labeledExpr{
							pos:   position{line: 2271, col: 5, offset: 74553},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 2271, col: 15, offset: 74563},
								name: "DoubleQuoteMonospaceTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 2267, col: 38, offset: 74475},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElements",
			pos:  position{line: 2276, col: 1, offset: 74735},
			expr: &oneOrMoreExpr{
				pos: position{line: 2276, col: 37, offset: 74771},
				expr: &ruleRefExpr{
					pos:  position{line: 2276, col: 37, offset: 74771},
					name: "DoubleQuoteMonospaceTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElement",
			pos:  position{line: 2278, col: 1, offset: 74838},
			expr: &actionExpr{
				pos: position{line: 2279, col: 5, offset: 74878},
				run: (*parser).callonDoubleQuoteMonospaceTextElement1,
				expr: &seqExpr{
					pos: position{line: 2279, col: 5, offset: 74878},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2279, col: 5, offset: 74878},
							expr: &litMatcher{
								pos:        position{line: 2267, col: 38, offset: 74475},
								val:        "``",
								ignoreCase: false,
								want:       "\"``\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 2280, col: 5, offset: 74917},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 2281, col: 9, offset: 74935},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 2260, col: 5, offset: 74212},
										run: (*parser).callonDoubleQuoteMonospaceTextElement7,
										expr: &seqExpr{
											pos: position{line: 2260, col: 5, offset: 74212},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 2260, col: 5, offset: 74212},
													expr: &charClassMatcher{
														pos:        position{line: 2260, col: 5, offset: 74212},
														val:        "[0-9\\pL]",
														ranges:     []rune{'0', '9'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&andExpr{
													pos: position{line: 2260, col: 15, offset: 74222},
													expr: &choiceExpr{
														pos: position{line: 2260, col: 17, offset: 74224},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 3080, col: 10, offset: 100200},
																run: (*parser).callonDoubleQuoteMonospaceTextElement13,
																expr: &charClassMatcher{
																	pos:        position{line: 3080, col: 11, offset: 100201},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&litMatcher{
																pos:        position{line: 2257, col: 27, offset: 74181},
																val:        "`",
																ignoreCase: false,
																want:       "\"`\"",
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 3084, col: 11, offset: 100267},
										run: (*parser).callonDoubleQuoteMonospaceTextElement16,
										expr: &oneOrMoreExpr{
											pos: position{line: 3084, col: 11, offset: 100267},
											expr: &charClassMatcher{
												pos:        position{line: 3084, col: 12, offset: 100268},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
									&seqExpr{
										pos: position{line: 2283, col: 11, offset: 75013},
										exprs: []interface{}{
											&actionExpr{
												pos: position{line: 3089, col: 12, offset: 100384},
												run: (*parser).callonDoubleQuoteMonospaceTextElement20,
												expr: &choiceExpr{
													pos: position{line: 3089, col: 13, offset: 100385},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 3089, col: 13, offset: 100385},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&litMatcher{
															pos:        position{line: 3089, col: 20, offset: 100392},
															val:        "\r\n",
															ignoreCase: false,
															want:       "\"\\r\\n\"",
														},
														&litMatcher{
															pos:        position{line: 3089, col: 29, offset: 100401},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 2283, col: 19, offset: 75021},
												expr: &actionExpr{
													pos: position{line: 3089, col: 12, offset: 100384},
													run: (*parser).callonDoubleQuoteMonospaceTextElement26,
													expr: &choiceExpr{
														pos: position{line: 3089, col: 13, offset: 100385},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 3089, col: 13, offset: 100385},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
															&litMatcher{
																pos:        position{line: 3089, col: 20, offset: 100392},
																val:        "\r\n",
																ignoreCase: false,
																want:       "\"\\r\\n\"",
															},
															&litMatcher{
																pos:        position{line: 3089, col: 29, offset: 100401},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 648, col: 5, offset: 20883},
										run: (*parser).callonDoubleQuoteMonospaceTextElement31,
										expr: &seqExpr{
											pos: position{line: 648, col: 5, offset: 20883},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 648, col: 5, offset: 20883},
													run: (*parser).callonDoubleQuoteMonospaceTextElement33,
												},
												&labeledExpr{
													pos:   position{line: 651, col: 5, offset: 20952},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 651, col: 14, offset: 20961},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 671, col: 25, offset: 21614},
																run: (*parser).callonDoubleQuoteMonospaceTextElement36,
																expr: &seqExpr{
																	pos: position{line: 671, col: 25, offset: 21614},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 671, col: 25, offset: 21614},
																			val:        "{counter:",
																			ignoreCase: false,
																			want:       "\"{counter:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 671, col: 37, offset: 21626},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 324, col: 18, offset: 10072},
																				run: (*parser).callonDoubleQuoteMonospaceTextElement40,
																				expr: &seqExpr{
																					pos: position{line: 324, col: 18, offset: 10072},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 324, col: 18, offset: 10072},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 324, col: 28, offset: 10082},
																							expr: &charClassMatcher{
																								pos:        position{line: 324, col: 29, offset: 10083},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 671, col: 56, offset: 21645},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 671, col: 62, offset: 21651},
																				expr: &actionExpr{
																					pos: position{line: 679, col: 17, offset: 21946},
																					run: (*parser).callonDoubleQuoteMonospaceTextElement47,
																					expr: &seqExpr{
																						pos: position{line: 679, col: 17, offset: 21946},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 679, col: 17, offset: 21946},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 679, col: 21, offset: 21950},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 679, col: 28, offset: 21957},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 679, col: 28, offset: 21957},
																											run: (*parser).callonDoubleQuoteMonospaceTextElement52,
																											expr: &charClassMatcher{
																												pos:        position{line: 679, col: 28, offset: 21957},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 681, col: 9, offset: 22011},
																											run: (*parser).callonDoubleQuoteMonospaceTextElement54,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 681, col: 9, offset: 22011},
																												expr: &charClassMatcher{
																													pos:        position{line: 681, col: 9, offset: 22011},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 671, col: 78, offset: 21667},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 675, col: 25, offset: 21785},
																run: (*parser).callonDoubleQuoteMonospaceTextElement58,
																expr: &seqExpr{
																	pos: position{line: 675, col: 25, offset: 21785},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 675, col: 25, offset: 21785},
																			val:        "{counter2:",
																			ignoreCase: false,
																			want:       "\"{counter2:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 675, col: 38, offset: 21798},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 324, col: 18, offset: 10072},
																				run: (*parser).callonDoubleQuoteMonospaceTextElement62,
																				expr: &seqExpr{
																					pos: position{line: 324, col: 18, offset: 10072},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 324, col: 18, offset: 10072},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 324, col: 28, offset: 10082},
																							expr: &charClassMatcher{
																								pos:        position{line: 324, col: 29, offset: 10083},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 675, col: 57, offset: 21817},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 675, col: 63, offset: 21823},
																				expr: &actionExpr{
																					pos: position{line: 679, col: 17, offset: 21946},
																					run: (*parser).callonDoubleQuoteMonospaceTextElement69,
																					expr: &seqExpr{
																						pos: position{line: 679, col: 17, offset: 21946},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 679, col: 17, offset: 21946},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 679, col: 21, offset: 21950},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 679, col: 28, offset: 21957},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 679, col: 28, offset: 21957},
																											run: (*parser).callonDoubleQuoteMonospaceTextElement74,
																											expr: &charClassMatcher{
																												pos:        position{line: 679, col: 28, offset: 21957},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 681, col: 9, offset: 22011},
																											run: (*parser).callonDoubleQuoteMonospaceTextElement76,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 681, col: 9, offset: 22011},
																												expr: &charClassMatcher{
																													pos:        position{line: 681, col: 9, offset: 22011},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 675, col: 79, offset: 21839},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 657, col: 5, offset: 21090},
																run: (*parser).callonDoubleQuoteMonospaceTextElement80,
																expr: &seqExpr{
																	pos: position{line: 657, col: 5, offset: 21090},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 657, col: 5, offset: 21090},
																			val:        "\\{",
																			ignoreCase: false,
																			want:       "\"\\\\{\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 657, col: 13, offset: 21098},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 324, col: 18, offset: 10072},
																				run: (*parser).callonDoubleQuoteMonospaceTextElement84,
																				expr: &seqExpr{
																					pos: position{line: 324, col: 18, offset: 10072},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 324, col: 18, offset: 10072},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 324, col: 28, offset: 10082},
																							expr: &charClassMatcher{
																								pos:        position{line: 324, col: 29, offset: 10083},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 657, col: 32, offset: 21117},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 664, col: 5, offset: 21358},
																run: (*parser).callonDoubleQuoteMonospaceTextElement90,
																expr: &seqExpr{
																	pos: position{line: 664, col: 5, offset: 21358},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 664, col: 5, offset: 21358},
																			val:        "{",
																			ignoreCase: false,
																			want:       "\"{\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 664, col: 9, offset: 21362},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 324, col: 18, offset: 10072},
																				run: (*parser).callonDoubleQuoteMonospaceTextElement94,
																				expr: &seqExpr{
																					pos: position{line: 324, col: 18, offset: 10072},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 324, col: 18, offset: 10072},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 324, col: 28, offset: 10082},
																							expr: &charClassMatcher{
																								pos:        position{line: 324, col: 29, offset: 10083},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 664, col: 28, offset: 21381},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2285, col: 11, offset: 75103},
										name: "InlineMacro",
									},
									&actionExpr{
										pos: position{line: 2753, col: 5, offset: 90225},
										run: (*parser).callonDoubleQuoteMonospaceTextElement101,
										expr: &seqExpr{
											pos: position{line: 2753, col: 5, offset: 90225},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 2753, col: 5, offset: 90225},
													run: (*parser).callonDoubleQuoteMonospaceTextElement103,
												},
												&labeledExpr{
													pos:   position{line: 2756, col: 5, offset: 90301},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 2758, col: 9, offset: 90399},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2758, col: 9, offset: 90399},
																run: (*parser).callonDoubleQuoteMonospaceTextElement106,
																expr: &choiceExpr{
																	pos: position{line: 699, col: 27, offset: 22665},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 699, col: 27, offset: 22665},
																			run: (*parser).callonDoubleQuoteMonospaceTextElement108,
																			expr: &seqExpr{
																				pos: position{line: 699, col: 27, offset: 22665},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 699, col: 27, offset: 22665},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 699, col: 32, offset: 22670},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 3065, col: 7, offset: 99852},
																							run: (*parser).callonDoubleQuoteMonospaceTextElement112,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 3065, col: 7, offset: 99852},
																								expr: &charClassMatcher{
																									pos:        position{line: 3065, col: 7, offset: 99852},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 699, col: 40, offset: 22678},
																						expr: &actionExpr{
																							pos: position{line: 3080, col: 10, offset: 100200},
																							run: (*parser).callonDoubleQuoteMonospaceTextElement116,
																							expr: &charClassMatcher{
																								pos:        position{line: 3080, col: 11, offset: 100201},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 699, col: 47, offset: 22685},
																						val:        ",",
																						ignoreCase: false,
																						want:       "\",\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 699, col: 51, offset: 22689},
																						label: "label",
																						expr: &oneOrMoreExpr{
																							pos: position{line: 709, col: 24, offset: 23090},
																							expr: &choiceExpr{
																								pos: position{line: 710, col: 5, offset: 23096},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 710, col: 6, offset: 23097},
																										run: (*parser).callonDoubleQuoteMonospaceTextElement122,
																										expr: &seqExpr{
																											pos: position{line: 710, col: 6, offset: 23097},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 710, col: 6, offset: 23097},
																													val:        "[0-9\\pL]",
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&oneOrMoreExpr{
																													pos: position{line: 710, col: 14, offset: 23105},
																													expr: &charClassMatcher{
																														pos:        position{line: 710, col: 14, offset: 23105},
																														val:        "[^\\r\\n{<>]",
																														chars:      []rune{'\r', '\n', '{', '<', '>'},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 657, col: 5, offset: 21090},
																										run: (*parser).callonDoubleQuoteMonospaceTextElement127,
																										expr: &seqExpr{
																											pos: position{line: 657, col: 5, offset: 21090},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 657, col: 5, offset: 21090},
																													val:        "\\{",
																													ignoreCase: false,
																													want:       "\"\\\\{\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 657, col: 13, offset: 21098},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 324, col: 18, offset: 10072},
																														run: (*parser).callonDoubleQuoteMonospaceTextElement131,
																														expr: &seqExpr{
																															pos: position{line: 324, col: 18, offset: 10072},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 324, col: 18, offset: 10072},
																																	val:        "[_0-9\\pL]",
																																	chars:      []rune{'_'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 324, col: 28, offset: 10082},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 324, col: 29, offset: 10083},
																																		val:        "[-0-9\\pL]",
																																		chars:      []rune{'-'},
																																		ranges:     []rune{'0', '9'},
																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 657, col: 32, offset: 21117},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 664, col: 5, offset: 21358},
																										run: (*parser).callonDoubleQuoteMonospaceTextElement137,
																										expr: &seqExpr{
																											pos: position{line: 664, col: 5, offset: 21358},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 664, col: 5, offset: 21358},
																													val:        "{",
																													ignoreCase: false,
																													want:       "\"{\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 664, col: 9, offset: 21362},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 324, col: 18, offset: 10072},
																														run: (*parser).callonDoubleQuoteMonospaceTextElement141,
																														expr: &seqExpr{
																															pos: position{line: 324, col: 18, offset: 10072},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 324, col: 18, offset: 10072},
																																	val:        "[_0-9\\pL]",
																																	chars:      []rune{'_'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 324, col: 28, offset: 10082},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 324, col: 29, offset: 10083},
																																		val:        "[-0-9\\pL]",
																																		chars:      []rune{'-'},
																																		ranges:     []rune{'0', '9'},
																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 664, col: 28, offset: 21381},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 714, col: 8, offset: 23331},
																										run: (*parser).callonDoubleQuoteMonospaceTextElement147,
																										expr: &litMatcher{
																											pos:        position{line: 714, col: 8, offset: 23331},
																											val:        "{",
																											ignoreCase: false,
																											want:       "\"{\"",
																										},
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 699, col: 79, offset: 22717},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 701, col: 9, offset: 22790},
																			run: (*parser).callonDoubleQuoteMonospaceTextElement150,
																			expr: &seqExpr{
																				pos: position{line: 701, col: 9, offset: 22790},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 701, col: 9, offset: 22790},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 701, col: 14, offset: 22795},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 3065, col: 7, offset: 99852},
																							run: (*parser).callonDoubleQuoteMonospaceTextElement154,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 3065, col: 7, offset: 99852},
																								expr: &charClassMatcher{
																									pos:        position{line: 3065, col: 7, offset: 99852},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 701, col: 22, offset: 22803},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2761, col: 11, offset: 90503},
																run: (*parser).callonDoubleQuoteMonospaceTextElement158,
																expr: &charClassMatcher{
																	pos:        position{line: 2761, col: 12, offset: 90504},
																	val:        "[<>&]",
																	chars:      []rune{'<', '>', '&'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2786, col: 5, offset: 91397},
										run: (*parser).callonDoubleQuoteMonospaceTextElement160,
										expr: &seqExpr{
											pos: position{line: 2786, col: 5, offset: 91397},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 2786, col: 5, offset: 91397},
													val:        "\\",
													ignoreCase: false,
													want:       "\"\\\\\"",
												},
												&choiceExpr{
													pos: position{line: 2786, col: 10, offset: 91402},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2795, col: 5, offset: 91692},
															run: (*parser).callonDoubleQuoteMonospaceTextElement164,
															expr: &litMatcher{
																pos:        position{line: 2795, col: 5, offset: 91692},
																val:        "\"`",
																ignoreCase: false,
																want:       "\"\\\"`\"",
															},
														},
														&actionExpr{
															pos: position{line: 2798, col: 7, offset: 91750},
															run: (*parser).callonDoubleQuoteMonospaceTextElement166,
															expr: &litMatcher{
																pos:        position{line: 2798, col: 7, offset: 91750},
																val:        "`\"",
																ignoreCase: false,
																want:       "\"`\\\"\"",
															},
														},
														&actionExpr{
															pos: position{line: 2801, col: 7, offset: 91808},
															run: (*parser).callonDoubleQuoteMonospaceTextElement168,
															expr: &litMatcher{
																pos:        position{line: 2801, col: 7, offset: 91808},
																val:        "'`",
																ignoreCase: false,
																want:       "\"'`\"",
															},
														},
														&actionExpr{
															pos: position{line: 2804, col: 7, offset: 91864},
															run: (*parser).callonDoubleQuoteMonospaceTextElement170,
															expr: &litMatcher{
																pos:        position{line: 2804, col: 7, offset: 91864},
																val:        "`'",
																ignoreCase: false,
																want:       "\"`'\"",
															},
														},
														&actionExpr{
															pos: position{line: 2810, col: 14, offset: 91986},
															run: (*parser).callonDoubleQuoteMonospaceTextElement172,
															expr: &litMatcher{
																pos:        position{line: 2810, col: 14, offset: 91986},
																val:        "(C)",
																ignoreCase: false,
																want:       "\"(C)\"",
															},
														},
														&actionExpr{
															pos: position{line: 2814, col: 14, offset: 92052},
															run: (*parser).callonDoubleQuoteMonospaceTextElement174,
															expr: &litMatcher{
																pos:        position{line: 2814, col: 14, offset: 92052},
																val:        "(TM)",
																ignoreCase: false,
																want:       "\"(TM)\"",
															},
														},
														&actionExpr{
															pos: position{line: 2818, col: 15, offset: 92121},
															run: (*parser).callonDoubleQuoteMonospaceTextElement176,
															expr: &litMatcher{
																pos:        position{line: 2818, col: 15, offset: 92121},
																val:        "(R)",
																ignoreCase: false,
																want:       "\"(R)\"",
															},
														},
														&actionExpr{
															pos: position{line: 2822, col: 13, offset: 92186},
															run: (*parser).callonDoubleQuoteMonospaceTextElement178,
															expr: &litMatcher{
																pos:        position{line: 2822, col: 13, offset: 92186},
																val:        "...",
																ignoreCase: false,
																want:       "\"...\"",
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2795, col: 5, offset: 91692},
										run: (*parser).callonDoubleQuoteMonospaceTextElement180,
										expr: &litMatcher{
											pos:        position{line: 2795, col: 5, offset: 91692},
											val:        "\"`",
											ignoreCase: false,
											want:       "\"\\\"`\"",
										},
									},
									&actionExpr{
										pos: position{line: 2798, col: 7, offset: 91750},
										run: (*parser).callonDoubleQuoteMonospaceTextElement182,
										expr: &litMatcher{
											pos:        position{line: 2798, col: 7, offset: 91750},
											val:        "`\"",
											ignoreCase: false,
											want:       "\"`\\\"\"",
										},
									},
									&actionExpr{
										pos: position{line: 2801, col: 7, offset: 91808},
										run: (*parser).callonDoubleQuoteMonospaceTextElement184,
										expr: &litMatcher{
											pos:        position{line: 2801, col: 7, offset: 91808},
											val:        "'`",
											ignoreCase: false,
											want:       "\"'`\"",
										},
									},
									&actionExpr{
										pos: position{line: 2804, col: 7, offset: 91864},
										run: (*parser).callonDoubleQuoteMonospaceTextElement186,
										expr: &litMatcher{
											pos:        position{line: 2804, col: 7, offset: 91864},
											val:        "`'",
											ignoreCase: false,
											want:       "\"`'\"",
										},
									},
									&actionExpr{
										pos: position{line: 2810, col: 14, offset: 91986},
										run: (*parser).callonDoubleQuoteMonospaceTextElement188,
										expr: &litMatcher{
											pos:        position{line: 2810, col: 14, offset: 91986},
											val:        "(C)",
											ignoreCase: false,
											want:       "\"(C)\"",
										},
									},
									&actionExpr{
										pos: position{line: 2814, col: 14, offset: 92052},
										run: (*parser).callonDoubleQuoteMonospaceTextElement190,
										expr: &litMatcher{
											pos:        position{line: 2814, col: 14, offset: 92052},
											val:        "(TM)",
											ignoreCase: false,
											want:       "\"(TM)\"",
										},
									},
									&actionExpr{
										pos: position{line: 2818, col: 15, offset: 92121},
										run: (*parser).callonDoubleQuoteMonospaceTextElement192,
										expr: &litMatcher{
											pos:        position{line: 2818, col: 15, offset: 92121},
											val:        "(R)",
											ignoreCase: false,
											want:       "\"(R)\"",
										},
									},
									&actionExpr{
										pos: position{line: 2822, col: 13, offset: 92186},
										run: (*parser).callonDoubleQuoteMonospaceTextElement194,
										expr: &litMatcher{
											pos:        position{line: 2822, col: 13, offset: 92186},
											val:        "...",
											ignoreCase: false,
											want:       "\"...\"",
										},
									},
									&actionExpr{
										pos: position{line: 2833, col: 5, offset: 92496},
										run: (*parser).callonDoubleQuoteMonospaceTextElement196,
										expr: &seqExpr{
											pos: position{line: 2833, col: 5, offset: 92496},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 2994, col: 13, offset: 97463},
													val:        "[0-9\\pL]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 2833, col: 14, offset: 92505},
													val:        "\\'",
													ignoreCase: false,
													want:       "\"\\\\'\"",
												},
												&andExpr{
													pos: position{line: 2833, col: 19, offset: 92510},
													expr: &charClassMatcher{
														pos:        position{line: 2833, col: 20, offset: 92511},
														val:        "[\\pL]",
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2839, col: 5, offset: 92742},
										run: (*parser).callonDoubleQuoteMonospaceTextElement202,
										expr: &seqExpr{
											pos: position{line: 2839, col: 5, offset: 92742},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 2994, col: 13, offset: 97463},
													val:        "[0-9\\pL]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 2839, col: 14, offset: 92751},
													val:        "'",
													ignoreCase: false,
													want:       "\"'\"",
												},
												&andExpr{
													pos: position{line: 2839, col: 18, offset: 92755},
													expr: &charClassMatcher{
														pos:        position{line: 2839, col: 19, offset: 92756},
														val:        "[\\pL]",
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
									&litMatcher{
										pos:        position{line: 2808, col: 18, offset: 91933},
										val:        "`'",
										ignoreCase: false,
										want:       "\"`'\"",
									},
									&ruleRefExpr{
										pos:  position{line: 2289, col: 11, offset: 75286},
										name: "QuotedTextInDoubleQuoteMonospaceText",
									},
									&actionExpr{
										pos: position{line: 1219, col: 23, offset: 38141},
										run: (*parser).callonDoubleQuoteMonospaceTextElement210,
										expr: &seqExpr{
											pos: position{line: 1219, col: 23, offset: 38141},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1217, col: 32, offset: 38109},
													val:        "�",
													ignoreCase: false,
													want:       "\"�\"",
												},
												&labeledExpr{
													pos:   position{line: 1219, col: 51, offset: 38169},
													label: "ref",
													expr: &actionExpr{
														pos: position{line: 1219, col: 56, offset: 38174},
														run: (*parser).callonDoubleQuoteMonospaceTextElement214,
														expr: &oneOrMoreExpr{
															pos: position{line: 1219, col: 56, offset: 38174},
															expr: &charClassMatcher{
																pos:        position{line: 1219, col: 56, offset: 38174},
																val:        "[0-9]",
																ranges:     []rune{'0', '9'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1217, col: 32, offset: 38109},
													val:        "�",
													ignoreCase: false,
													want:       "\"�\"",
												},
											},
										},
									},
									&charClassMatcher{
										pos:        position{line: 2321, col: 5, offset: 76084},
										val:        "[^\\r\\n`]",
										chars:      []rune{'\r', '\n', '`'},
										ignoreCase: false,
										inverted:   true,
									},
									&actionExpr{
										pos: position{line: 2322, col: 7, offset: 76186},
										run: (*parser).callonDoubleQuoteMonospaceTextElement219,
										expr: &seqExpr{
											pos: position{line: 2322, col: 7, offset: 76186},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 2322, col: 7, offset: 76186},
													val:        "``",
													ignoreCase: false,
													want:       "\"``\"",
												},
												&actionExpr{
													pos: position{line: 2998, col: 14, offset: 97537},
													run: (*parser).callonDoubleQuoteMonospaceTextElement222,
													expr: &oneOrMoreExpr{
														pos: position{line: 2998, col: 14, offset: 97537},
														expr: &charClassMatcher{
															pos:        position{line: 2998, col: 14, offset: 97537},
															val:        "[0-9\\pL]",
															ranges:     []rune{'0', '9'},
															classes:    []*unicode.RangeTable{rangeTable("L")},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInDoubleQuoteMonospaceText",
			pos:  position{line: 2295, col: 1, offset: 75450},
			expr: &choiceExpr{
				pos: position{line: 2297, col: 5, offset: 75517},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2297, col: 5, offset: 75517},
						run: (*parser).callonQuotedTextInDoubleQuoteMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 2297, col: 5, offset: 75517},
							exprs: []interface{}{
								&andExpr{
									pos: position{line: 2297, col: 5, offset: 75517},
									expr: &litMatcher{
										pos:        position{line: 2297, col: 7, offset: 75519},
										val:        "\\",
										ignoreCase: false,
										want:       "\"\\\\\"",
									},
								},
								&labeledExpr{
									pos:   position{line: 2298, col: 5, offset: 75528},
									label: "element",
									expr: &choiceExpr{
										pos: position{line: 2299, col: 9, offset: 75546},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 2299, col: 9, offset: 75546},
												name: "EscapedBoldText",
											},
											&ruleRefExpr{
												pos:  position{line: 2300, col: 11, offset: 75573},
												name: "EscapedItalicText",
											},
											&ruleRefExpr{
												pos:  position{line: 2301, col: 11, offset: 75601},
												name: "EscapedMarkedText",
											},
											&ruleRefExpr{
												pos:  position{line: 2302, col: 11, offset: 75629},
												name: "EscapedSubscriptText",
											},
											&ruleRefExpr{
												pos:  position{line: 2303, col: 11, offset: 75660},
												name: "EscapedSuperscriptText",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2309, col: 5, offset: 75760},
						run: (*parser).callonQuotedTextInDoubleQuoteMonospaceText13,
						expr: &seqExpr{
							pos: position{line: 2309, col: 5, offset: 75760},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 2309, col: 5, offset: 75760},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 2309, col: 16, offset: 75771},
										expr: &ruleRefExpr{
											pos:  position{line: 2309, col: 17, offset: 75772},
											name: "LongHandAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2310, col: 5, offset: 75798},
									label: "text",
									expr: &choiceExpr{
										pos: position{line: 2311, col: 9, offset: 75813},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 2311, col: 9, offset: 75813},
												name: "SingleQuoteMonospaceText",
											},
											&ruleRefExpr{
												pos:  position{line: 2312, col: 11, offset: 75848},
												name: "BoldText",
											},
											&ruleRefExpr{
												pos:  position{line: 2313, col: 11, offset: 75867},
												name: "ItalicText",
											},
											&ruleRefExpr{
												pos:  position{line: 2314, col: 11, offset: 75888},
												name: "MarkedText",
											},
											&ruleRefExpr{
												pos:  position{line: 2315, col: 11, offset: 75909},
												name: "SubscriptText",
											},
											&ruleRefExpr{
												pos:  position{line: 2316, col: 11, offset: 75933},
												name: "SuperscriptText",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceText",
			pos:  position{line: 2335, col: 1, offset: 76672},
			expr: &actionExpr{
				pos: position{line: 2336, col: 5, offset: 76705},
				run: (*parser).callonSingleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 2336, col: 5, offset: 76705},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2331, col: 43, offset: 76620},
							val:        "`",
							ignoreCase: false,
							want:       "\"`\"",
						},
						&labeledExpr{
							pos:   position{line: 2337, col: 5, offset: 76749},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 2337, col: 15, offset: 76759},
								name: "SingleQuoteMonospaceTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 2333, col: 41, offset: 76666},
							val:        "`",
							ignoreCase: false,
							want:       "\"`\"",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElements",
			pos:  position{line: 2342, col: 1, offset: 76935},
			expr: &actionExpr{
				pos: position{line: 2343, col: 5, offset: 76976},
				run: (*parser).callonSingleQuoteMonospaceTextElements1,
				expr: &seqExpr{
					pos: position{line: 2343, col: 5, offset: 76976},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2343, col: 5, offset: 76976},
							expr: &notExpr{
								pos: position{line: 3093, col: 8, offset: 100474},
								expr: &anyMatcher{
									line: 3093, col: 9, offset: 100475,
								},
							},
						},
						&notExpr{
							pos: position{line: 2343, col: 10, offset: 76981},
							expr: &actionExpr{
								pos: position{line: 3080, col: 10, offset: 100200},
								run: (*parser).callonSingleQuoteMonospaceTextElements7,
								expr: &charClassMatcher{
									pos:        position{line: 3080, col: 11, offset: 100201},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2344, col: 5, offset: 77020},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 2344, col: 14, offset: 77029},
								expr: &ruleRefExpr{
									pos:  position{line: 2344, col: 15, offset: 77030},
									name: "SingleQuoteMonospaceTextElement",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 2345, col: 5, offset: 77068},
							run: (*parser).callonSingleQuoteMonospaceTextElements12,
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElement",
			pos:  position{line: 2351, col: 1, offset: 77209},
			expr: &choiceExpr{
				pos: position{line: 2352, col: 5, offset: 77250},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 3006, col: 5, offset: 97918},
						run: (*parser).callonSingleQuoteMonospaceTextElement2,
						expr: &seqExpr{
							pos: position{line: 3006, col: 5, offset: 97918},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 3006, col: 5, offset: 97918},
									expr: &charClassMatcher{
										pos:        position{line: 3006, col: 5, offset: 97918},
										val:        "[0-9\\pL]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 3006, col: 15, offset: 97928},
									expr: &choiceExpr{
										pos: position{line: 3006, col: 17, offset: 97930},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 3006, col: 17, offset: 97930},
												val:        "[\\r\\n ,]]",
												chars:      []rune{'\r', '\n', ' ', ',', ']'},
												ignoreCase: false,
												inverted:   false,
											},
											&notExpr{
												pos: position{line: 3093, col: 8, offset: 100474},
												expr: &anyMatcher{
													line: 3093, col: 9, offset: 100475,
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3008, col: 9, offset: 98012},
						run: (*parser).callonSingleQuoteMonospaceTextElement11,
						expr: &seqExpr{
							pos: position{line: 3008, col: 9, offset: 98012},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 3008, col: 9, offset: 98012},
									expr: &charClassMatcher{
										pos:        position{line: 3008, col: 9, offset: 98012},
										val:        "[0-9\\pL]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 3008, col: 19, offset: 98022},
									expr: &seqExpr{
										pos: position{line: 3008, col: 20, offset: 98023},
										exprs: []interface{}{
											&charClassMatcher{
												pos:        position{line: 3008, col: 20, offset: 98023},
												val:        "[=*_`]",
												chars:      []rune{'=', '*', '_', '`'},
												ignoreCase: false,
												inverted:   false,
											},
											&oneOrMoreExpr{
												pos: position{line: 3008, col: 27, offset: 98030},
												expr: &charClassMatcher{
													pos:        position{line: 3008, col: 27, offset: 98030},
													val:        "[0-9\\pL]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3084, col: 11, offset: 100267},
						run: (*parser).callonSingleQuoteMonospaceTextElement20,
						expr: &oneOrMoreExpr{
							pos: position{line: 3084, col: 11, offset: 100267},
							expr: &charClassMatcher{
								pos:        position{line: 3084, col: 12, offset: 100268},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
					&seqExpr{
						pos: position{line: 2354, col: 7, offset: 77275},
						exprs: []interface{}{
							&actionExpr{
								pos: position{line: 3089, col: 12, offset: 100384},
								run: (*parser).callonSingleQuoteMonospaceTextElement24,
								expr: &choiceExpr{
									pos: position{line: 3089, col: 13, offset: 100385},
									alternatives: []interface{}{
										&litMatcher{
											pos:        position{line: 3089, col: 13, offset: 100385},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
										&litMatcher{
											pos:        position{line: 3089, col: 20, offset: 100392},
											val:        "\r\n",
											ignoreCase: false,
											want:       "\"\\r\\n\"",
										},
										&litMatcher{
											pos:        position{line: 3089, col: 29, offset: 100401},
											val:        "\r",
											ignoreCase: false,
											want:       "\"\\r\"",
										},
									},
								},
							},
							&notExpr{
								pos: position{line: 2354, col: 15, offset: 77283},
								expr: &actionExpr{
									pos: position{line: 3089, col: 12, offset: 100384},
									run: (*parser).callonSingleQuoteMonospaceTextElement30,
									expr: &choiceExpr{
										pos: position{line: 3089, col: 13, offset: 100385},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 3089, col: 13, offset: 100385},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
											&litMatcher{
												pos:        position{line: 3089, col: 20, offset: 100392},
												val:        "\r\n",
												ignoreCase: false,
												want:       "\"\\r\\n\"",
											},
											&litMatcher{
												pos:        position{line: 3089, col: 29, offset: 100401},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 648, col: 5, offset: 20883},
						run: (*parser).callonSingleQuoteMonospaceTextElement35,
						expr: &seqExpr{
							pos: position{line: 648, col: 5, offset: 20883},
							exprs: []interface{}{
								&andCodeExpr{
									pos: position{line: 648, col: 5, offset: 20883},
									run: (*parser).callonSingleQuoteMonospaceTextElement37,
								},
								&labeledExpr{
									pos:   position{line: 651, col: 5, offset: 20952},
									label: "element",
									expr: &choiceExpr{
										pos: position{line: 651, col: 14, offset: 20961},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 671, col: 25, offset: 21614},
												run: (*parser).callonSingleQuoteMonospaceTextElement40,
												expr: &seqExpr{
													pos: position{line: 671, col: 25, offset: 21614},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 671, col: 25, offset: 21614},
															val:        "{counter:",
															ignoreCase: false,
															want:       "\"{counter:\"",
														},
														&labeledExpr{
															pos:   position{line: 671, col: 37, offset: 21626},
															label: "name",
															expr: &actionExpr{
																pos: position{line: 324, col: 18, offset: 10072},
																run: (*parser).callonSingleQuoteMonospaceTextElement44,
																expr: &seqExpr{
																	pos: position{line: 324, col: 18, offset: 10072},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 324, col: 18, offset: 10072},
																			val:        "[_0-9\\pL]",
																			chars:      []rune{'_'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 324, col: 28, offset: 10082},
																			expr: &charClassMatcher{
																				pos:        position{line: 324, col: 29, offset: 10083},
																				val:        "[-0-9\\pL]",
																				chars:      []rune{'-'},
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 671, col: 56, offset: 21645},
															label: "start",
															expr: &zeroOrOneExpr{
																pos: position{line: 671, col: 62, offset: 21651},
																expr: &actionExpr{
																	pos: position{line: 679, col: 17, offset: 21946},
																	run: (*parser).callonSingleQuoteMonospaceTextElement51,
																	expr: &seqExpr{
																		pos: position{line: 679, col: 17, offset: 21946},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 679, col: 17, offset: 21946},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 679, col: 21, offset: 21950},
																				label: "start",
																				expr: &choiceExpr{
																					pos: position{line: 679, col: 28, offset: 21957},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 679, col: 28, offset: 21957},
																							run: (*parser).callonSingleQuoteMonospaceTextElement56,
																							expr: &charClassMatcher{
																								pos:        position{line: 679, col: 28, offset: 21957},
																								val:        "[A-Za-z]",
																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&actionExpr{
																							pos: position{line: 681, col: 9, offset: 22011},
																							run: (*parser).callonSingleQuoteMonospaceTextElement58,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 681, col: 9, offset: 22011},
																								expr: &charClassMatcher{
																									pos:        position{line: 681, col: 9, offset: 22011},
																									val:        "[0-9]",
																									ranges:     []rune{'0', '9'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 671, col: 78, offset: 21667},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 675, col: 25, offset: 21785},
												run: (*parser).callonSingleQuoteMonospaceTextElement62,
												expr: &seqExpr{
													pos: position{line: 675, col: 25, offset: 21785},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 675, col: 25, offset: 21785},
															val:        "{counter2:",
															ignoreCase: false,
															want:       "\"{counter2:\"",
														},
														&labeledExpr{
															pos:   position{line: 675, col: 38, offset: 21798},
															label: "name",
															expr: &actionExpr{
																pos: position{line: 324, col: 18, offset: 10072},
																run: (*parser).callonSingleQuoteMonospaceTextElement66,
																expr: &seqExpr{
																	pos: position{line: 324, col: 18, offset: 10072},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 324, col: 18, offset: 10072},
																			val:        "[_0-9\\pL]",
																			chars:      []rune{'_'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 324, col: 28, offset: 10082},
																			expr: &charClassMatcher{
																				pos:        position{line: 324, col: 29, offset: 10083},
																				val:        "[-0-9\\pL]",
																				chars:      []rune{'-'},
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 675, col: 57, offset: 21817},
															label: "start",
															expr: &zeroOrOneExpr{
																pos: position{line: 675, col: 63, offset: 21823},
																expr: &actionExpr{
																	pos: position{line: 679, col: 17, offset: 21946},
																	run: (*parser).callonSingleQuoteMonospaceTextElement73,
																	expr: &seqExpr{
																		pos: position{line: 679, col: 17, offset: 21946},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 679, col: 17, offset: 21946},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 679, col: 21, offset: 21950},
																				label: "start",
																				expr: &choiceExpr{
																					pos: position{line: 679, col: 28, offset: 21957},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 679, col: 28, offset: 21957},
																							run: (*parser).callonSingleQuoteMonospaceTextElement78,
																							expr: &charClassMatcher{
																								pos:        position{line: 679, col: 28, offset: 21957},
																								val:        "[A-Za-z]",
																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&actionExpr{
																							pos: position{line: 681, col: 9, offset: 22011},
																							run: (*parser).callonSingleQuoteMonospaceTextElement80,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 681, col: 9, offset: 22011},
																								expr: &charClassMatcher{
																									pos:        position{line: 681, col: 9, offset: 22011},
																									val:        "[0-9]",
																									ranges:     []rune{'0', '9'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 675, col: 79, offset: 21839},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 657, col: 5, offset: 21090},
												run: (*parser).callonSingleQuoteMonospaceTextElement84,
												expr: &seqExpr{
													pos: position{line: 657, col: 5, offset: 21090},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 657, col: 5, offset: 21090},
															val:        "\\{",
															ignoreCase: false,
															want:       "\"\\\\{\"",
														},
														&labeledExpr{
															pos:   position{line: 657, col: 13, offset: 21098},
															label: "name",
															expr: &actionExpr{
																pos: position{line: 324, col: 18, offset: 10072},
																run: (*parser).callonSingleQuoteMonospaceTextElement88,
																expr: &seqExpr{
																	pos: position{line: 324, col: 18, offset: 10072},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 324, col: 18, offset: 10072},
																			val:        "[_0-9\\pL]",
																			chars:      []rune{'_'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 324, col: 28, offset: 10082},
																			expr: &charClassMatcher{
																				pos:        position{line: 324, col: 29, offset: 10083},
																				val:        "[-0-9\\pL]",
																				chars:      []rune{'-'},
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 657, col: 32, offset: 21117},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 664, col: 5, offset: 21358},
												run: (*parser).callonSingleQuoteMonospaceTextElement94,
												expr: &seqExpr{
													pos: position{line: 664, col: 5, offset: 21358},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 664, col: 5, offset: 21358},
															val:        "{",
															ignoreCase: false,
															want:       "\"{\"",
														},
														&labeledExpr{
															pos:   position{line: 664, col: 9, offset: 21362},
															label: "name",
															expr: &actionExpr{
																pos: position{line: 324, col: 18, offset: 10072},
																run: (*parser).callonSingleQuoteMonospaceTextElement98,
																expr: &seqExpr{
																	pos: position{line: 324, col: 18, offset: 10072},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 324, col: 18, offset: 10072},
																			val:        "[_0-9\\pL]",
																			chars:      []rune{'_'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 324, col: 28, offset: 10082},
																			expr: &charClassMatcher{
																				pos:        position{line: 324, col: 29, offset: 10083},
																				val:        "[-0-9\\pL]",
																				chars:      []rune{'-'},
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 664, col: 28, offset: 21381},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2356, col: 7, offset: 77357},
						name: "InlineMacro",
					},
					&actionExpr{
						pos: position{line: 2753, col: 5, offset: 90225},
						run: (*parser).callonSingleQuoteMonospaceTextElement105,
						expr: &seqExpr{
							pos: position{line: 2753, col: 5, offset: 90225},
							exprs: []interface{}{
								&andCodeExpr{
									pos: position{line: 2753, col: 5, offset: 90225},
									run: (*parser).callonSingleQuoteMonospaceTextElement107,
								},
								&labeledExpr{
									pos:   position{line: 2756, col: 5, offset: 90301},
									label: "element",
									expr: &choiceExpr{
										pos: position{line: 2758, col: 9, offset: 90399},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 2758, col: 9, offset: 90399},
												run: (*parser).callonSingleQuoteMonospaceTextElement110,
												expr: &choiceExpr{
													pos: position{line: 699, col: 27, offset: 22665},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 699, col: 27, offset: 22665},
															run: (*parser).callonSingleQuoteMonospaceTextElement112,
															expr: &seqExpr{
																pos: position{line: 699, col: 27, offset: 22665},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 699, col: 27, offset: 22665},
																		val:        "<<",
																		ignoreCase: false,
																		want:       "\"<<\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 699, col: 32, offset: 22670},
																		label: "id",
																		expr: &actionExpr{
																			pos: position{line: 3065, col: 7, offset: 99852},
																			run: (*parser).callonSingleQuoteMonospaceTextElement116,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 3065, col: 7, offset: 99852},
																				expr: &charClassMatcher{
																					pos:        position{line: 3065, col: 7, offset: 99852},
																					val:        "[^[]<>,]",
																					chars:      []rune{'[', ']', '<', '>', ','},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 699, col: 40, offset: 22678},
																		expr: &actionExpr{
																			pos: position{line: 3080, col: 10, offset: 100200},
																			run: (*parser).callonSingleQuoteMonospaceTextElement120,
																			expr: &charClassMatcher{
																				pos:        position{line: 3080, col: 11, offset: 100201},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 699, col: 47, offset: 22685},
																		val:        ",",
																		ignoreCase: false,
																		want:       "\",\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 699, col: 51, offset: 22689},
																		label: "label",
																		expr: &oneOrMoreExpr{
																			pos: position{line: 709, col: 24, offset: 23090},
																			expr: &choiceExpr{
																				pos: position{line: 710, col: 5, offset: 23096},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 710, col: 6, offset: 23097},
																						run: (*parser).callonSingleQuoteMonospaceTextElement126,
																						expr: &seqExpr{
																							pos: position{line: 710, col: 6, offset: 23097},
																							exprs: []interface{}{
																								&charClassMatcher{
																									pos:        position{line: 710, col: 6, offset: 23097},
																									val:        "[0-9\\pL]",
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&oneOrMoreExpr{
																									pos: position{line: 710, col: 14, offset: 23105},
																									expr: &charClassMatcher{
																										pos:        position{line: 710, col: 14, offset: 23105},
																										val:        "[^\\r\\n{<>]",
																										chars:      []rune{'\r', '\n', '{', '<', '>'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 657, col: 5, offset: 21090},
																						run: (*parser).callonSingleQuoteMonospaceTextElement131,
																						expr: &seqExpr{
																							pos: position{line: 657, col: 5, offset: 21090},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 657, col: 5, offset: 21090},
																									val:        "\\{",
																									ignoreCase: false,
																									want:       "\"\\\\{\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 657, col: 13, offset: 21098},
																									label: "name",
																									expr: &actionExpr{
																										pos: position{line: 324, col: 18, offset: 10072},
																										run: (*parser).callonSingleQuoteMonospaceTextElement135,
																										expr: &seqExpr{
																											pos: position{line: 324, col: 18, offset: 10072},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 324, col: 18, offset: 10072},
																													val:        "[_0-9\\pL]",
																													chars:      []rune{'_'},
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 324, col: 28, offset: 10082},
																													expr: &charClassMatcher{
																														pos:        position{line: 324, col: 29, offset: 10083},
																														val:        "[-0-9\\pL]",
																														chars:      []rune{'-'},
																														ranges:     []rune{'0', '9'},
																														classes:    []*unicode.RangeTable{rangeTable("L")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 657, col: 32, offset: 21117},
																									val:        "}",
																									ignoreCase: false,
																									want:       "\"}\"",
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 664, col: 5, offset: 21358},
																						run: (*parser).callonSingleQuoteMonospaceTextElement141,
																						expr: &seqExpr{
																							pos: position{line: 664, col: 5, offset: 21358},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 664, col: 5, offset: 21358},
																									val:        "{",
																									ignoreCase: false,
																									want:       "\"{\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 664, col: 9, offset: 21362},
																									label: "name",
																									expr: &actionExpr{
																										pos: position{line: 324, col: 18, offset: 10072},
																										run: (*parser).callonSingleQuoteMonospaceTextElement145,
																										expr: &seqExpr{
																											pos: position{line: 324, col: 18, offset: 10072},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 324, col: 18, offset: 10072},
																													val:        "[_0-9\\pL]",
																													chars:      []rune{'_'},
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 324, col: 28, offset: 10082},
																													expr: &charClassMatcher{
																														pos:        position{line: 324, col: 29, offset: 10083},
																														val:        "[-0-9\\pL]",
																														chars:      []rune{'-'},
																														ranges:     []rune{'0', '9'},
																														classes:    []*unicode.RangeTable{rangeTable("L")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 664, col: 28, offset: 21381},
																									val:        "}",
																									ignoreCase: false,
																									want:       "\"}\"",
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 714, col: 8, offset: 23331},
																						run: (*parser).callonSingleQuoteMonospaceTextElement151,
																						expr: &litMatcher{
																							pos:        position{line: 714, col: 8, offset: 23331},
																							val:        "{",
																							ignoreCase: false,
																							want:       "\"{\"",
																						},
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 699, col: 79, offset: 22717},
																		val:        ">>",
																		ignoreCase: false,
																		want:       "\">>\"",
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 701, col: 9, offset: 22790},
															run: (*parser).callonSingleQuoteMonospaceTextElement154,
															expr: &seqExpr{
																pos: position{line: 701, col: 9, offset: 22790},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 701, col: 9, offset: 22790},
																		val:        "<<",
																		ignoreCase: false,
																		want:       "\"<<\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 701, col: 14, offset: 22795},
																		label: "id",
																		expr: &actionExpr{
																			pos: position{line: 3065, col: 7, offset: 99852},
																			run: (*parser).callonSingleQuoteMonospaceTextElement158,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 3065, col: 7, offset: 99852},
																				expr: &charClassMatcher{
																					pos:        position{line: 3065, col: 7, offset: 99852},
																					val:        "[^[]<>,]",
																					chars:      []rune{'[', ']', '<', '>', ','},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 701, col: 22, offset: 22803},
																		val:        ">>",
																		ignoreCase: false,
																		want:       "\">>\"",
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 2761, col: 11, offset: 90503},
												run: (*parser).callonSingleQuoteMonospaceTextElement162,
												expr: &charClassMatcher{
													pos:        position{line: 2761, col: 12, offset: 90504},
													val:        "[<>&]",
													chars:      []rune{'<', '>', '&'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2786, col: 5, offset: 91397},
						run: (*parser).callonSingleQuoteMonospaceTextElement164,
						expr: &seqExpr{
							pos: position{line: 2786, col: 5, offset: 91397},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2786, col: 5, offset: 91397},
									val:        "\\",
									ignoreCase: false,
									want:       "\"\\\\\"",
								},
								&choiceExpr{
									pos: position{line: 2786, col: 10, offset: 91402},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 2795, col: 5, offset: 91692},
											run: (*parser).callonSingleQuoteMonospaceTextElement168,
											expr: &litMatcher{
												pos:        position{line: 2795, col: 5, offset: 91692},
												val:        "\"`",
												ignoreCase: false,
												want:       "\"\\\"`\"",
											},
										},
										&actionExpr{
											pos: position{line: 2798, col: 7, offset: 91750},
											run: (*parser).callonSingleQuoteMonospaceTextElement170,
											expr: &litMatcher{
												pos:        position{line: 2798, col: 7, offset: 91750},
												val:        "`\"",
												ignoreCase: false,
												want:       "\"`\\\"\"",
											},
										},
										&actionExpr{
											pos: position{line: 2801, col: 7, offset: 91808},
											run: (*parser).callonSingleQuoteMonospaceTextElement172,
											expr: &litMatcher{
												pos:        position{line: 2801, col: 7, offset: 91808},
												val:        "'`",
												ignoreCase: false,
												want:       "\"'`\"",
											},
										},
										&actionExpr{
											pos: position{line: 2804, col: 7, offset: 91864},
											run: (*parser).callonSingleQuoteMonospaceTextElement174,
											expr: &litMatcher{
												pos:        position{line: 2804, col: 7, offset: 91864},
												val:        "`'",
												ignoreCase: false,
												want:       "\"`'\"",
											},
										},
										&actionExpr{
											pos: position{line: 2810, col: 14, offset: 91986},
											run: (*parser).callonSingleQuoteMonospaceTextElement176,
											expr: &litMatcher{
												pos:        position{line: 2810, col: 14, offset: 91986},
												val:        "(C)",
												ignoreCase: false,
												want:       "\"(C)\"",
											},
										},
										&actionExpr{
											pos: position{line: 2814, col: 14, offset: 92052},
											run: (*parser).callonSingleQuoteMonospaceTextElement178,
											expr: &litMatcher{
												pos:        position{line: 2814, col: 14, offset: 92052},
												val:        "(TM)",
												ignoreCase: false,
												want:       "\"(TM)\"",
											},
										},
										&actionExpr{
											pos: position{line: 2818, col: 15, offset: 92121},
											run: (*parser).callonSingleQuoteMonospaceTextElement180,
											expr: &litMatcher{
												pos:        position{line: 2818, col: 15, offset: 92121},
												val:        "(R)",
												ignoreCase: false,
												want:       "\"(R)\"",
											},
										},
										&actionExpr{
											pos: position{line: 2822, col: 13, offset: 92186},
											run: (*parser).callonSingleQuoteMonospaceTextElement182,
											expr: &litMatcher{
												pos:        position{line: 2822, col: 13, offset: 92186},
												val:        "...",
												ignoreCase: false,
												want:       "\"...\"",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2795, col: 5, offset: 91692},
						run: (*parser).callonSingleQuoteMonospaceTextElement184,
						expr: &litMatcher{
							pos:        position{line: 2795, col: 5, offset: 91692},
							val:        "\"`",
							ignoreCase: false,
							want:       "\"\\\"`\"",
						},
					},
					&actionExpr{
						pos: position{line: 2798, col: 7, offset: 91750},
						run: (*parser).callonSingleQuoteMonospaceTextElement186,
						expr: &litMatcher{
							pos:        position{line: 2798, col: 7, offset: 91750},
							val:        "`\"",
							ignoreCase: false,
							want:       "\"`\\\"\"",
						},
					},
					&actionExpr{
						pos: position{line: 2801, col: 7, offset: 91808},
						run: (*parser).callonSingleQuoteMonospaceTextElement188,
						expr: &litMatcher{
							pos:        position{line: 2801, col: 7, offset: 91808},
							val:        "'`",
							ignoreCase: false,
							want:       "\"'`\"",
						},
					},
					&actionExpr{
						pos: position{line: 2804, col: 7, offset: 91864},
						run: (*parser).callonSingleQuoteMonospaceTextElement190,
						expr: &litMatcher{
							pos:        position{line: 2804, col: 7, offset: 91864},
							val:        "`'",
							ignoreCase: false,
							want:       "\"`'\"",
						},
					},
					&actionExpr{
						pos: position{line: 2810, col: 14, offset: 91986},
						run: (*parser).callonSingleQuoteMonospaceTextElement192,
						expr: &litMatcher{
							pos:        position{line: 2810, col: 14, offset: 91986},
							val:        "(C)",
							ignoreCase: false,
							want:       "\"(C)\"",
						},
					},
					&actionExpr{
						pos: position{line: 2814, col: 14, offset: 92052},
						run: (*parser).callonSingleQuoteMonospaceTextElement194,
						expr: &litMatcher{
							pos:        position{line: 2814, col: 14, offset: 92052},
							val:        "(TM)",
							ignoreCase: false,
							want:       "\"(TM)\"",
						},
					},
					&actionExpr{
						pos: position{line: 2818, col: 15, offset: 92121},
						run: (*parser).callonSingleQuoteMonospaceTextElement196,
						expr: &litMatcher{
							pos:        position{line: 2818, col: 15, offset: 92121},
							val:        "(R)",
							ignoreCase: false,
							want:       "\"(R)\"",
						},
					},
					&actionExpr{
						pos: position{line: 2822, col: 13, offset: 92186},
						run: (*parser).callonSingleQuoteMonospaceTextElement198,
						expr: &litMatcher{
							pos:        position{line: 2822, col: 13, offset: 92186},
							val:        "...",
							ignoreCase: false,
							want:       "\"...\"",
						},
					},
					&actionExpr{
						pos: position{line: 2833, col: 5, offset: 92496},
						run: (*parser).callonSingleQuoteMonospaceTextElement200,
						expr: &seqExpr{
							pos: position{line: 2833, col: 5, offset: 92496},
							exprs: []interface{}{
								&charClassMatcher{
									pos:        position{line: 2994, col: 13, offset: 97463},
									val:        "[0-9\\pL]",
									ranges:     []rune{'0', '9'},
									classes:    []*unicode.RangeTable{rangeTable("L")},
									ignoreCase: false,
									inverted:   false,
								},
								&litMatcher{
									pos:        position{line: 2833, col: 14, offset: 92505},
									val:        "\\'",
									ignoreCase: false,
									want:       "\"\\\\'\"",
								},
								&andExpr{
									pos: position{line: 2833, col: 19, offset: 92510},
									expr: &charClassMatcher{
										pos:        position{line: 2833, col: 20, offset: 92511},
										val:        "[\\pL]",
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2839, col: 5, offset: 92742},
						run: (*parser).callonSingleQuoteMonospaceTextElement206,
						expr: &seqExpr{
							pos: position{line: 2839, col: 5, offset: 92742},
							exprs: []interface{}{
								&charClassMatcher{
									pos:        position{line: 2994, col: 13, offset: 97463},
									val:        "[0-9\\pL]",
									ranges:     []rune{'0', '9'},
									classes:    []*unicode.RangeTable{rangeTable("L")},
									ignoreCase: false,
									inverted:   false,
								},
								&litMatcher{
									pos:        position{line: 2839, col: 14, offset: 92751},
									val:        "'",
									ignoreCase: false,
									want:       "\"'\"",
								},
								&andExpr{
									pos: position{line: 2839, col: 18, offset: 92755},
									expr: &charClassMatcher{
										pos:        position{line: 2839, col: 19, offset: 92756},
										val:        "[\\pL]",
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2359, col: 7, offset: 77461},
						name: "QuotedTextInSingleQuoteMonospaceText",
					},
					&litMatcher{
						pos:        position{line: 2808, col: 18, offset: 91933},
						val:        "`'",
						ignoreCase: false,
						want:       "\"`'\"",
					},
					&actionExpr{
						pos: position{line: 1219, col: 23, offset: 38141},
						run: (*parser).callonSingleQuoteMonospaceTextElement214,
						expr: &seqExpr{
							pos: position{line: 1219, col: 23, offset: 38141},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1217, col: 32, offset: 38109},
									val:        "�",
									ignoreCase: false,
									want:       "\"�\"",
								},
								&labeledExpr{
									pos:   position{line: 1219, col: 51, offset: 38169},
									label: "ref",
									expr: &actionExpr{
										pos: position{line: 1219, col: 56, offset: 38174},
										run: (*parser).callonSingleQuoteMonospaceTextElement218,
										expr: &oneOrMoreExpr{
											pos: position{line: 1219, col: 56, offset: 38174},
											expr: &charClassMatcher{
												pos:        position{line: 1219, col: 56, offset: 38174},
												val:        "[0-9]",
												ranges:     []rune{'0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1217, col: 32, offset: 38109},
									val:        "�",
									ignoreCase: false,
									want:       "\"�\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2390, col: 5, offset: 78226},
						run: (*parser).callonSingleQuoteMonospaceTextElement222,
						expr: &choiceExpr{
							pos: position{line: 2390, col: 6, offset: 78227},
							alternatives: []interface{}{
								&charClassMatcher{
									pos:        position{line: 2390, col: 6, offset: 78227},
									val:        "[^\\r\\n` ]",
									chars:      []rune{'\r', '\n', '`', ' '},
									ignoreCase: false,
									inverted:   true,
								},
								&seqExpr{
									pos: position{line: 2391, col: 7, offset: 78339},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 2257, col: 27, offset: 74181},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&actionExpr{
											pos: position{line: 2998, col: 14, offset: 97537},
											run: (*parser).callonSingleQuoteMonospaceTextElement227,
											expr: &oneOrMoreExpr{
												pos: position{line: 2998, col: 14, offset: 97537},
												expr: &charClassMatcher{
													pos:        position{line: 2998, col: 14, offset: 97537},
													val:        "[0-9\\pL]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInSingleQuoteMonospaceText",
			pos:  position{line: 2364, col: 1, offset: 77592},
			expr: &choiceExpr{
				pos: position{line: 2366, col: 5, offset: 77659},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2366, col: 5, offset: 77659},
						run: (*parser).callonQuotedTextInSingleQuoteMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 2366, col: 5, offset: 77659},
							exprs: []interface{}{
								&andExpr{
									pos: position{line: 2366, col: 5, offset: 77659},
									expr: &litMatcher{
										pos:        position{line: 2366, col: 7, offset: 77661},
										val:        "\\",
										ignoreCase: false,
										want:       "\"\\\\\"",
									},
								},
								&labeledExpr{
									pos:   position{line: 2367, col: 5, offset: 77670},
									label: "element",
									expr: &choiceExpr{
										pos: position{line: 2368, col: 9, offset: 77688},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 2368, col: 9, offset: 77688},
												name: "EscapedBoldText",
											},
											&ruleRefExpr{
												pos:  position{line: 2369, col: 11, offset: 77715},
												name: "EscapedItalicText",
											},
											&ruleRefExpr{
												pos:  position{line: 2370, col: 11, offset: 77743},
												name: "EscapedMarkedText",
											},
											&ruleRefExpr{
												pos:  position{line: 2371, col: 11, offset: 77771},
												name: "EscapedSubscriptText",
											},
											&ruleRefExpr{
												pos:  position{line: 2372, col: 11, offset: 77802},
												name: "EscapedSuperscriptText",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2378, col: 5, offset: 77902},
						run: (*parser).callonQuotedTextInSingleQuoteMonospaceText13,
						expr: &seqExpr{
							pos: position{line: 2378, col: 5, offset: 77902},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 2378, col: 5, offset: 77902},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 2378, col: 16, offset: 77913},
										expr: &ruleRefExpr{
											pos:  position{line: 2378, col: 17, offset: 77914},
											name: "LongHandAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2379, col: 5, offset: 77940},
									label: "text",
									expr: &choiceExpr{
										pos: position{line: 2380, col: 9, offset: 77955},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 2380, col: 9, offset: 77955},
												name: "DoubleQuoteMonospaceText",
											},
											&ruleRefExpr{
												pos:  position{line: 2381, col: 11, offset: 77990},
												name: "BoldText",
											},
											&ruleRefExpr{
												pos:  position{line: 2382, col: 11, offset: 78009},
												name: "ItalicText",
											},
											&ruleRefExpr{
												pos:  position{line: 2383, col: 11, offset: 78030},
												name: "MarkedText",
											},
											&ruleRefExpr{
												pos:  position{line: 2384, col: 11, offset: 78051},
												name: "SubscriptText",
											},
											&ruleRefExpr{
												pos:  position{line: 2385, col: 11, offset: 78075},
												name: "SuperscriptText",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMonospaceText",
			pos:  position{line: 2395, col: 1, offset: 78540},
			expr: &choiceExpr{
				pos: position{line: 2397, col: 5, offset: 78611},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2397, col: 5, offset: 78611},
						run: (*parser).callonEscapedMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 2397, col: 5, offset: 78611},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 2397, col: 5, offset: 78611},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1954, col: 25, offset: 64015},
										run: (*parser).callonEscapedMonospaceText5,
										expr: &seqExpr{
											pos: position{line: 1954, col: 25, offset: 64015},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1954, col: 25, offset: 64015},
													val:        "\\\\",
													ignoreCase: false,
													want:       "\"\\\\\\\\\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 1954, col: 30, offset: 64020},
													expr: &litMatcher{
														pos:        position{line: 1954, col: 30, offset: 64020},
														val:        "\\",
														ignoreCase: false,
														want:       "\"\\\\\"",
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 2397, col: 40, offset: 78646},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 2397, col: 45, offset: 78651},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 2397, col: 55, offset: 78661},
										name: "DoubleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 2397, col: 89, offset: 78695},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2401, col: 7, offset: 78864},
						run: (*parser).callonEscapedMonospaceText14,
						expr: &seqExpr{
							pos: position{line: 2401, col: 7, offset: 78864},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 2401, col: 7, offset: 78864},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1950, col: 25, offset: 63942},
										run: (*parser).callonEscapedMonospaceText17,
										expr: &oneOrMoreExpr{
											pos: position{line: 1950, col: 25, offset: 63942},
											expr: &litMatcher{
												pos:        position{line: 1950, col: 25, offset: 63942},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 2401, col: 42, offset: 78899},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 2401, col: 47, offset: 78904},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 2401, col: 57, offset: 78914},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 2401, col: 91, offset: 78948},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2406, col: 7, offset: 79154},
						run: (*parser).callonEscapedMonospaceText24,
						expr: &seqExpr{
							pos: position{line: 2406, col: 7, offset: 79154},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 2406, col: 7, offset: 79154},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1950, col: 25, offset: 63942},
										run: (*parser).callonEscapedMonospaceText27,
										expr: &oneOrMoreExpr{
											pos: position{line: 1950, col: 25, offset: 63942},
											expr: &litMatcher{
												pos:        position{line: 1950, col: 25, offset: 63942},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 2406, col: 42, offset: 79189},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 2406, col: 46, offset: 79193},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 2406, col: 56, offset: 79203},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 2406, col: 90, offset: 79237},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkedText",
			pos:  position{line: 2413, col: 1, offset: 79489},
			expr: &choiceExpr{
				pos: position{line: 2413, col: 15, offset: 79503},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2413, col: 15, offset: 79503},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 2413, col: 39, offset: 79527},
						name: "SingleQuoteMarkedText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedText",
			pos:  position{line: 2427, col: 1, offset: 79865},
			expr: &actionExpr{
				pos: position{line: 2428, col: 5, offset: 79895},
				run: (*parser).callonDoubleQuoteMarkedText1,
				expr: &seqExpr{
					pos: position{line: 2428, col: 5, offset: 79895},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2425, col: 35, offset: 79859},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
						&labeledExpr{
							pos:   position{line: 2429, col: 5, offset: 79931},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 2429, col: 15, offset: 79941},
								name: "DoubleQuoteMarkedTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 2425, col: 35, offset: 79859},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElements",
			pos:  position{line: 2434, col: 1, offset: 80104},
			expr: &zeroOrMoreExpr{
				pos: position{line: 2434, col: 34, offset: 80137},
				expr: &ruleRefExpr{
					pos:  position{line: 2434, col: 34, offset: 80137},
					name: "DoubleQuoteMarkedTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElement",
			pos:  position{line: 2436, col: 1, offset: 80168},
			expr: &actionExpr{
				pos: position{line: 2437, col: 5, offset: 80237},
				run: (*parser).callonDoubleQuoteMarkedTextElement1,
				expr: &seqExpr{
					pos: position{line: 2437, col: 5, offset: 80237},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2437, col: 5, offset: 80237},
							expr: &litMatcher{
								pos:        position{line: 2425, col: 35, offset: 79859},
								val:        "##",
								ignoreCase: false,
								want:       "\"##\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 2438, col: 5, offset: 80273},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 2439, col: 9, offset: 80291},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 2418, col: 5, offset: 79601},
										run: (*parser).callonDoubleQuoteMarkedTextElement7,
										expr: &seqExpr{
											pos: position{line: 2418, col: 5, offset: 79601},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 2418, col: 5, offset: 79601},
													expr: &charClassMatcher{
														pos:        position{line: 2418, col: 5, offset: 79601},
														val:        "[,?!;0-9\\pL]",
														chars:      []rune{',', '?', '!', ';'},
														ranges:     []rune{'0', '9'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&andExpr{
													pos: position{line: 2418, col: 19, offset: 79615},
													expr: &choiceExpr{
														pos: position{line: 2418, col: 21, offset: 79617},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 3080, col: 10, offset: 100200},
																run: (*parser).callonDoubleQuoteMarkedTextElement13,
																expr: &charClassMatcher{
																	pos:        position{line: 3080, col: 11, offset: 100201},
																	val:        "[ \\t]",
																	chars:      []rune{' ', '\t'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
															&litMatcher{
																pos:        position{line: 2415, col: 24, offset: 79573},
																val:        "#",
																ignoreCase: false,
																want:       "\"#\"",
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 3084, col: 11, offset: 100267},
										run: (*parser).callonDoubleQuoteMarkedTextElement16,
										expr: &oneOrMoreExpr{
											pos: position{line: 3084, col: 11, offset: 100267},
											expr: &charClassMatcher{
												pos:        position{line: 3084, col: 12, offset: 100268},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
									&seqExpr{
										pos: position{line: 2441, col: 11, offset: 80366},
										exprs: []interface{}{
											&actionExpr{
												pos: position{line: 3089, col: 12, offset: 100384},
												run: (*parser).callonDoubleQuoteMarkedTextElement20,
												expr: &choiceExpr{
													pos: position{line: 3089, col: 13, offset: 100385},
													alternatives: []interface{}{
														&litMatcher{
															pos:        position{line: 3089, col: 13, offset: 100385},
															val:        "\n",
															ignoreCase: false,
															want:       "\"\\n\"",
														},
														&litMatcher{
															pos:        position{line: 3089, col: 20, offset: 100392},
															val:        "\r\n",
															ignoreCase: false,
															want:       "\"\\r\\n\"",
														},
														&litMatcher{
															pos:        position{line: 3089, col: 29, offset: 100401},
															val:        "\r",
															ignoreCase: false,
															want:       "\"\\r\"",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 2441, col: 19, offset: 80374},
												expr: &actionExpr{
													pos: position{line: 3089, col: 12, offset: 100384},
													run: (*parser).callonDoubleQuoteMarkedTextElement26,
													expr: &choiceExpr{
														pos: position{line: 3089, col: 13, offset: 100385},
														alternatives: []interface{}{
															&litMatcher{
																pos:        position{line: 3089, col: 13, offset: 100385},
																val:        "\n",
																ignoreCase: false,
																want:       "\"\\n\"",
															},
															&litMatcher{
																pos:        position{line: 3089, col: 20, offset: 100392},
																val:        "\r\n",
																ignoreCase: false,
																want:       "\"\\r\\n\"",
															},
															&litMatcher{
																pos:        position{line: 3089, col: 29, offset: 100401},
																val:        "\r",
																ignoreCase: false,
																want:       "\"\\r\"",
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 648, col: 5, offset: 20883},
										run: (*parser).callonDoubleQuoteMarkedTextElement31,
										expr: &seqExpr{
											pos: position{line: 648, col: 5, offset: 20883},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 648, col: 5, offset: 20883},
													run: (*parser).callonDoubleQuoteMarkedTextElement33,
												},
												&labeledExpr{
													pos:   position{line: 651, col: 5, offset: 20952},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 651, col: 14, offset: 20961},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 671, col: 25, offset: 21614},
																run: (*parser).callonDoubleQuoteMarkedTextElement36,
																expr: &seqExpr{
																	pos: position{line: 671, col: 25, offset: 21614},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 671, col: 25, offset: 21614},
																			val:        "{counter:",
																			ignoreCase: false,
																			want:       "\"{counter:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 671, col: 37, offset: 21626},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 324, col: 18, offset: 10072},
																				run: (*parser).callonDoubleQuoteMarkedTextElement40,
																				expr: &seqExpr{
																					pos: position{line: 324, col: 18, offset: 10072},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 324, col: 18, offset: 10072},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 324, col: 28, offset: 10082},
																							expr: &charClassMatcher{
																								pos:        position{line: 324, col: 29, offset: 10083},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 671, col: 56, offset: 21645},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 671, col: 62, offset: 21651},
																				expr: &actionExpr{
																					pos: position{line: 679, col: 17, offset: 21946},
																					run: (*parser).callonDoubleQuoteMarkedTextElement47,
																					expr: &seqExpr{
																						pos: position{line: 679, col: 17, offset: 21946},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 679, col: 17, offset: 21946},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 679, col: 21, offset: 21950},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 679, col: 28, offset: 21957},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 679, col: 28, offset: 21957},
																											run: (*parser).callonDoubleQuoteMarkedTextElement52,
																											expr: &charClassMatcher{
																												pos:        position{line: 679, col: 28, offset: 21957},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 681, col: 9, offset: 22011},
																											run: (*parser).callonDoubleQuoteMarkedTextElement54,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 681, col: 9, offset: 22011},
																												expr: &charClassMatcher{
																													pos:        position{line: 681, col: 9, offset: 22011},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 671, col: 78, offset: 21667},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 675, col: 25, offset: 21785},
																run: (*parser).callonDoubleQuoteMarkedTextElement58,
																expr: &seqExpr{
																	pos: position{line: 675, col: 25, offset: 21785},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 675, col: 25, offset: 21785},
																			val:        "{counter2:",
																			ignoreCase: false,
																			want:       "\"{counter2:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 675, col: 38, offset: 21798},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 324, col: 18, offset: 10072},
																				run: (*parser).callonDoubleQuoteMarkedTextElement62,
																				expr: &seqExpr{
																					pos: position{line: 324, col: 18, offset: 10072},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 324, col: 18, offset: 10072},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 324, col: 28, offset: 10082},
																							expr: &charClassMatcher{
																								pos:        position{line: 324, col: 29, offset: 10083},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 675, col: 57, offset: 21817},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 675, col: 63, offset: 21823},
																				expr: &actionExpr{
																					pos: position{line: 679, col: 17, offset: 21946},
																					run: (*parser).callonDoubleQuoteMarkedTextElement69,
																					expr: &seqExpr{
																						pos: position{line: 679, col: 17, offset: 21946},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 679, col: 17, offset: 21946},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 679, col: 21, offset: 21950},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 679, col: 28, offset: 21957},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 679, col: 28, offset: 21957},
																											run: (*parser).callonDoubleQuoteMarkedTextElement74,
																											expr: &charClassMatcher{
																												pos:        position{line: 679, col: 28, offset: 21957},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 681, col: 9, offset: 22011},
																											run: (*parser).callonDoubleQuoteMarkedTextElement76,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 681, col: 9, offset: 22011},
																												expr: &charClassMatcher{
																													pos:        position{line: 681, col: 9, offset: 22011},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 675, col: 79, offset: 21839},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 657, col: 5, offset: 21090},
																run: (*parser).callonDoubleQuoteMarkedTextElement80,
																expr: &seqExpr{
																	pos: position{line: 657, col: 5, offset: 21090},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 657, col: 5, offset: 21090},
																			val:        "\\{",
																			ignoreCase: false,
																			want:       "\"\\\\{\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 657, col: 13, offset: 21098},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 324, col: 18, offset: 10072},
																				run: (*parser).callonDoubleQuoteMarkedTextElement84,
																				expr: &seqExpr{
																					pos: position{line: 324, col: 18, offset: 10072},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 324, col: 18, offset: 10072},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 324, col: 28, offset: 10082},
																							expr: &charClassMatcher{
																								pos:        position{line: 324, col: 29, offset: 10083},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 657, col: 32, offset: 21117},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 664, col: 5, offset: 21358},
																run: (*parser).callonDoubleQuoteMarkedTextElement90,
																expr: &seqExpr{
																	pos: position{line: 664, col: 5, offset: 21358},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 664, col: 5, offset: 21358},
																			val:        "{",
																			ignoreCase: false,
																			want:       "\"{\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 664, col: 9, offset: 21362},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 324, col: 18, offset: 10072},
																				run: (*parser).callonDoubleQuoteMarkedTextElement94,
																				expr: &seqExpr{
																					pos: position{line: 324, col: 18, offset: 10072},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 324, col: 18, offset: 10072},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 324, col: 28, offset: 10082},
																							expr: &charClassMatcher{
																								pos:        position{line: 324, col: 29, offset: 10083},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 664, col: 28, offset: 21381},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2443, col: 11, offset: 80456},
										name: "InlineMacro",
									},
									&actionExpr{
										pos: position{line: 2753, col: 5, offset: 90225},
										run: (*parser).callonDoubleQuoteMarkedTextElement101,
										expr: &seqExpr{
											pos: position{line: 2753, col: 5, offset: 90225},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 2753, col: 5, offset: 90225},
													run: (*parser).callonDoubleQuoteMarkedTextElement103,
												},
												&labeledExpr{
													pos:   position{line: 2756, col: 5, offset: 90301},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 2758, col: 9, offset: 90399},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2758, col: 9, offset: 90399},
																run: (*parser).callonDoubleQuoteMarkedTextElement106,
																expr: &choiceExpr{
																	pos: position{line: 699, col: 27, offset: 22665},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 699, col: 27, offset: 22665},
																			run: (*parser).callonDoubleQuoteMarkedTextElement108,
																			expr: &seqExpr{
																				pos: position{line: 699, col: 27, offset: 22665},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 699, col: 27, offset: 22665},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 699, col: 32, offset: 22670},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 3065, col: 7, offset: 99852},
																							run: (*parser).callonDoubleQuoteMarkedTextElement112,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 3065, col: 7, offset: 99852},
																								expr: &charClassMatcher{
																									pos:        position{line: 3065, col: 7, offset: 99852},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 699, col: 40, offset: 22678},
																						expr: &actionExpr{
																							pos: position{line: 3080, col: 10, offset: 100200},
																							run: (*parser).callonDoubleQuoteMarkedTextElement116,
																							expr: &charClassMatcher{
																								pos:        position{line: 3080, col: 11, offset: 100201},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 699, col: 47, offset: 22685},
																						val:        ",",
																						ignoreCase: false,
																						want:       "\",\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 699, col: 51, offset: 22689},
																						label: "label",
																						expr: &oneOrMoreExpr{
																							pos: position{line: 709, col: 24, offset: 23090},
																							expr: &choiceExpr{
																								pos: position{line: 710, col: 5, offset: 23096},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 710, col: 6, offset: 23097},
																										run: (*parser).callonDoubleQuoteMarkedTextElement122,
																										expr: &seqExpr{
																											pos: position{line: 710, col: 6, offset: 23097},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 710, col: 6, offset: 23097},
																													val:        "[0-9\\pL]",
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&oneOrMoreExpr{
																													pos: position{line: 710, col: 14, offset: 23105},
																													expr: &charClassMatcher{
																														pos:        position{line: 710, col: 14, offset: 23105},
																														val:        "[^\\r\\n{<>]",
																														chars:      []rune{'\r', '\n', '{', '<', '>'},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 657, col: 5, offset: 21090},
																										run: (*parser).callonDoubleQuoteMarkedTextElement127,
																										expr: &seqExpr{
																											pos: position{line: 657, col: 5, offset: 21090},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 657, col: 5, offset: 21090},
																													val:        "\\{",
																													ignoreCase: false,
																													want:       "\"\\\\{\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 657, col: 13, offset: 21098},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 324, col: 18, offset: 10072},
																														run: (*parser).callonDoubleQuoteMarkedTextElement131,
																														expr: &seqExpr{
																															pos: position{line: 324, col: 18, offset: 10072},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 324, col: 18, offset: 10072},
																																	val:        "[_0-9\\pL]",
																																	chars:      []rune{'_'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 324, col: 28, offset: 10082},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 324, col: 29, offset: 10083},
																																		val:        "[-0-9\\pL]",
																																		chars:      []rune{'-'},
																																		ranges:     []rune{'0', '9'},
																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 657, col: 32, offset: 21117},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 664, col: 5, offset: 21358},
																										run: (*parser).callonDoubleQuoteMarkedTextElement137,
																										expr: &seqExpr{
																											pos: position{line: 664, col: 5, offset: 21358},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 664, col: 5, offset: 21358},
																													val:        "{",
																													ignoreCase: false,
																													want:       "\"{\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 664, col: 9, offset: 21362},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 324, col: 18, offset: 10072},
																														run: (*parser).callonDoubleQuoteMarkedTextElement141,
																														expr: &seqExpr{
																															pos: position{line: 324, col: 18, offset: 10072},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 324, col: 18, offset: 10072},
																																	val:        "[_0-9\\pL]",
																																	chars:      []rune{'_'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 324, col: 28, offset: 10082},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 324, col: 29, offset: 10083},
																																		val:        "[-0-9\\pL]",
																																		chars:      []rune{'-'},
																																		ranges:     []rune{'0', '9'},
																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 664, col: 28, offset: 21381},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 714, col: 8, offset: 23331},
																										run: (*parser).callonDoubleQuoteMarkedTextElement147,
																										expr: &litMatcher{
																											pos:        position{line: 714, col: 8, offset: 23331},
																											val:        "{",
																											ignoreCase: false,
																											want:       "\"{\"",
																										},
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 699, col: 79, offset: 22717},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 701, col: 9, offset: 22790},
																			run: (*parser).callonDoubleQuoteMarkedTextElement150,
																			expr: &seqExpr{
																				pos: position{line: 701, col: 9, offset: 22790},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 701, col: 9, offset: 22790},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 701, col: 14, offset: 22795},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 3065, col: 7, offset: 99852},
																							run: (*parser).callonDoubleQuoteMarkedTextElement154,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 3065, col: 7, offset: 99852},
																								expr: &charClassMatcher{
																									pos:        position{line: 3065, col: 7, offset: 99852},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 701, col: 22, offset: 22803},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2761, col: 11, offset: 90503},
																run: (*parser).callonDoubleQuoteMarkedTextElement158,
																expr: &charClassMatcher{
																	pos:        position{line: 2761, col: 12, offset: 90504},
																	val:        "[<>&]",
																	chars:      []rune{'<', '>', '&'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2786, col: 5, offset: 91397},
										run: (*parser).callonDoubleQuoteMarkedTextElement160,
										expr: &seqExpr{
											pos: position{line: 2786, col: 5, offset: 91397},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 2786, col: 5, offset: 91397},
													val:        "\\",
													ignoreCase: false,
													want:       "\"\\\\\"",
												},
												&choiceExpr{
													pos: position{line: 2786, col: 10, offset: 91402},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 2795, col: 5, offset: 91692},
															run: (*parser).callonDoubleQuoteMarkedTextElement164,
															expr: &litMatcher{
																pos:        position{line: 2795, col: 5, offset: 91692},
																val:        "\"`",
																ignoreCase: false,
																want:       "\"\\\"`\"",
															},
														},
														&actionExpr{
															pos: position{line: 2798, col: 7, offset: 91750},
															run: (*parser).callonDoubleQuoteMarkedTextElement166,
															expr: &litMatcher{
																pos:        position{line: 2798, col: 7, offset: 91750},
																val:        "`\"",
																ignoreCase: false,
																want:       "\"`\\\"\"",
															},
														},
														&actionExpr{
															pos: position{line: 2801, col: 7, offset: 91808},
															run: (*parser).callonDoubleQuoteMarkedTextElement168,
															expr: &litMatcher{
																pos:        position{line: 2801, col: 7, offset: 91808},
																val:        "'`",
																ignoreCase: false,
																want:       "\"'`\"",
															},
														},
														&actionExpr{
															pos: position{line: 2804, col: 7, offset: 91864},
															run: (*parser).callonDoubleQuoteMarkedTextElement170,
															expr: &litMatcher{
																pos:        position{line: 2804, col: 7, offset: 91864},
																val:        "`'",
																ignoreCase: false,
																want:       "\"`'\"",
															},
														},
														&actionExpr{
															pos: position{line: 2810, col: 14, offset: 91986},
															run: (*parser).callonDoubleQuoteMarkedTextElement172,
															expr: &litMatcher{
																pos:        position{line: 2810, col: 14, offset: 91986},
																val:        "(C)",
																ignoreCase: false,
																want:       "\"(C)\"",
															},
														},
														&actionExpr{
															pos: position{line: 2814, col: 14, offset: 92052},
															run: (*parser).callonDoubleQuoteMarkedTextElement174,
															expr: &litMatcher{
																pos:        position{line: 2814, col: 14, offset: 92052},
																val:        "(TM)",
																ignoreCase: false,
																want:       "\"(TM)\"",
															},
														},
														&actionExpr{
															pos: position{line: 2818, col: 15, offset: 92121},
															run: (*parser).callonDoubleQuoteMarkedTextElement176,
															expr: &litMatcher{
																pos:        position{line: 2818, col: 15, offset: 92121},
																val:        "(R)",
																ignoreCase: false,
																want:       "\"(R)\"",
															},
														},
														&actionExpr{
															pos: position{line: 2822, col: 13, offset: 92186},
															run: (*parser).callonDoubleQuoteMarkedTextElement178,
															expr: &litMatcher{
																pos:        position{line: 2822, col: 13, offset: 92186},
																val:        "...",
																ignoreCase: false,
																want:       "\"...\"",
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2795, col: 5, offset: 91692},
										run: (*parser).callonDoubleQuoteMarkedTextElement180,
										expr: &litMatcher{
											pos:        position{line: 2795, col: 5, offset: 91692},
											val:        "\"`",
											ignoreCase: false,
											want:       "\"\\\"`\"",
										},
									},
									&actionExpr{
										pos: position{line: 2798, col: 7, offset: 91750},
										run: (*parser).callonDoubleQuoteMarkedTextElement182,
										expr: &litMatcher{
											pos:        position{line: 2798, col: 7, offset: 91750},
											val:        "`\"",
											ignoreCase: false,
											want:       "\"`\\\"\"",
										},
									},
									&actionExpr{
										pos: position{line: 2801, col: 7, offset: 91808},
										run: (*parser).callonDoubleQuoteMarkedTextElement184,
										expr: &litMatcher{
											pos:        position{line: 2801, col: 7, offset: 91808},
											val:        "'`",
											ignoreCase: false,
											want:       "\"'`\"",
										},
									},
									&actionExpr{
										pos: position{line: 2804, col: 7, offset: 91864},
										run: (*parser).callonDoubleQuoteMarkedTextElement186,
										expr: &litMatcher{
											pos:        position{line: 2804, col: 7, offset: 91864},
											val:        "`'",
											ignoreCase: false,
											want:       "\"`'\"",
										},
									},
									&actionExpr{
										pos: position{line: 2810, col: 14, offset: 91986},
										run: (*parser).callonDoubleQuoteMarkedTextElement188,
										expr: &litMatcher{
											pos:        position{line: 2810, col: 14, offset: 91986},
											val:        "(C)",
											ignoreCase: false,
											want:       "\"(C)\"",
										},
									},
									&actionExpr{
										pos: position{line: 2814, col: 14, offset: 92052},
										run: (*parser).callonDoubleQuoteMarkedTextElement190,
										expr: &litMatcher{
											pos:        position{line: 2814, col: 14, offset: 92052},
											val:        "(TM)",
											ignoreCase: false,
											want:       "\"(TM)\"",
										},
									},
									&actionExpr{
										pos: position{line: 2818, col: 15, offset: 92121},
										run: (*parser).callonDoubleQuoteMarkedTextElement192,
										expr: &litMatcher{
											pos:        position{line: 2818, col: 15, offset: 92121},
											val:        "(R)",
											ignoreCase: false,
											want:       "\"(R)\"",
										},
									},
									&actionExpr{
										pos: position{line: 2822, col: 13, offset: 92186},
										run: (*parser).callonDoubleQuoteMarkedTextElement194,
										expr: &litMatcher{
											pos:        position{line: 2822, col: 13, offset: 92186},
											val:        "...",
											ignoreCase: false,
											want:       "\"...\"",
										},
									},
									&actionExpr{
										pos: position{line: 2833, col: 5, offset: 92496},
										run: (*parser).callonDoubleQuoteMarkedTextElement196,
										expr: &seqExpr{
											pos: position{line: 2833, col: 5, offset: 92496},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 2994, col: 13, offset: 97463},
													val:        "[0-9\\pL]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 2833, col: 14, offset: 92505},
													val:        "\\'",
													ignoreCase: false,
													want:       "\"\\\\'\"",
												},
												&andExpr{
													pos: position{line: 2833, col: 19, offset: 92510},
													expr: &charClassMatcher{
														pos:        position{line: 2833, col: 20, offset: 92511},
														val:        "[\\pL]",
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2839, col: 5, offset: 92742},
										run: (*parser).callonDoubleQuoteMarkedTextElement202,
										expr: &seqExpr{
											pos: position{line: 2839, col: 5, offset: 92742},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 2994, col: 13, offset: 97463},
													val:        "[0-9\\pL]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 2839, col: 14, offset: 92751},
													val:        "'",
													ignoreCase: false,
													want:       "\"'\"",
												},
												&andExpr{
													pos: position{line: 2839, col: 18, offset: 92755},
													expr: &charClassMatcher{
														pos:        position{line: 2839, col: 19, offset: 92756},
														val:        "[\\pL]",
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2446, col: 11, offset: 80572},
										name: "QuotedTextInDoubleMarkedBoldText",
									},
									&actionExpr{
										pos: position{line: 1219, col: 23, offset: 38141},
										run: (*parser).callonDoubleQuoteMarkedTextElement209,
										expr: &seqExpr{
											pos: position{line: 1219, col: 23, offset: 38141},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1217, col: 32, offset: 38109},
													val:        "�",
													ignoreCase: false,
													want:       "\"�\"",
												},
												&labeledExpr{
													pos:   position{line: 1219, col: 51, offset: 38169},
													label: "ref",
													expr: &actionExpr{
														pos: position{line: 1219, col: 56, offset: 38174},
														run: (*parser).callonDoubleQuoteMarkedTextElement213,
														expr: &oneOrMoreExpr{
															pos: position{line: 1219, col: 56, offset: 38174},
															expr: &charClassMatcher{
																pos:        position{line: 1219, col: 56, offset: 38174},
																val:        "[0-9]",
																ranges:     []rune{'0', '9'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1217, col: 32, offset: 38109},
													val:        "�",
													ignoreCase: false,
													want:       "\"�\"",
												},
											},
										},
									},
									&charClassMatcher{
										pos:        position{line: 2479, col: 5, offset: 81356},
										val:        "[^\\r\\n#]",
										chars:      []rune{'\r', '\n', '#'},
										ignoreCase: false,
										inverted:   true,
									},
									&actionExpr{
										pos: position{line: 2480, col: 7, offset: 81455},
										run: (*parser).callonDoubleQuoteMarkedTextElement218,
										expr: &seqExpr{
											pos: position{line: 2480, col: 7, offset: 81455},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 2425, col: 35, offset: 79859},
													val:        "##",
													ignoreCase: false,
													want:       "\"##\"",
												},
												&actionExpr{
													pos: position{line: 2998, col: 14, offset: 97537},
													run: (*parser).callonDoubleQuoteMarkedTextElement221,
													expr: &oneOrMoreExpr{
														pos: position{line: 2998, col: 14, offset: 97537},
														expr: &charClassMatcher{
															pos:        position{line: 2998, col: 14, offset: 97537},
															val:        "[0-9\\pL]",
															ranges:     []rune{'0', '9'},
															classes:    []*unicode.RangeTable{rangeTable("L")},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInDoubleMarkedBoldText",
			pos:  position{line: 2453, col: 1, offset: 80726},
			expr: &choiceExpr{
				pos: position{line: 2455, col: 5, offset: 80789},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2455, col: 5, offset: 80789},
						run: (*parser).callonQuotedTextInDoubleMarkedBoldText2,
						expr: &seqExpr{
							pos: position{line: 2455, col: 5, offset: 80789},
							exprs: []interface{}{
								&andExpr{
									pos: position{line: 2455, col: 5, offset: 80789},
									expr: &litMatcher{
										pos:        position{line: 2455, col: 7, offset: 80791},
										val:        "\\",
										ignoreCase: false,
										want:       "\"\\\\\"",
									},
								},
								&labeledExpr{
									pos:   position{line: 2456, col: 5, offset: 80800},
									label: "element",
									expr: &choiceExpr{
										pos: position{line: 2457, col: 9, offset: 80818},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 2457, col: 9, offset: 80818},
												name: "EscapedBoldText",
											},
											&ruleRefExpr{
												pos:  position{line: 2458, col: 11, offset: 80845},
												name: "EscapedItalicText",
											},
											&ruleRefExpr{
												pos:  position{line: 2459, col: 11, offset: 80873},
												name: "EscapedMonospaceText",
											},
											&ruleRefExpr{
												pos:  position{line: 2460, col: 11, offset: 80904},
												name: "EscapedSubscriptText",
											},
											&ruleRefExpr{
												pos:  position{line: 2461, col: 11, offset: 80935},
												name: "EscapedSuperscriptText",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2467, col: 5, offset: 81035},
						run: (*parser).callonQuotedTextInDoubleMarkedBoldText13,
						expr: &seqExpr{
							pos: position{line: 2467, col: 5, offset: 81035},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 2467, col: 5, offset: 81035},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 2467, col: 16, offset: 81046},
										expr: &ruleRefExpr{
											pos:  position{line: 2467, col: 17, offset: 81047},
											name: "LongHandAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2468, col: 5, offset: 81073},
									label: "text",
									expr: &choiceExpr{
										pos: position{line: 2469, col: 9, offset: 81088},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 2469, col: 9, offset: 81088},
												name: "SingleQuoteMarkedText",
											},
											&ruleRefExpr{
												pos:  position{line: 2470, col: 11, offset: 81120},
												name: "BoldText",
											},
											&ruleRefExpr{
												pos:  position{line: 2471, col: 11, offset: 81139},
												name: "ItalicText",
											},
											&ruleRefExpr{
												pos:  position{line: 2472, col: 11, offset: 81160},
												name: "MonospaceText",
											},
											&ruleRefExpr{
												pos:  position{line: 2473, col: 11, offset: 81184},
												name: "SubscriptText",
											},
											&ruleRefExpr{
												pos:  position{line: 2474, col: 11, offset: 81208},
												name: "SuperscriptText",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedText",
			pos:  position{line: 2491, col: 1, offset: 81862},
			expr: &actionExpr{
				pos: position{line: 2492, col: 5, offset: 81892},
				run: (*parser).callonSingleQuoteMarkedText1,
				expr: &seqExpr{
					pos: position{line: 2492, col: 5, offset: 81892},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2487, col: 40, offset: 81814},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&labeledExpr{
							pos:   position{line: 2493, col: 5, offset: 81932},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 2493, col: 15, offset: 81942},
								name: "SingleQuoteMarkedTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 2489, col: 38, offset: 81856},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElements",
			pos:  position{line: 2498, col: 1, offset: 82109},
			expr: &actionExpr{
				pos: position{line: 2499, col: 5, offset: 82147},
				run: (*parser).callonSingleQuoteMarkedTextElements1,
				expr: &seqExpr{
					pos: position{line: 2499, col: 5, offset: 82147},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2499, col: 5, offset: 82147},
							expr: &notExpr{
								pos: position{line: 3093, col: 8, offset: 100474},
								expr: &anyMatcher{
									line: 3093, col: 9, offset: 100475,
								},
							},
						},
						&notExpr{
							pos: position{line: 2499, col: 10, offset: 82152},
							expr: &actionExpr{
								pos: position{line: 3080, col: 10, offset: 100200},
								run: (*parser).callonSingleQuoteMarkedTextElements7,
								expr: &charClassMatcher{
									pos:        position{line: 3080, col: 11, offset: 100201},
									val:        "[ \\t]",
									chars:      []rune{' ', '\t'},
									ignoreCase: false,
									inverted:   false,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2500, col: 5, offset: 82191},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 2500, col: 14, offset: 82200},
								expr: &ruleRefExpr{
									pos:  position{line: 2500, col: 15, offset: 82201},
									name: "SingleQuoteMarkedTextElement",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 2501, col: 5, offset: 82237},
							run: (*parser).callonSingleQuoteMarkedTextElements12,
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElement",
			pos:  position{line: 2507, col: 1, offset: 82378},
			expr: &choiceExpr{
				pos: position{line: 2508, col: 5, offset: 82415},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2418, col: 5, offset: 79601},
						run: (*parser).callonSingleQuoteMarkedTextElement2,
						expr: &seqExpr{
							pos: position{line: 2418, col: 5, offset: 79601},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2418, col: 5, offset: 79601},
									expr: &charClassMatcher{
										pos:        position{line: 2418, col: 5, offset: 79601},
										val:        "[,?!;0-9\\pL]",
										chars:      []rune{',', '?', '!', ';'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 2418, col: 19, offset: 79615},
									expr: &choiceExpr{
										pos: position{line: 2418, col: 21, offset: 79617},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 3080, col: 10, offset: 100200},
												run: (*parser).callonSingleQuoteMarkedTextElement8,
												expr: &charClassMatcher{
													pos:        position{line: 3080, col: 11, offset: 100201},
													val:        "[ \\t]",
													chars:      []rune{' ', '\t'},
													ignoreCase: false,
													inverted:   false,
												},
											},
											&litMatcher{
												pos:        position{line: 2415, col: 24, offset: 79573},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 3084, col: 11, offset: 100267},
						run: (*parser).callonSingleQuoteMarkedTextElement11,
						expr: &oneOrMoreExpr{
							pos: position{line: 3084, col: 11, offset: 100267},
							expr: &charClassMatcher{
								pos:        position{line: 3084, col: 12, offset: 100268},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
					&seqExpr{
						pos: position{line: 2510, col: 7, offset: 82449},
						exprs: []interface{}{
							&actionExpr{
								pos: position{line: 3089, col: 12, offset: 100384},
								run: (*parser).callonSingleQuoteMarkedTextElement15,
								expr: &choiceExpr{
									pos: position{line: 3089, col: 13, offset: 100385},
									alternatives: []interface{}{
										&litMatcher{
											pos:        position{line: 3089, col: 13, offset: 100385},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
										&litMatcher{
											pos:        position{line: 3089, col: 20, offset: 100392},
											val:        "\r\n",
											ignoreCase: false,
											want:       "\"\\r\\n\"",
										},
										&litMatcher{
											pos:        position{line: 3089, col: 29, offset: 100401},
											val:        "\r",
											ignoreCase: false,
											want:       "\"\\r\"",
										},
									},
								},
							},
							&notExpr{
								pos: position{line: 2510, col: 15, offset: 82457},
								expr: &actionExpr{
									pos: position{line: 3089, col: 12, offset: 100384},
									run: (*parser).callonSingleQuoteMarkedTextElement21,
									expr: &choiceExpr{
										pos: position{line: 3089, col: 13, offset: 100385},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 3089, col: 13, offset: 100385},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
											&litMatcher{
												pos:        position{line: 3089, col: 20, offset: 100392},
												val:        "\r\n",
												ignoreCase: false,
												want:       "\"\\r\\n\"",
											},
											&litMatcher{
												pos:        position{line: 3089, col: 29, offset: 100401},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 648, col: 5, offset: 20883},
						run: (*parser).callonSingleQuoteMarkedTextElement26,
						expr: &seqExpr{
							pos: position{line: 648, col: 5, offset: 20883},
							exprs: []interface{}{
								&andCodeExpr{
									pos: position{line: 648, col: 5, offset: 20883},
									run: (*parser).callonSingleQuoteMarkedTextElement28,
								},
								&labeledExpr{
									pos:   position{line: 651, col: 5, offset: 20952},
									label: "element",
									expr: &choiceExpr{
										pos: position{line: 651, col: 14, offset: 20961},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 671, col: 25, offset: 21614},
												run: (*parser).callonSingleQuoteMarkedTextElement31,
												expr: &seqExpr{
													pos: position{line: 671, col: 25, offset: 21614},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 671, col: 25, offset: 21614},
															val:        "{counter:",
															ignoreCase: false,
															want:       "\"{counter:\"",
														},
														&labeledExpr{
															pos:   position{line: 671, col: 37, offset: 21626},
															label: "name",
															expr: &actionExpr{
																pos: position{line: 324, col: 18, offset: 10072},
																run: (*parser).callonSingleQuoteMarkedTextElement35,
																expr: &seqExpr{
																	pos: position{line: 324, col: 18, offset: 10072},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 324, col: 18, offset: 10072},
																			val:        "[_0-9\\pL]",
																			chars:      []rune{'_'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 324, col: 28, offset: 10082},
																			expr: &charClassMatcher{
																				pos:        position{line: 324, col: 29, offset: 10083},
																				val:        "[-0-9\\pL]",
																				chars:      []rune{'-'},
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 671, col: 56, offset: 21645},
															label: "start",
															expr: &zeroOrOneExpr{
																pos: position{line: 671, col: 62, offset: 21651},
																expr: &actionExpr{
																	pos: position{line: 679, col: 17, offset: 21946},
																	run: (*parser).callonSingleQuoteMarkedTextElement42,
																	expr: &seqExpr{
																		pos: position{line: 679, col: 17, offset: 21946},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 679, col: 17, offset: 21946},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 679, col: 21, offset: 21950},
																				label: "start",
																				expr: &choiceExpr{
																					pos: position{line: 679, col: 28, offset: 21957},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 679, col: 28, offset: 21957},
																							run: (*parser).callonSingleQuoteMarkedTextElement47,
																							expr: &charClassMatcher{
																								pos:        position{line: 679, col: 28, offset: 21957},
																								val:        "[A-Za-z]",
																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&actionExpr{
																							pos: position{line: 681, col: 9, offset: 22011},
																							run: (*parser).callonSingleQuoteMarkedTextElement49,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 681, col: 9, offset: 22011},
																								expr: &charClassMatcher{
																									pos:        position{line: 681, col: 9, offset: 22011},
																									val:        "[0-9]",
																									ranges:     []rune{'0', '9'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 671, col: 78, offset: 21667},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 675, col: 25, offset: 21785},
												run: (*parser).callonSingleQuoteMarkedTextElement53,
												expr: &seqExpr{
													pos: position{line: 675, col: 25, offset: 21785},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 675, col: 25, offset: 21785},
															val:        "{counter2:",
															ignoreCase: false,
															want:       "\"{counter2:\"",
														},
														&labeledExpr{
															pos:   position{line: 675, col: 38, offset: 21798},
															label: "name",
															expr: &actionExpr{
																pos: position{line: 324, col: 18, offset: 10072},
																run: (*parser).callonSingleQuoteMarkedTextElement57,
																expr: &seqExpr{
																	pos: position{line: 324, col: 18, offset: 10072},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 324, col: 18, offset: 10072},
																			val:        "[_0-9\\pL]",
																			chars:      []rune{'_'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 324, col: 28, offset: 10082},
																			expr: &charClassMatcher{
																				pos:        position{line: 324, col: 29, offset: 10083},
																				val:        "[-0-9\\pL]",
																				chars:      []rune{'-'},
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&labeledExpr{
															pos:   position{line: 675, col: 57, offset: 21817},
															label: "start",
															expr: &zeroOrOneExpr{
																pos: position{line: 675, col: 63, offset: 21823},
																expr: &actionExpr{
																	pos: position{line: 679, col: 17, offset: 21946},
																	run: (*parser).callonSingleQuoteMarkedTextElement64,
																	expr: &seqExpr{
																		pos: position{line: 679, col: 17, offset: 21946},
																		exprs: []interface{}{
																			&litMatcher{
																				pos:        position{line: 679, col: 17, offset: 21946},
																				val:        ":",
																				ignoreCase: false,
																				want:       "\":\"",
																			},
																			&labeledExpr{
																				pos:   position{line: 679, col: 21, offset: 21950},
																				label: "start",
																				expr: &choiceExpr{
																					pos: position{line: 679, col: 28, offset: 21957},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 679, col: 28, offset: 21957},
																							run: (*parser).callonSingleQuoteMarkedTextElement69,
																							expr: &charClassMatcher{
																								pos:        position{line: 679, col: 28, offset: 21957},
																								val:        "[A-Za-z]",
																								ranges:     []rune{'A', 'Z', 'a', 'z'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																						&actionExpr{
																							pos: position{line: 681, col: 9, offset: 22011},
																							run: (*parser).callonSingleQuoteMarkedTextElement71,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 681, col: 9, offset: 22011},
																								expr: &charClassMatcher{
																									pos:        position{line: 681, col: 9, offset: 22011},
																									val:        "[0-9]",
																									ranges:     []rune{'0', '9'},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 675, col: 79, offset: 21839},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 657, col: 5, offset: 21090},
												run: (*parser).callonSingleQuoteMarkedTextElement75,
												expr: &seqExpr{
													pos: position{line: 657, col: 5, offset: 21090},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 657, col: 5, offset: 21090},
															val:        "\\{",
															ignoreCase: false,
															want:       "\"\\\\{\"",
														},
														&labeledExpr{
															pos:   position{line: 657, col: 13, offset: 21098},
															label: "name",
															expr: &actionExpr{
																pos: position{line: 324, col: 18, offset: 10072},
																run: (*parser).callonSingleQuoteMarkedTextElement79,
																expr: &seqExpr{
																	pos: position{line: 324, col: 18, offset: 10072},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 324, col: 18, offset: 10072},
																			val:        "[_0-9\\pL]",
																			chars:      []rune{'_'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 324, col: 28, offset: 10082},
																			expr: &charClassMatcher{
																				pos:        position{line: 324, col: 29, offset: 10083},
																				val:        "[-0-9\\pL]",
																				chars:      []rune{'-'},
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 657, col: 32, offset: 21117},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 664, col: 5, offset: 21358},
												run: (*parser).callonSingleQuoteMarkedTextElement85,
												expr: &seqExpr{
													pos: position{line: 664, col: 5, offset: 21358},
													exprs: []interface{}{
														&litMatcher{
															pos:        position{line: 664, col: 5, offset: 21358},
															val:        "{",
															ignoreCase: false,
															want:       "\"{\"",
														},
														&labeledExpr{
															pos:   position{line: 664, col: 9, offset: 21362},
															label: "name",
															expr: &actionExpr{
																pos: position{line: 324, col: 18, offset: 10072},
																run: (*parser).callonSingleQuoteMarkedTextElement89,
																expr: &seqExpr{
																	pos: position{line: 324, col: 18, offset: 10072},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 324, col: 18, offset: 10072},
																			val:        "[_0-9\\pL]",
																			chars:      []rune{'_'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 324, col: 28, offset: 10082},
																			expr: &charClassMatcher{
																				pos:        position{line: 324, col: 29, offset: 10083},
																				val:        "[-0-9\\pL]",
																				chars:      []rune{'-'},
																				ranges:     []rune{'0', '9'},
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
														&litMatcher{
															pos:        position{line: 664, col: 28, offset: 21381},
															val:        "}",
															ignoreCase: false,
															want:       "\"}\"",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2512, col: 7, offset: 82531},
						name: "InlineMacro",
					},
					&actionExpr{
						pos: position{line: 2753, col: 5, offset: 90225},
						run: (*parser).callonSingleQuoteMarkedTextElement96,
						expr: &seqExpr{
							pos: position{line: 2753, col: 5, offset: 90225},
							exprs: []interface{}{
								&andCodeExpr{
									pos: position{line: 2753, col: 5, offset: 90225},
									run: (*parser).callonSingleQuoteMarkedTextElement98,
								},
								&labeledExpr{
									pos:   position{line: 2756, col: 5, offset: 90301},
									label: "element",
									expr: &choiceExpr{
										pos: position{line: 2758, col: 9, offset: 90399},
										alternatives: []interface{}{
											&actionExpr{
												pos: position{line: 2758, col: 9, offset: 90399},
												run: (*parser).callonSingleQuoteMarkedTextElement101,
												expr: &choiceExpr{
													pos: position{line: 699, col: 27, offset: 22665},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 699, col: 27, offset: 22665},
															run: (*parser).callonSingleQuoteMarkedTextElement103,
															expr: &seqExpr{
																pos: position{line: 699, col: 27, offset: 22665},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 699, col: 27, offset: 22665},
																		val:        "<<",
																		ignoreCase: false,
																		want:       "\"<<\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 699, col: 32, offset: 22670},
																		label: "id",
																		expr: &actionExpr{
																			pos: position{line: 3065, col: 7, offset: 99852},
																			run: (*parser).callonSingleQuoteMarkedTextElement107,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 3065, col: 7, offset: 99852},
																				expr: &charClassMatcher{
																					pos:        position{line: 3065, col: 7, offset: 99852},
																					val:        "[^[]<>,]",
																					chars:      []rune{'[', ']', '<', '>', ','},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 699, col: 40, offset: 22678},
																		expr: &actionExpr{
																			pos: position{line: 3080, col: 10, offset: 100200},
																			run: (*parser).callonSingleQuoteMarkedTextElement111,
																			expr: &charClassMatcher{
																				pos:        position{line: 3080, col: 11, offset: 100201},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 699, col: 47, offset: 22685},
																		val:        ",",
																		ignoreCase: false,
																		want:       "\",\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 699, col: 51, offset: 22689},
																		label: "label",
																		expr: &oneOrMoreExpr{
																			pos: position{line: 709, col: 24, offset: 23090},
																			expr: &choiceExpr{
																				pos: position{line: 710, col: 5, offset: 23096},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 710, col: 6, offset: 23097},
																						run: (*parser).callonSingleQuoteMarkedTextElement117,
																						expr: &seqExpr{
																							pos: position{line: 710, col: 6, offset: 23097},
																							exprs: []interface{}{
																								&charClassMatcher{
																									pos:        position{line: 710, col: 6, offset: 23097},
																									val:        "[0-9\\pL]",
																									ranges:     []rune{'0', '9'},
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																								&oneOrMoreExpr{
																									pos: position{line: 710, col: 14, offset: 23105},
																									expr: &charClassMatcher{
																										pos:        position{line: 710, col: 14, offset: 23105},
																										val:        "[^\\r\\n{<>]",
																										chars:      []rune{'\r', '\n', '{', '<', '>'},
																										ignoreCase: false,
																										inverted:   true,
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 657, col: 5, offset: 21090},
																						run: (*parser).callonSingleQuoteMarkedTextElement122,
																						expr: &seqExpr{
																							pos: position{line: 657, col: 5, offset: 21090},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 657, col: 5, offset: 21090},
																									val:        "\\{",
																									ignoreCase: false,
																									want:       "\"\\\\{\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 657, col: 13, offset: 21098},
																									label: "name",
																									expr: &actionExpr{
																										pos: position{line: 324, col: 18, offset: 10072},
																										run: (*parser).callonSingleQuoteMarkedTextElement126,
																										expr: &seqExpr{
																											pos: position{line: 324, col: 18, offset: 10072},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 324, col: 18, offset: 10072},
																													val:        "[_0-9\\pL]",
																													chars:      []rune{'_'},
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 324, col: 28, offset: 10082},
																													expr: &charClassMatcher{
																														pos:        position{line: 324, col: 29, offset: 10083},
																														val:        "[-0-9\\pL]",
																														chars:      []rune{'-'},
																														ranges:     []rune{'0', '9'},
																														classes:    []*unicode.RangeTable{rangeTable("L")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 657, col: 32, offset: 21117},
																									val:        "}",
																									ignoreCase: false,
																									want:       "\"}\"",
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 664, col: 5, offset: 21358},
																						run: (*parser).callonSingleQuoteMarkedTextElement132,
																						expr: &seqExpr{
																							pos: position{line: 664, col: 5, offset: 21358},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 664, col: 5, offset: 21358},
																									val:        "{",
																									ignoreCase: false,
																									want:       "\"{\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 664, col: 9, offset: 21362},
																									label: "name",
																									expr: &actionExpr{
																										pos: position{line: 324, col: 18, offset: 10072},
																										run: (*parser).callonSingleQuoteMarkedTextElement136,
																										expr: &seqExpr{
																											pos: position{line: 324, col: 18, offset: 10072},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 324, col: 18, offset: 10072},
																													val:        "[_0-9\\pL]",
																													chars:      []rune{'_'},
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 324, col: 28, offset: 10082},
																													expr: &charClassMatcher{
																														pos:        position{line: 324, col: 29, offset: 10083},
																														val:        "[-0-9\\pL]",
																														chars:      []rune{'-'},
																														ranges:     []rune{'0', '9'},
																														classes:    []*unicode.RangeTable{rangeTable("L")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 664, col: 28, offset: 21381},
																									val:        "}",
																									ignoreCase: false,
																									want:       "\"}\"",
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 714, col: 8, offset: 23331},
																						run: (*parser).callonSingleQuoteMarkedTextElement142,
																						expr: &litMatcher{
																							pos:        position{line: 714, col: 8, offset: 23331},
																							val:        "{",
																							ignoreCase: false,
																							want:       "\"{\"",
																						},
																					},
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 699, col: 79, offset: 22717},
																		val:        ">>",
																		ignoreCase: false,
																		want:       "\">>\"",
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 701, col: 9, offset: 22790},
															run: (*parser).callonSingleQuoteMarkedTextElement145,
															expr: &seqExpr{
																pos: position{line: 701, col: 9, offset: 22790},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 701, col: 9, offset: 22790},
																		val:        "<<",
																		ignoreCase: false,
																		want:       "\"<<\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 701, col: 14, offset: 22795},
																		label: "id",
																		expr: &actionExpr{
																			pos: position{line: 3065, col: 7, offset: 99852},
																			run: (*parser).callonSingleQuoteMarkedTextElement149,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 3065, col: 7, offset: 99852},
																				expr: &charClassMatcher{
																					pos:        position{line: 3065, col: 7, offset: 99852},
																					val:        "[^[]<>,]",
																					chars:      []rune{'[', ']', '<', '>', ','},
																					ignoreCase: false,
																					inverted:   true,
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 701, col: 22, offset: 22803},
																		val:        ">>",
																		ignoreCase: false,
																		want:       "\">>\"",
																	},
																},
															},
														},
													},
												},
											},
											&actionExpr{
												pos: position{line: 2761, col: 11, offset: 90503},
												run: (*parser).callonSingleQuoteMarkedTextElement153,
												expr: &charClassMatcher{
													pos:        position{line: 2761, col: 12, offset: 90504},
													val:        "[<>&]",
													chars:      []rune{'<', '>', '&'},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2786, col: 5, offset: 91397},
						run: (*parser).callonSingleQuoteMarkedTextElement155,
						expr: &seqExpr{
							pos: position{line: 2786, col: 5, offset: 91397},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2786, col: 5, offset: 91397},
									val:        "\\",
									ignoreCase: false,
									want:       "\"\\\\\"",
								},
								&choiceExpr{
									pos: position{line: 2786, col: 10, offset: 91402},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 2795, col: 5, offset: 91692},
											run: (*parser).callonSingleQuoteMarkedTextElement159,
											expr: &litMatcher{
												pos:        position{line: 2795, col: 5, offset: 91692},
												val:        "\"`",
												ignoreCase: false,
												want:       "\"\\\"`\"",
											},
										},
										&actionExpr{
											pos: position{line: 2798, col: 7, offset: 91750},
											run: (*parser).callonSingleQuoteMarkedTextElement161,
											expr: &litMatcher{
												pos:        position{line: 2798, col: 7, offset: 91750},
												val:        "`\"",
												ignoreCase: false,
												want:       "\"`\\\"\"",
											},
										},
										&actionExpr{
											pos: position{line: 2801, col: 7, offset: 91808},
											run: (*parser).callonSingleQuoteMarkedTextElement163,
											expr: &litMatcher{
												pos:        position{line: 2801, col: 7, offset: 91808},
												val:        "'`",
												ignoreCase: false,
												want:       "\"'`\"",
											},
										},
										&actionExpr{
											pos: position{line: 2804, col: 7, offset: 91864},
											run: (*parser).callonSingleQuoteMarkedTextElement165,
											expr: &litMatcher{
												pos:        position{line: 2804, col: 7, offset: 91864},
												val:        "`'",
												ignoreCase: false,
												want:       "\"`'\"",
											},
										},
										&actionExpr{
											pos: position{line: 2810, col: 14, offset: 91986},
											run: (*parser).callonSingleQuoteMarkedTextElement167,
											expr: &litMatcher{
												pos:        position{line: 2810, col: 14, offset: 91986},
												val:        "(C)",
												ignoreCase: false,
												want:       "\"(C)\"",
											},
										},
										&actionExpr{
											pos: position{line: 2814, col: 14, offset: 92052},
											run: (*parser).callonSingleQuoteMarkedTextElement169,
											expr: &litMatcher{
												pos:        position{line: 2814, col: 14, offset: 92052},
												val:        "(TM)",
												ignoreCase: false,
												want:       "\"(TM)\"",
											},
										},
										&actionExpr{
											pos: position{line: 2818, col: 15, offset: 92121},
											run: (*parser).callonSingleQuoteMarkedTextElement171,
											expr: &litMatcher{
												pos:        position{line: 2818, col: 15, offset: 92121},
												val:        "(R)",
												ignoreCase: false,
												want:       "\"(R)\"",
											},
										},
										&actionExpr{
											pos: position{line: 2822, col: 13, offset: 92186},
											run: (*parser).callonSingleQuoteMarkedTextElement173,
											expr: &litMatcher{
												pos:        position{line: 2822, col: 13, offset: 92186},
												val:        "...",
												ignoreCase: false,
												want:       "\"...\"",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2795, col: 5, offset: 91692},
						run: (*parser).callonSingleQuoteMarkedTextElement175,
						expr: &litMatcher{
							pos:        position{line: 2795, col: 5, offset: 91692},
							val:        "\"`",
							ignoreCase: false,
							want:       "\"\\\"`\"",
						},
					},
					&actionExpr{
						pos: position{line: 2798, col: 7, offset: 91750},
						run: (*parser).callonSingleQuoteMarkedTextElement177,
						expr: &litMatcher{
							pos:        position{line: 2798, col: 7, offset: 91750},
							val:        "`\"",
							ignoreCase: false,
							want:       "\"`\\\"\"",
						},
					},
					&actionExpr{
						pos: position{line: 2801, col: 7, offset: 91808},
						run: (*parser).callonSingleQuoteMarkedTextElement179,
						expr: &litMatcher{
							pos:        position{line: 2801, col: 7, offset: 91808},
							val:        "'`",
							ignoreCase: false,
							want:       "\"'`\"",
						},
					},
					&actionExpr{
						pos: position{line: 2804, col: 7, offset: 91864},
						run: (*parser).callonSingleQuoteMarkedTextElement181,
						expr: &litMatcher{
							pos:        position{line: 2804, col: 7, offset: 91864},
							val:        "`'",
							ignoreCase: false,
							want:       "\"`'\"",
						},
					},
					&actionExpr{
						pos: position{line: 2810, col: 14, offset: 91986},
						run: (*parser).callonSingleQuoteMarkedTextElement183,
						expr: &litMatcher{
							pos:        position{line: 2810, col: 14, offset: 91986},
							val:        "(C)",
							ignoreCase: false,
							want:       "\"(C)\"",
						},
					},
					&actionExpr{
						pos: position{line: 2814, col: 14, offset: 92052},
						run: (*parser).callonSingleQuoteMarkedTextElement185,
						expr: &litMatcher{
							pos:        position{line: 2814, col: 14, offset: 92052},
							val:        "(TM)",
							ignoreCase: false,
							want:       "\"(TM)\"",
						},
					},
					&actionExpr{
						pos: position{line: 2818, col: 15, offset: 92121},
						run: (*parser).callonSingleQuoteMarkedTextElement187,
						expr: &litMatcher{
							pos:        position{line: 2818, col: 15, offset: 92121},
							val:        "(R)",
							ignoreCase: false,
							want:       "\"(R)\"",
						},
					},
					&actionExpr{
						pos: position{line: 2822, col: 13, offset: 92186},
						run: (*parser).callonSingleQuoteMarkedTextElement189,
						expr: &litMatcher{
							pos:        position{line: 2822, col: 13, offset: 92186},
							val:        "...",
							ignoreCase: false,
							want:       "\"...\"",
						},
					},
					&actionExpr{
						pos: position{line: 2833, col: 5, offset: 92496},
						run: (*parser).callonSingleQuoteMarkedTextElement191,
						expr: &seqExpr{
							pos: position{line: 2833, col: 5, offset: 92496},
							exprs: []interface{}{
								&charClassMatcher{
									pos:        position{line: 2994, col: 13, offset: 97463},
									val:        "[0-9\\pL]",
									ranges:     []rune{'0', '9'},
									classes:    []*unicode.RangeTable{rangeTable("L")},
									ignoreCase: false,
									inverted:   false,
								},
								&litMatcher{
									pos:        position{line: 2833, col: 14, offset: 92505},
									val:        "\\'",
									ignoreCase: false,
									want:       "\"\\\\'\"",
								},
								&andExpr{
									pos: position{line: 2833, col: 19, offset: 92510},
									expr: &charClassMatcher{
										pos:        position{line: 2833, col: 20, offset: 92511},
										val:        "[\\pL]",
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2839, col: 5, offset: 92742},
						run: (*parser).callonSingleQuoteMarkedTextElement197,
						expr: &seqExpr{
							pos: position{line: 2839, col: 5, offset: 92742},
							exprs: []interface{}{
								&charClassMatcher{
									pos:        position{line: 2994, col: 13, offset: 97463},
									val:        "[0-9\\pL]",
									ranges:     []rune{'0', '9'},
									classes:    []*unicode.RangeTable{rangeTable("L")},
									ignoreCase: false,
									inverted:   false,
								},
								&litMatcher{
									pos:        position{line: 2839, col: 14, offset: 92751},
									val:        "'",
									ignoreCase: false,
									want:       "\"'\"",
								},
								&andExpr{
									pos: position{line: 2839, col: 18, offset: 92755},
									expr: &charClassMatcher{
										pos:        position{line: 2839, col: 19, offset: 92756},
										val:        "[\\pL]",
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2515, col: 7, offset: 82635},
						name: "QuotedTextInSingleQuoteMarkedText",
					},
					&actionExpr{
						pos: position{line: 1219, col: 23, offset: 38141},
						run: (*parser).callonSingleQuoteMarkedTextElement204,
						expr: &seqExpr{
							pos: position{line: 1219, col: 23, offset: 38141},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1217, col: 32, offset: 38109},
									val:        "�",
									ignoreCase: false,
									want:       "\"�\"",
								},
								&labeledExpr{
									pos:   position{line: 1219, col: 51, offset: 38169},
									label: "ref",
									expr: &actionExpr{
										pos: position{line: 1219, col: 56, offset: 38174},
										run: (*parser).callonSingleQuoteMarkedTextElement208,
										expr: &oneOrMoreExpr{
											pos: position{line: 1219, col: 56, offset: 38174},
											expr: &charClassMatcher{
												pos:        position{line: 1219, col: 56, offset: 38174},
												val:        "[0-9]",
												ranges:     []rune{'0', '9'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1217, col: 32, offset: 38109},
									val:        "�",
									ignoreCase: false,
									want:       "\"�\"",
								},
							},
						},
					},
					&charClassMatcher{
						pos:        position{line: 2545, col: 5, offset: 83371},
						val:        "[^\\r\\n #]",
						chars:      []rune{'\r', '\n', ' ', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 2546, col: 7, offset: 83476},
						run: (*parser).callonSingleQuoteMarkedTextElement213,
						expr: &seqExpr{
							pos: position{line: 2546, col: 7, offset: 83476},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 2546, col: 7, offset: 83476},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&actionExpr{
									pos: position{line: 2998, col: 14, offset: 97537},
									run: (*parser).callonSingleQuoteMarkedTextElement216,
									expr: &oneOrMoreExpr{
										pos: position{line: 2998, col: 14, offset: 97537},
										expr: &charClassMatcher{
											pos:        position{line: 2998, col: 14, offset: 97537},
											val:        "[0-9\\pL]",
											ranges:     []rune{'0', '9'},
											classes:    []*unicode.RangeTable{rangeTable("L")},
											ignoreCase: false,
											inverted:   false,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextInSingleQuoteMarkedText",
			pos:  position{line: 2519, col: 1, offset: 82740},
			expr: &choiceExpr{
				pos: position{line: 2521, col: 5, offset: 82804},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2521, col: 5, offset: 82804},
						run: (*parser).callonQuotedTextInSingleQuoteMarkedText2,
						expr: &seqExpr{
							pos: position{line: 2521, col: 5, offset: 82804},
							exprs: []interface{}{
								&andExpr{
									pos: position{line: 2521, col: 5, offset: 82804},
									expr: &litMatcher{
										pos:        position{line: 2521, col: 7, offset: 82806},
										val:        "\\",
										ignoreCase: false,
										want:       "\"\\\\\"",
									},
								},
								&labeledExpr{
									pos:   position{line: 2522, col: 5, offset: 82815},
									label: "element",
									expr: &choiceExpr{
										pos: position{line: 2523, col: 9, offset: 82833},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 2523, col: 9, offset: 82833},
												name: "EscapedBoldText",
											},
											&ruleRefExpr{
												pos:  position{line: 2524, col: 11, offset: 82860},
												name: "EscapedItalicText",
											},
											&ruleRefExpr{
												pos:  position{line: 2525, col: 11, offset: 82888},
												name: "EscapedMonospaceText",
											},
											&ruleRefExpr{
												pos:  position{line: 2526, col: 11, offset: 82919},
												name: "EscapedSubscriptText",
											},
											&ruleRefExpr{
												pos:  position{line: 2527, col: 11, offset: 82950},
												name: "EscapedSuperscriptText",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2533, col: 5, offset: 83050},
						run: (*parser).callonQuotedTextInSingleQuoteMarkedText13,
						expr: &seqExpr{
							pos: position{line: 2533, col: 5, offset: 83050},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 2533, col: 5, offset: 83050},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 2533, col: 16, offset: 83061},
										expr: &ruleRefExpr{
											pos:  position{line: 2533, col: 17, offset: 83062},
											name: "LongHandAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 2534, col: 5, offset: 83088},
									label: "text",
									expr: &choiceExpr{
										pos: position{line: 2535, col: 9, offset: 83103},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 2535, col: 9, offset: 83103},
												name: "DoubleQuoteMarkedText",
											},
											&ruleRefExpr{
												pos:  position{line: 2536, col: 11, offset: 83135},
												name: "BoldText",
											},
											&ruleRefExpr{
												pos:  position{line: 2537, col: 11, offset: 83154},
												name: "ItalicText",
											},
											&ruleRefExpr{
												pos:  position{line: 2538, col: 11, offset: 83175},
												name: "MonospaceText",
											},
											&ruleRefExpr{
												pos:  position{line: 2539, col: 11, offset: 83199},
												name: "SubscriptText",
											},
											&ruleRefExpr{
												pos:  position{line: 2540, col: 11, offset: 83223},
												name: "SuperscriptText",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMarkedText",
			pos:  position{line: 2550, col: 1, offset: 83651},
			expr: &choiceExpr{
				pos: position{line: 2552, col: 5, offset: 83715},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2552, col: 5, offset: 83715},
						run: (*parser).callonEscapedMarkedText2,
						expr: &seqExpr{
							pos: position{line: 2552, col: 5, offset: 83715},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 2552, col: 5, offset: 83715},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1954, col: 25, offset: 64015},
										run: (*parser).callonEscapedMarkedText5,
										expr: &seqExpr{
											pos: position{line: 1954, col: 25, offset: 64015},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1954, col: 25, offset: 64015},
													val:        "\\\\",
													ignoreCase: false,
													want:       "\"\\\\\\\\\"",
												},
												&zeroOrMoreExpr{
													pos: position{line: 1954, col: 30, offset: 64020},
													expr: &litMatcher{
														pos:        position{line: 1954, col: 30, offset: 64020},
														val:        "\\",
														ignoreCase: false,
														want:       "\"\\\\\"",
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 2552, col: 40, offset: 83750},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 2552, col: 45, offset: 83755},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 2552, col: 55, offset: 83765},
										name: "DoubleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 2552, col: 86, offset: 83796},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2556, col: 7, offset: 83961},
						run: (*parser).callonEscapedMarkedText14,
						expr: &seqExpr{
							pos: position{line: 2556, col: 7, offset: 83961},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 2556, col: 7, offset: 83961},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1950, col: 25, offset: 63942},
										run: (*parser).callonEscapedMarkedText17,
										expr: &oneOrMoreExpr{
											pos: position{line: 1950, col: 25, offset: 63942},
											expr: &litMatcher{
												pos:        position{line: 1950, col: 25, offset: 63942},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 2556, col: 42, offset: 83996},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 2556, col: 47, offset: 84001},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 2556, col: 57, offset: 84011},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 2556, col: 88, offset: 84042},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2561, col: 7, offset: 84245},
						run: (*parser).callonEscapedMarkedText24,
						expr: &seqExpr{
							pos: position{line: 2561, col: 7, offset: 84245},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 2561, col: 7, offset: 84245},
									label: "backslashes",
									expr: &actionExpr{
										pos: position{line: 1950, col: 25, offset: 63942},
										run: (*parser).callonEscapedMarkedText27,
										expr: &oneOrMoreExpr{
											pos: position{line: 1950, col: 25, offset: 63942},
											expr: &litMatcher{
												pos:        position{line: 1950, col: 25, offset: 63942},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 2561, col: 42, offset: 84280},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 2561, col: 46, offset: 84284},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 2561, col: 56, offset: 84294},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 2561, col: 87, offset: 84325},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptText",
			pos:  position{line: 2568, col: 1, offset: 84592},
			expr: &actionExpr{
				pos: position{line: 2569, col: 5, offset: 84614},
				run: (*parser).callonSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 2569, col: 5, offset: 84614},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2575, col: 27, offset: 84829},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 2570, col: 5, offset: 84641},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 2570, col: 14, offset: 84650},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 2575, col: 27, offset: 84829},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SubscriptTextElement",
			pos:  position{line: 2577, col: 1, offset: 84834},
			expr: &choiceExpr{
				pos: position{line: 2577, col: 25, offset: 84858},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2577, col: 25, offset: 84858},
						name: "QuotedText",
					},
					&actionExpr{
						pos: position{line: 2579, col: 21, offset: 84910},
						run: (*parser).callonSubscriptTextElement3,
						expr: &oneOrMoreExpr{
							pos: position{line: 2579, col: 21, offset: 84910},
							expr: &charClassMatcher{
								pos:        position{line: 2579, col: 21, offset: 84910},
								val:        "[^\\r\\n ~]",
								chars:      []rune{'\r', '\n', ' ', '~'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedSubscriptText",
			pos:  position{line: 2583, col: 1, offset: 84995},
			expr: &actionExpr{
				pos: position{line: 2585, col: 5, offset: 85062},
				run: (*parser).callonEscapedSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 2585, col: 5, offset: 85062},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2585, col: 5, offset: 85062},
							label: "backslashes",
							expr: &actionExpr{
								pos: position{line: 1950, col: 25, offset: 63942},
								run: (*parser).callonEscapedSubscriptText4,
								expr: &oneOrMoreExpr{
									pos: position{line: 1950, col: 25, offset: 63942},
									expr: &litMatcher{
										pos:        position{line: 1950, col: 25, offset: 63942},
										val:        "\\",
										ignoreCase: false,
										want:       "\"\\\\\"",
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 2575, col: 27, offset: 84829},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 2587, col: 5, offset: 85130},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 2587, col: 14, offset: 85139},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 2575, col: 27, offset: 84829},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptText",
			pos:  position{line: 2595, col: 1, offset: 85402},
			expr: &actionExpr{
				pos: position{line: 2596, col: 5, offset: 85426},
				run: (*parser).callonSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 2596, col: 5, offset: 85426},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2602, col: 29, offset: 85653},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 2597, col: 5, offset: 85456},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 2597, col: 14, offset: 85465},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 2602, col: 29, offset: 85653},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptTextElement",
			pos:  position{line: 2604, col: 1, offset: 85658},
			expr: &choiceExpr{
				pos: position{line: 2604, col: 27, offset: 85684},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2604, col: 27, offset: 85684},
						name: "QuotedText",
					},
					&actionExpr{
						pos: position{line: 2606, col: 23, offset: 85740},
						run: (*parser).callonSuperscriptTextElement3,
						expr: &oneOrMoreExpr{
							pos: position{line: 2606, col: 23, offset: 85740},
							expr: &charClassMatcher{
								pos:        position{line: 2606, col: 23, offset: 85740},
								val:        "[^\\r\\n ^]",
								chars:      []rune{'\r', '\n', ' ', '^'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedSuperscriptText",
			pos:  position{line: 2610, col: 1, offset: 85825},
			expr: &actionExpr{
				pos: position{line: 2612, col: 5, offset: 85897},
				run: (*parser).callonEscapedSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 2612, col: 5, offset: 85897},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2612, col: 5, offset: 85897},
							label: "backslashes",
							expr: &actionExpr{
								pos: position{line: 1950, col: 25, offset: 63942},
								run: (*parser).callonEscapedSuperscriptText4,
								expr: &oneOrMoreExpr{
									pos: position{line: 1950, col: 25, offset: 63942},
									expr: &litMatcher{
										pos:        position{line: 1950, col: 25, offset: 63942},
										val:        "\\",
										ignoreCase: false,
										want:       "\"\\\\\"",
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 2602, col: 29, offset: 85653},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 2614, col: 5, offset: 85967},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 2614, col: 14, offset: 85976},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 2602, col: 29, offset: 85653},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "Substitutions",
			pos:  position{line: 2649, col: 1, offset: 87295},
			expr: &actionExpr{
				pos: position{line: 2650, col: 5, offset: 87349},
				run: (*parser).callonSubstitutions1,
				expr: &seqExpr{
					pos: position{line: 2650, col: 5, offset: 87349},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2650, col: 5, offset: 87349},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 2650, col: 14, offset: 87358},
								expr: &actionExpr{
									pos: position{line: 2651, col: 9, offset: 87368},
									run: (*parser).callonSubstitutions5,
									expr: &seqExpr{
										pos: position{line: 2651, col: 9, offset: 87368},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 2651, col: 9, offset: 87368},
												expr: &notExpr{
													pos: position{line: 3093, col: 8, offset: 100474},
													expr: &anyMatcher{
														line: 3093, col: 9, offset: 100475,
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 2652, col: 9, offset: 87381},
												label: "element",
												expr: &choiceExpr{
													pos: position{line: 2653, col: 13, offset: 87403},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 3013, col: 5, offset: 98136},
															run: (*parser).callonSubstitutions12,
															expr: &seqExpr{
																pos: position{line: 3013, col: 5, offset: 98136},
																exprs: []interface{}{
																	&oneOrMoreExpr{
																		pos: position{line: 3013, col: 5, offset: 98136},
																		expr: &charClassMatcher{
																			pos:        position{line: 3013, col: 5, offset: 98136},
																			val:        "[,;!?0-9\\pL]",
																			chars:      []rune{',', ';', '!', '?'},
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&choiceExpr{
																		pos: position{line: 3014, col: 6, offset: 98186},
																		alternatives: []interface{}{
																			&actionExpr{
																				pos: position{line: 3080, col: 10, offset: 100200},
																				run: (*parser).callonSubstitutions17,
																				expr: &charClassMatcher{
																					pos:        position{line: 3080, col: 11, offset: 100201},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																			&andExpr{
																				pos: position{line: 3014, col: 14, offset: 98194},
																				expr: &choiceExpr{
																					pos: position{line: 3014, col: 16, offset: 98196},
																					alternatives: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 3014, col: 16, offset: 98196},
																							val:        "[.�]",
																							chars:      []rune{'.', '�'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&actionExpr{
																							pos: position{line: 3089, col: 12, offset: 100384},
																							run: (*parser).callonSubstitutions22,
																							expr: &choiceExpr{
																								pos: position{line: 3089, col: 13, offset: 100385},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 3089, col: 13, offset: 100385},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 3089, col: 20, offset: 100392},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 3089, col: 29, offset: 100401},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																						&notExpr{
																							pos: position{line: 3093, col: 8, offset: 100474},
																							expr: &anyMatcher{
																								line: 3093, col: 9, offset: 100475,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 3080, col: 10, offset: 100200},
															run: (*parser).callonSubstitutions29,
															expr: &charClassMatcher{
																pos:        position{line: 3080, col: 11, offset: 100201},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
														},
														&actionExpr{
															pos: position{line: 3089, col: 12, offset: 100384},
															run: (*parser).callonSubstitutions31,
															expr: &choiceExpr{
																pos: position{line: 3089, col: 13, offset: 100385},
																alternatives: []interface{}{
																	&litMatcher{
																		pos:        position{line: 3089, col: 13, offset: 100385},
																		val:        "\n",
																		ignoreCase: false,
																		want:       "\"\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 3089, col: 20, offset: 100392},
																		val:        "\r\n",
																		ignoreCase: false,
																		want:       "\"\\r\\n\"",
																	},
																	&litMatcher{
																		pos:        position{line: 3089, col: 29, offset: 100401},
																		val:        "\r",
																		ignoreCase: false,
																		want:       "\"\\r\"",
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 1219, col: 23, offset: 38141},
															run: (*parser).callonSubstitutions36,
															expr: &seqExpr{
																pos: position{line: 1219, col: 23, offset: 38141},
																exprs: []interface{}{
																	&litMatcher{
																		pos:        position{line: 1217, col: 32, offset: 38109},
																		val:        "�",
																		ignoreCase: false,
																		want:       "\"�\"",
																	},
																	&labeledExpr{
																		pos:   position{line: 1219, col: 51, offset: 38169},
																		label: "ref",
																		expr: &actionExpr{
																			pos: position{line: 1219, col: 56, offset: 38174},
																			run: (*parser).callonSubstitutions40,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 1219, col: 56, offset: 38174},
																				expr: &charClassMatcher{
																					pos:        position{line: 1219, col: 56, offset: 38174},
																					val:        "[0-9]",
																					ranges:     []rune{'0', '9'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 1217, col: 32, offset: 38109},
																		val:        "�",
																		ignoreCase: false,
																		want:       "\"�\"",
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 1227, col: 5, offset: 38587},
															run: (*parser).callonSubstitutions44,
															expr: &seqExpr{
																pos: position{line: 1227, col: 5, offset: 38587},
																exprs: []interface{}{
																	&andCodeExpr{
																		pos: position{line: 1227, col: 5, offset: 38587},
																		run: (*parser).callonSubstitutions46,
																	},
																	&litMatcher{
																		pos:        position{line: 1230, col: 5, offset: 38689},
																		val:        "+",
																		ignoreCase: false,
																		want:       "\"+\"",
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 1230, col: 9, offset: 38693},
																		expr: &actionExpr{
																			pos: position{line: 3080, col: 10, offset: 100200},
																			run: (*parser).callonSubstitutions49,
																			expr: &charClassMatcher{
																				pos:        position{line: 3080, col: 11, offset: 100201},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&andExpr{
																		pos: position{line: 1230, col: 16, offset: 38700},
																		expr: &choiceExpr{
																			pos: position{line: 3096, col: 8, offset: 100524},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 3089, col: 12, offset: 100384},
																					run: (*parser).callonSubstitutions53,
																					expr: &choiceExpr{
																						pos: position{line: 3089, col: 13, offset: 100385},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 3089, col: 13, offset: 100385},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 3089, col: 20, offset: 100392},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 3089, col: 29, offset: 100401},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 3093, col: 8, offset: 100474},
																					expr: &anyMatcher{
																						line: 3093, col: 9, offset: 100475,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 3019, col: 16, offset: 98370},
															run: (*parser).callonSubstitutions60,
															expr: &seqExpr{
																pos: position{line: 3019, col: 16, offset: 98370},
																exprs: []interface{}{
																	&labeledExpr{
																		pos:   position{line: 3019, col: 16, offset: 98370},
																		label: "char",
																		expr: &actionExpr{
																			pos: position{line: 3026, col: 25, offset: 98561},
																			run: (*parser).callonSubstitutions63,
																			expr: &charClassMatcher{
																				pos:        position{line: 3026, col: 25, offset: 98561},
																				val:        "[.,;?!]",
																				chars:      []rune{'.', ',', ';', '?', '!'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&andExpr{
																		pos: position{line: 3019, col: 44, offset: 98398},
																		expr: &choiceExpr{
																			pos: position{line: 3019, col: 46, offset: 98400},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 3080, col: 10, offset: 100200},
																					run: (*parser).callonSubstitutions67,
																					expr: &charClassMatcher{
																						pos:        position{line: 3080, col: 11, offset: 100201},
																						val:        "[ \\t]",
																						chars:      []rune{' ', '\t'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																				&actionExpr{
																					pos: position{line: 3089, col: 12, offset: 100384},
																					run: (*parser).callonSubstitutions69,
																					expr: &choiceExpr{
																						pos: position{line: 3089, col: 13, offset: 100385},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 3089, col: 13, offset: 100385},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 3089, col: 20, offset: 100392},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 3089, col: 29, offset: 100401},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																				&notExpr{
																					pos: position{line: 3093, col: 8, offset: 100474},
																					expr: &anyMatcher{
																						line: 3093, col: 9, offset: 100475,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&ruleRefExpr{
															pos:  position{line: 2659, col: 15, offset: 87642},
															name: "Quote",
														},
														&ruleRefExpr{
															pos:  position{line: 2660, col: 15, offset: 87662},
															name: "InlinePassthrough",
														},
														&ruleRefExpr{
															pos:  position{line: 2661, col: 15, offset: 87694},
															name: "InlineMacro",
														},
														&ruleRefExpr{
															pos:  position{line: 2662, col: 15, offset: 87783},
															name: "Callout",
														},
														&actionExpr{
															pos: position{line: 2753, col: 5, offset: 90225},
															run: (*parser).callonSubstitutions80,
															expr: &seqExpr{
																pos: position{line: 2753, col: 5, offset: 90225},
																exprs: []interface{}{
																	&andCodeExpr{
																		pos: position{line: 2753, col: 5, offset: 90225},
																		run: (*parser).callonSubstitutions82,
																	},
																	&labeledExpr{
																		pos:   position{line: 2756, col: 5, offset: 90301},
																		label: "element",
																		expr: &choiceExpr{
																			pos: position{line: 2758, col: 9, offset: 90399},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2758, col: 9, offset: 90399},
																					run: (*parser).callonSubstitutions85,
																					expr: &choiceExpr{
																						pos: position{line: 699, col: 27, offset: 22665},
																						alternatives: []interface{}{
																							&actionExpr{
																								pos: position{line: 699, col: 27, offset: 22665},
																								run: (*parser).callonSubstitutions87,
																								expr: &seqExpr{
																									pos: position{line: 699, col: 27, offset: 22665},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 699, col: 27, offset: 22665},
																											val:        "<<",
																											ignoreCase: false,
																											want:       "\"<<\"",
																										},
																										&labeledExpr{
																											pos:   position{line: 699, col: 32, offset: 22670},
																											label: "id",
																											expr: &actionExpr{
																												pos: position{line: 3065, col: 7, offset: 99852},
																												run: (*parser).callonSubstitutions91,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 3065, col: 7, offset: 99852},
																													expr: &charClassMatcher{
																														pos:        position{line: 3065, col: 7, offset: 99852},
																														val:        "[^[]<>,]",
																														chars:      []rune{'[', ']', '<', '>', ','},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																										&zeroOrMoreExpr{
																											pos: position{line: 699, col: 40, offset: 22678},
																											expr: &actionExpr{
																												pos: position{line: 3080, col: 10, offset: 100200},
																												run: (*parser).callonSubstitutions95,
																												expr: &charClassMatcher{
																													pos:        position{line: 3080, col: 11, offset: 100201},
																													val:        "[ \\t]",
																													chars:      []rune{' ', '\t'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 699, col: 47, offset: 22685},
																											val:        ",",
																											ignoreCase: false,
																											want:       "\",\"",
																										},
																										&labeledExpr{
																											pos:   position{line: 699, col: 51, offset: 22689},
																											label: "label",
																											expr: &oneOrMoreExpr{
																												pos: position{line: 709, col: 24, offset: 23090},
																												expr: &choiceExpr{
																													pos: position{line: 710, col: 5, offset: 23096},
																													alternatives: []interface{}{
																														&actionExpr{
																															pos: position{line: 710, col: 6, offset: 23097},
																															run: (*parser).callonSubstitutions101,
																															expr: &seqExpr{
																																pos: position{line: 710, col: 6, offset: 23097},
																																exprs: []interface{}{
																																	&charClassMatcher{
																																		pos:        position{line: 710, col: 6, offset: 23097},
																																		val:        "[0-9\\pL]",
																																		ranges:     []rune{'0', '9'},
																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																	&oneOrMoreExpr{
																																		pos: position{line: 710, col: 14, offset: 23105},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 710, col: 14, offset: 23105},
																																			val:        "[^\\r\\n{<>]",
																																			chars:      []rune{'\r', '\n', '{', '<', '>'},
																																			ignoreCase: false,
																																			inverted:   true,
																																		},
																																	},
																																},
																															},
																														},
																														&actionExpr{
																															pos: position{line: 657, col: 5, offset: 21090},
																															run: (*parser).callonSubstitutions106,
																															expr: &seqExpr{
																																pos: position{line: 657, col: 5, offset: 21090},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 657, col: 5, offset: 21090},
																																		val:        "\\{",
																																		ignoreCase: false,
																																		want:       "\"\\\\{\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 657, col: 13, offset: 21098},
																																		label: "name",
																																		expr: &actionExpr{
																																			pos: position{line: 324, col: 18, offset: 10072},
																																			run: (*parser).callonSubstitutions110,
																																			expr: &seqExpr{
																																				pos: position{line: 324, col: 18, offset: 10072},
																																				exprs: []interface{}{
																																					&charClassMatcher{
																																						pos:        position{line: 324, col: 18, offset: 10072},
																																						val:        "[_0-9\\pL]",
																																						chars:      []rune{'_'},
																																						ranges:     []rune{'0', '9'},
																																						classes:    []*unicode.RangeTable{rangeTable("L")},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																					&zeroOrMoreExpr{
																																						pos: position{line: 324, col: 28, offset: 10082},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 324, col: 29, offset: 10083},
																																							val:        "[-0-9\\pL]",
																																							chars:      []rune{'-'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 657, col: 32, offset: 21117},
																																		val:        "}",
																																		ignoreCase: false,
																																		want:       "\"}\"",
																																	},
																																},
																															},
																														},
																														&actionExpr{
																															pos: position{line: 664, col: 5, offset: 21358},
																															run: (*parser).callonSubstitutions116,
																															expr: &seqExpr{
																																pos: position{line: 664, col: 5, offset: 21358},
																																exprs: []interface{}{
																																	&litMatcher{
																																		pos:        position{line: 664, col: 5, offset: 21358},
																																		val:        "{",
																																		ignoreCase: false,
																																		want:       "\"{\"",
																																	},
																																	&labeledExpr{
																																		pos:   position{line: 664, col: 9, offset: 21362},
																																		label: "name",
																																		expr: &actionExpr{
																																			pos: position{line: 324, col: 18, offset: 10072},
																																			run: (*parser).callonSubstitutions120,
																																			expr: &seqExpr{
																																				pos: position{line: 324, col: 18, offset: 10072},
																																				exprs: []interface{}{
																																					&charClassMatcher{
																																						pos:        position{line: 324, col: 18, offset: 10072},
																																						val:        "[_0-9\\pL]",
																																						chars:      []rune{'_'},
																																						ranges:     []rune{'0', '9'},
																																						classes:    []*unicode.RangeTable{rangeTable("L")},
																																						ignoreCase: false,
																																						inverted:   false,
																																					},
																																					&zeroOrMoreExpr{
																																						pos: position{line: 324, col: 28, offset: 10082},
																																						expr: &charClassMatcher{
																																							pos:        position{line: 324, col: 29, offset: 10083},
																																							val:        "[-0-9\\pL]",
																																							chars:      []rune{'-'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																	&litMatcher{
																																		pos:        position{line: 664, col: 28, offset: 21381},
																																		val:        "}",
																																		ignoreCase: false,
																																		want:       "\"}\"",
																																	},
																																},
																															},
																														},
																														&actionExpr{
																															pos: position{line: 714, col: 8, offset: 23331},
																															run: (*parser).callonSubstitutions126,
																															expr: &litMatcher{
																																pos:        position{line: 714, col: 8, offset: 23331},
																																val:        "{",
																																ignoreCase: false,
																																want:       "\"{\"",
																															},
																														},
																													},
																												},
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 699, col: 79, offset: 22717},
																											val:        ">>",
																											ignoreCase: false,
																											want:       "\">>\"",
																										},
																									},
																								},
																							},
																							&actionExpr{
																								pos: position{line: 701, col: 9, offset: 22790},
																								run: (*parser).callonSubstitutions129,
																								expr: &seqExpr{
																									pos: position{line: 701, col: 9, offset: 22790},
																									exprs: []interface{}{
																										&litMatcher{
																											pos:        position{line: 701, col: 9, offset: 22790},
																											val:        "<<",
																											ignoreCase: false,
																											want:       "\"<<\"",
																										},
																										&labeledExpr{
																											pos:   position{line: 701, col: 14, offset: 22795},
																											label: "id",
																											expr: &actionExpr{
																												pos: position{line: 3065, col: 7, offset: 99852},
																												run: (*parser).callonSubstitutions133,
																												expr: &oneOrMoreExpr{
																													pos: position{line: 3065, col: 7, offset: 99852},
																													expr: &charClassMatcher{
																														pos:        position{line: 3065, col: 7, offset: 99852},
																														val:        "[^[]<>,]",
																														chars:      []rune{'[', ']', '<', '>', ','},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																										&litMatcher{
																											pos:        position{line: 701, col: 22, offset: 22803},
																											val:        ">>",
																											ignoreCase: false,
																											want:       "\">>\"",
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2761, col: 11, offset: 90503},
																					run: (*parser).callonSubstitutions137,
																					expr: &charClassMatcher{
																						pos:        position{line: 2761, col: 12, offset: 90504},
																						val:        "[<>&]",
																						chars:      []rune{'<', '>', '&'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 648, col: 5, offset: 20883},
															run: (*parser).callonSubstitutions139,
															expr: &seqExpr{
																pos: position{line: 648, col: 5, offset: 20883},
																exprs: []interface{}{
																	&andCodeExpr{
																		pos: position{line: 648, col: 5, offset: 20883},
																		run: (*parser).callonSubstitutions141,
																	},
																	&labeledExpr{
																		pos:   position{line: 651, col: 5, offset: 20952},
																		label: "element",
																		expr: &choiceExpr{
																			pos: position{line: 651, col: 14, offset: 20961},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 671, col: 25, offset: 21614},
																					run: (*parser).callonSubstitutions144,
																					expr: &seqExpr{
																						pos: position{line: 671, col: 25, offset: 21614},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 671, col: 25, offset: 21614},
																								val:        "{counter:",
																								ignoreCase: false,
																								want:       "\"{counter:\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 671, col: 37, offset: 21626},
																								label: "name",
																								expr: &actionExpr{
																									pos: position{line: 324, col: 18, offset: 10072},
																									run: (*parser).callonSubstitutions148,
																									expr: &seqExpr{
																										pos: position{line: 324, col: 18, offset: 10072},
																										exprs: []interface{}{
																											&charClassMatcher{
																												pos:        position{line: 324, col: 18, offset: 10072},
																												val:        "[_0-9\\pL]",
																												chars:      []rune{'_'},
																												ranges:     []rune{'0', '9'},
																												classes:    []*unicode.RangeTable{rangeTable("L")},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 324, col: 28, offset: 10082},
																												expr: &charClassMatcher{
																													pos:        position{line: 324, col: 29, offset: 10083},
																													val:        "[-0-9\\pL]",
																													chars:      []rune{'-'},
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																							&labeledExpr{
																								pos:   position{line: 671, col: 56, offset: 21645},
																								label: "start",
																								expr: &zeroOrOneExpr{
																									pos: position{line: 671, col: 62, offset: 21651},
																									expr: &actionExpr{
																										pos: position{line: 679, col: 17, offset: 21946},
																										run: (*parser).callonSubstitutions155,
																										expr: &seqExpr{
																											pos: position{line: 679, col: 17, offset: 21946},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 679, col: 17, offset: 21946},
																													val:        ":",
																													ignoreCase: false,
																													want:       "\":\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 679, col: 21, offset: 21950},
																													label: "start",
																													expr: &choiceExpr{
																														pos: position{line: 679, col: 28, offset: 21957},
																														alternatives: []interface{}{
																															&actionExpr{
																																pos: position{line: 679, col: 28, offset: 21957},
																																run: (*parser).callonSubstitutions160,
																																expr: &charClassMatcher{
																																	pos:        position{line: 679, col: 28, offset: 21957},
																																	val:        "[A-Za-z]",
																																	ranges:     []rune{'A', 'Z', 'a', 'z'},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																															&actionExpr{
																																pos: position{line: 681, col: 9, offset: 22011},
																																run: (*parser).callonSubstitutions162,
																																expr: &oneOrMoreExpr{
																																	pos: position{line: 681, col: 9, offset: 22011},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 681, col: 9, offset: 22011},
																																		val:        "[0-9]",
																																		ranges:     []rune{'0', '9'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 671, col: 78, offset: 21667},
																								val:        "}",
																								ignoreCase: false,
																								want:       "\"}\"",
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 675, col: 25, offset: 21785},
																					run: (*parser).callonSubstitutions166,
																					expr: &seqExpr{
																						pos: position{line: 675, col: 25, offset: 21785},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 675, col: 25, offset: 21785},
																								val:        "{counter2:",
																								ignoreCase: false,
																								want:       "\"{counter2:\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 675, col: 38, offset: 21798},
																								label: "name",
																								expr: &actionExpr{
																									pos: position{line: 324, col: 18, offset: 10072},
																									run: (*parser).callonSubstitutions170,
																									expr: &seqExpr{
																										pos: position{line: 324, col: 18, offset: 10072},
																										exprs: []interface{}{
																											&charClassMatcher{
																												pos:        position{line: 324, col: 18, offset: 10072},
																												val:        "[_0-9\\pL]",
																												chars:      []rune{'_'},
																												ranges:     []rune{'0', '9'},
																												classes:    []*unicode.RangeTable{rangeTable("L")},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 324, col: 28, offset: 10082},
																												expr: &charClassMatcher{
																													pos:        position{line: 324, col: 29, offset: 10083},
																													val:        "[-0-9\\pL]",
																													chars:      []rune{'-'},
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																							&labeledExpr{
																								pos:   position{line: 675, col: 57, offset: 21817},
																								label: "start",
																								expr: &zeroOrOneExpr{
																									pos: position{line: 675, col: 63, offset: 21823},
																									expr: &actionExpr{
																										pos: position{line: 679, col: 17, offset: 21946},
																										run: (*parser).callonSubstitutions177,
																										expr: &seqExpr{
																											pos: position{line: 679, col: 17, offset: 21946},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 679, col: 17, offset: 21946},
																													val:        ":",
																													ignoreCase: false,
																													want:       "\":\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 679, col: 21, offset: 21950},
																													label: "start",
																													expr: &choiceExpr{
																														pos: position{line: 679, col: 28, offset: 21957},
																														alternatives: []interface{}{
																															&actionExpr{
																																pos: position{line: 679, col: 28, offset: 21957},
																																run: (*parser).callonSubstitutions182,
																																expr: &charClassMatcher{
																																	pos:        position{line: 679, col: 28, offset: 21957},
																																	val:        "[A-Za-z]",
																																	ranges:     []rune{'A', 'Z', 'a', 'z'},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																															},
																															&actionExpr{
																																pos: position{line: 681, col: 9, offset: 22011},
																																run: (*parser).callonSubstitutions184,
																																expr: &oneOrMoreExpr{
																																	pos: position{line: 681, col: 9, offset: 22011},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 681, col: 9, offset: 22011},
																																		val:        "[0-9]",
																																		ranges:     []rune{'0', '9'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 675, col: 79, offset: 21839},
																								val:        "}",
																								ignoreCase: false,
																								want:       "\"}\"",
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 657, col: 5, offset: 21090},
																					run: (*parser).callonSubstitutions188,
																					expr: &seqExpr{
																						pos: position{line: 657, col: 5, offset: 21090},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 657, col: 5, offset: 21090},
																								val:        "\\{",
																								ignoreCase: false,
																								want:       "\"\\\\{\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 657, col: 13, offset: 21098},
																								label: "name",
																								expr: &actionExpr{
																									pos: position{line: 324, col: 18, offset: 10072},
																									run: (*parser).callonSubstitutions192,
																									expr: &seqExpr{
																										pos: position{line: 324, col: 18, offset: 10072},
																										exprs: []interface{}{
																											&charClassMatcher{
																												pos:        position{line: 324, col: 18, offset: 10072},
																												val:        "[_0-9\\pL]",
																												chars:      []rune{'_'},
																												ranges:     []rune{'0', '9'},
																												classes:    []*unicode.RangeTable{rangeTable("L")},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 324, col: 28, offset: 10082},
																												expr: &charClassMatcher{
																													pos:        position{line: 324, col: 29, offset: 10083},
																													val:        "[-0-9\\pL]",
																													chars:      []rune{'-'},
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 657, col: 32, offset: 21117},
																								val:        "}",
																								ignoreCase: false,
																								want:       "\"}\"",
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 664, col: 5, offset: 21358},
																					run: (*parser).callonSubstitutions198,
																					expr: &seqExpr{
																						pos: position{line: 664, col: 5, offset: 21358},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 664, col: 5, offset: 21358},
																								val:        "{",
																								ignoreCase: false,
																								want:       "\"{\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 664, col: 9, offset: 21362},
																								label: "name",
																								expr: &actionExpr{
																									pos: position{line: 324, col: 18, offset: 10072},
																									run: (*parser).callonSubstitutions202,
																									expr: &seqExpr{
																										pos: position{line: 324, col: 18, offset: 10072},
																										exprs: []interface{}{
																											&charClassMatcher{
																												pos:        position{line: 324, col: 18, offset: 10072},
																												val:        "[_0-9\\pL]",
																												chars:      []rune{'_'},
																												ranges:     []rune{'0', '9'},
																												classes:    []*unicode.RangeTable{rangeTable("L")},
																												ignoreCase: false,
																												inverted:   false,
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 324, col: 28, offset: 10082},
																												expr: &charClassMatcher{
																													pos:        position{line: 324, col: 29, offset: 10083},
																													val:        "[-0-9\\pL]",
																													chars:      []rune{'-'},
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																							&litMatcher{
																								pos:        position{line: 664, col: 28, offset: 21381},
																								val:        "}",
																								ignoreCase: false,
																								want:       "\"}\"",
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 2742, col: 5, offset: 89999},
															run: (*parser).callonSubstitutions208,
															expr: &seqExpr{
																pos: position{line: 2742, col: 5, offset: 89999},
																exprs: []interface{}{
																	&andCodeExpr{
																		pos: position{line: 2742, col: 5, offset: 89999},
																		run: (*parser).callonSubstitutions210,
																	},
																	&labeledExpr{
																		pos:   position{line: 2745, col: 5, offset: 90070},
																		label: "element",
																		expr: &choiceExpr{
																			pos: position{line: 2786, col: 5, offset: 91397},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2786, col: 5, offset: 91397},
																					run: (*parser).callonSubstitutions213,
																					expr: &seqExpr{
																						pos: position{line: 2786, col: 5, offset: 91397},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 2786, col: 5, offset: 91397},
																								val:        "\\",
																								ignoreCase: false,
																								want:       "\"\\\\\"",
																							},
																							&choiceExpr{
																								pos: position{line: 2786, col: 10, offset: 91402},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 2795, col: 5, offset: 91692},
																										run: (*parser).callonSubstitutions217,
																										expr: &litMatcher{
																											pos:        position{line: 2795, col: 5, offset: 91692},
																											val:        "\"`",
																											ignoreCase: false,
																											want:       "\"\\\"`\"",
																										},
																									},
																									&actionExpr{
																										pos: position{line: 2798, col: 7, offset: 91750},
																										run: (*parser).callonSubstitutions219,
																										expr: &litMatcher{
																											pos:        position{line: 2798, col: 7, offset: 91750},
																											val:        "`\"",
																											ignoreCase: false,
																											want:       "\"`\\\"\"",
																										},
																									},
																									&actionExpr{
																										pos: position{line: 2801, col: 7, offset: 91808},
																										run: (*parser).callonSubstitutions221,
																										expr: &litMatcher{
																											pos:        position{line: 2801, col: 7, offset: 91808},
																											val:        "'`",
																											ignoreCase: false,
																											want:       "\"'`\"",
																										},
																									},
																									&actionExpr{
																										pos: position{line: 2804, col: 7, offset: 91864},
																										run: (*parser).callonSubstitutions223,
																										expr: &litMatcher{
																											pos:        position{line: 2804, col: 7, offset: 91864},
																											val:        "`'",
																											ignoreCase: false,
																											want:       "\"`'\"",
																										},
																									},
																									&actionExpr{
																										pos: position{line: 2810, col: 14, offset: 91986},
																										run: (*parser).callonSubstitutions225,
																										expr: &litMatcher{
																											pos:        position{line: 2810, col: 14, offset: 91986},
																											val:        "(C)",
																											ignoreCase: false,
																											want:       "\"(C)\"",
																										},
																									},
																									&actionExpr{
																										pos: position{line: 2814, col: 14, offset: 92052},
																										run: (*parser).callonSubstitutions227,
																										expr: &litMatcher{
																											pos:        position{line: 2814, col: 14, offset: 92052},
																											val:        "(TM)",
																											ignoreCase: false,
																											want:       "\"(TM)\"",
																										},
																									},
																									&actionExpr{
																										pos: position{line: 2818, col: 15, offset: 92121},
																										run: (*parser).callonSubstitutions229,
																										expr: &litMatcher{
																											pos:        position{line: 2818, col: 15, offset: 92121},
																											val:        "(R)",
																											ignoreCase: false,
																											want:       "\"(R)\"",
																										},
																									},
																									&actionExpr{
																										pos: position{line: 2822, col: 13, offset: 92186},
																										run: (*parser).callonSubstitutions231,
																										expr: &litMatcher{
																											pos:        position{line: 2822, col: 13, offset: 92186},
																											val:        "...",
																											ignoreCase: false,
																											want:       "\"...\"",
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2795, col: 5, offset: 91692},
																					run: (*parser).callonSubstitutions233,
																					expr: &litMatcher{
																						pos:        position{line: 2795, col: 5, offset: 91692},
																						val:        "\"`",
																						ignoreCase: false,
																						want:       "\"\\\"`\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2798, col: 7, offset: 91750},
																					run: (*parser).callonSubstitutions235,
																					expr: &litMatcher{
																						pos:        position{line: 2798, col: 7, offset: 91750},
																						val:        "`\"",
																						ignoreCase: false,
																						want:       "\"`\\\"\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2801, col: 7, offset: 91808},
																					run: (*parser).callonSubstitutions237,
																					expr: &litMatcher{
																						pos:        position{line: 2801, col: 7, offset: 91808},
																						val:        "'`",
																						ignoreCase: false,
																						want:       "\"'`\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2804, col: 7, offset: 91864},
																					run: (*parser).callonSubstitutions239,
																					expr: &litMatcher{
																						pos:        position{line: 2804, col: 7, offset: 91864},
																						val:        "`'",
																						ignoreCase: false,
																						want:       "\"`'\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2810, col: 14, offset: 91986},
																					run: (*parser).callonSubstitutions241,
																					expr: &litMatcher{
																						pos:        position{line: 2810, col: 14, offset: 91986},
																						val:        "(C)",
																						ignoreCase: false,
																						want:       "\"(C)\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2814, col: 14, offset: 92052},
																					run: (*parser).callonSubstitutions243,
																					expr: &litMatcher{
																						pos:        position{line: 2814, col: 14, offset: 92052},
																						val:        "(TM)",
																						ignoreCase: false,
																						want:       "\"(TM)\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2818, col: 15, offset: 92121},
																					run: (*parser).callonSubstitutions245,
																					expr: &litMatcher{
																						pos:        position{line: 2818, col: 15, offset: 92121},
																						val:        "(R)",
																						ignoreCase: false,
																						want:       "\"(R)\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2822, col: 13, offset: 92186},
																					run: (*parser).callonSubstitutions247,
																					expr: &litMatcher{
																						pos:        position{line: 2822, col: 13, offset: 92186},
																						val:        "...",
																						ignoreCase: false,
																						want:       "\"...\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2833, col: 5, offset: 92496},
																					run: (*parser).callonSubstitutions249,
																					expr: &seqExpr{
																						pos: position{line: 2833, col: 5, offset: 92496},
																						exprs: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 2994, col: 13, offset: 97463},
																								val:        "[0-9\\pL]",
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&litMatcher{
																								pos:        position{line: 2833, col: 14, offset: 92505},
																								val:        "\\'",
																								ignoreCase: false,
																								want:       "\"\\\\'\"",
																							},
																							&andExpr{
																								pos: position{line: 2833, col: 19, offset: 92510},
																								expr: &charClassMatcher{
																									pos:        position{line: 2833, col: 20, offset: 92511},
																									val:        "[\\pL]",
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2839, col: 5, offset: 92742},
																					run: (*parser).callonSubstitutions255,
																					expr: &seqExpr{
																						pos: position{line: 2839, col: 5, offset: 92742},
																						exprs: []interface{}{
																							&charClassMatcher{
																								pos:        position{line: 2994, col: 13, offset: 97463},
																								val:        "[0-9\\pL]",
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																							&litMatcher{
																								pos:        position{line: 2839, col: 14, offset: 92751},
																								val:        "'",
																								ignoreCase: false,
																								want:       "\"'\"",
																							},
																							&andExpr{
																								pos: position{line: 2839, col: 18, offset: 92755},
																								expr: &charClassMatcher{
																									pos:        position{line: 2839, col: 19, offset: 92756},
																									val:        "[\\pL]",
																									classes:    []*unicode.RangeTable{rangeTable("L")},
																									ignoreCase: false,
																									inverted:   false,
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
														&actionExpr{
															pos: position{line: 3032, col: 12, offset: 98735},
															run: (*parser).callonSubstitutions261,
															expr: &anyMatcher{
																line: 3032, col: 12, offset: 98735,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 3093, col: 8, offset: 100474},
							expr: &anyMatcher{
								line: 3093, col: 9, offset: 100475,
							},
						},
					},
				},
			},
		},
		{
			name: "HeaderGroup",
			pos:  position{line: 2675, col: 1, offset: 88217},
			expr: &actionExpr{
				pos: position{line: 2676, col: 5, offset: 88237},
				run: (*parser).callonHeaderGroup1,
				expr: &seqExpr{
					pos: position{line: 2676, col: 5, offset: 88237},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2676, col: 5, offset: 88237},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 2676, col: 14, offset: 88246},
								expr: &ruleRefExpr{
									pos:  position{line: 2676, col: 15, offset: 88247},
									name: "HeaderGroupElement",
								},
							},
						},
						&notExpr{
							pos: position{line: 3093, col: 8, offset: 100474},
							expr: &anyMatcher{
								line: 3093, col: 9, offset: 100475,
							},
						},
					},
				},
			},
		},
		{
			name: "HeaderGroupElement",
			pos:  position{line: 2680, col: 1, offset: 88331},
			expr: &actionExpr{
				pos: position{line: 2681, col: 5, offset: 88357},
				run: (*parser).callonHeaderGroupElement1,
				expr: &seqExpr{
					pos: position{line: 2681, col: 5, offset: 88357},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2681, col: 5, offset: 88357},
							expr: &notExpr{
								pos: position{line: 3093, col: 8, offset: 100474},
								expr: &anyMatcher{
									line: 3093, col: 9, offset: 100475,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2682, col: 5, offset: 88366},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 2683, col: 9, offset: 88384},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 3006, col: 5, offset: 97918},
										run: (*parser).callonHeaderGroupElement8,
										expr: &seqExpr{
											pos: position{line: 3006, col: 5, offset: 97918},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 3006, col: 5, offset: 97918},
													expr: &charClassMatcher{
														pos:        position{line: 3006, col: 5, offset: 97918},
														val:        "[0-9\\pL]",
														ranges:     []rune{'0', '9'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&andExpr{
													pos: position{line: 3006, col: 15, offset: 97928},
													expr: &choiceExpr{
														pos: position{line: 3006, col: 17, offset: 97930},
														alternatives: []interface{}{
															&charClassMatcher{
																pos:        position{line: 3006, col: 17, offset: 97930},
																val:        "[\\r\\n ,]]",
																chars:      []rune{'\r', '\n', ' ', ',', ']'},
																ignoreCase: false,
																inverted:   false,
															},
															&notExpr{
																pos: position{line: 3093, col: 8, offset: 100474},
																expr: &anyMatcher{
																	line: 3093, col: 9, offset: 100475,
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 3008, col: 9, offset: 98012},
										run: (*parser).callonHeaderGroupElement17,
										expr: &seqExpr{
											pos: position{line: 3008, col: 9, offset: 98012},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 3008, col: 9, offset: 98012},
													expr: &charClassMatcher{
														pos:        position{line: 3008, col: 9, offset: 98012},
														val:        "[0-9\\pL]",
														ranges:     []rune{'0', '9'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&oneOrMoreExpr{
													pos: position{line: 3008, col: 19, offset: 98022},
													expr: &seqExpr{
														pos: position{line: 3008, col: 20, offset: 98023},
														exprs: []interface{}{
															&charClassMatcher{
																pos:        position{line: 3008, col: 20, offset: 98023},
																val:        "[=*_`]",
																chars:      []rune{'=', '*', '_', '`'},
																ignoreCase: false,
																inverted:   false,
															},
															&oneOrMoreExpr{
																pos: position{line: 3008, col: 27, offset: 98030},
																expr: &charClassMatcher{
																	pos:        position{line: 3008, col: 27, offset: 98030},
																	val:        "[0-9\\pL]",
																	ranges:     []rune{'0', '9'},
																	classes:    []*unicode.RangeTable{rangeTable("L")},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2684, col: 12, offset: 88400},
										run: (*parser).callonHeaderGroupElement26,
										expr: &seqExpr{
											pos: position{line: 2684, col: 12, offset: 88400},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 2684, col: 12, offset: 88400},
													expr: &actionExpr{
														pos: position{line: 3080, col: 10, offset: 100200},
														run: (*parser).callonHeaderGroupElement29,
														expr: &charClassMatcher{
															pos:        position{line: 3080, col: 11, offset: 100201},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 2684, col: 19, offset: 88407},
													label: "id",
													expr: &actionExpr{
														pos: position{line: 408, col: 5, offset: 12598},
														run: (*parser).callonHeaderGroupElement32,
														expr: &seqExpr{
															pos: position{line: 408, col: 5, offset: 12598},
															exprs: []interface{}{
																&litMatcher{
																	pos:        position{line: 408, col: 5, offset: 12598},
																	val:        "[[",
																	ignoreCase: false,
																	want:       "\"[[\"",
																},
																&labeledExpr{
																	pos:   position{line: 409, col: 5, offset: 12608},
																	label: "id",
																	expr: &actionExpr{
																		pos: position{line: 410, col: 9, offset: 12621},
																		run: (*parser).callonHeaderGroupElement36,
																		expr: &labeledExpr{
																			pos:   position{line: 410, col: 9, offset: 12621},
																			label: "elements",
																			expr: &oneOrMoreExpr{
																				pos: position{line: 410, col: 18, offset: 12630},
																				expr: &choiceExpr{
																					pos: position{line: 411, col: 13, offset: 12644},
																					alternatives: []interface{}{
																						&actionExpr{
																							pos: position{line: 411, col: 14, offset: 12645},
																							run: (*parser).callonHeaderGroupElement40,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 411, col: 14, offset: 12645},
																								expr: &charClassMatcher{
																									pos:        position{line: 411, col: 14, offset: 12645},
																									val:        "[^=\\r\\n�{]]",
																									chars:      []rune{'=', '\r', '\n', '�', '{', ']'},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 1219, col: 23, offset: 38141},
																							run: (*parser).callonHeaderGroupElement43,
																							expr: &seqExpr{
																								pos: position{line: 1219, col: 23, offset: 38141},
																								exprs: []interface{}{
																									&litMatcher{
																										pos:        position{line: 1217, col: 32, offset: 38109},
																										val:        "�",
																										ignoreCase: false,
																										want:       "\"�\"",
																									},
																									&labeledExpr{
																										pos:   position{line: 1219, col: 51, offset: 38169},
																										label: "ref",
																										expr: &actionExpr{
																											pos: position{line: 1219, col: 56, offset: 38174},
																											run: (*parser).callonHeaderGroupElement47,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 1219, col: 56, offset: 38174},
																												expr: &charClassMatcher{
																													pos:        position{line: 1219, col: 56, offset: 38174},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																									&litMatcher{
																										pos:        position{line: 1217, col: 32, offset: 38109},
																										val:        "�",
																										ignoreCase: false,
																										want:       "\"�\"",
																									},
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 648, col: 5, offset: 20883},
																							run: (*parser).callonHeaderGroupElement51,
																							expr: &seqExpr{
																								pos: position{line: 648, col: 5, offset: 20883},
																								exprs: []interface{}{
																									&andCodeExpr{
																										pos: position{line: 648, col: 5, offset: 20883},
																										run: (*parser).callonHeaderGroupElement53,
																									},
																									&labeledExpr{
																										pos:   position{line: 651, col: 5, offset: 20952},
																										label: "element",
																										expr: &choiceExpr{
																											pos: position{line: 651, col: 14, offset: 20961},
																											alternatives: []interface{}{
																												&actionExpr{
																													pos: position{line: 671, col: 25, offset: 21614},
																													run: (*parser).callonHeaderGroupElement56,
																													expr: &seqExpr{
																														pos: position{line: 671, col: 25, offset: 21614},
																														exprs: []interface{}{
																															&litMatcher{
																																pos:        position{line: 671, col: 25, offset: 21614},
																																val:        "{counter:",
																																ignoreCase: false,
																																want:       "\"{counter:\"",
																															},
																															&labeledExpr{
																																pos:   position{line: 671, col: 37, offset: 21626},
																																label: "name",
																																expr: &actionExpr{
																																	pos: position{line: 324, col: 18, offset: 10072},
																																	run: (*parser).callonHeaderGroupElement60,
																																	expr: &seqExpr{
																																		pos: position{line: 324, col: 18, offset: 10072},
																																		exprs: []interface{}{
																																			&charClassMatcher{
																																				pos:        position{line: 324, col: 18, offset: 10072},
																																				val:        "[_0-9\\pL]",
																																				chars:      []rune{'_'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&zeroOrMoreExpr{
																																				pos: position{line: 324, col: 28, offset: 10082},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 324, col: 29, offset: 10083},
																																					val:        "[-0-9\\pL]",
																																					chars:      []rune{'-'},
																																					ranges:     []rune{'0', '9'},
																																					classes:    []*unicode.RangeTable{rangeTable("L")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																															&labeledExpr{
																																pos:   position{line: 671, col: 56, offset: 21645},
																																label: "start",
																																expr: &zeroOrOneExpr{
																																	pos: position{line: 671, col: 62, offset: 21651},
																																	expr: &actionExpr{
																																		pos: position{line: 679, col: 17, offset: 21946},
																																		run: (*parser).callonHeaderGroupElement67,
																																		expr: &seqExpr{
																																			pos: position{line: 679, col: 17, offset: 21946},
																																			exprs: []interface{}{
																																				&litMatcher{
																																					pos:        position{line: 679, col: 17, offset: 21946},
																																					val:        ":",
																																					ignoreCase: false,
																																					want:       "\":\"",
																																				},
																																				&labeledExpr{
																																					pos:   position{line: 679, col: 21, offset: 21950},
																																					label: "start",
																																					expr: &choiceExpr{
																																						pos: position{line: 679, col: 28, offset: 21957},
																																						alternatives: []interface{}{
																																							&actionExpr{
																																								pos: position{line: 679, col: 28, offset: 21957},
																																								run: (*parser).callonHeaderGroupElement72,
																																								expr: &charClassMatcher{
																																									pos:        position{line: 679, col: 28, offset: 21957},
																																									val:        "[A-Za-z]",
																																									ranges:     []rune{'A', 'Z', 'a', 'z'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 681, col: 9, offset: 22011},
																																								run: (*parser).callonHeaderGroupElement74,
																																								expr: &oneOrMoreExpr{
																																									pos: position{line: 681, col: 9, offset: 22011},
																																									expr: &charClassMatcher{
																																										pos:        position{line: 681, col: 9, offset: 22011},
																																										val:        "[0-9]",
																																										ranges:     []rune{'0', '9'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 671, col: 78, offset: 21667},
																																val:        "}",
																																ignoreCase: false,
																																want:       "\"}\"",
																															},
																														},
																													},
																												},
																												&actionExpr{
																													pos: position{line: 675, col: 25, offset: 21785},
																													run: (*parser).callonHeaderGroupElement78,
																													expr: &seqExpr{
																														pos: position{line: 675, col: 25, offset: 21785},
																														exprs: []interface{}{
																															&litMatcher{
																																pos:        position{line: 675, col: 25, offset: 21785},
																																val:        "{counter2:",
																																ignoreCase: false,
																																want:       "\"{counter2:\"",
																															},
																															&labeledExpr{
																																pos:   position{line: 675, col: 38, offset: 21798},
																																label: "name",
																																expr: &actionExpr{
																																	pos: position{line: 324, col: 18, offset: 10072},
																																	run: (*parser).callonHeaderGroupElement82,
																																	expr: &seqExpr{
																																		pos: position{line: 324, col: 18, offset: 10072},
																																		exprs: []interface{}{
																																			&charClassMatcher{
																																				pos:        position{line: 324, col: 18, offset: 10072},
																																				val:        "[_0-9\\pL]",
																																				chars:      []rune{'_'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&zeroOrMoreExpr{
																																				pos: position{line: 324, col: 28, offset: 10082},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 324, col: 29, offset: 10083},
																																					val:        "[-0-9\\pL]",
																																					chars:      []rune{'-'},
																																					ranges:     []rune{'0', '9'},
																																					classes:    []*unicode.RangeTable{rangeTable("L")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																															&labeledExpr{
																																pos:   position{line: 675, col: 57, offset: 21817},
																																label: "start",
																																expr: &zeroOrOneExpr{
																																	pos: position{line: 675, col: 63, offset: 21823},
																																	expr: &actionExpr{
																																		pos: position{line: 679, col: 17, offset: 21946},
																																		run: (*parser).callonHeaderGroupElement89,
																																		expr: &seqExpr{
																																			pos: position{line: 679, col: 17, offset: 21946},
																																			exprs: []interface{}{
																																				&litMatcher{
																																					pos:        position{line: 679, col: 17, offset: 21946},
																																					val:        ":",
																																					ignoreCase: false,
																																					want:       "\":\"",
																																				},
																																				&labeledExpr{
																																					pos:   position{line: 679, col: 21, offset: 21950},
																																					label: "start",
																																					expr: &choiceExpr{
																																						pos: position{line: 679, col: 28, offset: 21957},
																																						alternatives: []interface{}{
																																							&actionExpr{
																																								pos: position{line: 679, col: 28, offset: 21957},
																																								run: (*parser).callonHeaderGroupElement94,
																																								expr: &charClassMatcher{
																																									pos:        position{line: 679, col: 28, offset: 21957},
																																									val:        "[A-Za-z]",
																																									ranges:     []rune{'A', 'Z', 'a', 'z'},
																																									ignoreCase: false,
																																									inverted:   false,
																																								},
																																							},
																																							&actionExpr{
																																								pos: position{line: 681, col: 9, offset: 22011},
																																								run: (*parser).callonHeaderGroupElement96,
																																								expr: &oneOrMoreExpr{
																																									pos: position{line: 681, col: 9, offset: 22011},
																																									expr: &charClassMatcher{
																																										pos:        position{line: 681, col: 9, offset: 22011},
																																										val:        "[0-9]",
																																										ranges:     []rune{'0', '9'},
																																										ignoreCase: false,
																																										inverted:   false,
																																									},
																																								},
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 675, col: 79, offset: 21839},
																																val:        "}",
																																ignoreCase: false,
																																want:       "\"}\"",
																															},
																														},
																													},
																												},
																												&actionExpr{
																													pos: position{line: 657, col: 5, offset: 21090},
																													run: (*parser).callonHeaderGroupElement100,
																													expr: &seqExpr{
																														pos: position{line: 657, col: 5, offset: 21090},
																														exprs: []interface{}{
																															&litMatcher{
																																pos:        position{line: 657, col: 5, offset: 21090},
																																val:        "\\{",
																																ignoreCase: false,
																																want:       "\"\\\\{\"",
																															},
																															&labeledExpr{
																																pos:   position{line: 657, col: 13, offset: 21098},
																																label: "name",
																																expr: &actionExpr{
																																	pos: position{line: 324, col: 18, offset: 10072},
																																	run: (*parser).callonHeaderGroupElement104,
																																	expr: &seqExpr{
																																		pos: position{line: 324, col: 18, offset: 10072},
																																		exprs: []interface{}{
																																			&charClassMatcher{
																																				pos:        position{line: 324, col: 18, offset: 10072},
																																				val:        "[_0-9\\pL]",
																																				chars:      []rune{'_'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&zeroOrMoreExpr{
																																				pos: position{line: 324, col: 28, offset: 10082},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 324, col: 29, offset: 10083},
																																					val:        "[-0-9\\pL]",
																																					chars:      []rune{'-'},
																																					ranges:     []rune{'0', '9'},
																																					classes:    []*unicode.RangeTable{rangeTable("L")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 657, col: 32, offset: 21117},
																																val:        "}",
																																ignoreCase: false,
																																want:       "\"}\"",
																															},
																														},
																													},
																												},
																												&actionExpr{
																													pos: position{line: 664, col: 5, offset: 21358},
																													run: (*parser).callonHeaderGroupElement110,
																													expr: &seqExpr{
																														pos: position{line: 664, col: 5, offset: 21358},
																														exprs: []interface{}{
																															&litMatcher{
																																pos:        position{line: 664, col: 5, offset: 21358},
																																val:        "{",
																																ignoreCase: false,
																																want:       "\"{\"",
																															},
																															&labeledExpr{
																																pos:   position{line: 664, col: 9, offset: 21362},
																																label: "name",
																																expr: &actionExpr{
																																	pos: position{line: 324, col: 18, offset: 10072},
																																	run: (*parser).callonHeaderGroupElement114,
																																	expr: &seqExpr{
																																		pos: position{line: 324, col: 18, offset: 10072},
																																		exprs: []interface{}{
																																			&charClassMatcher{
																																				pos:        position{line: 324, col: 18, offset: 10072},
																																				val:        "[_0-9\\pL]",
																																				chars:      []rune{'_'},
																																				ranges:     []rune{'0', '9'},
																																				classes:    []*unicode.RangeTable{rangeTable("L")},
																																				ignoreCase: false,
																																				inverted:   false,
																																			},
																																			&zeroOrMoreExpr{
																																				pos: position{line: 324, col: 28, offset: 10082},
																																				expr: &charClassMatcher{
																																					pos:        position{line: 324, col: 29, offset: 10083},
																																					val:        "[-0-9\\pL]",
																																					chars:      []rune{'-'},
																																					ranges:     []rune{'0', '9'},
																																					classes:    []*unicode.RangeTable{rangeTable("L")},
																																					ignoreCase: false,
																																					inverted:   false,
																																				},
																																			},
																																		},
																																	},
																																},
																															},
																															&litMatcher{
																																pos:        position{line: 664, col: 28, offset: 21381},
																																val:        "}",
																																ignoreCase: false,
																																want:       "\"}\"",
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																						&actionExpr{
																							pos: position{line: 416, col: 16, offset: 12878},
																							run: (*parser).callonHeaderGroupElement120,
																							expr: &litMatcher{
																								pos:        position{line: 416, col: 16, offset: 12878},
																								val:        "{",
																								ignoreCase: false,
																								want:       "\"{\"",
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 422, col: 5, offset: 13064},
																	val:        "]]",
																	ignoreCase: false,
																	want:       "\"]]\"",
																},
															},
														},
													},
												},
												&zeroOrMoreExpr{
													pos: position{line: 2684, col: 40, offset: 88428},
													expr: &actionExpr{
														pos: position{line: 3080, col: 10, offset: 100200},
														run: (*parser).callonHeaderGroupElement124,
														expr: &charClassMatcher{
															pos:        position{line: 3080, col: 11, offset: 100201},
															val:        "[ \\t]",
															chars:      []rune{' ', '\t'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
												&andExpr{
													pos: position{line: 2684, col: 47, offset: 88435},
													expr: &notExpr{
														pos: position{line: 3093, col: 8, offset: 100474},
														expr: &anyMatcher{
															line: 3093, col: 9, offset: 100475,
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 3080, col: 10, offset: 100200},
										run: (*parser).callonHeaderGroupElement129,
										expr: &charClassMatcher{
											pos:        position{line: 3080, col: 11, offset: 100201},
											val:        "[ \\t]",
											chars:      []rune{' ', '\t'},
											ignoreCase: false,
											inverted:   false,
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2686, col: 11, offset: 88508},
										name: "InlinePassthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 2687, col: 11, offset: 88536},
										name: "Quote",
									},
									&ruleRefExpr{
										pos:  position{line: 2688, col: 11, offset: 88552},
										name: "Link",
									},
									&actionExpr{
										pos: position{line: 2753, col: 5, offset: 90225},
										run: (*parser).callonHeaderGroupElement134,
										expr: &seqExpr{
											pos: position{line: 2753, col: 5, offset: 90225},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 2753, col: 5, offset: 90225},
													run: (*parser).callonHeaderGroupElement136,
												},
												&labeledExpr{
													pos:   position{line: 2756, col: 5, offset: 90301},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 2758, col: 9, offset: 90399},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2758, col: 9, offset: 90399},
																run: (*parser).callonHeaderGroupElement139,
																expr: &choiceExpr{
																	pos: position{line: 699, col: 27, offset: 22665},
																	alternatives: []interface{}{
																		&actionExpr{
																			pos: position{line: 699, col: 27, offset: 22665},
																			run: (*parser).callonHeaderGroupElement141,
																			expr: &seqExpr{
																				pos: position{line: 699, col: 27, offset: 22665},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 699, col: 27, offset: 22665},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 699, col: 32, offset: 22670},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 3065, col: 7, offset: 99852},
																							run: (*parser).callonHeaderGroupElement145,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 3065, col: 7, offset: 99852},
																								expr: &charClassMatcher{
																									pos:        position{line: 3065, col: 7, offset: 99852},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&zeroOrMoreExpr{
																						pos: position{line: 699, col: 40, offset: 22678},
																						expr: &actionExpr{
																							pos: position{line: 3080, col: 10, offset: 100200},
																							run: (*parser).callonHeaderGroupElement149,
																							expr: &charClassMatcher{
																								pos:        position{line: 3080, col: 11, offset: 100201},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 699, col: 47, offset: 22685},
																						val:        ",",
																						ignoreCase: false,
																						want:       "\",\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 699, col: 51, offset: 22689},
																						label: "label",
																						expr: &oneOrMoreExpr{
																							pos: position{line: 709, col: 24, offset: 23090},
																							expr: &choiceExpr{
																								pos: position{line: 710, col: 5, offset: 23096},
																								alternatives: []interface{}{
																									&actionExpr{
																										pos: position{line: 710, col: 6, offset: 23097},
																										run: (*parser).callonHeaderGroupElement155,
																										expr: &seqExpr{
																											pos: position{line: 710, col: 6, offset: 23097},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 710, col: 6, offset: 23097},
																													val:        "[0-9\\pL]",
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&oneOrMoreExpr{
																													pos: position{line: 710, col: 14, offset: 23105},
																													expr: &charClassMatcher{
																														pos:        position{line: 710, col: 14, offset: 23105},
																														val:        "[^\\r\\n{<>]",
																														chars:      []rune{'\r', '\n', '{', '<', '>'},
																														ignoreCase: false,
																														inverted:   true,
																													},
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 657, col: 5, offset: 21090},
																										run: (*parser).callonHeaderGroupElement160,
																										expr: &seqExpr{
																											pos: position{line: 657, col: 5, offset: 21090},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 657, col: 5, offset: 21090},
																													val:        "\\{",
																													ignoreCase: false,
																													want:       "\"\\\\{\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 657, col: 13, offset: 21098},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 324, col: 18, offset: 10072},
																														run: (*parser).callonHeaderGroupElement164,
																														expr: &seqExpr{
																															pos: position{line: 324, col: 18, offset: 10072},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 324, col: 18, offset: 10072},
																																	val:        "[_0-9\\pL]",
																																	chars:      []rune{'_'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 324, col: 28, offset: 10082},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 324, col: 29, offset: 10083},
																																		val:        "[-0-9\\pL]",
																																		chars:      []rune{'-'},
																																		ranges:     []rune{'0', '9'},
																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 657, col: 32, offset: 21117},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 664, col: 5, offset: 21358},
																										run: (*parser).callonHeaderGroupElement170,
																										expr: &seqExpr{
																											pos: position{line: 664, col: 5, offset: 21358},
																											exprs: []interface{}{
																												&litMatcher{
																													pos:        position{line: 664, col: 5, offset: 21358},
																													val:        "{",
																													ignoreCase: false,
																													want:       "\"{\"",
																												},
																												&labeledExpr{
																													pos:   position{line: 664, col: 9, offset: 21362},
																													label: "name",
																													expr: &actionExpr{
																														pos: position{line: 324, col: 18, offset: 10072},
																														run: (*parser).callonHeaderGroupElement174,
																														expr: &seqExpr{
																															pos: position{line: 324, col: 18, offset: 10072},
																															exprs: []interface{}{
																																&charClassMatcher{
																																	pos:        position{line: 324, col: 18, offset: 10072},
																																	val:        "[_0-9\\pL]",
																																	chars:      []rune{'_'},
																																	ranges:     []rune{'0', '9'},
																																	classes:    []*unicode.RangeTable{rangeTable("L")},
																																	ignoreCase: false,
																																	inverted:   false,
																																},
																																&zeroOrMoreExpr{
																																	pos: position{line: 324, col: 28, offset: 10082},
																																	expr: &charClassMatcher{
																																		pos:        position{line: 324, col: 29, offset: 10083},
																																		val:        "[-0-9\\pL]",
																																		chars:      []rune{'-'},
																																		ranges:     []rune{'0', '9'},
																																		classes:    []*unicode.RangeTable{rangeTable("L")},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																															},
																														},
																													},
																												},
																												&litMatcher{
																													pos:        position{line: 664, col: 28, offset: 21381},
																													val:        "}",
																													ignoreCase: false,
																													want:       "\"}\"",
																												},
																											},
																										},
																									},
																									&actionExpr{
																										pos: position{line: 714, col: 8, offset: 23331},
																										run: (*parser).callonHeaderGroupElement180,
																										expr: &litMatcher{
																											pos:        position{line: 714, col: 8, offset: 23331},
																											val:        "{",
																											ignoreCase: false,
																											want:       "\"{\"",
																										},
																									},
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 699, col: 79, offset: 22717},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																		&actionExpr{
																			pos: position{line: 701, col: 9, offset: 22790},
																			run: (*parser).callonHeaderGroupElement183,
																			expr: &seqExpr{
																				pos: position{line: 701, col: 9, offset: 22790},
																				exprs: []interface{}{
																					&litMatcher{
																						pos:        position{line: 701, col: 9, offset: 22790},
																						val:        "<<",
																						ignoreCase: false,
																						want:       "\"<<\"",
																					},
																					&labeledExpr{
																						pos:   position{line: 701, col: 14, offset: 22795},
																						label: "id",
																						expr: &actionExpr{
																							pos: position{line: 3065, col: 7, offset: 99852},
																							run: (*parser).callonHeaderGroupElement187,
																							expr: &oneOrMoreExpr{
																								pos: position{line: 3065, col: 7, offset: 99852},
																								expr: &charClassMatcher{
																									pos:        position{line: 3065, col: 7, offset: 99852},
																									val:        "[^[]<>,]",
																									chars:      []rune{'[', ']', '<', '>', ','},
																									ignoreCase: false,
																									inverted:   true,
																								},
																							},
																						},
																					},
																					&litMatcher{
																						pos:        position{line: 701, col: 22, offset: 22803},
																						val:        ">>",
																						ignoreCase: false,
																						want:       "\">>\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2761, col: 11, offset: 90503},
																run: (*parser).callonHeaderGroupElement191,
																expr: &charClassMatcher{
																	pos:        position{line: 2761, col: 12, offset: 90504},
																	val:        "[<>&]",
																	chars:      []rune{'<', '>', '&'},
																	ignoreCase: false,
																	inverted:   false,
																},
															},
														},
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2690, col: 11, offset: 88637},
										name: "InlineIcon",
									},
									&actionExpr{
										pos: position{line: 648, col: 5, offset: 20883},
										run: (*parser).callonHeaderGroupElement194,
										expr: &seqExpr{
											pos: position{line: 648, col: 5, offset: 20883},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 648, col: 5, offset: 20883},
													run: (*parser).callonHeaderGroupElement196,
												},
												&labeledExpr{
													pos:   position{line: 651, col: 5, offset: 20952},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 651, col: 14, offset: 20961},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 671, col: 25, offset: 21614},
																run: (*parser).callonHeaderGroupElement199,
																expr: &seqExpr{
																	pos: position{line: 671, col: 25, offset: 21614},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 671, col: 25, offset: 21614},
																			val:        "{counter:",
																			ignoreCase: false,
																			want:       "\"{counter:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 671, col: 37, offset: 21626},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 324, col: 18, offset: 10072},
																				run: (*parser).callonHeaderGroupElement203,
																				expr: &seqExpr{
																					pos: position{line: 324, col: 18, offset: 10072},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 324, col: 18, offset: 10072},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 324, col: 28, offset: 10082},
																							expr: &charClassMatcher{
																								pos:        position{line: 324, col: 29, offset: 10083},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 671, col: 56, offset: 21645},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 671, col: 62, offset: 21651},
																				expr: &actionExpr{
																					pos: position{line: 679, col: 17, offset: 21946},
																					run: (*parser).callonHeaderGroupElement210,
																					expr: &seqExpr{
																						pos: position{line: 679, col: 17, offset: 21946},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 679, col: 17, offset: 21946},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 679, col: 21, offset: 21950},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 679, col: 28, offset: 21957},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 679, col: 28, offset: 21957},
																											run: (*parser).callonHeaderGroupElement215,
																											expr: &charClassMatcher{
																												pos:        position{line: 679, col: 28, offset: 21957},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 681, col: 9, offset: 22011},
																											run: (*parser).callonHeaderGroupElement217,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 681, col: 9, offset: 22011},
																												expr: &charClassMatcher{
																													pos:        position{line: 681, col: 9, offset: 22011},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 671, col: 78, offset: 21667},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 675, col: 25, offset: 21785},
																run: (*parser).callonHeaderGroupElement221,
																expr: &seqExpr{
																	pos: position{line: 675, col: 25, offset: 21785},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 675, col: 25, offset: 21785},
																			val:        "{counter2:",
																			ignoreCase: false,
																			want:       "\"{counter2:\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 675, col: 38, offset: 21798},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 324, col: 18, offset: 10072},
																				run: (*parser).callonHeaderGroupElement225,
																				expr: &seqExpr{
																					pos: position{line: 324, col: 18, offset: 10072},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 324, col: 18, offset: 10072},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 324, col: 28, offset: 10082},
																							expr: &charClassMatcher{
																								pos:        position{line: 324, col: 29, offset: 10083},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&labeledExpr{
																			pos:   position{line: 675, col: 57, offset: 21817},
																			label: "start",
																			expr: &zeroOrOneExpr{
																				pos: position{line: 675, col: 63, offset: 21823},
																				expr: &actionExpr{
																					pos: position{line: 679, col: 17, offset: 21946},
																					run: (*parser).callonHeaderGroupElement232,
																					expr: &seqExpr{
																						pos: position{line: 679, col: 17, offset: 21946},
																						exprs: []interface{}{
																							&litMatcher{
																								pos:        position{line: 679, col: 17, offset: 21946},
																								val:        ":",
																								ignoreCase: false,
																								want:       "\":\"",
																							},
																							&labeledExpr{
																								pos:   position{line: 679, col: 21, offset: 21950},
																								label: "start",
																								expr: &choiceExpr{
																									pos: position{line: 679, col: 28, offset: 21957},
																									alternatives: []interface{}{
																										&actionExpr{
																											pos: position{line: 679, col: 28, offset: 21957},
																											run: (*parser).callonHeaderGroupElement237,
																											expr: &charClassMatcher{
																												pos:        position{line: 679, col: 28, offset: 21957},
																												val:        "[A-Za-z]",
																												ranges:     []rune{'A', 'Z', 'a', 'z'},
																												ignoreCase: false,
																												inverted:   false,
																											},
																										},
																										&actionExpr{
																											pos: position{line: 681, col: 9, offset: 22011},
																											run: (*parser).callonHeaderGroupElement239,
																											expr: &oneOrMoreExpr{
																												pos: position{line: 681, col: 9, offset: 22011},
																												expr: &charClassMatcher{
																													pos:        position{line: 681, col: 9, offset: 22011},
																													val:        "[0-9]",
																													ranges:     []rune{'0', '9'},
																													ignoreCase: false,
																													inverted:   false,
																												},
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 675, col: 79, offset: 21839},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 657, col: 5, offset: 21090},
																run: (*parser).callonHeaderGroupElement243,
																expr: &seqExpr{
																	pos: position{line: 657, col: 5, offset: 21090},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 657, col: 5, offset: 21090},
																			val:        "\\{",
																			ignoreCase: false,
																			want:       "\"\\\\{\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 657, col: 13, offset: 21098},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 324, col: 18, offset: 10072},
																				run: (*parser).callonHeaderGroupElement247,
																				expr: &seqExpr{
																					pos: position{line: 324, col: 18, offset: 10072},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 324, col: 18, offset: 10072},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 324, col: 28, offset: 10082},
																							expr: &charClassMatcher{
																								pos:        position{line: 324, col: 29, offset: 10083},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 657, col: 32, offset: 21117},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 664, col: 5, offset: 21358},
																run: (*parser).callonHeaderGroupElement253,
																expr: &seqExpr{
																	pos: position{line: 664, col: 5, offset: 21358},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 664, col: 5, offset: 21358},
																			val:        "{",
																			ignoreCase: false,
																			want:       "\"{\"",
																		},
																		&labeledExpr{
																			pos:   position{line: 664, col: 9, offset: 21362},
																			label: "name",
																			expr: &actionExpr{
																				pos: position{line: 324, col: 18, offset: 10072},
																				run: (*parser).callonHeaderGroupElement257,
																				expr: &seqExpr{
																					pos: position{line: 324, col: 18, offset: 10072},
																					exprs: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 324, col: 18, offset: 10072},
																							val:        "[_0-9\\pL]",
																							chars:      []rune{'_'},
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&zeroOrMoreExpr{
																							pos: position{line: 324, col: 28, offset: 10082},
																							expr: &charClassMatcher{
																								pos:        position{line: 324, col: 29, offset: 10083},
																								val:        "[-0-9\\pL]",
																								chars:      []rune{'-'},
																								ranges:     []rune{'0', '9'},
																								classes:    []*unicode.RangeTable{rangeTable("L")},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																		&litMatcher{
																			pos:        position{line: 664, col: 28, offset: 21381},
																			val:        "}",
																			ignoreCase: false,
																			want:       "\"}\"",
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1219, col: 23, offset: 38141},
										run: (*parser).callonHeaderGroupElement263,
										expr: &seqExpr{
											pos: position{line: 1219, col: 23, offset: 38141},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1217, col: 32, offset: 38109},
													val:        "�",
													ignoreCase: false,
													want:       "\"�\"",
												},
												&labeledExpr{
													pos:   position{line: 1219, col: 51, offset: 38169},
													label: "ref",
													expr: &actionExpr{
														pos: position{line: 1219, col: 56, offset: 38174},
														run: (*parser).callonHeaderGroupElement267,
														expr: &oneOrMoreExpr{
															pos: position{line: 1219, col: 56, offset: 38174},
															expr: &charClassMatcher{
																pos:        position{line: 1219, col: 56, offset: 38174},
																val:        "[0-9]",
																ranges:     []rune{'0', '9'},
																ignoreCase: false,
																inverted:   false,
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1217, col: 32, offset: 38109},
													val:        "�",
													ignoreCase: false,
													want:       "\"�\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 2742, col: 5, offset: 89999},
										run: (*parser).callonHeaderGroupElement271,
										expr: &seqExpr{
											pos: position{line: 2742, col: 5, offset: 89999},
											exprs: []interface{}{
												&andCodeExpr{
													pos: position{line: 2742, col: 5, offset: 89999},
													run: (*parser).callonHeaderGroupElement273,
												},
												&labeledExpr{
													pos:   position{line: 2745, col: 5, offset: 90070},
													label: "element",
													expr: &choiceExpr{
														pos: position{line: 2786, col: 5, offset: 91397},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2786, col: 5, offset: 91397},
																run: (*parser).callonHeaderGroupElement276,
																expr: &seqExpr{
																	pos: position{line: 2786, col: 5, offset: 91397},
																	exprs: []interface{}{
																		&litMatcher{
																			pos:        position{line: 2786, col: 5, offset: 91397},
																			val:        "\\",
																			ignoreCase: false,
																			want:       "\"\\\\\"",
																		},
																		&choiceExpr{
																			pos: position{line: 2786, col: 10, offset: 91402},
																			alternatives: []interface{}{
																				&actionExpr{
																					pos: position{line: 2795, col: 5, offset: 91692},
																					run: (*parser).callonHeaderGroupElement280,
																					expr: &litMatcher{
																						pos:        position{line: 2795, col: 5, offset: 91692},
																						val:        "\"`",
																						ignoreCase: false,
																						want:       "\"\\\"`\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2798, col: 7, offset: 91750},
																					run: (*parser).callonHeaderGroupElement282,
																					expr: &litMatcher{
																						pos:        position{line: 2798, col: 7, offset: 91750},
																						val:        "`\"",
																						ignoreCase: false,
																						want:       "\"`\\\"\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2801, col: 7, offset: 91808},
																					run: (*parser).callonHeaderGroupElement284,
																					expr: &litMatcher{
																						pos:        position{line: 2801, col: 7, offset: 91808},
																						val:        "'`",
																						ignoreCase: false,
																						want:       "\"'`\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2804, col: 7, offset: 91864},
																					run: (*parser).callonHeaderGroupElement286,
																					expr: &litMatcher{
																						pos:        position{line: 2804, col: 7, offset: 91864},
																						val:        "`'",
																						ignoreCase: false,
																						want:       "\"`'\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2810, col: 14, offset: 91986},
																					run: (*parser).callonHeaderGroupElement288,
																					expr: &litMatcher{
																						pos:        position{line: 2810, col: 14, offset: 91986},
																						val:        "(C)",
																						ignoreCase: false,
																						want:       "\"(C)\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2814, col: 14, offset: 92052},
																					run: (*parser).callonHeaderGroupElement290,
																					expr: &litMatcher{
																						pos:        position{line: 2814, col: 14, offset: 92052},
																						val:        "(TM)",
																						ignoreCase: false,
																						want:       "\"(TM)\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2818, col: 15, offset: 92121},
																					run: (*parser).callonHeaderGroupElement292,
																					expr: &litMatcher{
																						pos:        position{line: 2818, col: 15, offset: 92121},
																						val:        "(R)",
																						ignoreCase: false,
																						want:       "\"(R)\"",
																					},
																				},
																				&actionExpr{
																					pos: position{line: 2822, col: 13, offset: 92186},
																					run: (*parser).callonHeaderGroupElement294,
																					expr: &litMatcher{
																						pos:        position{line: 2822, col: 13, offset: 92186},
																						val:        "...",
																						ignoreCase: false,
																						want:       "\"...\"",
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2795, col: 5, offset: 91692},
																run: (*parser).callonHeaderGroupElement296,
																expr: &litMatcher{
																	pos:        position{line: 2795, col: 5, offset: 91692},
																	val:        "\"`",
																	ignoreCase: false,
																	want:       "\"\\\"`\"",
																},
															},
															&actionExpr{
																pos: position{line: 2798, col: 7, offset: 91750},
																run: (*parser).callonHeaderGroupElement298,
																expr: &litMatcher{
																	pos:        position{line: 2798, col: 7, offset: 91750},
																	val:        "`\"",
																	ignoreCase: false,
																	want:       "\"`\\\"\"",
																},
															},
															&actionExpr{
																pos: position{line: 2801, col: 7, offset: 91808},
																run: (*parser).callonHeaderGroupElement300,
																expr: &litMatcher{
																	pos:        position{line: 2801, col: 7, offset: 91808},
																	val:        "'`",
																	ignoreCase: false,
																	want:       "\"'`\"",
																},
															},
															&actionExpr{
																pos: position{line: 2804, col: 7, offset: 91864},
																run: (*parser).callonHeaderGroupElement302,
																expr: &litMatcher{
																	pos:        position{line: 2804, col: 7, offset: 91864},
																	val:        "`'",
																	ignoreCase: false,
																	want:       "\"`'\"",
																},
															},
															&actionExpr{
																pos: position{line: 2810, col: 14, offset: 91986},
																run: (*parser).callonHeaderGroupElement304,
																expr: &litMatcher{
																	pos:        position{line: 2810, col: 14, offset: 91986},
																	val:        "(C)",
																	ignoreCase: false,
																	want:       "\"(C)\"",
																},
															},
															&actionExpr{
																pos: position{line: 2814, col: 14, offset: 92052},
																run: (*parser).callonHeaderGroupElement306,
																expr: &litMatcher{
																	pos:        position{line: 2814, col: 14, offset: 92052},
																	val:        "(TM)",
																	ignoreCase: false,
																	want:       "\"(TM)\"",
																},
															},
															&actionExpr{
																pos: position{line: 2818, col: 15, offset: 92121},
																run: (*parser).callonHeaderGroupElement308,
																expr: &litMatcher{
																	pos:        position{line: 2818, col: 15, offset: 92121},
																	val:        "(R)",
																	ignoreCase: false,
																	want:       "\"(R)\"",
																},
															},
															&actionExpr{
																pos: position{line: 2822, col: 13, offset: 92186},
																run: (*parser).callonHeaderGroupElement310,
																expr: &litMatcher{
																	pos:        position{line: 2822, col: 13, offset: 92186},
																	val:        "...",
																	ignoreCase: false,
																	want:       "\"...\"",
																},
															},
															&actionExpr{
																pos: position{line: 2833, col: 5, offset: 92496},
																run: (*parser).callonHeaderGroupElement312,
																expr: &seqExpr{
																	pos: position{line: 2833, col: 5, offset: 92496},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 2994, col: 13, offset: 97463},
																			val:        "[0-9\\pL]",
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&litMatcher{
																			pos:        position{line: 2833, col: 14, offset: 92505},
																			val:        "\\'",
																			ignoreCase: false,
																			want:       "\"\\\\'\"",
																		},
																		&andExpr{
																			pos: position{line: 2833, col: 19, offset: 92510},
																			expr: &charClassMatcher{
																				pos:        position{line: 2833, col: 20, offset: 92511},
																				val:        "[\\pL]",
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2839, col: 5, offset: 92742},
																run: (*parser).callonHeaderGroupElement318,
																expr: &seqExpr{
																	pos: position{line: 2839, col: 5, offset: 92742},
																	exprs: []interface{}{
																		&charClassMatcher{
																			pos:        position{line: 2994, col: 13, offset: 97463},
																			val:        "[0-9\\pL]",
																			ranges:     []rune{'0', '9'},
																			classes:    []*unicode.RangeTable{rangeTable("L")},
																			ignoreCase: false,
																			inverted:   false,
																		},
																		&litMatcher{
																			pos:        position{line: 2839, col: 14, offset: 92751},
																			val:        "'",
																			ignoreCase: false,
																			want:       "\"'\"",
																		},
																		&andExpr{
																			pos: position{line: 2839, col: 18, offset: 92755},
																			expr: &charClassMatcher{
																				pos:        position{line: 2839, col: 19, offset: 92756},
																				val:        "[\\pL]",
																				classes:    []*unicode.RangeTable{rangeTable("L")},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1300, col: 5, offset: 40769},
										run: (*parser).callonHeaderGroupElement324,
										expr: &seqExpr{
											pos: position{line: 1300, col: 5, offset: 40769},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1300, col: 5, offset: 40769},
													val:        "\\[[",
													ignoreCase: false,
													want:       "\"\\\\[[\"",
												},
												&labeledExpr{
													pos:   position{line: 1300, col: 14, offset: 40778},
													label: "id",
													expr: &actionExpr{
														pos: position{line: 3065, col: 7, offset: 99852},
														run: (*parser).callonHeaderGroupElement328,
														expr: &oneOrMoreExpr{
															pos: position{line: 3065, col: 7, offset: 99852},
															expr: &charClassMatcher{
																pos:        position{line: 3065, col: 7, offset: 99852},
																val:        "[^[]<>,]",
																chars:      []rune{'[', ']', '<', '>', ','},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1300, col: 22, offset: 40786},
													val:        "]]",
													ignoreCase: false,
													want:       "\"]]\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1306, col: 5, offset: 40972},
										run: (*parser).callonHeaderGroupElement332,
										expr: &seqExpr{
											pos: position{line: 1306, col: 5, offset: 40972},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1306, col: 5, offset: 40972},
													val:        "[[",
													ignoreCase: false,
													want:       "\"[[\"",
												},
												&labeledExpr{
													pos:   position{line: 1306, col: 10, offset: 40977},
													label: "id",
													expr: &actionExpr{
														pos: position{line: 3065, col: 7, offset: 99852},
														run: (*parser).callonHeaderGroupElement336,
														expr: &oneOrMoreExpr{
															pos: position{line: 3065, col: 7, offset: 99852},
															expr: &charClassMatcher{
																pos:        position{line: 3065, col: 7, offset: 99852},
																val:        "[^[]<>,]",
																chars:      []rune{'[', ']', '<', '>', ','},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1306, col: 18, offset: 40985},
													val:        "]]",
													ignoreCase: false,
													want:       "\"]]\"",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2695, col: 11, offset: 88882},
										name: "InlineFootnote",
									},
									&actionExpr{
										pos: position{line: 3032, col: 12, offset: 98735},
										run: (*parser).callonHeaderGroupElement341,
										expr: &anyMatcher{
											line: 3032, col: 12, offset: 98735,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineMacro",
			pos:  position{line: 2700, col: 1, offset: 88961},
			expr: &actionExpr{
				pos: position{line: 2702, col: 5, offset: 89043},
				run: (*parser).callonInlineMacro1,
				expr: &seqExpr{
					pos: position{line: 2702, col: 5, offset: 89043},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 2702, col: 5, offset: 89043},
							run: (*parser).callonInlineMacro3,
						},
						&labeledExpr{
							pos:   position{line: 2705, col: 5, offset: 89108},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 2706, col: 9, offset: 89126},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 2706, col: 9, offset: 89126},
										name: "InlineIcon",
									},
									&ruleRefExpr{
										pos:  position{line: 2707, col: 11, offset: 89147},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 2708, col: 11, offset: 89170},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 2709, col: 11, offset: 89186},
										name: "InlinePassthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 2710, col: 11, offset: 89215},
										name: "InlineFootnote",
									},
									&ruleRefExpr{
										pos:  position{line: 2711, col: 11, offset: 89241},
										name: "CrossReference",
									},
									&ruleRefExpr{
										pos:  position{line: 2712, col: 11, offset: 89267},
										name: "InlineUserMacro",
									},
									&actionExpr{
										pos: position{line: 1300, col: 5, offset: 40769},
										run: (*parser).callonInlineMacro13,
										expr: &seqExpr{
											pos: position{line: 1300, col: 5, offset: 40769},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1300, col: 5, offset: 40769},
													val:        "\\[[",
													ignoreCase: false,
													want:       "\"\\\\[[\"",
												},
												&labeledExpr{
													pos:   position{line: 1300, col: 14, offset: 40778},
													label: "id",
													expr: &actionExpr{
														pos: position{line: 3065, col: 7, offset: 99852},
														run: (*parser).callonInlineMacro17,
														expr: &oneOrMoreExpr{
															pos: position{line: 3065, col: 7, offset: 99852},
															expr: &charClassMatcher{
																pos:        position{line: 3065, col: 7, offset: 99852},
																val:        "[^[]<>,]",
																chars:      []rune{'[', ']', '<', '>', ','},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1300, col: 22, offset: 40786},
													val:        "]]",
													ignoreCase: false,
													want:       "\"]]\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1306, col: 5, offset: 40972},
										run: (*parser).callonInlineMacro21,
										expr: &seqExpr{
											pos: position{line: 1306, col: 5, offset: 40972},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1306, col: 5, offset: 40972},
													val:        "[[",
													ignoreCase: false,
													want:       "\"[[\"",
												},
												&labeledExpr{
													pos:   position{line: 1306, col: 10, offset: 40977},
													label: "id",
													expr: &actionExpr{
														pos: position{line: 3065, col: 7, offset: 99852},
														run: (*parser).callonInlineMacro25,
														expr: &oneOrMoreExpr{
															pos: position{line: 3065, col: 7, offset: 99852},
															expr: &charClassMatcher{
																pos:        position{line: 3065, col: 7, offset: 99852},
																val:        "[^[]<>,]",
																chars:      []rune{'[', ']', '<', '>', ','},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1306, col: 18, offset: 40985},
													val:        "]]",
													ignoreCase: false,
													want:       "\"]]\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1345, col: 23, offset: 42456},
										run: (*parser).callonInlineMacro29,
										expr: &seqExpr{
											pos: position{line: 1345, col: 23, offset: 42456},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1345, col: 23, offset: 42456},
													val:        "(((",
													ignoreCase: false,
													want:       "\"(((\"",
												},
												&labeledExpr{
													pos:   position{line: 1345, col: 29, offset: 42462},
													label: "term1",
													expr: &actionExpr{
														pos: position{line: 1352, col: 30, offset: 42793},
														run: (*parser).callonInlineMacro33,
														expr: &oneOrMoreExpr{
															pos: position{line: 1352, col: 30, offset: 42793},
															expr: &choiceExpr{
																pos: position{line: 1352, col: 31, offset: 42794},
																alternatives: []interface{}{
																	&charClassMatcher{
																		pos:        position{line: 2994, col: 13, offset: 97463},
																		val:        "[0-9\\pL]",
																		ranges:     []rune{'0', '9'},
																		classes:    []*unicode.RangeTable{rangeTable("L")},
																		ignoreCase: false,
																		inverted:   false,
																	},
																	&actionExpr{
																		pos: position{line: 3080, col: 10, offset: 100200},
																		run: (*parser).callonInlineMacro37,
																		expr: &charClassMatcher{
																			pos:        position{line: 3080, col: 11, offset: 100201},
																			val:        "[ \\t]",
																			chars:      []rune{' ', '\t'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1346, col: 5, offset: 42501},
													label: "term2",
													expr: &zeroOrOneExpr{
														pos: position{line: 1346, col: 11, offset: 42507},
														expr: &actionExpr{
															pos: position{line: 1346, col: 12, offset: 42508},
															run: (*parser).callonInlineMacro41,
															expr: &seqExpr{
																pos: position{line: 1346, col: 12, offset: 42508},
																exprs: []interface{}{
																	&zeroOrMoreExpr{
																		pos: position{line: 1346, col: 12, offset: 42508},
																		expr: &actionExpr{
																			pos: position{line: 3080, col: 10, offset: 100200},
																			run: (*parser).callonInlineMacro44,
																			expr: &charClassMatcher{
																				pos:        position{line: 3080, col: 11, offset: 100201},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 1346, col: 19, offset: 42515},
																		val:        ",",
																		ignoreCase: false,
																		want:       "\",\"",
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 1346, col: 23, offset: 42519},
																		expr: &actionExpr{
																			pos: position{line: 3080, col: 10, offset: 100200},
																			run: (*parser).callonInlineMacro48,
																			expr: &charClassMatcher{
																				pos:        position{line: 3080, col: 11, offset: 100201},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 1346, col: 30, offset: 42526},
																		label: "content",
																		expr: &actionExpr{
																			pos: position{line: 1352, col: 30, offset: 42793},
																			run: (*parser).callonInlineMacro51,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 1352, col: 30, offset: 42793},
																				expr: &choiceExpr{
																					pos: position{line: 1352, col: 31, offset: 42794},
																					alternatives: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 2994, col: 13, offset: 97463},
																							val:        "[0-9\\pL]",
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&actionExpr{
																							pos: position{line: 3080, col: 10, offset: 100200},
																							run: (*parser).callonInlineMacro55,
																							expr: &charClassMatcher{
																								pos:        position{line: 3080, col: 11, offset: 100201},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 1347, col: 5, offset: 42593},
													label: "term3",
													expr: &zeroOrOneExpr{
														pos: position{line: 1347, col: 11, offset: 42599},
														expr: &actionExpr{
															pos: position{line: 1347, col: 12, offset: 42600},
															run: (*parser).callonInlineMacro59,
															expr: &seqExpr{
																pos: position{line: 1347, col: 12, offset: 42600},
																exprs: []interface{}{
																	&zeroOrMoreExpr{
																		pos: position{line: 1347, col: 12, offset: 42600},
																		expr: &actionExpr{
																			pos: position{line: 3080, col: 10, offset: 100200},
																			run: (*parser).callonInlineMacro62,
																			expr: &charClassMatcher{
																				pos:        position{line: 3080, col: 11, offset: 100201},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&litMatcher{
																		pos:        position{line: 1347, col: 19, offset: 42607},
																		val:        ",",
																		ignoreCase: false,
																		want:       "\",\"",
																	},
																	&zeroOrMoreExpr{
																		pos: position{line: 1347, col: 23, offset: 42611},
																		expr: &actionExpr{
																			pos: position{line: 3080, col: 10, offset: 100200},
																			run: (*parser).callonInlineMacro66,
																			expr: &charClassMatcher{
																				pos:        position{line: 3080, col: 11, offset: 100201},
																				val:        "[ \\t]",
																				chars:      []rune{' ', '\t'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																	&labeledExpr{
																		pos:   position{line: 1347, col: 30, offset: 42618},
																		label: "content",
																		expr: &actionExpr{
																			pos: position{line: 1352, col: 30, offset: 42793},
																			run: (*parser).callonInlineMacro69,
																			expr: &oneOrMoreExpr{
																				pos: position{line: 1352, col: 30, offset: 42793},
																				expr: &choiceExpr{
																					pos: position{line: 1352, col: 31, offset: 42794},
																					alternatives: []interface{}{
																						&charClassMatcher{
																							pos:        position{line: 2994, col: 13, offset: 97463},
																							val:        "[0-9\\pL]",
																							ranges:     []rune{'0', '9'},
																							classes:    []*unicode.RangeTable{rangeTable("L")},
																							ignoreCase: false,
																							inverted:   false,
																						},
																						&actionExpr{
																							pos: position{line: 3080, col: 10, offset: 100200},
																							run: (*parser).callonInlineMacro73,
																							expr: &charClassMatcher{
																								pos:        position{line: 3080, col: 11, offset: 100201},
																								val:        "[ \\t]",
																								chars:      []rune{' ', '\t'},
																								ignoreCase: false,
																								inverted:   false,
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1348, col: 5, offset: 42685},
													val:        ")))",
													ignoreCase: false,
													want:       "\")))\"",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2715, col: 11, offset: 89346},
										name: "IndexTerm",
									},
									&ruleRefExpr{
										pos:  position{line: 2716, col: 11, offset: 89366},
										name: "InlineButton",
									},
									&ruleRefExpr{
										pos:  position{line: 2717, col: 11, offset: 89389},
										name: "InlineMenu",
									},
									&ruleRefExpr{
										pos:  position{line: 2718, col: 11, offset: 89410},
										name: "InlineUserMacro",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlinePassthrough",
			pos:  position{line: 2722, col: 1, offset: 89472},
			expr: &actionExpr{
				pos: position{line: 2724, col: 5, offset: 89560},
				run: (*parser).callonInlinePassthrough1,
				expr: &seqExpr{
					pos: position{line: 2724, col: 5, offset: 89560},
					exprs: []interface{}{
						&andCodeExpr{
							pos: position{line: 2724, col: 5, offset: 89560},
							run: (*parser).callonInlinePassthrough3,
						},
						&labeledExpr{
							pos:   position{line: 2727, col: 5, offset: 89637},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 2728, col: 9, offset: 89655},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 1417, col: 26, offset: 45813},
										run: (*parser).callonInlinePassthrough6,
										expr: &seqExpr{
											pos: position{line: 1417, col: 26, offset: 45813},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1415, col: 32, offset: 45781},
													val:        "+++",
													ignoreCase: false,
													want:       "\"+++\"",
												},
												&labeledExpr{
													pos:   position{line: 1417, col: 54, offset: 45841},
													label: "content",
													expr: &choiceExpr{
														pos: position{line: 1421, col: 33, offset: 46054},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 1421, col: 34, offset: 46055},
																run: (*parser).callonInlinePassthrough11,
																expr: &zeroOrMoreExpr{
																	pos: position{line: 1421, col: 34, offset: 46055},
																	expr: &seqExpr{
																		pos: position{line: 1421, col: 35, offset: 46056},
																		exprs: []interface{}{
																			&notExpr{
																				pos: position{line: 1421, col: 35, offset: 46056},
																				expr: &litMatcher{
																					pos:        position{line: 1415, col: 32, offset: 45781},
																					val:        "+++",
																					ignoreCase: false,
																					want:       "\"+++\"",
																				},
																			},
																			&anyMatcher{
																				line: 1421, col: 64, offset: 46085,
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 1423, col: 11, offset: 46258},
																run: (*parser).callonInlinePassthrough17,
																expr: &zeroOrOneExpr{
																	pos: position{line: 1423, col: 11, offset: 46258},
																	expr: &seqExpr{
																		pos: position{line: 1423, col: 12, offset: 46259},
																		exprs: []interface{}{
																			&notExpr{
																				pos: position{line: 1423, col: 12, offset: 46259},
																				expr: &actionExpr{
																					pos: position{line: 3080, col: 10, offset: 100200},
																					run: (*parser).callonInlinePassthrough21,
																					expr: &charClassMatcher{
																						pos:        position{line: 3080, col: 11, offset: 100201},
																						val:        "[ \\t]",
																						chars:      []rune{' ', '\t'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 1423, col: 19, offset: 46266},
																				expr: &actionExpr{
																					pos: position{line: 3089, col: 12, offset: 100384},
																					run: (*parser).callonInlinePassthrough24,
																					expr: &choiceExpr{
																						pos: position{line: 3089, col: 13, offset: 100385},
																						alternatives: []interface{}{
																							&litMatcher{
																								pos:        position{line: 3089, col: 13, offset: 100385},
																								val:        "\n",
																								ignoreCase: false,
																								want:       "\"\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 3089, col: 20, offset: 100392},
																								val:        "\r\n",
																								ignoreCase: false,
																								want:       "\"\\r\\n\"",
																							},
																							&litMatcher{
																								pos:        position{line: 3089, col: 29, offset: 100401},
																								val:        "\r",
																								ignoreCase: false,
																								want:       "\"\\r\"",
																							},
																						},
																					},
																				},
																			},
																			&notExpr{
																				pos: position{line: 1423, col: 28, offset: 46275},
																				expr: &litMatcher{
																					pos:        position{line: 1415, col: 32, offset: 45781},
																					val:        "+++",
																					ignoreCase: false,
																					want:       "\"+++\"",
																				},
																			},
																			&anyMatcher{
																				line: 1423, col: 57, offset: 46304,
																			},
																		},
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1415, col: 32, offset: 45781},
													val:        "+++",
													ignoreCase: false,
													want:       "\"+++\"",
												},
												&notExpr{
													pos: position{line: 1417, col: 121, offset: 45908},
													expr: &charClassMatcher{
														pos:        position{line: 2994, col: 13, offset: 97463},
														val:        "[0-9\\pL]",
														ranges:     []rune{'0', '9'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 1405, col: 26, offset: 45096},
										run: (*parser).callonInlinePassthrough35,
										expr: &seqExpr{
											pos: position{line: 1405, col: 26, offset: 45096},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 1403, col: 32, offset: 45066},
													val:        "+",
													ignoreCase: false,
													want:       "\"+\"",
												},
												&labeledExpr{
													pos:   position{line: 1405, col: 54, offset: 45124},
													label: "content",
													expr: &choiceExpr{
														pos: position{line: 1409, col: 33, offset: 45337},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 1409, col: 34, offset: 45338},
																run: (*parser).callonInlinePassthrough40,
																expr: &seqExpr{
																	pos: position{line: 1409, col: 34, offset: 45338},
																	exprs: []interface{}{
																		&notExpr{
																			pos: position{line: 1409, col: 35, offset: 45339},
																			expr: &litMatcher{
																				pos:        position{line: 1403, col: 32, offset: 45066},
																				val:        "+",
																				ignoreCase: false,
																				want:       "\"+\"",
																			},
																		},
																		&notExpr{
																			pos: position{line: 1409, col: 64, offset: 45368},
																			expr: &actionExpr{
																				pos: position{line: 3080, col: 10, offset: 100200},
																				run: (*parser).callonInlinePassthrough45,
																				expr: &charClassMatcher{
																					pos:        position{line: 3080, col: 11, offset: 100201},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 1409, col: 71, offset: 45375},
																			expr: &actionExpr{
																				pos: position{line: 3089, col: 12, offset: 100384},
																				run: (*parser).callonInlinePassthrough48,
																				expr: &choiceExpr{
																					pos: position{line: 3089, col: 13, offset: 100385},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 3089, col: 13, offset: 100385},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 3089, col: 20, offset: 100392},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 3089, col: 29, offset: 100401},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																		},
																		&anyMatcher{
																			line: 1409, col: 80, offset: 45384,
																		},
																		&zeroOrMoreExpr{
																			pos: position{line: 1409, col: 83, offset: 45387},
																			expr: &seqExpr{
																				pos: position{line: 1409, col: 84, offset: 45388},
																				exprs: []interface{}{
																					&notExpr{
																						pos: position{line: 1409, col: 84, offset: 45388},
																						expr: &seqExpr{
																							pos: position{line: 1409, col: 86, offset: 45390},
																							exprs: []interface{}{
																								&actionExpr{
																									pos: position{line: 3084, col: 11, offset: 100267},
																									run: (*parser).callonInlinePassthrough58,
																									expr: &oneOrMoreExpr{
																										pos: position{line: 3084, col: 11, offset: 100267},
																										expr: &charClassMatcher{
																											pos:        position{line: 3084, col: 12, offset: 100268},
																											val:        "[ \\t]",
																											chars:      []rune{' ', '\t'},
																											ignoreCase: false,
																											inverted:   false,
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 1403, col: 32, offset: 45066},
																									val:        "+",
																									ignoreCase: false,
																									want:       "\"+\"",
																								},
																							},
																						},
																					},
																					&notExpr{
																						pos: position{line: 1409, col: 122, offset: 45426},
																						expr: &litMatcher{
																							pos:        position{line: 1403, col: 32, offset: 45066},
																							val:        "+",
																							ignoreCase: false,
																							want:       "\"+\"",
																						},
																					},
																					&notExpr{
																						pos: position{line: 1409, col: 151, offset: 45455},
																						expr: &actionExpr{
																							pos: position{line: 3089, col: 12, offset: 100384},
																							run: (*parser).callonInlinePassthrough65,
																							expr: &choiceExpr{
																								pos: position{line: 3089, col: 13, offset: 100385},
																								alternatives: []interface{}{
																									&litMatcher{
																										pos:        position{line: 3089, col: 13, offset: 100385},
																										val:        "\n",
																										ignoreCase: false,
																										want:       "\"\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 3089, col: 20, offset: 100392},
																										val:        "\r\n",
																										ignoreCase: false,
																										want:       "\"\\r\\n\"",
																									},
																									&litMatcher{
																										pos:        position{line: 3089, col: 29, offset: 100401},
																										val:        "\r",
																										ignoreCase: false,
																										want:       "\"\\r\"",
																									},
																								},
																							},
																						},
																					},
																					&anyMatcher{
																						line: 1409, col: 160, offset: 45464,
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 1411, col: 11, offset: 45614},
																run: (*parser).callonInlinePassthrough71,
																expr: &seqExpr{
																	pos: position{line: 1411, col: 12, offset: 45615},
																	exprs: []interface{}{
																		&notExpr{
																			pos: position{line: 1411, col: 12, offset: 45615},
																			expr: &actionExpr{
																				pos: position{line: 3080, col: 10, offset: 100200},
																				run: (*parser).callonInlinePassthrough74,
																				expr: &charClassMatcher{
																					pos:        position{line: 3080, col: 11, offset: 100201},
																					val:        "[ \\t]",
																					chars:      []rune{' ', '\t'},
																					ignoreCase: false,
																					inverted:   false,
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 1411, col: 19, offset: 45622},
																			expr: &actionExpr{
																				pos: position{line: 3089, col: 12, offset: 100384},
																				run: (*parser).callonInlinePassthrough77,
																				expr: &choiceExpr{
																					pos: position{line: 3089, col: 13, offset: 100385},
																					alternatives: []interface{}{
																						&litMatcher{
																							pos:        position{line: 3089, col: 13, offset: 100385},
																							val:        "\n",
																							ignoreCase: false,
																							want:       "\"\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 3089, col: 20, offset: 100392},
																							val:        "\r\n",
																							ignoreCase: false,
																							want:       "\"\\r\\n\"",
																						},
																						&litMatcher{
																							pos:        position{line: 3089, col: 29, offset: 100401},
																							val:        "\r",
																							ignoreCase: false,
																							want:       "\"\\r\"",
																						},
																					},
																				},
																			},
																		},
																		&notExpr{
																			pos: position{line: 1411, col: 28, offset: 45631},
																			expr: &litMatcher{
																				pos:        position{line: 1403, col: 32, offset: 45066},
																				val:        "+",
																				ignoreCase: false,
																				want:       "\"+\"",
																			},
																		},
																		&anyMatcher{
																			line: 1411, col: 57, offset: 45660,
																		},
																	},
																},
															},
														},
													},
												},
												&litMatcher{
													pos:        position{line: 1403, col: 32, offset: 45066},
													val:        "+",
													ignoreCase: false,
													want:       "\"+\"",
												},
												&notExpr{
													pos: position{line: 1405, col: 121, offset: 45191},
													expr: &charClassMatcher{
														pos:        position{line: 2994, col: 13, offset: 97463},
														val:        "[0-9\\pL]",
														ranges:     []rune{'0', '9'},
														classes:    []*unicode.RangeTable{rangeTable("L")},
														ignoreCase: false,
														inverted:   false,
													},
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 2728, col: 57, offset: 89703},
										name: "PassthroughMacro",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Quote",
			pos:  position{line: 2733, col: 1, offset: 89763},
			expr: &seqExpr{
				pos: position{line: 2735, col: 5, offset: 89839},
				exprs: []interface{}{
					&andCodeExpr{
						pos: position{line: 2735, col: 5, offset: 89839},
						run: (*parser).callonQuote2,
					},
					&ruleRefExpr{
						pos:  position{line: 2738, col: 5, offset: 89904},
						name: "QuotedText",
					},
				},
			},
		},
		{
			name: "TableColumnsAttribute",
			pos:  position{line: 2909, col: 1, offset: 94521},
			expr: &actionExpr{
				pos: position{line: 2909, col: 26, offset: 94546},
				run: (*parser).callonTableColumnsAttribute1,
				expr: &seqExpr{
					pos: position{line: 2909, col: 26, offset: 94546},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2909, col: 26, offset: 94546},
							label: "cols",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2909, col: 31, offset: 94551},
								expr: &actionExpr{
									pos: position{line: 2914, col: 5, offset: 94614},
									run: (*parser).callonTableColumnsAttribute5,
									expr: &seqExpr{
										pos: position{line: 2914, col: 5, offset: 94614},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 2914, col: 5, offset: 94614},
												expr: &notExpr{
													pos: position{line: 3093, col: 8, offset: 100474},
													expr: &anyMatcher{
														line: 3093, col: 9, offset: 100475,
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 2917, col: 5, offset: 94738},
												label: "multiplier",
												expr: &zeroOrOneExpr{
													pos: position{line: 2917, col: 16, offset: 94749},
													expr: &actionExpr{
														pos: position{line: 2917, col: 17, offset: 94750},
														run: (*parser).callonTableColumnsAttribute12,
														expr: &seqExpr{
															pos: position{line: 2917, col: 17, offset: 94750},
															exprs: []interface{}{
																&labeledExpr{
																	pos:   position{line: 2917, col: 17, offset: 94750},
																	label: "n",
																	expr: &actionExpr{
																		pos: position{line: 3072, col: 12, offset: 100027},
																		run: (*parser).callonTableColumnsAttribute15,
																		expr: &seqExpr{
																			pos: position{line: 3072, col: 13, offset: 100028},
																			exprs: []interface{}{
																				&zeroOrOneExpr{
																					pos: position{line: 3072, col: 13, offset: 100028},
																					expr: &litMatcher{
																						pos:        position{line: 3072, col: 13, offset: 100028},
																						val:        "-",
																						ignoreCase: false,
																						want:       "\"-\"",
																					},
																				},
																				&oneOrMoreExpr{
																					pos: position{line: 3072, col: 18, offset: 100033},
																					expr: &charClassMatcher{
																						pos:        position{line: 3072, col: 18, offset: 100033},
																						val:        "[0-9]",
																						ranges:     []rune{'0', '9'},
																						ignoreCase: false,
																						inverted:   false,
																					},
																				},
																			},
																		},
																	},
																},
																&litMatcher{
																	pos:        position{line: 2917, col: 27, offset: 94760},
																	val:        "*",
																	ignoreCase: false,
																	want:       "\"*\"",
																},
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 2918, col: 5, offset: 94788},
												label: "halign",
												expr: &zeroOrOneExpr{
													pos: position{line: 2918, col: 12, offset: 94795},
													expr: &choiceExpr{
														pos: position{line: 2919, col: 9, offset: 94805},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2919, col: 9, offset: 94805},
																run: (*parser).callonTableColumnsAttribute25,
																expr: &litMatcher{
																	pos:        position{line: 2919, col: 9, offset: 94805},
																	val:        "<",
																	ignoreCase: false,
																	want:       "\"<\"",
																},
															},
															&actionExpr{
																pos: position{line: 2920, col: 11, offset: 94852},
																run: (*parser).callonTableColumnsAttribute27,
																expr: &litMatcher{
																	pos:        position{line: 2920, col: 11, offset: 94852},
																	val:        ">",
																	ignoreCase: false,
																	want:       "\">\"",
																},
															},
															&actionExpr{
																pos: position{line: 2921, col: 11, offset: 94900},
																run: (*parser).callonTableColumnsAttribute29,
																expr: &litMatcher{
																	pos:        position{line: 2921, col: 11, offset: 94900},
																	val:        "^",
																	ignoreCase: false,
																	want:       "\"^\"",
																},
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 2923, col: 5, offset: 94950},
												label: "valign",
												expr: &zeroOrOneExpr{
													pos: position{line: 2923, col: 12, offset: 94957},
													expr: &choiceExpr{
														pos: position{line: 2924, col: 9, offset: 94967},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 2924, col: 9, offset: 94967},
																run: (*parser).callonTableColumnsAttribute34,
																expr: &litMatcher{
																	pos:        position{line: 2924, col: 9, offset: 94967},
																	val:        ".<",
																	ignoreCase: false,
																	want:       "\".<\"",
																},
															},
															&actionExpr{
																pos: position{line: 2925, col: 11, offset: 95014},
																run: (*parser).callonTableColumnsAttribute36,
																expr: &litMatcher{
																	pos:        position{line: 2925, col: 11, offset: 95014},
																	val:        ".>",
																	ignoreCase: false,
																	want:       "\".>\"",
																},
															},
															&actionExpr{
																pos: position{line: 2926, col: 11, offset: 95064},
																run: (*parser).callonTableColumnsAttribute38,
																expr: &litMatcher{
																	pos:        position{line: 2926, col: 11, offset: 95064},
																	val:        ".^",
																	ignoreCase: false,
																	want:       "\".^\"",
																},
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 2928, col: 5, offset: 95115},
												label: "weight",
												expr: &zeroOrOneExpr{
													pos: position{line: 2928, col: 12, offset: 95122},
													expr: &choiceExpr{
														pos: position{line: 2928, col: 13, offset: 95123},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 3072, col: 12, offset: 100027},
																run: (*parser).callonTableColumnsAttribute43,
																expr: &seqExpr{
																	pos: position{line: 3072, col: 13, offset: 100028},
																	exprs: []interface{}{
																		&zeroOrOneExpr{
																			pos: position{line: 3072, col: 13, offset: 100028},
																			expr: &litMatcher{
																				pos:        position{line: 3072, col: 13, offset: 100028},
																				val:        "-",
																				ignoreCase: false,
																				want:       "\"-\"",
																			},
																		},
																		&oneOrMoreExpr{
																			pos: position{line: 3072, col: 18, offset: 100033},
																			expr: &charClassMatcher{
																				pos:        position{line: 3072, col: 18, offset: 100033},
																				val:        "[0-9]",
																				ranges:     []rune{'0', '9'},
																				ignoreCase: false,
																				inverted:   false,
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2928, col: 24, offset: 95134},
																run: (*parser).callonTableColumnsAttribute49,
																expr: &litMatcher{
																	pos:        position{line: 2928, col: 24, offset: 95134},
																	val:        "~",
																	ignoreCase: false,
																	want:       "\"~\"",
																},
															},
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 2929, col: 5, offset: 95176},
												label: "style",
												expr: &zeroOrOneExpr{
													pos: position{line: 2929, col: 11, offset: 95182},
													expr: &actionExpr{
														pos: position{line: 2929, col: 12, offset: 95183},
														run: (*parser).callonTableColumnsAttribute53,
														expr: &charClassMatcher{
															pos:        position{line: 2929, col: 12, offset: 95183},
															val:        "[adehlms]",
															chars:      []rune{'a', 'd', 'e', 'h', 'l', 'm', 's'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 2931, col: 5, offset: 95313},
												label: "comma",
												expr: &zeroOrOneExpr{
													pos: position{line: 2931, col: 11, offset: 95319},
													expr: &litMatcher{
														pos:        position{line: 2931, col: 12, offset: 95320},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
												},
											},
											&andCodeExpr{
												pos: position{line: 2932, col: 5, offset: 95330},
												run: (*parser).callonTableColumnsAttribute58,
											},
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 3093, col: 8, offset: 100474},
							expr: &anyMatcher{
								line: 3093, col: 9, offset: 100475,
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroBlock",
			pos:  position{line: 2959, col: 1, offset: 96339},
			expr: &actionExpr{
				pos: position{line: 2960, col: 5, offset: 96362},
				run: (*parser).callonUserMacroBlock1,
				expr: &seqExpr{
					pos: position{line: 2960, col: 5, offset: 96362},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2960, col: 5, offset: 96362},
							label: "name",
							expr: &actionExpr{
								pos: position{line: 2983, col: 18, offset: 97127},
								run: (*parser).callonUserMacroBlock4,
								expr: &oneOrMoreExpr{
									pos: position{line: 2983, col: 19, offset: 97128},
									expr: &charClassMatcher{
										pos:        position{line: 2983, col: 19, offset: 97128},
										val:        "[_-0-9\\pL]",
										chars:      []rune{'_', '-'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 2961, col: 5, offset: 96388},
							run: (*parser).callonUserMacroBlock7,
						},
						&litMatcher{
							pos:        position{line: 2965, col: 5, offset: 96528},
							val:        "::",
							ignoreCase: false,
							want:       "\"::\"",
						},
						&labeledExpr{
							pos:   position{line: 2966, col: 5, offset: 96538},
							label: "value",
							expr: &actionExpr{
								pos: position{line: 2987, col: 19, offset: 97203},
								run: (*parser).callonUserMacroBlock10,
								expr: &zeroOrMoreExpr{
									pos: position{line: 2987, col: 19, offset: 97203},
									expr: &charClassMatcher{
										pos:        position{line: 2987, col: 19, offset: 97203},
										val:        "[^:[ \\r\\n]",
										chars:      []rune{':', '[', ' ', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2967, col: 5, offset: 96566},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 2967, col: 17, offset: 96578},
								name: "InlineAttributes",
							},
						},
						&choiceExpr{
							pos: position{line: 3096, col: 8, offset: 100524},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 3089, col: 12, offset: 100384},
									run: (*parser).callonUserMacroBlock16,
									expr: &choiceExpr{
										pos: position{line: 3089, col: 13, offset: 100385},
										alternatives: []interface{}{
											&litMatcher{
												pos:        position{line: 3089, col: 13, offset: 100385},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
											&litMatcher{
												pos:        position{line: 3089, col: 20, offset: 100392},
												val:        "\r\n",
												ignoreCase: false,
												want:       "\"\\r\\n\"",
											},
											&litMatcher{
												pos:        position{line: 3089, col: 29, offset: 100401},
												val:        "\r",
												ignoreCase: false,
												want:       "\"\\r\"",
											},
										},
									},
								},
								&notExpr{
									pos: position{line: 3093, col: 8, offset: 100474},
									expr: &anyMatcher{
										line: 3093, col: 9, offset: 100475,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineUserMacro",
			pos:  position{line: 2971, col: 1, offset: 96726},
			expr: &actionExpr{
				pos: position{line: 2972, col: 5, offset: 96750},
				run: (*parser).callonInlineUserMacro1,
				expr: &seqExpr{
					pos: position{line: 2972, col: 5, offset: 96750},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2972, col: 5, offset: 96750},
							label: "name",
							expr: &actionExpr{
								pos: position{line: 2983, col: 18, offset: 97127},
								run: (*parser).callonInlineUserMacro4,
								expr: &oneOrMoreExpr{
									pos: position{line: 2983, col: 19, offset: 97128},
									expr: &charClassMatcher{
										pos:        position{line: 2983, col: 19, offset: 97128},
										val:        "[_-0-9\\pL]",
										chars:      []rune{'_', '-'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 2973, col: 5, offset: 96776},
							run: (*parser).callonInlineUserMacro7,
						},
						&litMatcher{
							pos:        position{line: 2977, col: 5, offset: 96916},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 2978, col: 5, offset: 96925},
							label: "value",
							expr: &actionExpr{
								pos: position{line: 2987, col: 19, offset: 97203},
								run: (*parser).callonInlineUserMacro10,
								expr: &zeroOrMoreExpr{
									pos: position{line: 2987, col: 19, offset: 97203},
									expr: &charClassMatcher{
										pos:        position{line: 2987, col: 19, offset: 97203},
										val:        "[^:[ \\r\\n]",
										chars:      []rune{':', '[', ' ', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2979, col: 5, offset: 96953},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 2979, col: 17, offset: 96965},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "FileLocation",
			pos:  position{line: 3036, col: 1, offset: 98802},
			expr: &actionExpr{
				pos: position{line: 3036, col: 17, offset: 98818},
				run: (*parser).callonFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 3036, col: 17, offset: 98818},
					label: "path",
					expr: &oneOrMoreExpr{
						pos: position{line: 3036, col: 22, offset: 98823},
						expr: &choiceExpr{
							pos: position{line: 3036, col: 23, offset: 98824},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 3051, col: 5, offset: 99280},
									run: (*parser).callonFileLocation5,
									expr: &seqExpr{
										pos: position{line: 3051, col: 5, offset: 99280},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 3051, col: 5, offset: 99280},
												expr: &litMatcher{
													pos:        position{line: 3051, col: 6, offset: 99281},
													val:        "[",
													ignoreCase: false,
													want:       "\"[\"",
												},
											},
											&labeledExpr{
												pos:   position{line: 3052, col: 5, offset: 99305},
												label: "elements",
												expr: &oneOrMoreExpr{
													pos: position{line: 3052, col: 14, offset: 99314},
													expr: &choiceExpr{
														pos: position{line: 3053, col: 9, offset: 99324},
														alternatives: []interface{}{
															&actionExpr{
																pos: position{line: 3053, col: 9, offset: 99324},
																run: (*parser).callonFileLocation12,
																expr: &oneOrMoreExpr{
																	pos: position{line: 3053, col: 9, offset: 99324},
																	expr: &charClassMatcher{
																		pos:        position{line: 3053, col: 10, offset: 99325},
																		val:        "[^\\r\\n[]�{.,;?!<> ]",
																		chars:      []rune{'\r', '\n', '[', ']', '�', '{', '.', ',', ';', '?', '!', '<', '>', ' '},
																		ignoreCase: false,
																		inverted:   true,
																	},
																},
															},
															&seqExpr{
																pos: position{line: 3056, col: 11, offset: 99590},
																exprs: []interface{}{
																	&actionExpr{
																		pos: position{line: 3026, col: 25, offset: 98561},
																		run: (*parser).callonFileLocation16,
																		expr: &charClassMatcher{
																			pos:        position{line: 3026, col: 25, offset: 98561},
																			val:        "[.,;?!]",
																			chars:      []rune{'.', ',', ';', '?', '!'},
																			ignoreCase: false,
																			inverted:   false,
																		},
																	},
																	&andExpr{
																		pos: position{line: 3056, col: 32, offset: 99611},
																		expr: &notExpr{
																			pos: position{line: 3056, col: 34, offset: 99613},
																			expr: &choiceExpr{
																				pos: position{line: 3056, col: 36, offset: 99615},
																				alternatives: []interface{}{
																					&notExpr{
																						pos: position{line: 3093, col: 8, offset: 100474},
																						expr: &anyMatcher{
																							line: 3093, col: 9, offset: 100475,
																						},
																					},
																					&actionExpr{
																						pos: position{line: 3080, col: 10, offset: 100200},
																						run: (*parser).callonFileLocation23,
																						expr: &charClassMatcher{
																							pos:        position{line: 3080, col: 11, offset: 100201},
																							val:        "[ \\t]",
																							chars:      []rune{' ', '\t'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 648, col: 5, offset: 20883},
																run: (*parser).callonFileLocation25,
																expr: &seqExpr{
																	pos: position{line: 648, col: 5, offset: 20883},
																	exprs: []interface{}{
																		&andCodeExpr{
																			pos: position{line: 648, col: 5, offset: 20883},
																			run: (*parser).callonFileLocation27,
																		},
																		&labeledExpr{
																			pos:   position{line: 651, col: 5, offset: 20952},
																			label: "element",
																			expr: &choiceExpr{
																				pos: position{line: 651, col: 14, offset: 20961},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 671, col: 25, offset: 21614},
																						run: (*parser).callonFileLocation30,
																						expr: &seqExpr{
																							pos: position{line: 671, col: 25, offset: 21614},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 671, col: 25, offset: 21614},
																									val:        "{counter:",
																									ignoreCase: false,
																									want:       "\"{counter:\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 671, col: 37, offset: 21626},
																									label: "name",
																									expr: &actionExpr{
																										pos: position{line: 324, col: 18, offset: 10072},
																										run: (*parser).callonFileLocation34,
																										expr: &seqExpr{
																											pos: position{line: 324, col: 18, offset: 10072},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 324, col: 18, offset: 10072},
																													val:        "[_0-9\\pL]",
																													chars:      []rune{'_'},
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 324, col: 28, offset: 10082},
																													expr: &charClassMatcher{
																														pos:        position{line: 324, col: 29, offset: 10083},
																														val:        "[-0-9\\pL]",
																														chars:      []rune{'-'},
																														ranges:     []rune{'0', '9'},
																														classes:    []*unicode.RangeTable{rangeTable("L")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																								&labeledExpr{
																									pos:   position{line: 671, col: 56, offset: 21645},
																									label: "start",
																									expr: &zeroOrOneExpr{
																										pos: position{line: 671, col: 62, offset: 21651},
																										expr: &actionExpr{
																											pos: position{line: 679, col: 17, offset: 21946},
																											run: (*parser).callonFileLocation41,
																											expr: &seqExpr{
																												pos: position{line: 679, col: 17, offset: 21946},
																												exprs: []interface{}{
																													&litMatcher{
																														pos:        position{line: 679, col: 17, offset: 21946},
																														val:        ":",
																														ignoreCase: false,
																														want:       "\":\"",
																													},
																													&labeledExpr{
																														pos:   position{line: 679, col: 21, offset: 21950},
																														label: "start",
																														expr: &choiceExpr{
																															pos: position{line: 679, col: 28, offset: 21957},
																															alternatives: []interface{}{
																																&actionExpr{
																																	pos: position{line: 679, col: 28, offset: 21957},
																																	run: (*parser).callonFileLocation46,
																																	expr: &charClassMatcher{
																																		pos:        position{line: 679, col: 28, offset: 21957},
																																		val:        "[A-Za-z]",
																																		ranges:     []rune{'A', 'Z', 'a', 'z'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 681, col: 9, offset: 22011},
																																	run: (*parser).callonFileLocation48,
																																	expr: &oneOrMoreExpr{
																																		pos: position{line: 681, col: 9, offset: 22011},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 681, col: 9, offset: 22011},
																																			val:        "[0-9]",
																																			ranges:     []rune{'0', '9'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 671, col: 78, offset: 21667},
																									val:        "}",
																									ignoreCase: false,
																									want:       "\"}\"",
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 675, col: 25, offset: 21785},
																						run: (*parser).callonFileLocation52,
																						expr: &seqExpr{
																							pos: position{line: 675, col: 25, offset: 21785},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 675, col: 25, offset: 21785},
																									val:        "{counter2:",
																									ignoreCase: false,
																									want:       "\"{counter2:\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 675, col: 38, offset: 21798},
																									label: "name",
																									expr: &actionExpr{
																										pos: position{line: 324, col: 18, offset: 10072},
																										run: (*parser).callonFileLocation56,
																										expr: &seqExpr{
																											pos: position{line: 324, col: 18, offset: 10072},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 324, col: 18, offset: 10072},
																													val:        "[_0-9\\pL]",
																													chars:      []rune{'_'},
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 324, col: 28, offset: 10082},
																													expr: &charClassMatcher{
																														pos:        position{line: 324, col: 29, offset: 10083},
																														val:        "[-0-9\\pL]",
																														chars:      []rune{'-'},
																														ranges:     []rune{'0', '9'},
																														classes:    []*unicode.RangeTable{rangeTable("L")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																								&labeledExpr{
																									pos:   position{line: 675, col: 57, offset: 21817},
																									label: "start",
																									expr: &zeroOrOneExpr{
																										pos: position{line: 675, col: 63, offset: 21823},
																										expr: &actionExpr{
																											pos: position{line: 679, col: 17, offset: 21946},
																											run: (*parser).callonFileLocation63,
																											expr: &seqExpr{
																												pos: position{line: 679, col: 17, offset: 21946},
																												exprs: []interface{}{
																													&litMatcher{
																														pos:        position{line: 679, col: 17, offset: 21946},
																														val:        ":",
																														ignoreCase: false,
																														want:       "\":\"",
																													},
																													&labeledExpr{
																														pos:   position{line: 679, col: 21, offset: 21950},
																														label: "start",
																														expr: &choiceExpr{
																															pos: position{line: 679, col: 28, offset: 21957},
																															alternatives: []interface{}{
																																&actionExpr{
																																	pos: position{line: 679, col: 28, offset: 21957},
																																	run: (*parser).callonFileLocation68,
																																	expr: &charClassMatcher{
																																		pos:        position{line: 679, col: 28, offset: 21957},
																																		val:        "[A-Za-z]",
																																		ranges:     []rune{'A', 'Z', 'a', 'z'},
																																		ignoreCase: false,
																																		inverted:   false,
																																	},
																																},
																																&actionExpr{
																																	pos: position{line: 681, col: 9, offset: 22011},
																																	run: (*parser).callonFileLocation70,
																																	expr: &oneOrMoreExpr{
																																		pos: position{line: 681, col: 9, offset: 22011},
																																		expr: &charClassMatcher{
																																			pos:        position{line: 681, col: 9, offset: 22011},
																																			val:        "[0-9]",
																																			ranges:     []rune{'0', '9'},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																	},
																																},
																															},
																														},
																													},
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 675, col: 79, offset: 21839},
																									val:        "}",
																									ignoreCase: false,
																									want:       "\"}\"",
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 657, col: 5, offset: 21090},
																						run: (*parser).callonFileLocation74,
																						expr: &seqExpr{
																							pos: position{line: 657, col: 5, offset: 21090},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 657, col: 5, offset: 21090},
																									val:        "\\{",
																									ignoreCase: false,
																									want:       "\"\\\\{\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 657, col: 13, offset: 21098},
																									label: "name",
																									expr: &actionExpr{
																										pos: position{line: 324, col: 18, offset: 10072},
																										run: (*parser).callonFileLocation78,
																										expr: &seqExpr{
																											pos: position{line: 324, col: 18, offset: 10072},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 324, col: 18, offset: 10072},
																													val:        "[_0-9\\pL]",
																													chars:      []rune{'_'},
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 324, col: 28, offset: 10082},
																													expr: &charClassMatcher{
																														pos:        position{line: 324, col: 29, offset: 10083},
																														val:        "[-0-9\\pL]",
																														chars:      []rune{'-'},
																														ranges:     []rune{'0', '9'},
																														classes:    []*unicode.RangeTable{rangeTable("L")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 657, col: 32, offset: 21117},
																									val:        "}",
																									ignoreCase: false,
																									want:       "\"}\"",
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 664, col: 5, offset: 21358},
																						run: (*parser).callonFileLocation84,
																						expr: &seqExpr{
																							pos: position{line: 664, col: 5, offset: 21358},
																							exprs: []interface{}{
																								&litMatcher{
																									pos:        position{line: 664, col: 5, offset: 21358},
																									val:        "{",
																									ignoreCase: false,
																									want:       "\"{\"",
																								},
																								&labeledExpr{
																									pos:   position{line: 664, col: 9, offset: 21362},
																									label: "name",
																									expr: &actionExpr{
																										pos: position{line: 324, col: 18, offset: 10072},
																										run: (*parser).callonFileLocation88,
																										expr: &seqExpr{
																											pos: position{line: 324, col: 18, offset: 10072},
																											exprs: []interface{}{
																												&charClassMatcher{
																													pos:        position{line: 324, col: 18, offset: 10072},
																													val:        "[_0-9\\pL]",
																													chars:      []rune{'_'},
																													ranges:     []rune{'0', '9'},
																													classes:    []*unicode.RangeTable{rangeTable("L")},
																													ignoreCase: false,
																													inverted:   false,
																												},
																												&zeroOrMoreExpr{
																													pos: position{line: 324, col: 28, offset: 10082},
																													expr: &charClassMatcher{
																														pos:        position{line: 324, col: 29, offset: 10083},
																														val:        "[-0-9\\pL]",
																														chars:      []rune{'-'},
																														ranges:     []rune{'0', '9'},
																														classes:    []*unicode.RangeTable{rangeTable("L")},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																										},
																									},
																								},
																								&litMatcher{
																									pos:        position{line: 664, col: 28, offset: 21381},
																									val:        "}",
																									ignoreCase: false,
																									want:       "\"}\"",
																								},
																							},
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 2753, col: 5, offset: 90225},
																run: (*parser).callonFileLocation94,
																expr: &seqExpr{
																	pos: position{line: 2753, col: 5, offset: 90225},
																	exprs: []interface{}{
																		&andCodeExpr{
																			pos: position{line: 2753, col: 5, offset: 90225},
																			run: (*parser).callonFileLocation96,
																		},
																		&labeledExpr{
																			pos:   position{line: 2756, col: 5, offset: 90301},
																			label: "element",
																			expr: &choiceExpr{
																				pos: position{line: 2758, col: 9, offset: 90399},
																				alternatives: []interface{}{
																					&actionExpr{
																						pos: position{line: 2758, col: 9, offset: 90399},
																						run: (*parser).callonFileLocation99,
																						expr: &choiceExpr{
																							pos: position{line: 699, col: 27, offset: 22665},
																							alternatives: []interface{}{
																								&actionExpr{
																									pos: position{line: 699, col: 27, offset: 22665},
																									run: (*parser).callonFileLocation101,
																									expr: &seqExpr{
																										pos: position{line: 699, col: 27, offset: 22665},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 699, col: 27, offset: 22665},
																												val:        "<<",
																												ignoreCase: false,
																												want:       "\"<<\"",
																											},
																											&labeledExpr{
																												pos:   position{line: 699, col: 32, offset: 22670},
																												label: "id",
																												expr: &actionExpr{
																													pos: position{line: 3065, col: 7, offset: 99852},
																													run: (*parser).callonFileLocation105,
																													expr: &oneOrMoreExpr{
																														pos: position{line: 3065, col: 7, offset: 99852},
																														expr: &charClassMatcher{
																															pos:        position{line: 3065, col: 7, offset: 99852},
																															val:        "[^[]<>,]",
																															chars:      []rune{'[', ']', '<', '>', ','},
																															ignoreCase: false,
																															inverted:   true,
																														},
																													},
																												},
																											},
																											&zeroOrMoreExpr{
																												pos: position{line: 699, col: 40, offset: 22678},
																												expr: &actionExpr{
																													pos: position{line: 3080, col: 10, offset: 100200},
																													run: (*parser).callonFileLocation109,
																													expr: &charClassMatcher{
																														pos:        position{line: 3080, col: 11, offset: 100201},
																														val:        "[ \\t]",
																														chars:      []rune{' ', '\t'},
																														ignoreCase: false,
																														inverted:   false,
																													},
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 699, col: 47, offset: 22685},
																												val:        ",",
																												ignoreCase: false,
																												want:       "\",\"",
																											},
																											&labeledExpr{
																												pos:   position{line: 699, col: 51, offset: 22689},
																												label: "label",
																												expr: &oneOrMoreExpr{
																													pos: position{line: 709, col: 24, offset: 23090},
																													expr: &choiceExpr{
																														pos: position{line: 710, col: 5, offset: 23096},
																														alternatives: []interface{}{
																															&actionExpr{
																																pos: position{line: 710, col: 6, offset: 23097},
																																run: (*parser).callonFileLocation115,
																																expr: &seqExpr{
																																	pos: position{line: 710, col: 6, offset: 23097},
																																	exprs: []interface{}{
																																		&charClassMatcher{
																																			pos:        position{line: 710, col: 6, offset: 23097},
																																			val:        "[0-9\\pL]",
																																			ranges:     []rune{'0', '9'},
																																			classes:    []*unicode.RangeTable{rangeTable("L")},
																																			ignoreCase: false,
																																			inverted:   false,
																																		},
																																		&oneOrMoreExpr{
																																			pos: position{line: 710, col: 14, offset: 23105},
																																			expr: &charClassMatcher{
																																				pos:        position{line: 710, col: 14, offset: 23105},
																																				val:        "[^\\r\\n{<>]",
																																				chars:      []rune{'\r', '\n', '{', '<', '>'},
																																				ignoreCase: false,
																																				inverted:   true,
																																			},
																																		},
																																	},
																																},
																															},
																															&actionExpr{
																																pos: position{line: 657, col: 5, offset: 21090},
																																run: (*parser).callonFileLocation120,
																																expr: &seqExpr{
																																	pos: position{line: 657, col: 5, offset: 21090},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 657, col: 5, offset: 21090},
																																			val:        "\\{",
																																			ignoreCase: false,
																																			want:       "\"\\\\{\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 657, col: 13, offset: 21098},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 324, col: 18, offset: 10072},
																																				run: (*parser).callonFileLocation124,
																																				expr: &seqExpr{
																																					pos: position{line: 324, col: 18, offset: 10072},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 324, col: 18, offset: 10072},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 324, col: 28, offset: 10082},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 324, col: 29, offset: 10083},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 657, col: 32, offset: 21117},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																															&actionExpr{
																																pos: position{line: 664, col: 5, offset: 21358},
																																run: (*parser).callonFileLocation130,
																																expr: &seqExpr{
																																	pos: position{line: 664, col: 5, offset: 21358},
																																	exprs: []interface{}{
																																		&litMatcher{
																																			pos:        position{line: 664, col: 5, offset: 21358},
																																			val:        "{",
																																			ignoreCase: false,
																																			want:       "\"{\"",
																																		},
																																		&labeledExpr{
																																			pos:   position{line: 664, col: 9, offset: 21362},
																																			label: "name",
																																			expr: &actionExpr{
																																				pos: position{line: 324, col: 18, offset: 10072},
																																				run: (*parser).callonFileLocation134,
																																				expr: &seqExpr{
																																					pos: position{line: 324, col: 18, offset: 10072},
																																					exprs: []interface{}{
																																						&charClassMatcher{
																																							pos:        position{line: 324, col: 18, offset: 10072},
																																							val:        "[_0-9\\pL]",
																																							chars:      []rune{'_'},
																																							ranges:     []rune{'0', '9'},
																																							classes:    []*unicode.RangeTable{rangeTable("L")},
																																							ignoreCase: false,
																																							inverted:   false,
																																						},
																																						&zeroOrMoreExpr{
																																							pos: position{line: 324, col: 28, offset: 10082},
																																							expr: &charClassMatcher{
																																								pos:        position{line: 324, col: 29, offset: 10083},
																																								val:        "[-0-9\\pL]",
																																								chars:      []rune{'-'},
																																								ranges:     []rune{'0', '9'},
																																								classes:    []*unicode.RangeTable{rangeTable("L")},
																																								ignoreCase: false,
																																								inverted:   false,
																																							},
																																						},
																																					},
																																				},
																																			},
																																		},
																																		&litMatcher{
																																			pos:        position{line: 664, col: 28, offset: 21381},
																																			val:        "}",
																																			ignoreCase: false,
																																			want:       "\"}\"",
																																		},
																																	},
																																},
																															},
																															&actionExpr{
																																pos: position{line: 714, col: 8, offset: 23331},
																																run: (*parser).callonFileLocation140,
																																expr: &litMatcher{
																																	pos:        position{line: 714, col: 8, offset: 23331},
																																	val:        "{",
																																	ignoreCase: false,
																																	want:       "\"{\"",
																																},
																															},
																														},
																													},
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 699, col: 79, offset: 22717},
																												val:        ">>",
																												ignoreCase: false,
																												want:       "\">>\"",
																											},
																										},
																									},
																								},
																								&actionExpr{
																									pos: position{line: 701, col: 9, offset: 22790},
																									run: (*parser).callonFileLocation143,
																									expr: &seqExpr{
																										pos: position{line: 701, col: 9, offset: 22790},
																										exprs: []interface{}{
																											&litMatcher{
																												pos:        position{line: 701, col: 9, offset: 22790},
																												val:        "<<",
																												ignoreCase: false,
																												want:       "\"<<\"",
																											},
																											&labeledExpr{
																												pos:   position{line: 701, col: 14, offset: 22795},
																												label: "id",
																												expr: &actionExpr{
																													pos: position{line: 3065, col: 7, offset: 99852},
																													run: (*parser).callonFileLocation147,
																													expr: &oneOrMoreExpr{
																														pos: position{line: 3065, col: 7, offset: 99852},
																														expr: &charClassMatcher{
																															pos:        position{line: 3065, col: 7, offset: 99852},
																															val:        "[^[]<>,]",
																															chars:      []rune{'[', ']', '<', '>', ','},
																															ignoreCase: false,
																															inverted:   true,
																														},
																													},
																												},
																											},
																											&litMatcher{
																												pos:        position{line: 701, col: 22, offset: 22803},
																												val:        ">>",
																												ignoreCase: false,
																												want:       "\">>\"",
																											},
																										},
																									},
																								},
																							},
																						},
																					},
																					&actionExpr{
																						pos: position{line: 2761, col: 11, offset: 90503},
																						run: (*parser).callonFileLocation151,
																						expr: &charClassMatcher{
																							pos:        position{line: 2761, col: 12, offset: 90504},
																							val:        "[<>&]",
																							chars:      []rune{'<', '>', '&'},
																							ignoreCase: false,
																							inverted:   false,
																						},
																					},
																				},
																			},
																		},
																	},
																},
															},
															&actionExpr{
																pos: position{line: 3059, col: 11, offset: 99696},
																run: (*parser).callonFileLocation153,
																expr: &litMatcher{
																	pos:        position{line: 3059, col: 11, offset: 99696},
																	val:        "{",
																	ignoreCase: false,
																	want:       "\"{\"",
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 1219, col: 23, offset: 38141},
									run: (*parser).callonFileLocation155,
									expr: &seqExpr{
										pos: position{line: 1219, col: 23, offset: 38141},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1217, col: 32, offset: 38109},
												val:        "�",
												ignoreCase: false,
												want:       "\"�\"",
											},
											&labeledExpr{
												pos:   position{line: 1219, col: 51, offset: 38169},
												label: "ref",
												expr: &actionExpr{
													pos: position{line: 1219, col: 56, offset: 38174},
													run: (*parser).callonFileLocation159,
													expr: &oneOrMoreExpr{
														pos: position{line: 1219, col: 56, offset: 38174},
														expr: &charClassMatcher{
															pos:        position{line: 1219, col: 56, offset: 38174},
															val:        "[0-9]",
															ranges:     []rune{'0', '9'},
															ignoreCase: false,
															inverted:   false,
														},
													},
												},
											},
											&litMatcher{
												pos:        position{line: 1217, col: 32, offset: 38109},
												val:        "�",
												ignoreCase: false,
												want:       "\"�\"",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
	},
}

func (c *current) onDocumentRawLine10() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine10()
}

func (c *current) onDocumentRawLine17() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine17()
}

func (c *current) onDocumentRawLine20() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentRawLine20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine20()
}

func (c *current) onDocumentRawLine6(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string), string(c.text))

}

func (p *parser) callonDocumentRawLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine6(stack["name"])
}

func (c *current) onDocumentRawLine31() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine31()
}

func (c *current) onDocumentRawLine38() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine38()
}

func (c *current) onDocumentRawLine41() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentRawLine41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine41()
}

func (c *current) onDocumentRawLine27(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string), string(c.text))

}

func (p *parser) callonDocumentRawLine27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine27(stack["name"])
}

func (c *current) onDocumentRawLine53() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine53()
}

func (c *current) onDocumentRawLine59() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine59() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine59()
}

func (c *current) onDocumentRawLine64() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine64()
}

func (c *current) onDocumentRawLine49(name, attr interface{}) (interface{}, error) {
	return types.NewIfdefCondition(name.(string), attr)

}

func (p *parser) callonDocumentRawLine49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine49(stack["name"], stack["attr"])
}

func (c *current) onDocumentRawLine72() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine72()
}

func (c *current) onDocumentRawLine78() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine78()
}

func (c *current) onDocumentRawLine83() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine83() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine83()
}

func (c *current) onDocumentRawLine68(name, attr interface{}) (interface{}, error) {
	return types.NewIfndefCondition(name.(string), attr)

}

func (p *parser) callonDocumentRawLine68() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine68(stack["name"], stack["attr"])
}

func (c *current) onDocumentRawLine101() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine101() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine101()
}

func (c *current) onDocumentRawLine97(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonDocumentRawLine97() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine97(stack["name"])
}

func (c *current) onDocumentRawLine111() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine111() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine111()
}

func (c *current) onDocumentRawLine107(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonDocumentRawLine107() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine107(stack["name"])
}

func (c *current) onDocumentRawLine92(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonDocumentRawLine92() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine92(stack["s"])
}

func (c *current) onDocumentRawLine127() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine127() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine127()
}

func (c *current) onDocumentRawLine123(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonDocumentRawLine123() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine123(stack["name"])
}

func (c *current) onDocumentRawLine137() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine137() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine137()
}

func (c *current) onDocumentRawLine133(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonDocumentRawLine133() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine133(stack["name"])
}

func (c *current) onDocumentRawLine118(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonDocumentRawLine118() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine118(stack["s"])
}

func (c *current) onDocumentRawLine151() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine151() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine151()
}

func (c *current) onDocumentRawLine147(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonDocumentRawLine147() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine147(stack["name"])
}

func (c *current) onDocumentRawLine161() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine161() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine161()
}

func (c *current) onDocumentRawLine157(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonDocumentRawLine157() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine157(stack["name"])
}

func (c *current) onDocumentRawLine144(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonDocumentRawLine144() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine144(stack["s"])
}

func (c *current) onDocumentRawLine171() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRawLine171() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine171()
}

func (c *current) onDocumentRawLine167(w interface{}) (interface{}, error) {
	return w, nil
}

func (p *parser) callonDocumentRawLine167() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine167(stack["w"])
}

func (c *current) onDocumentRawLine179() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRawLine179() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine179()
}

func (c *current) onDocumentRawLine175(w interface{}) (interface{}, error) {
	return w, nil
}

func (p *parser) callonDocumentRawLine175() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine175(stack["w"])
}

func (c *current) onDocumentRawLine183() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDocumentRawLine183() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine183()
}

func (c *current) onDocumentRawLine190() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine190() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine190()
}

func (c *current) onDocumentRawLine194() (interface{}, error) {
	return types.NewEqualOperand()

}

func (p *parser) callonDocumentRawLine194() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine194()
}

func (c *current) onDocumentRawLine196() (interface{}, error) {
	return types.NewNotEqualOperand()

}

func (p *parser) callonDocumentRawLine196() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine196()
}

func (c *current) onDocumentRawLine198() (interface{}, error) {
	return types.NewLessThanOperand()

}

func (p *parser) callonDocumentRawLine198() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine198()
}

func (c *current) onDocumentRawLine200() (interface{}, error) {
	return types.NewLessOrEqualOperand()

}

func (p *parser) callonDocumentRawLine200() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine200()
}

func (c *current) onDocumentRawLine202() (interface{}, error) {
	return types.NewGreaterThanOperand()

}

func (p *parser) callonDocumentRawLine202() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine202()
}

func (c *current) onDocumentRawLine204() (interface{}, error) {
	return types.NewGreaterOrEqualOperand()

}

func (p *parser) callonDocumentRawLine204() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine204()
}

func (c *current) onDocumentRawLine207() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine207() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine207()
}

func (c *current) onDocumentRawLine220() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine220() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine220()
}

func (c *current) onDocumentRawLine216(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonDocumentRawLine216() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine216(stack["name"])
}

func (c *current) onDocumentRawLine230() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine230() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine230()
}

func (c *current) onDocumentRawLine226(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonDocumentRawLine226() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine226(stack["name"])
}

func (c *current) onDocumentRawLine211(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonDocumentRawLine211() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine211(stack["s"])
}

func (c *current) onDocumentRawLine246() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine246() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine246()
}

func (c *current) onDocumentRawLine242(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonDocumentRawLine242() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine242(stack["name"])
}

func (c *current) onDocumentRawLine256() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine256() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine256()
}

func (c *current) onDocumentRawLine252(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonDocumentRawLine252() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine252(stack["name"])
}

func (c *current) onDocumentRawLine237(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonDocumentRawLine237() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine237(stack["s"])
}

func (c *current) onDocumentRawLine270() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine270() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine270()
}

func (c *current) onDocumentRawLine266(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonDocumentRawLine266() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine266(stack["name"])
}

func (c *current) onDocumentRawLine280() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine280() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine280()
}

func (c *current) onDocumentRawLine276(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonDocumentRawLine276() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine276(stack["name"])
}

func (c *current) onDocumentRawLine263(s interface{}) (interface{}, error) {
	return s, nil
}

func (p *parser) callonDocumentRawLine263() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine263(stack["s"])
}

func (c *current) onDocumentRawLine290() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRawLine290() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine290()
}

func (c *current) onDocumentRawLine286(w interface{}) (interface{}, error) {
	return w, nil
}

func (p *parser) callonDocumentRawLine286() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine286(stack["w"])
}

func (c *current) onDocumentRawLine298() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRawLine298() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine298()
}

func (c *current) onDocumentRawLine294(w interface{}) (interface{}, error) {
	return w, nil
}

func (p *parser) callonDocumentRawLine294() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine294(stack["w"])
}

func (c *current) onDocumentRawLine302() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDocumentRawLine302() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine302()
}

func (c *current) onDocumentRawLine310() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine310() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine310()
}

func (c *current) onDocumentRawLine87(left, operand, right interface{}) (interface{}, error) {
	return types.NewIfevalCondition(left, right, operand.(types.IfevalOperand))

}

func (p *parser) callonDocumentRawLine87() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine87(stack["left"], stack["operand"], stack["right"])
}

func (c *current) onDocumentRawLine319() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine319() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine319()
}

func (c *current) onDocumentRawLine325() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine325() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine325()
}

func (c *current) onDocumentRawLine330() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine330() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine330()
}

func (c *current) onDocumentRawLine314(name, attr interface{}) (interface{}, error) {
	return types.NewEndOfCondition() // name and attributes are parsed but ignored

}

func (p *parser) callonDocumentRawLine314() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine314(stack["name"], stack["attr"])
}

func (c *current) onDocumentRawLine343() (interface{}, error) {
	// sequence of 4 "/" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine343() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine343()
}

func (c *current) onDocumentRawLine349() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine349() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine349()
}

func (c *current) onDocumentRawLine352() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentRawLine352() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine352()
}

func (c *current) onDocumentRawLine340(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Comment, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentRawLine340() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine340(stack["delimiter"])
}

func (c *current) onDocumentRawLine362() (interface{}, error) {
	// sequence of 4 "=" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine362() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine362()
}

func (c *current) onDocumentRawLine368() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine368() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine368()
}

func (c *current) onDocumentRawLine371() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentRawLine371() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine371()
}

func (c *current) onDocumentRawLine359(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Example, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentRawLine359() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine359(stack["delimiter"])
}

func (c *current) onDocumentRawLine382() (interface{}, error) {
	// exclude ` to avoid matching fenced blocks with more than 3 "`" delimter chars
	return string(c.text), nil
}

func (p *parser) callonDocumentRawLine382() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine382()
}

func (c *current) onDocumentRawLine386() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine386() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine386()
}

func (c *current) onDocumentRawLine389() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentRawLine389() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine389()
}

func (c *current) onDocumentRawLine378(language interface{}) (interface{}, error) {
	return types.NewMarkdownCodeBlockDelimiter(language.(string), string(c.text))
}

func (p *parser) callonDocumentRawLine378() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine378(stack["language"])
}

func (c *current) onDocumentRawLine399() (interface{}, error) {
	// sequence of 3 "`" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine399() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine399()
}

func (c *current) onDocumentRawLine405() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine405() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine405()
}

func (c *current) onDocumentRawLine408() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentRawLine408() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine408()
}

func (c *current) onDocumentRawLine396(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Fenced, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentRawLine396() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine396(stack["delimiter"])
}

func (c *current) onDocumentRawLine418() (interface{}, error) {
	// sequence of 4 "-" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine418() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine418()
}

func (c *current) onDocumentRawLine424() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine424() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine424()
}

func (c *current) onDocumentRawLine427() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentRawLine427() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine427()
}

func (c *current) onDocumentRawLine415(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Listing, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentRawLine415() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine415(stack["delimiter"])
}

func (c *current) onDocumentRawLine437() (interface{}, error) {
	// sequence of 4 "." chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine437() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine437()
}

func (c *current) onDocumentRawLine443() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine443() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine443()
}

func (c *current) onDocumentRawLine446() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentRawLine446() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine446()
}

func (c *current) onDocumentRawLine434(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Listing, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentRawLine434() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine434(stack["delimiter"])
}

func (c *current) onDocumentRawLine456() (interface{}, error) {
	// sequence of 4 "+" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine456() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine456()
}

func (c *current) onDocumentRawLine462() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine462() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine462()
}

func (c *current) onDocumentRawLine465() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentRawLine465() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine465()
}

func (c *current) onDocumentRawLine453(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Passthrough, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentRawLine453() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine453(stack["delimiter"])
}

func (c *current) onDocumentRawLine475() (interface{}, error) {
	// sequence of 4 "_" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine475() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine475()
}

func (c *current) onDocumentRawLine481() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine481() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine481()
}

func (c *current) onDocumentRawLine484() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentRawLine484() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine484()
}

func (c *current) onDocumentRawLine472(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Quote, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentRawLine472() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine472(stack["delimiter"])
}

func (c *current) onDocumentRawLine494() (interface{}, error) {
	// sequence of 4 "*" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine494() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine494()
}

func (c *current) onDocumentRawLine500() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine500() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine500()
}

func (c *current) onDocumentRawLine503() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentRawLine503() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine503()
}

func (c *current) onDocumentRawLine491(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Sidebar, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentRawLine491() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine491(stack["delimiter"])
}

func (c *current) onDocumentRawLine334(delimiter interface{}) (interface{}, error) {
	return delimiter, nil

}

func (p *parser) callonDocumentRawLine334() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine334(stack["delimiter"])
}

func (c *current) onDocumentRawLine512() (bool, error) {
	// should only be enabled when reading files to include, not the main (root) file
	return c.isSectionEnabled(), nil

}

func (p *parser) callonDocumentRawLine512() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine512()
}

func (c *current) onDocumentRawLine513() (bool, error) {

	return !c.isWithinDelimitedBlock(), nil

}

func (p *parser) callonDocumentRawLine513() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine513()
}

func (c *current) onDocumentRawLine515() (interface{}, error) {

	// `=` is level 0, `==` is level 1, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonDocumentRawLine515() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine515()
}

func (c *current) onDocumentRawLine518(level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonDocumentRawLine518() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine518(stack["level"])
}

func (c *current) onDocumentRawLine519(level interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonDocumentRawLine519() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine519(stack["level"])
}

func (c *current) onDocumentRawLine510(level interface{}) (interface{}, error) {
	return types.NewRawSection(level.(int), string(c.text)) // just retain the raw content

}

func (p *parser) callonDocumentRawLine510() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine510(stack["level"])
}

func (c *current) onDocumentRawLine1(element interface{}) (interface{}, error) {
	// in case of parse error, we'll keep the rawline content as-is
	return element, nil

}

func (p *parser) callonDocumentRawLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawLine1(stack["element"])
}

func (c *current) onFileInclusion19() (interface{}, error) {
	// not supported for now: EOL, space, "{", "[", "]". Also, punctuation chars and `<` and `>` special chars are treated separately below (but `&` is allowed)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonFileInclusion19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion19()
}

func (c *current) onFileInclusion23() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonFileInclusion23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion23()
}

func (c *current) onFileInclusion30() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileInclusion30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion30()
}

func (c *current) onFileInclusion34() (bool, error) {
	return c.isSubstitutionEnabled(Attributes), nil

}

func (p *parser) callonFileInclusion34() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion34()
}

func (c *current) onFileInclusion41() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileInclusion41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion41()
}

func (c *current) onFileInclusion53() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileInclusion53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion53()
}

func (c *current) onFileInclusion55() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonFileInclusion55() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion55()
}

func (c *current) onFileInclusion48(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonFileInclusion48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion48(stack["start"])
}

func (c *current) onFileInclusion37(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonFileInclusion37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion37(stack["name"], stack["start"])
}

func (c *current) onFileInclusion63() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileInclusion63() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion63()
}

func (c *current) onFileInclusion75() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileInclusion75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion75()
}

func (c *current) onFileInclusion77() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonFileInclusion77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion77()
}

func (c *current) onFileInclusion70(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonFileInclusion70() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion70(stack["start"])
}

func (c *current) onFileInclusion59(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonFileInclusion59() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion59(stack["name"], stack["start"])
}

func (c *current) onFileInclusion85() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileInclusion85() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion85()
}

func (c *current) onFileInclusion81(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonFileInclusion81() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion81(stack["name"])
}

func (c *current) onFileInclusion95() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileInclusion95() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion95()
}

func (c *current) onFileInclusion91(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonFileInclusion91() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion91(stack["name"])
}

func (c *current) onFileInclusion32(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonFileInclusion32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion32(stack["element"])
}

func (c *current) onFileInclusion103() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters), nil

}

func (p *parser) callonFileInclusion103() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion103()
}

func (c *current) onFileInclusion112() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonFileInclusion112() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion112()
}

func (c *current) onFileInclusion116() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileInclusion116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion116()
}

func (c *current) onFileInclusion122() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonFileInclusion122() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion122()
}

func (c *current) onFileInclusion131() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileInclusion131() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion131()
}

func (c *current) onFileInclusion127(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonFileInclusion127() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion127(stack["name"])
}

func (c *current) onFileInclusion141() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileInclusion141() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion141()
}

func (c *current) onFileInclusion137(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonFileInclusion137() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion137(stack["name"])
}

func (c *current) onFileInclusion147() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonFileInclusion147() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion147()
}

func (c *current) onFileInclusion108(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonFileInclusion108() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion108(stack["id"], stack["label"])
}

func (c *current) onFileInclusion154() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonFileInclusion154() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion154()
}

func (c *current) onFileInclusion150(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonFileInclusion150() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion150(stack["id"])
}

func (c *current) onFileInclusion106() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonFileInclusion106() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion106()
}

func (c *current) onFileInclusion158() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonFileInclusion158() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion158()
}

func (c *current) onFileInclusion101(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonFileInclusion101() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion101(stack["element"])
}

func (c *current) onFileInclusion160() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonFileInclusion160() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion160()
}

func (c *current) onFileInclusion12(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFileInclusion12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion12(stack["elements"])
}

func (c *current) onFileInclusion166() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonFileInclusion166() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion166()
}

func (c *current) onFileInclusion162(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonFileInclusion162() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion162(stack["ref"])
}

func (c *current) onFileInclusion8(path interface{}) (interface{}, error) {
	return types.NewLocation("", path.([]interface{}))

}

func (p *parser) callonFileInclusion8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion8(stack["path"])
}

func (c *current) onFileInclusion4(path, attributes interface{}) (interface{}, error) {

	return types.NewFileInclusion(path.(*types.Location), attributes.(types.Attributes), string(c.text))

}

func (p *parser) callonFileInclusion4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion4(stack["path"], stack["attributes"])
}

func (c *current) onFileInclusion173() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileInclusion173() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion173()
}

func (c *current) onFileInclusion176() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonFileInclusion176() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion176()
}

func (c *current) onFileInclusion1(incl interface{}) (interface{}, error) {
	return incl.(*types.FileInclusion), nil

}

func (p *parser) callonFileInclusion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion1(stack["incl"])
}

func (c *current) onLineRanges12() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLineRanges12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges12()
}

func (c *current) onLineRanges20() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLineRanges20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges20()
}

func (c *current) onLineRanges9(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))

}

func (p *parser) callonLineRanges9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges9(stack["start"], stack["end"])
}

func (c *current) onLineRanges28() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLineRanges28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges28()
}

func (c *current) onLineRanges26(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))

}

func (p *parser) callonLineRanges26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges26(stack["singleline"])
}

func (c *current) onLineRanges44() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLineRanges44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges44()
}

func (c *current) onLineRanges52() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLineRanges52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges52()
}

func (c *current) onLineRanges41(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))

}

func (p *parser) callonLineRanges41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges41(stack["start"], stack["end"])
}

func (c *current) onLineRanges60() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLineRanges60() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges60()
}

func (c *current) onLineRanges58(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))

}

func (p *parser) callonLineRanges58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges58(stack["singleline"])
}

func (c *current) onLineRanges36(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonLineRanges36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges36(stack["other"])
}

func (c *current) onLineRanges5(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonLineRanges5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges5(stack["first"], stack["others"])
}

func (c *current) onLineRanges69() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLineRanges69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges69()
}

func (c *current) onLineRanges77() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLineRanges77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges77()
}

func (c *current) onLineRanges66(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))

}

func (p *parser) callonLineRanges66() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges66(stack["start"], stack["end"])
}

func (c *current) onLineRanges85() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLineRanges85() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges85()
}

func (c *current) onLineRanges83(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))

}

func (p *parser) callonLineRanges83() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges83(stack["singleline"])
}

func (c *current) onLineRanges1(value interface{}) (interface{}, error) {
	// must make sure that the whole content is parsed
	return value, nil

}

func (p *parser) callonLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges1(stack["value"])
}

func (c *current) onTagRanges11() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagRanges11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges11()
}

func (c *current) onTagRanges17() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagRanges17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges17()
}

func (c *current) onTagRanges20(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagRanges20() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges20(stack["stars"])
}

func (c *current) onTagRanges14(stars interface{}) (interface{}, error) {
	return stars, nil

}

func (p *parser) callonTagRanges14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges14(stack["stars"])
}

func (c *current) onTagRanges8(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), true)

}

func (p *parser) callonTagRanges8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges8(stack["tag"])
}

func (c *current) onTagRanges26() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagRanges26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges26()
}

func (c *current) onTagRanges32() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagRanges32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges32()
}

func (c *current) onTagRanges35(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagRanges35() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges35(stack["stars"])
}

func (c *current) onTagRanges29(stars interface{}) (interface{}, error) {
	return stars, nil

}

func (p *parser) callonTagRanges29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges29(stack["stars"])
}

func (c *current) onTagRanges21(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), false)

}

func (p *parser) callonTagRanges21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges21(stack["tag"])
}

func (c *current) onTagRanges46() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagRanges46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges46()
}

func (c *current) onTagRanges52() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagRanges52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges52()
}

func (c *current) onTagRanges55(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagRanges55() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges55(stack["stars"])
}

func (c *current) onTagRanges49(stars interface{}) (interface{}, error) {
	return stars, nil

}

func (p *parser) callonTagRanges49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges49(stack["stars"])
}

func (c *current) onTagRanges43(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), true)

}

func (p *parser) callonTagRanges43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges43(stack["tag"])
}

func (c *current) onTagRanges61() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagRanges61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges61()
}

func (c *current) onTagRanges67() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagRanges67() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges67()
}

func (c *current) onTagRanges70(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagRanges70() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges70(stack["stars"])
}

func (c *current) onTagRanges64(stars interface{}) (interface{}, error) {
	return stars, nil

}

func (p *parser) callonTagRanges64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges64(stack["stars"])
}

func (c *current) onTagRanges56(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), false)

}

func (p *parser) callonTagRanges56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges56(stack["tag"])
}

func (c *current) onTagRanges38(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonTagRanges38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges38(stack["other"])
}

func (c *current) onTagRanges4(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonTagRanges4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges4(stack["first"], stack["others"])
}

func (c *current) onTagRanges1(value interface{}) (interface{}, error) {
	// must make sure that the whole content is parsed
	return value, nil

}

func (p *parser) callonTagRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges1(stack["value"])
}

func (c *current) onIncludedFileLine11() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonIncludedFileLine11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine11()
}

func (c *current) onIncludedFileLine10() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine10()
}

func (c *current) onIncludedFileLine6(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileStartTag(tag.(string))

}

func (p *parser) callonIncludedFileLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine6(stack["tag"])
}

func (c *current) onIncludedFileLine20() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonIncludedFileLine20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine20()
}

func (c *current) onIncludedFileLine19() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine19()
}

func (c *current) onIncludedFileLine15(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileEndTag(tag.(string))

}

func (p *parser) callonIncludedFileLine15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine15(stack["tag"])
}

func (c *current) onIncludedFileLine24() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine24()
}

func (c *current) onIncludedFileLine27() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine27()
}

func (c *current) onIncludedFileLine1(content interface{}) (interface{}, error) {
	return types.NewIncludedFileLine(content.([]interface{}))

}

func (p *parser) callonIncludedFileLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine1(stack["content"])
}

func (c *current) onDocumentFragment21() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment21()
}

func (c *current) onDocumentFragment28() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment28()
}

func (c *current) onDocumentFragment31() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment31()
}

func (c *current) onDocumentFragment17(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string), string(c.text))

}

func (p *parser) callonDocumentFragment17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment17(stack["name"])
}

func (c *current) onDocumentFragment42() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment42()
}

func (c *current) onDocumentFragment49() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment49()
}

func (c *current) onDocumentFragment52() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment52()
}

func (c *current) onDocumentFragment38(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string), string(c.text))

}

func (p *parser) callonDocumentFragment38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment38(stack["name"])
}

func (c *current) onDocumentFragment65() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment65()
}

func (c *current) onDocumentFragment68() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment68() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment68()
}

func (c *current) onDocumentFragment59() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonDocumentFragment59() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment59()
}

func (c *current) onDocumentFragment77() (bool, error) {

	return !c.isWithinDelimitedBlock(), nil

}

func (p *parser) callonDocumentFragment77() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment77()
}

func (c *current) onDocumentFragment79() (interface{}, error) {

	// `=` is level 0, `==` is level 1, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonDocumentFragment79() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment79()
}

func (c *current) onDocumentFragment82(level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonDocumentFragment82() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment82(stack["level"])
}

func (c *current) onDocumentFragment83(level interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment83() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment83(stack["level"])
}

func (c *current) onDocumentFragment87() (interface{}, error) {
	// can't have empty title, that may collide with example block delimiter (`====`)
	return []interface{}{
		types.RawLine(c.text),
	}, nil

}

func (p *parser) callonDocumentFragment87() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment87()
}

func (c *current) onDocumentFragment91() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment91() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment91()
}

func (c *current) onDocumentFragment75(level, title interface{}) (interface{}, error) {
	return types.NewSection(level.(int), title.([]interface{}))

}

func (p *parser) callonDocumentFragment75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment75(stack["level"], stack["title"])
}

func (c *current) onDocumentFragment103() (interface{}, error) {
	// sequence of 4 "/" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment103() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment103()
}

func (c *current) onDocumentFragment109() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment109() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment109()
}

func (c *current) onDocumentFragment112() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment112() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment112()
}

func (c *current) onDocumentFragment100(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Comment, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentFragment100() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment100(stack["delimiter"])
}

func (c *current) onDocumentFragment128() (interface{}, error) {
	// sequence of 4 "/" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment128() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment128()
}

func (c *current) onDocumentFragment134() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment134() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment134()
}

func (c *current) onDocumentFragment137() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment137() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment137()
}

func (c *current) onDocumentFragment125(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Comment, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentFragment125() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment125(stack["delimiter"])
}

func (c *current) onDocumentFragment153() (interface{}, error) {
	// content is NOT mandatory
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment153() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment153()
}

func (c *current) onDocumentFragment157() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment157() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment157()
}

func (c *current) onDocumentFragment147(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment147() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment147(stack["content"])
}

func (c *current) onDocumentFragment121(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonDocumentFragment121() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment121(stack["line"])
}

func (c *current) onDocumentFragment169() (interface{}, error) {
	// sequence of 4 "/" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment169() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment169()
}

func (c *current) onDocumentFragment175() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment175() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment175()
}

func (c *current) onDocumentFragment178() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment178() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment178()
}

func (c *current) onDocumentFragment166(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Comment, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentFragment166() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment166(stack["delimiter"])
}

func (c *current) onDocumentFragment98(delimiter, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Comment, content.([]interface{}))

}

func (p *parser) callonDocumentFragment98() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment98(stack["delimiter"], stack["content"])
}

func (c *current) onDocumentFragment193() (interface{}, error) {
	// sequence of 4 "=" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment193() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment193()
}

func (c *current) onDocumentFragment199() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment199() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment199()
}

func (c *current) onDocumentFragment202() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment202() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment202()
}

func (c *current) onDocumentFragment190(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Example, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentFragment190() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment190(stack["delimiter"])
}

func (c *current) onDocumentFragment209(start interface{}) (bool, error) {
	return c.setBlockDelimiterLength(start.(*types.BlockDelimiter).Length)

}

func (p *parser) callonDocumentFragment209() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment209(stack["start"])
}

func (c *current) onDocumentFragment221() (interface{}, error) {
	// sequence of 4 "=" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment221() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment221()
}

func (c *current) onDocumentFragment227() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment227() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment227()
}

func (c *current) onDocumentFragment230() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment230() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment230()
}

func (c *current) onDocumentFragment218(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Example, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentFragment218() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment218(stack["delimiter"])
}

func (c *current) onDocumentFragment237(end interface{}) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonDocumentFragment237() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment237(stack["end"])
}

func (c *current) onDocumentFragment247() (interface{}, error) {
	// content is NOT mandatory
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment247() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment247()
}

func (c *current) onDocumentFragment251() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment251() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment251()
}

func (c *current) onDocumentFragment241(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment241() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment241(stack["content"])
}

func (c *current) onDocumentFragment212(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonDocumentFragment212() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment212(stack["line"])
}

func (c *current) onDocumentFragment266() (interface{}, error) {
	// sequence of 4 "=" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment266() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment266()
}

func (c *current) onDocumentFragment272() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment272() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment272()
}

func (c *current) onDocumentFragment275() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment275() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment275()
}

func (c *current) onDocumentFragment263(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Example, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentFragment263() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment263(stack["delimiter"])
}

func (c *current) onDocumentFragment282(end interface{}) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonDocumentFragment282() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment282(stack["end"])
}

func (c *current) onDocumentFragment187(start, content, end interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Example, content.([]interface{}))

}

func (p *parser) callonDocumentFragment187() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment187(stack["start"], stack["content"], stack["end"])
}

func (c *current) onDocumentFragment292() (interface{}, error) {
	// exclude ` to avoid matching fenced blocks with more than 3 "`" delimter chars
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment292() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment292()
}

func (c *current) onDocumentFragment296() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment296() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment296()
}

func (c *current) onDocumentFragment299() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment299() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment299()
}

func (c *current) onDocumentFragment288(language interface{}) (interface{}, error) {
	return types.NewMarkdownCodeBlockDelimiter(language.(string), string(c.text))
}

func (p *parser) callonDocumentFragment288() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment288(stack["language"])
}

func (c *current) onDocumentFragment314() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment314() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment314()
}

func (c *current) onDocumentFragment317() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment317() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment317()
}

func (c *current) onDocumentFragment331() (interface{}, error) {
	// content is NOT mandatory
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment331() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment331()
}

func (c *current) onDocumentFragment335() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment335() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment335()
}

func (c *current) onDocumentFragment325(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment325() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment325(stack["content"])
}

func (c *current) onDocumentFragment308(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonDocumentFragment308() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment308(stack["line"])
}

func (c *current) onDocumentFragment346() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment346() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment346()
}

func (c *current) onDocumentFragment349() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment349() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment349()
}

func (c *current) onDocumentFragment285(delimiter, content interface{}) (interface{}, error) {
	// Markdown code with fences is a "listing/source" block in Asciidoc
	b, err := types.NewDelimitedBlock(types.Listing, content.([]interface{}))
	b.AddAttributes(delimiter.(*types.BlockDelimiter).Attributes)
	return b, err

}

func (p *parser) callonDocumentFragment285() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment285(stack["delimiter"], stack["content"])
}

func (c *current) onDocumentFragment362() (interface{}, error) {
	// sequence of 3 "`" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment362() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment362()
}

func (c *current) onDocumentFragment368() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment368() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment368()
}

func (c *current) onDocumentFragment371() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment371() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment371()
}

func (c *current) onDocumentFragment359(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Fenced, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentFragment359() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment359(stack["delimiter"])
}

func (c *current) onDocumentFragment378(start interface{}) (bool, error) {
	return c.setBlockDelimiterLength(start.(*types.BlockDelimiter).Length)

}

func (p *parser) callonDocumentFragment378() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment378(stack["start"])
}

func (c *current) onDocumentFragment390() (interface{}, error) {
	// sequence of 3 "`" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment390() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment390()
}

func (c *current) onDocumentFragment396() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment396() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment396()
}

func (c *current) onDocumentFragment399() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment399() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment399()
}

func (c *current) onDocumentFragment387(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Fenced, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentFragment387() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment387(stack["delimiter"])
}

func (c *current) onDocumentFragment406(end interface{}) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonDocumentFragment406() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment406(stack["end"])
}

func (c *current) onDocumentFragment416() (interface{}, error) {
	// content is NOT mandatory
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment416() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment416()
}

func (c *current) onDocumentFragment420() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment420() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment420()
}

func (c *current) onDocumentFragment410(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment410() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment410(stack["content"])
}

func (c *current) onDocumentFragment381(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonDocumentFragment381() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment381(stack["line"])
}

func (c *current) onDocumentFragment435() (interface{}, error) {
	// sequence of 3 "`" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment435() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment435()
}

func (c *current) onDocumentFragment441() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment441() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment441()
}

func (c *current) onDocumentFragment444() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment444() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment444()
}

func (c *current) onDocumentFragment432(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Fenced, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentFragment432() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment432(stack["delimiter"])
}

func (c *current) onDocumentFragment451(end interface{}) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonDocumentFragment451() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment451(stack["end"])
}

func (c *current) onDocumentFragment356(start, content, end interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Fenced, content.([]interface{}))

}

func (p *parser) callonDocumentFragment356() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment356(stack["start"], stack["content"], stack["end"])
}

func (c *current) onDocumentFragment460() (interface{}, error) {
	// sequence of 4 "-" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment460() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment460()
}

func (c *current) onDocumentFragment466() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment466() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment466()
}

func (c *current) onDocumentFragment469() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment469() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment469()
}

func (c *current) onDocumentFragment457(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Listing, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentFragment457() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment457(stack["delimiter"])
}

func (c *current) onDocumentFragment476(start interface{}) (bool, error) {
	return c.setBlockDelimiterLength(start.(*types.BlockDelimiter).Length)

}

func (p *parser) callonDocumentFragment476() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment476(stack["start"])
}

func (c *current) onDocumentFragment488() (interface{}, error) {
	// sequence of 4 "-" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment488() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment488()
}

func (c *current) onDocumentFragment494() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment494() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment494()
}

func (c *current) onDocumentFragment497() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment497() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment497()
}

func (c *current) onDocumentFragment485(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Listing, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentFragment485() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment485(stack["delimiter"])
}

func (c *current) onDocumentFragment504(end interface{}) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonDocumentFragment504() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment504(stack["end"])
}

func (c *current) onDocumentFragment514() (interface{}, error) {
	// content is NOT mandatory
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment514() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment514()
}

func (c *current) onDocumentFragment518() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment518() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment518()
}

func (c *current) onDocumentFragment508(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment508() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment508(stack["content"])
}

func (c *current) onDocumentFragment479(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonDocumentFragment479() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment479(stack["line"])
}

func (c *current) onDocumentFragment533() (interface{}, error) {
	// sequence of 4 "-" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment533() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment533()
}

func (c *current) onDocumentFragment539() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment539() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment539()
}

func (c *current) onDocumentFragment542() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment542() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment542()
}

func (c *current) onDocumentFragment530(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Listing, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentFragment530() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment530(stack["delimiter"])
}

func (c *current) onDocumentFragment549(end interface{}) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonDocumentFragment549() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment549(stack["end"])
}

func (c *current) onDocumentFragment454(start, content, end interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Listing, content.([]interface{}))

}

func (p *parser) callonDocumentFragment454() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment454(stack["start"], stack["content"], stack["end"])
}

func (c *current) onDocumentFragment558() (interface{}, error) {
	// sequence of 4 "." chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment558() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment558()
}

func (c *current) onDocumentFragment564() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment564() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment564()
}

func (c *current) onDocumentFragment567() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment567() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment567()
}

func (c *current) onDocumentFragment555(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Listing, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentFragment555() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment555(stack["delimiter"])
}

func (c *current) onDocumentFragment574(start interface{}) (bool, error) {
	return c.setBlockDelimiterLength(start.(*types.BlockDelimiter).Length)

}

func (p *parser) callonDocumentFragment574() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment574(stack["start"])
}

func (c *current) onDocumentFragment586() (interface{}, error) {
	// sequence of 4 "." chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment586() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment586()
}

func (c *current) onDocumentFragment592() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment592() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment592()
}

func (c *current) onDocumentFragment595() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment595() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment595()
}

func (c *current) onDocumentFragment583(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Listing, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentFragment583() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment583(stack["delimiter"])
}

func (c *current) onDocumentFragment602(end interface{}) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonDocumentFragment602() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment602(stack["end"])
}

func (c *current) onDocumentFragment612() (interface{}, error) {
	// content is NOT mandatory
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment612() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment612()
}

func (c *current) onDocumentFragment616() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment616() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment616()
}

func (c *current) onDocumentFragment606(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment606() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment606(stack["content"])
}

func (c *current) onDocumentFragment577(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonDocumentFragment577() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment577(stack["line"])
}

func (c *current) onDocumentFragment631() (interface{}, error) {
	// sequence of 4 "." chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment631() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment631()
}

func (c *current) onDocumentFragment637() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment637() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment637()
}

func (c *current) onDocumentFragment640() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment640() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment640()
}

func (c *current) onDocumentFragment628(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Listing, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentFragment628() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment628(stack["delimiter"])
}

func (c *current) onDocumentFragment647(end interface{}) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonDocumentFragment647() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment647(stack["end"])
}

func (c *current) onDocumentFragment552(start, content, end interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Literal, content.([]interface{}))

}

func (p *parser) callonDocumentFragment552() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment552(stack["start"], stack["content"], stack["end"])
}

func (c *current) onDocumentFragment662() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment662() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment662()
}

func (c *current) onDocumentFragment665() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment665() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment665()
}

func (c *current) onDocumentFragment656() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonDocumentFragment656() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment656()
}

func (c *current) onDocumentFragment674() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment674() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment674()
}

func (c *current) onDocumentFragment678() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment678() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment678()
}

func (c *current) onDocumentFragment653(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment653() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment653(stack["content"])
}

func (c *current) onDocumentFragment697() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment697() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment697()
}

func (c *current) onDocumentFragment700() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment700() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment700()
}

func (c *current) onDocumentFragment691() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonDocumentFragment691() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment691()
}

func (c *current) onDocumentFragment709() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonDocumentFragment709() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment709()
}

func (c *current) onDocumentFragment713() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment713() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment713()
}

func (c *current) onDocumentFragment688(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment688() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment688(stack["content"])
}

func (c *current) onDocumentFragment723() (interface{}, error) {
	return strings.TrimRight(string(c.text), " \t"), nil // trim spaces and tabs

}

func (p *parser) callonDocumentFragment723() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment723()
}

func (c *current) onDocumentFragment726(content interface{}) (bool, error) {
	return len(strings.TrimSpace(content.(string))) > 0, nil

}

func (p *parser) callonDocumentFragment726() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment726(stack["content"])
}

func (c *current) onDocumentFragment728() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment728() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment728()
}

func (c *current) onDocumentFragment720(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment720() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment720(stack["content"])
}

func (c *current) onDocumentFragment650(firstLine, otherLines interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.MarkdownQuote, append([]interface{}{firstLine}, otherLines.([]interface{})...))

}

func (p *parser) callonDocumentFragment650() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment650(stack["firstLine"], stack["otherLines"])
}

func (c *current) onDocumentFragment741() (interface{}, error) {
	// sequence of 4 "+" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment741() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment741()
}

func (c *current) onDocumentFragment747() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment747() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment747()
}

func (c *current) onDocumentFragment750() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment750() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment750()
}

func (c *current) onDocumentFragment738(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Passthrough, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentFragment738() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment738(stack["delimiter"])
}

func (c *current) onDocumentFragment757(start interface{}) (bool, error) {
	return c.setBlockDelimiterLength(start.(*types.BlockDelimiter).Length)

}

func (p *parser) callonDocumentFragment757() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment757(stack["start"])
}

func (c *current) onDocumentFragment769() (interface{}, error) {
	// sequence of 4 "+" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment769() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment769()
}

func (c *current) onDocumentFragment775() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment775() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment775()
}

func (c *current) onDocumentFragment778() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment778() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment778()
}

func (c *current) onDocumentFragment766(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Passthrough, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentFragment766() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment766(stack["delimiter"])
}

func (c *current) onDocumentFragment785(end interface{}) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonDocumentFragment785() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment785(stack["end"])
}

func (c *current) onDocumentFragment795() (interface{}, error) {
	// content is NOT mandatory
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment795() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment795()
}

func (c *current) onDocumentFragment799() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment799() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment799()
}

func (c *current) onDocumentFragment789(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment789() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment789(stack["content"])
}

func (c *current) onDocumentFragment760(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonDocumentFragment760() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment760(stack["line"])
}

func (c *current) onDocumentFragment814() (interface{}, error) {
	// sequence of 4 "+" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment814() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment814()
}

func (c *current) onDocumentFragment820() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment820() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment820()
}

func (c *current) onDocumentFragment823() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment823() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment823()
}

func (c *current) onDocumentFragment811(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Passthrough, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentFragment811() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment811(stack["delimiter"])
}

func (c *current) onDocumentFragment830(end interface{}) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonDocumentFragment830() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment830(stack["end"])
}

func (c *current) onDocumentFragment735(start, content, end interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Passthrough, content.([]interface{}))

}

func (p *parser) callonDocumentFragment735() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment735(stack["start"], stack["content"], stack["end"])
}

func (c *current) onDocumentFragment839() (interface{}, error) {
	// sequence of 4 "_" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment839() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment839()
}

func (c *current) onDocumentFragment845() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment845() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment845()
}

func (c *current) onDocumentFragment848() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment848() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment848()
}

func (c *current) onDocumentFragment836(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Quote, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentFragment836() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment836(stack["delimiter"])
}

func (c *current) onDocumentFragment855(start interface{}) (bool, error) {
	return c.setBlockDelimiterLength(start.(*types.BlockDelimiter).Length)

}

func (p *parser) callonDocumentFragment855() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment855(stack["start"])
}

func (c *current) onDocumentFragment867() (interface{}, error) {
	// sequence of 4 "_" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment867() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment867()
}

func (c *current) onDocumentFragment873() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment873() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment873()
}

func (c *current) onDocumentFragment876() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment876() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment876()
}

func (c *current) onDocumentFragment864(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Quote, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentFragment864() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment864(stack["delimiter"])
}

func (c *current) onDocumentFragment883(end interface{}) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonDocumentFragment883() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment883(stack["end"])
}

func (c *current) onDocumentFragment893() (interface{}, error) {
	// content is NOT mandatory
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment893() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment893()
}

func (c *current) onDocumentFragment897() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment897() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment897()
}

func (c *current) onDocumentFragment887(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment887() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment887(stack["content"])
}

func (c *current) onDocumentFragment858(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonDocumentFragment858() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment858(stack["line"])
}

func (c *current) onDocumentFragment912() (interface{}, error) {
	// sequence of 4 "_" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment912() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment912()
}

func (c *current) onDocumentFragment918() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment918() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment918()
}

func (c *current) onDocumentFragment921() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment921() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment921()
}

func (c *current) onDocumentFragment909(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Quote, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentFragment909() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment909(stack["delimiter"])
}

func (c *current) onDocumentFragment928(end interface{}) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonDocumentFragment928() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment928(stack["end"])
}

func (c *current) onDocumentFragment833(start, content, end interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Quote, content.([]interface{}))

}

func (p *parser) callonDocumentFragment833() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment833(stack["start"], stack["content"], stack["end"])
}

func (c *current) onDocumentFragment937() (interface{}, error) {
	// sequence of 4 "*" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment937() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment937()
}

func (c *current) onDocumentFragment943() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment943() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment943()
}

func (c *current) onDocumentFragment946() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment946() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment946()
}

func (c *current) onDocumentFragment934(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Sidebar, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentFragment934() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment934(stack["delimiter"])
}

func (c *current) onDocumentFragment953(start interface{}) (bool, error) {
	return c.setBlockDelimiterLength(start.(*types.BlockDelimiter).Length)

}

func (p *parser) callonDocumentFragment953() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment953(stack["start"])
}

func (c *current) onDocumentFragment965() (interface{}, error) {
	// sequence of 4 "*" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment965() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment965()
}

func (c *current) onDocumentFragment971() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment971() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment971()
}

func (c *current) onDocumentFragment974() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment974() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment974()
}

func (c *current) onDocumentFragment962(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Sidebar, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentFragment962() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment962(stack["delimiter"])
}

func (c *current) onDocumentFragment981(end interface{}) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonDocumentFragment981() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment981(stack["end"])
}

func (c *current) onDocumentFragment991() (interface{}, error) {
	// content is NOT mandatory
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment991() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment991()
}

func (c *current) onDocumentFragment995() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment995() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment995()
}

func (c *current) onDocumentFragment985(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment985() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment985(stack["content"])
}

func (c *current) onDocumentFragment956(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonDocumentFragment956() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment956(stack["line"])
}

func (c *current) onDocumentFragment1010() (interface{}, error) {
	// sequence of 4 "*" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1010() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1010()
}

func (c *current) onDocumentFragment1016() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1016() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1016()
}

func (c *current) onDocumentFragment1019() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1019() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1019()
}

func (c *current) onDocumentFragment1007(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Sidebar, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentFragment1007() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1007(stack["delimiter"])
}

func (c *current) onDocumentFragment1026(end interface{}) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonDocumentFragment1026() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1026(stack["end"])
}

func (c *current) onDocumentFragment931(start, content, end interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Sidebar, content.([]interface{}))

}

func (p *parser) callonDocumentFragment931() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment931(stack["start"], stack["content"], stack["end"])
}

func (c *current) onDocumentFragment1040() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1040() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1040()
}

func (c *current) onDocumentFragment1043() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1043() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1043()
}

func (c *current) onDocumentFragment1051() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1051() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1051()
}

func (c *current) onDocumentFragment1029() (interface{}, error) {

	return types.NewThematicBreak()

}

func (p *parser) callonDocumentFragment1029() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1029()
}

func (c *current) onDocumentFragment1063() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1063() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1063()
}

func (c *current) onDocumentFragment1066() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1066() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1066()
}

func (c *current) onDocumentFragment1083() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1083() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1083()
}

func (c *current) onDocumentFragment1089() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1089() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1089()
}

func (c *current) onDocumentFragment1087(content interface{}) (interface{}, error) {
	return types.NewRawContent(content.(string))

}

func (p *parser) callonDocumentFragment1087() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1087(stack["content"])
}

func (c *current) onDocumentFragment1079(content interface{}) (interface{}, error) {
	return types.NewTableCell(content.(types.RawContent))

}

func (p *parser) callonDocumentFragment1079() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1079(stack["content"])
}

func (c *current) onDocumentFragment1093() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1093() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1093()
}

func (c *current) onDocumentFragment1107() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1107() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1107()
}

func (c *current) onDocumentFragment1110() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1110() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1110()
}

func (c *current) onDocumentFragment1101() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonDocumentFragment1101() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1101()
}

func (c *current) onDocumentFragment1075(cells interface{}) (interface{}, error) {
	return types.NewTableRow(cells.([]interface{}))

}

func (p *parser) callonDocumentFragment1075() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1075(stack["cells"])
}

func (c *current) onDocumentFragment1127() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1127() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1127()
}

func (c *current) onDocumentFragment1130() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1130() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1130()
}

func (c *current) onDocumentFragment1151() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1151() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1151()
}

func (c *current) onDocumentFragment1154() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1154() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1154()
}

func (c *current) onDocumentFragment1170() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1170() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1170()
}

func (c *current) onDocumentFragment1173() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1173() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1173()
}

func (c *current) onDocumentFragment1164() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonDocumentFragment1164() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1164()
}

func (c *current) onDocumentFragment1182() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1182() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1182()
}

func (c *current) onDocumentFragment1188() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1188() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1188()
}

func (c *current) onDocumentFragment1186(content interface{}) (interface{}, error) {
	return types.NewRawContent(content.(string))

}

func (p *parser) callonDocumentFragment1186() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1186(stack["content"])
}

func (c *current) onDocumentFragment1144(content interface{}) (interface{}, error) {
	return types.NewTableCell(content.(types.RawContent))

}

func (p *parser) callonDocumentFragment1144() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1144(stack["content"])
}

func (c *current) onDocumentFragment1192() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1192() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1192()
}

func (c *current) onDocumentFragment1141(cell interface{}) (interface{}, error) {
	return cell, nil

}

func (p *parser) callonDocumentFragment1141() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1141(stack["cell"])
}

func (c *current) onDocumentFragment1207() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1207() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1207()
}

func (c *current) onDocumentFragment1210() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1210() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1210()
}

func (c *current) onDocumentFragment1201() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonDocumentFragment1201() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1201()
}

func (c *current) onDocumentFragment1222() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1222() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1222()
}

func (c *current) onDocumentFragment1225() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1225() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1225()
}

func (c *current) onDocumentFragment1120(cells interface{}) (interface{}, error) {
	return types.NewTableRow(cells.([]interface{}))

}

func (p *parser) callonDocumentFragment1120() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1120(stack["cells"])
}

func (c *current) onDocumentFragment1241() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1241() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1241()
}

func (c *current) onDocumentFragment1244() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1244() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1244()
}

func (c *current) onDocumentFragment1262() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1262() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1262()
}

func (c *current) onDocumentFragment1265() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1265() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1265()
}

func (c *current) onDocumentFragment1281() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1281() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1281()
}

func (c *current) onDocumentFragment1284() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1284() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1284()
}

func (c *current) onDocumentFragment1275() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonDocumentFragment1275() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1275()
}

func (c *current) onDocumentFragment1293() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1293() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1293()
}

func (c *current) onDocumentFragment1299() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1299() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1299()
}

func (c *current) onDocumentFragment1297(content interface{}) (interface{}, error) {
	return types.NewRawContent(content.(string))

}

func (p *parser) callonDocumentFragment1297() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1297(stack["content"])
}

func (c *current) onDocumentFragment1255(content interface{}) (interface{}, error) {
	return types.NewTableCell(content.(types.RawContent))

}

func (p *parser) callonDocumentFragment1255() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1255(stack["content"])
}

func (c *current) onDocumentFragment1303() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1303() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1303()
}

func (c *current) onDocumentFragment1317() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1317() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1317()
}

func (c *current) onDocumentFragment1320() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1320() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1320()
}

func (c *current) onDocumentFragment1311() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonDocumentFragment1311() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1311()
}

func (c *current) onDocumentFragment1234(cells interface{}) (interface{}, error) {
	return types.NewTableRow(cells.([]interface{}))

}

func (p *parser) callonDocumentFragment1234() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1234(stack["cells"])
}

func (c *current) onDocumentFragment1331() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1331() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1331()
}

func (c *current) onDocumentFragment1334() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1334() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1334()
}

func (c *current) onDocumentFragment1059(header, rows interface{}) (interface{}, error) {
	return types.NewTable(header, rows.([]interface{}))

}

func (p *parser) callonDocumentFragment1059() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1059(stack["header"], stack["rows"])
}

func (c *current) onDocumentFragment1349() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1349() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1349()
}

func (c *current) onDocumentFragment1353() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1353() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1353()
}

func (c *current) onDocumentFragment1343(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))

}

func (p *parser) callonDocumentFragment1343() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1343(stack["content"])
}

func (c *current) onDocumentFragment1364() (interface{}, error) {
	return types.Tip, nil
}

func (p *parser) callonDocumentFragment1364() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1364()
}

func (c *current) onDocumentFragment1366() (interface{}, error) {
	return types.Note, nil
}

func (p *parser) callonDocumentFragment1366() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1366()
}

func (c *current) onDocumentFragment1368() (interface{}, error) {
	return types.Important, nil
}

func (p *parser) callonDocumentFragment1368() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1368()
}

func (c *current) onDocumentFragment1370() (interface{}, error) {
	return types.Warning, nil
}

func (p *parser) callonDocumentFragment1370() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1370()
}

func (c *current) onDocumentFragment1372() (interface{}, error) {
	return types.Caution, nil
}

func (p *parser) callonDocumentFragment1372() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1372()
}

func (c *current) onDocumentFragment1379() (interface{}, error) {
	return strings.TrimRight(string(c.text), " \t"), nil // trim spaces and tabs

}

func (p *parser) callonDocumentFragment1379() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1379()
}

func (c *current) onDocumentFragment1382(content interface{}) (bool, error) {
	return len(strings.TrimSpace(content.(string))) > 0, nil

}

func (p *parser) callonDocumentFragment1382() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1382(stack["content"])
}

func (c *current) onDocumentFragment1384() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1384() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1384()
}

func (c *current) onDocumentFragment1376(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment1376() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1376(stack["content"])
}

func (c *current) onDocumentFragment1399() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1399() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1399()
}

func (c *current) onDocumentFragment1401() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1401() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1401()
}

func (c *current) onDocumentFragment1414() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1414() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1414()
}

func (c *current) onDocumentFragment1418() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1418() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1418()
}

func (c *current) onDocumentFragment1408(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))

}

func (p *parser) callonDocumentFragment1408() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1408(stack["content"])
}

func (c *current) onDocumentFragment1428() (interface{}, error) {
	return strings.TrimRight(string(c.text), " \t"), nil // trim spaces and tabs

}

func (p *parser) callonDocumentFragment1428() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1428()
}

func (c *current) onDocumentFragment1431(content interface{}) (bool, error) {
	return len(strings.TrimSpace(content.(string))) > 0, nil

}

func (p *parser) callonDocumentFragment1431() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1431(stack["content"])
}

func (c *current) onDocumentFragment1433() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1433() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1433()
}

func (c *current) onDocumentFragment1425(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment1425() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1425(stack["content"])
}

func (c *current) onDocumentFragment1393(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonDocumentFragment1393() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1393(stack["line"])
}

func (c *current) onDocumentFragment1360(kind, firstLine, otherLines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(kind.(string), append([]interface{}{firstLine}, otherLines.([]interface{})...))

}

func (p *parser) callonDocumentFragment1360() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1360(stack["kind"], stack["firstLine"], stack["otherLines"])
}

func (c *current) onDocumentFragment1448() (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1448() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1448()
}

func (c *current) onDocumentFragment1446() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1446() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1446()
}

func (c *current) onDocumentFragment1453(content interface{}) (bool, error) {
	return len(strings.TrimSpace(string(c.text))) > 0, nil

}

func (p *parser) callonDocumentFragment1453() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1453(stack["content"])
}

func (c *current) onDocumentFragment1455() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1455() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1455()
}

func (c *current) onDocumentFragment1443(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment1443() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1443(stack["content"])
}

func (c *current) onDocumentFragment1471() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1471() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1471()
}

func (c *current) onDocumentFragment1475() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1475() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1475()
}

func (c *current) onDocumentFragment1465(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))

}

func (p *parser) callonDocumentFragment1465() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1465(stack["content"])
}

func (c *current) onDocumentFragment1485() (interface{}, error) {
	return strings.TrimRight(string(c.text), " \t"), nil // trim spaces and tabs

}

func (p *parser) callonDocumentFragment1485() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1485()
}

func (c *current) onDocumentFragment1488(content interface{}) (bool, error) {
	return len(strings.TrimSpace(content.(string))) > 0, nil

}

func (p *parser) callonDocumentFragment1488() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1488(stack["content"])
}

func (c *current) onDocumentFragment1490() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1490() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1490()
}

func (c *current) onDocumentFragment1482(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentFragment1482() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1482(stack["content"])
}

func (c *current) onDocumentFragment1440(firstLine, otherLines interface{}) (interface{}, error) {

	return types.NewLiteralParagraph(types.LiteralBlockWithSpacesOnFirstLine, append([]interface{}{firstLine}, otherLines.([]interface{})...))

}

func (p *parser) callonDocumentFragment1440() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1440(stack["firstLine"], stack["otherLines"])
}

func (c *current) onDocumentFragment1499() (bool, error) {
	return c.isFrontMatterAllowed(), nil

}

func (p *parser) callonDocumentFragment1499() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1499()
}

func (c *current) onDocumentFragment1505() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1505() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1505()
}

func (c *current) onDocumentFragment1508() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1508() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1508()
}

func (c *current) onDocumentFragment1525() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1525() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1525()
}

func (c *current) onDocumentFragment1528() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1528() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1528()
}

func (c *current) onDocumentFragment1517() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1517() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1517()
}

func (c *current) onDocumentFragment1538() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentFragment1538() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1538()
}

func (c *current) onDocumentFragment1541() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentFragment1541() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1541()
}

func (c *current) onDocumentFragment1501(content interface{}) (interface{}, error) {
	return types.NewYamlFrontMatter(content.(string))
}

func (p *parser) callonDocumentFragment1501() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1501(stack["content"])
}

func (c *current) onDocumentFragment1497(frontmatter interface{}) (interface{}, error) {
	return frontmatter, nil

}

func (p *parser) callonDocumentFragment1497() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1497(stack["frontmatter"])
}

func (c *current) onDocumentFragment1(attributes, element interface{}) (interface{}, error) {
	c.disableFrontMatterRule()    // not allowed as soon as a single element is found
	c.disableDocumentHeaderRule() // not allowed anymore, based on element that was found

	if element, ok := element.(types.WithAttributes); ok && attributes != nil {
		element.AddAttributes(attributes.(types.Attributes))
	}
	return element, nil

}

func (p *parser) callonDocumentFragment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentFragment1(stack["attributes"], stack["element"])
}

func (c *current) onDelimitedBlockElements10() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDelimitedBlockElements10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlockElements10()
}

func (c *current) onDelimitedBlockElements6(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonDelimitedBlockElements6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlockElements6(stack["ref"])
}

func (c *current) onDelimitedBlockElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonDelimitedBlockElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlockElements1(stack["elements"])
}

func (c *current) onAttributeDeclaration5() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeDeclaration5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration5()
}

func (c *current) onAttributeDeclaration15() (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonAttributeDeclaration15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration15()
}

func (c *current) onAttributeDeclaration13(value interface{}) (interface{}, error) {
	return value, nil

}

func (p *parser) callonAttributeDeclaration13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration13(stack["value"])
}

func (c *current) onAttributeDeclaration21() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonAttributeDeclaration21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration21()
}

func (c *current) onAttributeDeclaration1(name, value interface{}) (interface{}, error) {
	return types.NewAttributeDeclaration(name.(string), types.Reduce(value, strings.TrimSpace), string(c.text))

}

func (p *parser) callonAttributeDeclaration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration1(stack["name"], stack["value"])
}

func (c *current) onAttributeDeclarationValue14() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeDeclarationValue14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue14()
}

func (c *current) onAttributeDeclarationValue17() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonAttributeDeclarationValue17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue17()
}

func (c *current) onAttributeDeclarationValue26() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAttributeDeclarationValue26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue26()
}

func (c *current) onAttributeDeclarationValue29() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeDeclarationValue29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue29()
}

func (c *current) onAttributeDeclarationValue33() (bool, error) {
	return c.isSubstitutionEnabled(Attributes), nil

}

func (p *parser) callonAttributeDeclarationValue33() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue33()
}

func (c *current) onAttributeDeclarationValue40() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeDeclarationValue40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue40()
}

func (c *current) onAttributeDeclarationValue52() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeDeclarationValue52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue52()
}

func (c *current) onAttributeDeclarationValue54() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonAttributeDeclarationValue54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue54()
}

func (c *current) onAttributeDeclarationValue47(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonAttributeDeclarationValue47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue47(stack["start"])
}

func (c *current) onAttributeDeclarationValue36(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonAttributeDeclarationValue36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue36(stack["name"], stack["start"])
}

func (c *current) onAttributeDeclarationValue62() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeDeclarationValue62() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue62()
}

func (c *current) onAttributeDeclarationValue74() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeDeclarationValue74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue74()
}

func (c *current) onAttributeDeclarationValue76() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonAttributeDeclarationValue76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue76()
}

func (c *current) onAttributeDeclarationValue69(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonAttributeDeclarationValue69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue69(stack["start"])
}

func (c *current) onAttributeDeclarationValue58(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonAttributeDeclarationValue58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue58(stack["name"], stack["start"])
}

func (c *current) onAttributeDeclarationValue84() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeDeclarationValue84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue84()
}

func (c *current) onAttributeDeclarationValue80(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonAttributeDeclarationValue80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue80(stack["name"])
}

func (c *current) onAttributeDeclarationValue94() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeDeclarationValue94() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue94()
}

func (c *current) onAttributeDeclarationValue90(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonAttributeDeclarationValue90() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue90(stack["name"])
}

func (c *current) onAttributeDeclarationValue31(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonAttributeDeclarationValue31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue31(stack["element"])
}

func (c *current) onAttributeDeclarationValue100() (interface{}, error) {
	// standalone '{'
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAttributeDeclarationValue100() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue100()
}

func (c *current) onAttributeDeclarationValue7(element interface{}) (interface{}, error) {

	return element, nil

}

func (p *parser) callonAttributeDeclarationValue7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue7(stack["element"])
}

func (c *current) onAttributeDeclarationValue4(elements interface{}) (interface{}, error) {
	return elements.([]interface{}), nil

}

func (p *parser) callonAttributeDeclarationValue4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue4(stack["elements"])
}

func (c *current) onAttributeDeclarationValue107() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonAttributeDeclarationValue107() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue107()
}

func (c *current) onAttributeDeclarationValue113() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeDeclarationValue113() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue113()
}

func (c *current) onAttributeDeclarationValue104(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonAttributeDeclarationValue104() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue104(stack["elements"])
}

func (c *current) onAttributeDeclarationValue1(elements, otherElements interface{}) (interface{}, error) {
	if otherElements, ok := otherElements.([]interface{}); ok {
		return types.Reduce(append(elements.([]interface{}), otherElements...), strings.TrimSpace), nil
	}
	return types.Reduce(elements.([]interface{}), strings.TrimSpace), nil

}

func (p *parser) callonAttributeDeclarationValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue1(stack["elements"], stack["otherElements"])
}

func (c *current) onBlockAttributes16() (interface{}, error) {
	// spaces, commas and dots are allowed in this syntax
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonBlockAttributes16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes16()
}

func (c *current) onBlockAttributes23() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonBlockAttributes23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes23()
}

func (c *current) onBlockAttributes19(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonBlockAttributes19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes19(stack["ref"])
}

func (c *current) onBlockAttributes29() (bool, error) {
	return c.isSubstitutionEnabled(Attributes), nil

}

func (p *parser) callonBlockAttributes29() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes29()
}

func (c *current) onBlockAttributes36() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes36()
}

func (c *current) onBlockAttributes48() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes48()
}

func (c *current) onBlockAttributes50() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonBlockAttributes50() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes50()
}

func (c *current) onBlockAttributes43(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonBlockAttributes43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes43(stack["start"])
}

func (c *current) onBlockAttributes32(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonBlockAttributes32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes32(stack["name"], stack["start"])
}

func (c *current) onBlockAttributes58() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes58()
}

func (c *current) onBlockAttributes70() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes70() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes70()
}

func (c *current) onBlockAttributes72() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonBlockAttributes72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes72()
}

func (c *current) onBlockAttributes65(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonBlockAttributes65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes65(stack["start"])
}

func (c *current) onBlockAttributes54(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonBlockAttributes54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes54(stack["name"], stack["start"])
}

func (c *current) onBlockAttributes80() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes80()
}

func (c *current) onBlockAttributes76(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonBlockAttributes76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes76(stack["name"])
}

func (c *current) onBlockAttributes90() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes90() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes90()
}

func (c *current) onBlockAttributes86(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonBlockAttributes86() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes86(stack["name"])
}

func (c *current) onBlockAttributes27(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonBlockAttributes27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes27(stack["element"])
}

func (c *current) onBlockAttributes96() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonBlockAttributes96() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes96()
}

func (c *current) onBlockAttributes12(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonBlockAttributes12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes12(stack["elements"])
}

func (c *current) onBlockAttributes8(id interface{}) (interface{}, error) {
	return types.NewIDAttribute(id)

}

func (p *parser) callonBlockAttributes8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes8(stack["id"])
}

func (c *current) onBlockAttributes100() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes100() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes100()
}

func (c *current) onBlockAttributes103() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonBlockAttributes103() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes103()
}

func (c *current) onBlockAttributes117() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes117() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes117()
}

func (c *current) onBlockAttributes120() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonBlockAttributes120() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes120()
}

func (c *current) onBlockAttributes111() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonBlockAttributes111() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes111()
}

func (c *current) onBlockAttributes5(anchor interface{}) (interface{}, error) {
	return anchor, nil

}

func (p *parser) callonBlockAttributes5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes5(stack["anchor"])
}

func (c *current) onBlockAttributes141() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes141() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes141()
}

func (c *current) onBlockAttributes148() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes148() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes148()
}

func (c *current) onBlockAttributes144(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonBlockAttributes144() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes144(stack["name"])
}

func (c *current) onBlockAttributes158() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes158() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes158()
}

func (c *current) onBlockAttributes154(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonBlockAttributes154() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes154(stack["name"])
}

func (c *current) onBlockAttributes164() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonBlockAttributes164() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes164()
}

func (c *current) onBlockAttributes134(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonBlockAttributes134() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes134(stack["elements"])
}

func (c *current) onBlockAttributes130(title interface{}) (interface{}, error) {
	return types.NewTitleAttribute(title)

}

func (p *parser) callonBlockAttributes130() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes130(stack["title"])
}

func (c *current) onBlockAttributes167() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes167() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes167()
}

func (c *current) onBlockAttributes170() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonBlockAttributes170() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes170()
}

func (c *current) onBlockAttributes184() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes184() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes184()
}

func (c *current) onBlockAttributes187() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonBlockAttributes187() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes187()
}

func (c *current) onBlockAttributes178() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonBlockAttributes178() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes178()
}

func (c *current) onBlockAttributes127(title interface{}) (interface{}, error) {
	return title, nil

}

func (p *parser) callonBlockAttributes127() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes127(stack["title"])
}

func (c *current) onBlockAttributes199() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes199() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes199()
}

func (c *current) onBlockAttributes202() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonBlockAttributes202() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes202()
}

func (c *current) onBlockAttributes216() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonBlockAttributes216() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes216()
}

func (c *current) onBlockAttributes219() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonBlockAttributes219() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes219()
}

func (c *current) onBlockAttributes210() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonBlockAttributes210() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes210()
}

func (c *current) onBlockAttributes194(attributes interface{}) (interface{}, error) {
	return attributes, nil

}

func (p *parser) callonBlockAttributes194() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes194(stack["attributes"])
}

func (c *current) onBlockAttributes1(attributes interface{}) (interface{}, error) {
	// c.unsetCurrentSubstitution()
	return types.MergeAttributes(attributes.([]interface{})...)

}

func (p *parser) callonBlockAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes1(stack["attributes"])
}

func (c *current) onInlineAttributes6(attribute interface{}) (interface{}, error) {
	return attribute, nil

}

func (p *parser) callonInlineAttributes6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAttributes6(stack["attribute"])
}

func (c *current) onInlineAttributes1(attributes interface{}) (interface{}, error) {
	return types.NewAttributes(attributes.([]interface{})...)

}

func (p *parser) callonInlineAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAttributes1(stack["attributes"])
}

func (c *current) onLongHandAttributes1(firstPositionalAttributes, otherAttributes interface{}) (interface{}, error) {
	attributes := []interface{}{}
	if firstPositionalAttributes != nil {
		attributes = append(attributes, firstPositionalAttributes.([]interface{})...)
	}
	if len(otherAttributes.([]interface{})) > 0 {
		attributes = append(attributes, otherAttributes.([]interface{})...)
	}
	return types.NewAttributes(attributes...)

}

func (p *parser) callonLongHandAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1(stack["firstPositionalAttributes"], stack["otherAttributes"])
}

func (c *current) onFirstPositionalAttributes8(extra interface{}) (interface{}, error) {
	return extra, nil

}

func (p *parser) callonFirstPositionalAttributes8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstPositionalAttributes8(stack["extra"])
}

func (c *current) onFirstPositionalAttributes23() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFirstPositionalAttributes23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstPositionalAttributes23()
}

func (c *current) onFirstPositionalAttributes25(main, extras interface{}) (bool, error) {
	// make sure there was a match
	return main != nil || len(extras.([]interface{})) > 0, nil

}

func (p *parser) callonFirstPositionalAttributes25() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstPositionalAttributes25(stack["main"], stack["extras"])
}

func (c *current) onFirstPositionalAttributes1(main, extras interface{}) (interface{}, error) {
	attrs := []interface{}{}
	if main != nil {
		attrs = append(attrs, main)
	}
	if len(extras.([]interface{})) > 0 {
		attrs = append(attrs, extras.([]interface{})...)
	}
	return attrs, nil

}

func (p *parser) callonFirstPositionalAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstPositionalAttributes1(stack["main"], stack["extras"])
}

func (c *current) onShortHandIDAttribute1(id interface{}) (interface{}, error) {
	return types.NewIDAttribute(id)

}

func (p *parser) callonShortHandIDAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandIDAttribute1(stack["id"])
}

func (c *current) onShortHandAttribute1(value interface{}) (interface{}, error) {
	return types.NewPositionalAttribute(value)

}

func (p *parser) callonShortHandAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttribute1(stack["value"])
}

func (c *current) onShortHandDotRoleAttribute1(role interface{}) (interface{}, error) {
	return types.NewRoleAttribute(role)

}

func (p *parser) callonShortHandDotRoleAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandDotRoleAttribute1(stack["role"])
}

func (c *current) onShortHandOptionAttribute1(option interface{}) (interface{}, error) {
	return types.NewOptionAttribute(option)

}

func (p *parser) callonShortHandOptionAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandOptionAttribute1(stack["option"])
}

func (c *current) onShortHandAttributeValue9() (interface{}, error) {
	return types.NewSymbol("\"`")

}

func (p *parser) callonShortHandAttributeValue9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue9()
}

func (c *current) onShortHandAttributeValue11() (interface{}, error) {
	return types.NewSymbol("`\"")

}

func (p *parser) callonShortHandAttributeValue11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue11()
}

func (c *current) onShortHandAttributeValue13() (interface{}, error) {
	return types.NewSymbol("'`")

}

func (p *parser) callonShortHandAttributeValue13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue13()
}

func (c *current) onShortHandAttributeValue15() (interface{}, error) {
	return types.NewSymbol("`'")

}

func (p *parser) callonShortHandAttributeValue15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue15()
}

func (c *current) onShortHandAttributeValue17() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandAttributeValue17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue17()
}

func (c *current) onShortHandAttributeValue22() (bool, error) {
	return c.isSubstitutionEnabled(Attributes), nil

}

func (p *parser) callonShortHandAttributeValue22() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue22()
}

func (c *current) onShortHandAttributeValue29() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonShortHandAttributeValue29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue29()
}

func (c *current) onShortHandAttributeValue41() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonShortHandAttributeValue41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue41()
}

func (c *current) onShortHandAttributeValue43() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonShortHandAttributeValue43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue43()
}

func (c *current) onShortHandAttributeValue36(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonShortHandAttributeValue36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue36(stack["start"])
}

func (c *current) onShortHandAttributeValue25(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonShortHandAttributeValue25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue25(stack["name"], stack["start"])
}

func (c *current) onShortHandAttributeValue51() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonShortHandAttributeValue51() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue51()
}

func (c *current) onShortHandAttributeValue63() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonShortHandAttributeValue63() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue63()
}

func (c *current) onShortHandAttributeValue65() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonShortHandAttributeValue65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue65()
}

func (c *current) onShortHandAttributeValue58(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonShortHandAttributeValue58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue58(stack["start"])
}

func (c *current) onShortHandAttributeValue47(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonShortHandAttributeValue47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue47(stack["name"], stack["start"])
}

func (c *current) onShortHandAttributeValue73() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonShortHandAttributeValue73() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue73()
}

func (c *current) onShortHandAttributeValue69(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonShortHandAttributeValue69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue69(stack["name"])
}

func (c *current) onShortHandAttributeValue83() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonShortHandAttributeValue83() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue83()
}

func (c *current) onShortHandAttributeValue79(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonShortHandAttributeValue79() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue79(stack["name"])
}

func (c *current) onShortHandAttributeValue20(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonShortHandAttributeValue20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue20(stack["element"])
}

func (c *current) onShortHandAttributeValue89() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandAttributeValue89() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue89()
}

func (c *current) onShortHandAttributeValue95() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonShortHandAttributeValue95() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue95()
}

func (c *current) onShortHandAttributeValue4(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonShortHandAttributeValue4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue4(stack["elements"])
}

func (c *current) onPositionalAttribute11() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonPositionalAttribute11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute11()
}

func (c *current) onPositionalAttribute2(value interface{}) (interface{}, error) {
	// TODO: see if we can just use `((",")? / &"]")` instead (ie, no need to check for Space*)
	return types.NewPositionalAttribute(value)

}

func (p *parser) callonPositionalAttribute2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute2(stack["value"])
}

func (c *current) onPositionalAttribute20() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonPositionalAttribute20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute20()
}

func (c *current) onPositionalAttribute26() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonPositionalAttribute26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute26()
}

func (c *current) onPositionalAttribute30(value interface{}) (bool, error) {
	// here we can't rely on `c.text` if the content is empty
	// (in such a case, `c.text` contains the char sequence of the previous
	// rule that matched)
	return !types.AllNilEntries(value.([]interface{})), nil

}

func (p *parser) callonPositionalAttribute30() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute30(stack["value"])
}

func (c *current) onPositionalAttribute15(value interface{}) (interface{}, error) {

	return types.NewPositionalAttribute(nil)

}

func (p *parser) callonPositionalAttribute15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute15(stack["value"])
}

func (c *current) onNamedAttribute7() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonNamedAttribute7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttribute7()
}

func (c *current) onNamedAttribute12() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonNamedAttribute12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttribute12()
}

func (c *current) onNamedAttribute4() (interface{}, error) {
	return strings.TrimSpace(string(c.text)), nil

}

func (p *parser) callonNamedAttribute4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttribute4()
}

func (c *current) onNamedAttribute16() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonNamedAttribute16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttribute16()
}

func (c *current) onNamedAttribute24() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonNamedAttribute24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttribute24()
}

func (c *current) onNamedAttribute1(key, value interface{}) (interface{}, error) {
	// TODO: include `,` or expect `]`
	return types.NewNamedAttribute(key.(string), value)

}

func (p *parser) callonNamedAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttribute1(stack["key"], stack["value"])
}

func (c *current) onAttributeValue12() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonAttributeValue12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue12()
}

func (c *current) onAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil

}

func (p *parser) callonAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue1(stack["value"])
}

func (c *current) onSingleQuotedAttributeValue1(content interface{}) (interface{}, error) {
	return content, nil

}

func (p *parser) callonSingleQuotedAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue1(stack["content"])
}

func (c *current) onSingleQuotedAttributeValueContent5() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedAttributeValueContent5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent5()
}

func (c *current) onSingleQuotedAttributeValueContent8() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedAttributeValueContent8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent8()
}

func (c *current) onSingleQuotedAttributeValueContent11() (interface{}, error) {
	return types.NewSymbol("\"`")

}

func (p *parser) callonSingleQuotedAttributeValueContent11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent11()
}

func (c *current) onSingleQuotedAttributeValueContent13() (interface{}, error) {
	return types.NewSymbol("`\"")

}

func (p *parser) callonSingleQuotedAttributeValueContent13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent13()
}

func (c *current) onSingleQuotedAttributeValueContent15() (interface{}, error) {
	return types.NewSymbol("'`")

}

func (p *parser) callonSingleQuotedAttributeValueContent15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent15()
}

func (c *current) onSingleQuotedAttributeValueContent17() (interface{}, error) {
	return types.NewSymbol("`'")

}

func (p *parser) callonSingleQuotedAttributeValueContent17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent17()
}

func (c *current) onSingleQuotedAttributeValueContent21() (bool, error) {
	return c.isSubstitutionEnabled(Attributes), nil

}

func (p *parser) callonSingleQuotedAttributeValueContent21() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent21()
}

func (c *current) onSingleQuotedAttributeValueContent28() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedAttributeValueContent28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent28()
}

func (c *current) onSingleQuotedAttributeValueContent40() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedAttributeValueContent40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent40()
}

func (c *current) onSingleQuotedAttributeValueContent42() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuotedAttributeValueContent42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent42()
}

func (c *current) onSingleQuotedAttributeValueContent35(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuotedAttributeValueContent35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent35(stack["start"])
}

func (c *current) onSingleQuotedAttributeValueContent24(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonSingleQuotedAttributeValueContent24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent24(stack["name"], stack["start"])
}

func (c *current) onSingleQuotedAttributeValueContent50() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedAttributeValueContent50() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent50()
}

func (c *current) onSingleQuotedAttributeValueContent62() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedAttributeValueContent62() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent62()
}

func (c *current) onSingleQuotedAttributeValueContent64() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuotedAttributeValueContent64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent64()
}

func (c *current) onSingleQuotedAttributeValueContent57(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuotedAttributeValueContent57() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent57(stack["start"])
}

func (c *current) onSingleQuotedAttributeValueContent46(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonSingleQuotedAttributeValueContent46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent46(stack["name"], stack["start"])
}

func (c *current) onSingleQuotedAttributeValueContent72() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedAttributeValueContent72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent72()
}

func (c *current) onSingleQuotedAttributeValueContent68(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonSingleQuotedAttributeValueContent68() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent68(stack["name"])
}

func (c *current) onSingleQuotedAttributeValueContent82() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuotedAttributeValueContent82() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent82()
}

func (c *current) onSingleQuotedAttributeValueContent78(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonSingleQuotedAttributeValueContent78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent78(stack["name"])
}

func (c *current) onSingleQuotedAttributeValueContent19(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuotedAttributeValueContent19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent19(stack["element"])
}

func (c *current) onSingleQuotedAttributeValueContent88() (interface{}, error) {

	return types.NewStringElement(`'`) // escaped single quote

}

func (p *parser) callonSingleQuotedAttributeValueContent88() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent88()
}

func (c *current) onSingleQuotedAttributeValueContent92() (interface{}, error) {
	// quoted string delimiters or standalone backslash
	return types.NewStringElement(string(c.text)) // keep as-is for now

}

func (p *parser) callonSingleQuotedAttributeValueContent92() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent92()
}

func (c *current) onSingleQuotedAttributeValueContent94() (interface{}, error) {
	// = and , signs are allowed within '' quoted values
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuotedAttributeValueContent94() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent94()
}

func (c *current) onSingleQuotedAttributeValueContent1(elements interface{}) (interface{}, error) {
	return types.Reduce(elements), nil

}

func (p *parser) callonSingleQuotedAttributeValueContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValueContent1(stack["elements"])
}

func (c *current) onDoubleQuotedAttributeValue13() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedAttributeValue13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue13()
}

func (c *current) onDoubleQuotedAttributeValue1(content interface{}) (interface{}, error) {
	return content, nil

}

func (p *parser) callonDoubleQuotedAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue1(stack["content"])
}

func (c *current) onDoubleQuotedAttributeValueContent5() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedAttributeValueContent5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent5()
}

func (c *current) onDoubleQuotedAttributeValueContent8() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedAttributeValueContent8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent8()
}

func (c *current) onDoubleQuotedAttributeValueContent11() (interface{}, error) {
	return types.NewSymbol("\"`")

}

func (p *parser) callonDoubleQuotedAttributeValueContent11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent11()
}

func (c *current) onDoubleQuotedAttributeValueContent13() (interface{}, error) {
	return types.NewSymbol("`\"")

}

func (p *parser) callonDoubleQuotedAttributeValueContent13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent13()
}

func (c *current) onDoubleQuotedAttributeValueContent15() (interface{}, error) {
	return types.NewSymbol("'`")

}

func (p *parser) callonDoubleQuotedAttributeValueContent15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent15()
}

func (c *current) onDoubleQuotedAttributeValueContent17() (interface{}, error) {
	return types.NewSymbol("`'")

}

func (p *parser) callonDoubleQuotedAttributeValueContent17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent17()
}

func (c *current) onDoubleQuotedAttributeValueContent21() (bool, error) {
	return c.isSubstitutionEnabled(Attributes), nil

}

func (p *parser) callonDoubleQuotedAttributeValueContent21() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent21()
}

func (c *current) onDoubleQuotedAttributeValueContent28() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedAttributeValueContent28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent28()
}

func (c *current) onDoubleQuotedAttributeValueContent40() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedAttributeValueContent40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent40()
}

func (c *current) onDoubleQuotedAttributeValueContent42() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuotedAttributeValueContent42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent42()
}

func (c *current) onDoubleQuotedAttributeValueContent35(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuotedAttributeValueContent35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent35(stack["start"])
}

func (c *current) onDoubleQuotedAttributeValueContent24(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonDoubleQuotedAttributeValueContent24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent24(stack["name"], stack["start"])
}

func (c *current) onDoubleQuotedAttributeValueContent50() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedAttributeValueContent50() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent50()
}

func (c *current) onDoubleQuotedAttributeValueContent62() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedAttributeValueContent62() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent62()
}

func (c *current) onDoubleQuotedAttributeValueContent64() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuotedAttributeValueContent64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent64()
}

func (c *current) onDoubleQuotedAttributeValueContent57(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuotedAttributeValueContent57() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent57(stack["start"])
}

func (c *current) onDoubleQuotedAttributeValueContent46(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonDoubleQuotedAttributeValueContent46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent46(stack["name"], stack["start"])
}

func (c *current) onDoubleQuotedAttributeValueContent72() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedAttributeValueContent72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent72()
}

func (c *current) onDoubleQuotedAttributeValueContent68(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonDoubleQuotedAttributeValueContent68() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent68(stack["name"])
}

func (c *current) onDoubleQuotedAttributeValueContent82() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuotedAttributeValueContent82() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent82()
}

func (c *current) onDoubleQuotedAttributeValueContent78(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonDoubleQuotedAttributeValueContent78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent78(stack["name"])
}

func (c *current) onDoubleQuotedAttributeValueContent19(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuotedAttributeValueContent19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent19(stack["element"])
}

func (c *current) onDoubleQuotedAttributeValueContent88() (interface{}, error) {

	return types.NewStringElement(`"`) // escaped double quote

}

func (p *parser) callonDoubleQuotedAttributeValueContent88() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent88()
}

func (c *current) onDoubleQuotedAttributeValueContent93() (interface{}, error) {
	// quoted string delimiters or standalone backslash or standalone backtick
	return types.NewStringElement(string(c.text)) // keep as-is for now

}

func (p *parser) callonDoubleQuotedAttributeValueContent93() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent93()
}

func (c *current) onDoubleQuotedAttributeValueContent95() (interface{}, error) {
	// = and , signs are allowed within " quoted values
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuotedAttributeValueContent95() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent95()
}

func (c *current) onDoubleQuotedAttributeValueContent1(elements interface{}) (interface{}, error) {
	return types.Reduce(elements), nil

}

func (p *parser) callonDoubleQuotedAttributeValueContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValueContent1(stack["elements"])
}

func (c *current) onUnquotedAttributeValue4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUnquotedAttributeValue4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue4()
}

func (c *current) onUnquotedAttributeValue14() (interface{}, error) {
	// not within brackets and stop on space and quotation marks (`"')
	return string(c.text), nil

}

func (p *parser) callonUnquotedAttributeValue14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue14()
}

func (c *current) onUnquotedAttributeValue17() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUnquotedAttributeValue17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue17()
}

func (c *current) onUnquotedAttributeValue21() (bool, error) {
	return c.isSubstitutionEnabled(Attributes), nil

}

func (p *parser) callonUnquotedAttributeValue21() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue21()
}

func (c *current) onUnquotedAttributeValue28() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUnquotedAttributeValue28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue28()
}

func (c *current) onUnquotedAttributeValue40() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUnquotedAttributeValue40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue40()
}

func (c *current) onUnquotedAttributeValue42() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonUnquotedAttributeValue42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue42()
}

func (c *current) onUnquotedAttributeValue35(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonUnquotedAttributeValue35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue35(stack["start"])
}

func (c *current) onUnquotedAttributeValue24(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonUnquotedAttributeValue24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue24(stack["name"], stack["start"])
}

func (c *current) onUnquotedAttributeValue50() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUnquotedAttributeValue50() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue50()
}

func (c *current) onUnquotedAttributeValue62() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUnquotedAttributeValue62() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue62()
}

func (c *current) onUnquotedAttributeValue64() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonUnquotedAttributeValue64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue64()
}

func (c *current) onUnquotedAttributeValue57(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonUnquotedAttributeValue57() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue57(stack["start"])
}

func (c *current) onUnquotedAttributeValue46(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonUnquotedAttributeValue46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue46(stack["name"], stack["start"])
}

func (c *current) onUnquotedAttributeValue72() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUnquotedAttributeValue72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue72()
}

func (c *current) onUnquotedAttributeValue68(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonUnquotedAttributeValue68() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue68(stack["name"])
}

func (c *current) onUnquotedAttributeValue82() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUnquotedAttributeValue82() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue82()
}

func (c *current) onUnquotedAttributeValue78(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonUnquotedAttributeValue78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue78(stack["name"])
}

func (c *current) onUnquotedAttributeValue19(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonUnquotedAttributeValue19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue19(stack["element"])
}

func (c *current) onUnquotedAttributeValue88() (interface{}, error) {
	return types.NewSymbol("\"`")

}

func (p *parser) callonUnquotedAttributeValue88() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue88()
}

func (c *current) onUnquotedAttributeValue90() (interface{}, error) {
	return types.NewSymbol("`\"")

}

func (p *parser) callonUnquotedAttributeValue90() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue90()
}

func (c *current) onUnquotedAttributeValue92() (interface{}, error) {
	return types.NewSymbol("'`")

}

func (p *parser) callonUnquotedAttributeValue92() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue92()
}

func (c *current) onUnquotedAttributeValue94() (interface{}, error) {
	return types.NewSymbol("`'")

}

func (p *parser) callonUnquotedAttributeValue94() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue94()
}

func (c *current) onUnquotedAttributeValue96() (interface{}, error) {
	// standalone characters not used in quotation marks
	return string(c.text), nil

}

func (p *parser) callonUnquotedAttributeValue96() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue96()
}

func (c *current) onUnquotedAttributeValue1(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonUnquotedAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue1(stack["elements"])
}

func (c *current) onCrossReference6() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonCrossReference6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference6()
}

func (c *current) onCrossReference10() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonCrossReference10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference10()
}

func (c *current) onCrossReference16() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonCrossReference16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference16()
}

func (c *current) onCrossReference25() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonCrossReference25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference25()
}

func (c *current) onCrossReference21(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonCrossReference21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference21(stack["name"])
}

func (c *current) onCrossReference35() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonCrossReference35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference35()
}

func (c *current) onCrossReference31(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonCrossReference31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference31(stack["name"])
}

func (c *current) onCrossReference41() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonCrossReference41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference41()
}

func (c *current) onCrossReference2(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonCrossReference2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference2(stack["id"], stack["label"])
}

func (c *current) onCrossReference48() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonCrossReference48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference48()
}

func (c *current) onCrossReference44(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonCrossReference44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference44(stack["id"])
}

func (c *current) onExternalCrossReference16() (interface{}, error) {
	// not supported for now: EOL, space, "{", "[", "]". Also, punctuation chars and `<` and `>` special chars are treated separately below (but `&` is allowed)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonExternalCrossReference16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference16()
}

func (c *current) onExternalCrossReference20() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExternalCrossReference20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference20()
}

func (c *current) onExternalCrossReference27() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference27()
}

func (c *current) onExternalCrossReference31() (bool, error) {
	return c.isSubstitutionEnabled(Attributes), nil

}

func (p *parser) callonExternalCrossReference31() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference31()
}

func (c *current) onExternalCrossReference38() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference38()
}

func (c *current) onExternalCrossReference50() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference50() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference50()
}

func (c *current) onExternalCrossReference52() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonExternalCrossReference52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference52()
}

func (c *current) onExternalCrossReference45(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonExternalCrossReference45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference45(stack["start"])
}

func (c *current) onExternalCrossReference34(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonExternalCrossReference34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference34(stack["name"], stack["start"])
}

func (c *current) onExternalCrossReference60() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference60() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference60()
}

func (c *current) onExternalCrossReference72() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference72()
}

func (c *current) onExternalCrossReference74() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonExternalCrossReference74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference74()
}

func (c *current) onExternalCrossReference67(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonExternalCrossReference67() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference67(stack["start"])
}

func (c *current) onExternalCrossReference56(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonExternalCrossReference56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference56(stack["name"], stack["start"])
}

func (c *current) onExternalCrossReference82() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference82() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference82()
}

func (c *current) onExternalCrossReference78(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonExternalCrossReference78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference78(stack["name"])
}

func (c *current) onExternalCrossReference92() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference92() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference92()
}

func (c *current) onExternalCrossReference88(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonExternalCrossReference88() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference88(stack["name"])
}

func (c *current) onExternalCrossReference29(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonExternalCrossReference29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference29(stack["element"])
}

func (c *current) onExternalCrossReference100() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters), nil

}

func (p *parser) callonExternalCrossReference100() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference100()
}

func (c *current) onExternalCrossReference109() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference109() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference109()
}

func (c *current) onExternalCrossReference113() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference113() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference113()
}

func (c *current) onExternalCrossReference119() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonExternalCrossReference119() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference119()
}

func (c *current) onExternalCrossReference128() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference128() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference128()
}

func (c *current) onExternalCrossReference124(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonExternalCrossReference124() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference124(stack["name"])
}

func (c *current) onExternalCrossReference138() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference138() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference138()
}

func (c *current) onExternalCrossReference134(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonExternalCrossReference134() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference134(stack["name"])
}

func (c *current) onExternalCrossReference144() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonExternalCrossReference144() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference144()
}

func (c *current) onExternalCrossReference105(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonExternalCrossReference105() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference105(stack["id"], stack["label"])
}

func (c *current) onExternalCrossReference151() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonExternalCrossReference151() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference151()
}

func (c *current) onExternalCrossReference147(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonExternalCrossReference147() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference147(stack["id"])
}

func (c *current) onExternalCrossReference103() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonExternalCrossReference103() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference103()
}

func (c *current) onExternalCrossReference155() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonExternalCrossReference155() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference155()
}

func (c *current) onExternalCrossReference98(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonExternalCrossReference98() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference98(stack["element"])
}

func (c *current) onExternalCrossReference157() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonExternalCrossReference157() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference157()
}

func (c *current) onExternalCrossReference9(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonExternalCrossReference9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference9(stack["elements"])
}

func (c *current) onExternalCrossReference163() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExternalCrossReference163() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference163()
}

func (c *current) onExternalCrossReference159(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonExternalCrossReference159() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference159(stack["ref"])
}

func (c *current) onExternalCrossReference5(path interface{}) (interface{}, error) {
	return types.NewLocation("", path.([]interface{}))

}

func (p *parser) callonExternalCrossReference5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference5(stack["path"])
}

func (c *current) onExternalCrossReference1(url, attributes interface{}) (interface{}, error) {
	return types.NewExternalCrossReference(url.(*types.Location), attributes.(types.Attributes))

}

func (p *parser) callonExternalCrossReference1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference1(stack["url"], stack["attributes"])
}

func (c *current) onMarkdownQuoteAttribution5() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonMarkdownQuoteAttribution5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteAttribution5()
}

func (c *current) onMarkdownQuoteAttribution9() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonMarkdownQuoteAttribution9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteAttribution9()
}

func (c *current) onMarkdownQuoteAttribution1(author interface{}) (interface{}, error) {
	return author, nil

}

func (p *parser) callonMarkdownQuoteAttribution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteAttribution1(stack["author"])
}

func (c *current) onDocumentHeader3() (bool, error) {
	return c.isDocumentHeaderAllowed(), nil

}

func (p *parser) callonDocumentHeader3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader3()
}

func (c *current) onDocumentHeader14() (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader14()
}

func (c *current) onDocumentHeader18() (interface{}, error) {
	// can't have empty title, that may collide with example block delimiter (`====`)
	return []interface{}{
		types.RawLine(c.text),
	}, nil

}

func (p *parser) callonDocumentHeader18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader18()
}

func (c *current) onDocumentHeader22() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader22()
}

func (c *current) onDocumentHeader11(title interface{}) (interface{}, error) {
	return title, nil

}

func (p *parser) callonDocumentHeader11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader11(stack["title"])
}

func (c *current) onDocumentHeader37() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader37()
}

func (c *current) onDocumentHeader41() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader41()
}

func (c *current) onDocumentHeader31(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))

}

func (p *parser) callonDocumentHeader31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader31(stack["content"])
}

func (c *current) onDocumentHeader53() (interface{}, error) {
	// sequence of 4 "/" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader53()
}

func (c *current) onDocumentHeader59() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader59() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader59()
}

func (c *current) onDocumentHeader62() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader62() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader62()
}

func (c *current) onDocumentHeader50(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Comment, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentHeader50() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader50(stack["delimiter"])
}

func (c *current) onDocumentHeader78() (interface{}, error) {
	// sequence of 4 "/" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader78()
}

func (c *current) onDocumentHeader84() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader84()
}

func (c *current) onDocumentHeader87() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader87() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader87()
}

func (c *current) onDocumentHeader75(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Comment, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentHeader75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader75(stack["delimiter"])
}

func (c *current) onDocumentHeader103() (interface{}, error) {
	// content is NOT mandatory
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader103() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader103()
}

func (c *current) onDocumentHeader107() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader107() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader107()
}

func (c *current) onDocumentHeader97(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentHeader97() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader97(stack["content"])
}

func (c *current) onDocumentHeader71(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonDocumentHeader71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader71(stack["line"])
}

func (c *current) onDocumentHeader119() (interface{}, error) {
	// sequence of 4 "/" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader119() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader119()
}

func (c *current) onDocumentHeader125() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader125() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader125()
}

func (c *current) onDocumentHeader128() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader128() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader128()
}

func (c *current) onDocumentHeader116(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Comment, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentHeader116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader116(stack["delimiter"])
}

func (c *current) onDocumentHeader48(delimiter, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Comment, content.([]interface{}))

}

func (p *parser) callonDocumentHeader48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader48(stack["delimiter"], stack["content"])
}

func (c *current) onDocumentHeader145() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader145() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader145()
}

func (c *current) onDocumentHeader162() (interface{}, error) {
	// no space allowed
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader162() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader162()
}

func (c *current) onDocumentHeader166() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader166() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader166()
}

func (c *current) onDocumentHeader170() (interface{}, error) {
	// no space allowed
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader170() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader170()
}

func (c *current) onDocumentHeader174() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader174() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader174()
}

func (c *current) onDocumentHeader178() (interface{}, error) {
	// spaces allowed
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader178() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader178()
}

func (c *current) onDocumentHeader182() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader182() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader182()
}

func (c *current) onDocumentHeader159(part1, part2, part3 interface{}) (interface{}, error) {
	return types.NewDocumentAuthorFullName(part1.(string), part2, part3)

}

func (p *parser) callonDocumentHeader159() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader159(stack["part1"], stack["part2"], stack["part3"])
}

func (c *current) onDocumentHeader193() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader193() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader193()
}

func (c *current) onDocumentHeader186(email interface{}) (interface{}, error) {
	return email, nil

}

func (p *parser) callonDocumentHeader186() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader186(stack["email"])
}

func (c *current) onDocumentHeader198() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader198() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader198()
}

func (c *current) onDocumentHeader203() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader203() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader203()
}

func (c *current) onDocumentHeader205(fullName, email interface{}) (bool, error) {
	// at least 1 of [fullName, email] must be defined
	return fullName != nil || email != nil, nil

}

func (p *parser) callonDocumentHeader205() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader205(stack["fullName"], stack["email"])
}

func (c *current) onDocumentHeader155(fullName, email interface{}) (interface{}, error) {
	return types.NewDocumentAuthor(fullName, email)

}

func (p *parser) callonDocumentHeader155() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader155(stack["fullName"], stack["email"])
}

func (c *current) onDocumentHeader149(authors interface{}) (interface{}, error) {
	return types.NewDocumentAuthors(authors.([]interface{})...)
}

func (p *parser) callonDocumentHeader149() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader149(stack["authors"])
}

func (c *current) onDocumentHeader210() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader210() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader210()
}

func (c *current) onDocumentHeader220() (interface{}, error) {
	// no space allowed
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader220() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader220()
}

func (c *current) onDocumentHeader224() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader224() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader224()
}

func (c *current) onDocumentHeader228() (interface{}, error) {
	// no space allowed
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader228() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader228()
}

func (c *current) onDocumentHeader232() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader232() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader232()
}

func (c *current) onDocumentHeader236() (interface{}, error) {
	// spaces allowed
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader236() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader236()
}

func (c *current) onDocumentHeader240() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader240() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader240()
}

func (c *current) onDocumentHeader217(part1, part2, part3 interface{}) (interface{}, error) {
	return types.NewDocumentAuthorFullName(part1.(string), part2, part3)

}

func (p *parser) callonDocumentHeader217() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader217(stack["part1"], stack["part2"], stack["part3"])
}

func (c *current) onDocumentHeader251() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader251() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader251()
}

func (c *current) onDocumentHeader244(email interface{}) (interface{}, error) {
	return email, nil

}

func (p *parser) callonDocumentHeader244() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader244(stack["email"])
}

func (c *current) onDocumentHeader256() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader256() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader256()
}

func (c *current) onDocumentHeader261() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader261() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader261()
}

func (c *current) onDocumentHeader263(fullName, email interface{}) (bool, error) {
	// at least 1 of [fullName, email] must be defined
	return fullName != nil || email != nil, nil

}

func (p *parser) callonDocumentHeader263() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader263(stack["fullName"], stack["email"])
}

func (c *current) onDocumentHeader213(fullName, email interface{}) (interface{}, error) {
	return types.NewDocumentAuthor(fullName, email)

}

func (p *parser) callonDocumentHeader213() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader213(stack["fullName"], stack["email"])
}

func (c *current) onDocumentHeader206(author interface{}) (interface{}, error) {
	return types.NewDocumentAuthors(author)
}

func (p *parser) callonDocumentHeader206() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader206(stack["author"])
}

func (c *current) onDocumentHeader265() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader265() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader265()
}

func (c *current) onDocumentHeader142(authors interface{}) (interface{}, error) {
	return authors, nil
}

func (p *parser) callonDocumentHeader142() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader142(stack["authors"])
}

func (c *current) onDocumentHeader280() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader280() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader280()
}

func (c *current) onDocumentHeader284() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader284() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader284()
}

func (c *current) onDocumentHeader274(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))

}

func (p *parser) callonDocumentHeader274() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader274(stack["content"])
}

func (c *current) onDocumentHeader296() (interface{}, error) {
	// sequence of 4 "/" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader296() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader296()
}

func (c *current) onDocumentHeader302() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader302() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader302()
}

func (c *current) onDocumentHeader305() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader305() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader305()
}

func (c *current) onDocumentHeader293(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Comment, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentHeader293() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader293(stack["delimiter"])
}

func (c *current) onDocumentHeader321() (interface{}, error) {
	// sequence of 4 "/" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader321() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader321()
}

func (c *current) onDocumentHeader327() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader327() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader327()
}

func (c *current) onDocumentHeader330() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader330() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader330()
}

func (c *current) onDocumentHeader318(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Comment, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentHeader318() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader318(stack["delimiter"])
}

func (c *current) onDocumentHeader346() (interface{}, error) {
	// content is NOT mandatory
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader346() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader346()
}

func (c *current) onDocumentHeader350() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader350() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader350()
}

func (c *current) onDocumentHeader340(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentHeader340() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader340(stack["content"])
}

func (c *current) onDocumentHeader314(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonDocumentHeader314() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader314(stack["line"])
}

func (c *current) onDocumentHeader362() (interface{}, error) {
	// sequence of 4 "/" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader362() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader362()
}

func (c *current) onDocumentHeader368() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader368() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader368()
}

func (c *current) onDocumentHeader371() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader371() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader371()
}

func (c *current) onDocumentHeader359(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Comment, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentHeader359() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader359(stack["delimiter"])
}

func (c *current) onDocumentHeader291(delimiter, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Comment, content.([]interface{}))

}

func (p *parser) callonDocumentHeader291() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader291(stack["delimiter"], stack["content"])
}

func (c *current) onDocumentHeader385() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader385() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader385()
}

func (c *current) onDocumentHeader395() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader395() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader395()
}

func (c *current) onDocumentHeader409() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeader409() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader409()
}

func (c *current) onDocumentHeader401() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader401() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader401()
}

func (c *current) onDocumentHeader417() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader417() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader417()
}

func (c *current) onDocumentHeader424() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader424() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader424()
}

func (c *current) onDocumentHeader391(revnumber, revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(revnumber, revdate, revremark)

}

func (p *parser) callonDocumentHeader391() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader391(stack["revnumber"], stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentHeader430() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader430() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader430()
}

func (c *current) onDocumentHeader437() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader437() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader437()
}

func (c *current) onDocumentHeader427(revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(nil, revdate, revremark)

}

func (p *parser) callonDocumentHeader427() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader427(stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentHeader441() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeader441() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader441()
}

func (c *current) onDocumentHeader382(revision interface{}) (interface{}, error) {
	return revision, nil
}

func (p *parser) callonDocumentHeader382() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader382(stack["revision"])
}

func (c *current) onDocumentHeader139(authors, revision interface{}) (interface{}, error) {
	return types.NewDocumentAuthorsAndRevision(authors.(types.DocumentAuthors), revision)

}

func (p *parser) callonDocumentHeader139() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader139(stack["authors"], stack["revision"])
}

func (c *current) onDocumentHeader8(title, authorsAndRevision interface{}) (interface{}, error) {
	return types.NewDocumentInformation(title.([]interface{}), authorsAndRevision)

}

func (p *parser) callonDocumentHeader8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader8(stack["title"], stack["authorsAndRevision"])
}

func (c *current) onDocumentHeader450(extraAttrs, info, moreExtraAttrs interface{}) (bool, error) {
	// at least one of title/info/extraArgs must be present
	// log.Debugf("checking document header data: title=%s / info=%s / extraAttrs=%s", title, info, extraAttrs)
	return info != nil ||
		len(extraAttrs.([]interface{})) > 0 ||
		len(moreExtraAttrs.([]interface{})) > 0, nil

}

func (p *parser) callonDocumentHeader450() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader450(stack["extraAttrs"], stack["info"], stack["moreExtraAttrs"])
}

func (c *current) onDocumentHeader1(extraAttrs, info, moreExtraAttrs interface{}) (interface{}, error) {
	attrs := []interface{}{}
	if a, ok := extraAttrs.([]interface{}); ok {
		attrs = append(attrs, a...)
	}
	if a, ok := moreExtraAttrs.([]interface{}); ok {
		attrs = append(attrs, a...)
	}
	return types.NewDocumentHeader(info, attrs)

}

func (p *parser) callonDocumentHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader1(stack["extraAttrs"], stack["info"], stack["moreExtraAttrs"])
}

func (c *current) onDocumentHeaderAttributes8() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeaderAttributes8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeaderAttributes8()
}

func (c *current) onDocumentHeaderAttributes15() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeaderAttributes15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeaderAttributes15()
}

func (c *current) onDocumentHeaderAttributes18() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeaderAttributes18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeaderAttributes18()
}

func (c *current) onDocumentHeaderAttributes4(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string), string(c.text))

}

func (p *parser) callonDocumentHeaderAttributes4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeaderAttributes4(stack["name"])
}

func (c *current) onDocumentHeaderAttributes29() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeaderAttributes29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeaderAttributes29()
}

func (c *current) onDocumentHeaderAttributes36() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeaderAttributes36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeaderAttributes36()
}

func (c *current) onDocumentHeaderAttributes39() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeaderAttributes39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeaderAttributes39()
}

func (c *current) onDocumentHeaderAttributes25(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string), string(c.text))

}

func (p *parser) callonDocumentHeaderAttributes25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeaderAttributes25(stack["name"])
}

func (c *current) onDocumentHeaderAttributes52() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeaderAttributes52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeaderAttributes52()
}

func (c *current) onDocumentHeaderAttributes56() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeaderAttributes56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeaderAttributes56()
}

func (c *current) onDocumentHeaderAttributes46(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))

}

func (p *parser) callonDocumentHeaderAttributes46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeaderAttributes46(stack["content"])
}

func (c *current) onDocumentHeaderAttributes68() (interface{}, error) {
	// sequence of 4 "/" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentHeaderAttributes68() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeaderAttributes68()
}

func (c *current) onDocumentHeaderAttributes74() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeaderAttributes74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeaderAttributes74()
}

func (c *current) onDocumentHeaderAttributes77() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeaderAttributes77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeaderAttributes77()
}

func (c *current) onDocumentHeaderAttributes65(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Comment, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentHeaderAttributes65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeaderAttributes65(stack["delimiter"])
}

func (c *current) onDocumentHeaderAttributes93() (interface{}, error) {
	// sequence of 4 "/" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentHeaderAttributes93() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeaderAttributes93()
}

func (c *current) onDocumentHeaderAttributes99() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeaderAttributes99() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeaderAttributes99()
}

func (c *current) onDocumentHeaderAttributes102() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeaderAttributes102() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeaderAttributes102()
}

func (c *current) onDocumentHeaderAttributes90(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Comment, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentHeaderAttributes90() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeaderAttributes90(stack["delimiter"])
}

func (c *current) onDocumentHeaderAttributes118() (interface{}, error) {
	// content is NOT mandatory
	return string(c.text), nil

}

func (p *parser) callonDocumentHeaderAttributes118() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeaderAttributes118()
}

func (c *current) onDocumentHeaderAttributes122() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeaderAttributes122() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeaderAttributes122()
}

func (c *current) onDocumentHeaderAttributes112(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonDocumentHeaderAttributes112() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeaderAttributes112(stack["content"])
}

func (c *current) onDocumentHeaderAttributes86(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonDocumentHeaderAttributes86() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeaderAttributes86(stack["line"])
}

func (c *current) onDocumentHeaderAttributes134() (interface{}, error) {
	// sequence of 4 "/" chars or more
	return string(c.text), nil

}

func (p *parser) callonDocumentHeaderAttributes134() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeaderAttributes134()
}

func (c *current) onDocumentHeaderAttributes140() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeaderAttributes140() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeaderAttributes140()
}

func (c *current) onDocumentHeaderAttributes143() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeaderAttributes143() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeaderAttributes143()
}

func (c *current) onDocumentHeaderAttributes131(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Comment, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonDocumentHeaderAttributes131() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeaderAttributes131(stack["delimiter"])
}

func (c *current) onDocumentHeaderAttributes63(delimiter, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Comment, content.([]interface{}))

}

func (p *parser) callonDocumentHeaderAttributes63() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeaderAttributes63(stack["delimiter"], stack["content"])
}

func (c *current) onDocumentHeaderAttributes158() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDocumentHeaderAttributes158() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeaderAttributes158()
}

func (c *current) onDocumentHeaderAttributes161() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDocumentHeaderAttributes161() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeaderAttributes161()
}

func (c *current) onDocumentHeaderAttributes152() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonDocumentHeaderAttributes152() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeaderAttributes152()
}

func (c *current) onInlineElement9() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineElement9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement9()
}

func (c *current) onInlineElement14() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonInlineElement14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement14()
}

func (c *current) onInlineElement4() (interface{}, error) {
	// TODO: also allow trailing quotes/quotation marks?
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineElement4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement4()
}

func (c *current) onInlineElement21() (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonInlineElement21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement21()
}

func (c *current) onInlineElement26() (bool, error) {

	return c.isSubstitutionEnabled(PostReplacements) && c.isPreceededBySpace(), nil

}

func (p *parser) callonInlineElement26() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement26()
}

func (c *current) onInlineElement29() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineElement29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement29()
}

func (c *current) onInlineElement33() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonInlineElement33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement33()
}

func (c *current) onInlineElement24() (interface{}, error) {
	return types.NewLineBreak()

}

func (p *parser) callonInlineElement24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement24()
}

func (c *current) onInlineElement43() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonInlineElement43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement43()
}

func (c *current) onInlineElement55() (interface{}, error) {
	return types.NewSymbol("\"`")

}

func (p *parser) callonInlineElement55() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement55()
}

func (c *current) onInlineElement57() (interface{}, error) {
	return types.NewSymbol("`\"")

}

func (p *parser) callonInlineElement57() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement57()
}

func (c *current) onInlineElement59() (interface{}, error) {
	return types.NewSymbol("'`")

}

func (p *parser) callonInlineElement59() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement59()
}

func (c *current) onInlineElement61() (interface{}, error) {
	return types.NewSymbol("`'")

}

func (p *parser) callonInlineElement61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement61()
}

func (c *current) onInlineElement63() (interface{}, error) {
	return types.NewSymbol("(C)")

}

func (p *parser) callonInlineElement63() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement63()
}

func (c *current) onInlineElement65() (interface{}, error) {
	return types.NewSymbol("(TM)")

}

func (p *parser) callonInlineElement65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement65()
}

func (c *current) onInlineElement67() (interface{}, error) {
	return types.NewSymbol("(R)")

}

func (p *parser) callonInlineElement67() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement67()
}

func (c *current) onInlineElement69() (interface{}, error) {
	return types.NewSymbol("...")

}

func (p *parser) callonInlineElement69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement69()
}

func (c *current) onInlineElement51() (interface{}, error) {
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonInlineElement51() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement51()
}

func (c *current) onInlineElement71() (interface{}, error) {
	return types.NewSymbol("\"`")

}

func (p *parser) callonInlineElement71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement71()
}

func (c *current) onInlineElement73() (interface{}, error) {
	return types.NewSymbol("`\"")

}

func (p *parser) callonInlineElement73() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement73()
}

func (c *current) onInlineElement75() (interface{}, error) {
	return types.NewSymbol("'`")

}

func (p *parser) callonInlineElement75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement75()
}

func (c *current) onInlineElement77() (interface{}, error) {
	return types.NewSymbol("`'")

}

func (p *parser) callonInlineElement77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement77()
}

func (c *current) onInlineElement79() (interface{}, error) {
	return types.NewSymbol("(C)")

}

func (p *parser) callonInlineElement79() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement79()
}

func (c *current) onInlineElement81() (interface{}, error) {
	return types.NewSymbol("(TM)")

}

func (p *parser) callonInlineElement81() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement81()
}

func (c *current) onInlineElement83() (interface{}, error) {
	return types.NewSymbol("(R)")

}

func (p *parser) callonInlineElement83() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement83()
}

func (c *current) onInlineElement85() (interface{}, error) {
	return types.NewSymbol("...")

}

func (p *parser) callonInlineElement85() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement85()
}

func (c *current) onInlineElement87() (interface{}, error) {
	log.Debug("matched escaped apostrophe")
	return types.NewStringElement(strings.TrimSuffix(string(c.text), `\'`) + `'`) // retain the apostrophe, but discard the `\` escape char

}

func (p *parser) callonInlineElement87() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement87()
}

func (c *current) onInlineElement93() (interface{}, error) {
	return types.NewSymbolWithForeword("'", strings.TrimSuffix(string(c.text), `'`))

}

func (p *parser) callonInlineElement93() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement93()
}

func (c *current) onInlineElement102() (bool, error) {
	return c.isSubstitutionEnabled(Attributes), nil

}

func (p *parser) callonInlineElement102() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement102()
}

func (c *current) onInlineElement109() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineElement109() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement109()
}

func (c *current) onInlineElement121() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineElement121() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement121()
}

func (c *current) onInlineElement123() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonInlineElement123() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement123()
}

func (c *current) onInlineElement116(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonInlineElement116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement116(stack["start"])
}

func (c *current) onInlineElement105(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonInlineElement105() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement105(stack["name"], stack["start"])
}

func (c *current) onInlineElement131() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineElement131() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement131()
}

func (c *current) onInlineElement143() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineElement143() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement143()
}

func (c *current) onInlineElement145() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonInlineElement145() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement145()
}

func (c *current) onInlineElement138(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonInlineElement138() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement138(stack["start"])
}

func (c *current) onInlineElement127(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonInlineElement127() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement127(stack["name"], stack["start"])
}

func (c *current) onInlineElement153() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineElement153() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement153()
}

func (c *current) onInlineElement149(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonInlineElement149() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement149(stack["name"])
}

func (c *current) onInlineElement163() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineElement163() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement163()
}

func (c *current) onInlineElement159(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonInlineElement159() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement159(stack["name"])
}

func (c *current) onInlineElement100(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonInlineElement100() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement100(stack["element"])
}

func (c *current) onInlineElement172() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters), nil

}

func (p *parser) callonInlineElement172() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement172()
}

func (c *current) onInlineElement181() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonInlineElement181() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement181()
}

func (c *current) onInlineElement185() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineElement185() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement185()
}

func (c *current) onInlineElement191() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineElement191() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement191()
}

func (c *current) onInlineElement200() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineElement200() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement200()
}

func (c *current) onInlineElement196(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonInlineElement196() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement196(stack["name"])
}

func (c *current) onInlineElement210() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineElement210() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement210()
}

func (c *current) onInlineElement206(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonInlineElement206() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement206(stack["name"])
}

func (c *current) onInlineElement216() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineElement216() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement216()
}

func (c *current) onInlineElement177(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonInlineElement177() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement177(stack["id"], stack["label"])
}

func (c *current) onInlineElement223() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonInlineElement223() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement223()
}

func (c *current) onInlineElement219(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonInlineElement219() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement219(stack["id"])
}

func (c *current) onInlineElement175() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineElement175() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement175()
}

func (c *current) onInlineElement227() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonInlineElement227() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement227()
}

func (c *current) onInlineElement170(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonInlineElement170() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement170(stack["element"])
}

func (c *current) onInlineElement233() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineElement233() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement233()
}

func (c *current) onInlineElement229(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonInlineElement229() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement229(stack["ref"])
}

func (c *current) onInlineElement237() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineElement237() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement237()
}

func (c *current) onInlineElement1(element interface{}) (interface{}, error) {
	c.trackSpaceSuffix(element)
	return element, nil
}

func (p *parser) callonInlineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement1(stack["element"])
}

func (c *current) onInlineButton3() (bool, error) {
	return c.isExperimentalEnabled(), nil

}

func (p *parser) callonInlineButton3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineButton3()
}

func (c *current) onInlineButton1(attributes interface{}) (interface{}, error) {
	return types.NewInlineButton(attributes.(types.Attributes))

}

func (p *parser) callonInlineButton1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineButton1(stack["attributes"])
}

func (c *current) onInlineMenu3() (bool, error) {
	return c.isExperimentalEnabled(), nil

}

func (p *parser) callonInlineMenu3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMenu3()
}

func (c *current) onInlineMenu6() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonInlineMenu6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMenu6()
}

func (c *current) onInlineMenu1(id, attributes interface{}) (interface{}, error) {
	return types.NewInlineMenu(id.(string), attributes.(types.Attributes))

}

func (p *parser) callonInlineMenu1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMenu1(stack["id"], stack["attributes"])
}

func (c *current) onIndexTerm1(term interface{}) (interface{}, error) {
	return types.NewIndexTerm(term.([]interface{}))

}

func (p *parser) callonIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTerm1(stack["term"])
}

func (c *current) onIndexTermContent5() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonIndexTermContent5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent5()
}

func (c *current) onIndexTermContent14() (interface{}, error) {
	// allow `
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonIndexTermContent14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent14()
}

func (c *current) onIndexTermContent24() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonIndexTermContent24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent24()
}

func (c *current) onIndexTermContent28() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters), nil

}

func (p *parser) callonIndexTermContent28() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent28()
}

func (c *current) onIndexTermContent37() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonIndexTermContent37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent37()
}

func (c *current) onIndexTermContent41() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonIndexTermContent41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent41()
}

func (c *current) onIndexTermContent47() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonIndexTermContent47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent47()
}

func (c *current) onIndexTermContent56() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonIndexTermContent56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent56()
}

func (c *current) onIndexTermContent52(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonIndexTermContent52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent52(stack["name"])
}

func (c *current) onIndexTermContent66() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonIndexTermContent66() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent66()
}

func (c *current) onIndexTermContent62(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonIndexTermContent62() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent62(stack["name"])
}

func (c *current) onIndexTermContent72() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonIndexTermContent72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent72()
}

func (c *current) onIndexTermContent33(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonIndexTermContent33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent33(stack["id"], stack["label"])
}

func (c *current) onIndexTermContent79() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonIndexTermContent79() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent79()
}

func (c *current) onIndexTermContent75(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonIndexTermContent75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent75(stack["id"])
}

func (c *current) onIndexTermContent31() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonIndexTermContent31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent31()
}

func (c *current) onIndexTermContent83() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonIndexTermContent83() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent83()
}

func (c *current) onIndexTermContent26(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonIndexTermContent26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent26(stack["element"])
}

func (c *current) onIndexTermContent89() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIndexTermContent89() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent89()
}

func (c *current) onIndexTermContent85(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonIndexTermContent85() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent85(stack["ref"])
}

func (c *current) onIndexTermContent93() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIndexTermContent93() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent93()
}

func (c *current) onIndexTermContent1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent1(stack["elements"])
}

func (c *current) onImageBlock25() (interface{}, error) {
	// not supported for now: EOL, space, "{", "[", "]". Also, punctuation chars and `<` and `>` special chars are treated separately below (but `&` is allowed)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonImageBlock25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock25()
}

func (c *current) onImageBlock29() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonImageBlock29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock29()
}

func (c *current) onImageBlock36() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonImageBlock36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock36()
}

func (c *current) onImageBlock40() (bool, error) {
	return c.isSubstitutionEnabled(Attributes), nil

}

func (p *parser) callonImageBlock40() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock40()
}

func (c *current) onImageBlock47() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonImageBlock47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock47()
}

func (c *current) onImageBlock59() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonImageBlock59() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock59()
}

func (c *current) onImageBlock61() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonImageBlock61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock61()
}

func (c *current) onImageBlock54(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonImageBlock54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock54(stack["start"])
}

func (c *current) onImageBlock43(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonImageBlock43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock43(stack["name"], stack["start"])
}

func (c *current) onImageBlock69() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonImageBlock69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock69()
}

func (c *current) onImageBlock81() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonImageBlock81() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock81()
}

func (c *current) onImageBlock83() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonImageBlock83() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock83()
}

func (c *current) onImageBlock76(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonImageBlock76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock76(stack["start"])
}

func (c *current) onImageBlock65(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonImageBlock65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock65(stack["name"], stack["start"])
}

func (c *current) onImageBlock91() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonImageBlock91() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock91()
}

func (c *current) onImageBlock87(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonImageBlock87() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock87(stack["name"])
}

func (c *current) onImageBlock101() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonImageBlock101() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock101()
}

func (c *current) onImageBlock97(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonImageBlock97() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock97(stack["name"])
}

func (c *current) onImageBlock38(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonImageBlock38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock38(stack["element"])
}

func (c *current) onImageBlock109() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters), nil

}

func (p *parser) callonImageBlock109() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock109()
}

func (c *current) onImageBlock118() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonImageBlock118() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock118()
}

func (c *current) onImageBlock122() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonImageBlock122() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock122()
}

func (c *current) onImageBlock128() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonImageBlock128() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock128()
}

func (c *current) onImageBlock137() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonImageBlock137() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock137()
}

func (c *current) onImageBlock133(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonImageBlock133() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock133(stack["name"])
}

func (c *current) onImageBlock147() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonImageBlock147() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock147()
}

func (c *current) onImageBlock143(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonImageBlock143() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock143(stack["name"])
}

func (c *current) onImageBlock153() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonImageBlock153() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock153()
}

func (c *current) onImageBlock114(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonImageBlock114() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock114(stack["id"], stack["label"])
}

func (c *current) onImageBlock160() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonImageBlock160() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock160()
}

func (c *current) onImageBlock156(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonImageBlock156() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock156(stack["id"])
}

func (c *current) onImageBlock112() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonImageBlock112() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock112()
}

func (c *current) onImageBlock164() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonImageBlock164() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock164()
}

func (c *current) onImageBlock107(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonImageBlock107() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock107(stack["element"])
}

func (c *current) onImageBlock166() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonImageBlock166() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock166()
}

func (c *current) onImageBlock18(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonImageBlock18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock18(stack["elements"])
}

func (c *current) onImageBlock172() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonImageBlock172() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock172()
}

func (c *current) onImageBlock168(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonImageBlock168() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock168(stack["ref"])
}

func (c *current) onImageBlock5(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))

}

func (p *parser) callonImageBlock5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock5(stack["scheme"], stack["path"])
}

func (c *current) onImageBlock179() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonImageBlock179() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock179()
}

func (c *current) onImageBlock182() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonImageBlock182() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock182()
}

func (c *current) onImageBlock1(path, attributes interface{}) (interface{}, error) {
	// 'imagesdir' attribute is added after applying the attribute substitutions on the image location
	return types.NewImageBlock(path.(*types.Location), attributes.(types.Attributes))

}

func (p *parser) callonImageBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock1(stack["path"], stack["attributes"])
}

func (c *current) onInlineImage27() (interface{}, error) {
	// not supported for now: EOL, space, "{", "[", "]". Also, punctuation chars and `<` and `>` special chars are treated separately below (but `&` is allowed)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineImage27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage27()
}

func (c *current) onInlineImage31() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineImage31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage31()
}

func (c *current) onInlineImage38() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineImage38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage38()
}

func (c *current) onInlineImage42() (bool, error) {
	return c.isSubstitutionEnabled(Attributes), nil

}

func (p *parser) callonInlineImage42() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage42()
}

func (c *current) onInlineImage49() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineImage49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage49()
}

func (c *current) onInlineImage61() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineImage61() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage61()
}

func (c *current) onInlineImage63() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonInlineImage63() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage63()
}

func (c *current) onInlineImage56(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonInlineImage56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage56(stack["start"])
}

func (c *current) onInlineImage45(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonInlineImage45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage45(stack["name"], stack["start"])
}

func (c *current) onInlineImage71() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineImage71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage71()
}

func (c *current) onInlineImage83() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineImage83() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage83()
}

func (c *current) onInlineImage85() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonInlineImage85() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage85()
}

func (c *current) onInlineImage78(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonInlineImage78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage78(stack["start"])
}

func (c *current) onInlineImage67(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonInlineImage67() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage67(stack["name"], stack["start"])
}

func (c *current) onInlineImage93() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineImage93() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage93()
}

func (c *current) onInlineImage89(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonInlineImage89() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage89(stack["name"])
}

func (c *current) onInlineImage103() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineImage103() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage103()
}

func (c *current) onInlineImage99(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonInlineImage99() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage99(stack["name"])
}

func (c *current) onInlineImage40(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonInlineImage40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage40(stack["element"])
}

func (c *current) onInlineImage111() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters), nil

}

func (p *parser) callonInlineImage111() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage111()
}

func (c *current) onInlineImage120() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonInlineImage120() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage120()
}

func (c *current) onInlineImage124() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineImage124() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage124()
}

func (c *current) onInlineImage130() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineImage130() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage130()
}

func (c *current) onInlineImage139() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineImage139() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage139()
}

func (c *current) onInlineImage135(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonInlineImage135() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage135(stack["name"])
}

func (c *current) onInlineImage149() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineImage149() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage149()
}

func (c *current) onInlineImage145(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonInlineImage145() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage145(stack["name"])
}

func (c *current) onInlineImage155() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineImage155() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage155()
}

func (c *current) onInlineImage116(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonInlineImage116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage116(stack["id"], stack["label"])
}

func (c *current) onInlineImage162() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonInlineImage162() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage162()
}

func (c *current) onInlineImage158(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonInlineImage158() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage158(stack["id"])
}

func (c *current) onInlineImage114() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineImage114() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage114()
}

func (c *current) onInlineImage166() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonInlineImage166() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage166()
}

func (c *current) onInlineImage109(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonInlineImage109() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage109(stack["element"])
}

func (c *current) onInlineImage168() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineImage168() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage168()
}

func (c *current) onInlineImage20(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonInlineImage20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage20(stack["elements"])
}

func (c *current) onInlineImage174() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineImage174() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage174()
}

func (c *current) onInlineImage170(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonInlineImage170() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage170(stack["ref"])
}

func (c *current) onInlineImage7(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))

}

func (p *parser) callonInlineImage7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage7(stack["scheme"], stack["path"])
}

func (c *current) onInlineImage1(path, attributes interface{}) (interface{}, error) {
	return types.NewInlineImage(path.(*types.Location), attributes.(types.Attributes))

}

func (p *parser) callonInlineImage1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage1(stack["path"], stack["attributes"])
}

func (c *current) onInlineIcon5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineIcon5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon5()
}

func (c *current) onInlineIcon1(icon, attributes interface{}) (interface{}, error) {
	return types.NewIcon(icon.(string), attributes)

}

func (p *parser) callonInlineIcon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon1(stack["icon"], stack["attributes"])
}

func (c *current) onInlineFootnote2(elements interface{}) (interface{}, error) {
	return types.NewFootnote("", elements.([]interface{}))

}

func (p *parser) callonInlineFootnote2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote2(stack["elements"])
}

func (c *current) onInlineFootnote12() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineFootnote12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote12()
}

func (c *current) onInlineFootnote8(ref, elements interface{}) (interface{}, error) {
	// TODO: use only this rule with `ref:(FootnoteRef)?`
	return types.NewFootnote(ref.(string), elements.([]interface{}))

}

func (p *parser) callonInlineFootnote8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote8(stack["ref"], stack["elements"])
}

func (c *current) onFootnoteElements1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFootnoteElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteElements1(stack["elements"])
}

func (c *current) onFootnoteElement8() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonFootnoteElement8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteElement8()
}

func (c *current) onFootnoteElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonFootnoteElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteElement1(stack["element"])
}

func (c *current) onPassthroughMacro7() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonPassthroughMacro7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro7()
}

func (c *current) onPassthroughMacro2(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.PassthroughMacro, []interface{}{content})

}

func (p *parser) callonPassthroughMacro2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro2(stack["content"])
}

func (c *current) onPassthroughMacro17() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonPassthroughMacro17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro17()
}

func (c *current) onPassthroughMacro10(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.PassthroughMacro, content.([]interface{}))

}

func (p *parser) callonPassthroughMacro10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro10(stack["content"])
}

func (c *current) onLink26() (interface{}, error) {
	// not supported for now: EOL, space, "{", "[", "]". Also, punctuation chars and `<` and `>` special chars are treated separately below (but `&` is allowed)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLink26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink26()
}

func (c *current) onLink30() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLink30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink30()
}

func (c *current) onLink37() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLink37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink37()
}

func (c *current) onLink41() (bool, error) {
	return c.isSubstitutionEnabled(Attributes), nil

}

func (p *parser) callonLink41() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink41()
}

func (c *current) onLink48() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLink48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink48()
}

func (c *current) onLink60() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLink60() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink60()
}

func (c *current) onLink62() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLink62() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink62()
}

func (c *current) onLink55(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonLink55() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink55(stack["start"])
}

func (c *current) onLink44(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonLink44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink44(stack["name"], stack["start"])
}

func (c *current) onLink70() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLink70() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink70()
}

func (c *current) onLink82() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLink82() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink82()
}

func (c *current) onLink84() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonLink84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink84()
}

func (c *current) onLink77(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonLink77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink77(stack["start"])
}

func (c *current) onLink66(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonLink66() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink66(stack["name"], stack["start"])
}

func (c *current) onLink92() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLink92() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink92()
}

func (c *current) onLink88(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonLink88() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink88(stack["name"])
}

func (c *current) onLink102() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLink102() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink102()
}

func (c *current) onLink98(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonLink98() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink98(stack["name"])
}

func (c *current) onLink39(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonLink39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink39(stack["element"])
}

func (c *current) onLink110() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters), nil

}

func (p *parser) callonLink110() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink110()
}

func (c *current) onLink119() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonLink119() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink119()
}

func (c *current) onLink123() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLink123() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink123()
}

func (c *current) onLink129() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLink129() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink129()
}

func (c *current) onLink138() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLink138() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink138()
}

func (c *current) onLink134(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonLink134() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink134(stack["name"])
}

func (c *current) onLink148() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonLink148() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink148()
}

func (c *current) onLink144(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonLink144() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink144(stack["name"])
}

func (c *current) onLink154() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLink154() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink154()
}

func (c *current) onLink115(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonLink115() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink115(stack["id"], stack["label"])
}

func (c *current) onLink161() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonLink161() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink161()
}

func (c *current) onLink157(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonLink157() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink157(stack["id"])
}

func (c *current) onLink113() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLink113() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink113()
}

func (c *current) onLink165() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonLink165() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink165()
}

func (c *current) onLink108(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonLink108() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink108(stack["element"])
}

func (c *current) onLink167() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLink167() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink167()
}

func (c *current) onLink19(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonLink19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink19(stack["elements"])
}

func (c *current) onLink6(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))

}

func (p *parser) callonLink6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink6(stack["scheme"], stack["path"])
}

func (c *current) onLink172(url, closingBracket interface{}) (bool, error) {
	return url.(*types.Location).TrimAngleBracketSuffix()

}

func (p *parser) callonLink172() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink172(stack["url"], stack["closingBracket"])
}

func (c *current) onLink2(url, closingBracket interface{}) (interface{}, error) {

	return types.NewInlineLink(url.(*types.Location), nil)

}

func (p *parser) callonLink2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink2(stack["url"], stack["closingBracket"])
}

func (c *current) onRelativeLink26() (interface{}, error) {
	// not supported for now: EOL, space, "{", "[", "]". Also, punctuation chars and `<` and `>` special chars are treated separately below (but `&` is allowed)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonRelativeLink26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink26()
}

func (c *current) onRelativeLink30() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRelativeLink30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink30()
}

func (c *current) onRelativeLink37() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink37()
}

func (c *current) onRelativeLink41() (bool, error) {
	return c.isSubstitutionEnabled(Attributes), nil

}

func (p *parser) callonRelativeLink41() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink41()
}

func (c *current) onRelativeLink48() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink48()
}

func (c *current) onRelativeLink60() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink60() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink60()
}

func (c *current) onRelativeLink62() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonRelativeLink62() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink62()
}

func (c *current) onRelativeLink55(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonRelativeLink55() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink55(stack["start"])
}

func (c *current) onRelativeLink44(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonRelativeLink44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink44(stack["name"], stack["start"])
}

func (c *current) onRelativeLink70() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink70() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink70()
}

func (c *current) onRelativeLink82() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink82() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink82()
}

func (c *current) onRelativeLink84() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonRelativeLink84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink84()
}

func (c *current) onRelativeLink77(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonRelativeLink77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink77(stack["start"])
}

func (c *current) onRelativeLink66(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonRelativeLink66() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink66(stack["name"], stack["start"])
}

func (c *current) onRelativeLink92() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink92() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink92()
}

func (c *current) onRelativeLink88(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonRelativeLink88() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink88(stack["name"])
}

func (c *current) onRelativeLink102() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink102() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink102()
}

func (c *current) onRelativeLink98(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonRelativeLink98() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink98(stack["name"])
}

func (c *current) onRelativeLink39(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonRelativeLink39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink39(stack["element"])
}

func (c *current) onRelativeLink110() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters), nil

}

func (p *parser) callonRelativeLink110() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink110()
}

func (c *current) onRelativeLink119() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonRelativeLink119() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink119()
}

func (c *current) onRelativeLink123() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink123() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink123()
}

func (c *current) onRelativeLink129() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonRelativeLink129() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink129()
}

func (c *current) onRelativeLink138() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink138() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink138()
}

func (c *current) onRelativeLink134(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonRelativeLink134() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink134(stack["name"])
}

func (c *current) onRelativeLink148() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink148() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink148()
}

func (c *current) onRelativeLink144(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonRelativeLink144() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink144(stack["name"])
}

func (c *current) onRelativeLink154() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonRelativeLink154() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink154()
}

func (c *current) onRelativeLink115(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonRelativeLink115() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink115(stack["id"], stack["label"])
}

func (c *current) onRelativeLink161() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonRelativeLink161() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink161()
}

func (c *current) onRelativeLink157(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonRelativeLink157() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink157(stack["id"])
}

func (c *current) onRelativeLink113() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonRelativeLink113() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink113()
}

func (c *current) onRelativeLink165() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonRelativeLink165() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink165()
}

func (c *current) onRelativeLink108(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonRelativeLink108() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink108(stack["element"])
}

func (c *current) onRelativeLink167() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonRelativeLink167() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink167()
}

func (c *current) onRelativeLink19(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonRelativeLink19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink19(stack["elements"])
}

func (c *current) onRelativeLink173() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRelativeLink173() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink173()
}

func (c *current) onRelativeLink169(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonRelativeLink169() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink169(stack["ref"])
}

func (c *current) onRelativeLink6(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))

}

func (p *parser) callonRelativeLink6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink6(stack["scheme"], stack["path"])
}

func (c *current) onRelativeLink2(url, attributes interface{}) (interface{}, error) {
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonRelativeLink2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink2(stack["url"], stack["attributes"])
}

func (c *current) onRelativeLink203() (interface{}, error) {
	// not supported for now: EOL, space, "{", "[", "]". Also, punctuation chars and `<` and `>` special chars are treated separately below (but `&` is allowed)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonRelativeLink203() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink203()
}

func (c *current) onRelativeLink207() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRelativeLink207() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink207()
}

func (c *current) onRelativeLink214() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink214() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink214()
}

func (c *current) onRelativeLink218() (bool, error) {
	return c.isSubstitutionEnabled(Attributes), nil

}

func (p *parser) callonRelativeLink218() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink218()
}

func (c *current) onRelativeLink225() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink225() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink225()
}

func (c *current) onRelativeLink237() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink237() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink237()
}

func (c *current) onRelativeLink239() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonRelativeLink239() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink239()
}

func (c *current) onRelativeLink232(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonRelativeLink232() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink232(stack["start"])
}

func (c *current) onRelativeLink221(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonRelativeLink221() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink221(stack["name"], stack["start"])
}

func (c *current) onRelativeLink247() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink247() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink247()
}

func (c *current) onRelativeLink259() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink259() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink259()
}

func (c *current) onRelativeLink261() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonRelativeLink261() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink261()
}

func (c *current) onRelativeLink254(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonRelativeLink254() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink254(stack["start"])
}

func (c *current) onRelativeLink243(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonRelativeLink243() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink243(stack["name"], stack["start"])
}

func (c *current) onRelativeLink269() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink269() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink269()
}

func (c *current) onRelativeLink265(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonRelativeLink265() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink265(stack["name"])
}

func (c *current) onRelativeLink279() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink279() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink279()
}

func (c *current) onRelativeLink275(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonRelativeLink275() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink275(stack["name"])
}

func (c *current) onRelativeLink216(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonRelativeLink216() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink216(stack["element"])
}

func (c *current) onRelativeLink287() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters), nil

}

func (p *parser) callonRelativeLink287() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink287()
}

func (c *current) onRelativeLink296() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonRelativeLink296() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink296()
}

func (c *current) onRelativeLink300() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink300() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink300()
}

func (c *current) onRelativeLink306() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonRelativeLink306() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink306()
}

func (c *current) onRelativeLink315() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink315() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink315()
}

func (c *current) onRelativeLink311(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonRelativeLink311() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink311(stack["name"])
}

func (c *current) onRelativeLink325() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonRelativeLink325() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink325()
}

func (c *current) onRelativeLink321(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonRelativeLink321() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink321(stack["name"])
}

func (c *current) onRelativeLink331() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonRelativeLink331() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink331()
}

func (c *current) onRelativeLink292(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonRelativeLink292() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink292(stack["id"], stack["label"])
}

func (c *current) onRelativeLink338() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonRelativeLink338() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink338()
}

func (c *current) onRelativeLink334(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonRelativeLink334() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink334(stack["id"])
}

func (c *current) onRelativeLink290() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonRelativeLink290() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink290()
}

func (c *current) onRelativeLink342() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonRelativeLink342() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink342()
}

func (c *current) onRelativeLink285(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonRelativeLink285() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink285(stack["element"])
}

func (c *current) onRelativeLink344() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonRelativeLink344() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink344()
}

func (c *current) onRelativeLink196(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonRelativeLink196() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink196(stack["elements"])
}

func (c *current) onRelativeLink350() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonRelativeLink350() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink350()
}

func (c *current) onRelativeLink346(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonRelativeLink346() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink346(stack["ref"])
}

func (c *current) onRelativeLink183(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))

}

func (p *parser) callonRelativeLink183() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink183(stack["scheme"], stack["path"])
}

func (c *current) onRelativeLink179(url, attributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(*types.Location), attributes.(types.Attributes))

}

func (p *parser) callonRelativeLink179() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink179(stack["url"], stack["attributes"])
}

func (c *current) onExternalLink26() (interface{}, error) {
	// not supported for now: EOL, space, "{", "[", "]". Also, punctuation chars and `<` and `>` special chars are treated separately below (but `&` is allowed)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonExternalLink26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink26()
}

func (c *current) onExternalLink30() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExternalLink30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink30()
}

func (c *current) onExternalLink37() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink37()
}

func (c *current) onExternalLink41() (bool, error) {
	return c.isSubstitutionEnabled(Attributes), nil

}

func (p *parser) callonExternalLink41() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink41()
}

func (c *current) onExternalLink48() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink48()
}

func (c *current) onExternalLink60() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink60() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink60()
}

func (c *current) onExternalLink62() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonExternalLink62() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink62()
}

func (c *current) onExternalLink55(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonExternalLink55() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink55(stack["start"])
}

func (c *current) onExternalLink44(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonExternalLink44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink44(stack["name"], stack["start"])
}

func (c *current) onExternalLink70() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink70() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink70()
}

func (c *current) onExternalLink82() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink82() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink82()
}

func (c *current) onExternalLink84() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonExternalLink84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink84()
}

func (c *current) onExternalLink77(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonExternalLink77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink77(stack["start"])
}

func (c *current) onExternalLink66(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonExternalLink66() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink66(stack["name"], stack["start"])
}

func (c *current) onExternalLink92() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink92() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink92()
}

func (c *current) onExternalLink88(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonExternalLink88() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink88(stack["name"])
}

func (c *current) onExternalLink102() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink102() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink102()
}

func (c *current) onExternalLink98(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonExternalLink98() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink98(stack["name"])
}

func (c *current) onExternalLink39(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonExternalLink39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink39(stack["element"])
}

func (c *current) onExternalLink110() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters), nil

}

func (p *parser) callonExternalLink110() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink110()
}

func (c *current) onExternalLink119() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonExternalLink119() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink119()
}

func (c *current) onExternalLink123() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink123() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink123()
}

func (c *current) onExternalLink129() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonExternalLink129() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink129()
}

func (c *current) onExternalLink138() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink138() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink138()
}

func (c *current) onExternalLink134(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonExternalLink134() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink134(stack["name"])
}

func (c *current) onExternalLink148() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink148() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink148()
}

func (c *current) onExternalLink144(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonExternalLink144() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink144(stack["name"])
}

func (c *current) onExternalLink154() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonExternalLink154() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink154()
}

func (c *current) onExternalLink115(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonExternalLink115() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink115(stack["id"], stack["label"])
}

func (c *current) onExternalLink161() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonExternalLink161() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink161()
}

func (c *current) onExternalLink157(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonExternalLink157() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink157(stack["id"])
}

func (c *current) onExternalLink113() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonExternalLink113() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink113()
}

func (c *current) onExternalLink165() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonExternalLink165() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink165()
}

func (c *current) onExternalLink108(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonExternalLink108() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink108(stack["element"])
}

func (c *current) onExternalLink167() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonExternalLink167() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink167()
}

func (c *current) onExternalLink19(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonExternalLink19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink19(stack["elements"])
}

func (c *current) onExternalLink6(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))

}

func (p *parser) callonExternalLink6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink6(stack["scheme"], stack["path"])
}

func (c *current) onExternalLink2(url, attributes interface{}) (interface{}, error) {
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonExternalLink2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink2(stack["url"], stack["attributes"])
}

func (c *current) onExternalLink195() (interface{}, error) {
	// not supported for now: EOL, space, "{", "[", "]". Also, punctuation chars and `<` and `>` special chars are treated separately below (but `&` is allowed)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonExternalLink195() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink195()
}

func (c *current) onExternalLink199() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonExternalLink199() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink199()
}

func (c *current) onExternalLink206() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink206() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink206()
}

func (c *current) onExternalLink210() (bool, error) {
	return c.isSubstitutionEnabled(Attributes), nil

}

func (p *parser) callonExternalLink210() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink210()
}

func (c *current) onExternalLink217() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink217() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink217()
}

func (c *current) onExternalLink229() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink229() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink229()
}

func (c *current) onExternalLink231() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonExternalLink231() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink231()
}

func (c *current) onExternalLink224(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonExternalLink224() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink224(stack["start"])
}

func (c *current) onExternalLink213(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonExternalLink213() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink213(stack["name"], stack["start"])
}

func (c *current) onExternalLink239() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink239() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink239()
}

func (c *current) onExternalLink251() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink251() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink251()
}

func (c *current) onExternalLink253() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonExternalLink253() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink253()
}

func (c *current) onExternalLink246(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonExternalLink246() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink246(stack["start"])
}

func (c *current) onExternalLink235(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonExternalLink235() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink235(stack["name"], stack["start"])
}

func (c *current) onExternalLink261() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink261() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink261()
}

func (c *current) onExternalLink257(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonExternalLink257() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink257(stack["name"])
}

func (c *current) onExternalLink271() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink271() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink271()
}

func (c *current) onExternalLink267(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonExternalLink267() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink267(stack["name"])
}

func (c *current) onExternalLink208(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonExternalLink208() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink208(stack["element"])
}

func (c *current) onExternalLink279() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters), nil

}

func (p *parser) callonExternalLink279() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink279()
}

func (c *current) onExternalLink288() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonExternalLink288() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink288()
}

func (c *current) onExternalLink292() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink292() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink292()
}

func (c *current) onExternalLink298() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonExternalLink298() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink298()
}

func (c *current) onExternalLink307() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink307() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink307()
}

func (c *current) onExternalLink303(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonExternalLink303() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink303(stack["name"])
}

func (c *current) onExternalLink317() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExternalLink317() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink317()
}

func (c *current) onExternalLink313(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonExternalLink313() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink313(stack["name"])
}

func (c *current) onExternalLink323() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonExternalLink323() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink323()
}

func (c *current) onExternalLink284(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonExternalLink284() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink284(stack["id"], stack["label"])
}

func (c *current) onExternalLink330() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonExternalLink330() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink330()
}

func (c *current) onExternalLink326(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonExternalLink326() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink326(stack["id"])
}

func (c *current) onExternalLink282() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonExternalLink282() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink282()
}

func (c *current) onExternalLink334() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonExternalLink334() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink334()
}

func (c *current) onExternalLink277(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonExternalLink277() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink277(stack["element"])
}

func (c *current) onExternalLink336() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonExternalLink336() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink336()
}

func (c *current) onExternalLink188(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonExternalLink188() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink188(stack["elements"])
}

func (c *current) onExternalLink175(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))

}

func (p *parser) callonExternalLink175() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink175(stack["scheme"], stack["path"])
}

func (c *current) onExternalLink172(url, attributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(*types.Location), attributes)

}

func (p *parser) callonExternalLink172() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink172(stack["url"], stack["attributes"])
}

func (c *current) onListElements11() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElements11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements11()
}

func (c *current) onListElements18() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonListElements18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements18()
}

func (c *current) onListElements21(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonListElements21() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements21(stack["depth"])
}

func (c *current) onListElements15(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListElementPrefix(types.Arabic)
	case 2:
		return types.NewOrderedListElementPrefix(types.LowerAlpha)
	case 3:
		return types.NewOrderedListElementPrefix(types.LowerRoman)
	case 4:
		return types.NewOrderedListElementPrefix(types.UpperAlpha)
	default:
		return types.NewOrderedListElementPrefix(types.UpperRoman)
	}

}

func (p *parser) callonListElements15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements15(stack["depth"])
}

func (c *current) onListElements22() (interface{}, error) {
	// numbering style: "1.", etc.
	return types.NewOrderedListElementPrefix(types.Arabic)

}

func (p *parser) callonListElements22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements22()
}

func (c *current) onListElements27() (interface{}, error) {
	// numbering style: "a.", etc.
	return types.NewOrderedListElementPrefix(types.LowerAlpha)

}

func (p *parser) callonListElements27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements27()
}

func (c *current) onListElements31() (interface{}, error) {
	// numbering style: "A.", etc.
	return types.NewOrderedListElementPrefix(types.UpperAlpha)

}

func (p *parser) callonListElements31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements31()
}

func (c *current) onListElements35() (interface{}, error) {
	// numbering style: "i)", etc.
	return types.NewOrderedListElementPrefix(types.LowerRoman)

}

func (p *parser) callonListElements35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements35()
}

func (c *current) onListElements40() (interface{}, error) {
	// numbering style: "I)", etc.
	return types.NewOrderedListElementPrefix(types.UpperRoman)

}

func (p *parser) callonListElements40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements40()
}

func (c *current) onListElements45(prefix interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListElements45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements45(stack["prefix"])
}

func (c *current) onListElements8(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonListElements8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements8(stack["prefix"])
}

func (c *current) onListElements52() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonListElements52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements52()
}

func (c *current) onListElements56() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements56()
}

func (c *current) onListElements49(rawline interface{}) (interface{}, error) {
	return types.NewParagraph(rawline)

}

func (p *parser) callonListElements49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements49(stack["rawline"])
}

func (c *current) onListElements5(prefix, content interface{}) (interface{}, error) {
	return types.NewOrderedListElement(prefix.(types.OrderedListElementPrefix), content)

}

func (p *parser) callonListElements5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements5(stack["prefix"], stack["content"])
}

func (c *current) onListElements69() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElements69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements69()
}

func (c *current) onListElements76() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonListElements76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements76()
}

func (c *current) onListElements79(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonListElements79() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements79(stack["depth"])
}

func (c *current) onListElements73(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListElementPrefix(types.OneAsterisk)
	case 2:
		return types.NewUnorderedListElementPrefix(types.TwoAsterisks)
	case 3:
		return types.NewUnorderedListElementPrefix(types.ThreeAsterisks)
	case 4:
		return types.NewUnorderedListElementPrefix(types.FourAsterisks)
	default:
		return types.NewUnorderedListElementPrefix(types.FiveAsterisks)
	}

}

func (p *parser) callonListElements73() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements73(stack["depth"])
}

func (c *current) onListElements81() (interface{}, error) {
	return types.NewUnorderedListElementPrefix(types.Dash)

}

func (p *parser) callonListElements81() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements81()
}

func (c *current) onListElements83(prefix interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListElements83() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements83(stack["prefix"])
}

func (c *current) onListElements66(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonListElements66() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements66(stack["prefix"])
}

func (c *current) onListElements94() (interface{}, error) {
	return types.Unchecked, nil
}

func (p *parser) callonListElements94() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements94()
}

func (c *current) onListElements96() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonListElements96() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements96()
}

func (c *current) onListElements98() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonListElements98() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements98()
}

func (c *current) onListElements100(style interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListElements100() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements100(stack["style"])
}

func (c *current) onListElements88(style interface{}) (interface{}, error) {
	return style, nil

}

func (p *parser) callonListElements88() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements88(stack["style"])
}

func (c *current) onListElements107() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonListElements107() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements107()
}

func (c *current) onListElements111() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements111() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements111()
}

func (c *current) onListElements104(rawline interface{}) (interface{}, error) {
	return types.NewParagraph(rawline)

}

func (p *parser) callonListElements104() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements104(stack["rawline"])
}

func (c *current) onListElements63(prefix, checkstyle, content interface{}) (interface{}, error) {
	return types.NewUnorderedListElement(prefix.(types.UnorderedListElementPrefix), checkstyle, content)

}

func (p *parser) callonListElements63() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements63(stack["prefix"], stack["checkstyle"], stack["content"])
}

func (c *current) onListElements125() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonListElements125() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements125()
}

func (c *current) onListElements129(ref interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListElements129() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements129(stack["ref"])
}

func (c *current) onListElements121(ref interface{}) (interface{}, error) {
	return ref, nil

}

func (p *parser) callonListElements121() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements121(stack["ref"])
}

func (c *current) onListElements136() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElements136() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements136()
}

func (c *current) onListElements140() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements140() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements140()
}

func (c *current) onListElements133(rawline interface{}) (interface{}, error) {
	return types.NewRawLine(rawline.(string))

}

func (p *parser) callonListElements133() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements133(stack["rawline"])
}

func (c *current) onListElements118(ref, description interface{}) (interface{}, error) {
	return types.NewCalloutListElement(ref.(int), description.(types.RawLine))

}

func (p *parser) callonListElements118() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements118(stack["ref"], stack["description"])
}

func (c *current) onListElements157() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListElements157() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements157()
}

func (c *current) onListElements160(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonListElements160() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements160(stack["separator"])
}

func (c *current) onListElements154(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonListElements154() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements154(stack["separator"])
}

func (c *current) onListElements163() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements163() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements163()
}

func (c *current) onListElements150() (interface{}, error) {
	return types.NewRawLine(strings.TrimSpace(string(c.text)))

}

func (p *parser) callonListElements150() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements150()
}

func (c *current) onListElements175() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListElements175() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements175()
}

func (c *current) onListElements178(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonListElements178() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements178(stack["separator"])
}

func (c *current) onListElements172(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonListElements172() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements172(stack["separator"])
}

func (c *current) onListElements184() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElements184() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements184()
}

func (c *current) onListElements187() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements187() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements187()
}

func (c *current) onListElements201() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElements201() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements201()
}

func (c *current) onListElements204() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements204() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements204()
}

func (c *current) onListElements195() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonListElements195() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements195()
}

func (c *current) onListElements221() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElements221() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements221()
}

func (c *current) onListElements225() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements225() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements225()
}

func (c *current) onListElements215(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))

}

func (p *parser) callonListElements215() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements215(stack["content"])
}

func (c *current) onListElements214(content interface{}) (interface{}, error) {
	return nil, nil // taking a shortcut to ignore commented out content and avoid having empty paragraphs

}

func (p *parser) callonListElements214() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements214(stack["content"])
}

func (c *current) onListElements241() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElements241() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements241()
}

func (c *current) onListElements244() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements244() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements244()
}

func (c *current) onListElements235() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonListElements235() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements235()
}

func (c *current) onListElements255() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElements255() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements255()
}

func (c *current) onListElements257() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements257() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements257()
}

func (c *current) onListElements266() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElements266() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements266()
}

func (c *current) onListElements273() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonListElements273() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements273()
}

func (c *current) onListElements276(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonListElements276() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements276(stack["depth"])
}

func (c *current) onListElements270(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListElementPrefix(types.Arabic)
	case 2:
		return types.NewOrderedListElementPrefix(types.LowerAlpha)
	case 3:
		return types.NewOrderedListElementPrefix(types.LowerRoman)
	case 4:
		return types.NewOrderedListElementPrefix(types.UpperAlpha)
	default:
		return types.NewOrderedListElementPrefix(types.UpperRoman)
	}

}

func (p *parser) callonListElements270() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements270(stack["depth"])
}

func (c *current) onListElements277() (interface{}, error) {
	// numbering style: "1.", etc.
	return types.NewOrderedListElementPrefix(types.Arabic)

}

func (p *parser) callonListElements277() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements277()
}

func (c *current) onListElements282() (interface{}, error) {
	// numbering style: "a.", etc.
	return types.NewOrderedListElementPrefix(types.LowerAlpha)

}

func (p *parser) callonListElements282() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements282()
}

func (c *current) onListElements286() (interface{}, error) {
	// numbering style: "A.", etc.
	return types.NewOrderedListElementPrefix(types.UpperAlpha)

}

func (p *parser) callonListElements286() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements286()
}

func (c *current) onListElements290() (interface{}, error) {
	// numbering style: "i)", etc.
	return types.NewOrderedListElementPrefix(types.LowerRoman)

}

func (p *parser) callonListElements290() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements290()
}

func (c *current) onListElements295() (interface{}, error) {
	// numbering style: "I)", etc.
	return types.NewOrderedListElementPrefix(types.UpperRoman)

}

func (p *parser) callonListElements295() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements295()
}

func (c *current) onListElements300(prefix interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListElements300() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements300(stack["prefix"])
}

func (c *current) onListElements263(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonListElements263() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements263(stack["prefix"])
}

func (c *current) onListElements307() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElements307() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements307()
}

func (c *current) onListElements314() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonListElements314() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements314()
}

func (c *current) onListElements317(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonListElements317() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements317(stack["depth"])
}

func (c *current) onListElements311(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListElementPrefix(types.OneAsterisk)
	case 2:
		return types.NewUnorderedListElementPrefix(types.TwoAsterisks)
	case 3:
		return types.NewUnorderedListElementPrefix(types.ThreeAsterisks)
	case 4:
		return types.NewUnorderedListElementPrefix(types.FourAsterisks)
	default:
		return types.NewUnorderedListElementPrefix(types.FiveAsterisks)
	}

}

func (p *parser) callonListElements311() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements311(stack["depth"])
}

func (c *current) onListElements319() (interface{}, error) {
	return types.NewUnorderedListElementPrefix(types.Dash)

}

func (p *parser) callonListElements319() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements319()
}

func (c *current) onListElements321(prefix interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListElements321() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements321(stack["prefix"])
}

func (c *current) onListElements304(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonListElements304() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements304(stack["prefix"])
}

func (c *current) onListElements329() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonListElements329() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements329()
}

func (c *current) onListElements333(ref interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListElements333() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements333(stack["ref"])
}

func (c *current) onListElements325(ref interface{}) (interface{}, error) {
	return ref, nil

}

func (p *parser) callonListElements325() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements325(stack["ref"])
}

func (c *current) onListElements345() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListElements345() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements345()
}

func (c *current) onListElements348(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonListElements348() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements348(stack["separator"])
}

func (c *current) onListElements342(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonListElements342() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements342(stack["separator"])
}

func (c *current) onListElements351() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements351() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements351()
}

func (c *current) onListElements338() (interface{}, error) {
	return types.NewRawLine(strings.TrimSpace(string(c.text)))

}

func (p *parser) callonListElements338() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements338()
}

func (c *current) onListElements362() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListElements362() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements362()
}

func (c *current) onListElements365(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonListElements365() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements365(stack["separator"])
}

func (c *current) onListElements359(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonListElements359() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements359(stack["separator"])
}

func (c *current) onListElements376() (interface{}, error) {
	// sequence of 4 "/" chars or more
	return string(c.text), nil

}

func (p *parser) callonListElements376() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements376()
}

func (c *current) onListElements382() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElements382() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements382()
}

func (c *current) onListElements385() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements385() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements385()
}

func (c *current) onListElements373(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Comment, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListElements373() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements373(stack["delimiter"])
}

func (c *current) onListElements395() (interface{}, error) {
	// sequence of 4 "=" chars or more
	return string(c.text), nil

}

func (p *parser) callonListElements395() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements395()
}

func (c *current) onListElements401() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElements401() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements401()
}

func (c *current) onListElements404() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements404() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements404()
}

func (c *current) onListElements392(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Example, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListElements392() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements392(stack["delimiter"])
}

func (c *current) onListElements415() (interface{}, error) {
	// exclude ` to avoid matching fenced blocks with more than 3 "`" delimter chars
	return string(c.text), nil
}

func (p *parser) callonListElements415() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements415()
}

func (c *current) onListElements419() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElements419() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements419()
}

func (c *current) onListElements422() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements422() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements422()
}

func (c *current) onListElements411(language interface{}) (interface{}, error) {
	return types.NewMarkdownCodeBlockDelimiter(language.(string), string(c.text))
}

func (p *parser) callonListElements411() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements411(stack["language"])
}

func (c *current) onListElements432() (interface{}, error) {
	// sequence of 3 "`" chars or more
	return string(c.text), nil

}

func (p *parser) callonListElements432() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements432()
}

func (c *current) onListElements438() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElements438() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements438()
}

func (c *current) onListElements441() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements441() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements441()
}

func (c *current) onListElements429(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Fenced, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListElements429() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements429(stack["delimiter"])
}

func (c *current) onListElements451() (interface{}, error) {
	// sequence of 4 "-" chars or more
	return string(c.text), nil

}

func (p *parser) callonListElements451() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements451()
}

func (c *current) onListElements457() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElements457() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements457()
}

func (c *current) onListElements460() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements460() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements460()
}

func (c *current) onListElements448(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Listing, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListElements448() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements448(stack["delimiter"])
}

func (c *current) onListElements470() (interface{}, error) {
	// sequence of 4 "." chars or more
	return string(c.text), nil

}

func (p *parser) callonListElements470() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements470()
}

func (c *current) onListElements476() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElements476() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements476()
}

func (c *current) onListElements479() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements479() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements479()
}

func (c *current) onListElements467(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Listing, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListElements467() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements467(stack["delimiter"])
}

func (c *current) onListElements489() (interface{}, error) {
	// sequence of 4 "+" chars or more
	return string(c.text), nil

}

func (p *parser) callonListElements489() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements489()
}

func (c *current) onListElements495() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElements495() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements495()
}

func (c *current) onListElements498() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements498() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements498()
}

func (c *current) onListElements486(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Passthrough, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListElements486() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements486(stack["delimiter"])
}

func (c *current) onListElements508() (interface{}, error) {
	// sequence of 4 "_" chars or more
	return string(c.text), nil

}

func (p *parser) callonListElements508() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements508()
}

func (c *current) onListElements514() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElements514() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements514()
}

func (c *current) onListElements517() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements517() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements517()
}

func (c *current) onListElements505(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Quote, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListElements505() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements505(stack["delimiter"])
}

func (c *current) onListElements527() (interface{}, error) {
	// sequence of 4 "*" chars or more
	return string(c.text), nil

}

func (p *parser) callonListElements527() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements527()
}

func (c *current) onListElements533() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElements533() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements533()
}

func (c *current) onListElements536() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements536() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements536()
}

func (c *current) onListElements524(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Sidebar, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListElements524() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements524(stack["delimiter"])
}

func (c *current) onListElements367(delimiter interface{}) (interface{}, error) {
	return delimiter, nil

}

func (p *parser) callonListElements367() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements367(stack["delimiter"])
}

func (c *current) onListElements544() (interface{}, error) {
	return strings.TrimSpace(string(c.text)), nil

}

func (p *parser) callonListElements544() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements544()
}

func (c *current) onListElements548() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements548() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements548()
}

func (c *current) onListElements232(content interface{}) (interface{}, error) {
	// do not retain the EOL chars
	return types.NewRawLine(content.(string))

}

func (p *parser) callonListElements232() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements232(stack["content"])
}

func (c *current) onListElements181(content interface{}) (interface{}, error) {
	if content == nil {
		return nil, nil
	}
	return types.NewParagraph(content)

}

func (p *parser) callonListElements181() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements181(stack["content"])
}

func (c *current) onListElements557() (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListElements557() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements557()
}

func (c *current) onListElements561() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonListElements561() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements561()
}

func (c *current) onListElements565() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElements565() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements565()
}

func (c *current) onListElements555(content interface{}) (interface{}, error) {
	return types.NewParagraph(content)

}

func (p *parser) callonListElements555() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements555(stack["content"])
}

func (c *current) onListElements147(term, separator, description interface{}) (interface{}, error) {
	return types.NewLabeledListElement(len(separator.(string))-1, term, description)

}

func (p *parser) callonListElements147() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements147(stack["term"], stack["separator"], stack["description"])
}

func (c *current) onListElements1(firstElement, extraElements interface{}) (interface{}, error) {
	return types.NewListElements(append([]interface{}{firstElement}, extraElements.([]interface{})...))

}

func (p *parser) callonListElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElements1(stack["firstElement"], stack["extraElements"])
}

func (c *current) onExtraListElements1(elements interface{}) (interface{}, error) {
	return types.Flatten(elements.([]interface{})), nil
}

func (p *parser) callonExtraListElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElements1(stack["elements"])
}

func (c *current) onExtraListElement17() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement17()
}

func (c *current) onExtraListElement20() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement20()
}

func (c *current) onExtraListElement11() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonExtraListElement11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement11()
}

func (c *current) onExtraListElement34() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement34()
}

func (c *current) onExtraListElement41() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonExtraListElement41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement41()
}

func (c *current) onExtraListElement44(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonExtraListElement44() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement44(stack["depth"])
}

func (c *current) onExtraListElement38(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListElementPrefix(types.Arabic)
	case 2:
		return types.NewOrderedListElementPrefix(types.LowerAlpha)
	case 3:
		return types.NewOrderedListElementPrefix(types.LowerRoman)
	case 4:
		return types.NewOrderedListElementPrefix(types.UpperAlpha)
	default:
		return types.NewOrderedListElementPrefix(types.UpperRoman)
	}

}

func (p *parser) callonExtraListElement38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement38(stack["depth"])
}

func (c *current) onExtraListElement45() (interface{}, error) {
	// numbering style: "1.", etc.
	return types.NewOrderedListElementPrefix(types.Arabic)

}

func (p *parser) callonExtraListElement45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement45()
}

func (c *current) onExtraListElement50() (interface{}, error) {
	// numbering style: "a.", etc.
	return types.NewOrderedListElementPrefix(types.LowerAlpha)

}

func (p *parser) callonExtraListElement50() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement50()
}

func (c *current) onExtraListElement54() (interface{}, error) {
	// numbering style: "A.", etc.
	return types.NewOrderedListElementPrefix(types.UpperAlpha)

}

func (p *parser) callonExtraListElement54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement54()
}

func (c *current) onExtraListElement58() (interface{}, error) {
	// numbering style: "i)", etc.
	return types.NewOrderedListElementPrefix(types.LowerRoman)

}

func (p *parser) callonExtraListElement58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement58()
}

func (c *current) onExtraListElement63() (interface{}, error) {
	// numbering style: "I)", etc.
	return types.NewOrderedListElementPrefix(types.UpperRoman)

}

func (p *parser) callonExtraListElement63() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement63()
}

func (c *current) onExtraListElement68(prefix interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement68() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement68(stack["prefix"])
}

func (c *current) onExtraListElement31(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonExtraListElement31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement31(stack["prefix"])
}

func (c *current) onExtraListElement75() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonExtraListElement75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement75()
}

func (c *current) onExtraListElement79() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement79() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement79()
}

func (c *current) onExtraListElement72(rawline interface{}) (interface{}, error) {
	return types.NewParagraph(rawline)

}

func (p *parser) callonExtraListElement72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement72(stack["rawline"])
}

func (c *current) onExtraListElement28(prefix, content interface{}) (interface{}, error) {
	return types.NewOrderedListElement(prefix.(types.OrderedListElementPrefix), content)

}

func (p *parser) callonExtraListElement28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement28(stack["prefix"], stack["content"])
}

func (c *current) onExtraListElement8(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonExtraListElement8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement8(stack["element"])
}

func (c *current) onExtraListElement98() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement98() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement98()
}

func (c *current) onExtraListElement105() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonExtraListElement105() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement105()
}

func (c *current) onExtraListElement108(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonExtraListElement108() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement108(stack["depth"])
}

func (c *current) onExtraListElement102(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListElementPrefix(types.Arabic)
	case 2:
		return types.NewOrderedListElementPrefix(types.LowerAlpha)
	case 3:
		return types.NewOrderedListElementPrefix(types.LowerRoman)
	case 4:
		return types.NewOrderedListElementPrefix(types.UpperAlpha)
	default:
		return types.NewOrderedListElementPrefix(types.UpperRoman)
	}

}

func (p *parser) callonExtraListElement102() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement102(stack["depth"])
}

func (c *current) onExtraListElement109() (interface{}, error) {
	// numbering style: "1.", etc.
	return types.NewOrderedListElementPrefix(types.Arabic)

}

func (p *parser) callonExtraListElement109() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement109()
}

func (c *current) onExtraListElement114() (interface{}, error) {
	// numbering style: "a.", etc.
	return types.NewOrderedListElementPrefix(types.LowerAlpha)

}

func (p *parser) callonExtraListElement114() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement114()
}

func (c *current) onExtraListElement118() (interface{}, error) {
	// numbering style: "A.", etc.
	return types.NewOrderedListElementPrefix(types.UpperAlpha)

}

func (p *parser) callonExtraListElement118() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement118()
}

func (c *current) onExtraListElement122() (interface{}, error) {
	// numbering style: "i)", etc.
	return types.NewOrderedListElementPrefix(types.LowerRoman)

}

func (p *parser) callonExtraListElement122() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement122()
}

func (c *current) onExtraListElement127() (interface{}, error) {
	// numbering style: "I)", etc.
	return types.NewOrderedListElementPrefix(types.UpperRoman)

}

func (p *parser) callonExtraListElement127() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement127()
}

func (c *current) onExtraListElement132(prefix interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement132() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement132(stack["prefix"])
}

func (c *current) onExtraListElement95(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonExtraListElement95() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement95(stack["prefix"])
}

func (c *current) onExtraListElement139() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonExtraListElement139() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement139()
}

func (c *current) onExtraListElement143() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement143() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement143()
}

func (c *current) onExtraListElement136(rawline interface{}) (interface{}, error) {
	return types.NewParagraph(rawline)

}

func (p *parser) callonExtraListElement136() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement136(stack["rawline"])
}

func (c *current) onExtraListElement92(prefix, content interface{}) (interface{}, error) {
	return types.NewOrderedListElement(prefix.(types.OrderedListElementPrefix), content)

}

func (p *parser) callonExtraListElement92() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement92(stack["prefix"], stack["content"])
}

func (c *current) onExtraListElement86(attributes, element interface{}) (interface{}, error) {
	return append(attributes.([]interface{}), element), nil

}

func (p *parser) callonExtraListElement86() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement86(stack["attributes"], stack["element"])
}

func (c *current) onExtraListElement159() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement159() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement159()
}

func (c *current) onExtraListElement162() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement162() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement162()
}

func (c *current) onExtraListElement153() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonExtraListElement153() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement153()
}

func (c *current) onExtraListElement176() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement176() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement176()
}

func (c *current) onExtraListElement183() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonExtraListElement183() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement183()
}

func (c *current) onExtraListElement186(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonExtraListElement186() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement186(stack["depth"])
}

func (c *current) onExtraListElement180(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListElementPrefix(types.OneAsterisk)
	case 2:
		return types.NewUnorderedListElementPrefix(types.TwoAsterisks)
	case 3:
		return types.NewUnorderedListElementPrefix(types.ThreeAsterisks)
	case 4:
		return types.NewUnorderedListElementPrefix(types.FourAsterisks)
	default:
		return types.NewUnorderedListElementPrefix(types.FiveAsterisks)
	}

}

func (p *parser) callonExtraListElement180() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement180(stack["depth"])
}

func (c *current) onExtraListElement188() (interface{}, error) {
	return types.NewUnorderedListElementPrefix(types.Dash)

}

func (p *parser) callonExtraListElement188() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement188()
}

func (c *current) onExtraListElement190(prefix interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement190() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement190(stack["prefix"])
}

func (c *current) onExtraListElement173(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonExtraListElement173() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement173(stack["prefix"])
}

func (c *current) onExtraListElement201() (interface{}, error) {
	return types.Unchecked, nil
}

func (p *parser) callonExtraListElement201() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement201()
}

func (c *current) onExtraListElement203() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonExtraListElement203() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement203()
}

func (c *current) onExtraListElement205() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonExtraListElement205() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement205()
}

func (c *current) onExtraListElement207(style interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement207() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement207(stack["style"])
}

func (c *current) onExtraListElement195(style interface{}) (interface{}, error) {
	return style, nil

}

func (p *parser) callonExtraListElement195() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement195(stack["style"])
}

func (c *current) onExtraListElement214() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonExtraListElement214() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement214()
}

func (c *current) onExtraListElement218() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement218() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement218()
}

func (c *current) onExtraListElement211(rawline interface{}) (interface{}, error) {
	return types.NewParagraph(rawline)

}

func (p *parser) callonExtraListElement211() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement211(stack["rawline"])
}

func (c *current) onExtraListElement170(prefix, checkstyle, content interface{}) (interface{}, error) {
	return types.NewUnorderedListElement(prefix.(types.UnorderedListElementPrefix), checkstyle, content)

}

func (p *parser) callonExtraListElement170() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement170(stack["prefix"], stack["checkstyle"], stack["content"])
}

func (c *current) onExtraListElement150(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonExtraListElement150() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement150(stack["element"])
}

func (c *current) onExtraListElement237() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement237() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement237()
}

func (c *current) onExtraListElement244() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonExtraListElement244() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement244()
}

func (c *current) onExtraListElement247(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonExtraListElement247() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement247(stack["depth"])
}

func (c *current) onExtraListElement241(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListElementPrefix(types.OneAsterisk)
	case 2:
		return types.NewUnorderedListElementPrefix(types.TwoAsterisks)
	case 3:
		return types.NewUnorderedListElementPrefix(types.ThreeAsterisks)
	case 4:
		return types.NewUnorderedListElementPrefix(types.FourAsterisks)
	default:
		return types.NewUnorderedListElementPrefix(types.FiveAsterisks)
	}

}

func (p *parser) callonExtraListElement241() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement241(stack["depth"])
}

func (c *current) onExtraListElement249() (interface{}, error) {
	return types.NewUnorderedListElementPrefix(types.Dash)

}

func (p *parser) callonExtraListElement249() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement249()
}

func (c *current) onExtraListElement251(prefix interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement251() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement251(stack["prefix"])
}

func (c *current) onExtraListElement234(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonExtraListElement234() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement234(stack["prefix"])
}

func (c *current) onExtraListElement262() (interface{}, error) {
	return types.Unchecked, nil
}

func (p *parser) callonExtraListElement262() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement262()
}

func (c *current) onExtraListElement264() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonExtraListElement264() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement264()
}

func (c *current) onExtraListElement266() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonExtraListElement266() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement266()
}

func (c *current) onExtraListElement268(style interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement268() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement268(stack["style"])
}

func (c *current) onExtraListElement256(style interface{}) (interface{}, error) {
	return style, nil

}

func (p *parser) callonExtraListElement256() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement256(stack["style"])
}

func (c *current) onExtraListElement275() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonExtraListElement275() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement275()
}

func (c *current) onExtraListElement279() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement279() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement279()
}

func (c *current) onExtraListElement272(rawline interface{}) (interface{}, error) {
	return types.NewParagraph(rawline)

}

func (p *parser) callonExtraListElement272() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement272(stack["rawline"])
}

func (c *current) onExtraListElement231(prefix, checkstyle, content interface{}) (interface{}, error) {
	return types.NewUnorderedListElement(prefix.(types.UnorderedListElementPrefix), checkstyle, content)

}

func (p *parser) callonExtraListElement231() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement231(stack["prefix"], stack["checkstyle"], stack["content"])
}

func (c *current) onExtraListElement225(attributes, element interface{}) (interface{}, error) {
	return append(attributes.([]interface{}), element), nil

}

func (p *parser) callonExtraListElement225() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement225(stack["attributes"], stack["element"])
}

func (c *current) onExtraListElement295() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement295() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement295()
}

func (c *current) onExtraListElement298() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement298() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement298()
}

func (c *current) onExtraListElement289() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonExtraListElement289() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement289()
}

func (c *current) onExtraListElement313() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonExtraListElement313() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement313()
}

func (c *current) onExtraListElement317(ref interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement317() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement317(stack["ref"])
}

func (c *current) onExtraListElement309(ref interface{}) (interface{}, error) {
	return ref, nil

}

func (p *parser) callonExtraListElement309() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement309(stack["ref"])
}

func (c *current) onExtraListElement324() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement324() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement324()
}

func (c *current) onExtraListElement328() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement328() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement328()
}

func (c *current) onExtraListElement321(rawline interface{}) (interface{}, error) {
	return types.NewRawLine(rawline.(string))

}

func (p *parser) callonExtraListElement321() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement321(stack["rawline"])
}

func (c *current) onExtraListElement306(ref, description interface{}) (interface{}, error) {
	return types.NewCalloutListElement(ref.(int), description.(types.RawLine))

}

func (p *parser) callonExtraListElement306() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement306(stack["ref"], stack["description"])
}

func (c *current) onExtraListElement286(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonExtraListElement286() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement286(stack["element"])
}

func (c *current) onExtraListElement348() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonExtraListElement348() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement348()
}

func (c *current) onExtraListElement352(ref interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement352() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement352(stack["ref"])
}

func (c *current) onExtraListElement344(ref interface{}) (interface{}, error) {
	return ref, nil

}

func (p *parser) callonExtraListElement344() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement344(stack["ref"])
}

func (c *current) onExtraListElement359() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement359() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement359()
}

func (c *current) onExtraListElement363() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement363() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement363()
}

func (c *current) onExtraListElement356(rawline interface{}) (interface{}, error) {
	return types.NewRawLine(rawline.(string))

}

func (p *parser) callonExtraListElement356() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement356(stack["rawline"])
}

func (c *current) onExtraListElement341(ref, description interface{}) (interface{}, error) {
	return types.NewCalloutListElement(ref.(int), description.(types.RawLine))

}

func (p *parser) callonExtraListElement341() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement341(stack["ref"], stack["description"])
}

func (c *current) onExtraListElement335(attributes, element interface{}) (interface{}, error) {
	return append(attributes.([]interface{}), element), nil

}

func (p *parser) callonExtraListElement335() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement335(stack["attributes"], stack["element"])
}

func (c *current) onExtraListElement380() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement380() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement380()
}

func (c *current) onExtraListElement383() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement383() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement383()
}

func (c *current) onExtraListElement374() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonExtraListElement374() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement374()
}

func (c *current) onExtraListElement401() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement401() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement401()
}

func (c *current) onExtraListElement404(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonExtraListElement404() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement404(stack["separator"])
}

func (c *current) onExtraListElement398(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonExtraListElement398() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement398(stack["separator"])
}

func (c *current) onExtraListElement407() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement407() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement407()
}

func (c *current) onExtraListElement394() (interface{}, error) {
	return types.NewRawLine(strings.TrimSpace(string(c.text)))

}

func (p *parser) callonExtraListElement394() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement394()
}

func (c *current) onExtraListElement419() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement419() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement419()
}

func (c *current) onExtraListElement422(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonExtraListElement422() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement422(stack["separator"])
}

func (c *current) onExtraListElement416(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonExtraListElement416() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement416(stack["separator"])
}

func (c *current) onExtraListElement428() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement428() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement428()
}

func (c *current) onExtraListElement431() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement431() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement431()
}

func (c *current) onExtraListElement445() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement445() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement445()
}

func (c *current) onExtraListElement448() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement448() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement448()
}

func (c *current) onExtraListElement439() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonExtraListElement439() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement439()
}

func (c *current) onExtraListElement465() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement465() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement465()
}

func (c *current) onExtraListElement469() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement469() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement469()
}

func (c *current) onExtraListElement459(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))

}

func (p *parser) callonExtraListElement459() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement459(stack["content"])
}

func (c *current) onExtraListElement458(content interface{}) (interface{}, error) {
	return nil, nil // taking a shortcut to ignore commented out content and avoid having empty paragraphs

}

func (p *parser) callonExtraListElement458() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement458(stack["content"])
}

func (c *current) onExtraListElement485() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement485() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement485()
}

func (c *current) onExtraListElement488() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement488() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement488()
}

func (c *current) onExtraListElement479() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonExtraListElement479() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement479()
}

func (c *current) onExtraListElement499() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement499() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement499()
}

func (c *current) onExtraListElement501() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement501() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement501()
}

func (c *current) onExtraListElement510() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement510() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement510()
}

func (c *current) onExtraListElement517() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonExtraListElement517() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement517()
}

func (c *current) onExtraListElement520(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonExtraListElement520() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement520(stack["depth"])
}

func (c *current) onExtraListElement514(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListElementPrefix(types.Arabic)
	case 2:
		return types.NewOrderedListElementPrefix(types.LowerAlpha)
	case 3:
		return types.NewOrderedListElementPrefix(types.LowerRoman)
	case 4:
		return types.NewOrderedListElementPrefix(types.UpperAlpha)
	default:
		return types.NewOrderedListElementPrefix(types.UpperRoman)
	}

}

func (p *parser) callonExtraListElement514() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement514(stack["depth"])
}

func (c *current) onExtraListElement521() (interface{}, error) {
	// numbering style: "1.", etc.
	return types.NewOrderedListElementPrefix(types.Arabic)

}

func (p *parser) callonExtraListElement521() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement521()
}

func (c *current) onExtraListElement526() (interface{}, error) {
	// numbering style: "a.", etc.
	return types.NewOrderedListElementPrefix(types.LowerAlpha)

}

func (p *parser) callonExtraListElement526() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement526()
}

func (c *current) onExtraListElement530() (interface{}, error) {
	// numbering style: "A.", etc.
	return types.NewOrderedListElementPrefix(types.UpperAlpha)

}

func (p *parser) callonExtraListElement530() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement530()
}

func (c *current) onExtraListElement534() (interface{}, error) {
	// numbering style: "i)", etc.
	return types.NewOrderedListElementPrefix(types.LowerRoman)

}

func (p *parser) callonExtraListElement534() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement534()
}

func (c *current) onExtraListElement539() (interface{}, error) {
	// numbering style: "I)", etc.
	return types.NewOrderedListElementPrefix(types.UpperRoman)

}

func (p *parser) callonExtraListElement539() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement539()
}

func (c *current) onExtraListElement544(prefix interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement544() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement544(stack["prefix"])
}

func (c *current) onExtraListElement507(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonExtraListElement507() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement507(stack["prefix"])
}

func (c *current) onExtraListElement551() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement551() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement551()
}

func (c *current) onExtraListElement558() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonExtraListElement558() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement558()
}

func (c *current) onExtraListElement561(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonExtraListElement561() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement561(stack["depth"])
}

func (c *current) onExtraListElement555(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListElementPrefix(types.OneAsterisk)
	case 2:
		return types.NewUnorderedListElementPrefix(types.TwoAsterisks)
	case 3:
		return types.NewUnorderedListElementPrefix(types.ThreeAsterisks)
	case 4:
		return types.NewUnorderedListElementPrefix(types.FourAsterisks)
	default:
		return types.NewUnorderedListElementPrefix(types.FiveAsterisks)
	}

}

func (p *parser) callonExtraListElement555() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement555(stack["depth"])
}

func (c *current) onExtraListElement563() (interface{}, error) {
	return types.NewUnorderedListElementPrefix(types.Dash)

}

func (p *parser) callonExtraListElement563() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement563()
}

func (c *current) onExtraListElement565(prefix interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement565() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement565(stack["prefix"])
}

func (c *current) onExtraListElement548(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonExtraListElement548() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement548(stack["prefix"])
}

func (c *current) onExtraListElement573() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonExtraListElement573() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement573()
}

func (c *current) onExtraListElement577(ref interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement577() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement577(stack["ref"])
}

func (c *current) onExtraListElement569(ref interface{}) (interface{}, error) {
	return ref, nil

}

func (p *parser) callonExtraListElement569() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement569(stack["ref"])
}

func (c *current) onExtraListElement589() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement589() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement589()
}

func (c *current) onExtraListElement592(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonExtraListElement592() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement592(stack["separator"])
}

func (c *current) onExtraListElement586(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonExtraListElement586() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement586(stack["separator"])
}

func (c *current) onExtraListElement595() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement595() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement595()
}

func (c *current) onExtraListElement582() (interface{}, error) {
	return types.NewRawLine(strings.TrimSpace(string(c.text)))

}

func (p *parser) callonExtraListElement582() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement582()
}

func (c *current) onExtraListElement606() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement606() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement606()
}

func (c *current) onExtraListElement609(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonExtraListElement609() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement609(stack["separator"])
}

func (c *current) onExtraListElement603(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonExtraListElement603() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement603(stack["separator"])
}

func (c *current) onExtraListElement620() (interface{}, error) {
	// sequence of 4 "/" chars or more
	return string(c.text), nil

}

func (p *parser) callonExtraListElement620() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement620()
}

func (c *current) onExtraListElement626() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement626() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement626()
}

func (c *current) onExtraListElement629() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement629() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement629()
}

func (c *current) onExtraListElement617(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Comment, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonExtraListElement617() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement617(stack["delimiter"])
}

func (c *current) onExtraListElement639() (interface{}, error) {
	// sequence of 4 "=" chars or more
	return string(c.text), nil

}

func (p *parser) callonExtraListElement639() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement639()
}

func (c *current) onExtraListElement645() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement645() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement645()
}

func (c *current) onExtraListElement648() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement648() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement648()
}

func (c *current) onExtraListElement636(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Example, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonExtraListElement636() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement636(stack["delimiter"])
}

func (c *current) onExtraListElement659() (interface{}, error) {
	// exclude ` to avoid matching fenced blocks with more than 3 "`" delimter chars
	return string(c.text), nil
}

func (p *parser) callonExtraListElement659() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement659()
}

func (c *current) onExtraListElement663() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement663() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement663()
}

func (c *current) onExtraListElement666() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement666() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement666()
}

func (c *current) onExtraListElement655(language interface{}) (interface{}, error) {
	return types.NewMarkdownCodeBlockDelimiter(language.(string), string(c.text))
}

func (p *parser) callonExtraListElement655() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement655(stack["language"])
}

func (c *current) onExtraListElement676() (interface{}, error) {
	// sequence of 3 "`" chars or more
	return string(c.text), nil

}

func (p *parser) callonExtraListElement676() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement676()
}

func (c *current) onExtraListElement682() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement682() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement682()
}

func (c *current) onExtraListElement685() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement685() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement685()
}

func (c *current) onExtraListElement673(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Fenced, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonExtraListElement673() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement673(stack["delimiter"])
}

func (c *current) onExtraListElement695() (interface{}, error) {
	// sequence of 4 "-" chars or more
	return string(c.text), nil

}

func (p *parser) callonExtraListElement695() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement695()
}

func (c *current) onExtraListElement701() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement701() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement701()
}

func (c *current) onExtraListElement704() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement704() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement704()
}

func (c *current) onExtraListElement692(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Listing, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonExtraListElement692() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement692(stack["delimiter"])
}

func (c *current) onExtraListElement714() (interface{}, error) {
	// sequence of 4 "." chars or more
	return string(c.text), nil

}

func (p *parser) callonExtraListElement714() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement714()
}

func (c *current) onExtraListElement720() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement720() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement720()
}

func (c *current) onExtraListElement723() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement723() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement723()
}

func (c *current) onExtraListElement711(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Listing, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonExtraListElement711() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement711(stack["delimiter"])
}

func (c *current) onExtraListElement733() (interface{}, error) {
	// sequence of 4 "+" chars or more
	return string(c.text), nil

}

func (p *parser) callonExtraListElement733() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement733()
}

func (c *current) onExtraListElement739() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement739() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement739()
}

func (c *current) onExtraListElement742() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement742() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement742()
}

func (c *current) onExtraListElement730(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Passthrough, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonExtraListElement730() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement730(stack["delimiter"])
}

func (c *current) onExtraListElement752() (interface{}, error) {
	// sequence of 4 "_" chars or more
	return string(c.text), nil

}

func (p *parser) callonExtraListElement752() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement752()
}

func (c *current) onExtraListElement758() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement758() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement758()
}

func (c *current) onExtraListElement761() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement761() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement761()
}

func (c *current) onExtraListElement749(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Quote, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonExtraListElement749() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement749(stack["delimiter"])
}

func (c *current) onExtraListElement771() (interface{}, error) {
	// sequence of 4 "*" chars or more
	return string(c.text), nil

}

func (p *parser) callonExtraListElement771() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement771()
}

func (c *current) onExtraListElement777() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement777() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement777()
}

func (c *current) onExtraListElement780() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement780() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement780()
}

func (c *current) onExtraListElement768(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Sidebar, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonExtraListElement768() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement768(stack["delimiter"])
}

func (c *current) onExtraListElement611(delimiter interface{}) (interface{}, error) {
	return delimiter, nil

}

func (p *parser) callonExtraListElement611() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement611(stack["delimiter"])
}

func (c *current) onExtraListElement788() (interface{}, error) {
	return strings.TrimSpace(string(c.text)), nil

}

func (p *parser) callonExtraListElement788() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement788()
}

func (c *current) onExtraListElement792() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement792() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement792()
}

func (c *current) onExtraListElement476(content interface{}) (interface{}, error) {
	// do not retain the EOL chars
	return types.NewRawLine(content.(string))

}

func (p *parser) callonExtraListElement476() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement476(stack["content"])
}

func (c *current) onExtraListElement425(content interface{}) (interface{}, error) {
	if content == nil {
		return nil, nil
	}
	return types.NewParagraph(content)

}

func (p *parser) callonExtraListElement425() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement425(stack["content"])
}

func (c *current) onExtraListElement801() (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement801() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement801()
}

func (c *current) onExtraListElement805() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonExtraListElement805() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement805()
}

func (c *current) onExtraListElement809() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement809() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement809()
}

func (c *current) onExtraListElement799(content interface{}) (interface{}, error) {
	return types.NewParagraph(content)

}

func (p *parser) callonExtraListElement799() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement799(stack["content"])
}

func (c *current) onExtraListElement391(term, separator, description interface{}) (interface{}, error) {
	return types.NewLabeledListElement(len(separator.(string))-1, term, description)

}

func (p *parser) callonExtraListElement391() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement391(stack["term"], stack["separator"], stack["description"])
}

func (c *current) onExtraListElement371(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonExtraListElement371() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement371(stack["element"])
}

func (c *current) onExtraListElement832() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement832() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement832()
}

func (c *current) onExtraListElement835(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonExtraListElement835() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement835(stack["separator"])
}

func (c *current) onExtraListElement829(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonExtraListElement829() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement829(stack["separator"])
}

func (c *current) onExtraListElement838() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement838() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement838()
}

func (c *current) onExtraListElement825() (interface{}, error) {
	return types.NewRawLine(strings.TrimSpace(string(c.text)))

}

func (p *parser) callonExtraListElement825() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement825()
}

func (c *current) onExtraListElement850() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement850() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement850()
}

func (c *current) onExtraListElement853(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonExtraListElement853() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement853(stack["separator"])
}

func (c *current) onExtraListElement847(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonExtraListElement847() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement847(stack["separator"])
}

func (c *current) onExtraListElement859() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement859() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement859()
}

func (c *current) onExtraListElement862() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement862() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement862()
}

func (c *current) onExtraListElement876() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement876() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement876()
}

func (c *current) onExtraListElement879() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement879() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement879()
}

func (c *current) onExtraListElement870() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonExtraListElement870() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement870()
}

func (c *current) onExtraListElement896() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement896() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement896()
}

func (c *current) onExtraListElement900() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement900() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement900()
}

func (c *current) onExtraListElement890(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))

}

func (p *parser) callonExtraListElement890() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement890(stack["content"])
}

func (c *current) onExtraListElement889(content interface{}) (interface{}, error) {
	return nil, nil // taking a shortcut to ignore commented out content and avoid having empty paragraphs

}

func (p *parser) callonExtraListElement889() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement889(stack["content"])
}

func (c *current) onExtraListElement916() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement916() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement916()
}

func (c *current) onExtraListElement919() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement919() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement919()
}

func (c *current) onExtraListElement910() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonExtraListElement910() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement910()
}

func (c *current) onExtraListElement930() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement930() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement930()
}

func (c *current) onExtraListElement932() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement932() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement932()
}

func (c *current) onExtraListElement941() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement941() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement941()
}

func (c *current) onExtraListElement948() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonExtraListElement948() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement948()
}

func (c *current) onExtraListElement951(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonExtraListElement951() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement951(stack["depth"])
}

func (c *current) onExtraListElement945(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListElementPrefix(types.Arabic)
	case 2:
		return types.NewOrderedListElementPrefix(types.LowerAlpha)
	case 3:
		return types.NewOrderedListElementPrefix(types.LowerRoman)
	case 4:
		return types.NewOrderedListElementPrefix(types.UpperAlpha)
	default:
		return types.NewOrderedListElementPrefix(types.UpperRoman)
	}

}

func (p *parser) callonExtraListElement945() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement945(stack["depth"])
}

func (c *current) onExtraListElement952() (interface{}, error) {
	// numbering style: "1.", etc.
	return types.NewOrderedListElementPrefix(types.Arabic)

}

func (p *parser) callonExtraListElement952() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement952()
}

func (c *current) onExtraListElement957() (interface{}, error) {
	// numbering style: "a.", etc.
	return types.NewOrderedListElementPrefix(types.LowerAlpha)

}

func (p *parser) callonExtraListElement957() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement957()
}

func (c *current) onExtraListElement961() (interface{}, error) {
	// numbering style: "A.", etc.
	return types.NewOrderedListElementPrefix(types.UpperAlpha)

}

func (p *parser) callonExtraListElement961() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement961()
}

func (c *current) onExtraListElement965() (interface{}, error) {
	// numbering style: "i)", etc.
	return types.NewOrderedListElementPrefix(types.LowerRoman)

}

func (p *parser) callonExtraListElement965() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement965()
}

func (c *current) onExtraListElement970() (interface{}, error) {
	// numbering style: "I)", etc.
	return types.NewOrderedListElementPrefix(types.UpperRoman)

}

func (p *parser) callonExtraListElement970() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement970()
}

func (c *current) onExtraListElement975(prefix interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement975() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement975(stack["prefix"])
}

func (c *current) onExtraListElement938(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonExtraListElement938() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement938(stack["prefix"])
}

func (c *current) onExtraListElement982() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement982() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement982()
}

func (c *current) onExtraListElement989() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonExtraListElement989() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement989()
}

func (c *current) onExtraListElement992(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonExtraListElement992() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement992(stack["depth"])
}

func (c *current) onExtraListElement986(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListElementPrefix(types.OneAsterisk)
	case 2:
		return types.NewUnorderedListElementPrefix(types.TwoAsterisks)
	case 3:
		return types.NewUnorderedListElementPrefix(types.ThreeAsterisks)
	case 4:
		return types.NewUnorderedListElementPrefix(types.FourAsterisks)
	default:
		return types.NewUnorderedListElementPrefix(types.FiveAsterisks)
	}

}

func (p *parser) callonExtraListElement986() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement986(stack["depth"])
}

func (c *current) onExtraListElement994() (interface{}, error) {
	return types.NewUnorderedListElementPrefix(types.Dash)

}

func (p *parser) callonExtraListElement994() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement994()
}

func (c *current) onExtraListElement996(prefix interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement996() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement996(stack["prefix"])
}

func (c *current) onExtraListElement979(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonExtraListElement979() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement979(stack["prefix"])
}

func (c *current) onExtraListElement1004() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonExtraListElement1004() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1004()
}

func (c *current) onExtraListElement1008(ref interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1008() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1008(stack["ref"])
}

func (c *current) onExtraListElement1000(ref interface{}) (interface{}, error) {
	return ref, nil

}

func (p *parser) callonExtraListElement1000() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1000(stack["ref"])
}

func (c *current) onExtraListElement1020() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement1020() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1020()
}

func (c *current) onExtraListElement1023(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonExtraListElement1023() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1023(stack["separator"])
}

func (c *current) onExtraListElement1017(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonExtraListElement1017() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1017(stack["separator"])
}

func (c *current) onExtraListElement1026() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1026() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1026()
}

func (c *current) onExtraListElement1013() (interface{}, error) {
	return types.NewRawLine(strings.TrimSpace(string(c.text)))

}

func (p *parser) callonExtraListElement1013() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1013()
}

func (c *current) onExtraListElement1037() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement1037() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1037()
}

func (c *current) onExtraListElement1040(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonExtraListElement1040() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1040(stack["separator"])
}

func (c *current) onExtraListElement1034(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonExtraListElement1034() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1034(stack["separator"])
}

func (c *current) onExtraListElement1051() (interface{}, error) {
	// sequence of 4 "/" chars or more
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1051() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1051()
}

func (c *current) onExtraListElement1057() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1057() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1057()
}

func (c *current) onExtraListElement1060() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1060() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1060()
}

func (c *current) onExtraListElement1048(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Comment, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonExtraListElement1048() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1048(stack["delimiter"])
}

func (c *current) onExtraListElement1070() (interface{}, error) {
	// sequence of 4 "=" chars or more
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1070() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1070()
}

func (c *current) onExtraListElement1076() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1076() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1076()
}

func (c *current) onExtraListElement1079() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1079() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1079()
}

func (c *current) onExtraListElement1067(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Example, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonExtraListElement1067() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1067(stack["delimiter"])
}

func (c *current) onExtraListElement1090() (interface{}, error) {
	// exclude ` to avoid matching fenced blocks with more than 3 "`" delimter chars
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1090() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1090()
}

func (c *current) onExtraListElement1094() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1094() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1094()
}

func (c *current) onExtraListElement1097() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1097() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1097()
}

func (c *current) onExtraListElement1086(language interface{}) (interface{}, error) {
	return types.NewMarkdownCodeBlockDelimiter(language.(string), string(c.text))
}

func (p *parser) callonExtraListElement1086() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1086(stack["language"])
}

func (c *current) onExtraListElement1107() (interface{}, error) {
	// sequence of 3 "`" chars or more
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1107() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1107()
}

func (c *current) onExtraListElement1113() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1113() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1113()
}

func (c *current) onExtraListElement1116() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1116()
}

func (c *current) onExtraListElement1104(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Fenced, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonExtraListElement1104() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1104(stack["delimiter"])
}

func (c *current) onExtraListElement1126() (interface{}, error) {
	// sequence of 4 "-" chars or more
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1126() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1126()
}

func (c *current) onExtraListElement1132() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1132() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1132()
}

func (c *current) onExtraListElement1135() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1135() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1135()
}

func (c *current) onExtraListElement1123(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Listing, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonExtraListElement1123() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1123(stack["delimiter"])
}

func (c *current) onExtraListElement1145() (interface{}, error) {
	// sequence of 4 "." chars or more
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1145() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1145()
}

func (c *current) onExtraListElement1151() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1151() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1151()
}

func (c *current) onExtraListElement1154() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1154() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1154()
}

func (c *current) onExtraListElement1142(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Listing, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonExtraListElement1142() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1142(stack["delimiter"])
}

func (c *current) onExtraListElement1164() (interface{}, error) {
	// sequence of 4 "+" chars or more
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1164() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1164()
}

func (c *current) onExtraListElement1170() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1170() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1170()
}

func (c *current) onExtraListElement1173() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1173() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1173()
}

func (c *current) onExtraListElement1161(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Passthrough, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonExtraListElement1161() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1161(stack["delimiter"])
}

func (c *current) onExtraListElement1183() (interface{}, error) {
	// sequence of 4 "_" chars or more
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1183() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1183()
}

func (c *current) onExtraListElement1189() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1189() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1189()
}

func (c *current) onExtraListElement1192() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1192() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1192()
}

func (c *current) onExtraListElement1180(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Quote, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonExtraListElement1180() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1180(stack["delimiter"])
}

func (c *current) onExtraListElement1202() (interface{}, error) {
	// sequence of 4 "*" chars or more
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1202() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1202()
}

func (c *current) onExtraListElement1208() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1208() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1208()
}

func (c *current) onExtraListElement1211() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1211() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1211()
}

func (c *current) onExtraListElement1199(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Sidebar, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonExtraListElement1199() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1199(stack["delimiter"])
}

func (c *current) onExtraListElement1042(delimiter interface{}) (interface{}, error) {
	return delimiter, nil

}

func (p *parser) callonExtraListElement1042() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1042(stack["delimiter"])
}

func (c *current) onExtraListElement1219() (interface{}, error) {
	return strings.TrimSpace(string(c.text)), nil

}

func (p *parser) callonExtraListElement1219() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1219()
}

func (c *current) onExtraListElement1223() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1223() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1223()
}

func (c *current) onExtraListElement907(content interface{}) (interface{}, error) {
	// do not retain the EOL chars
	return types.NewRawLine(content.(string))

}

func (p *parser) callonExtraListElement907() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement907(stack["content"])
}

func (c *current) onExtraListElement856(content interface{}) (interface{}, error) {
	if content == nil {
		return nil, nil
	}
	return types.NewParagraph(content)

}

func (p *parser) callonExtraListElement856() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement856(stack["content"])
}

func (c *current) onExtraListElement1232() (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1232() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1232()
}

func (c *current) onExtraListElement1236() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonExtraListElement1236() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1236()
}

func (c *current) onExtraListElement1240() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1240() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1240()
}

func (c *current) onExtraListElement1230(content interface{}) (interface{}, error) {
	return types.NewParagraph(content)

}

func (p *parser) callonExtraListElement1230() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1230(stack["content"])
}

func (c *current) onExtraListElement822(term, separator, description interface{}) (interface{}, error) {
	return types.NewLabeledListElement(len(separator.(string))-1, term, description)

}

func (p *parser) callonExtraListElement822() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement822(stack["term"], stack["separator"], stack["description"])
}

func (c *current) onExtraListElement816(attributes, element interface{}) (interface{}, error) {
	return append(attributes.([]interface{}), element), nil

}

func (p *parser) callonExtraListElement816() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement816(stack["attributes"], stack["element"])
}

func (c *current) onExtraListElement1253() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1253() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1253()
}

func (c *current) onExtraListElement1257() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1257() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1257()
}

func (c *current) onExtraListElement1247(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))

}

func (p *parser) callonExtraListElement1247() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1247(stack["content"])
}

func (c *current) onExtraListElement1273() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1273() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1273()
}

func (c *current) onExtraListElement1276() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1276() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1276()
}

func (c *current) onExtraListElement1267() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonExtraListElement1267() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1267()
}

func (c *current) onExtraListElement1295() (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1295() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1295()
}

func (c *current) onExtraListElement1293() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1293() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1293()
}

func (c *current) onExtraListElement1300(content interface{}) (bool, error) {
	return len(strings.TrimSpace(string(c.text))) > 0, nil

}

func (p *parser) callonExtraListElement1300() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1300(stack["content"])
}

func (c *current) onExtraListElement1302() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1302() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1302()
}

func (c *current) onExtraListElement1290(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonExtraListElement1290() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1290(stack["content"])
}

func (c *current) onExtraListElement1318() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1318() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1318()
}

func (c *current) onExtraListElement1322() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1322() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1322()
}

func (c *current) onExtraListElement1312(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))

}

func (p *parser) callonExtraListElement1312() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1312(stack["content"])
}

func (c *current) onExtraListElement1332() (interface{}, error) {
	return strings.TrimRight(string(c.text), " \t"), nil // trim spaces and tabs

}

func (p *parser) callonExtraListElement1332() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1332()
}

func (c *current) onExtraListElement1335(content interface{}) (bool, error) {
	return len(strings.TrimSpace(content.(string))) > 0, nil

}

func (p *parser) callonExtraListElement1335() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1335(stack["content"])
}

func (c *current) onExtraListElement1337() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1337() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1337()
}

func (c *current) onExtraListElement1329(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonExtraListElement1329() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1329(stack["content"])
}

func (c *current) onExtraListElement1287(firstLine, otherLines interface{}) (interface{}, error) {

	return types.NewLiteralParagraph(types.LiteralBlockWithSpacesOnFirstLine, append([]interface{}{firstLine}, otherLines.([]interface{})...))

}

func (p *parser) callonExtraListElement1287() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1287(stack["firstLine"], stack["otherLines"])
}

func (c *current) onExtraListElement1264(attributes, element interface{}) (interface{}, error) {
	if e, ok := element.(types.WithAttributes); ok {
		for _, a := range attributes.([]interface{}) {
			if a, ok := a.(types.Attributes); ok {
				e.AddAttributes(a)
			}
		}
	}
	// implicit attachment to list element
	// by wrapping into a ListElementContinuation
	return types.NewListElementContinuation(0, element)

}

func (p *parser) callonExtraListElement1264() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1264(stack["attributes"], stack["element"])
}

func (c *current) onExtraListElement1354() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1354() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1354()
}

func (c *current) onExtraListElement1358() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1358() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1358()
}

func (c *current) onExtraListElement1348(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))

}

func (p *parser) callonExtraListElement1348() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1348(stack["content"])
}

func (c *current) onExtraListElement1347(content interface{}) (interface{}, error) {
	return nil, nil // taking a shortcut to ignore commented out content and avoid having empty paragraphs

}

func (p *parser) callonExtraListElement1347() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1347(stack["content"])
}

func (c *current) onExtraListElement1374() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1374() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1374()
}

func (c *current) onExtraListElement1377() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1377() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1377()
}

func (c *current) onExtraListElement1368() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonExtraListElement1368() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1368()
}

func (c *current) onExtraListElement1388() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1388() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1388()
}

func (c *current) onExtraListElement1390() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1390() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1390()
}

func (c *current) onExtraListElement1399() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1399() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1399()
}

func (c *current) onExtraListElement1406() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonExtraListElement1406() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1406()
}

func (c *current) onExtraListElement1409(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonExtraListElement1409() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1409(stack["depth"])
}

func (c *current) onExtraListElement1403(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListElementPrefix(types.Arabic)
	case 2:
		return types.NewOrderedListElementPrefix(types.LowerAlpha)
	case 3:
		return types.NewOrderedListElementPrefix(types.LowerRoman)
	case 4:
		return types.NewOrderedListElementPrefix(types.UpperAlpha)
	default:
		return types.NewOrderedListElementPrefix(types.UpperRoman)
	}

}

func (p *parser) callonExtraListElement1403() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1403(stack["depth"])
}

func (c *current) onExtraListElement1410() (interface{}, error) {
	// numbering style: "1.", etc.
	return types.NewOrderedListElementPrefix(types.Arabic)

}

func (p *parser) callonExtraListElement1410() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1410()
}

func (c *current) onExtraListElement1415() (interface{}, error) {
	// numbering style: "a.", etc.
	return types.NewOrderedListElementPrefix(types.LowerAlpha)

}

func (p *parser) callonExtraListElement1415() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1415()
}

func (c *current) onExtraListElement1419() (interface{}, error) {
	// numbering style: "A.", etc.
	return types.NewOrderedListElementPrefix(types.UpperAlpha)

}

func (p *parser) callonExtraListElement1419() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1419()
}

func (c *current) onExtraListElement1423() (interface{}, error) {
	// numbering style: "i)", etc.
	return types.NewOrderedListElementPrefix(types.LowerRoman)

}

func (p *parser) callonExtraListElement1423() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1423()
}

func (c *current) onExtraListElement1428() (interface{}, error) {
	// numbering style: "I)", etc.
	return types.NewOrderedListElementPrefix(types.UpperRoman)

}

func (p *parser) callonExtraListElement1428() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1428()
}

func (c *current) onExtraListElement1433(prefix interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1433() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1433(stack["prefix"])
}

func (c *current) onExtraListElement1396(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonExtraListElement1396() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1396(stack["prefix"])
}

func (c *current) onExtraListElement1440() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1440() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1440()
}

func (c *current) onExtraListElement1447() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonExtraListElement1447() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1447()
}

func (c *current) onExtraListElement1450(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonExtraListElement1450() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1450(stack["depth"])
}

func (c *current) onExtraListElement1444(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListElementPrefix(types.OneAsterisk)
	case 2:
		return types.NewUnorderedListElementPrefix(types.TwoAsterisks)
	case 3:
		return types.NewUnorderedListElementPrefix(types.ThreeAsterisks)
	case 4:
		return types.NewUnorderedListElementPrefix(types.FourAsterisks)
	default:
		return types.NewUnorderedListElementPrefix(types.FiveAsterisks)
	}

}

func (p *parser) callonExtraListElement1444() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1444(stack["depth"])
}

func (c *current) onExtraListElement1452() (interface{}, error) {
	return types.NewUnorderedListElementPrefix(types.Dash)

}

func (p *parser) callonExtraListElement1452() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1452()
}

func (c *current) onExtraListElement1454(prefix interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1454() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1454(stack["prefix"])
}

func (c *current) onExtraListElement1437(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonExtraListElement1437() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1437(stack["prefix"])
}

func (c *current) onExtraListElement1462() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonExtraListElement1462() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1462()
}

func (c *current) onExtraListElement1466(ref interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1466() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1466(stack["ref"])
}

func (c *current) onExtraListElement1458(ref interface{}) (interface{}, error) {
	return ref, nil

}

func (p *parser) callonExtraListElement1458() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1458(stack["ref"])
}

func (c *current) onExtraListElement1478() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement1478() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1478()
}

func (c *current) onExtraListElement1481(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonExtraListElement1481() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1481(stack["separator"])
}

func (c *current) onExtraListElement1475(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonExtraListElement1475() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1475(stack["separator"])
}

func (c *current) onExtraListElement1484() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1484() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1484()
}

func (c *current) onExtraListElement1471() (interface{}, error) {
	return types.NewRawLine(strings.TrimSpace(string(c.text)))

}

func (p *parser) callonExtraListElement1471() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1471()
}

func (c *current) onExtraListElement1495() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonExtraListElement1495() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1495()
}

func (c *current) onExtraListElement1498(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonExtraListElement1498() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1498(stack["separator"])
}

func (c *current) onExtraListElement1492(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonExtraListElement1492() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1492(stack["separator"])
}

func (c *current) onExtraListElement1509() (interface{}, error) {
	// sequence of 4 "/" chars or more
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1509() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1509()
}

func (c *current) onExtraListElement1515() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1515() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1515()
}

func (c *current) onExtraListElement1518() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1518() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1518()
}

func (c *current) onExtraListElement1506(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Comment, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonExtraListElement1506() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1506(stack["delimiter"])
}

func (c *current) onExtraListElement1528() (interface{}, error) {
	// sequence of 4 "=" chars or more
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1528() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1528()
}

func (c *current) onExtraListElement1534() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1534() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1534()
}

func (c *current) onExtraListElement1537() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1537() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1537()
}

func (c *current) onExtraListElement1525(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Example, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonExtraListElement1525() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1525(stack["delimiter"])
}

func (c *current) onExtraListElement1548() (interface{}, error) {
	// exclude ` to avoid matching fenced blocks with more than 3 "`" delimter chars
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1548() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1548()
}

func (c *current) onExtraListElement1552() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1552() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1552()
}

func (c *current) onExtraListElement1555() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1555() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1555()
}

func (c *current) onExtraListElement1544(language interface{}) (interface{}, error) {
	return types.NewMarkdownCodeBlockDelimiter(language.(string), string(c.text))
}

func (p *parser) callonExtraListElement1544() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1544(stack["language"])
}

func (c *current) onExtraListElement1565() (interface{}, error) {
	// sequence of 3 "`" chars or more
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1565() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1565()
}

func (c *current) onExtraListElement1571() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1571() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1571()
}

func (c *current) onExtraListElement1574() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1574() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1574()
}

func (c *current) onExtraListElement1562(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Fenced, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonExtraListElement1562() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1562(stack["delimiter"])
}

func (c *current) onExtraListElement1584() (interface{}, error) {
	// sequence of 4 "-" chars or more
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1584() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1584()
}

func (c *current) onExtraListElement1590() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1590() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1590()
}

func (c *current) onExtraListElement1593() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1593() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1593()
}

func (c *current) onExtraListElement1581(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Listing, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonExtraListElement1581() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1581(stack["delimiter"])
}

func (c *current) onExtraListElement1603() (interface{}, error) {
	// sequence of 4 "." chars or more
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1603() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1603()
}

func (c *current) onExtraListElement1609() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1609() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1609()
}

func (c *current) onExtraListElement1612() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1612() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1612()
}

func (c *current) onExtraListElement1600(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Listing, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonExtraListElement1600() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1600(stack["delimiter"])
}

func (c *current) onExtraListElement1622() (interface{}, error) {
	// sequence of 4 "+" chars or more
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1622() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1622()
}

func (c *current) onExtraListElement1628() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1628() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1628()
}

func (c *current) onExtraListElement1631() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1631() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1631()
}

func (c *current) onExtraListElement1619(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Passthrough, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonExtraListElement1619() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1619(stack["delimiter"])
}

func (c *current) onExtraListElement1641() (interface{}, error) {
	// sequence of 4 "_" chars or more
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1641() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1641()
}

func (c *current) onExtraListElement1647() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1647() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1647()
}

func (c *current) onExtraListElement1650() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1650() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1650()
}

func (c *current) onExtraListElement1638(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Quote, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonExtraListElement1638() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1638(stack["delimiter"])
}

func (c *current) onExtraListElement1660() (interface{}, error) {
	// sequence of 4 "*" chars or more
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1660() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1660()
}

func (c *current) onExtraListElement1666() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonExtraListElement1666() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1666()
}

func (c *current) onExtraListElement1669() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1669() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1669()
}

func (c *current) onExtraListElement1657(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Sidebar, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonExtraListElement1657() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1657(stack["delimiter"])
}

func (c *current) onExtraListElement1500(delimiter interface{}) (interface{}, error) {
	return delimiter, nil

}

func (p *parser) callonExtraListElement1500() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1500(stack["delimiter"])
}

func (c *current) onExtraListElement1677() (interface{}, error) {
	return strings.TrimSpace(string(c.text)), nil

}

func (p *parser) callonExtraListElement1677() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1677()
}

func (c *current) onExtraListElement1681() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonExtraListElement1681() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1681()
}

func (c *current) onExtraListElement1365(content interface{}) (interface{}, error) {
	// do not retain the EOL chars
	return types.NewRawLine(content.(string))

}

func (p *parser) callonExtraListElement1365() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1365(stack["content"])
}

func (c *current) onExtraListElement1344(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonExtraListElement1344() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1344(stack["element"])
}

func (c *current) onExtraListElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonExtraListElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExtraListElement1(stack["element"])
}

func (c *current) onListElementContinuation7() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuation7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuation7()
}

func (c *current) onListElementContinuation9() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuation9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuation9()
}

func (c *current) onListElementContinuation16() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuation16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuation16()
}

func (c *current) onListElementContinuation18(offset interface{}) (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuation18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuation18(stack["offset"])
}

func (c *current) onListElementContinuation1(offset, element interface{}) (interface{}, error) {
	return types.NewListElementContinuation(len(offset.([]interface{})), element)

}

func (p *parser) callonListElementContinuation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuation1(stack["offset"], stack["element"])
}

func (c *current) onListElementContinuationElement14() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement14()
}

func (c *current) onListElementContinuationElement21() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonListElementContinuationElement21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement21()
}

func (c *current) onListElementContinuationElement24(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonListElementContinuationElement24() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement24(stack["depth"])
}

func (c *current) onListElementContinuationElement18(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListElementPrefix(types.Arabic)
	case 2:
		return types.NewOrderedListElementPrefix(types.LowerAlpha)
	case 3:
		return types.NewOrderedListElementPrefix(types.LowerRoman)
	case 4:
		return types.NewOrderedListElementPrefix(types.UpperAlpha)
	default:
		return types.NewOrderedListElementPrefix(types.UpperRoman)
	}

}

func (p *parser) callonListElementContinuationElement18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement18(stack["depth"])
}

func (c *current) onListElementContinuationElement25() (interface{}, error) {
	// numbering style: "1.", etc.
	return types.NewOrderedListElementPrefix(types.Arabic)

}

func (p *parser) callonListElementContinuationElement25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement25()
}

func (c *current) onListElementContinuationElement30() (interface{}, error) {
	// numbering style: "a.", etc.
	return types.NewOrderedListElementPrefix(types.LowerAlpha)

}

func (p *parser) callonListElementContinuationElement30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement30()
}

func (c *current) onListElementContinuationElement34() (interface{}, error) {
	// numbering style: "A.", etc.
	return types.NewOrderedListElementPrefix(types.UpperAlpha)

}

func (p *parser) callonListElementContinuationElement34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement34()
}

func (c *current) onListElementContinuationElement38() (interface{}, error) {
	// numbering style: "i)", etc.
	return types.NewOrderedListElementPrefix(types.LowerRoman)

}

func (p *parser) callonListElementContinuationElement38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement38()
}

func (c *current) onListElementContinuationElement43() (interface{}, error) {
	// numbering style: "I)", etc.
	return types.NewOrderedListElementPrefix(types.UpperRoman)

}

func (p *parser) callonListElementContinuationElement43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement43()
}

func (c *current) onListElementContinuationElement48(prefix interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement48(stack["prefix"])
}

func (c *current) onListElementContinuationElement11(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonListElementContinuationElement11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement11(stack["prefix"])
}

func (c *current) onListElementContinuationElement55() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonListElementContinuationElement55() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement55()
}

func (c *current) onListElementContinuationElement59() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement59() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement59()
}

func (c *current) onListElementContinuationElement52(rawline interface{}) (interface{}, error) {
	return types.NewParagraph(rawline)

}

func (p *parser) callonListElementContinuationElement52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement52(stack["rawline"])
}

func (c *current) onListElementContinuationElement8(prefix, content interface{}) (interface{}, error) {
	return types.NewOrderedListElement(prefix.(types.OrderedListElementPrefix), content)

}

func (p *parser) callonListElementContinuationElement8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement8(stack["prefix"], stack["content"])
}

func (c *current) onListElementContinuationElement72() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement72()
}

func (c *current) onListElementContinuationElement79() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonListElementContinuationElement79() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement79()
}

func (c *current) onListElementContinuationElement82(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonListElementContinuationElement82() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement82(stack["depth"])
}

func (c *current) onListElementContinuationElement76(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListElementPrefix(types.OneAsterisk)
	case 2:
		return types.NewUnorderedListElementPrefix(types.TwoAsterisks)
	case 3:
		return types.NewUnorderedListElementPrefix(types.ThreeAsterisks)
	case 4:
		return types.NewUnorderedListElementPrefix(types.FourAsterisks)
	default:
		return types.NewUnorderedListElementPrefix(types.FiveAsterisks)
	}

}

func (p *parser) callonListElementContinuationElement76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement76(stack["depth"])
}

func (c *current) onListElementContinuationElement84() (interface{}, error) {
	return types.NewUnorderedListElementPrefix(types.Dash)

}

func (p *parser) callonListElementContinuationElement84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement84()
}

func (c *current) onListElementContinuationElement86(prefix interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement86() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement86(stack["prefix"])
}

func (c *current) onListElementContinuationElement69(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonListElementContinuationElement69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement69(stack["prefix"])
}

func (c *current) onListElementContinuationElement97() (interface{}, error) {
	return types.Unchecked, nil
}

func (p *parser) callonListElementContinuationElement97() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement97()
}

func (c *current) onListElementContinuationElement99() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonListElementContinuationElement99() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement99()
}

func (c *current) onListElementContinuationElement101() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonListElementContinuationElement101() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement101()
}

func (c *current) onListElementContinuationElement103(style interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement103() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement103(stack["style"])
}

func (c *current) onListElementContinuationElement91(style interface{}) (interface{}, error) {
	return style, nil

}

func (p *parser) callonListElementContinuationElement91() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement91(stack["style"])
}

func (c *current) onListElementContinuationElement110() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonListElementContinuationElement110() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement110()
}

func (c *current) onListElementContinuationElement114() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement114() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement114()
}

func (c *current) onListElementContinuationElement107(rawline interface{}) (interface{}, error) {
	return types.NewParagraph(rawline)

}

func (p *parser) callonListElementContinuationElement107() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement107(stack["rawline"])
}

func (c *current) onListElementContinuationElement66(prefix, checkstyle, content interface{}) (interface{}, error) {
	return types.NewUnorderedListElement(prefix.(types.UnorderedListElementPrefix), checkstyle, content)

}

func (p *parser) callonListElementContinuationElement66() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement66(stack["prefix"], stack["checkstyle"], stack["content"])
}

func (c *current) onListElementContinuationElement128() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonListElementContinuationElement128() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement128()
}

func (c *current) onListElementContinuationElement132(ref interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement132() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement132(stack["ref"])
}

func (c *current) onListElementContinuationElement124(ref interface{}) (interface{}, error) {
	return ref, nil

}

func (p *parser) callonListElementContinuationElement124() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement124(stack["ref"])
}

func (c *current) onListElementContinuationElement139() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement139() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement139()
}

func (c *current) onListElementContinuationElement143() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement143() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement143()
}

func (c *current) onListElementContinuationElement136(rawline interface{}) (interface{}, error) {
	return types.NewRawLine(rawline.(string))

}

func (p *parser) callonListElementContinuationElement136() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement136(stack["rawline"])
}

func (c *current) onListElementContinuationElement121(ref, description interface{}) (interface{}, error) {
	return types.NewCalloutListElement(ref.(int), description.(types.RawLine))

}

func (p *parser) callonListElementContinuationElement121() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement121(stack["ref"], stack["description"])
}

func (c *current) onListElementContinuationElement160() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement160() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement160()
}

func (c *current) onListElementContinuationElement163(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonListElementContinuationElement163() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement163(stack["separator"])
}

func (c *current) onListElementContinuationElement157(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonListElementContinuationElement157() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement157(stack["separator"])
}

func (c *current) onListElementContinuationElement166() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement166() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement166()
}

func (c *current) onListElementContinuationElement153() (interface{}, error) {
	return types.NewRawLine(strings.TrimSpace(string(c.text)))

}

func (p *parser) callonListElementContinuationElement153() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement153()
}

func (c *current) onListElementContinuationElement178() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement178() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement178()
}

func (c *current) onListElementContinuationElement181(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonListElementContinuationElement181() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement181(stack["separator"])
}

func (c *current) onListElementContinuationElement175(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonListElementContinuationElement175() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement175(stack["separator"])
}

func (c *current) onListElementContinuationElement187() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement187() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement187()
}

func (c *current) onListElementContinuationElement190() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement190() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement190()
}

func (c *current) onListElementContinuationElement204() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement204() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement204()
}

func (c *current) onListElementContinuationElement207() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement207() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement207()
}

func (c *current) onListElementContinuationElement198() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonListElementContinuationElement198() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement198()
}

func (c *current) onListElementContinuationElement224() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement224() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement224()
}

func (c *current) onListElementContinuationElement228() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement228() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement228()
}

func (c *current) onListElementContinuationElement218(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))

}

func (p *parser) callonListElementContinuationElement218() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement218(stack["content"])
}

func (c *current) onListElementContinuationElement217(content interface{}) (interface{}, error) {
	return nil, nil // taking a shortcut to ignore commented out content and avoid having empty paragraphs

}

func (p *parser) callonListElementContinuationElement217() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement217(stack["content"])
}

func (c *current) onListElementContinuationElement244() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement244() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement244()
}

func (c *current) onListElementContinuationElement247() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement247() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement247()
}

func (c *current) onListElementContinuationElement238() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonListElementContinuationElement238() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement238()
}

func (c *current) onListElementContinuationElement258() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement258() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement258()
}

func (c *current) onListElementContinuationElement260() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement260() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement260()
}

func (c *current) onListElementContinuationElement269() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement269() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement269()
}

func (c *current) onListElementContinuationElement276() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonListElementContinuationElement276() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement276()
}

func (c *current) onListElementContinuationElement279(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonListElementContinuationElement279() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement279(stack["depth"])
}

func (c *current) onListElementContinuationElement273(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListElementPrefix(types.Arabic)
	case 2:
		return types.NewOrderedListElementPrefix(types.LowerAlpha)
	case 3:
		return types.NewOrderedListElementPrefix(types.LowerRoman)
	case 4:
		return types.NewOrderedListElementPrefix(types.UpperAlpha)
	default:
		return types.NewOrderedListElementPrefix(types.UpperRoman)
	}

}

func (p *parser) callonListElementContinuationElement273() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement273(stack["depth"])
}

func (c *current) onListElementContinuationElement280() (interface{}, error) {
	// numbering style: "1.", etc.
	return types.NewOrderedListElementPrefix(types.Arabic)

}

func (p *parser) callonListElementContinuationElement280() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement280()
}

func (c *current) onListElementContinuationElement285() (interface{}, error) {
	// numbering style: "a.", etc.
	return types.NewOrderedListElementPrefix(types.LowerAlpha)

}

func (p *parser) callonListElementContinuationElement285() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement285()
}

func (c *current) onListElementContinuationElement289() (interface{}, error) {
	// numbering style: "A.", etc.
	return types.NewOrderedListElementPrefix(types.UpperAlpha)

}

func (p *parser) callonListElementContinuationElement289() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement289()
}

func (c *current) onListElementContinuationElement293() (interface{}, error) {
	// numbering style: "i)", etc.
	return types.NewOrderedListElementPrefix(types.LowerRoman)

}

func (p *parser) callonListElementContinuationElement293() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement293()
}

func (c *current) onListElementContinuationElement298() (interface{}, error) {
	// numbering style: "I)", etc.
	return types.NewOrderedListElementPrefix(types.UpperRoman)

}

func (p *parser) callonListElementContinuationElement298() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement298()
}

func (c *current) onListElementContinuationElement303(prefix interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement303() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement303(stack["prefix"])
}

func (c *current) onListElementContinuationElement266(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonListElementContinuationElement266() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement266(stack["prefix"])
}

func (c *current) onListElementContinuationElement310() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement310() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement310()
}

func (c *current) onListElementContinuationElement317() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonListElementContinuationElement317() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement317()
}

func (c *current) onListElementContinuationElement320(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonListElementContinuationElement320() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement320(stack["depth"])
}

func (c *current) onListElementContinuationElement314(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListElementPrefix(types.OneAsterisk)
	case 2:
		return types.NewUnorderedListElementPrefix(types.TwoAsterisks)
	case 3:
		return types.NewUnorderedListElementPrefix(types.ThreeAsterisks)
	case 4:
		return types.NewUnorderedListElementPrefix(types.FourAsterisks)
	default:
		return types.NewUnorderedListElementPrefix(types.FiveAsterisks)
	}

}

func (p *parser) callonListElementContinuationElement314() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement314(stack["depth"])
}

func (c *current) onListElementContinuationElement322() (interface{}, error) {
	return types.NewUnorderedListElementPrefix(types.Dash)

}

func (p *parser) callonListElementContinuationElement322() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement322()
}

func (c *current) onListElementContinuationElement324(prefix interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement324() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement324(stack["prefix"])
}

func (c *current) onListElementContinuationElement307(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonListElementContinuationElement307() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement307(stack["prefix"])
}

func (c *current) onListElementContinuationElement332() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonListElementContinuationElement332() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement332()
}

func (c *current) onListElementContinuationElement336(ref interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement336() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement336(stack["ref"])
}

func (c *current) onListElementContinuationElement328(ref interface{}) (interface{}, error) {
	return ref, nil

}

func (p *parser) callonListElementContinuationElement328() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement328(stack["ref"])
}

func (c *current) onListElementContinuationElement348() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement348() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement348()
}

func (c *current) onListElementContinuationElement351(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonListElementContinuationElement351() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement351(stack["separator"])
}

func (c *current) onListElementContinuationElement345(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonListElementContinuationElement345() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement345(stack["separator"])
}

func (c *current) onListElementContinuationElement354() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement354() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement354()
}

func (c *current) onListElementContinuationElement341() (interface{}, error) {
	return types.NewRawLine(strings.TrimSpace(string(c.text)))

}

func (p *parser) callonListElementContinuationElement341() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement341()
}

func (c *current) onListElementContinuationElement365() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement365() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement365()
}

func (c *current) onListElementContinuationElement368(separator interface{}) (bool, error) {

	// use a predicate to make sure that separator is `::`, `:::` or `::::`
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonListElementContinuationElement368() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement368(stack["separator"])
}

func (c *current) onListElementContinuationElement362(separator interface{}) (interface{}, error) {
	return separator, nil

}

func (p *parser) callonListElementContinuationElement362() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement362(stack["separator"])
}

func (c *current) onListElementContinuationElement379() (interface{}, error) {
	// sequence of 4 "/" chars or more
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement379() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement379()
}

func (c *current) onListElementContinuationElement385() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement385() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement385()
}

func (c *current) onListElementContinuationElement388() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement388() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement388()
}

func (c *current) onListElementContinuationElement376(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Comment, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListElementContinuationElement376() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement376(stack["delimiter"])
}

func (c *current) onListElementContinuationElement398() (interface{}, error) {
	// sequence of 4 "=" chars or more
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement398() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement398()
}

func (c *current) onListElementContinuationElement404() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement404() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement404()
}

func (c *current) onListElementContinuationElement407() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement407() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement407()
}

func (c *current) onListElementContinuationElement395(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Example, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListElementContinuationElement395() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement395(stack["delimiter"])
}

func (c *current) onListElementContinuationElement418() (interface{}, error) {
	// exclude ` to avoid matching fenced blocks with more than 3 "`" delimter chars
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement418() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement418()
}

func (c *current) onListElementContinuationElement422() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement422() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement422()
}

func (c *current) onListElementContinuationElement425() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement425() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement425()
}

func (c *current) onListElementContinuationElement414(language interface{}) (interface{}, error) {
	return types.NewMarkdownCodeBlockDelimiter(language.(string), string(c.text))
}

func (p *parser) callonListElementContinuationElement414() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement414(stack["language"])
}

func (c *current) onListElementContinuationElement435() (interface{}, error) {
	// sequence of 3 "`" chars or more
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement435() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement435()
}

func (c *current) onListElementContinuationElement441() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement441() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement441()
}

func (c *current) onListElementContinuationElement444() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement444() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement444()
}

func (c *current) onListElementContinuationElement432(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Fenced, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListElementContinuationElement432() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement432(stack["delimiter"])
}

func (c *current) onListElementContinuationElement454() (interface{}, error) {
	// sequence of 4 "-" chars or more
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement454() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement454()
}

func (c *current) onListElementContinuationElement460() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement460() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement460()
}

func (c *current) onListElementContinuationElement463() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement463() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement463()
}

func (c *current) onListElementContinuationElement451(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Listing, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListElementContinuationElement451() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement451(stack["delimiter"])
}

func (c *current) onListElementContinuationElement473() (interface{}, error) {
	// sequence of 4 "." chars or more
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement473() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement473()
}

func (c *current) onListElementContinuationElement479() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement479() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement479()
}

func (c *current) onListElementContinuationElement482() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement482() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement482()
}

func (c *current) onListElementContinuationElement470(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Listing, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListElementContinuationElement470() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement470(stack["delimiter"])
}

func (c *current) onListElementContinuationElement492() (interface{}, error) {
	// sequence of 4 "+" chars or more
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement492() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement492()
}

func (c *current) onListElementContinuationElement498() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement498() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement498()
}

func (c *current) onListElementContinuationElement501() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement501() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement501()
}

func (c *current) onListElementContinuationElement489(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Passthrough, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListElementContinuationElement489() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement489(stack["delimiter"])
}

func (c *current) onListElementContinuationElement511() (interface{}, error) {
	// sequence of 4 "_" chars or more
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement511() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement511()
}

func (c *current) onListElementContinuationElement517() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement517() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement517()
}

func (c *current) onListElementContinuationElement520() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement520() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement520()
}

func (c *current) onListElementContinuationElement508(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Quote, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListElementContinuationElement508() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement508(stack["delimiter"])
}

func (c *current) onListElementContinuationElement530() (interface{}, error) {
	// sequence of 4 "*" chars or more
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement530() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement530()
}

func (c *current) onListElementContinuationElement536() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement536() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement536()
}

func (c *current) onListElementContinuationElement539() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement539() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement539()
}

func (c *current) onListElementContinuationElement527(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Sidebar, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListElementContinuationElement527() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement527(stack["delimiter"])
}

func (c *current) onListElementContinuationElement370(delimiter interface{}) (interface{}, error) {
	return delimiter, nil

}

func (p *parser) callonListElementContinuationElement370() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement370(stack["delimiter"])
}

func (c *current) onListElementContinuationElement547() (interface{}, error) {
	return strings.TrimSpace(string(c.text)), nil

}

func (p *parser) callonListElementContinuationElement547() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement547()
}

func (c *current) onListElementContinuationElement551() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement551() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement551()
}

func (c *current) onListElementContinuationElement235(content interface{}) (interface{}, error) {
	// do not retain the EOL chars
	return types.NewRawLine(content.(string))

}

func (p *parser) callonListElementContinuationElement235() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement235(stack["content"])
}

func (c *current) onListElementContinuationElement184(content interface{}) (interface{}, error) {
	if content == nil {
		return nil, nil
	}
	return types.NewParagraph(content)

}

func (p *parser) callonListElementContinuationElement184() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement184(stack["content"])
}

func (c *current) onListElementContinuationElement560() (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement560() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement560()
}

func (c *current) onListElementContinuationElement564() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonListElementContinuationElement564() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement564()
}

func (c *current) onListElementContinuationElement568() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement568() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement568()
}

func (c *current) onListElementContinuationElement558(content interface{}) (interface{}, error) {
	return types.NewParagraph(content)

}

func (p *parser) callonListElementContinuationElement558() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement558(stack["content"])
}

func (c *current) onListElementContinuationElement150(term, separator, description interface{}) (interface{}, error) {
	return types.NewLabeledListElement(len(separator.(string))-1, term, description)

}

func (p *parser) callonListElementContinuationElement150() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement150(stack["term"], stack["separator"], stack["description"])
}

func (c *current) onListElementContinuationElement586() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement586() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement586()
}

func (c *current) onListElementContinuationElement589() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement589() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement589()
}

func (c *current) onListElementContinuationElement580() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonListElementContinuationElement580() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement580()
}

func (c *current) onListElementContinuationElement601() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement601() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement601()
}

func (c *current) onListElementContinuationElement608() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement608() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement608()
}

func (c *current) onListElementContinuationElement611() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement611() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement611()
}

func (c *current) onListElementContinuationElement597(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string), string(c.text))

}

func (p *parser) callonListElementContinuationElement597() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement597(stack["name"])
}

func (c *current) onListElementContinuationElement622() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement622() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement622()
}

func (c *current) onListElementContinuationElement629() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement629() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement629()
}

func (c *current) onListElementContinuationElement632() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement632() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement632()
}

func (c *current) onListElementContinuationElement618(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string), string(c.text))

}

func (p *parser) callonListElementContinuationElement618() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement618(stack["name"])
}

func (c *current) onListElementContinuationElement644() (interface{}, error) {
	// sequence of 4 "/" chars or more
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement644() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement644()
}

func (c *current) onListElementContinuationElement650() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement650() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement650()
}

func (c *current) onListElementContinuationElement653() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement653() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement653()
}

func (c *current) onListElementContinuationElement641(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Comment, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListElementContinuationElement641() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement641(stack["delimiter"])
}

func (c *current) onListElementContinuationElement669() (interface{}, error) {
	// sequence of 4 "/" chars or more
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement669() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement669()
}

func (c *current) onListElementContinuationElement675() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement675() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement675()
}

func (c *current) onListElementContinuationElement678() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement678() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement678()
}

func (c *current) onListElementContinuationElement666(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Comment, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListElementContinuationElement666() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement666(stack["delimiter"])
}

func (c *current) onListElementContinuationElement694() (interface{}, error) {
	// content is NOT mandatory
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement694() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement694()
}

func (c *current) onListElementContinuationElement698() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement698() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement698()
}

func (c *current) onListElementContinuationElement688(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonListElementContinuationElement688() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement688(stack["content"])
}

func (c *current) onListElementContinuationElement662(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonListElementContinuationElement662() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement662(stack["line"])
}

func (c *current) onListElementContinuationElement710() (interface{}, error) {
	// sequence of 4 "/" chars or more
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement710() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement710()
}

func (c *current) onListElementContinuationElement716() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement716() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement716()
}

func (c *current) onListElementContinuationElement719() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement719() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement719()
}

func (c *current) onListElementContinuationElement707(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Comment, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListElementContinuationElement707() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement707(stack["delimiter"])
}

func (c *current) onListElementContinuationElement639(delimiter, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Comment, content.([]interface{}))

}

func (p *parser) callonListElementContinuationElement639() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement639(stack["delimiter"], stack["content"])
}

func (c *current) onListElementContinuationElement734() (interface{}, error) {
	// sequence of 4 "=" chars or more
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement734() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement734()
}

func (c *current) onListElementContinuationElement740() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement740() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement740()
}

func (c *current) onListElementContinuationElement743() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement743() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement743()
}

func (c *current) onListElementContinuationElement731(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Example, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListElementContinuationElement731() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement731(stack["delimiter"])
}

func (c *current) onListElementContinuationElement750(start interface{}) (bool, error) {
	return c.setBlockDelimiterLength(start.(*types.BlockDelimiter).Length)

}

func (p *parser) callonListElementContinuationElement750() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement750(stack["start"])
}

func (c *current) onListElementContinuationElement762() (interface{}, error) {
	// sequence of 4 "=" chars or more
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement762() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement762()
}

func (c *current) onListElementContinuationElement768() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement768() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement768()
}

func (c *current) onListElementContinuationElement771() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement771() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement771()
}

func (c *current) onListElementContinuationElement759(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Example, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListElementContinuationElement759() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement759(stack["delimiter"])
}

func (c *current) onListElementContinuationElement778(end interface{}) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonListElementContinuationElement778() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement778(stack["end"])
}

func (c *current) onListElementContinuationElement788() (interface{}, error) {
	// content is NOT mandatory
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement788() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement788()
}

func (c *current) onListElementContinuationElement792() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement792() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement792()
}

func (c *current) onListElementContinuationElement782(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonListElementContinuationElement782() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement782(stack["content"])
}

func (c *current) onListElementContinuationElement753(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonListElementContinuationElement753() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement753(stack["line"])
}

func (c *current) onListElementContinuationElement807() (interface{}, error) {
	// sequence of 4 "=" chars or more
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement807() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement807()
}

func (c *current) onListElementContinuationElement813() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement813() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement813()
}

func (c *current) onListElementContinuationElement816() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement816() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement816()
}

func (c *current) onListElementContinuationElement804(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Example, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListElementContinuationElement804() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement804(stack["delimiter"])
}

func (c *current) onListElementContinuationElement823(end interface{}) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonListElementContinuationElement823() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement823(stack["end"])
}

func (c *current) onListElementContinuationElement728(start, content, end interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Example, content.([]interface{}))

}

func (p *parser) callonListElementContinuationElement728() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement728(stack["start"], stack["content"], stack["end"])
}

func (c *current) onListElementContinuationElement833() (interface{}, error) {
	// exclude ` to avoid matching fenced blocks with more than 3 "`" delimter chars
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement833() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement833()
}

func (c *current) onListElementContinuationElement837() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement837() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement837()
}

func (c *current) onListElementContinuationElement840() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement840() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement840()
}

func (c *current) onListElementContinuationElement829(language interface{}) (interface{}, error) {
	return types.NewMarkdownCodeBlockDelimiter(language.(string), string(c.text))
}

func (p *parser) callonListElementContinuationElement829() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement829(stack["language"])
}

func (c *current) onListElementContinuationElement855() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement855() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement855()
}

func (c *current) onListElementContinuationElement858() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement858() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement858()
}

func (c *current) onListElementContinuationElement872() (interface{}, error) {
	// content is NOT mandatory
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement872() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement872()
}

func (c *current) onListElementContinuationElement876() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement876() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement876()
}

func (c *current) onListElementContinuationElement866(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonListElementContinuationElement866() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement866(stack["content"])
}

func (c *current) onListElementContinuationElement849(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonListElementContinuationElement849() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement849(stack["line"])
}

func (c *current) onListElementContinuationElement887() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement887() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement887()
}

func (c *current) onListElementContinuationElement890() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement890() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement890()
}

func (c *current) onListElementContinuationElement826(delimiter, content interface{}) (interface{}, error) {
	// Markdown code with fences is a "listing/source" block in Asciidoc
	b, err := types.NewDelimitedBlock(types.Listing, content.([]interface{}))
	b.AddAttributes(delimiter.(*types.BlockDelimiter).Attributes)
	return b, err

}

func (p *parser) callonListElementContinuationElement826() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement826(stack["delimiter"], stack["content"])
}

func (c *current) onListElementContinuationElement903() (interface{}, error) {
	// sequence of 3 "`" chars or more
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement903() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement903()
}

func (c *current) onListElementContinuationElement909() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement909() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement909()
}

func (c *current) onListElementContinuationElement912() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement912() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement912()
}

func (c *current) onListElementContinuationElement900(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Fenced, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListElementContinuationElement900() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement900(stack["delimiter"])
}

func (c *current) onListElementContinuationElement919(start interface{}) (bool, error) {
	return c.setBlockDelimiterLength(start.(*types.BlockDelimiter).Length)

}

func (p *parser) callonListElementContinuationElement919() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement919(stack["start"])
}

func (c *current) onListElementContinuationElement931() (interface{}, error) {
	// sequence of 3 "`" chars or more
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement931() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement931()
}

func (c *current) onListElementContinuationElement937() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement937() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement937()
}

func (c *current) onListElementContinuationElement940() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement940() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement940()
}

func (c *current) onListElementContinuationElement928(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Fenced, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListElementContinuationElement928() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement928(stack["delimiter"])
}

func (c *current) onListElementContinuationElement947(end interface{}) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonListElementContinuationElement947() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement947(stack["end"])
}

func (c *current) onListElementContinuationElement957() (interface{}, error) {
	// content is NOT mandatory
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement957() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement957()
}

func (c *current) onListElementContinuationElement961() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement961() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement961()
}

func (c *current) onListElementContinuationElement951(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonListElementContinuationElement951() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement951(stack["content"])
}

func (c *current) onListElementContinuationElement922(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonListElementContinuationElement922() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement922(stack["line"])
}

func (c *current) onListElementContinuationElement976() (interface{}, error) {
	// sequence of 3 "`" chars or more
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement976() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement976()
}

func (c *current) onListElementContinuationElement982() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement982() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement982()
}

func (c *current) onListElementContinuationElement985() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement985() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement985()
}

func (c *current) onListElementContinuationElement973(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Fenced, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListElementContinuationElement973() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement973(stack["delimiter"])
}

func (c *current) onListElementContinuationElement992(end interface{}) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonListElementContinuationElement992() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement992(stack["end"])
}

func (c *current) onListElementContinuationElement897(start, content, end interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Fenced, content.([]interface{}))

}

func (p *parser) callonListElementContinuationElement897() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement897(stack["start"], stack["content"], stack["end"])
}

func (c *current) onListElementContinuationElement1001() (interface{}, error) {
	// sequence of 4 "-" chars or more
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1001() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1001()
}

func (c *current) onListElementContinuationElement1007() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1007() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1007()
}

func (c *current) onListElementContinuationElement1010() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1010() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1010()
}

func (c *current) onListElementContinuationElement998(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Listing, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListElementContinuationElement998() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement998(stack["delimiter"])
}

func (c *current) onListElementContinuationElement1017(start interface{}) (bool, error) {
	return c.setBlockDelimiterLength(start.(*types.BlockDelimiter).Length)

}

func (p *parser) callonListElementContinuationElement1017() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1017(stack["start"])
}

func (c *current) onListElementContinuationElement1029() (interface{}, error) {
	// sequence of 4 "-" chars or more
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1029() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1029()
}

func (c *current) onListElementContinuationElement1035() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1035() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1035()
}

func (c *current) onListElementContinuationElement1038() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1038() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1038()
}

func (c *current) onListElementContinuationElement1026(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Listing, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListElementContinuationElement1026() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1026(stack["delimiter"])
}

func (c *current) onListElementContinuationElement1045(end interface{}) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonListElementContinuationElement1045() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1045(stack["end"])
}

func (c *current) onListElementContinuationElement1055() (interface{}, error) {
	// content is NOT mandatory
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1055() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1055()
}

func (c *current) onListElementContinuationElement1059() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1059() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1059()
}

func (c *current) onListElementContinuationElement1049(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonListElementContinuationElement1049() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1049(stack["content"])
}

func (c *current) onListElementContinuationElement1020(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonListElementContinuationElement1020() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1020(stack["line"])
}

func (c *current) onListElementContinuationElement1074() (interface{}, error) {
	// sequence of 4 "-" chars or more
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1074() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1074()
}

func (c *current) onListElementContinuationElement1080() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1080() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1080()
}

func (c *current) onListElementContinuationElement1083() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1083() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1083()
}

func (c *current) onListElementContinuationElement1071(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Listing, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListElementContinuationElement1071() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1071(stack["delimiter"])
}

func (c *current) onListElementContinuationElement1090(end interface{}) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonListElementContinuationElement1090() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1090(stack["end"])
}

func (c *current) onListElementContinuationElement995(start, content, end interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Listing, content.([]interface{}))

}

func (p *parser) callonListElementContinuationElement995() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement995(stack["start"], stack["content"], stack["end"])
}

func (c *current) onListElementContinuationElement1099() (interface{}, error) {
	// sequence of 4 "." chars or more
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1099() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1099()
}

func (c *current) onListElementContinuationElement1105() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1105() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1105()
}

func (c *current) onListElementContinuationElement1108() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1108() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1108()
}

func (c *current) onListElementContinuationElement1096(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Listing, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListElementContinuationElement1096() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1096(stack["delimiter"])
}

func (c *current) onListElementContinuationElement1115(start interface{}) (bool, error) {
	return c.setBlockDelimiterLength(start.(*types.BlockDelimiter).Length)

}

func (p *parser) callonListElementContinuationElement1115() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1115(stack["start"])
}

func (c *current) onListElementContinuationElement1127() (interface{}, error) {
	// sequence of 4 "." chars or more
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1127() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1127()
}

func (c *current) onListElementContinuationElement1133() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1133() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1133()
}

func (c *current) onListElementContinuationElement1136() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1136() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1136()
}

func (c *current) onListElementContinuationElement1124(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Listing, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListElementContinuationElement1124() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1124(stack["delimiter"])
}

func (c *current) onListElementContinuationElement1143(end interface{}) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonListElementContinuationElement1143() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1143(stack["end"])
}

func (c *current) onListElementContinuationElement1153() (interface{}, error) {
	// content is NOT mandatory
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1153() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1153()
}

func (c *current) onListElementContinuationElement1157() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1157() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1157()
}

func (c *current) onListElementContinuationElement1147(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonListElementContinuationElement1147() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1147(stack["content"])
}

func (c *current) onListElementContinuationElement1118(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonListElementContinuationElement1118() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1118(stack["line"])
}

func (c *current) onListElementContinuationElement1172() (interface{}, error) {
	// sequence of 4 "." chars or more
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1172() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1172()
}

func (c *current) onListElementContinuationElement1178() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1178() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1178()
}

func (c *current) onListElementContinuationElement1181() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1181() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1181()
}

func (c *current) onListElementContinuationElement1169(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Listing, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListElementContinuationElement1169() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1169(stack["delimiter"])
}

func (c *current) onListElementContinuationElement1188(end interface{}) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonListElementContinuationElement1188() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1188(stack["end"])
}

func (c *current) onListElementContinuationElement1093(start, content, end interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Literal, content.([]interface{}))

}

func (p *parser) callonListElementContinuationElement1093() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1093(stack["start"], stack["content"], stack["end"])
}

func (c *current) onListElementContinuationElement1203() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1203() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1203()
}

func (c *current) onListElementContinuationElement1206() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1206() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1206()
}

func (c *current) onListElementContinuationElement1197() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonListElementContinuationElement1197() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1197()
}

func (c *current) onListElementContinuationElement1215() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1215() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1215()
}

func (c *current) onListElementContinuationElement1219() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1219() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1219()
}

func (c *current) onListElementContinuationElement1194(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonListElementContinuationElement1194() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1194(stack["content"])
}

func (c *current) onListElementContinuationElement1238() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1238() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1238()
}

func (c *current) onListElementContinuationElement1241() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1241() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1241()
}

func (c *current) onListElementContinuationElement1232() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonListElementContinuationElement1232() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1232()
}

func (c *current) onListElementContinuationElement1250() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1250() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1250()
}

func (c *current) onListElementContinuationElement1254() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1254() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1254()
}

func (c *current) onListElementContinuationElement1229(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonListElementContinuationElement1229() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1229(stack["content"])
}

func (c *current) onListElementContinuationElement1264() (interface{}, error) {
	return strings.TrimRight(string(c.text), " \t"), nil // trim spaces and tabs

}

func (p *parser) callonListElementContinuationElement1264() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1264()
}

func (c *current) onListElementContinuationElement1267(content interface{}) (bool, error) {
	return len(strings.TrimSpace(content.(string))) > 0, nil

}

func (p *parser) callonListElementContinuationElement1267() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1267(stack["content"])
}

func (c *current) onListElementContinuationElement1269() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1269() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1269()
}

func (c *current) onListElementContinuationElement1261(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonListElementContinuationElement1261() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1261(stack["content"])
}

func (c *current) onListElementContinuationElement1191(firstLine, otherLines interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.MarkdownQuote, append([]interface{}{firstLine}, otherLines.([]interface{})...))

}

func (p *parser) callonListElementContinuationElement1191() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1191(stack["firstLine"], stack["otherLines"])
}

func (c *current) onListElementContinuationElement1282() (interface{}, error) {
	// sequence of 4 "+" chars or more
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1282() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1282()
}

func (c *current) onListElementContinuationElement1288() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1288() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1288()
}

func (c *current) onListElementContinuationElement1291() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1291() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1291()
}

func (c *current) onListElementContinuationElement1279(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Passthrough, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListElementContinuationElement1279() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1279(stack["delimiter"])
}

func (c *current) onListElementContinuationElement1298(start interface{}) (bool, error) {
	return c.setBlockDelimiterLength(start.(*types.BlockDelimiter).Length)

}

func (p *parser) callonListElementContinuationElement1298() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1298(stack["start"])
}

func (c *current) onListElementContinuationElement1310() (interface{}, error) {
	// sequence of 4 "+" chars or more
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1310() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1310()
}

func (c *current) onListElementContinuationElement1316() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1316() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1316()
}

func (c *current) onListElementContinuationElement1319() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1319() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1319()
}

func (c *current) onListElementContinuationElement1307(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Passthrough, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListElementContinuationElement1307() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1307(stack["delimiter"])
}

func (c *current) onListElementContinuationElement1326(end interface{}) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonListElementContinuationElement1326() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1326(stack["end"])
}

func (c *current) onListElementContinuationElement1336() (interface{}, error) {
	// content is NOT mandatory
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1336() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1336()
}

func (c *current) onListElementContinuationElement1340() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1340() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1340()
}

func (c *current) onListElementContinuationElement1330(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonListElementContinuationElement1330() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1330(stack["content"])
}

func (c *current) onListElementContinuationElement1301(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonListElementContinuationElement1301() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1301(stack["line"])
}

func (c *current) onListElementContinuationElement1355() (interface{}, error) {
	// sequence of 4 "+" chars or more
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1355() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1355()
}

func (c *current) onListElementContinuationElement1361() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1361() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1361()
}

func (c *current) onListElementContinuationElement1364() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1364() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1364()
}

func (c *current) onListElementContinuationElement1352(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Passthrough, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListElementContinuationElement1352() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1352(stack["delimiter"])
}

func (c *current) onListElementContinuationElement1371(end interface{}) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonListElementContinuationElement1371() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1371(stack["end"])
}

func (c *current) onListElementContinuationElement1276(start, content, end interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Passthrough, content.([]interface{}))

}

func (p *parser) callonListElementContinuationElement1276() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1276(stack["start"], stack["content"], stack["end"])
}

func (c *current) onListElementContinuationElement1380() (interface{}, error) {
	// sequence of 4 "_" chars or more
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1380() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1380()
}

func (c *current) onListElementContinuationElement1386() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1386() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1386()
}

func (c *current) onListElementContinuationElement1389() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1389() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1389()
}

func (c *current) onListElementContinuationElement1377(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Quote, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListElementContinuationElement1377() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1377(stack["delimiter"])
}

func (c *current) onListElementContinuationElement1396(start interface{}) (bool, error) {
	return c.setBlockDelimiterLength(start.(*types.BlockDelimiter).Length)

}

func (p *parser) callonListElementContinuationElement1396() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1396(stack["start"])
}

func (c *current) onListElementContinuationElement1408() (interface{}, error) {
	// sequence of 4 "_" chars or more
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1408() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1408()
}

func (c *current) onListElementContinuationElement1414() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1414() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1414()
}

func (c *current) onListElementContinuationElement1417() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1417() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1417()
}

func (c *current) onListElementContinuationElement1405(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Quote, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListElementContinuationElement1405() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1405(stack["delimiter"])
}

func (c *current) onListElementContinuationElement1424(end interface{}) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonListElementContinuationElement1424() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1424(stack["end"])
}

func (c *current) onListElementContinuationElement1434() (interface{}, error) {
	// content is NOT mandatory
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1434() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1434()
}

func (c *current) onListElementContinuationElement1438() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1438() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1438()
}

func (c *current) onListElementContinuationElement1428(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonListElementContinuationElement1428() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1428(stack["content"])
}

func (c *current) onListElementContinuationElement1399(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonListElementContinuationElement1399() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1399(stack["line"])
}

func (c *current) onListElementContinuationElement1453() (interface{}, error) {
	// sequence of 4 "_" chars or more
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1453() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1453()
}

func (c *current) onListElementContinuationElement1459() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1459() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1459()
}

func (c *current) onListElementContinuationElement1462() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1462() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1462()
}

func (c *current) onListElementContinuationElement1450(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Quote, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListElementContinuationElement1450() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1450(stack["delimiter"])
}

func (c *current) onListElementContinuationElement1469(end interface{}) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonListElementContinuationElement1469() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1469(stack["end"])
}

func (c *current) onListElementContinuationElement1374(start, content, end interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Quote, content.([]interface{}))

}

func (p *parser) callonListElementContinuationElement1374() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1374(stack["start"], stack["content"], stack["end"])
}

func (c *current) onListElementContinuationElement1478() (interface{}, error) {
	// sequence of 4 "*" chars or more
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1478() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1478()
}

func (c *current) onListElementContinuationElement1484() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1484() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1484()
}

func (c *current) onListElementContinuationElement1487() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1487() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1487()
}

func (c *current) onListElementContinuationElement1475(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Sidebar, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListElementContinuationElement1475() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1475(stack["delimiter"])
}

func (c *current) onListElementContinuationElement1494(start interface{}) (bool, error) {
	return c.setBlockDelimiterLength(start.(*types.BlockDelimiter).Length)

}

func (p *parser) callonListElementContinuationElement1494() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1494(stack["start"])
}

func (c *current) onListElementContinuationElement1506() (interface{}, error) {
	// sequence of 4 "*" chars or more
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1506() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1506()
}

func (c *current) onListElementContinuationElement1512() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1512() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1512()
}

func (c *current) onListElementContinuationElement1515() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1515() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1515()
}

func (c *current) onListElementContinuationElement1503(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Sidebar, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListElementContinuationElement1503() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1503(stack["delimiter"])
}

func (c *current) onListElementContinuationElement1522(end interface{}) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonListElementContinuationElement1522() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1522(stack["end"])
}

func (c *current) onListElementContinuationElement1532() (interface{}, error) {
	// content is NOT mandatory
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1532() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1532()
}

func (c *current) onListElementContinuationElement1536() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1536() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1536()
}

func (c *current) onListElementContinuationElement1526(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))

}

func (p *parser) callonListElementContinuationElement1526() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1526(stack["content"])
}

func (c *current) onListElementContinuationElement1497(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonListElementContinuationElement1497() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1497(stack["line"])
}

func (c *current) onListElementContinuationElement1551() (interface{}, error) {
	// sequence of 4 "*" chars or more
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1551() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1551()
}

func (c *current) onListElementContinuationElement1557() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1557() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1557()
}

func (c *current) onListElementContinuationElement1560() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1560() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1560()
}

func (c *current) onListElementContinuationElement1548(delimiter interface{}) (interface{}, error) {

	return types.NewBlockDelimiter(types.Sidebar, len(delimiter.(string)), string(c.text))

}

func (p *parser) callonListElementContinuationElement1548() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1548(stack["delimiter"])
}

func (c *current) onListElementContinuationElement1567(end interface{}) (bool, error) {
	return c.matchBlockDelimiterLength(end.(*types.BlockDelimiter).Length)

}

func (p *parser) callonListElementContinuationElement1567() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1567(stack["end"])
}

func (c *current) onListElementContinuationElement1472(start, content, end interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Sidebar, content.([]interface{}))

}

func (p *parser) callonListElementContinuationElement1472() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1472(stack["start"], stack["content"], stack["end"])
}

func (c *current) onListElementContinuationElement1581() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1581() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1581()
}

func (c *current) onListElementContinuationElement1584() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1584() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1584()
}

func (c *current) onListElementContinuationElement1592() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1592() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1592()
}

func (c *current) onListElementContinuationElement1570() (interface{}, error) {

	return types.NewThematicBreak()

}

func (p *parser) callonListElementContinuationElement1570() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1570()
}

func (c *current) onListElementContinuationElement1604() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1604() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1604()
}

func (c *current) onListElementContinuationElement1607() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1607() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1607()
}

func (c *current) onListElementContinuationElement1624() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1624() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1624()
}

func (c *current) onListElementContinuationElement1630() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1630() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1630()
}

func (c *current) onListElementContinuationElement1628(content interface{}) (interface{}, error) {
	return types.NewRawContent(content.(string))

}

func (p *parser) callonListElementContinuationElement1628() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1628(stack["content"])
}

func (c *current) onListElementContinuationElement1620(content interface{}) (interface{}, error) {
	return types.NewTableCell(content.(types.RawContent))

}

func (p *parser) callonListElementContinuationElement1620() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1620(stack["content"])
}

func (c *current) onListElementContinuationElement1634() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1634() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1634()
}

func (c *current) onListElementContinuationElement1648() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1648() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1648()
}

func (c *current) onListElementContinuationElement1651() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1651() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1651()
}

func (c *current) onListElementContinuationElement1642() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonListElementContinuationElement1642() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1642()
}

func (c *current) onListElementContinuationElement1616(cells interface{}) (interface{}, error) {
	return types.NewTableRow(cells.([]interface{}))

}

func (p *parser) callonListElementContinuationElement1616() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1616(stack["cells"])
}

func (c *current) onListElementContinuationElement1668() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1668() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1668()
}

func (c *current) onListElementContinuationElement1671() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1671() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1671()
}

func (c *current) onListElementContinuationElement1692() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1692() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1692()
}

func (c *current) onListElementContinuationElement1695() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1695() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1695()
}

func (c *current) onListElementContinuationElement1711() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1711() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1711()
}

func (c *current) onListElementContinuationElement1714() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1714() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1714()
}

func (c *current) onListElementContinuationElement1705() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonListElementContinuationElement1705() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1705()
}

func (c *current) onListElementContinuationElement1723() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1723() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1723()
}

func (c *current) onListElementContinuationElement1729() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1729() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1729()
}

func (c *current) onListElementContinuationElement1727(content interface{}) (interface{}, error) {
	return types.NewRawContent(content.(string))

}

func (p *parser) callonListElementContinuationElement1727() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1727(stack["content"])
}

func (c *current) onListElementContinuationElement1685(content interface{}) (interface{}, error) {
	return types.NewTableCell(content.(types.RawContent))

}

func (p *parser) callonListElementContinuationElement1685() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1685(stack["content"])
}

func (c *current) onListElementContinuationElement1733() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1733() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1733()
}

func (c *current) onListElementContinuationElement1682(cell interface{}) (interface{}, error) {
	return cell, nil

}

func (p *parser) callonListElementContinuationElement1682() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1682(stack["cell"])
}

func (c *current) onListElementContinuationElement1748() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1748() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1748()
}

func (c *current) onListElementContinuationElement1751() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1751() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1751()
}

func (c *current) onListElementContinuationElement1742() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonListElementContinuationElement1742() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1742()
}

func (c *current) onListElementContinuationElement1763() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1763() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1763()
}

func (c *current) onListElementContinuationElement1766() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1766() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1766()
}

func (c *current) onListElementContinuationElement1661(cells interface{}) (interface{}, error) {
	return types.NewTableRow(cells.([]interface{}))

}

func (p *parser) callonListElementContinuationElement1661() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1661(stack["cells"])
}

func (c *current) onListElementContinuationElement1782() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1782() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1782()
}

func (c *current) onListElementContinuationElement1785() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1785() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1785()
}

func (c *current) onListElementContinuationElement1803() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1803() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1803()
}

func (c *current) onListElementContinuationElement1806() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1806() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1806()
}

func (c *current) onListElementContinuationElement1822() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1822() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1822()
}

func (c *current) onListElementContinuationElement1825() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1825() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1825()
}

func (c *current) onListElementContinuationElement1816() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonListElementContinuationElement1816() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1816()
}

func (c *current) onListElementContinuationElement1834() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1834() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1834()
}

func (c *current) onListElementContinuationElement1840() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1840() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1840()
}

func (c *current) onListElementContinuationElement1838(content interface{}) (interface{}, error) {
	return types.NewRawContent(content.(string))

}

func (p *parser) callonListElementContinuationElement1838() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1838(stack["content"])
}

func (c *current) onListElementContinuationElement1796(content interface{}) (interface{}, error) {
	return types.NewTableCell(content.(types.RawContent))

}

func (p *parser) callonListElementContinuationElement1796() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1796(stack["content"])
}

func (c *current) onListElementContinuationElement1844() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1844() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1844()
}

func (c *current) onListElementContinuationElement1858() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1858() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1858()
}

func (c *current) onListElementContinuationElement1861() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1861() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1861()
}

func (c *current) onListElementContinuationElement1852() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonListElementContinuationElement1852() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1852()
}

func (c *current) onListElementContinuationElement1775(cells interface{}) (interface{}, error) {
	return types.NewTableRow(cells.([]interface{}))

}

func (p *parser) callonListElementContinuationElement1775() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1775(stack["cells"])
}

func (c *current) onListElementContinuationElement1872() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1872() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1872()
}

func (c *current) onListElementContinuationElement1875() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1875() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1875()
}

func (c *current) onListElementContinuationElement1600(header, rows interface{}) (interface{}, error) {
	return types.NewTable(header, rows.([]interface{}))

}

func (p *parser) callonListElementContinuationElement1600() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1600(stack["header"], stack["rows"])
}

func (c *current) onListElementContinuationElement1890() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1890() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1890()
}

func (c *current) onListElementContinuationElement1894() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1894() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1894()
}

func (c *current) onListElementContinuationElement1884(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))

}

func (p *parser) callonListElementContinuationElement1884() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1884(stack["content"])
}

func (c *current) onListElementContinuationElement1905() (interface{}, error) {
	return types.Tip, nil
}

func (p *parser) callonListElementContinuationElement1905() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1905()
}

func (c *current) onListElementContinuationElement1907() (interface{}, error) {
	return types.Note, nil
}

func (p *parser) callonListElementContinuationElement1907() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1907()
}

func (c *current) onListElementContinuationElement1909() (interface{}, error) {
	return types.Important, nil
}

func (p *parser) callonListElementContinuationElement1909() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1909()
}

func (c *current) onListElementContinuationElement1911() (interface{}, error) {
	return types.Warning, nil
}

func (p *parser) callonListElementContinuationElement1911() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1911()
}

func (c *current) onListElementContinuationElement1913() (interface{}, error) {
	return types.Caution, nil
}

func (p *parser) callonListElementContinuationElement1913() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1913()
}

func (c *current) onListElementContinuationElement1920() (interface{}, error) {
	return strings.TrimRight(string(c.text), " \t"), nil // trim spaces and tabs

}

func (p *parser) callonListElementContinuationElement1920() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1920()
}

func (c *current) onListElementContinuationElement1923(content interface{}) (bool, error) {
	return len(strings.TrimSpace(content.(string))) > 0, nil

}

func (p *parser) callonListElementContinuationElement1923() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1923(stack["content"])
}

func (c *current) onListElementContinuationElement1925() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1925() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1925()
}

func (c *current) onListElementContinuationElement1917(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonListElementContinuationElement1917() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1917(stack["content"])
}

func (c *current) onListElementContinuationElement1940() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1940() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1940()
}

func (c *current) onListElementContinuationElement1942() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1942() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1942()
}

func (c *current) onListElementContinuationElement1955() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1955() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1955()
}

func (c *current) onListElementContinuationElement1959() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1959() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1959()
}

func (c *current) onListElementContinuationElement1949(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))

}

func (p *parser) callonListElementContinuationElement1949() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1949(stack["content"])
}

func (c *current) onListElementContinuationElement1969() (interface{}, error) {
	return strings.TrimRight(string(c.text), " \t"), nil // trim spaces and tabs

}

func (p *parser) callonListElementContinuationElement1969() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1969()
}

func (c *current) onListElementContinuationElement1972(content interface{}) (bool, error) {
	return len(strings.TrimSpace(content.(string))) > 0, nil

}

func (p *parser) callonListElementContinuationElement1972() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1972(stack["content"])
}

func (c *current) onListElementContinuationElement1974() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1974() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1974()
}

func (c *current) onListElementContinuationElement1966(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonListElementContinuationElement1966() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1966(stack["content"])
}

func (c *current) onListElementContinuationElement1934(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonListElementContinuationElement1934() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1934(stack["line"])
}

func (c *current) onListElementContinuationElement1901(kind, firstLine, otherLines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(kind.(string), append([]interface{}{firstLine}, otherLines.([]interface{})...))

}

func (p *parser) callonListElementContinuationElement1901() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1901(stack["kind"], stack["firstLine"], stack["otherLines"])
}

func (c *current) onListElementContinuationElement1989() (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1989() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1989()
}

func (c *current) onListElementContinuationElement1987() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement1987() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1987()
}

func (c *current) onListElementContinuationElement1994(content interface{}) (bool, error) {
	return len(strings.TrimSpace(string(c.text))) > 0, nil

}

func (p *parser) callonListElementContinuationElement1994() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1994(stack["content"])
}

func (c *current) onListElementContinuationElement1996() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement1996() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1996()
}

func (c *current) onListElementContinuationElement1984(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonListElementContinuationElement1984() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1984(stack["content"])
}

func (c *current) onListElementContinuationElement2012() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement2012() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement2012()
}

func (c *current) onListElementContinuationElement2016() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement2016() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement2016()
}

func (c *current) onListElementContinuationElement2006(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))

}

func (p *parser) callonListElementContinuationElement2006() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement2006(stack["content"])
}

func (c *current) onListElementContinuationElement2026() (interface{}, error) {
	return strings.TrimRight(string(c.text), " \t"), nil // trim spaces and tabs

}

func (p *parser) callonListElementContinuationElement2026() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement2026()
}

func (c *current) onListElementContinuationElement2029(content interface{}) (bool, error) {
	return len(strings.TrimSpace(content.(string))) > 0, nil

}

func (p *parser) callonListElementContinuationElement2029() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement2029(stack["content"])
}

func (c *current) onListElementContinuationElement2031() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement2031() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement2031()
}

func (c *current) onListElementContinuationElement2023(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonListElementContinuationElement2023() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement2023(stack["content"])
}

func (c *current) onListElementContinuationElement1981(firstLine, otherLines interface{}) (interface{}, error) {

	return types.NewLiteralParagraph(types.LiteralBlockWithSpacesOnFirstLine, append([]interface{}{firstLine}, otherLines.([]interface{})...))

}

func (p *parser) callonListElementContinuationElement1981() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1981(stack["firstLine"], stack["otherLines"])
}

func (c *current) onListElementContinuationElement2041() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonListElementContinuationElement2041() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement2041()
}

func (c *current) onListElementContinuationElement2045() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonListElementContinuationElement2045() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement2045()
}

func (c *current) onListElementContinuationElement2038(content interface{}) (interface{}, error) {
	// do not retain the EOL chars
	return types.NewParagraph(types.RawLine(content.(string)))

}

func (p *parser) callonListElementContinuationElement2038() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement2038(stack["content"])
}

func (c *current) onListElementContinuationElement1(attributes, element interface{}) (interface{}, error) {
	if element, ok := element.(types.WithAttributes); ok && attributes != nil {
		element.AddAttributes(attributes.(types.Attributes))
	}
	// if log.IsLevelEnabled(log.DebugLevel) {
	//     log.Debugf("returning element '%s'\n", spew.Sdump(element))
	// }
	return element, nil

}

func (p *parser) callonListElementContinuationElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListElementContinuationElement1(stack["attributes"], stack["element"])
}

func (c *current) onCallout3() (bool, error) {
	return c.isSubstitutionEnabled(Callouts), nil

}

func (p *parser) callonCallout3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout3()
}

func (c *current) onCallout6() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCallout6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout6()
}

func (c *current) onCallout11() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonCallout11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout11()
}

func (c *current) onCallout15() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonCallout15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout15()
}

func (c *current) onCallout1(ref interface{}) (interface{}, error) {
	return types.NewCallout(ref.(int))

}

func (p *parser) callonCallout1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout1(stack["ref"])
}

func (c *current) onShortcutParagraph10() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonShortcutParagraph10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph10()
}

func (c *current) onShortcutParagraph17() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonShortcutParagraph17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph17()
}

func (c *current) onShortcutParagraph20(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonShortcutParagraph20() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph20(stack["depth"])
}

func (c *current) onShortcutParagraph14(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListElementPrefix(types.Arabic)
	case 2:
		return types.NewOrderedListElementPrefix(types.LowerAlpha)
	case 3:
		return types.NewOrderedListElementPrefix(types.LowerRoman)
	case 4:
		return types.NewOrderedListElementPrefix(types.UpperAlpha)
	default:
		return types.NewOrderedListElementPrefix(types.UpperRoman)
	}

}

func (p *parser) callonShortcutParagraph14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph14(stack["depth"])
}

func (c *current) onShortcutParagraph21() (interface{}, error) {
	// numbering style: "1.", etc.
	return types.NewOrderedListElementPrefix(types.Arabic)

}

func (p *parser) callonShortcutParagraph21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph21()
}

func (c *current) onShortcutParagraph26() (interface{}, error) {
	// numbering style: "a.", etc.
	return types.NewOrderedListElementPrefix(types.LowerAlpha)

}

func (p *parser) callonShortcutParagraph26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph26()
}

func (c *current) onShortcutParagraph30() (interface{}, error) {
	// numbering style: "A.", etc.
	return types.NewOrderedListElementPrefix(types.UpperAlpha)

}

func (p *parser) callonShortcutParagraph30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph30()
}

func (c *current) onShortcutParagraph34() (interface{}, error) {
	// numbering style: "i)", etc.
	return types.NewOrderedListElementPrefix(types.LowerRoman)

}

func (p *parser) callonShortcutParagraph34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph34()
}

func (c *current) onShortcutParagraph39() (interface{}, error) {
	// numbering style: "I)", etc.
	return types.NewOrderedListElementPrefix(types.UpperRoman)

}

func (p *parser) callonShortcutParagraph39() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph39()
}

func (c *current) onShortcutParagraph44(prefix interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonShortcutParagraph44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph44(stack["prefix"])
}

func (c *current) onShortcutParagraph7(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonShortcutParagraph7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph7(stack["prefix"])
}

func (c *current) onShortcutParagraph52() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonShortcutParagraph52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph52()
}

func (c *current) onShortcutParagraph59() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonShortcutParagraph59() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph59()
}

func (c *current) onShortcutParagraph62(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonShortcutParagraph62() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph62(stack["depth"])
}

func (c *current) onShortcutParagraph56(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListElementPrefix(types.OneAsterisk)
	case 2:
		return types.NewUnorderedListElementPrefix(types.TwoAsterisks)
	case 3:
		return types.NewUnorderedListElementPrefix(types.ThreeAsterisks)
	case 4:
		return types.NewUnorderedListElementPrefix(types.FourAsterisks)
	default:
		return types.NewUnorderedListElementPrefix(types.FiveAsterisks)
	}

}

func (p *parser) callonShortcutParagraph56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph56(stack["depth"])
}

func (c *current) onShortcutParagraph64() (interface{}, error) {
	return types.NewUnorderedListElementPrefix(types.Dash)

}

func (p *parser) callonShortcutParagraph64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph64()
}

func (c *current) onShortcutParagraph66(prefix interface{}) (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonShortcutParagraph66() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph66(stack["prefix"])
}

func (c *current) onShortcutParagraph49(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonShortcutParagraph49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph49(stack["prefix"])
}

func (c *current) onShortcutParagraph72() (interface{}, error) {
	return types.Tip, nil
}

func (p *parser) callonShortcutParagraph72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph72()
}

func (c *current) onShortcutParagraph74() (interface{}, error) {
	return types.Note, nil
}

func (p *parser) callonShortcutParagraph74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph74()
}

func (c *current) onShortcutParagraph76() (interface{}, error) {
	return types.Important, nil
}

func (p *parser) callonShortcutParagraph76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph76()
}

func (c *current) onShortcutParagraph78() (interface{}, error) {
	return types.Warning, nil
}

func (p *parser) callonShortcutParagraph78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph78()
}

func (c *current) onShortcutParagraph80() (interface{}, error) {
	return types.Caution, nil
}

func (p *parser) callonShortcutParagraph80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph80()
}

func (c *current) onShortcutParagraph86() (interface{}, error) {
	return strings.TrimRight(string(c.text), " \t"), nil // trim spaces and tabs

}

func (p *parser) callonShortcutParagraph86() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph86()
}

func (c *current) onShortcutParagraph89(content interface{}) (bool, error) {
	return len(strings.TrimSpace(content.(string))) > 0, nil

}

func (p *parser) callonShortcutParagraph89() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph89(stack["content"])
}

func (c *current) onShortcutParagraph91() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonShortcutParagraph91() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph91()
}

func (c *current) onShortcutParagraph83(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonShortcutParagraph83() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph83(stack["content"])
}

func (c *current) onShortcutParagraph98(firstLine interface{}) (bool, error) {
	// also, make sure that there is no LabeledListElement delimiter (`::` - `::::`)
	//   in the middle of the line (with space afterwards)
	//   or at the end of the line
	return !strings.Contains(string(firstLine.(types.RawLine)), ":: ") &&
		!strings.HasSuffix(string(firstLine.(types.RawLine)), "::"), nil

}

func (p *parser) callonShortcutParagraph98() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph98(stack["firstLine"])
}

func (c *current) onShortcutParagraph113() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonShortcutParagraph113() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph113()
}

func (c *current) onShortcutParagraph116() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonShortcutParagraph116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph116()
}

func (c *current) onShortcutParagraph107() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonShortcutParagraph107() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph107()
}

func (c *current) onShortcutParagraph129() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonShortcutParagraph129() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph129()
}

func (c *current) onShortcutParagraph131() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonShortcutParagraph131() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph131()
}

func (c *current) onShortcutParagraph144() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonShortcutParagraph144() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph144()
}

func (c *current) onShortcutParagraph148() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonShortcutParagraph148() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph148()
}

func (c *current) onShortcutParagraph138(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))

}

func (p *parser) callonShortcutParagraph138() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph138(stack["content"])
}

func (c *current) onShortcutParagraph158() (interface{}, error) {
	return strings.TrimRight(string(c.text), " \t"), nil // trim spaces and tabs

}

func (p *parser) callonShortcutParagraph158() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph158()
}

func (c *current) onShortcutParagraph161(content interface{}) (bool, error) {
	return len(strings.TrimSpace(content.(string))) > 0, nil

}

func (p *parser) callonShortcutParagraph161() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph161(stack["content"])
}

func (c *current) onShortcutParagraph163() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonShortcutParagraph163() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph163()
}

func (c *current) onShortcutParagraph155(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonShortcutParagraph155() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph155(stack["content"])
}

func (c *current) onShortcutParagraph101(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonShortcutParagraph101() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph101(stack["line"])
}

func (c *current) onShortcutParagraph1(firstLine, otherLines interface{}) (interface{}, error) {
	return types.NewParagraph(append([]interface{}{firstLine}, otherLines.([]interface{})...)...)

}

func (p *parser) callonShortcutParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortcutParagraph1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onParagraph7() (interface{}, error) {
	return strings.TrimRight(string(c.text), " \t"), nil // trim spaces and tabs

}

func (p *parser) callonParagraph7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph7()
}

func (c *current) onParagraph10(content interface{}) (bool, error) {
	return len(strings.TrimSpace(content.(string))) > 0, nil

}

func (p *parser) callonParagraph10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph10(stack["content"])
}

func (c *current) onParagraph12() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonParagraph12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph12()
}

func (c *current) onParagraph4(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonParagraph4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph4(stack["content"])
}

func (c *current) onParagraph33() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraph33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph33()
}

func (c *current) onParagraph36() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonParagraph36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph36()
}

func (c *current) onParagraph27() (interface{}, error) {
	return types.NewBlankLine()

}

func (p *parser) callonParagraph27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph27()
}

func (c *current) onParagraph49() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraph49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph49()
}

func (c *current) onParagraph51() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonParagraph51() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph51()
}

func (c *current) onParagraph64() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraph64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph64()
}

func (c *current) onParagraph68() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonParagraph68() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph68()
}

func (c *current) onParagraph58(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))

}

func (p *parser) callonParagraph58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph58(stack["content"])
}

func (c *current) onParagraph78() (interface{}, error) {
	return strings.TrimRight(string(c.text), " \t"), nil // trim spaces and tabs

}

func (p *parser) callonParagraph78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph78()
}

func (c *current) onParagraph81(content interface{}) (bool, error) {
	return len(strings.TrimSpace(content.(string))) > 0, nil

}

func (p *parser) callonParagraph81() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph81(stack["content"])
}

func (c *current) onParagraph83() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonParagraph83() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph83()
}

func (c *current) onParagraph75(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonParagraph75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph75(stack["content"])
}

func (c *current) onParagraph21(line interface{}) (interface{}, error) {
	return line, nil

}

func (p *parser) callonParagraph21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph21(stack["line"])
}

func (c *current) onParagraph1(firstLine, otherLines interface{}) (interface{}, error) {
	return types.NewParagraph(append([]interface{}{firstLine}, otherLines.([]interface{})...)...)

}

func (p *parser) callonParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onQuotedText6() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonQuotedText6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedText6()
}

func (c *current) onQuotedText2(attributes, text interface{}) (interface{}, error) {
	log.Debugf("matched escaped quoted text")
	return append([]interface{}{attributes}, text.([]interface{})...), nil

}

func (p *parser) callonQuotedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedText2(stack["attributes"], stack["text"])
}

func (c *current) onQuotedText10(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedText10(stack["attributes"], stack["text"])
}

func (c *current) onEscapedQuotedText1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonEscapedQuotedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedQuotedText1(stack["element"])
}

func (c *current) onDoubleQuoteBoldText1(elements interface{}) (interface{}, error) {
	return types.NewQuotedText(types.DoubleQuoteBold, elements.([]interface{}))

}

func (p *parser) callonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldText1(stack["elements"])
}

func (c *current) onDoubleQuoteBoldTextElement13() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement13()
}

func (c *current) onDoubleQuoteBoldTextElement7() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteBoldTextElement7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement7()
}

func (c *current) onDoubleQuoteBoldTextElement16() (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement16()
}

func (c *current) onDoubleQuoteBoldTextElement20() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteBoldTextElement20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement20()
}

func (c *current) onDoubleQuoteBoldTextElement26() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteBoldTextElement26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement26()
}

func (c *current) onDoubleQuoteBoldTextElement33() (bool, error) {
	return c.isSubstitutionEnabled(Attributes), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement33() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement33()
}

func (c *current) onDoubleQuoteBoldTextElement40() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement40()
}

func (c *current) onDoubleQuoteBoldTextElement52() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement52()
}

func (c *current) onDoubleQuoteBoldTextElement54() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuoteBoldTextElement54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement54()
}

func (c *current) onDoubleQuoteBoldTextElement47(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuoteBoldTextElement47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement47(stack["start"])
}

func (c *current) onDoubleQuoteBoldTextElement36(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonDoubleQuoteBoldTextElement36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement36(stack["name"], stack["start"])
}

func (c *current) onDoubleQuoteBoldTextElement62() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement62() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement62()
}

func (c *current) onDoubleQuoteBoldTextElement74() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement74()
}

func (c *current) onDoubleQuoteBoldTextElement76() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuoteBoldTextElement76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement76()
}

func (c *current) onDoubleQuoteBoldTextElement69(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuoteBoldTextElement69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement69(stack["start"])
}

func (c *current) onDoubleQuoteBoldTextElement58(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonDoubleQuoteBoldTextElement58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement58(stack["name"], stack["start"])
}

func (c *current) onDoubleQuoteBoldTextElement84() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement84()
}

func (c *current) onDoubleQuoteBoldTextElement80(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonDoubleQuoteBoldTextElement80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement80(stack["name"])
}

func (c *current) onDoubleQuoteBoldTextElement94() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement94() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement94()
}

func (c *current) onDoubleQuoteBoldTextElement90(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonDoubleQuoteBoldTextElement90() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement90(stack["name"])
}

func (c *current) onDoubleQuoteBoldTextElement31(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteBoldTextElement31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement31(stack["element"])
}

func (c *current) onDoubleQuoteBoldTextElement103() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement103() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement103()
}

func (c *current) onDoubleQuoteBoldTextElement112() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement112() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement112()
}

func (c *current) onDoubleQuoteBoldTextElement116() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement116()
}

func (c *current) onDoubleQuoteBoldTextElement122() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteBoldTextElement122() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement122()
}

func (c *current) onDoubleQuoteBoldTextElement131() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement131() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement131()
}

func (c *current) onDoubleQuoteBoldTextElement127(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonDoubleQuoteBoldTextElement127() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement127(stack["name"])
}

func (c *current) onDoubleQuoteBoldTextElement141() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement141() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement141()
}

func (c *current) onDoubleQuoteBoldTextElement137(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonDoubleQuoteBoldTextElement137() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement137(stack["name"])
}

func (c *current) onDoubleQuoteBoldTextElement147() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteBoldTextElement147() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement147()
}

func (c *current) onDoubleQuoteBoldTextElement108(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonDoubleQuoteBoldTextElement108() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement108(stack["id"], stack["label"])
}

func (c *current) onDoubleQuoteBoldTextElement154() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement154() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement154()
}

func (c *current) onDoubleQuoteBoldTextElement150(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonDoubleQuoteBoldTextElement150() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement150(stack["id"])
}

func (c *current) onDoubleQuoteBoldTextElement106() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteBoldTextElement106() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement106()
}

func (c *current) onDoubleQuoteBoldTextElement158() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonDoubleQuoteBoldTextElement158() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement158()
}

func (c *current) onDoubleQuoteBoldTextElement101(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteBoldTextElement101() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement101(stack["element"])
}

func (c *current) onDoubleQuoteBoldTextElement164() (interface{}, error) {
	return types.NewSymbol("\"`")

}

func (p *parser) callonDoubleQuoteBoldTextElement164() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement164()
}

func (c *current) onDoubleQuoteBoldTextElement166() (interface{}, error) {
	return types.NewSymbol("`\"")

}

func (p *parser) callonDoubleQuoteBoldTextElement166() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement166()
}

func (c *current) onDoubleQuoteBoldTextElement168() (interface{}, error) {
	return types.NewSymbol("'`")

}

func (p *parser) callonDoubleQuoteBoldTextElement168() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement168()
}

func (c *current) onDoubleQuoteBoldTextElement170() (interface{}, error) {
	return types.NewSymbol("`'")

}

func (p *parser) callonDoubleQuoteBoldTextElement170() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement170()
}

func (c *current) onDoubleQuoteBoldTextElement172() (interface{}, error) {
	return types.NewSymbol("(C)")

}

func (p *parser) callonDoubleQuoteBoldTextElement172() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement172()
}

func (c *current) onDoubleQuoteBoldTextElement174() (interface{}, error) {
	return types.NewSymbol("(TM)")

}

func (p *parser) callonDoubleQuoteBoldTextElement174() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement174()
}

func (c *current) onDoubleQuoteBoldTextElement176() (interface{}, error) {
	return types.NewSymbol("(R)")

}

func (p *parser) callonDoubleQuoteBoldTextElement176() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement176()
}

func (c *current) onDoubleQuoteBoldTextElement178() (interface{}, error) {
	return types.NewSymbol("...")

}

func (p *parser) callonDoubleQuoteBoldTextElement178() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement178()
}

func (c *current) onDoubleQuoteBoldTextElement160() (interface{}, error) {
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonDoubleQuoteBoldTextElement160() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement160()
}

func (c *current) onDoubleQuoteBoldTextElement180() (interface{}, error) {
	return types.NewSymbol("\"`")

}

func (p *parser) callonDoubleQuoteBoldTextElement180() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement180()
}

func (c *current) onDoubleQuoteBoldTextElement182() (interface{}, error) {
	return types.NewSymbol("`\"")

}

func (p *parser) callonDoubleQuoteBoldTextElement182() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement182()
}

func (c *current) onDoubleQuoteBoldTextElement184() (interface{}, error) {
	return types.NewSymbol("'`")

}

func (p *parser) callonDoubleQuoteBoldTextElement184() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement184()
}

func (c *current) onDoubleQuoteBoldTextElement186() (interface{}, error) {
	return types.NewSymbol("`'")

}

func (p *parser) callonDoubleQuoteBoldTextElement186() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement186()
}

func (c *current) onDoubleQuoteBoldTextElement188() (interface{}, error) {
	return types.NewSymbol("(C)")

}

func (p *parser) callonDoubleQuoteBoldTextElement188() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement188()
}

func (c *current) onDoubleQuoteBoldTextElement190() (interface{}, error) {
	return types.NewSymbol("(TM)")

}

func (p *parser) callonDoubleQuoteBoldTextElement190() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement190()
}

func (c *current) onDoubleQuoteBoldTextElement192() (interface{}, error) {
	return types.NewSymbol("(R)")

}

func (p *parser) callonDoubleQuoteBoldTextElement192() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement192()
}

func (c *current) onDoubleQuoteBoldTextElement194() (interface{}, error) {
	return types.NewSymbol("...")

}

func (p *parser) callonDoubleQuoteBoldTextElement194() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement194()
}

func (c *current) onDoubleQuoteBoldTextElement196() (interface{}, error) {
	log.Debug("matched escaped apostrophe")
	return types.NewStringElement(strings.TrimSuffix(string(c.text), `\'`) + `'`) // retain the apostrophe, but discard the `\` escape char

}

func (p *parser) callonDoubleQuoteBoldTextElement196() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement196()
}

func (c *current) onDoubleQuoteBoldTextElement202() (interface{}, error) {
	return types.NewSymbolWithForeword("'", strings.TrimSuffix(string(c.text), `'`))

}

func (p *parser) callonDoubleQuoteBoldTextElement202() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement202()
}

func (c *current) onDoubleQuoteBoldTextElement213() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteBoldTextElement213() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement213()
}

func (c *current) onDoubleQuoteBoldTextElement209(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonDoubleQuoteBoldTextElement209() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement209(stack["ref"])
}

func (c *current) onDoubleQuoteBoldTextElement221() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteBoldTextElement221() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement221()
}

func (c *current) onDoubleQuoteBoldTextElement218() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteBoldTextElement218() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement218()
}

func (c *current) onDoubleQuoteBoldTextElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteBoldTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement1(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuoteBoldText1(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuoteBoldText1(stack["attributes"], stack["text"])
}

func (c *current) onSingleQuoteBoldText1(elements interface{}) (interface{}, error) {
	return types.NewQuotedText(types.SingleQuoteBold, elements.([]interface{}))

}

func (p *parser) callonSingleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText1(stack["elements"])
}

func (c *current) onSingleQuoteBoldTextElements7() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElements7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElements7()
}

func (c *current) onSingleQuoteBoldTextElements12(elements interface{}) (bool, error) {
	return validateSingleQuoteElements(elements.([]interface{})) // cannot end with spaces

}

func (p *parser) callonSingleQuoteBoldTextElements12() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElements12(stack["elements"])
}

func (c *current) onSingleQuoteBoldTextElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonSingleQuoteBoldTextElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElements1(stack["elements"])
}

func (c *current) onSingleQuoteBoldTextElement8() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement8()
}

func (c *current) onSingleQuoteBoldTextElement2() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteBoldTextElement2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement2()
}

func (c *current) onSingleQuoteBoldTextElement11() (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement11()
}

func (c *current) onSingleQuoteBoldTextElement15() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteBoldTextElement15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement15()
}

func (c *current) onSingleQuoteBoldTextElement21() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteBoldTextElement21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement21()
}

func (c *current) onSingleQuoteBoldTextElement28() (bool, error) {
	return c.isSubstitutionEnabled(Attributes), nil

}

func (p *parser) callonSingleQuoteBoldTextElement28() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement28()
}

func (c *current) onSingleQuoteBoldTextElement35() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement35()
}

func (c *current) onSingleQuoteBoldTextElement47() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement47()
}

func (c *current) onSingleQuoteBoldTextElement49() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuoteBoldTextElement49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement49()
}

func (c *current) onSingleQuoteBoldTextElement42(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuoteBoldTextElement42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement42(stack["start"])
}

func (c *current) onSingleQuoteBoldTextElement31(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonSingleQuoteBoldTextElement31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement31(stack["name"], stack["start"])
}

func (c *current) onSingleQuoteBoldTextElement57() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement57() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement57()
}

func (c *current) onSingleQuoteBoldTextElement69() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement69()
}

func (c *current) onSingleQuoteBoldTextElement71() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuoteBoldTextElement71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement71()
}

func (c *current) onSingleQuoteBoldTextElement64(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuoteBoldTextElement64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement64(stack["start"])
}

func (c *current) onSingleQuoteBoldTextElement53(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonSingleQuoteBoldTextElement53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement53(stack["name"], stack["start"])
}

func (c *current) onSingleQuoteBoldTextElement79() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement79() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement79()
}

func (c *current) onSingleQuoteBoldTextElement75(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonSingleQuoteBoldTextElement75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement75(stack["name"])
}

func (c *current) onSingleQuoteBoldTextElement89() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement89() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement89()
}

func (c *current) onSingleQuoteBoldTextElement85(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonSingleQuoteBoldTextElement85() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement85(stack["name"])
}

func (c *current) onSingleQuoteBoldTextElement26(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuoteBoldTextElement26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement26(stack["element"])
}

func (c *current) onSingleQuoteBoldTextElement98() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters), nil

}

func (p *parser) callonSingleQuoteBoldTextElement98() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement98()
}

func (c *current) onSingleQuoteBoldTextElement107() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement107() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement107()
}

func (c *current) onSingleQuoteBoldTextElement111() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement111() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement111()
}

func (c *current) onSingleQuoteBoldTextElement117() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteBoldTextElement117() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement117()
}

func (c *current) onSingleQuoteBoldTextElement126() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement126() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement126()
}

func (c *current) onSingleQuoteBoldTextElement122(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonSingleQuoteBoldTextElement122() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement122(stack["name"])
}

func (c *current) onSingleQuoteBoldTextElement136() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement136() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement136()
}

func (c *current) onSingleQuoteBoldTextElement132(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonSingleQuoteBoldTextElement132() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement132(stack["name"])
}

func (c *current) onSingleQuoteBoldTextElement142() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteBoldTextElement142() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement142()
}

func (c *current) onSingleQuoteBoldTextElement103(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonSingleQuoteBoldTextElement103() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement103(stack["id"], stack["label"])
}

func (c *current) onSingleQuoteBoldTextElement149() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement149() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement149()
}

func (c *current) onSingleQuoteBoldTextElement145(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonSingleQuoteBoldTextElement145() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement145(stack["id"])
}

func (c *current) onSingleQuoteBoldTextElement101() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteBoldTextElement101() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement101()
}

func (c *current) onSingleQuoteBoldTextElement153() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonSingleQuoteBoldTextElement153() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement153()
}

func (c *current) onSingleQuoteBoldTextElement96(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuoteBoldTextElement96() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement96(stack["element"])
}

func (c *current) onSingleQuoteBoldTextElement159() (interface{}, error) {
	return types.NewSymbol("\"`")

}

func (p *parser) callonSingleQuoteBoldTextElement159() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement159()
}

func (c *current) onSingleQuoteBoldTextElement161() (interface{}, error) {
	return types.NewSymbol("`\"")

}

func (p *parser) callonSingleQuoteBoldTextElement161() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement161()
}

func (c *current) onSingleQuoteBoldTextElement163() (interface{}, error) {
	return types.NewSymbol("'`")

}

func (p *parser) callonSingleQuoteBoldTextElement163() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement163()
}

func (c *current) onSingleQuoteBoldTextElement165() (interface{}, error) {
	return types.NewSymbol("`'")

}

func (p *parser) callonSingleQuoteBoldTextElement165() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement165()
}

func (c *current) onSingleQuoteBoldTextElement167() (interface{}, error) {
	return types.NewSymbol("(C)")

}

func (p *parser) callonSingleQuoteBoldTextElement167() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement167()
}

func (c *current) onSingleQuoteBoldTextElement169() (interface{}, error) {
	return types.NewSymbol("(TM)")

}

func (p *parser) callonSingleQuoteBoldTextElement169() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement169()
}

func (c *current) onSingleQuoteBoldTextElement171() (interface{}, error) {
	return types.NewSymbol("(R)")

}

func (p *parser) callonSingleQuoteBoldTextElement171() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement171()
}

func (c *current) onSingleQuoteBoldTextElement173() (interface{}, error) {
	return types.NewSymbol("...")

}

func (p *parser) callonSingleQuoteBoldTextElement173() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement173()
}

func (c *current) onSingleQuoteBoldTextElement155() (interface{}, error) {
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonSingleQuoteBoldTextElement155() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement155()
}

func (c *current) onSingleQuoteBoldTextElement175() (interface{}, error) {
	return types.NewSymbol("\"`")

}

func (p *parser) callonSingleQuoteBoldTextElement175() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement175()
}

func (c *current) onSingleQuoteBoldTextElement177() (interface{}, error) {
	return types.NewSymbol("`\"")

}

func (p *parser) callonSingleQuoteBoldTextElement177() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement177()
}

func (c *current) onSingleQuoteBoldTextElement179() (interface{}, error) {
	return types.NewSymbol("'`")

}

func (p *parser) callonSingleQuoteBoldTextElement179() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement179()
}

func (c *current) onSingleQuoteBoldTextElement181() (interface{}, error) {
	return types.NewSymbol("`'")

}

func (p *parser) callonSingleQuoteBoldTextElement181() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement181()
}

func (c *current) onSingleQuoteBoldTextElement183() (interface{}, error) {
	return types.NewSymbol("(C)")

}

func (p *parser) callonSingleQuoteBoldTextElement183() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement183()
}

func (c *current) onSingleQuoteBoldTextElement185() (interface{}, error) {
	return types.NewSymbol("(TM)")

}

func (p *parser) callonSingleQuoteBoldTextElement185() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement185()
}

func (c *current) onSingleQuoteBoldTextElement187() (interface{}, error) {
	return types.NewSymbol("(R)")

}

func (p *parser) callonSingleQuoteBoldTextElement187() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement187()
}

func (c *current) onSingleQuoteBoldTextElement189() (interface{}, error) {
	return types.NewSymbol("...")

}

func (p *parser) callonSingleQuoteBoldTextElement189() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement189()
}

func (c *current) onSingleQuoteBoldTextElement191() (interface{}, error) {
	log.Debug("matched escaped apostrophe")
	return types.NewStringElement(strings.TrimSuffix(string(c.text), `\'`) + `'`) // retain the apostrophe, but discard the `\` escape char

}

func (p *parser) callonSingleQuoteBoldTextElement191() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement191()
}

func (c *current) onSingleQuoteBoldTextElement197() (interface{}, error) {
	return types.NewSymbolWithForeword("'", strings.TrimSuffix(string(c.text), `'`))

}

func (p *parser) callonSingleQuoteBoldTextElement197() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement197()
}

func (c *current) onSingleQuoteBoldTextElement208() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteBoldTextElement208() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement208()
}

func (c *current) onSingleQuoteBoldTextElement204(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonSingleQuoteBoldTextElement204() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement204(stack["ref"])
}

func (c *current) onSingleQuoteBoldTextElement216() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteBoldTextElement216() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement216()
}

func (c *current) onSingleQuoteBoldTextElement213() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteBoldTextElement213() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement213()
}

func (c *current) onQuotedTextInSingleQuoteBoldText2(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonQuotedTextInSingleQuoteBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuoteBoldText2(stack["element"])
}

func (c *current) onQuotedTextInSingleQuoteBoldText13(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInSingleQuoteBoldText13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuoteBoldText13(stack["attributes"], stack["text"])
}

func (c *current) onEscapedBoldText5() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedBoldText5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText5()
}

func (c *current) onEscapedBoldText2(backslashes, elements interface{}) (interface{}, error) {

	return types.NewEscapedQuotedText(backslashes.(string), "**", elements.([]interface{}))

}

func (p *parser) callonEscapedBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText17() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedBoldText17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText17()
}

func (c *current) onEscapedBoldText14(backslashes, elements interface{}) (interface{}, error) {

	result := append([]interface{}{"*"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "*", result)

}

func (p *parser) callonEscapedBoldText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText14(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText27() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedBoldText27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText27()
}

func (c *current) onEscapedBoldText24(backslashes, elements interface{}) (interface{}, error) {

	return types.NewEscapedQuotedText(backslashes.(string), "*", elements.([]interface{}))

}

func (p *parser) callonEscapedBoldText24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText24(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicText1(elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.DoubleQuoteItalic, elements.([]interface{}))

}

func (p *parser) callonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicText1(stack["elements"])
}

func (c *current) onDoubleQuoteItalicTextElement13() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement13()
}

func (c *current) onDoubleQuoteItalicTextElement7() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteItalicTextElement7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement7()
}

func (c *current) onDoubleQuoteItalicTextElement16() (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement16()
}

func (c *current) onDoubleQuoteItalicTextElement20() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteItalicTextElement20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement20()
}

func (c *current) onDoubleQuoteItalicTextElement26() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteItalicTextElement26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement26()
}

func (c *current) onDoubleQuoteItalicTextElement33() (bool, error) {
	return c.isSubstitutionEnabled(Attributes), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement33() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement33()
}

func (c *current) onDoubleQuoteItalicTextElement40() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement40()
}

func (c *current) onDoubleQuoteItalicTextElement52() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement52()
}

func (c *current) onDoubleQuoteItalicTextElement54() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuoteItalicTextElement54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement54()
}

func (c *current) onDoubleQuoteItalicTextElement47(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuoteItalicTextElement47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement47(stack["start"])
}

func (c *current) onDoubleQuoteItalicTextElement36(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonDoubleQuoteItalicTextElement36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement36(stack["name"], stack["start"])
}

func (c *current) onDoubleQuoteItalicTextElement62() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement62() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement62()
}

func (c *current) onDoubleQuoteItalicTextElement74() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement74()
}

func (c *current) onDoubleQuoteItalicTextElement76() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuoteItalicTextElement76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement76()
}

func (c *current) onDoubleQuoteItalicTextElement69(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuoteItalicTextElement69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement69(stack["start"])
}

func (c *current) onDoubleQuoteItalicTextElement58(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonDoubleQuoteItalicTextElement58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement58(stack["name"], stack["start"])
}

func (c *current) onDoubleQuoteItalicTextElement84() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement84()
}

func (c *current) onDoubleQuoteItalicTextElement80(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonDoubleQuoteItalicTextElement80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement80(stack["name"])
}

func (c *current) onDoubleQuoteItalicTextElement94() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement94() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement94()
}

func (c *current) onDoubleQuoteItalicTextElement90(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonDoubleQuoteItalicTextElement90() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement90(stack["name"])
}

func (c *current) onDoubleQuoteItalicTextElement31(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteItalicTextElement31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement31(stack["element"])
}

func (c *current) onDoubleQuoteItalicTextElement103() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement103() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement103()
}

func (c *current) onDoubleQuoteItalicTextElement112() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement112() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement112()
}

func (c *current) onDoubleQuoteItalicTextElement116() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement116()
}

func (c *current) onDoubleQuoteItalicTextElement122() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteItalicTextElement122() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement122()
}

func (c *current) onDoubleQuoteItalicTextElement131() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement131() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement131()
}

func (c *current) onDoubleQuoteItalicTextElement127(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonDoubleQuoteItalicTextElement127() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement127(stack["name"])
}

func (c *current) onDoubleQuoteItalicTextElement141() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement141() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement141()
}

func (c *current) onDoubleQuoteItalicTextElement137(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonDoubleQuoteItalicTextElement137() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement137(stack["name"])
}

func (c *current) onDoubleQuoteItalicTextElement147() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteItalicTextElement147() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement147()
}

func (c *current) onDoubleQuoteItalicTextElement108(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonDoubleQuoteItalicTextElement108() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement108(stack["id"], stack["label"])
}

func (c *current) onDoubleQuoteItalicTextElement154() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement154() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement154()
}

func (c *current) onDoubleQuoteItalicTextElement150(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonDoubleQuoteItalicTextElement150() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement150(stack["id"])
}

func (c *current) onDoubleQuoteItalicTextElement106() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteItalicTextElement106() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement106()
}

func (c *current) onDoubleQuoteItalicTextElement158() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonDoubleQuoteItalicTextElement158() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement158()
}

func (c *current) onDoubleQuoteItalicTextElement101(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteItalicTextElement101() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement101(stack["element"])
}

func (c *current) onDoubleQuoteItalicTextElement164() (interface{}, error) {
	return types.NewSymbol("\"`")

}

func (p *parser) callonDoubleQuoteItalicTextElement164() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement164()
}

func (c *current) onDoubleQuoteItalicTextElement166() (interface{}, error) {
	return types.NewSymbol("`\"")

}

func (p *parser) callonDoubleQuoteItalicTextElement166() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement166()
}

func (c *current) onDoubleQuoteItalicTextElement168() (interface{}, error) {
	return types.NewSymbol("'`")

}

func (p *parser) callonDoubleQuoteItalicTextElement168() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement168()
}

func (c *current) onDoubleQuoteItalicTextElement170() (interface{}, error) {
	return types.NewSymbol("`'")

}

func (p *parser) callonDoubleQuoteItalicTextElement170() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement170()
}

func (c *current) onDoubleQuoteItalicTextElement172() (interface{}, error) {
	return types.NewSymbol("(C)")

}

func (p *parser) callonDoubleQuoteItalicTextElement172() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement172()
}

func (c *current) onDoubleQuoteItalicTextElement174() (interface{}, error) {
	return types.NewSymbol("(TM)")

}

func (p *parser) callonDoubleQuoteItalicTextElement174() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement174()
}

func (c *current) onDoubleQuoteItalicTextElement176() (interface{}, error) {
	return types.NewSymbol("(R)")

}

func (p *parser) callonDoubleQuoteItalicTextElement176() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement176()
}

func (c *current) onDoubleQuoteItalicTextElement178() (interface{}, error) {
	return types.NewSymbol("...")

}

func (p *parser) callonDoubleQuoteItalicTextElement178() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement178()
}

func (c *current) onDoubleQuoteItalicTextElement160() (interface{}, error) {
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonDoubleQuoteItalicTextElement160() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement160()
}

func (c *current) onDoubleQuoteItalicTextElement180() (interface{}, error) {
	return types.NewSymbol("\"`")

}

func (p *parser) callonDoubleQuoteItalicTextElement180() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement180()
}

func (c *current) onDoubleQuoteItalicTextElement182() (interface{}, error) {
	return types.NewSymbol("`\"")

}

func (p *parser) callonDoubleQuoteItalicTextElement182() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement182()
}

func (c *current) onDoubleQuoteItalicTextElement184() (interface{}, error) {
	return types.NewSymbol("'`")

}

func (p *parser) callonDoubleQuoteItalicTextElement184() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement184()
}

func (c *current) onDoubleQuoteItalicTextElement186() (interface{}, error) {
	return types.NewSymbol("`'")

}

func (p *parser) callonDoubleQuoteItalicTextElement186() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement186()
}

func (c *current) onDoubleQuoteItalicTextElement188() (interface{}, error) {
	return types.NewSymbol("(C)")

}

func (p *parser) callonDoubleQuoteItalicTextElement188() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement188()
}

func (c *current) onDoubleQuoteItalicTextElement190() (interface{}, error) {
	return types.NewSymbol("(TM)")

}

func (p *parser) callonDoubleQuoteItalicTextElement190() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement190()
}

func (c *current) onDoubleQuoteItalicTextElement192() (interface{}, error) {
	return types.NewSymbol("(R)")

}

func (p *parser) callonDoubleQuoteItalicTextElement192() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement192()
}

func (c *current) onDoubleQuoteItalicTextElement194() (interface{}, error) {
	return types.NewSymbol("...")

}

func (p *parser) callonDoubleQuoteItalicTextElement194() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement194()
}

func (c *current) onDoubleQuoteItalicTextElement196() (interface{}, error) {
	log.Debug("matched escaped apostrophe")
	return types.NewStringElement(strings.TrimSuffix(string(c.text), `\'`) + `'`) // retain the apostrophe, but discard the `\` escape char

}

func (p *parser) callonDoubleQuoteItalicTextElement196() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement196()
}

func (c *current) onDoubleQuoteItalicTextElement202() (interface{}, error) {
	return types.NewSymbolWithForeword("'", strings.TrimSuffix(string(c.text), `'`))

}

func (p *parser) callonDoubleQuoteItalicTextElement202() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement202()
}

func (c *current) onDoubleQuoteItalicTextElement213() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteItalicTextElement213() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement213()
}

func (c *current) onDoubleQuoteItalicTextElement209(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonDoubleQuoteItalicTextElement209() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement209(stack["ref"])
}

func (c *current) onDoubleQuoteItalicTextElement221() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteItalicTextElement221() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement221()
}

func (c *current) onDoubleQuoteItalicTextElement218() (interface{}, error) {
	// or a italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteItalicTextElement218() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement218()
}

func (c *current) onDoubleQuoteItalicTextElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteItalicTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement1(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuoteItalicText2(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonQuotedTextInDoubleQuoteItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuoteItalicText2(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuoteItalicText13(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInDoubleQuoteItalicText13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuoteItalicText13(stack["attributes"], stack["text"])
}

func (c *current) onSingleQuoteItalicText1(elements interface{}) (interface{}, error) {

	return types.NewQuotedText(types.SingleQuoteItalic, elements.([]interface{}))

}

func (p *parser) callonSingleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText1(stack["elements"])
}

func (c *current) onSingleQuoteItalicTextElements7() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElements7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElements7()
}

func (c *current) onSingleQuoteItalicTextElements12(elements interface{}) (bool, error) {
	return validateSingleQuoteElements(elements.([]interface{})) // cannot end with spaces

}

func (p *parser) callonSingleQuoteItalicTextElements12() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElements12(stack["elements"])
}

func (c *current) onSingleQuoteItalicTextElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonSingleQuoteItalicTextElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElements1(stack["elements"])
}

func (c *current) onSingleQuoteItalicTextElement8() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement8()
}

func (c *current) onSingleQuoteItalicTextElement2() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteItalicTextElement2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement2()
}

func (c *current) onSingleQuoteItalicTextElement11() (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement11()
}

func (c *current) onSingleQuoteItalicTextElement15() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteItalicTextElement15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement15()
}

func (c *current) onSingleQuoteItalicTextElement21() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteItalicTextElement21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement21()
}

func (c *current) onSingleQuoteItalicTextElement28() (bool, error) {
	return c.isSubstitutionEnabled(Attributes), nil

}

func (p *parser) callonSingleQuoteItalicTextElement28() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement28()
}

func (c *current) onSingleQuoteItalicTextElement35() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement35()
}

func (c *current) onSingleQuoteItalicTextElement47() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement47()
}

func (c *current) onSingleQuoteItalicTextElement49() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuoteItalicTextElement49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement49()
}

func (c *current) onSingleQuoteItalicTextElement42(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuoteItalicTextElement42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement42(stack["start"])
}

func (c *current) onSingleQuoteItalicTextElement31(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonSingleQuoteItalicTextElement31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement31(stack["name"], stack["start"])
}

func (c *current) onSingleQuoteItalicTextElement57() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement57() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement57()
}

func (c *current) onSingleQuoteItalicTextElement69() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement69()
}

func (c *current) onSingleQuoteItalicTextElement71() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuoteItalicTextElement71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement71()
}

func (c *current) onSingleQuoteItalicTextElement64(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuoteItalicTextElement64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement64(stack["start"])
}

func (c *current) onSingleQuoteItalicTextElement53(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonSingleQuoteItalicTextElement53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement53(stack["name"], stack["start"])
}

func (c *current) onSingleQuoteItalicTextElement79() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement79() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement79()
}

func (c *current) onSingleQuoteItalicTextElement75(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonSingleQuoteItalicTextElement75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement75(stack["name"])
}

func (c *current) onSingleQuoteItalicTextElement89() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement89() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement89()
}

func (c *current) onSingleQuoteItalicTextElement85(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonSingleQuoteItalicTextElement85() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement85(stack["name"])
}

func (c *current) onSingleQuoteItalicTextElement26(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuoteItalicTextElement26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement26(stack["element"])
}

func (c *current) onSingleQuoteItalicTextElement98() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters), nil

}

func (p *parser) callonSingleQuoteItalicTextElement98() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement98()
}

func (c *current) onSingleQuoteItalicTextElement107() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement107() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement107()
}

func (c *current) onSingleQuoteItalicTextElement111() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement111() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement111()
}

func (c *current) onSingleQuoteItalicTextElement117() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteItalicTextElement117() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement117()
}

func (c *current) onSingleQuoteItalicTextElement126() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement126() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement126()
}

func (c *current) onSingleQuoteItalicTextElement122(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonSingleQuoteItalicTextElement122() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement122(stack["name"])
}

func (c *current) onSingleQuoteItalicTextElement136() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement136() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement136()
}

func (c *current) onSingleQuoteItalicTextElement132(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonSingleQuoteItalicTextElement132() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement132(stack["name"])
}

func (c *current) onSingleQuoteItalicTextElement142() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteItalicTextElement142() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement142()
}

func (c *current) onSingleQuoteItalicTextElement103(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonSingleQuoteItalicTextElement103() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement103(stack["id"], stack["label"])
}

func (c *current) onSingleQuoteItalicTextElement149() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement149() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement149()
}

func (c *current) onSingleQuoteItalicTextElement145(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonSingleQuoteItalicTextElement145() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement145(stack["id"])
}

func (c *current) onSingleQuoteItalicTextElement101() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteItalicTextElement101() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement101()
}

func (c *current) onSingleQuoteItalicTextElement153() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonSingleQuoteItalicTextElement153() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement153()
}

func (c *current) onSingleQuoteItalicTextElement96(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuoteItalicTextElement96() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement96(stack["element"])
}

func (c *current) onSingleQuoteItalicTextElement159() (interface{}, error) {
	return types.NewSymbol("\"`")

}

func (p *parser) callonSingleQuoteItalicTextElement159() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement159()
}

func (c *current) onSingleQuoteItalicTextElement161() (interface{}, error) {
	return types.NewSymbol("`\"")

}

func (p *parser) callonSingleQuoteItalicTextElement161() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement161()
}

func (c *current) onSingleQuoteItalicTextElement163() (interface{}, error) {
	return types.NewSymbol("'`")

}

func (p *parser) callonSingleQuoteItalicTextElement163() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement163()
}

func (c *current) onSingleQuoteItalicTextElement165() (interface{}, error) {
	return types.NewSymbol("`'")

}

func (p *parser) callonSingleQuoteItalicTextElement165() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement165()
}

func (c *current) onSingleQuoteItalicTextElement167() (interface{}, error) {
	return types.NewSymbol("(C)")

}

func (p *parser) callonSingleQuoteItalicTextElement167() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement167()
}

func (c *current) onSingleQuoteItalicTextElement169() (interface{}, error) {
	return types.NewSymbol("(TM)")

}

func (p *parser) callonSingleQuoteItalicTextElement169() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement169()
}

func (c *current) onSingleQuoteItalicTextElement171() (interface{}, error) {
	return types.NewSymbol("(R)")

}

func (p *parser) callonSingleQuoteItalicTextElement171() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement171()
}

func (c *current) onSingleQuoteItalicTextElement173() (interface{}, error) {
	return types.NewSymbol("...")

}

func (p *parser) callonSingleQuoteItalicTextElement173() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement173()
}

func (c *current) onSingleQuoteItalicTextElement155() (interface{}, error) {
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonSingleQuoteItalicTextElement155() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement155()
}

func (c *current) onSingleQuoteItalicTextElement175() (interface{}, error) {
	return types.NewSymbol("\"`")

}

func (p *parser) callonSingleQuoteItalicTextElement175() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement175()
}

func (c *current) onSingleQuoteItalicTextElement177() (interface{}, error) {
	return types.NewSymbol("`\"")

}

func (p *parser) callonSingleQuoteItalicTextElement177() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement177()
}

func (c *current) onSingleQuoteItalicTextElement179() (interface{}, error) {
	return types.NewSymbol("'`")

}

func (p *parser) callonSingleQuoteItalicTextElement179() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement179()
}

func (c *current) onSingleQuoteItalicTextElement181() (interface{}, error) {
	return types.NewSymbol("`'")

}

func (p *parser) callonSingleQuoteItalicTextElement181() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement181()
}

func (c *current) onSingleQuoteItalicTextElement183() (interface{}, error) {
	return types.NewSymbol("(C)")

}

func (p *parser) callonSingleQuoteItalicTextElement183() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement183()
}

func (c *current) onSingleQuoteItalicTextElement185() (interface{}, error) {
	return types.NewSymbol("(TM)")

}

func (p *parser) callonSingleQuoteItalicTextElement185() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement185()
}

func (c *current) onSingleQuoteItalicTextElement187() (interface{}, error) {
	return types.NewSymbol("(R)")

}

func (p *parser) callonSingleQuoteItalicTextElement187() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement187()
}

func (c *current) onSingleQuoteItalicTextElement189() (interface{}, error) {
	return types.NewSymbol("...")

}

func (p *parser) callonSingleQuoteItalicTextElement189() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement189()
}

func (c *current) onSingleQuoteItalicTextElement191() (interface{}, error) {
	log.Debug("matched escaped apostrophe")
	return types.NewStringElement(strings.TrimSuffix(string(c.text), `\'`) + `'`) // retain the apostrophe, but discard the `\` escape char

}

func (p *parser) callonSingleQuoteItalicTextElement191() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement191()
}

func (c *current) onSingleQuoteItalicTextElement197() (interface{}, error) {
	return types.NewSymbolWithForeword("'", strings.TrimSuffix(string(c.text), `'`))

}

func (p *parser) callonSingleQuoteItalicTextElement197() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement197()
}

func (c *current) onSingleQuoteItalicTextElement208() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteItalicTextElement208() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement208()
}

func (c *current) onSingleQuoteItalicTextElement204(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonSingleQuoteItalicTextElement204() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement204(stack["ref"])
}

func (c *current) onSingleQuoteItalicTextElement216() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteItalicTextElement216() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement216()
}

func (c *current) onSingleQuoteItalicTextElement213() (interface{}, error) {
	// or an italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteItalicTextElement213() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement213()
}

func (c *current) onQuotedTextInSingleQuoteItalicText2(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonQuotedTextInSingleQuoteItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuoteItalicText2(stack["element"])
}

func (c *current) onQuotedTextInSingleQuoteItalicText13(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInSingleQuoteItalicText13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuoteItalicText13(stack["attributes"], stack["text"])
}

func (c *current) onEscapedItalicText5() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedItalicText5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText5()
}

func (c *current) onEscapedItalicText2(backslashes, elements interface{}) (interface{}, error) {
	return types.NewEscapedQuotedText(backslashes.(string), "__", elements.([]interface{}))

}

func (p *parser) callonEscapedItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText17() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedItalicText17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText17()
}

func (c *current) onEscapedItalicText14(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation
	result := append([]interface{}{"_"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "_", result)

}

func (p *parser) callonEscapedItalicText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText14(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText27() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedItalicText27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText27()
}

func (c *current) onEscapedItalicText24(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "_", elements.([]interface{}))

}

func (p *parser) callonEscapedItalicText24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText24(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceText1(elements interface{}) (interface{}, error) {

	return types.NewQuotedText(types.DoubleQuoteMonospace, elements.([]interface{}))

}

func (p *parser) callonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceText1(stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceTextElement13() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement13()
}

func (c *current) onDoubleQuoteMonospaceTextElement7() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextElement7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement7()
}

func (c *current) onDoubleQuoteMonospaceTextElement16() (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement16()
}

func (c *current) onDoubleQuoteMonospaceTextElement20() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteMonospaceTextElement20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement20()
}

func (c *current) onDoubleQuoteMonospaceTextElement26() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteMonospaceTextElement26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement26()
}

func (c *current) onDoubleQuoteMonospaceTextElement33() (bool, error) {
	return c.isSubstitutionEnabled(Attributes), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement33() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement33()
}

func (c *current) onDoubleQuoteMonospaceTextElement40() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement40()
}

func (c *current) onDoubleQuoteMonospaceTextElement52() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement52()
}

func (c *current) onDoubleQuoteMonospaceTextElement54() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextElement54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement54()
}

func (c *current) onDoubleQuoteMonospaceTextElement47(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement47(stack["start"])
}

func (c *current) onDoubleQuoteMonospaceTextElement36(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonDoubleQuoteMonospaceTextElement36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement36(stack["name"], stack["start"])
}

func (c *current) onDoubleQuoteMonospaceTextElement62() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement62() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement62()
}

func (c *current) onDoubleQuoteMonospaceTextElement74() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement74()
}

func (c *current) onDoubleQuoteMonospaceTextElement76() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextElement76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement76()
}

func (c *current) onDoubleQuoteMonospaceTextElement69(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement69(stack["start"])
}

func (c *current) onDoubleQuoteMonospaceTextElement58(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonDoubleQuoteMonospaceTextElement58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement58(stack["name"], stack["start"])
}

func (c *current) onDoubleQuoteMonospaceTextElement84() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement84()
}

func (c *current) onDoubleQuoteMonospaceTextElement80(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonDoubleQuoteMonospaceTextElement80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement80(stack["name"])
}

func (c *current) onDoubleQuoteMonospaceTextElement94() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement94() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement94()
}

func (c *current) onDoubleQuoteMonospaceTextElement90(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextElement90() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement90(stack["name"])
}

func (c *current) onDoubleQuoteMonospaceTextElement31(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement31(stack["element"])
}

func (c *current) onDoubleQuoteMonospaceTextElement103() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement103() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement103()
}

func (c *current) onDoubleQuoteMonospaceTextElement112() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement112() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement112()
}

func (c *current) onDoubleQuoteMonospaceTextElement116() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement116()
}

func (c *current) onDoubleQuoteMonospaceTextElement122() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextElement122() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement122()
}

func (c *current) onDoubleQuoteMonospaceTextElement131() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement131() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement131()
}

func (c *current) onDoubleQuoteMonospaceTextElement127(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonDoubleQuoteMonospaceTextElement127() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement127(stack["name"])
}

func (c *current) onDoubleQuoteMonospaceTextElement141() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement141() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement141()
}

func (c *current) onDoubleQuoteMonospaceTextElement137(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextElement137() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement137(stack["name"])
}

func (c *current) onDoubleQuoteMonospaceTextElement147() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextElement147() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement147()
}

func (c *current) onDoubleQuoteMonospaceTextElement108(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonDoubleQuoteMonospaceTextElement108() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement108(stack["id"], stack["label"])
}

func (c *current) onDoubleQuoteMonospaceTextElement154() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement154() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement154()
}

func (c *current) onDoubleQuoteMonospaceTextElement150(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonDoubleQuoteMonospaceTextElement150() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement150(stack["id"])
}

func (c *current) onDoubleQuoteMonospaceTextElement106() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextElement106() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement106()
}

func (c *current) onDoubleQuoteMonospaceTextElement158() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextElement158() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement158()
}

func (c *current) onDoubleQuoteMonospaceTextElement101(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement101() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement101(stack["element"])
}

func (c *current) onDoubleQuoteMonospaceTextElement164() (interface{}, error) {
	return types.NewSymbol("\"`")

}

func (p *parser) callonDoubleQuoteMonospaceTextElement164() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement164()
}

func (c *current) onDoubleQuoteMonospaceTextElement166() (interface{}, error) {
	return types.NewSymbol("`\"")

}

func (p *parser) callonDoubleQuoteMonospaceTextElement166() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement166()
}

func (c *current) onDoubleQuoteMonospaceTextElement168() (interface{}, error) {
	return types.NewSymbol("'`")

}

func (p *parser) callonDoubleQuoteMonospaceTextElement168() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement168()
}

func (c *current) onDoubleQuoteMonospaceTextElement170() (interface{}, error) {
	return types.NewSymbol("`'")

}

func (p *parser) callonDoubleQuoteMonospaceTextElement170() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement170()
}

func (c *current) onDoubleQuoteMonospaceTextElement172() (interface{}, error) {
	return types.NewSymbol("(C)")

}

func (p *parser) callonDoubleQuoteMonospaceTextElement172() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement172()
}

func (c *current) onDoubleQuoteMonospaceTextElement174() (interface{}, error) {
	return types.NewSymbol("(TM)")

}

func (p *parser) callonDoubleQuoteMonospaceTextElement174() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement174()
}

func (c *current) onDoubleQuoteMonospaceTextElement176() (interface{}, error) {
	return types.NewSymbol("(R)")

}

func (p *parser) callonDoubleQuoteMonospaceTextElement176() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement176()
}

func (c *current) onDoubleQuoteMonospaceTextElement178() (interface{}, error) {
	return types.NewSymbol("...")

}

func (p *parser) callonDoubleQuoteMonospaceTextElement178() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement178()
}

func (c *current) onDoubleQuoteMonospaceTextElement160() (interface{}, error) {
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonDoubleQuoteMonospaceTextElement160() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement160()
}

func (c *current) onDoubleQuoteMonospaceTextElement180() (interface{}, error) {
	return types.NewSymbol("\"`")

}

func (p *parser) callonDoubleQuoteMonospaceTextElement180() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement180()
}

func (c *current) onDoubleQuoteMonospaceTextElement182() (interface{}, error) {
	return types.NewSymbol("`\"")

}

func (p *parser) callonDoubleQuoteMonospaceTextElement182() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement182()
}

func (c *current) onDoubleQuoteMonospaceTextElement184() (interface{}, error) {
	return types.NewSymbol("'`")

}

func (p *parser) callonDoubleQuoteMonospaceTextElement184() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement184()
}

func (c *current) onDoubleQuoteMonospaceTextElement186() (interface{}, error) {
	return types.NewSymbol("`'")

}

func (p *parser) callonDoubleQuoteMonospaceTextElement186() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement186()
}

func (c *current) onDoubleQuoteMonospaceTextElement188() (interface{}, error) {
	return types.NewSymbol("(C)")

}

func (p *parser) callonDoubleQuoteMonospaceTextElement188() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement188()
}

func (c *current) onDoubleQuoteMonospaceTextElement190() (interface{}, error) {
	return types.NewSymbol("(TM)")

}

func (p *parser) callonDoubleQuoteMonospaceTextElement190() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement190()
}

func (c *current) onDoubleQuoteMonospaceTextElement192() (interface{}, error) {
	return types.NewSymbol("(R)")

}

func (p *parser) callonDoubleQuoteMonospaceTextElement192() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement192()
}

func (c *current) onDoubleQuoteMonospaceTextElement194() (interface{}, error) {
	return types.NewSymbol("...")

}

func (p *parser) callonDoubleQuoteMonospaceTextElement194() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement194()
}

func (c *current) onDoubleQuoteMonospaceTextElement196() (interface{}, error) {
	log.Debug("matched escaped apostrophe")
	return types.NewStringElement(strings.TrimSuffix(string(c.text), `\'`) + `'`) // retain the apostrophe, but discard the `\` escape char

}

func (p *parser) callonDoubleQuoteMonospaceTextElement196() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement196()
}

func (c *current) onDoubleQuoteMonospaceTextElement202() (interface{}, error) {
	return types.NewSymbolWithForeword("'", strings.TrimSuffix(string(c.text), `'`))

}

func (p *parser) callonDoubleQuoteMonospaceTextElement202() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement202()
}

func (c *current) onDoubleQuoteMonospaceTextElement214() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteMonospaceTextElement214() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement214()
}

func (c *current) onDoubleQuoteMonospaceTextElement210(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonDoubleQuoteMonospaceTextElement210() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement210(stack["ref"])
}

func (c *current) onDoubleQuoteMonospaceTextElement222() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement222() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement222()
}

func (c *current) onDoubleQuoteMonospaceTextElement219() (interface{}, error) {
	// ` or a monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextElement219() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement219()
}

func (c *current) onDoubleQuoteMonospaceTextElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteMonospaceTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement1(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuoteMonospaceText2(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonQuotedTextInDoubleQuoteMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuoteMonospaceText2(stack["element"])
}

func (c *current) onQuotedTextInDoubleQuoteMonospaceText13(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInDoubleQuoteMonospaceText13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleQuoteMonospaceText13(stack["attributes"], stack["text"])
}

func (c *current) onSingleQuoteMonospaceText1(elements interface{}) (interface{}, error) {

	return types.NewQuotedText(types.SingleQuoteMonospace, elements.([]interface{}))

}

func (p *parser) callonSingleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText1(stack["elements"])
}

func (c *current) onSingleQuoteMonospaceTextElements7() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElements7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElements7()
}

func (c *current) onSingleQuoteMonospaceTextElements12(elements interface{}) (bool, error) {
	return validateSingleQuoteElements(elements.([]interface{})) // cannot end with spaces

}

func (p *parser) callonSingleQuoteMonospaceTextElements12() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElements12(stack["elements"])
}

func (c *current) onSingleQuoteMonospaceTextElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonSingleQuoteMonospaceTextElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElements1(stack["elements"])
}

func (c *current) onSingleQuoteMonospaceTextElement2() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextElement2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement2()
}

func (c *current) onSingleQuoteMonospaceTextElement11() (interface{}, error) {
	// allow `
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextElement11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement11()
}

func (c *current) onSingleQuoteMonospaceTextElement20() (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement20()
}

func (c *current) onSingleQuoteMonospaceTextElement24() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteMonospaceTextElement24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement24()
}

func (c *current) onSingleQuoteMonospaceTextElement30() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteMonospaceTextElement30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement30()
}

func (c *current) onSingleQuoteMonospaceTextElement37() (bool, error) {
	return c.isSubstitutionEnabled(Attributes), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement37() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement37()
}

func (c *current) onSingleQuoteMonospaceTextElement44() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement44()
}

func (c *current) onSingleQuoteMonospaceTextElement56() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement56()
}

func (c *current) onSingleQuoteMonospaceTextElement58() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextElement58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement58()
}

func (c *current) onSingleQuoteMonospaceTextElement51(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement51() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement51(stack["start"])
}

func (c *current) onSingleQuoteMonospaceTextElement40(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonSingleQuoteMonospaceTextElement40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement40(stack["name"], stack["start"])
}

func (c *current) onSingleQuoteMonospaceTextElement66() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement66() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement66()
}

func (c *current) onSingleQuoteMonospaceTextElement78() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement78()
}

func (c *current) onSingleQuoteMonospaceTextElement80() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextElement80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement80()
}

func (c *current) onSingleQuoteMonospaceTextElement73(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement73() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement73(stack["start"])
}

func (c *current) onSingleQuoteMonospaceTextElement62(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonSingleQuoteMonospaceTextElement62() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement62(stack["name"], stack["start"])
}

func (c *current) onSingleQuoteMonospaceTextElement88() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement88() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement88()
}

func (c *current) onSingleQuoteMonospaceTextElement84(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonSingleQuoteMonospaceTextElement84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement84(stack["name"])
}

func (c *current) onSingleQuoteMonospaceTextElement98() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement98() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement98()
}

func (c *current) onSingleQuoteMonospaceTextElement94(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextElement94() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement94(stack["name"])
}

func (c *current) onSingleQuoteMonospaceTextElement35(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement35(stack["element"])
}

func (c *current) onSingleQuoteMonospaceTextElement107() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement107() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement107()
}

func (c *current) onSingleQuoteMonospaceTextElement116() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement116()
}

func (c *current) onSingleQuoteMonospaceTextElement120() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement120() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement120()
}

func (c *current) onSingleQuoteMonospaceTextElement126() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextElement126() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement126()
}

func (c *current) onSingleQuoteMonospaceTextElement135() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement135() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement135()
}

func (c *current) onSingleQuoteMonospaceTextElement131(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonSingleQuoteMonospaceTextElement131() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement131(stack["name"])
}

func (c *current) onSingleQuoteMonospaceTextElement145() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement145() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement145()
}

func (c *current) onSingleQuoteMonospaceTextElement141(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextElement141() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement141(stack["name"])
}

func (c *current) onSingleQuoteMonospaceTextElement151() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextElement151() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement151()
}

func (c *current) onSingleQuoteMonospaceTextElement112(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonSingleQuoteMonospaceTextElement112() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement112(stack["id"], stack["label"])
}

func (c *current) onSingleQuoteMonospaceTextElement158() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement158() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement158()
}

func (c *current) onSingleQuoteMonospaceTextElement154(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonSingleQuoteMonospaceTextElement154() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement154(stack["id"])
}

func (c *current) onSingleQuoteMonospaceTextElement110() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextElement110() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement110()
}

func (c *current) onSingleQuoteMonospaceTextElement162() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextElement162() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement162()
}

func (c *current) onSingleQuoteMonospaceTextElement105(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement105() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement105(stack["element"])
}

func (c *current) onSingleQuoteMonospaceTextElement168() (interface{}, error) {
	return types.NewSymbol("\"`")

}

func (p *parser) callonSingleQuoteMonospaceTextElement168() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement168()
}

func (c *current) onSingleQuoteMonospaceTextElement170() (interface{}, error) {
	return types.NewSymbol("`\"")

}

func (p *parser) callonSingleQuoteMonospaceTextElement170() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement170()
}

func (c *current) onSingleQuoteMonospaceTextElement172() (interface{}, error) {
	return types.NewSymbol("'`")

}

func (p *parser) callonSingleQuoteMonospaceTextElement172() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement172()
}

func (c *current) onSingleQuoteMonospaceTextElement174() (interface{}, error) {
	return types.NewSymbol("`'")

}

func (p *parser) callonSingleQuoteMonospaceTextElement174() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement174()
}

func (c *current) onSingleQuoteMonospaceTextElement176() (interface{}, error) {
	return types.NewSymbol("(C)")

}

func (p *parser) callonSingleQuoteMonospaceTextElement176() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement176()
}

func (c *current) onSingleQuoteMonospaceTextElement178() (interface{}, error) {
	return types.NewSymbol("(TM)")

}

func (p *parser) callonSingleQuoteMonospaceTextElement178() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement178()
}

func (c *current) onSingleQuoteMonospaceTextElement180() (interface{}, error) {
	return types.NewSymbol("(R)")

}

func (p *parser) callonSingleQuoteMonospaceTextElement180() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement180()
}

func (c *current) onSingleQuoteMonospaceTextElement182() (interface{}, error) {
	return types.NewSymbol("...")

}

func (p *parser) callonSingleQuoteMonospaceTextElement182() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement182()
}

func (c *current) onSingleQuoteMonospaceTextElement164() (interface{}, error) {
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonSingleQuoteMonospaceTextElement164() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement164()
}

func (c *current) onSingleQuoteMonospaceTextElement184() (interface{}, error) {
	return types.NewSymbol("\"`")

}

func (p *parser) callonSingleQuoteMonospaceTextElement184() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement184()
}

func (c *current) onSingleQuoteMonospaceTextElement186() (interface{}, error) {
	return types.NewSymbol("`\"")

}

func (p *parser) callonSingleQuoteMonospaceTextElement186() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement186()
}

func (c *current) onSingleQuoteMonospaceTextElement188() (interface{}, error) {
	return types.NewSymbol("'`")

}

func (p *parser) callonSingleQuoteMonospaceTextElement188() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement188()
}

func (c *current) onSingleQuoteMonospaceTextElement190() (interface{}, error) {
	return types.NewSymbol("`'")

}

func (p *parser) callonSingleQuoteMonospaceTextElement190() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement190()
}

func (c *current) onSingleQuoteMonospaceTextElement192() (interface{}, error) {
	return types.NewSymbol("(C)")

}

func (p *parser) callonSingleQuoteMonospaceTextElement192() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement192()
}

func (c *current) onSingleQuoteMonospaceTextElement194() (interface{}, error) {
	return types.NewSymbol("(TM)")

}

func (p *parser) callonSingleQuoteMonospaceTextElement194() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement194()
}

func (c *current) onSingleQuoteMonospaceTextElement196() (interface{}, error) {
	return types.NewSymbol("(R)")

}

func (p *parser) callonSingleQuoteMonospaceTextElement196() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement196()
}

func (c *current) onSingleQuoteMonospaceTextElement198() (interface{}, error) {
	return types.NewSymbol("...")

}

func (p *parser) callonSingleQuoteMonospaceTextElement198() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement198()
}

func (c *current) onSingleQuoteMonospaceTextElement200() (interface{}, error) {
	log.Debug("matched escaped apostrophe")
	return types.NewStringElement(strings.TrimSuffix(string(c.text), `\'`) + `'`) // retain the apostrophe, but discard the `\` escape char

}

func (p *parser) callonSingleQuoteMonospaceTextElement200() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement200()
}

func (c *current) onSingleQuoteMonospaceTextElement206() (interface{}, error) {
	return types.NewSymbolWithForeword("'", strings.TrimSuffix(string(c.text), `'`))

}

func (p *parser) callonSingleQuoteMonospaceTextElement206() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement206()
}

func (c *current) onSingleQuoteMonospaceTextElement218() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteMonospaceTextElement218() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement218()
}

func (c *current) onSingleQuoteMonospaceTextElement214(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonSingleQuoteMonospaceTextElement214() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement214(stack["ref"])
}

func (c *current) onSingleQuoteMonospaceTextElement227() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMonospaceTextElement227() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement227()
}

func (c *current) onSingleQuoteMonospaceTextElement222() (interface{}, error) {
	// or an monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextElement222() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement222()
}

func (c *current) onQuotedTextInSingleQuoteMonospaceText2(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonQuotedTextInSingleQuoteMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuoteMonospaceText2(stack["element"])
}

func (c *current) onQuotedTextInSingleQuoteMonospaceText13(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInSingleQuoteMonospaceText13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuoteMonospaceText13(stack["attributes"], stack["text"])
}

func (c *current) onEscapedMonospaceText5() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedMonospaceText5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText5()
}

func (c *current) onEscapedMonospaceText2(backslashes, elements interface{}) (interface{}, error) {
	return types.NewEscapedQuotedText(backslashes.(string), "``", elements.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText17() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedMonospaceText17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText17()
}

func (c *current) onEscapedMonospaceText14(backslashes, elements interface{}) (interface{}, error) {
	result := append([]interface{}{"`"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "`", result)

}

func (p *parser) callonEscapedMonospaceText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText14(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText27() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedMonospaceText27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText27()
}

func (c *current) onEscapedMonospaceText24(backslashes, elements interface{}) (interface{}, error) {
	return types.NewEscapedQuotedText(backslashes.(string), "`", elements.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText24(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMarkedText1(elements interface{}) (interface{}, error) {

	return types.NewQuotedText(types.DoubleQuoteMarked, elements.([]interface{}))

}

func (p *parser) callonDoubleQuoteMarkedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedText1(stack["elements"])
}

func (c *current) onDoubleQuoteMarkedTextElement13() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement13()
}

func (c *current) onDoubleQuoteMarkedTextElement7() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMarkedTextElement7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement7()
}

func (c *current) onDoubleQuoteMarkedTextElement16() (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement16()
}

func (c *current) onDoubleQuoteMarkedTextElement20() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteMarkedTextElement20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement20()
}

func (c *current) onDoubleQuoteMarkedTextElement26() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteMarkedTextElement26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement26()
}

func (c *current) onDoubleQuoteMarkedTextElement33() (bool, error) {
	return c.isSubstitutionEnabled(Attributes), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement33() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement33()
}

func (c *current) onDoubleQuoteMarkedTextElement40() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement40()
}

func (c *current) onDoubleQuoteMarkedTextElement52() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement52()
}

func (c *current) onDoubleQuoteMarkedTextElement54() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuoteMarkedTextElement54() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement54()
}

func (c *current) onDoubleQuoteMarkedTextElement47(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement47(stack["start"])
}

func (c *current) onDoubleQuoteMarkedTextElement36(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonDoubleQuoteMarkedTextElement36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement36(stack["name"], stack["start"])
}

func (c *current) onDoubleQuoteMarkedTextElement62() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement62() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement62()
}

func (c *current) onDoubleQuoteMarkedTextElement74() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement74()
}

func (c *current) onDoubleQuoteMarkedTextElement76() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonDoubleQuoteMarkedTextElement76() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement76()
}

func (c *current) onDoubleQuoteMarkedTextElement69(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement69(stack["start"])
}

func (c *current) onDoubleQuoteMarkedTextElement58(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonDoubleQuoteMarkedTextElement58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement58(stack["name"], stack["start"])
}

func (c *current) onDoubleQuoteMarkedTextElement84() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement84()
}

func (c *current) onDoubleQuoteMarkedTextElement80(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonDoubleQuoteMarkedTextElement80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement80(stack["name"])
}

func (c *current) onDoubleQuoteMarkedTextElement94() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement94() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement94()
}

func (c *current) onDoubleQuoteMarkedTextElement90(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonDoubleQuoteMarkedTextElement90() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement90(stack["name"])
}

func (c *current) onDoubleQuoteMarkedTextElement31(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement31(stack["element"])
}

func (c *current) onDoubleQuoteMarkedTextElement103() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement103() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement103()
}

func (c *current) onDoubleQuoteMarkedTextElement112() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement112() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement112()
}

func (c *current) onDoubleQuoteMarkedTextElement116() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement116()
}

func (c *current) onDoubleQuoteMarkedTextElement122() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMarkedTextElement122() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement122()
}

func (c *current) onDoubleQuoteMarkedTextElement131() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement131() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement131()
}

func (c *current) onDoubleQuoteMarkedTextElement127(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonDoubleQuoteMarkedTextElement127() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement127(stack["name"])
}

func (c *current) onDoubleQuoteMarkedTextElement141() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement141() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement141()
}

func (c *current) onDoubleQuoteMarkedTextElement137(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonDoubleQuoteMarkedTextElement137() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement137(stack["name"])
}

func (c *current) onDoubleQuoteMarkedTextElement147() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMarkedTextElement147() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement147()
}

func (c *current) onDoubleQuoteMarkedTextElement108(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonDoubleQuoteMarkedTextElement108() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement108(stack["id"], stack["label"])
}

func (c *current) onDoubleQuoteMarkedTextElement154() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement154() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement154()
}

func (c *current) onDoubleQuoteMarkedTextElement150(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonDoubleQuoteMarkedTextElement150() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement150(stack["id"])
}

func (c *current) onDoubleQuoteMarkedTextElement106() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMarkedTextElement106() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement106()
}

func (c *current) onDoubleQuoteMarkedTextElement158() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonDoubleQuoteMarkedTextElement158() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement158()
}

func (c *current) onDoubleQuoteMarkedTextElement101(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement101() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement101(stack["element"])
}

func (c *current) onDoubleQuoteMarkedTextElement164() (interface{}, error) {
	return types.NewSymbol("\"`")

}

func (p *parser) callonDoubleQuoteMarkedTextElement164() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement164()
}

func (c *current) onDoubleQuoteMarkedTextElement166() (interface{}, error) {
	return types.NewSymbol("`\"")

}

func (p *parser) callonDoubleQuoteMarkedTextElement166() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement166()
}

func (c *current) onDoubleQuoteMarkedTextElement168() (interface{}, error) {
	return types.NewSymbol("'`")

}

func (p *parser) callonDoubleQuoteMarkedTextElement168() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement168()
}

func (c *current) onDoubleQuoteMarkedTextElement170() (interface{}, error) {
	return types.NewSymbol("`'")

}

func (p *parser) callonDoubleQuoteMarkedTextElement170() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement170()
}

func (c *current) onDoubleQuoteMarkedTextElement172() (interface{}, error) {
	return types.NewSymbol("(C)")

}

func (p *parser) callonDoubleQuoteMarkedTextElement172() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement172()
}

func (c *current) onDoubleQuoteMarkedTextElement174() (interface{}, error) {
	return types.NewSymbol("(TM)")

}

func (p *parser) callonDoubleQuoteMarkedTextElement174() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement174()
}

func (c *current) onDoubleQuoteMarkedTextElement176() (interface{}, error) {
	return types.NewSymbol("(R)")

}

func (p *parser) callonDoubleQuoteMarkedTextElement176() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement176()
}

func (c *current) onDoubleQuoteMarkedTextElement178() (interface{}, error) {
	return types.NewSymbol("...")

}

func (p *parser) callonDoubleQuoteMarkedTextElement178() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement178()
}

func (c *current) onDoubleQuoteMarkedTextElement160() (interface{}, error) {
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonDoubleQuoteMarkedTextElement160() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement160()
}

func (c *current) onDoubleQuoteMarkedTextElement180() (interface{}, error) {
	return types.NewSymbol("\"`")

}

func (p *parser) callonDoubleQuoteMarkedTextElement180() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement180()
}

func (c *current) onDoubleQuoteMarkedTextElement182() (interface{}, error) {
	return types.NewSymbol("`\"")

}

func (p *parser) callonDoubleQuoteMarkedTextElement182() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement182()
}

func (c *current) onDoubleQuoteMarkedTextElement184() (interface{}, error) {
	return types.NewSymbol("'`")

}

func (p *parser) callonDoubleQuoteMarkedTextElement184() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement184()
}

func (c *current) onDoubleQuoteMarkedTextElement186() (interface{}, error) {
	return types.NewSymbol("`'")

}

func (p *parser) callonDoubleQuoteMarkedTextElement186() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement186()
}

func (c *current) onDoubleQuoteMarkedTextElement188() (interface{}, error) {
	return types.NewSymbol("(C)")

}

func (p *parser) callonDoubleQuoteMarkedTextElement188() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement188()
}

func (c *current) onDoubleQuoteMarkedTextElement190() (interface{}, error) {
	return types.NewSymbol("(TM)")

}

func (p *parser) callonDoubleQuoteMarkedTextElement190() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement190()
}

func (c *current) onDoubleQuoteMarkedTextElement192() (interface{}, error) {
	return types.NewSymbol("(R)")

}

func (p *parser) callonDoubleQuoteMarkedTextElement192() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement192()
}

func (c *current) onDoubleQuoteMarkedTextElement194() (interface{}, error) {
	return types.NewSymbol("...")

}

func (p *parser) callonDoubleQuoteMarkedTextElement194() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement194()
}

func (c *current) onDoubleQuoteMarkedTextElement196() (interface{}, error) {
	log.Debug("matched escaped apostrophe")
	return types.NewStringElement(strings.TrimSuffix(string(c.text), `\'`) + `'`) // retain the apostrophe, but discard the `\` escape char

}

func (p *parser) callonDoubleQuoteMarkedTextElement196() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement196()
}

func (c *current) onDoubleQuoteMarkedTextElement202() (interface{}, error) {
	return types.NewSymbolWithForeword("'", strings.TrimSuffix(string(c.text), `'`))

}

func (p *parser) callonDoubleQuoteMarkedTextElement202() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement202()
}

func (c *current) onDoubleQuoteMarkedTextElement213() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDoubleQuoteMarkedTextElement213() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement213()
}

func (c *current) onDoubleQuoteMarkedTextElement209(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonDoubleQuoteMarkedTextElement209() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement209(stack["ref"])
}

func (c *current) onDoubleQuoteMarkedTextElement221() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement221() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement221()
}

func (c *current) onDoubleQuoteMarkedTextElement218() (interface{}, error) {
	// or a marked delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMarkedTextElement218() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement218()
}

func (c *current) onDoubleQuoteMarkedTextElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonDoubleQuoteMarkedTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextElement1(stack["element"])
}

func (c *current) onQuotedTextInDoubleMarkedBoldText2(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonQuotedTextInDoubleMarkedBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleMarkedBoldText2(stack["element"])
}

func (c *current) onQuotedTextInDoubleMarkedBoldText13(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInDoubleMarkedBoldText13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInDoubleMarkedBoldText13(stack["attributes"], stack["text"])
}

func (c *current) onSingleQuoteMarkedText1(elements interface{}) (interface{}, error) {

	return types.NewQuotedText(types.SingleQuoteMarked, elements.([]interface{}))

}

func (p *parser) callonSingleQuoteMarkedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText1(stack["elements"])
}

func (c *current) onSingleQuoteMarkedTextElements7() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElements7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElements7()
}

func (c *current) onSingleQuoteMarkedTextElements12(elements interface{}) (bool, error) {
	return validateSingleQuoteElements(elements.([]interface{})) // cannot end with spaces

}

func (p *parser) callonSingleQuoteMarkedTextElements12() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElements12(stack["elements"])
}

func (c *current) onSingleQuoteMarkedTextElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonSingleQuoteMarkedTextElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElements1(stack["elements"])
}

func (c *current) onSingleQuoteMarkedTextElement8() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement8()
}

func (c *current) onSingleQuoteMarkedTextElement2() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMarkedTextElement2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement2()
}

func (c *current) onSingleQuoteMarkedTextElement11() (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement11()
}

func (c *current) onSingleQuoteMarkedTextElement15() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteMarkedTextElement15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement15()
}

func (c *current) onSingleQuoteMarkedTextElement21() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteMarkedTextElement21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement21()
}

func (c *current) onSingleQuoteMarkedTextElement28() (bool, error) {
	return c.isSubstitutionEnabled(Attributes), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement28() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement28()
}

func (c *current) onSingleQuoteMarkedTextElement35() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement35()
}

func (c *current) onSingleQuoteMarkedTextElement47() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement47()
}

func (c *current) onSingleQuoteMarkedTextElement49() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuoteMarkedTextElement49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement49()
}

func (c *current) onSingleQuoteMarkedTextElement42(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuoteMarkedTextElement42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement42(stack["start"])
}

func (c *current) onSingleQuoteMarkedTextElement31(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonSingleQuoteMarkedTextElement31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement31(stack["name"], stack["start"])
}

func (c *current) onSingleQuoteMarkedTextElement57() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement57() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement57()
}

func (c *current) onSingleQuoteMarkedTextElement69() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement69()
}

func (c *current) onSingleQuoteMarkedTextElement71() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSingleQuoteMarkedTextElement71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement71()
}

func (c *current) onSingleQuoteMarkedTextElement64(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSingleQuoteMarkedTextElement64() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement64(stack["start"])
}

func (c *current) onSingleQuoteMarkedTextElement53(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonSingleQuoteMarkedTextElement53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement53(stack["name"], stack["start"])
}

func (c *current) onSingleQuoteMarkedTextElement79() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement79() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement79()
}

func (c *current) onSingleQuoteMarkedTextElement75(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonSingleQuoteMarkedTextElement75() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement75(stack["name"])
}

func (c *current) onSingleQuoteMarkedTextElement89() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement89() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement89()
}

func (c *current) onSingleQuoteMarkedTextElement85(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonSingleQuoteMarkedTextElement85() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement85(stack["name"])
}

func (c *current) onSingleQuoteMarkedTextElement26(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuoteMarkedTextElement26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement26(stack["element"])
}

func (c *current) onSingleQuoteMarkedTextElement98() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement98() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement98()
}

func (c *current) onSingleQuoteMarkedTextElement107() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement107() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement107()
}

func (c *current) onSingleQuoteMarkedTextElement111() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement111() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement111()
}

func (c *current) onSingleQuoteMarkedTextElement117() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMarkedTextElement117() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement117()
}

func (c *current) onSingleQuoteMarkedTextElement126() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement126() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement126()
}

func (c *current) onSingleQuoteMarkedTextElement122(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonSingleQuoteMarkedTextElement122() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement122(stack["name"])
}

func (c *current) onSingleQuoteMarkedTextElement136() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement136() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement136()
}

func (c *current) onSingleQuoteMarkedTextElement132(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonSingleQuoteMarkedTextElement132() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement132(stack["name"])
}

func (c *current) onSingleQuoteMarkedTextElement142() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMarkedTextElement142() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement142()
}

func (c *current) onSingleQuoteMarkedTextElement103(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonSingleQuoteMarkedTextElement103() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement103(stack["id"], stack["label"])
}

func (c *current) onSingleQuoteMarkedTextElement149() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement149() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement149()
}

func (c *current) onSingleQuoteMarkedTextElement145(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonSingleQuoteMarkedTextElement145() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement145(stack["id"])
}

func (c *current) onSingleQuoteMarkedTextElement101() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMarkedTextElement101() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement101()
}

func (c *current) onSingleQuoteMarkedTextElement153() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonSingleQuoteMarkedTextElement153() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement153()
}

func (c *current) onSingleQuoteMarkedTextElement96(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSingleQuoteMarkedTextElement96() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement96(stack["element"])
}

func (c *current) onSingleQuoteMarkedTextElement159() (interface{}, error) {
	return types.NewSymbol("\"`")

}

func (p *parser) callonSingleQuoteMarkedTextElement159() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement159()
}

func (c *current) onSingleQuoteMarkedTextElement161() (interface{}, error) {
	return types.NewSymbol("`\"")

}

func (p *parser) callonSingleQuoteMarkedTextElement161() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement161()
}

func (c *current) onSingleQuoteMarkedTextElement163() (interface{}, error) {
	return types.NewSymbol("'`")

}

func (p *parser) callonSingleQuoteMarkedTextElement163() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement163()
}

func (c *current) onSingleQuoteMarkedTextElement165() (interface{}, error) {
	return types.NewSymbol("`'")

}

func (p *parser) callonSingleQuoteMarkedTextElement165() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement165()
}

func (c *current) onSingleQuoteMarkedTextElement167() (interface{}, error) {
	return types.NewSymbol("(C)")

}

func (p *parser) callonSingleQuoteMarkedTextElement167() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement167()
}

func (c *current) onSingleQuoteMarkedTextElement169() (interface{}, error) {
	return types.NewSymbol("(TM)")

}

func (p *parser) callonSingleQuoteMarkedTextElement169() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement169()
}

func (c *current) onSingleQuoteMarkedTextElement171() (interface{}, error) {
	return types.NewSymbol("(R)")

}

func (p *parser) callonSingleQuoteMarkedTextElement171() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement171()
}

func (c *current) onSingleQuoteMarkedTextElement173() (interface{}, error) {
	return types.NewSymbol("...")

}

func (p *parser) callonSingleQuoteMarkedTextElement173() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement173()
}

func (c *current) onSingleQuoteMarkedTextElement155() (interface{}, error) {
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonSingleQuoteMarkedTextElement155() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement155()
}

func (c *current) onSingleQuoteMarkedTextElement175() (interface{}, error) {
	return types.NewSymbol("\"`")

}

func (p *parser) callonSingleQuoteMarkedTextElement175() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement175()
}

func (c *current) onSingleQuoteMarkedTextElement177() (interface{}, error) {
	return types.NewSymbol("`\"")

}

func (p *parser) callonSingleQuoteMarkedTextElement177() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement177()
}

func (c *current) onSingleQuoteMarkedTextElement179() (interface{}, error) {
	return types.NewSymbol("'`")

}

func (p *parser) callonSingleQuoteMarkedTextElement179() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement179()
}

func (c *current) onSingleQuoteMarkedTextElement181() (interface{}, error) {
	return types.NewSymbol("`'")

}

func (p *parser) callonSingleQuoteMarkedTextElement181() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement181()
}

func (c *current) onSingleQuoteMarkedTextElement183() (interface{}, error) {
	return types.NewSymbol("(C)")

}

func (p *parser) callonSingleQuoteMarkedTextElement183() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement183()
}

func (c *current) onSingleQuoteMarkedTextElement185() (interface{}, error) {
	return types.NewSymbol("(TM)")

}

func (p *parser) callonSingleQuoteMarkedTextElement185() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement185()
}

func (c *current) onSingleQuoteMarkedTextElement187() (interface{}, error) {
	return types.NewSymbol("(R)")

}

func (p *parser) callonSingleQuoteMarkedTextElement187() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement187()
}

func (c *current) onSingleQuoteMarkedTextElement189() (interface{}, error) {
	return types.NewSymbol("...")

}

func (p *parser) callonSingleQuoteMarkedTextElement189() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement189()
}

func (c *current) onSingleQuoteMarkedTextElement191() (interface{}, error) {
	log.Debug("matched escaped apostrophe")
	return types.NewStringElement(strings.TrimSuffix(string(c.text), `\'`) + `'`) // retain the apostrophe, but discard the `\` escape char

}

func (p *parser) callonSingleQuoteMarkedTextElement191() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement191()
}

func (c *current) onSingleQuoteMarkedTextElement197() (interface{}, error) {
	return types.NewSymbolWithForeword("'", strings.TrimSuffix(string(c.text), `'`))

}

func (p *parser) callonSingleQuoteMarkedTextElement197() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement197()
}

func (c *current) onSingleQuoteMarkedTextElement208() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleQuoteMarkedTextElement208() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement208()
}

func (c *current) onSingleQuoteMarkedTextElement204(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonSingleQuoteMarkedTextElement204() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement204(stack["ref"])
}

func (c *current) onSingleQuoteMarkedTextElement216() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSingleQuoteMarkedTextElement216() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement216()
}

func (c *current) onSingleQuoteMarkedTextElement213() (interface{}, error) {
	// or a mark delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMarkedTextElement213() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextElement213()
}

func (c *current) onQuotedTextInSingleQuoteMarkedText2(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonQuotedTextInSingleQuoteMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuoteMarkedText2(stack["element"])
}

func (c *current) onQuotedTextInSingleQuoteMarkedText13(attributes, text interface{}) (interface{}, error) {
	return text.(*types.QuotedText).WithAttributes(attributes)

}

func (p *parser) callonQuotedTextInSingleQuoteMarkedText13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextInSingleQuoteMarkedText13(stack["attributes"], stack["text"])
}

func (c *current) onEscapedMarkedText5() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedMarkedText5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText5()
}

func (c *current) onEscapedMarkedText2(backslashes, elements interface{}) (interface{}, error) {
	return types.NewEscapedQuotedText(backslashes.(string), "##", elements.([]interface{}))

}

func (p *parser) callonEscapedMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText17() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedMarkedText17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText17()
}

func (c *current) onEscapedMarkedText14(backslashes, elements interface{}) (interface{}, error) {
	result := append([]interface{}{"#"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "#", result)

}

func (p *parser) callonEscapedMarkedText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText14(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText27() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedMarkedText27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText27()
}

func (c *current) onEscapedMarkedText24(backslashes, elements interface{}) (interface{}, error) {
	return types.NewEscapedQuotedText(backslashes.(string), "#", elements.([]interface{}))

}

func (p *parser) callonEscapedMarkedText24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText24(stack["backslashes"], stack["elements"])
}

func (c *current) onSubscriptText1(element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.SingleQuoteSubscript, element)

}

func (p *parser) callonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptText1(stack["element"])
}

func (c *current) onSubscriptTextElement3() (interface{}, error) {
	// anything except spaces, EOL or '~'
	return c.text, nil

}

func (p *parser) callonSubscriptTextElement3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptTextElement3()
}

func (c *current) onEscapedSubscriptText4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedSubscriptText4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscriptText4()
}

func (c *current) onEscapedSubscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "~", element)

}

func (p *parser) callonEscapedSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSuperscriptText1(element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.SingleQuoteSuperscript, element)

}

func (p *parser) callonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptText1(stack["element"])
}

func (c *current) onSuperscriptTextElement3() (interface{}, error) {
	// anything except spaces, EOL or '^'
	return c.text, nil

}

func (p *parser) callonSuperscriptTextElement3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptTextElement3()
}

func (c *current) onEscapedSuperscriptText4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonEscapedSuperscriptText4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscriptText4()
}

func (c *current) onEscapedSuperscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "^", element)

}

func (p *parser) callonEscapedSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSubstitutions17() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSubstitutions17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions17()
}

func (c *current) onSubstitutions22() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSubstitutions22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions22()
}

func (c *current) onSubstitutions12() (interface{}, error) {
	// TODO: also allow trailing quotes/quotation marks?
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSubstitutions12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions12()
}

func (c *current) onSubstitutions29() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSubstitutions29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions29()
}

func (c *current) onSubstitutions31() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSubstitutions31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions31()
}

func (c *current) onSubstitutions40() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSubstitutions40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions40()
}

func (c *current) onSubstitutions36(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonSubstitutions36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions36(stack["ref"])
}

func (c *current) onSubstitutions46() (bool, error) {

	return c.isSubstitutionEnabled(PostReplacements) && c.isPreceededBySpace(), nil

}

func (p *parser) callonSubstitutions46() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions46()
}

func (c *current) onSubstitutions49() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSubstitutions49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions49()
}

func (c *current) onSubstitutions53() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSubstitutions53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions53()
}

func (c *current) onSubstitutions44() (interface{}, error) {
	return types.NewLineBreak()

}

func (p *parser) callonSubstitutions44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions44()
}

func (c *current) onSubstitutions63() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSubstitutions63() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions63()
}

func (c *current) onSubstitutions67() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSubstitutions67() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions67()
}

func (c *current) onSubstitutions69() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonSubstitutions69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions69()
}

func (c *current) onSubstitutions60(char interface{}) (interface{}, error) {
	return char, nil
}

func (p *parser) callonSubstitutions60() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions60(stack["char"])
}

func (c *current) onSubstitutions82() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters), nil

}

func (p *parser) callonSubstitutions82() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions82()
}

func (c *current) onSubstitutions91() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonSubstitutions91() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions91()
}

func (c *current) onSubstitutions95() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSubstitutions95() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions95()
}

func (c *current) onSubstitutions101() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSubstitutions101() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions101()
}

func (c *current) onSubstitutions110() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSubstitutions110() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions110()
}

func (c *current) onSubstitutions106(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonSubstitutions106() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions106(stack["name"])
}

func (c *current) onSubstitutions120() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSubstitutions120() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions120()
}

func (c *current) onSubstitutions116(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonSubstitutions116() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions116(stack["name"])
}

func (c *current) onSubstitutions126() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSubstitutions126() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions126()
}

func (c *current) onSubstitutions87(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonSubstitutions87() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions87(stack["id"], stack["label"])
}

func (c *current) onSubstitutions133() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonSubstitutions133() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions133()
}

func (c *current) onSubstitutions129(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonSubstitutions129() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions129(stack["id"])
}

func (c *current) onSubstitutions85() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSubstitutions85() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions85()
}

func (c *current) onSubstitutions137() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonSubstitutions137() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions137()
}

func (c *current) onSubstitutions80(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSubstitutions80() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions80(stack["element"])
}

func (c *current) onSubstitutions141() (bool, error) {
	return c.isSubstitutionEnabled(Attributes), nil

}

func (p *parser) callonSubstitutions141() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions141()
}

func (c *current) onSubstitutions148() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSubstitutions148() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions148()
}

func (c *current) onSubstitutions160() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSubstitutions160() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions160()
}

func (c *current) onSubstitutions162() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSubstitutions162() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions162()
}

func (c *current) onSubstitutions155(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSubstitutions155() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions155(stack["start"])
}

func (c *current) onSubstitutions144(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonSubstitutions144() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions144(stack["name"], stack["start"])
}

func (c *current) onSubstitutions170() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSubstitutions170() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions170()
}

func (c *current) onSubstitutions182() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSubstitutions182() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions182()
}

func (c *current) onSubstitutions184() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonSubstitutions184() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions184()
}

func (c *current) onSubstitutions177(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonSubstitutions177() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions177(stack["start"])
}

func (c *current) onSubstitutions166(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonSubstitutions166() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions166(stack["name"], stack["start"])
}

func (c *current) onSubstitutions192() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSubstitutions192() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions192()
}

func (c *current) onSubstitutions188(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonSubstitutions188() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions188(stack["name"])
}

func (c *current) onSubstitutions202() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSubstitutions202() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions202()
}

func (c *current) onSubstitutions198(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonSubstitutions198() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions198(stack["name"])
}

func (c *current) onSubstitutions139(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSubstitutions139() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions139(stack["element"])
}

func (c *current) onSubstitutions210() (bool, error) {
	return c.isSubstitutionEnabled(Replacements), nil

}

func (p *parser) callonSubstitutions210() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions210()
}

func (c *current) onSubstitutions217() (interface{}, error) {
	return types.NewSymbol("\"`")

}

func (p *parser) callonSubstitutions217() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions217()
}

func (c *current) onSubstitutions219() (interface{}, error) {
	return types.NewSymbol("`\"")

}

func (p *parser) callonSubstitutions219() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions219()
}

func (c *current) onSubstitutions221() (interface{}, error) {
	return types.NewSymbol("'`")

}

func (p *parser) callonSubstitutions221() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions221()
}

func (c *current) onSubstitutions223() (interface{}, error) {
	return types.NewSymbol("`'")

}

func (p *parser) callonSubstitutions223() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions223()
}

func (c *current) onSubstitutions225() (interface{}, error) {
	return types.NewSymbol("(C)")

}

func (p *parser) callonSubstitutions225() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions225()
}

func (c *current) onSubstitutions227() (interface{}, error) {
	return types.NewSymbol("(TM)")

}

func (p *parser) callonSubstitutions227() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions227()
}

func (c *current) onSubstitutions229() (interface{}, error) {
	return types.NewSymbol("(R)")

}

func (p *parser) callonSubstitutions229() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions229()
}

func (c *current) onSubstitutions231() (interface{}, error) {
	return types.NewSymbol("...")

}

func (p *parser) callonSubstitutions231() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions231()
}

func (c *current) onSubstitutions213() (interface{}, error) {
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonSubstitutions213() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions213()
}

func (c *current) onSubstitutions233() (interface{}, error) {
	return types.NewSymbol("\"`")

}

func (p *parser) callonSubstitutions233() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions233()
}

func (c *current) onSubstitutions235() (interface{}, error) {
	return types.NewSymbol("`\"")

}

func (p *parser) callonSubstitutions235() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions235()
}

func (c *current) onSubstitutions237() (interface{}, error) {
	return types.NewSymbol("'`")

}

func (p *parser) callonSubstitutions237() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions237()
}

func (c *current) onSubstitutions239() (interface{}, error) {
	return types.NewSymbol("`'")

}

func (p *parser) callonSubstitutions239() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions239()
}

func (c *current) onSubstitutions241() (interface{}, error) {
	return types.NewSymbol("(C)")

}

func (p *parser) callonSubstitutions241() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions241()
}

func (c *current) onSubstitutions243() (interface{}, error) {
	return types.NewSymbol("(TM)")

}

func (p *parser) callonSubstitutions243() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions243()
}

func (c *current) onSubstitutions245() (interface{}, error) {
	return types.NewSymbol("(R)")

}

func (p *parser) callonSubstitutions245() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions245()
}

func (c *current) onSubstitutions247() (interface{}, error) {
	return types.NewSymbol("...")

}

func (p *parser) callonSubstitutions247() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions247()
}

func (c *current) onSubstitutions249() (interface{}, error) {
	log.Debug("matched escaped apostrophe")
	return types.NewStringElement(strings.TrimSuffix(string(c.text), `\'`) + `'`) // retain the apostrophe, but discard the `\` escape char

}

func (p *parser) callonSubstitutions249() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions249()
}

func (c *current) onSubstitutions255() (interface{}, error) {
	return types.NewSymbolWithForeword("'", strings.TrimSuffix(string(c.text), `'`))

}

func (p *parser) callonSubstitutions255() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions255()
}

func (c *current) onSubstitutions208(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSubstitutions208() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions208(stack["element"])
}

func (c *current) onSubstitutions261() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSubstitutions261() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions261()
}

func (c *current) onSubstitutions5(element interface{}) (interface{}, error) {
	c.trackSpaceSuffix(element)
	return element, nil

}

func (p *parser) callonSubstitutions5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions5(stack["element"])
}

func (c *current) onSubstitutions1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)

}

func (p *parser) callonSubstitutions1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubstitutions1(stack["elements"])
}

func (c *current) onHeaderGroup1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements)

}

func (p *parser) callonHeaderGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroup1(stack["elements"])
}

func (c *current) onHeaderGroupElement8() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonHeaderGroupElement8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement8()
}

func (c *current) onHeaderGroupElement17() (interface{}, error) {
	// allow `
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonHeaderGroupElement17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement17()
}

func (c *current) onHeaderGroupElement29() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement29()
}

func (c *current) onHeaderGroupElement40() (interface{}, error) {
	// spaces, commas and dots are allowed in this syntax
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonHeaderGroupElement40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement40()
}

func (c *current) onHeaderGroupElement47() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonHeaderGroupElement47() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement47()
}

func (c *current) onHeaderGroupElement43(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonHeaderGroupElement43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement43(stack["ref"])
}

func (c *current) onHeaderGroupElement53() (bool, error) {
	return c.isSubstitutionEnabled(Attributes), nil

}

func (p *parser) callonHeaderGroupElement53() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement53()
}

func (c *current) onHeaderGroupElement60() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement60() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement60()
}

func (c *current) onHeaderGroupElement72() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement72() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement72()
}

func (c *current) onHeaderGroupElement74() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonHeaderGroupElement74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement74()
}

func (c *current) onHeaderGroupElement67(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonHeaderGroupElement67() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement67(stack["start"])
}

func (c *current) onHeaderGroupElement56(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonHeaderGroupElement56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement56(stack["name"], stack["start"])
}

func (c *current) onHeaderGroupElement82() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement82() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement82()
}

func (c *current) onHeaderGroupElement94() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement94() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement94()
}

func (c *current) onHeaderGroupElement96() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonHeaderGroupElement96() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement96()
}

func (c *current) onHeaderGroupElement89(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonHeaderGroupElement89() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement89(stack["start"])
}

func (c *current) onHeaderGroupElement78(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonHeaderGroupElement78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement78(stack["name"], stack["start"])
}

func (c *current) onHeaderGroupElement104() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement104() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement104()
}

func (c *current) onHeaderGroupElement100(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonHeaderGroupElement100() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement100(stack["name"])
}

func (c *current) onHeaderGroupElement114() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement114() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement114()
}

func (c *current) onHeaderGroupElement110(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonHeaderGroupElement110() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement110(stack["name"])
}

func (c *current) onHeaderGroupElement51(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonHeaderGroupElement51() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement51(stack["element"])
}

func (c *current) onHeaderGroupElement120() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonHeaderGroupElement120() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement120()
}

func (c *current) onHeaderGroupElement36(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonHeaderGroupElement36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement36(stack["elements"])
}

func (c *current) onHeaderGroupElement32(id interface{}) (interface{}, error) {
	return types.NewIDAttribute(id)

}

func (p *parser) callonHeaderGroupElement32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement32(stack["id"])
}

func (c *current) onHeaderGroupElement124() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement124() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement124()
}

func (c *current) onHeaderGroupElement26(id interface{}) (interface{}, error) {
	return id, nil
}

func (p *parser) callonHeaderGroupElement26() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement26(stack["id"])
}

func (c *current) onHeaderGroupElement129() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement129() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement129()
}

func (c *current) onHeaderGroupElement136() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters), nil

}

func (p *parser) callonHeaderGroupElement136() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement136()
}

func (c *current) onHeaderGroupElement145() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement145() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement145()
}

func (c *current) onHeaderGroupElement149() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement149() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement149()
}

func (c *current) onHeaderGroupElement155() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonHeaderGroupElement155() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement155()
}

func (c *current) onHeaderGroupElement164() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement164() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement164()
}

func (c *current) onHeaderGroupElement160(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonHeaderGroupElement160() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement160(stack["name"])
}

func (c *current) onHeaderGroupElement174() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement174() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement174()
}

func (c *current) onHeaderGroupElement170(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonHeaderGroupElement170() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement170(stack["name"])
}

func (c *current) onHeaderGroupElement180() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonHeaderGroupElement180() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement180()
}

func (c *current) onHeaderGroupElement141(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonHeaderGroupElement141() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement141(stack["id"], stack["label"])
}

func (c *current) onHeaderGroupElement187() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement187() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement187()
}

func (c *current) onHeaderGroupElement183(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonHeaderGroupElement183() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement183(stack["id"])
}

func (c *current) onHeaderGroupElement139() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonHeaderGroupElement139() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement139()
}

func (c *current) onHeaderGroupElement191() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonHeaderGroupElement191() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement191()
}

func (c *current) onHeaderGroupElement134(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonHeaderGroupElement134() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement134(stack["element"])
}

func (c *current) onHeaderGroupElement196() (bool, error) {
	return c.isSubstitutionEnabled(Attributes), nil

}

func (p *parser) callonHeaderGroupElement196() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement196()
}

func (c *current) onHeaderGroupElement203() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement203() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement203()
}

func (c *current) onHeaderGroupElement215() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement215() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement215()
}

func (c *current) onHeaderGroupElement217() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonHeaderGroupElement217() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement217()
}

func (c *current) onHeaderGroupElement210(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonHeaderGroupElement210() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement210(stack["start"])
}

func (c *current) onHeaderGroupElement199(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonHeaderGroupElement199() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement199(stack["name"], stack["start"])
}

func (c *current) onHeaderGroupElement225() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement225() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement225()
}

func (c *current) onHeaderGroupElement237() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement237() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement237()
}

func (c *current) onHeaderGroupElement239() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonHeaderGroupElement239() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement239()
}

func (c *current) onHeaderGroupElement232(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonHeaderGroupElement232() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement232(stack["start"])
}

func (c *current) onHeaderGroupElement221(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonHeaderGroupElement221() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement221(stack["name"], stack["start"])
}

func (c *current) onHeaderGroupElement247() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement247() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement247()
}

func (c *current) onHeaderGroupElement243(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonHeaderGroupElement243() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement243(stack["name"])
}

func (c *current) onHeaderGroupElement257() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement257() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement257()
}

func (c *current) onHeaderGroupElement253(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonHeaderGroupElement253() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement253(stack["name"])
}

func (c *current) onHeaderGroupElement194(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonHeaderGroupElement194() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement194(stack["element"])
}

func (c *current) onHeaderGroupElement267() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonHeaderGroupElement267() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement267()
}

func (c *current) onHeaderGroupElement263(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonHeaderGroupElement263() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement263(stack["ref"])
}

func (c *current) onHeaderGroupElement273() (bool, error) {
	return c.isSubstitutionEnabled(Replacements), nil

}

func (p *parser) callonHeaderGroupElement273() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement273()
}

func (c *current) onHeaderGroupElement280() (interface{}, error) {
	return types.NewSymbol("\"`")

}

func (p *parser) callonHeaderGroupElement280() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement280()
}

func (c *current) onHeaderGroupElement282() (interface{}, error) {
	return types.NewSymbol("`\"")

}

func (p *parser) callonHeaderGroupElement282() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement282()
}

func (c *current) onHeaderGroupElement284() (interface{}, error) {
	return types.NewSymbol("'`")

}

func (p *parser) callonHeaderGroupElement284() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement284()
}

func (c *current) onHeaderGroupElement286() (interface{}, error) {
	return types.NewSymbol("`'")

}

func (p *parser) callonHeaderGroupElement286() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement286()
}

func (c *current) onHeaderGroupElement288() (interface{}, error) {
	return types.NewSymbol("(C)")

}

func (p *parser) callonHeaderGroupElement288() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement288()
}

func (c *current) onHeaderGroupElement290() (interface{}, error) {
	return types.NewSymbol("(TM)")

}

func (p *parser) callonHeaderGroupElement290() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement290()
}

func (c *current) onHeaderGroupElement292() (interface{}, error) {
	return types.NewSymbol("(R)")

}

func (p *parser) callonHeaderGroupElement292() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement292()
}

func (c *current) onHeaderGroupElement294() (interface{}, error) {
	return types.NewSymbol("...")

}

func (p *parser) callonHeaderGroupElement294() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement294()
}

func (c *current) onHeaderGroupElement276() (interface{}, error) {
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonHeaderGroupElement276() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement276()
}

func (c *current) onHeaderGroupElement296() (interface{}, error) {
	return types.NewSymbol("\"`")

}

func (p *parser) callonHeaderGroupElement296() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement296()
}

func (c *current) onHeaderGroupElement298() (interface{}, error) {
	return types.NewSymbol("`\"")

}

func (p *parser) callonHeaderGroupElement298() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement298()
}

func (c *current) onHeaderGroupElement300() (interface{}, error) {
	return types.NewSymbol("'`")

}

func (p *parser) callonHeaderGroupElement300() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement300()
}

func (c *current) onHeaderGroupElement302() (interface{}, error) {
	return types.NewSymbol("`'")

}

func (p *parser) callonHeaderGroupElement302() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement302()
}

func (c *current) onHeaderGroupElement304() (interface{}, error) {
	return types.NewSymbol("(C)")

}

func (p *parser) callonHeaderGroupElement304() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement304()
}

func (c *current) onHeaderGroupElement306() (interface{}, error) {
	return types.NewSymbol("(TM)")

}

func (p *parser) callonHeaderGroupElement306() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement306()
}

func (c *current) onHeaderGroupElement308() (interface{}, error) {
	return types.NewSymbol("(R)")

}

func (p *parser) callonHeaderGroupElement308() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement308()
}

func (c *current) onHeaderGroupElement310() (interface{}, error) {
	return types.NewSymbol("...")

}

func (p *parser) callonHeaderGroupElement310() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement310()
}

func (c *current) onHeaderGroupElement312() (interface{}, error) {
	log.Debug("matched escaped apostrophe")
	return types.NewStringElement(strings.TrimSuffix(string(c.text), `\'`) + `'`) // retain the apostrophe, but discard the `\` escape char

}

func (p *parser) callonHeaderGroupElement312() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement312()
}

func (c *current) onHeaderGroupElement318() (interface{}, error) {
	return types.NewSymbolWithForeword("'", strings.TrimSuffix(string(c.text), `'`))

}

func (p *parser) callonHeaderGroupElement318() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement318()
}

func (c *current) onHeaderGroupElement271(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonHeaderGroupElement271() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement271(stack["element"])
}

func (c *current) onHeaderGroupElement328() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement328() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement328()
}

func (c *current) onHeaderGroupElement324(id interface{}) (interface{}, error) {
	//return types.NewStringElement("[[" + id.(string) + "]]")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonHeaderGroupElement324() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement324(stack["id"])
}

func (c *current) onHeaderGroupElement336() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonHeaderGroupElement336() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement336()
}

func (c *current) onHeaderGroupElement332(id interface{}) (interface{}, error) {
	// no EOL here since there can be multiple InlineElementID on the same line
	return types.NewInlineAnchor(id.(string))

}

func (p *parser) callonHeaderGroupElement332() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement332(stack["id"])
}

func (c *current) onHeaderGroupElement341() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonHeaderGroupElement341() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement341()
}

func (c *current) onHeaderGroupElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonHeaderGroupElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeaderGroupElement1(stack["element"])
}

func (c *current) onInlineMacro3() (bool, error) {
	return c.isSubstitutionEnabled(Macros), nil

}

func (p *parser) callonInlineMacro3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro3()
}

func (c *current) onInlineMacro17() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonInlineMacro17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro17()
}

func (c *current) onInlineMacro13(id interface{}) (interface{}, error) {
	//return types.NewStringElement("[[" + id.(string) + "]]")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonInlineMacro13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro13(stack["id"])
}

func (c *current) onInlineMacro25() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonInlineMacro25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro25()
}

func (c *current) onInlineMacro21(id interface{}) (interface{}, error) {
	// no EOL here since there can be multiple InlineElementID on the same line
	return types.NewInlineAnchor(id.(string))

}

func (p *parser) callonInlineMacro21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro21(stack["id"])
}

func (c *current) onInlineMacro37() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineMacro37() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro37()
}

func (c *current) onInlineMacro33() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineMacro33() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro33()
}

func (c *current) onInlineMacro44() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineMacro44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro44()
}

func (c *current) onInlineMacro48() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineMacro48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro48()
}

func (c *current) onInlineMacro55() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineMacro55() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro55()
}

func (c *current) onInlineMacro51() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineMacro51() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro51()
}

func (c *current) onInlineMacro41(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonInlineMacro41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro41(stack["content"])
}

func (c *current) onInlineMacro62() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineMacro62() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro62()
}

func (c *current) onInlineMacro66() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineMacro66() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro66()
}

func (c *current) onInlineMacro73() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineMacro73() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro73()
}

func (c *current) onInlineMacro69() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineMacro69() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro69()
}

func (c *current) onInlineMacro59(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonInlineMacro59() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro59(stack["content"])
}

func (c *current) onInlineMacro29(term1, term2, term3 interface{}) (interface{}, error) {
	return types.NewConcealedIndexTerm(term1, term2, term3)

}

func (p *parser) callonInlineMacro29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro29(stack["term1"], stack["term2"], stack["term3"])
}

func (c *current) onInlineMacro1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonInlineMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineMacro1(stack["element"])
}

func (c *current) onInlinePassthrough3() (bool, error) {
	return c.isSubstitutionEnabled(InlinePassthroughs), nil

}

func (p *parser) callonInlinePassthrough3() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough3()
}

func (c *current) onInlinePassthrough11() (interface{}, error) {
	// spaces and newlines are also allowed in the first or last position of the content and elsewhere too
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlinePassthrough11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough11()
}

func (c *current) onInlinePassthrough21() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlinePassthrough21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough21()
}

func (c *current) onInlinePassthrough24() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonInlinePassthrough24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough24()
}

func (c *current) onInlinePassthrough17() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlinePassthrough17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough17()
}

func (c *current) onInlinePassthrough6(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.TriplePlusPassthrough, []interface{}{content})

}

func (p *parser) callonInlinePassthrough6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough6(stack["content"])
}

func (c *current) onInlinePassthrough45() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlinePassthrough45() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough45()
}

func (c *current) onInlinePassthrough48() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonInlinePassthrough48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough48()
}

func (c *current) onInlinePassthrough58() (interface{}, error) {
	// log.Debug("matched multiple spaces")
	return string(c.text), nil

}

func (p *parser) callonInlinePassthrough58() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough58()
}

func (c *current) onInlinePassthrough65() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonInlinePassthrough65() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough65()
}

func (c *current) onInlinePassthrough40() (interface{}, error) {
	// no space in the first or last position of the content, but allowed elsewhere
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlinePassthrough40() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough40()
}

func (c *current) onInlinePassthrough74() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlinePassthrough74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough74()
}

func (c *current) onInlinePassthrough77() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonInlinePassthrough77() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough77()
}

func (c *current) onInlinePassthrough71() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlinePassthrough71() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough71()
}

func (c *current) onInlinePassthrough35(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.SinglePlusPassthrough, []interface{}{content})

}

func (p *parser) callonInlinePassthrough35() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough35(stack["content"])
}

func (c *current) onInlinePassthrough1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonInlinePassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlinePassthrough1(stack["element"])
}

func (c *current) onQuote2() (bool, error) {
	return c.isSubstitutionEnabled(Quotes), nil

}

func (p *parser) callonQuote2() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuote2()
}

func (c *current) onTableColumnsAttribute15() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonTableColumnsAttribute15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute15()
}

func (c *current) onTableColumnsAttribute12(n interface{}) (interface{}, error) {
	return n, nil
}

func (p *parser) callonTableColumnsAttribute12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute12(stack["n"])
}

func (c *current) onTableColumnsAttribute25() (interface{}, error) {
	return types.HAlignLeft, nil
}

func (p *parser) callonTableColumnsAttribute25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute25()
}

func (c *current) onTableColumnsAttribute27() (interface{}, error) {
	return types.HAlignRight, nil
}

func (p *parser) callonTableColumnsAttribute27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute27()
}

func (c *current) onTableColumnsAttribute29() (interface{}, error) {
	return types.HAlignCenter, nil
}

func (p *parser) callonTableColumnsAttribute29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute29()
}

func (c *current) onTableColumnsAttribute34() (interface{}, error) {
	return types.VAlignTop, nil
}

func (p *parser) callonTableColumnsAttribute34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute34()
}

func (c *current) onTableColumnsAttribute36() (interface{}, error) {
	return types.VAlignBottom, nil
}

func (p *parser) callonTableColumnsAttribute36() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute36()
}

func (c *current) onTableColumnsAttribute38() (interface{}, error) {
	return types.VAlignMiddle, nil
}

func (p *parser) callonTableColumnsAttribute38() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute38()
}

func (c *current) onTableColumnsAttribute43() (interface{}, error) {
	return strconv.Atoi(string(c.text))

}

func (p *parser) callonTableColumnsAttribute43() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute43()
}

func (c *current) onTableColumnsAttribute49() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonTableColumnsAttribute49() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute49()
}

func (c *current) onTableColumnsAttribute53() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonTableColumnsAttribute53() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute53()
}

func (c *current) onTableColumnsAttribute58(multiplier, halign, valign, weight, style, comma interface{}) (bool, error) {
	// make sure that at least something was set
	// (otherwise the parser will run indefinitely)
	return multiplier != nil ||
		halign != nil ||
		valign != nil ||
		weight != nil ||
		style != nil ||
		comma != nil, nil

}

func (p *parser) callonTableColumnsAttribute58() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute58(stack["multiplier"], stack["halign"], stack["valign"], stack["weight"], stack["style"], stack["comma"])
}

func (c *current) onTableColumnsAttribute5(multiplier, halign, valign, weight, style, comma interface{}) (interface{}, error) {
	return types.NewTableColumn(multiplier, halign, valign, weight, style)

}

func (p *parser) callonTableColumnsAttribute5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute5(stack["multiplier"], stack["halign"], stack["valign"], stack["weight"], stack["style"], stack["comma"])
}

func (c *current) onTableColumnsAttribute1(cols interface{}) (interface{}, error) {
	return cols, nil

}

func (p *parser) callonTableColumnsAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableColumnsAttribute1(stack["cols"])
}

func (c *current) onUserMacroBlock4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUserMacroBlock4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock4()
}

func (c *current) onUserMacroBlock7(name interface{}) (bool, error) {
	// skip if no macro was registered under the given name
	return c.globalStore.hasUserMacro(name.(string)), nil

}

func (p *parser) callonUserMacroBlock7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock7(stack["name"])
}

func (c *current) onUserMacroBlock10() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonUserMacroBlock10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock10()
}

func (c *current) onUserMacroBlock16() (interface{}, error) {
	// TODO: just use "\n"
	return string(c.text), nil
}

func (p *parser) callonUserMacroBlock16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock16()
}

func (c *current) onUserMacroBlock1(name, value, attributes interface{}) (interface{}, error) {
	return types.NewUserMacroBlock(name.(string), value.(string), attributes.(types.Attributes), string(c.text))

}

func (p *parser) callonUserMacroBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock1(stack["name"], stack["value"], stack["attributes"])
}

func (c *current) onInlineUserMacro4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineUserMacro4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro4()
}

func (c *current) onInlineUserMacro7(name interface{}) (bool, error) {
	// skip if no macro was registered under the given name
	return c.globalStore.hasUserMacro(name.(string)), nil

}

func (p *parser) callonInlineUserMacro7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro7(stack["name"])
}

func (c *current) onInlineUserMacro10() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonInlineUserMacro10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro10()
}

func (c *current) onInlineUserMacro1(name, value, attributes interface{}) (interface{}, error) {
	return types.NewInlineUserMacro(name.(string), value.(string), attributes.(types.Attributes), string(c.text))

}

func (p *parser) callonInlineUserMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro1(stack["name"], stack["value"], stack["attributes"])
}

func (c *current) onFileLocation12() (interface{}, error) {
	// not supported for now: EOL, space, "{", "[", "]". Also, punctuation chars and `<` and `>` special chars are treated separately below (but `&` is allowed)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonFileLocation12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation12()
}

func (c *current) onFileLocation16() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonFileLocation16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation16()
}

func (c *current) onFileLocation23() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileLocation23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation23()
}

func (c *current) onFileLocation27() (bool, error) {
	return c.isSubstitutionEnabled(Attributes), nil

}

func (p *parser) callonFileLocation27() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation27()
}

func (c *current) onFileLocation34() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileLocation34() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation34()
}

func (c *current) onFileLocation46() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileLocation46() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation46()
}

func (c *current) onFileLocation48() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonFileLocation48() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation48()
}

func (c *current) onFileLocation41(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonFileLocation41() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation41(stack["start"])
}

func (c *current) onFileLocation30(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start, string(c.text))
}

func (p *parser) callonFileLocation30() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation30(stack["name"], stack["start"])
}

func (c *current) onFileLocation56() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileLocation56() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation56()
}

func (c *current) onFileLocation68() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileLocation68() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation68()
}

func (c *current) onFileLocation70() (interface{}, error) {

	return strconv.Atoi(string(c.text))

}

func (p *parser) callonFileLocation70() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation70()
}

func (c *current) onFileLocation63(start interface{}) (interface{}, error) {
	return start, nil

}

func (p *parser) callonFileLocation63() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation63(stack["start"])
}

func (c *current) onFileLocation52(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil, string(c.text))
}

func (p *parser) callonFileLocation52() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation52(stack["name"], stack["start"])
}

func (c *current) onFileLocation78() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileLocation78() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation78()
}

func (c *current) onFileLocation74(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonFileLocation74() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation74(stack["name"])
}

func (c *current) onFileLocation88() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileLocation88() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation88()
}

func (c *current) onFileLocation84(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonFileLocation84() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation84(stack["name"])
}

func (c *current) onFileLocation25(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonFileLocation25() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation25(stack["element"])
}

func (c *current) onFileLocation96() (bool, error) {
	return c.isSubstitutionEnabled(SpecialCharacters), nil

}

func (p *parser) callonFileLocation96() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation96()
}

func (c *current) onFileLocation105() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonFileLocation105() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation105()
}

func (c *current) onFileLocation109() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileLocation109() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation109()
}

func (c *current) onFileLocation115() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonFileLocation115() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation115()
}

func (c *current) onFileLocation124() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileLocation124() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation124()
}

func (c *current) onFileLocation120(name interface{}) (interface{}, error) {

	log.Debug("matching escaped attribute reference")
	// return types.NewStringElement("{"+name.(string)+"}")
	return types.NewStringElement(strings.TrimPrefix(string(c.text), `\`))

}

func (p *parser) callonFileLocation120() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation120(stack["name"])
}

func (c *current) onFileLocation134() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonFileLocation134() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation134()
}

func (c *current) onFileLocation130(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string), string(c.text))

}

func (p *parser) callonFileLocation130() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation130(stack["name"])
}

func (c *current) onFileLocation140() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonFileLocation140() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation140()
}

func (c *current) onFileLocation101(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)

}

func (p *parser) callonFileLocation101() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation101(stack["id"], stack["label"])
}

func (c *current) onFileLocation147() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil

}

func (p *parser) callonFileLocation147() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation147()
}

func (c *current) onFileLocation143(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)

}

func (p *parser) callonFileLocation143() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation143(stack["id"])
}

func (c *current) onFileLocation99() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonFileLocation99() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation99()
}

func (c *current) onFileLocation151() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonFileLocation151() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation151()
}

func (c *current) onFileLocation94(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonFileLocation94() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation94(stack["element"])
}

func (c *current) onFileLocation153() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonFileLocation153() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation153()
}

func (c *current) onFileLocation5(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFileLocation5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation5(stack["elements"])
}

func (c *current) onFileLocation159() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonFileLocation159() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation159()
}

func (c *current) onFileLocation155(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonFileLocation155() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation155(stack["ref"])
}

func (c *current) onFileLocation1(path interface{}) (interface{}, error) {
	return types.NewLocation("", path.([]interface{}))

}

func (p *parser) callonFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation1(stack["path"])
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			return val, ok
		}
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}
