// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/bytesparadise/libasciidoc/pkg/types"
	log "github.com/sirupsen/logrus"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "RawSource",
			pos:  position{line: 17, col: 1, offset: 336},
			expr: &actionExpr{
				pos: position{line: 17, col: 14, offset: 349},
				run: (*parser).callonRawSource1,
				expr: &labeledExpr{
					pos:   position{line: 17, col: 14, offset: 349},
					label: "lines",
					expr: &zeroOrMoreExpr{
						pos: position{line: 17, col: 20, offset: 355},
						expr: &choiceExpr{
							pos: position{line: 17, col: 21, offset: 356},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 17, col: 21, offset: 356},
									name: "AttributeDeclaration",
								},
								&ruleRefExpr{
									pos:  position{line: 17, col: 44, offset: 379},
									name: "RawSection",
								},
								&ruleRefExpr{
									pos:  position{line: 17, col: 57, offset: 392},
									name: "FileInclusion",
								},
								&ruleRefExpr{
									pos:  position{line: 17, col: 73, offset: 408},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RawSection",
			pos:  position{line: 22, col: 1, offset: 553},
			expr: &actionExpr{
				pos: position{line: 23, col: 5, offset: 572},
				run: (*parser).callonRawSection1,
				expr: &seqExpr{
					pos: position{line: 23, col: 5, offset: 572},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 23, col: 5, offset: 572},
							label: "level",
							expr: &actionExpr{
								pos: position{line: 23, col: 12, offset: 579},
								run: (*parser).callonRawSection4,
								expr: &oneOrMoreExpr{
									pos: position{line: 23, col: 12, offset: 579},
									expr: &litMatcher{
										pos:        position{line: 23, col: 13, offset: 580},
										val:        "=",
										ignoreCase: false,
										want:       "\"=\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 27, col: 5, offset: 671},
							run: (*parser).callonRawSection7,
						},
						&oneOrMoreExpr{
							pos: position{line: 31, col: 5, offset: 823},
							expr: &ruleRefExpr{
								pos:  position{line: 31, col: 5, offset: 823},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 31, col: 12, offset: 830},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 31, col: 19, offset: 837},
								name: "RawSectionTitle",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 31, col: 36, offset: 854},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "RawSectionTitle",
			pos:  position{line: 35, col: 1, offset: 924},
			expr: &actionExpr{
				pos: position{line: 35, col: 20, offset: 943},
				run: (*parser).callonRawSectionTitle1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 35, col: 20, offset: 943},
					expr: &charClassMatcher{
						pos:        position{line: 35, col: 20, offset: 943},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "RawLine",
			pos:  position{line: 39, col: 1, offset: 990},
			expr: &actionExpr{
				pos: position{line: 39, col: 12, offset: 1001},
				run: (*parser).callonRawLine1,
				expr: &seqExpr{
					pos: position{line: 39, col: 12, offset: 1001},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 39, col: 12, offset: 1001},
							expr: &ruleRefExpr{
								pos:  position{line: 39, col: 13, offset: 1002},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 39, col: 17, offset: 1006},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 39, col: 26, offset: 1015},
								run: (*parser).callonRawLine6,
								expr: &zeroOrMoreExpr{
									pos: position{line: 39, col: 26, offset: 1015},
									expr: &charClassMatcher{
										pos:        position{line: 39, col: 26, offset: 1015},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 41, col: 8, offset: 1070},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "RawDocument",
			pos:  position{line: 48, col: 1, offset: 1349},
			expr: &actionExpr{
				pos: position{line: 48, col: 16, offset: 1364},
				run: (*parser).callonRawDocument1,
				expr: &seqExpr{
					pos: position{line: 48, col: 16, offset: 1364},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 48, col: 16, offset: 1364},
							label: "frontmatter",
							expr: &zeroOrOneExpr{
								pos: position{line: 48, col: 29, offset: 1377},
								expr: &ruleRefExpr{
									pos:  position{line: 48, col: 29, offset: 1377},
									name: "FrontMatter",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 48, col: 43, offset: 1391},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 48, col: 51, offset: 1399},
								name: "RawBlocks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 48, col: 62, offset: 1410},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "RawBlocks",
			pos:  position{line: 55, col: 1, offset: 1599},
			expr: &actionExpr{
				pos: position{line: 55, col: 14, offset: 1612},
				run: (*parser).callonRawBlocks1,
				expr: &seqExpr{
					pos: position{line: 55, col: 14, offset: 1612},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 55, col: 14, offset: 1612},
							expr: &ruleRefExpr{
								pos:  position{line: 55, col: 14, offset: 1612},
								name: "Newline",
							},
						},
						&labeledExpr{
							pos:   position{line: 55, col: 23, offset: 1621},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 55, col: 31, offset: 1629},
								expr: &ruleRefExpr{
									pos:  position{line: 55, col: 31, offset: 1629},
									name: "DocumentHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 55, col: 48, offset: 1646},
							label: "blocks",
							expr: &zeroOrMoreExpr{
								pos: position{line: 55, col: 56, offset: 1654},
								expr: &ruleRefExpr{
									pos:  position{line: 55, col: 56, offset: 1654},
									name: "DocumentRawBlock",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRawBlock",
			pos:  position{line: 64, col: 1, offset: 1906},
			expr: &actionExpr{
				pos: position{line: 65, col: 9, offset: 1935},
				run: (*parser).callonDocumentRawBlock1,
				expr: &labeledExpr{
					pos:   position{line: 65, col: 9, offset: 1935},
					label: "block",
					expr: &choiceExpr{
						pos: position{line: 65, col: 16, offset: 1942},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 65, col: 16, offset: 1942},
								name: "LabeledListItem",
							},
							&ruleRefExpr{
								pos:  position{line: 66, col: 11, offset: 2007},
								name: "ImageBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 67, col: 11, offset: 2028},
								name: "SimpleRawParagraph",
							},
							&ruleRefExpr{
								pos:  position{line: 68, col: 11, offset: 2057},
								name: "BlankLine",
							},
							&ruleRefExpr{
								pos:  position{line: 69, col: 11, offset: 2109},
								name: "Section",
							},
							&ruleRefExpr{
								pos:  position{line: 70, col: 11, offset: 2127},
								name: "DelimitedBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 71, col: 11, offset: 2152},
								name: "SingleLineComment",
							},
							&ruleRefExpr{
								pos:  position{line: 72, col: 11, offset: 2180},
								name: "Table",
							},
							&ruleRefExpr{
								pos:  position{line: 73, col: 11, offset: 2196},
								name: "ThematicBreak",
							},
							&ruleRefExpr{
								pos:  position{line: 74, col: 11, offset: 2220},
								name: "OrderedListItem",
							},
							&ruleRefExpr{
								pos:  position{line: 75, col: 11, offset: 2246},
								name: "UnorderedListItem",
							},
							&ruleRefExpr{
								pos:  position{line: 76, col: 11, offset: 2275},
								name: "CalloutListItem",
							},
							&ruleRefExpr{
								pos:  position{line: 77, col: 11, offset: 2301},
								name: "ContinuedListItemElement",
							},
							&ruleRefExpr{
								pos:  position{line: 78, col: 11, offset: 2336},
								name: "LiteralBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 79, col: 11, offset: 2360},
								name: "AttributeDeclaration",
							},
							&ruleRefExpr{
								pos:  position{line: 80, col: 11, offset: 2392},
								name: "AttributeReset",
							},
							&ruleRefExpr{
								pos:  position{line: 81, col: 11, offset: 2418},
								name: "TableOfContentsPlaceHolder",
							},
							&ruleRefExpr{
								pos:  position{line: 82, col: 11, offset: 2455},
								name: "UserMacroBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 83, col: 11, offset: 2480},
								name: "RawParagraph",
							},
							&ruleRefExpr{
								pos:  position{line: 84, col: 11, offset: 2503},
								name: "StandaloneAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "FrontMatter",
			pos:  position{line: 92, col: 1, offset: 2712},
			expr: &ruleRefExpr{
				pos:  position{line: 92, col: 16, offset: 2727},
				name: "YamlFrontMatter",
			},
		},
		{
			name: "YamlFrontMatter",
			pos:  position{line: 94, col: 1, offset: 2745},
			expr: &actionExpr{
				pos: position{line: 94, col: 20, offset: 2764},
				run: (*parser).callonYamlFrontMatter1,
				expr: &seqExpr{
					pos: position{line: 94, col: 20, offset: 2764},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 94, col: 20, offset: 2764},
							name: "YamlFrontMatterToken",
						},
						&labeledExpr{
							pos:   position{line: 94, col: 41, offset: 2785},
							label: "content",
							expr: &zeroOrOneExpr{
								pos: position{line: 94, col: 49, offset: 2793},
								expr: &ruleRefExpr{
									pos:  position{line: 94, col: 50, offset: 2794},
									name: "YamlFrontMatterContent",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 94, col: 75, offset: 2819},
							name: "YamlFrontMatterToken",
						},
					},
				},
			},
		},
		{
			name: "YamlFrontMatterToken",
			pos:  position{line: 98, col: 1, offset: 2899},
			expr: &seqExpr{
				pos: position{line: 98, col: 26, offset: 2924},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 98, col: 26, offset: 2924},
						val:        "---",
						ignoreCase: false,
						want:       "\"---\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 98, col: 32, offset: 2930},
						expr: &ruleRefExpr{
							pos:  position{line: 98, col: 32, offset: 2930},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 98, col: 39, offset: 2937},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "YamlFrontMatterContent",
			pos:  position{line: 100, col: 1, offset: 2942},
			expr: &actionExpr{
				pos: position{line: 100, col: 27, offset: 2968},
				run: (*parser).callonYamlFrontMatterContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 100, col: 27, offset: 2968},
					expr: &oneOrMoreExpr{
						pos: position{line: 100, col: 28, offset: 2969},
						expr: &seqExpr{
							pos: position{line: 100, col: 29, offset: 2970},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 100, col: 29, offset: 2970},
									expr: &ruleRefExpr{
										pos:  position{line: 100, col: 30, offset: 2971},
										name: "YamlFrontMatterToken",
									},
								},
								&anyMatcher{
									line: 100, col: 51, offset: 2992,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentHeader",
			pos:  position{line: 107, col: 1, offset: 3158},
			expr: &actionExpr{
				pos: position{line: 107, col: 19, offset: 3176},
				run: (*parser).callonDocumentHeader1,
				expr: &seqExpr{
					pos: position{line: 107, col: 19, offset: 3176},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 107, col: 19, offset: 3176},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 107, col: 23, offset: 3180},
							expr: &ruleRefExpr{
								pos:  position{line: 107, col: 23, offset: 3180},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 107, col: 30, offset: 3187},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 107, col: 37, offset: 3194},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 107, col: 52, offset: 3209},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 107, col: 56, offset: 3213},
								expr: &ruleRefExpr{
									pos:  position{line: 107, col: 56, offset: 3213},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 107, col: 74, offset: 3231},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 108, col: 9, offset: 3243},
							expr: &choiceExpr{
								pos: position{line: 108, col: 10, offset: 3244},
								alternatives: []interface{}{
									&seqExpr{
										pos: position{line: 108, col: 10, offset: 3244},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 108, col: 10, offset: 3244},
												expr: &ruleRefExpr{
													pos:  position{line: 108, col: 10, offset: 3244},
													name: "Space",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 108, col: 17, offset: 3251},
												name: "SingleLineComment",
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 108, col: 37, offset: 3271},
										name: "CommentBlock",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 109, col: 9, offset: 3294},
							label: "authors",
							expr: &zeroOrOneExpr{
								pos: position{line: 109, col: 18, offset: 3303},
								expr: &ruleRefExpr{
									pos:  position{line: 109, col: 18, offset: 3303},
									name: "DocumentAuthors",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 110, col: 9, offset: 3330},
							expr: &choiceExpr{
								pos: position{line: 110, col: 10, offset: 3331},
								alternatives: []interface{}{
									&seqExpr{
										pos: position{line: 110, col: 10, offset: 3331},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 110, col: 10, offset: 3331},
												expr: &ruleRefExpr{
													pos:  position{line: 110, col: 10, offset: 3331},
													name: "Space",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 110, col: 17, offset: 3338},
												name: "SingleLineComment",
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 110, col: 37, offset: 3358},
										name: "CommentBlock",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 111, col: 9, offset: 3381},
							label: "revision",
							expr: &zeroOrOneExpr{
								pos: position{line: 111, col: 19, offset: 3391},
								expr: &ruleRefExpr{
									pos:  position{line: 111, col: 19, offset: 3391},
									name: "DocumentRevision",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthors",
			pos:  position{line: 115, col: 1, offset: 3492},
			expr: &choiceExpr{
				pos: position{line: 115, col: 20, offset: 3511},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 115, col: 20, offset: 3511},
						name: "DocumentAuthorsInlineForm",
					},
					&ruleRefExpr{
						pos:  position{line: 115, col: 48, offset: 3539},
						name: "DocumentAuthorsAttributeForm",
					},
				},
			},
		},
		{
			name: "DocumentAuthorsInlineForm",
			pos:  position{line: 117, col: 1, offset: 3569},
			expr: &actionExpr{
				pos: position{line: 117, col: 30, offset: 3598},
				run: (*parser).callonDocumentAuthorsInlineForm1,
				expr: &seqExpr{
					pos: position{line: 117, col: 30, offset: 3598},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 117, col: 30, offset: 3598},
							expr: &ruleRefExpr{
								pos:  position{line: 117, col: 30, offset: 3598},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 117, col: 37, offset: 3605},
							expr: &litMatcher{
								pos:        position{line: 117, col: 38, offset: 3606},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 117, col: 42, offset: 3610},
							label: "authors",
							expr: &oneOrMoreExpr{
								pos: position{line: 117, col: 51, offset: 3619},
								expr: &ruleRefExpr{
									pos:  position{line: 117, col: 51, offset: 3619},
									name: "DocumentAuthor",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 117, col: 68, offset: 3636},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorsAttributeForm",
			pos:  position{line: 121, col: 1, offset: 3706},
			expr: &actionExpr{
				pos: position{line: 121, col: 33, offset: 3738},
				run: (*parser).callonDocumentAuthorsAttributeForm1,
				expr: &seqExpr{
					pos: position{line: 121, col: 33, offset: 3738},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 121, col: 33, offset: 3738},
							expr: &ruleRefExpr{
								pos:  position{line: 121, col: 33, offset: 3738},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 121, col: 40, offset: 3745},
							val:        ":author:",
							ignoreCase: false,
							want:       "\":author:\"",
						},
						&labeledExpr{
							pos:   position{line: 121, col: 51, offset: 3756},
							label: "author",
							expr: &ruleRefExpr{
								pos:  position{line: 121, col: 59, offset: 3764},
								name: "DocumentAuthor",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 121, col: 75, offset: 3780},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthor",
			pos:  position{line: 125, col: 1, offset: 3859},
			expr: &actionExpr{
				pos: position{line: 125, col: 19, offset: 3877},
				run: (*parser).callonDocumentAuthor1,
				expr: &seqExpr{
					pos: position{line: 125, col: 19, offset: 3877},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 125, col: 19, offset: 3877},
							expr: &ruleRefExpr{
								pos:  position{line: 125, col: 19, offset: 3877},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 125, col: 26, offset: 3884},
							label: "fullname",
							expr: &ruleRefExpr{
								pos:  position{line: 125, col: 36, offset: 3894},
								name: "DocumentAuthorName",
							},
						},
						&labeledExpr{
							pos:   position{line: 125, col: 56, offset: 3914},
							label: "email",
							expr: &zeroOrOneExpr{
								pos: position{line: 125, col: 62, offset: 3920},
								expr: &ruleRefExpr{
									pos:  position{line: 125, col: 63, offset: 3921},
									name: "DocumentAuthorEmail",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 125, col: 85, offset: 3943},
							expr: &ruleRefExpr{
								pos:  position{line: 125, col: 85, offset: 3943},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 125, col: 92, offset: 3950},
							expr: &litMatcher{
								pos:        position{line: 125, col: 92, offset: 3950},
								val:        ";",
								ignoreCase: false,
								want:       "\";\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 125, col: 97, offset: 3955},
							expr: &ruleRefExpr{
								pos:  position{line: 125, col: 97, offset: 3955},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorName",
			pos:  position{line: 130, col: 1, offset: 4100},
			expr: &actionExpr{
				pos: position{line: 130, col: 23, offset: 4122},
				run: (*parser).callonDocumentAuthorName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 130, col: 23, offset: 4122},
					expr: &charClassMatcher{
						pos:        position{line: 130, col: 23, offset: 4122},
						val:        "[^<;\\r\\n]",
						chars:      []rune{'<', ';', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentAuthorEmail",
			pos:  position{line: 134, col: 1, offset: 4169},
			expr: &actionExpr{
				pos: position{line: 134, col: 24, offset: 4192},
				run: (*parser).callonDocumentAuthorEmail1,
				expr: &seqExpr{
					pos: position{line: 134, col: 24, offset: 4192},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 134, col: 24, offset: 4192},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 134, col: 28, offset: 4196},
							label: "email",
							expr: &actionExpr{
								pos: position{line: 134, col: 35, offset: 4203},
								run: (*parser).callonDocumentAuthorEmail5,
								expr: &oneOrMoreExpr{
									pos: position{line: 134, col: 36, offset: 4204},
									expr: &charClassMatcher{
										pos:        position{line: 134, col: 36, offset: 4204},
										val:        "[^>\\r\\n]",
										chars:      []rune{'>', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 136, col: 4, offset: 4251},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevision",
			pos:  position{line: 142, col: 1, offset: 4412},
			expr: &actionExpr{
				pos: position{line: 142, col: 21, offset: 4432},
				run: (*parser).callonDocumentRevision1,
				expr: &seqExpr{
					pos: position{line: 142, col: 21, offset: 4432},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 142, col: 21, offset: 4432},
							expr: &ruleRefExpr{
								pos:  position{line: 142, col: 21, offset: 4432},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 142, col: 28, offset: 4439},
							expr: &litMatcher{
								pos:        position{line: 142, col: 29, offset: 4440},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 142, col: 33, offset: 4444},
							label: "revision",
							expr: &choiceExpr{
								pos: position{line: 143, col: 9, offset: 4463},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 143, col: 10, offset: 4464},
										run: (*parser).callonDocumentRevision9,
										expr: &seqExpr{
											pos: position{line: 143, col: 10, offset: 4464},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 143, col: 10, offset: 4464},
													label: "revnumber",
													expr: &ruleRefExpr{
														pos:  position{line: 143, col: 21, offset: 4475},
														name: "DocumentRevisionNumber",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 143, col: 45, offset: 4499},
													expr: &litMatcher{
														pos:        position{line: 143, col: 45, offset: 4499},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 143, col: 50, offset: 4504},
													label: "revdate",
													expr: &zeroOrOneExpr{
														pos: position{line: 143, col: 58, offset: 4512},
														expr: &ruleRefExpr{
															pos:  position{line: 143, col: 59, offset: 4513},
															name: "DocumentRevisionDate",
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 143, col: 82, offset: 4536},
													expr: &litMatcher{
														pos:        position{line: 143, col: 82, offset: 4536},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 143, col: 87, offset: 4541},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 143, col: 97, offset: 4551},
														expr: &ruleRefExpr{
															pos:  position{line: 143, col: 98, offset: 4552},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 145, col: 15, offset: 4669},
										run: (*parser).callonDocumentRevision23,
										expr: &seqExpr{
											pos: position{line: 145, col: 15, offset: 4669},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 145, col: 15, offset: 4669},
													label: "revdate",
													expr: &ruleRefExpr{
														pos:  position{line: 145, col: 24, offset: 4678},
														name: "DocumentRevisionDate",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 145, col: 46, offset: 4700},
													expr: &litMatcher{
														pos:        position{line: 145, col: 46, offset: 4700},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 145, col: 51, offset: 4705},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 145, col: 61, offset: 4715},
														expr: &ruleRefExpr{
															pos:  position{line: 145, col: 62, offset: 4716},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 147, col: 13, offset: 4825},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionNumber",
			pos:  position{line: 152, col: 1, offset: 4955},
			expr: &choiceExpr{
				pos: position{line: 152, col: 27, offset: 4981},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 152, col: 27, offset: 4981},
						run: (*parser).callonDocumentRevisionNumber2,
						expr: &seqExpr{
							pos: position{line: 152, col: 27, offset: 4981},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 152, col: 27, offset: 4981},
									val:        "v",
									ignoreCase: true,
									want:       "\"v\"i",
								},
								&ruleRefExpr{
									pos:  position{line: 152, col: 32, offset: 4986},
									name: "Digit",
								},
								&oneOrMoreExpr{
									pos: position{line: 152, col: 39, offset: 4993},
									expr: &charClassMatcher{
										pos:        position{line: 152, col: 39, offset: 4993},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 154, col: 5, offset: 5041},
						run: (*parser).callonDocumentRevisionNumber8,
						expr: &seqExpr{
							pos: position{line: 154, col: 5, offset: 5041},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 154, col: 5, offset: 5041},
									expr: &litMatcher{
										pos:        position{line: 154, col: 5, offset: 5041},
										val:        "v",
										ignoreCase: true,
										want:       "\"v\"i",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 154, col: 11, offset: 5047},
									name: "Digit",
								},
								&oneOrMoreExpr{
									pos: position{line: 154, col: 18, offset: 5054},
									expr: &charClassMatcher{
										pos:        position{line: 154, col: 18, offset: 5054},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 154, col: 29, offset: 5065},
									expr: &ruleRefExpr{
										pos:  position{line: 154, col: 29, offset: 5065},
										name: "Space",
									},
								},
								&andExpr{
									pos: position{line: 154, col: 36, offset: 5072},
									expr: &litMatcher{
										pos:        position{line: 154, col: 37, offset: 5073},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionDate",
			pos:  position{line: 158, col: 1, offset: 5113},
			expr: &actionExpr{
				pos: position{line: 158, col: 25, offset: 5137},
				run: (*parser).callonDocumentRevisionDate1,
				expr: &oneOrMoreExpr{
					pos: position{line: 158, col: 25, offset: 5137},
					expr: &charClassMatcher{
						pos:        position{line: 158, col: 25, offset: 5137},
						val:        "[^:\\r\\n]",
						chars:      []rune{':', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentRevisionRemark",
			pos:  position{line: 162, col: 1, offset: 5183},
			expr: &actionExpr{
				pos: position{line: 162, col: 27, offset: 5209},
				run: (*parser).callonDocumentRevisionRemark1,
				expr: &oneOrMoreExpr{
					pos: position{line: 162, col: 27, offset: 5209},
					expr: &charClassMatcher{
						pos:        position{line: 162, col: 27, offset: 5209},
						val:        "[^\\r\\r\\n]",
						chars:      []rune{'\r', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "AttributeDeclaration",
			pos:  position{line: 169, col: 1, offset: 5362},
			expr: &actionExpr{
				pos: position{line: 169, col: 25, offset: 5386},
				run: (*parser).callonAttributeDeclaration1,
				expr: &seqExpr{
					pos: position{line: 169, col: 25, offset: 5386},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 169, col: 25, offset: 5386},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 169, col: 29, offset: 5390},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 169, col: 35, offset: 5396},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 169, col: 50, offset: 5411},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 170, col: 9, offset: 5424},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 170, col: 15, offset: 5430},
								expr: &actionExpr{
									pos: position{line: 170, col: 16, offset: 5431},
									run: (*parser).callonAttributeDeclaration9,
									expr: &seqExpr{
										pos: position{line: 170, col: 17, offset: 5432},
										exprs: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 170, col: 17, offset: 5432},
												expr: &ruleRefExpr{
													pos:  position{line: 170, col: 17, offset: 5432},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 170, col: 24, offset: 5439},
												label: "value",
												expr: &ruleRefExpr{
													pos:  position{line: 170, col: 31, offset: 5446},
													name: "AttributeDeclarationValue",
												},
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 172, col: 13, offset: 5520},
							expr: &ruleRefExpr{
								pos:  position{line: 172, col: 13, offset: 5520},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 172, col: 20, offset: 5527},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "AttributeName",
			pos:  position{line: 179, col: 1, offset: 5767},
			expr: &actionExpr{
				pos: position{line: 179, col: 18, offset: 5784},
				run: (*parser).callonAttributeName1,
				expr: &seqExpr{
					pos: position{line: 179, col: 18, offset: 5784},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 179, col: 18, offset: 5784},
							val:        "[\\pL0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 179, col: 28, offset: 5794},
							expr: &charClassMatcher{
								pos:        position{line: 179, col: 29, offset: 5795},
								val:        "[\\pL0-9-]",
								chars:      []rune{'-'},
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeDeclarationValue",
			pos:  position{line: 183, col: 1, offset: 5843},
			expr: &actionExpr{
				pos: position{line: 183, col: 30, offset: 5872},
				run: (*parser).callonAttributeDeclarationValue1,
				expr: &oneOrMoreExpr{
					pos: position{line: 183, col: 30, offset: 5872},
					expr: &charClassMatcher{
						pos:        position{line: 183, col: 30, offset: 5872},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "AttributeReset",
			pos:  position{line: 187, col: 1, offset: 5917},
			expr: &choiceExpr{
				pos: position{line: 187, col: 19, offset: 5935},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 187, col: 19, offset: 5935},
						run: (*parser).callonAttributeReset2,
						expr: &seqExpr{
							pos: position{line: 187, col: 19, offset: 5935},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 187, col: 19, offset: 5935},
									val:        ":!",
									ignoreCase: false,
									want:       "\":!\"",
								},
								&labeledExpr{
									pos:   position{line: 187, col: 24, offset: 5940},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 187, col: 30, offset: 5946},
										name: "AttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 187, col: 45, offset: 5961},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 187, col: 49, offset: 5965},
									expr: &ruleRefExpr{
										pos:  position{line: 187, col: 49, offset: 5965},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 187, col: 56, offset: 5972},
									name: "EOL",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 189, col: 5, offset: 6032},
						run: (*parser).callonAttributeReset11,
						expr: &seqExpr{
							pos: position{line: 189, col: 5, offset: 6032},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 189, col: 5, offset: 6032},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&labeledExpr{
									pos:   position{line: 189, col: 9, offset: 6036},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 189, col: 15, offset: 6042},
										name: "AttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 189, col: 30, offset: 6057},
									val:        "!:",
									ignoreCase: false,
									want:       "\"!:\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 189, col: 35, offset: 6062},
									expr: &ruleRefExpr{
										pos:  position{line: 189, col: 35, offset: 6062},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 189, col: 42, offset: 6069},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeSubstitution",
			pos:  position{line: 193, col: 1, offset: 6128},
			expr: &choiceExpr{
				pos: position{line: 193, col: 26, offset: 6153},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 193, col: 26, offset: 6153},
						name: "CounterSub",
					},
					&ruleRefExpr{
						pos:  position{line: 193, col: 39, offset: 6166},
						name: "AttrSub",
					},
				},
			},
		},
		{
			name: "AttrSub",
			pos:  position{line: 195, col: 1, offset: 6175},
			expr: &actionExpr{
				pos: position{line: 195, col: 12, offset: 6186},
				run: (*parser).callonAttrSub1,
				expr: &seqExpr{
					pos: position{line: 195, col: 12, offset: 6186},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 195, col: 12, offset: 6186},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&labeledExpr{
							pos:   position{line: 195, col: 16, offset: 6190},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 195, col: 21, offset: 6195},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 195, col: 35, offset: 6209},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSub",
			pos:  position{line: 199, col: 1, offset: 6275},
			expr: &choiceExpr{
				pos: position{line: 199, col: 15, offset: 6289},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 199, col: 15, offset: 6289},
						name: "CounterSub1",
					},
					&ruleRefExpr{
						pos:  position{line: 199, col: 29, offset: 6303},
						name: "CounterSub2",
					},
					&ruleRefExpr{
						pos:  position{line: 199, col: 43, offset: 6317},
						name: "CounterSubAlpha",
					},
					&ruleRefExpr{
						pos:  position{line: 199, col: 61, offset: 6335},
						name: "CounterSubAlpha2",
					},
					&ruleRefExpr{
						pos:  position{line: 199, col: 80, offset: 6354},
						name: "CounterSubStart",
					},
					&ruleRefExpr{
						pos:  position{line: 199, col: 98, offset: 6372},
						name: "CounterSubStart2",
					},
				},
			},
		},
		{
			name: "CounterSub1",
			pos:  position{line: 201, col: 1, offset: 6390},
			expr: &actionExpr{
				pos: position{line: 201, col: 16, offset: 6405},
				run: (*parser).callonCounterSub11,
				expr: &seqExpr{
					pos: position{line: 201, col: 16, offset: 6405},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 201, col: 16, offset: 6405},
							val:        "{counter:",
							ignoreCase: false,
							want:       "\"{counter:\"",
						},
						&labeledExpr{
							pos:   position{line: 201, col: 28, offset: 6417},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 201, col: 33, offset: 6422},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 201, col: 47, offset: 6436},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSub2",
			pos:  position{line: 205, col: 1, offset: 6512},
			expr: &actionExpr{
				pos: position{line: 205, col: 16, offset: 6527},
				run: (*parser).callonCounterSub21,
				expr: &seqExpr{
					pos: position{line: 205, col: 16, offset: 6527},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 205, col: 16, offset: 6527},
							val:        "{counter2:",
							ignoreCase: false,
							want:       "\"{counter2:\"",
						},
						&labeledExpr{
							pos:   position{line: 205, col: 29, offset: 6540},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 205, col: 34, offset: 6545},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 205, col: 48, offset: 6559},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubAlpha",
			pos:  position{line: 209, col: 1, offset: 6634},
			expr: &actionExpr{
				pos: position{line: 209, col: 20, offset: 6653},
				run: (*parser).callonCounterSubAlpha1,
				expr: &seqExpr{
					pos: position{line: 209, col: 20, offset: 6653},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 209, col: 20, offset: 6653},
							val:        "{counter:",
							ignoreCase: false,
							want:       "\"{counter:\"",
						},
						&labeledExpr{
							pos:   position{line: 209, col: 32, offset: 6665},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 209, col: 37, offset: 6670},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 209, col: 51, offset: 6684},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 209, col: 55, offset: 6688},
							label: "start",
							expr: &charClassMatcher{
								pos:        position{line: 209, col: 61, offset: 6694},
								val:        "[A-Za-z]",
								ranges:     []rune{'A', 'Z', 'a', 'z'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&litMatcher{
							pos:        position{line: 209, col: 70, offset: 6703},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubAlpha2",
			pos:  position{line: 213, col: 1, offset: 6781},
			expr: &actionExpr{
				pos: position{line: 213, col: 21, offset: 6801},
				run: (*parser).callonCounterSubAlpha21,
				expr: &seqExpr{
					pos: position{line: 213, col: 21, offset: 6801},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 213, col: 21, offset: 6801},
							val:        "{counter2:",
							ignoreCase: false,
							want:       "\"{counter2:\"",
						},
						&labeledExpr{
							pos:   position{line: 213, col: 34, offset: 6814},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 213, col: 39, offset: 6819},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 213, col: 53, offset: 6833},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 213, col: 57, offset: 6837},
							label: "start",
							expr: &charClassMatcher{
								pos:        position{line: 213, col: 63, offset: 6843},
								val:        "[A-Za-z]",
								ranges:     []rune{'A', 'Z', 'a', 'z'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&litMatcher{
							pos:        position{line: 213, col: 72, offset: 6852},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubStart",
			pos:  position{line: 217, col: 1, offset: 6929},
			expr: &actionExpr{
				pos: position{line: 217, col: 20, offset: 6948},
				run: (*parser).callonCounterSubStart1,
				expr: &seqExpr{
					pos: position{line: 217, col: 20, offset: 6948},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 217, col: 20, offset: 6948},
							val:        "{counter:",
							ignoreCase: false,
							want:       "\"{counter:\"",
						},
						&labeledExpr{
							pos:   position{line: 217, col: 32, offset: 6960},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 217, col: 37, offset: 6965},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 217, col: 51, offset: 6979},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 217, col: 55, offset: 6983},
							label: "num",
							expr: &actionExpr{
								pos: position{line: 217, col: 60, offset: 6988},
								run: (*parser).callonCounterSubStart8,
								expr: &oneOrMoreExpr{
									pos: position{line: 217, col: 60, offset: 6988},
									expr: &charClassMatcher{
										pos:        position{line: 217, col: 60, offset: 6988},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 217, col: 108, offset: 7036},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubStart2",
			pos:  position{line: 221, col: 1, offset: 7118},
			expr: &actionExpr{
				pos: position{line: 221, col: 21, offset: 7138},
				run: (*parser).callonCounterSubStart21,
				expr: &seqExpr{
					pos: position{line: 221, col: 21, offset: 7138},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 221, col: 21, offset: 7138},
							val:        "{counter2:",
							ignoreCase: false,
							want:       "\"{counter2:\"",
						},
						&labeledExpr{
							pos:   position{line: 221, col: 34, offset: 7151},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 221, col: 39, offset: 7156},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 221, col: 53, offset: 7170},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 221, col: 57, offset: 7174},
							label: "num",
							expr: &actionExpr{
								pos: position{line: 221, col: 62, offset: 7179},
								run: (*parser).callonCounterSubStart28,
								expr: &oneOrMoreExpr{
									pos: position{line: 221, col: 62, offset: 7179},
									expr: &charClassMatcher{
										pos:        position{line: 221, col: 62, offset: 7179},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 221, col: 110, offset: 7227},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "ElementAttribute",
			pos:  position{line: 225, col: 1, offset: 7308},
			expr: &actionExpr{
				pos: position{line: 225, col: 21, offset: 7328},
				run: (*parser).callonElementAttribute1,
				expr: &seqExpr{
					pos: position{line: 225, col: 21, offset: 7328},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 225, col: 21, offset: 7328},
							expr: &choiceExpr{
								pos: position{line: 225, col: 23, offset: 7330},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 225, col: 23, offset: 7330},
										val:        "[",
										ignoreCase: false,
										want:       "\"[\"",
									},
									&litMatcher{
										pos:        position{line: 225, col: 29, offset: 7336},
										val:        ".",
										ignoreCase: false,
										want:       "\".\"",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 226, col: 5, offset: 7460},
							label: "attr",
							expr: &choiceExpr{
								pos: position{line: 226, col: 11, offset: 7466},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 226, col: 11, offset: 7466},
										name: "ElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 227, col: 9, offset: 7487},
										name: "ElementTitle",
									},
									&ruleRefExpr{
										pos:  position{line: 228, col: 9, offset: 7511},
										name: "ElementShortHandAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 229, col: 9, offset: 7548},
										name: "LiteralBlockAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 230, col: 9, offset: 7581},
										name: "SourceAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 231, col: 9, offset: 7609},
										name: "ExampleBlockAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 232, col: 9, offset: 7641},
										name: "ListingBlockAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 233, col: 9, offset: 7673},
										name: "QuoteAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 234, col: 9, offset: 7700},
										name: "VerseAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 235, col: 9, offset: 7727},
										name: "AdmonitionMarkerAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 236, col: 9, offset: 7764},
										name: "PassthroughBlockAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 237, col: 9, offset: 7800},
										name: "AttributeGroup",
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 237, col: 25, offset: 7816},
							expr: &ruleRefExpr{
								pos:  position{line: 237, col: 25, offset: 7816},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "ElementID",
			pos:  position{line: 241, col: 1, offset: 7914},
			expr: &actionExpr{
				pos: position{line: 241, col: 14, offset: 7927},
				run: (*parser).callonElementID1,
				expr: &seqExpr{
					pos: position{line: 241, col: 14, offset: 7927},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 241, col: 14, offset: 7927},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 241, col: 19, offset: 7932},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 241, col: 23, offset: 7936},
								name: "Id",
							},
						},
						&litMatcher{
							pos:        position{line: 241, col: 27, offset: 7940},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 241, col: 32, offset: 7945},
							expr: &ruleRefExpr{
								pos:  position{line: 241, col: 32, offset: 7945},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 241, col: 39, offset: 7952},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "InlineElementID",
			pos:  position{line: 245, col: 1, offset: 7995},
			expr: &actionExpr{
				pos: position{line: 245, col: 20, offset: 8014},
				run: (*parser).callonInlineElementID1,
				expr: &seqExpr{
					pos: position{line: 245, col: 20, offset: 8014},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 245, col: 20, offset: 8014},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 245, col: 25, offset: 8019},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 245, col: 29, offset: 8023},
								name: "Id",
							},
						},
						&litMatcher{
							pos:        position{line: 245, col: 33, offset: 8027},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 245, col: 38, offset: 8032},
							expr: &ruleRefExpr{
								pos:  position{line: 245, col: 38, offset: 8032},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "ElementTitle",
			pos:  position{line: 251, col: 1, offset: 8309},
			expr: &actionExpr{
				pos: position{line: 251, col: 17, offset: 8325},
				run: (*parser).callonElementTitle1,
				expr: &seqExpr{
					pos: position{line: 251, col: 17, offset: 8325},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 251, col: 17, offset: 8325},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 251, col: 21, offset: 8329},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 251, col: 28, offset: 8336},
								name: "ElementTitleContent",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 251, col: 49, offset: 8357},
							expr: &ruleRefExpr{
								pos:  position{line: 251, col: 49, offset: 8357},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 251, col: 56, offset: 8364},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ElementTitleContent",
			pos:  position{line: 255, col: 1, offset: 8429},
			expr: &oneOrMoreExpr{
				pos: position{line: 255, col: 24, offset: 8452},
				expr: &choiceExpr{
					pos: position{line: 256, col: 5, offset: 8458},
					alternatives: []interface{}{
						&actionExpr{
							pos: position{line: 256, col: 6, offset: 8459},
							run: (*parser).callonElementTitleContent3,
							expr: &seqExpr{
								pos: position{line: 256, col: 6, offset: 8459},
								exprs: []interface{}{
									&charClassMatcher{
										pos:        position{line: 256, col: 6, offset: 8459},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
									&oneOrMoreExpr{
										pos: position{line: 256, col: 14, offset: 8467},
										expr: &charClassMatcher{
											pos:        position{line: 256, col: 14, offset: 8467},
											val:        "[^\\r\\n{<>]",
											chars:      []rune{'\r', '\n', '{', '<', '>'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 259, col: 5, offset: 8662},
							name: "AttrSub",
						},
						&actionExpr{
							pos: position{line: 260, col: 6, offset: 8677},
							run: (*parser).callonElementTitleContent9,
							expr: &litMatcher{
								pos:        position{line: 260, col: 6, offset: 8677},
								val:        "{",
								ignoreCase: false,
								want:       "\"{\"",
							},
						},
					},
				},
			},
		},
		{
			name: "ElementShortHandAttributes",
			pos:  position{line: 267, col: 1, offset: 8874},
			expr: &actionExpr{
				pos: position{line: 267, col: 31, offset: 8904},
				run: (*parser).callonElementShortHandAttributes1,
				expr: &seqExpr{
					pos: position{line: 267, col: 31, offset: 8904},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 267, col: 31, offset: 8904},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 267, col: 35, offset: 8908},
							label: "attributes",
							expr: &seqExpr{
								pos: position{line: 267, col: 47, offset: 8920},
								exprs: []interface{}{
									&zeroOrMoreExpr{
										pos: position{line: 267, col: 47, offset: 8920},
										expr: &ruleRefExpr{
											pos:  position{line: 267, col: 47, offset: 8920},
											name: "ShortHandAttr",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 267, col: 62, offset: 8935},
										expr: &ruleRefExpr{
											pos:  position{line: 267, col: 62, offset: 8935},
											name: "NamedAttribute",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 267, col: 79, offset: 8952},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 267, col: 83, offset: 8956},
							expr: &ruleRefExpr{
								pos:  position{line: 267, col: 83, offset: 8956},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 267, col: 90, offset: 8963},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "BlockAttribute",
			pos:  position{line: 271, col: 1, offset: 9038},
			expr: &choiceExpr{
				pos: position{line: 271, col: 19, offset: 9056},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 271, col: 19, offset: 9056},
						name: "BlockAttributeList",
					},
					&ruleRefExpr{
						pos:  position{line: 271, col: 40, offset: 9077},
						name: "ElementTitle",
					},
					&ruleRefExpr{
						pos:  position{line: 271, col: 55, offset: 9092},
						name: "ElementID",
					},
				},
			},
		},
		{
			name: "BlockAttributeList",
			pos:  position{line: 275, col: 1, offset: 9320},
			expr: &actionExpr{
				pos: position{line: 275, col: 23, offset: 9342},
				run: (*parser).callonBlockAttributeList1,
				expr: &seqExpr{
					pos: position{line: 275, col: 23, offset: 9342},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 275, col: 23, offset: 9342},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 275, col: 27, offset: 9346},
							label: "attributes",
							expr: &seqExpr{
								pos: position{line: 275, col: 39, offset: 9358},
								exprs: []interface{}{
									&zeroOrOneExpr{
										pos: position{line: 275, col: 39, offset: 9358},
										expr: &ruleRefExpr{
											pos:  position{line: 275, col: 39, offset: 9358},
											name: "BlockAttrStyle",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 275, col: 55, offset: 9374},
										expr: &ruleRefExpr{
											pos:  position{line: 275, col: 55, offset: 9374},
											name: "ShortHandAttr",
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 275, col: 70, offset: 9389},
										expr: &ruleRefExpr{
											pos:  position{line: 275, col: 70, offset: 9389},
											name: "BlockAttrPositional2",
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 275, col: 92, offset: 9411},
										expr: &ruleRefExpr{
											pos:  position{line: 275, col: 92, offset: 9411},
											name: "BlockAttrPositional3",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 275, col: 114, offset: 9433},
										expr: &ruleRefExpr{
											pos:  position{line: 275, col: 114, offset: 9433},
											name: "NamedAttribute",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 275, col: 131, offset: 9450},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&ruleRefExpr{
							pos:  position{line: 275, col: 135, offset: 9454},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "BlockAttrStyle",
			pos:  position{line: 279, col: 1, offset: 9529},
			expr: &actionExpr{
				pos: position{line: 279, col: 19, offset: 9547},
				run: (*parser).callonBlockAttrStyle1,
				expr: &labeledExpr{
					pos:   position{line: 279, col: 19, offset: 9547},
					label: "style",
					expr: &ruleRefExpr{
						pos:  position{line: 279, col: 25, offset: 9553},
						name: "PositionalValue",
					},
				},
			},
		},
		{
			name: "BlockAttrPositional2",
			pos:  position{line: 283, col: 1, offset: 9614},
			expr: &actionExpr{
				pos: position{line: 283, col: 25, offset: 9638},
				run: (*parser).callonBlockAttrPositional21,
				expr: &seqExpr{
					pos: position{line: 283, col: 25, offset: 9638},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 283, col: 25, offset: 9638},
							expr: &ruleRefExpr{
								pos:  position{line: 283, col: 25, offset: 9638},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 283, col: 32, offset: 9645},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 283, col: 36, offset: 9649},
							expr: &ruleRefExpr{
								pos:  position{line: 283, col: 36, offset: 9649},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 283, col: 43, offset: 9656},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 283, col: 49, offset: 9662},
								expr: &ruleRefExpr{
									pos:  position{line: 283, col: 49, offset: 9662},
									name: "PositionalValue",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockAttrPositional3",
			pos:  position{line: 290, col: 1, offset: 9801},
			expr: &actionExpr{
				pos: position{line: 290, col: 25, offset: 9825},
				run: (*parser).callonBlockAttrPositional31,
				expr: &seqExpr{
					pos: position{line: 290, col: 25, offset: 9825},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 290, col: 25, offset: 9825},
							expr: &ruleRefExpr{
								pos:  position{line: 290, col: 25, offset: 9825},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 290, col: 32, offset: 9832},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 290, col: 36, offset: 9836},
							expr: &ruleRefExpr{
								pos:  position{line: 290, col: 36, offset: 9836},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 290, col: 43, offset: 9843},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 290, col: 49, offset: 9849},
								expr: &ruleRefExpr{
									pos:  position{line: 290, col: 49, offset: 9849},
									name: "PositionalValue",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralBlockAttribute",
			pos:  position{line: 297, col: 1, offset: 9988},
			expr: &actionExpr{
				pos: position{line: 297, col: 26, offset: 10013},
				run: (*parser).callonLiteralBlockAttribute1,
				expr: &seqExpr{
					pos: position{line: 297, col: 26, offset: 10013},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 297, col: 26, offset: 10013},
							val:        "[literal]",
							ignoreCase: false,
							want:       "\"[literal]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 297, col: 38, offset: 10025},
							expr: &ruleRefExpr{
								pos:  position{line: 297, col: 38, offset: 10025},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 297, col: 45, offset: 10032},
							name: "Newline",
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockAttribute",
			pos:  position{line: 301, col: 1, offset: 10089},
			expr: &actionExpr{
				pos: position{line: 301, col: 30, offset: 10118},
				run: (*parser).callonPassthroughBlockAttribute1,
				expr: &seqExpr{
					pos: position{line: 301, col: 30, offset: 10118},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 301, col: 30, offset: 10118},
							val:        "[pass]",
							ignoreCase: false,
							want:       "\"[pass]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 301, col: 39, offset: 10127},
							expr: &ruleRefExpr{
								pos:  position{line: 301, col: 39, offset: 10127},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 301, col: 46, offset: 10134},
							name: "Newline",
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockAttribute",
			pos:  position{line: 305, col: 1, offset: 10195},
			expr: &actionExpr{
				pos: position{line: 305, col: 26, offset: 10220},
				run: (*parser).callonExampleBlockAttribute1,
				expr: &seqExpr{
					pos: position{line: 305, col: 26, offset: 10220},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 305, col: 26, offset: 10220},
							val:        "[example]",
							ignoreCase: false,
							want:       "\"[example]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 305, col: 38, offset: 10232},
							expr: &ruleRefExpr{
								pos:  position{line: 305, col: 38, offset: 10232},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 305, col: 45, offset: 10239},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ListingBlockAttribute",
			pos:  position{line: 309, col: 1, offset: 10292},
			expr: &actionExpr{
				pos: position{line: 309, col: 26, offset: 10317},
				run: (*parser).callonListingBlockAttribute1,
				expr: &seqExpr{
					pos: position{line: 309, col: 26, offset: 10317},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 309, col: 26, offset: 10317},
							val:        "[listing]",
							ignoreCase: false,
							want:       "\"[listing]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 309, col: 38, offset: 10329},
							expr: &ruleRefExpr{
								pos:  position{line: 309, col: 38, offset: 10329},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 309, col: 45, offset: 10336},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionMarkerAttribute",
			pos:  position{line: 314, col: 1, offset: 10469},
			expr: &actionExpr{
				pos: position{line: 314, col: 30, offset: 10498},
				run: (*parser).callonAdmonitionMarkerAttribute1,
				expr: &seqExpr{
					pos: position{line: 314, col: 30, offset: 10498},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 314, col: 30, offset: 10498},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 314, col: 34, offset: 10502},
							label: "k",
							expr: &ruleRefExpr{
								pos:  position{line: 314, col: 37, offset: 10505},
								name: "AdmonitionKind",
							},
						},
						&litMatcher{
							pos:        position{line: 314, col: 53, offset: 10521},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 314, col: 57, offset: 10525},
							expr: &ruleRefExpr{
								pos:  position{line: 314, col: 57, offset: 10525},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 314, col: 64, offset: 10532},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SourceAttributes",
			pos:  position{line: 319, col: 1, offset: 10687},
			expr: &actionExpr{
				pos: position{line: 319, col: 21, offset: 10707},
				run: (*parser).callonSourceAttributes1,
				expr: &seqExpr{
					pos: position{line: 319, col: 21, offset: 10707},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 319, col: 21, offset: 10707},
							val:        "[source",
							ignoreCase: false,
							want:       "\"[source\"",
						},
						&labeledExpr{
							pos:   position{line: 320, col: 5, offset: 10722},
							label: "option",
							expr: &zeroOrOneExpr{
								pos: position{line: 320, col: 12, offset: 10729},
								expr: &actionExpr{
									pos: position{line: 320, col: 13, offset: 10730},
									run: (*parser).callonSourceAttributes6,
									expr: &litMatcher{
										pos:        position{line: 320, col: 13, offset: 10730},
										val:        "%nowrap",
										ignoreCase: false,
										want:       "\"%nowrap\"",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 323, col: 5, offset: 10783},
							label: "language",
							expr: &zeroOrOneExpr{
								pos: position{line: 323, col: 14, offset: 10792},
								expr: &actionExpr{
									pos: position{line: 323, col: 15, offset: 10793},
									run: (*parser).callonSourceAttributes10,
									expr: &seqExpr{
										pos: position{line: 323, col: 15, offset: 10793},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 323, col: 15, offset: 10793},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 323, col: 19, offset: 10797},
												label: "attr",
												expr: &zeroOrOneExpr{
													pos: position{line: 323, col: 24, offset: 10802},
													expr: &ruleRefExpr{
														pos:  position{line: 323, col: 25, offset: 10803},
														name: "AttributeValue",
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 324, col: 5, offset: 10848},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 324, col: 12, offset: 10855},
								expr: &actionExpr{
									pos: position{line: 324, col: 13, offset: 10856},
									run: (*parser).callonSourceAttributes18,
									expr: &seqExpr{
										pos: position{line: 324, col: 13, offset: 10856},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 324, col: 13, offset: 10856},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 324, col: 17, offset: 10860},
												label: "attr",
												expr: &zeroOrOneExpr{
													pos: position{line: 324, col: 22, offset: 10865},
													expr: &choiceExpr{
														pos: position{line: 324, col: 23, offset: 10866},
														alternatives: []interface{}{
															&ruleRefExpr{
																pos:  position{line: 324, col: 23, offset: 10866},
																name: "NamedAttribute",
															},
															&ruleRefExpr{
																pos:  position{line: 324, col: 40, offset: 10883},
																name: "StandaloneAttributeKey",
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 325, col: 5, offset: 10936},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 325, col: 9, offset: 10940},
							expr: &ruleRefExpr{
								pos:  position{line: 325, col: 9, offset: 10940},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 325, col: 16, offset: 10947},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "AttributeGroup",
			pos:  position{line: 330, col: 1, offset: 11106},
			expr: &actionExpr{
				pos: position{line: 330, col: 19, offset: 11124},
				run: (*parser).callonAttributeGroup1,
				expr: &seqExpr{
					pos: position{line: 330, col: 19, offset: 11124},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 330, col: 19, offset: 11124},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 330, col: 23, offset: 11128},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 330, col: 35, offset: 11140},
								name: "Attributes",
							},
						},
						&litMatcher{
							pos:        position{line: 330, col: 47, offset: 11152},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 330, col: 51, offset: 11156},
							expr: &ruleRefExpr{
								pos:  position{line: 330, col: 51, offset: 11156},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 330, col: 58, offset: 11163},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "Attributes",
			pos:  position{line: 334, col: 1, offset: 11238},
			expr: &zeroOrMoreExpr{
				pos: position{line: 334, col: 15, offset: 11252},
				expr: &choiceExpr{
					pos: position{line: 334, col: 16, offset: 11253},
					alternatives: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 334, col: 16, offset: 11253},
							name: "NamedAttribute",
						},
						&ruleRefExpr{
							pos:  position{line: 334, col: 33, offset: 11270},
							name: "StandaloneAttributeKey",
						},
					},
				},
			},
		},
		{
			name: "NamedAttributes",
			pos:  position{line: 336, col: 1, offset: 11296},
			expr: &actionExpr{
				pos: position{line: 336, col: 20, offset: 11315},
				run: (*parser).callonNamedAttributes1,
				expr: &labeledExpr{
					pos:   position{line: 336, col: 20, offset: 11315},
					label: "attributes",
					expr: &zeroOrMoreExpr{
						pos: position{line: 336, col: 31, offset: 11326},
						expr: &ruleRefExpr{
							pos:  position{line: 336, col: 32, offset: 11327},
							name: "NamedAttribute",
						},
					},
				},
			},
		},
		{
			name: "NamedAttribute",
			pos:  position{line: 340, col: 1, offset: 11415},
			expr: &actionExpr{
				pos: position{line: 340, col: 19, offset: 11433},
				run: (*parser).callonNamedAttribute1,
				expr: &seqExpr{
					pos: position{line: 340, col: 19, offset: 11433},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 340, col: 19, offset: 11433},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 340, col: 24, offset: 11438},
								name: "NamedAttributeKey",
							},
						},
						&litMatcher{
							pos:        position{line: 340, col: 44, offset: 11458},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&labeledExpr{
							pos:   position{line: 340, col: 48, offset: 11462},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 340, col: 55, offset: 11469},
								name: "AttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 340, col: 71, offset: 11485},
							expr: &seqExpr{
								pos: position{line: 340, col: 72, offset: 11486},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 340, col: 72, offset: 11486},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 340, col: 76, offset: 11490},
										expr: &ruleRefExpr{
											pos:  position{line: 340, col: 76, offset: 11490},
											name: "Space",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttributeKey",
			pos:  position{line: 345, col: 1, offset: 11671},
			expr: &actionExpr{
				pos: position{line: 345, col: 22, offset: 11692},
				run: (*parser).callonNamedAttributeKey1,
				expr: &seqExpr{
					pos: position{line: 345, col: 22, offset: 11692},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 345, col: 22, offset: 11692},
							expr: &ruleRefExpr{
								pos:  position{line: 345, col: 23, offset: 11693},
								name: "Space",
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 345, col: 29, offset: 11699},
							expr: &charClassMatcher{
								pos:        position{line: 345, col: 29, offset: 11699},
								val:        "[^\\r\\n=,\\]]",
								chars:      []rune{'\r', '\n', '=', ',', ']'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 345, col: 42, offset: 11712},
							expr: &ruleRefExpr{
								pos:  position{line: 345, col: 42, offset: 11712},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeValue",
			pos:  position{line: 349, col: 1, offset: 11774},
			expr: &actionExpr{
				pos: position{line: 349, col: 19, offset: 11792},
				run: (*parser).callonAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 349, col: 19, offset: 11792},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 349, col: 19, offset: 11792},
							expr: &ruleRefExpr{
								pos:  position{line: 349, col: 19, offset: 11792},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 349, col: 26, offset: 11799},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 349, col: 33, offset: 11806},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 349, col: 33, offset: 11806},
										name: "SingleQuotedAttributeValue",
									},
									&ruleRefExpr{
										pos:  position{line: 349, col: 62, offset: 11835},
										name: "DoubleQuotedAttributeValue",
									},
									&ruleRefExpr{
										pos:  position{line: 349, col: 91, offset: 11864},
										name: "UnquotedAttributeValue",
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 349, col: 115, offset: 11888},
							expr: &ruleRefExpr{
								pos:  position{line: 349, col: 115, offset: 11888},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 349, col: 122, offset: 11895},
							expr: &charClassMatcher{
								pos:        position{line: 349, col: 123, offset: 11896},
								val:        "[,\\]]",
								chars:      []rune{',', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedAttributeValue",
			pos:  position{line: 353, col: 1, offset: 11929},
			expr: &actionExpr{
				pos: position{line: 353, col: 31, offset: 11959},
				run: (*parser).callonSingleQuotedAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 353, col: 31, offset: 11959},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 353, col: 31, offset: 11959},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&labeledExpr{
							pos:   position{line: 353, col: 35, offset: 11963},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 353, col: 44, offset: 11972},
								expr: &choiceExpr{
									pos: position{line: 354, col: 5, offset: 11978},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 354, col: 6, offset: 11979},
											run: (*parser).callonSingleQuotedAttributeValue7,
											expr: &oneOrMoreExpr{
												pos: position{line: 354, col: 6, offset: 11979},
												expr: &charClassMatcher{
													pos:        position{line: 354, col: 6, offset: 11979},
													val:        "[^'\\r\\n\\uFFFD\\\\{]",
													chars:      []rune{'\'', '\r', '\n', '�', '\\', '{'},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 357, col: 5, offset: 12115},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 358, col: 5, offset: 12140},
											name: "AttrSub",
										},
										&actionExpr{
											pos: position{line: 359, col: 6, offset: 12155},
											run: (*parser).callonSingleQuotedAttributeValue12,
											expr: &litMatcher{
												pos:        position{line: 359, col: 6, offset: 12155},
												val:        "\\'",
												ignoreCase: false,
												want:       "\"\\\\'\"",
											},
										},
										&actionExpr{
											pos: position{line: 360, col: 6, offset: 12189},
											run: (*parser).callonSingleQuotedAttributeValue14,
											expr: &charClassMatcher{
												pos:        position{line: 360, col: 6, offset: 12189},
												val:        "[{\\\\]",
												chars:      []rune{'{', '\\'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 363, col: 4, offset: 12275},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedAttributeValue",
			pos:  position{line: 367, col: 1, offset: 12323},
			expr: &actionExpr{
				pos: position{line: 367, col: 31, offset: 12353},
				run: (*parser).callonDoubleQuotedAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 367, col: 31, offset: 12353},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 367, col: 31, offset: 12353},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 367, col: 36, offset: 12358},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 367, col: 45, offset: 12367},
								expr: &choiceExpr{
									pos: position{line: 368, col: 5, offset: 12373},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 368, col: 6, offset: 12374},
											run: (*parser).callonDoubleQuotedAttributeValue7,
											expr: &oneOrMoreExpr{
												pos: position{line: 368, col: 6, offset: 12374},
												expr: &charClassMatcher{
													pos:        position{line: 368, col: 6, offset: 12374},
													val:        "[^\\r\\n\\uFFFD\"\\\\{]",
													chars:      []rune{'\r', '\n', '�', '"', '\\', '{'},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 371, col: 5, offset: 12510},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 372, col: 5, offset: 12535},
											name: "AttrSub",
										},
										&actionExpr{
											pos: position{line: 373, col: 6, offset: 12550},
											run: (*parser).callonDoubleQuotedAttributeValue12,
											expr: &litMatcher{
												pos:        position{line: 373, col: 6, offset: 12550},
												val:        "\\\"",
												ignoreCase: false,
												want:       "\"\\\\\\\"\"",
											},
										},
										&actionExpr{
											pos: position{line: 376, col: 7, offset: 12641},
											run: (*parser).callonDoubleQuotedAttributeValue14,
											expr: &charClassMatcher{
												pos:        position{line: 376, col: 7, offset: 12641},
												val:        "[{\\\\]",
												chars:      []rune{'{', '\\'},
												ignoreCase: false,
												inverted:   false,
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 379, col: 4, offset: 12727},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "UnquotedAttributeValue",
			pos:  position{line: 384, col: 1, offset: 12830},
			expr: &actionExpr{
				pos: position{line: 384, col: 27, offset: 12856},
				run: (*parser).callonUnquotedAttributeValue1,
				expr: &labeledExpr{
					pos:   position{line: 384, col: 27, offset: 12856},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 384, col: 36, offset: 12865},
						expr: &choiceExpr{
							pos: position{line: 385, col: 5, offset: 12871},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 385, col: 6, offset: 12872},
									run: (*parser).callonUnquotedAttributeValue5,
									expr: &oneOrMoreExpr{
										pos: position{line: 385, col: 6, offset: 12872},
										expr: &charClassMatcher{
											pos:        position{line: 385, col: 6, offset: 12872},
											val:        "[^,=\\r\\n\\uFFFD{\\]]",
											chars:      []rune{',', '=', '\r', '\n', '�', '{', ']'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 388, col: 5, offset: 12962},
									name: "ElementPlaceHolder",
								},
								&ruleRefExpr{
									pos:  position{line: 389, col: 5, offset: 12987},
									name: "AttrSub",
								},
								&actionExpr{
									pos: position{line: 390, col: 6, offset: 13002},
									run: (*parser).callonUnquotedAttributeValue10,
									expr: &litMatcher{
										pos:        position{line: 390, col: 6, offset: 13002},
										val:        "{",
										ignoreCase: false,
										want:       "\"{\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StandaloneAttributeKey",
			pos:  position{line: 396, col: 1, offset: 13143},
			expr: &actionExpr{
				pos: position{line: 396, col: 27, offset: 13169},
				run: (*parser).callonStandaloneAttributeKey1,
				expr: &seqExpr{
					pos: position{line: 396, col: 27, offset: 13169},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 396, col: 27, offset: 13169},
							expr: &litMatcher{
								pos:        position{line: 396, col: 28, offset: 13170},
								val:        "quote",
								ignoreCase: false,
								want:       "\"quote\"",
							},
						},
						&notExpr{
							pos: position{line: 396, col: 36, offset: 13178},
							expr: &litMatcher{
								pos:        position{line: 396, col: 37, offset: 13179},
								val:        "verse",
								ignoreCase: false,
								want:       "\"verse\"",
							},
						},
						&notExpr{
							pos: position{line: 396, col: 45, offset: 13187},
							expr: &litMatcher{
								pos:        position{line: 396, col: 46, offset: 13188},
								val:        "literal",
								ignoreCase: false,
								want:       "\"literal\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 396, col: 56, offset: 13198},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 396, col: 61, offset: 13203},
								name: "NamedAttributeKey",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 396, col: 80, offset: 13222},
							expr: &seqExpr{
								pos: position{line: 396, col: 81, offset: 13223},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 396, col: 81, offset: 13223},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 396, col: 85, offset: 13227},
										expr: &ruleRefExpr{
											pos:  position{line: 396, col: 85, offset: 13227},
											name: "Space",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteAttributes",
			pos:  position{line: 400, col: 1, offset: 13319},
			expr: &actionExpr{
				pos: position{line: 400, col: 20, offset: 13338},
				run: (*parser).callonQuoteAttributes1,
				expr: &seqExpr{
					pos: position{line: 400, col: 20, offset: 13338},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 400, col: 20, offset: 13338},
							val:        "[quote",
							ignoreCase: false,
							want:       "\"[quote\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 400, col: 29, offset: 13347},
							expr: &ruleRefExpr{
								pos:  position{line: 400, col: 29, offset: 13347},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 400, col: 36, offset: 13354},
							expr: &litMatcher{
								pos:        position{line: 400, col: 36, offset: 13354},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 400, col: 41, offset: 13359},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 400, col: 48, offset: 13366},
								expr: &ruleRefExpr{
									pos:  position{line: 400, col: 49, offset: 13367},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 400, col: 66, offset: 13384},
							expr: &litMatcher{
								pos:        position{line: 400, col: 66, offset: 13384},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 400, col: 71, offset: 13389},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 400, col: 77, offset: 13395},
								expr: &ruleRefExpr{
									pos:  position{line: 400, col: 78, offset: 13396},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 400, col: 95, offset: 13413},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 400, col: 99, offset: 13417},
							expr: &ruleRefExpr{
								pos:  position{line: 400, col: 99, offset: 13417},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 400, col: 106, offset: 13424},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "VerseAttributes",
			pos:  position{line: 404, col: 1, offset: 13493},
			expr: &actionExpr{
				pos: position{line: 404, col: 20, offset: 13512},
				run: (*parser).callonVerseAttributes1,
				expr: &seqExpr{
					pos: position{line: 404, col: 20, offset: 13512},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 404, col: 20, offset: 13512},
							val:        "[verse",
							ignoreCase: false,
							want:       "\"[verse\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 404, col: 29, offset: 13521},
							expr: &ruleRefExpr{
								pos:  position{line: 404, col: 29, offset: 13521},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 404, col: 36, offset: 13528},
							expr: &litMatcher{
								pos:        position{line: 404, col: 36, offset: 13528},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 404, col: 41, offset: 13533},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 404, col: 48, offset: 13540},
								expr: &ruleRefExpr{
									pos:  position{line: 404, col: 49, offset: 13541},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 404, col: 66, offset: 13558},
							expr: &litMatcher{
								pos:        position{line: 404, col: 66, offset: 13558},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 404, col: 71, offset: 13563},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 404, col: 77, offset: 13569},
								expr: &ruleRefExpr{
									pos:  position{line: 404, col: 78, offset: 13570},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 404, col: 95, offset: 13587},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 404, col: 99, offset: 13591},
							expr: &ruleRefExpr{
								pos:  position{line: 404, col: 99, offset: 13591},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 404, col: 106, offset: 13598},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "QuoteAttribute",
			pos:  position{line: 408, col: 1, offset: 13685},
			expr: &actionExpr{
				pos: position{line: 408, col: 19, offset: 13703},
				run: (*parser).callonQuoteAttribute1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 408, col: 20, offset: 13704},
					expr: &charClassMatcher{
						pos:        position{line: 408, col: 20, offset: 13704},
						val:        "[^\\r\\n,\\]]",
						chars:      []rune{'\r', '\n', ',', ']'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "QuotedTextAttributes",
			pos:  position{line: 412, col: 1, offset: 13753},
			expr: &actionExpr{
				pos: position{line: 412, col: 25, offset: 13777},
				run: (*parser).callonQuotedTextAttributes1,
				expr: &seqExpr{
					pos: position{line: 412, col: 25, offset: 13777},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 412, col: 25, offset: 13777},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 412, col: 29, offset: 13781},
							label: "attributes",
							expr: &seqExpr{
								pos: position{line: 412, col: 41, offset: 13793},
								exprs: []interface{}{
									&zeroOrOneExpr{
										pos: position{line: 412, col: 41, offset: 13793},
										expr: &ruleRefExpr{
											pos:  position{line: 412, col: 41, offset: 13793},
											name: "QuotedTextAttrRole",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 412, col: 61, offset: 13813},
										expr: &ruleRefExpr{
											pos:  position{line: 412, col: 61, offset: 13813},
											name: "ShortHandAttr",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 412, col: 76, offset: 13828},
										expr: &ruleRefExpr{
											pos:  position{line: 412, col: 76, offset: 13828},
											name: "NamedAttribute",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 412, col: 93, offset: 13845},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "QuotedTextAttrRole",
			pos:  position{line: 416, col: 1, offset: 13920},
			expr: &actionExpr{
				pos: position{line: 416, col: 23, offset: 13942},
				run: (*parser).callonQuotedTextAttrRole1,
				expr: &seqExpr{
					pos: position{line: 416, col: 23, offset: 13942},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 416, col: 23, offset: 13942},
							label: "role",
							expr: &ruleRefExpr{
								pos:  position{line: 416, col: 28, offset: 13947},
								name: "PositionalValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 416, col: 44, offset: 13963},
							expr: &seqExpr{
								pos: position{line: 416, col: 45, offset: 13964},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 416, col: 45, offset: 13964},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 416, col: 49, offset: 13968},
										expr: &ruleRefExpr{
											pos:  position{line: 416, col: 49, offset: 13968},
											name: "Space",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StandaloneAttributes",
			pos:  position{line: 420, col: 1, offset: 14020},
			expr: &actionExpr{
				pos: position{line: 420, col: 25, offset: 14044},
				run: (*parser).callonStandaloneAttributes1,
				expr: &seqExpr{
					pos: position{line: 420, col: 25, offset: 14044},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 420, col: 25, offset: 14044},
							label: "attributes",
							expr: &oneOrMoreExpr{
								pos: position{line: 420, col: 36, offset: 14055},
								expr: &ruleRefExpr{
									pos:  position{line: 420, col: 37, offset: 14056},
									name: "ElementAttribute",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 420, col: 56, offset: 14075},
							expr: &ruleRefExpr{
								pos:  position{line: 420, col: 56, offset: 14075},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttr",
			pos:  position{line: 424, col: 1, offset: 14213},
			expr: &choiceExpr{
				pos: position{line: 424, col: 18, offset: 14230},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 424, col: 18, offset: 14230},
						name: "ShortHandAttrID",
					},
					&ruleRefExpr{
						pos:  position{line: 424, col: 36, offset: 14248},
						name: "ShortHandAttrOption",
					},
					&ruleRefExpr{
						pos:  position{line: 424, col: 58, offset: 14270},
						name: "ShortHandAttrRole",
					},
				},
			},
		},
		{
			name: "ShortHandAttrOption",
			pos:  position{line: 426, col: 1, offset: 14289},
			expr: &actionExpr{
				pos: position{line: 426, col: 24, offset: 14312},
				run: (*parser).callonShortHandAttrOption1,
				expr: &seqExpr{
					pos: position{line: 426, col: 24, offset: 14312},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 426, col: 24, offset: 14312},
							val:        "%",
							ignoreCase: false,
							want:       "\"%\"",
						},
						&labeledExpr{
							pos:   position{line: 426, col: 28, offset: 14316},
							label: "option",
							expr: &ruleRefExpr{
								pos:  position{line: 426, col: 36, offset: 14324},
								name: "ShortHandValue",
							},
						},
						&andExpr{
							pos: position{line: 426, col: 52, offset: 14340},
							expr: &charClassMatcher{
								pos:        position{line: 426, col: 53, offset: 14341},
								val:        "[,#%.\\r\\n\\]]",
								chars:      []rune{',', '#', '%', '.', '\r', '\n', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 426, col: 66, offset: 14354},
							expr: &seqExpr{
								pos: position{line: 426, col: 67, offset: 14355},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 426, col: 67, offset: 14355},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 426, col: 71, offset: 14359},
										expr: &ruleRefExpr{
											pos:  position{line: 426, col: 71, offset: 14359},
											name: "Space",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttrID",
			pos:  position{line: 430, col: 1, offset: 14415},
			expr: &actionExpr{
				pos: position{line: 430, col: 20, offset: 14434},
				run: (*parser).callonShortHandAttrID1,
				expr: &seqExpr{
					pos: position{line: 430, col: 20, offset: 14434},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 430, col: 20, offset: 14434},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&labeledExpr{
							pos:   position{line: 430, col: 24, offset: 14438},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 430, col: 28, offset: 14442},
								name: "ShortHandValue",
							},
						},
						&andExpr{
							pos: position{line: 430, col: 44, offset: 14458},
							expr: &charClassMatcher{
								pos:        position{line: 430, col: 45, offset: 14459},
								val:        "[,#%.\\r\\n\\]]",
								chars:      []rune{',', '#', '%', '.', '\r', '\n', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 430, col: 58, offset: 14472},
							expr: &seqExpr{
								pos: position{line: 430, col: 59, offset: 14473},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 430, col: 59, offset: 14473},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 430, col: 63, offset: 14477},
										expr: &ruleRefExpr{
											pos:  position{line: 430, col: 63, offset: 14477},
											name: "Space",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttrRole",
			pos:  position{line: 434, col: 1, offset: 14525},
			expr: &actionExpr{
				pos: position{line: 434, col: 22, offset: 14546},
				run: (*parser).callonShortHandAttrRole1,
				expr: &seqExpr{
					pos: position{line: 434, col: 22, offset: 14546},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 434, col: 22, offset: 14546},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 434, col: 26, offset: 14550},
							label: "role",
							expr: &ruleRefExpr{
								pos:  position{line: 434, col: 32, offset: 14556},
								name: "ShortHandValue",
							},
						},
						&andExpr{
							pos: position{line: 434, col: 48, offset: 14572},
							expr: &charClassMatcher{
								pos:        position{line: 434, col: 49, offset: 14573},
								val:        "[,#%.\\r\\n\\]]",
								chars:      []rune{',', '#', '%', '.', '\r', '\n', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 434, col: 62, offset: 14586},
							expr: &seqExpr{
								pos: position{line: 434, col: 63, offset: 14587},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 434, col: 63, offset: 14587},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 434, col: 67, offset: 14591},
										expr: &ruleRefExpr{
											pos:  position{line: 434, col: 67, offset: 14591},
											name: "Space",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PositionalValue",
			pos:  position{line: 439, col: 1, offset: 14687},
			expr: &actionExpr{
				pos: position{line: 439, col: 20, offset: 14706},
				run: (*parser).callonPositionalValue1,
				expr: &seqExpr{
					pos: position{line: 439, col: 20, offset: 14706},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 439, col: 20, offset: 14706},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 439, col: 27, offset: 14713},
								name: "ShortHandValue",
							},
						},
						&andExpr{
							pos: position{line: 439, col: 43, offset: 14729},
							expr: &charClassMatcher{
								pos:        position{line: 439, col: 44, offset: 14730},
								val:        "[,#%.\\]]",
								chars:      []rune{',', '#', '%', '.', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandValue",
			pos:  position{line: 443, col: 1, offset: 14799},
			expr: &choiceExpr{
				pos: position{line: 443, col: 19, offset: 14817},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 443, col: 19, offset: 14817},
						name: "ShortHandValuePlain",
					},
					&ruleRefExpr{
						pos:  position{line: 443, col: 41, offset: 14839},
						name: "SingleQuotedAttributeValue",
					},
					&ruleRefExpr{
						pos:  position{line: 443, col: 70, offset: 14868},
						name: "DoubleQuotedAttributeValue",
					},
				},
			},
		},
		{
			name: "ShortHandValuePlain",
			pos:  position{line: 447, col: 1, offset: 15071},
			expr: &actionExpr{
				pos: position{line: 447, col: 24, offset: 15094},
				run: (*parser).callonShortHandValuePlain1,
				expr: &seqExpr{
					pos: position{line: 447, col: 24, offset: 15094},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 447, col: 24, offset: 15094},
							label: "first",
							expr: &actionExpr{
								pos: position{line: 447, col: 31, offset: 15101},
								run: (*parser).callonShortHandValuePlain4,
								expr: &charClassMatcher{
									pos:        position{line: 447, col: 31, offset: 15101},
									val:        "[^,\\r\\n\"' \\t.#%=\\]]",
									chars:      []rune{',', '\r', '\n', '"', '\'', ' ', '\t', '.', '#', '%', '=', ']'},
									ignoreCase: false,
									inverted:   true,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 450, col: 5, offset: 15187},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 450, col: 13, offset: 15195},
								expr: &choiceExpr{
									pos: position{line: 450, col: 14, offset: 15196},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 450, col: 14, offset: 15196},
											name: "ElementPlaceHolder",
										},
										&choiceExpr{
											pos: position{line: 451, col: 12, offset: 15227},
											alternatives: []interface{}{
												&charClassMatcher{
													pos:        position{line: 451, col: 12, offset: 15227},
													val:        "[^ \\t,\\r\\n\"'.#%=\\]]",
													chars:      []rune{' ', '\t', ',', '\r', '\n', '"', '\'', '.', '#', '%', '=', ']'},
													ignoreCase: false,
													inverted:   true,
												},
												&actionExpr{
													pos: position{line: 451, col: 34, offset: 15249},
													run: (*parser).callonShortHandValuePlain12,
													expr: &seqExpr{
														pos: position{line: 451, col: 34, offset: 15249},
														exprs: []interface{}{
															&charClassMatcher{
																pos:        position{line: 451, col: 34, offset: 15249},
																val:        "[ \\t]",
																chars:      []rune{' ', '\t'},
																ignoreCase: false,
																inverted:   false,
															},
															&charClassMatcher{
																pos:        position{line: 451, col: 39, offset: 15254},
																val:        "[^ \\t,\\r\\n\"'.#%=\\]]",
																chars:      []rune{' ', '\t', ',', '\r', '\n', '"', '\'', '.', '#', '%', '=', ']'},
																ignoreCase: false,
																inverted:   true,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Section",
			pos:  position{line: 461, col: 1, offset: 15541},
			expr: &actionExpr{
				pos: position{line: 461, col: 12, offset: 15552},
				run: (*parser).callonSection1,
				expr: &seqExpr{
					pos: position{line: 461, col: 12, offset: 15552},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 461, col: 12, offset: 15552},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 461, col: 23, offset: 15563},
								expr: &ruleRefExpr{
									pos:  position{line: 461, col: 24, offset: 15564},
									name: "BlockAttribute",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 462, col: 5, offset: 15585},
							label: "level",
							expr: &actionExpr{
								pos: position{line: 462, col: 12, offset: 15592},
								run: (*parser).callonSection7,
								expr: &oneOrMoreExpr{
									pos: position{line: 462, col: 12, offset: 15592},
									expr: &litMatcher{
										pos:        position{line: 462, col: 13, offset: 15593},
										val:        "=",
										ignoreCase: false,
										want:       "\"=\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 466, col: 5, offset: 15684},
							run: (*parser).callonSection10,
						},
						&oneOrMoreExpr{
							pos: position{line: 470, col: 5, offset: 15836},
							expr: &ruleRefExpr{
								pos:  position{line: 470, col: 5, offset: 15836},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 470, col: 12, offset: 15843},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 470, col: 19, offset: 15850},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 470, col: 34, offset: 15865},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 470, col: 38, offset: 15869},
								expr: &ruleRefExpr{
									pos:  position{line: 470, col: 38, offset: 15869},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 470, col: 56, offset: 15887},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "TitleElements",
			pos:  position{line: 474, col: 1, offset: 16009},
			expr: &actionExpr{
				pos: position{line: 474, col: 18, offset: 16026},
				run: (*parser).callonTitleElements1,
				expr: &labeledExpr{
					pos:   position{line: 474, col: 18, offset: 16026},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 474, col: 27, offset: 16035},
						expr: &seqExpr{
							pos: position{line: 474, col: 28, offset: 16036},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 474, col: 28, offset: 16036},
									expr: &ruleRefExpr{
										pos:  position{line: 474, col: 29, offset: 16037},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 474, col: 37, offset: 16045},
									expr: &ruleRefExpr{
										pos:  position{line: 474, col: 38, offset: 16046},
										name: "InlineElementID",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 474, col: 54, offset: 16062},
									name: "TitleElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TitleElement",
			pos:  position{line: 478, col: 1, offset: 16183},
			expr: &actionExpr{
				pos: position{line: 478, col: 17, offset: 16199},
				run: (*parser).callonTitleElement1,
				expr: &labeledExpr{
					pos:   position{line: 478, col: 17, offset: 16199},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 478, col: 26, offset: 16208},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 478, col: 26, offset: 16208},
								name: "Word",
							},
							&ruleRefExpr{
								pos:  position{line: 479, col: 11, offset: 16223},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 480, col: 11, offset: 16268},
								expr: &ruleRefExpr{
									pos:  position{line: 480, col: 11, offset: 16268},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 481, col: 11, offset: 16286},
								name: "ElementPlaceHolder",
							},
							&ruleRefExpr{
								pos:  position{line: 482, col: 11, offset: 16315},
								name: "AnyChar",
							},
						},
					},
				},
			},
		},
		{
			name: "TableOfContentsPlaceHolder",
			pos:  position{line: 489, col: 1, offset: 16466},
			expr: &seqExpr{
				pos: position{line: 489, col: 31, offset: 16496},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 489, col: 31, offset: 16496},
						val:        "toc::[]",
						ignoreCase: false,
						want:       "\"toc::[]\"",
					},
					&ruleRefExpr{
						pos:  position{line: 489, col: 41, offset: 16506},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "UserMacroBlock",
			pos:  position{line: 494, col: 1, offset: 16617},
			expr: &actionExpr{
				pos: position{line: 494, col: 19, offset: 16635},
				run: (*parser).callonUserMacroBlock1,
				expr: &seqExpr{
					pos: position{line: 494, col: 19, offset: 16635},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 494, col: 19, offset: 16635},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 494, col: 25, offset: 16641},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 494, col: 40, offset: 16656},
							val:        "::",
							ignoreCase: false,
							want:       "\"::\"",
						},
						&labeledExpr{
							pos:   position{line: 494, col: 45, offset: 16661},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 494, col: 52, offset: 16668},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 494, col: 68, offset: 16684},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 494, col: 80, offset: 16696},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineUserMacro",
			pos:  position{line: 498, col: 1, offset: 16835},
			expr: &actionExpr{
				pos: position{line: 498, col: 20, offset: 16854},
				run: (*parser).callonInlineUserMacro1,
				expr: &seqExpr{
					pos: position{line: 498, col: 20, offset: 16854},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 498, col: 20, offset: 16854},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 498, col: 26, offset: 16860},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 498, col: 41, offset: 16875},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 498, col: 45, offset: 16879},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 498, col: 52, offset: 16886},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 498, col: 68, offset: 16902},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 498, col: 80, offset: 16914},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroName",
			pos:  position{line: 502, col: 1, offset: 17054},
			expr: &actionExpr{
				pos: position{line: 502, col: 18, offset: 17071},
				run: (*parser).callonUserMacroName1,
				expr: &seqExpr{
					pos: position{line: 502, col: 18, offset: 17071},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 502, col: 18, offset: 17071},
							expr: &litMatcher{
								pos:        position{line: 502, col: 19, offset: 17072},
								val:        "include",
								ignoreCase: false,
								want:       "\"include\"",
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 502, col: 30, offset: 17083},
							expr: &charClassMatcher{
								pos:        position{line: 502, col: 30, offset: 17083},
								val:        "[\\pL0-9_-]",
								chars:      []rune{'_', '-'},
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroValue",
			pos:  position{line: 506, col: 1, offset: 17132},
			expr: &actionExpr{
				pos: position{line: 506, col: 19, offset: 17150},
				run: (*parser).callonUserMacroValue1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 506, col: 19, offset: 17150},
					expr: &charClassMatcher{
						pos:        position{line: 506, col: 19, offset: 17150},
						val:        "[^:[ \\r\\n]",
						chars:      []rune{':', '[', ' ', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "UserMacroAttributes",
			pos:  position{line: 510, col: 1, offset: 17198},
			expr: &actionExpr{
				pos: position{line: 510, col: 24, offset: 17221},
				run: (*parser).callonUserMacroAttributes1,
				expr: &seqExpr{
					pos: position{line: 510, col: 24, offset: 17221},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 510, col: 24, offset: 17221},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 510, col: 28, offset: 17225},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 510, col: 39, offset: 17236},
								expr: &ruleRefExpr{
									pos:  position{line: 510, col: 40, offset: 17237},
									name: "NamedAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 510, col: 57, offset: 17254},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FileInclusion",
			pos:  position{line: 517, col: 1, offset: 17440},
			expr: &actionExpr{
				pos: position{line: 517, col: 18, offset: 17457},
				run: (*parser).callonFileInclusion1,
				expr: &seqExpr{
					pos: position{line: 517, col: 18, offset: 17457},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 517, col: 18, offset: 17457},
							label: "incl",
							expr: &actionExpr{
								pos: position{line: 517, col: 24, offset: 17463},
								run: (*parser).callonFileInclusion4,
								expr: &seqExpr{
									pos: position{line: 517, col: 24, offset: 17463},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 517, col: 24, offset: 17463},
											val:        "include::",
											ignoreCase: false,
											want:       "\"include::\"",
										},
										&labeledExpr{
											pos:   position{line: 517, col: 36, offset: 17475},
											label: "path",
											expr: &ruleRefExpr{
												pos:  position{line: 517, col: 42, offset: 17481},
												name: "FileLocation",
											},
										},
										&labeledExpr{
											pos:   position{line: 517, col: 56, offset: 17495},
											label: "inlineAttributes",
											expr: &ruleRefExpr{
												pos:  position{line: 517, col: 74, offset: 17513},
												name: "FileIncludeAttributes",
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 519, col: 8, offset: 17660},
							expr: &ruleRefExpr{
								pos:  position{line: 519, col: 8, offset: 17660},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 519, col: 15, offset: 17667},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "FileIncludeAttributes",
			pos:  position{line: 523, col: 1, offset: 17719},
			expr: &actionExpr{
				pos: position{line: 523, col: 26, offset: 17744},
				run: (*parser).callonFileIncludeAttributes1,
				expr: &seqExpr{
					pos: position{line: 523, col: 26, offset: 17744},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 523, col: 26, offset: 17744},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 523, col: 30, offset: 17748},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 523, col: 41, offset: 17759},
								expr: &choiceExpr{
									pos: position{line: 523, col: 42, offset: 17760},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 523, col: 42, offset: 17760},
											name: "LineRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 523, col: 64, offset: 17782},
											name: "TagRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 523, col: 85, offset: 17803},
											name: "NamedAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 523, col: 102, offset: 17820},
											name: "StandaloneAttributeKey",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 523, col: 127, offset: 17845},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttribute",
			pos:  position{line: 527, col: 1, offset: 17921},
			expr: &actionExpr{
				pos: position{line: 527, col: 24, offset: 17944},
				run: (*parser).callonLineRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 527, col: 24, offset: 17944},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 527, col: 24, offset: 17944},
							val:        "lines=",
							ignoreCase: false,
							want:       "\"lines=\"",
						},
						&labeledExpr{
							pos:   position{line: 527, col: 33, offset: 17953},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 527, col: 40, offset: 17960},
								name: "LineRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 527, col: 66, offset: 17986},
							expr: &litMatcher{
								pos:        position{line: 527, col: 66, offset: 17986},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttributeValue",
			pos:  position{line: 531, col: 1, offset: 18045},
			expr: &actionExpr{
				pos: position{line: 531, col: 29, offset: 18073},
				run: (*parser).callonLineRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 531, col: 29, offset: 18073},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 531, col: 29, offset: 18073},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 531, col: 36, offset: 18080},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 531, col: 36, offset: 18080},
										name: "MultipleLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 532, col: 11, offset: 18197},
										name: "MultipleQuotedLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 533, col: 11, offset: 18233},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 534, col: 11, offset: 18259},
										name: "MultiLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 535, col: 11, offset: 18291},
										name: "SingleLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 536, col: 11, offset: 18323},
										name: "SingleLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 537, col: 11, offset: 18350},
										name: "UndefinedLineRange",
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 537, col: 31, offset: 18370},
							expr: &ruleRefExpr{
								pos:  position{line: 537, col: 31, offset: 18370},
								name: "Space",
							},
						},
						&choiceExpr{
							pos: position{line: 537, col: 39, offset: 18378},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 537, col: 39, offset: 18378},
									expr: &litMatcher{
										pos:        position{line: 537, col: 40, offset: 18379},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
								&andExpr{
									pos: position{line: 537, col: 46, offset: 18385},
									expr: &litMatcher{
										pos:        position{line: 537, col: 47, offset: 18386},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleLineRanges",
			pos:  position{line: 541, col: 1, offset: 18418},
			expr: &actionExpr{
				pos: position{line: 541, col: 23, offset: 18440},
				run: (*parser).callonMultipleLineRanges1,
				expr: &seqExpr{
					pos: position{line: 541, col: 23, offset: 18440},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 541, col: 23, offset: 18440},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 541, col: 30, offset: 18447},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 541, col: 30, offset: 18447},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 541, col: 47, offset: 18464},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 542, col: 5, offset: 18486},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 542, col: 12, offset: 18493},
								expr: &actionExpr{
									pos: position{line: 542, col: 13, offset: 18494},
									run: (*parser).callonMultipleLineRanges9,
									expr: &seqExpr{
										pos: position{line: 542, col: 13, offset: 18494},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 542, col: 13, offset: 18494},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&labeledExpr{
												pos:   position{line: 542, col: 17, offset: 18498},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 542, col: 24, offset: 18505},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 542, col: 24, offset: 18505},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 542, col: 41, offset: 18522},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleQuotedLineRanges",
			pos:  position{line: 548, col: 1, offset: 18660},
			expr: &actionExpr{
				pos: position{line: 548, col: 29, offset: 18688},
				run: (*parser).callonMultipleQuotedLineRanges1,
				expr: &seqExpr{
					pos: position{line: 548, col: 29, offset: 18688},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 548, col: 29, offset: 18688},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 548, col: 34, offset: 18693},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 548, col: 41, offset: 18700},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 548, col: 41, offset: 18700},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 548, col: 58, offset: 18717},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 549, col: 5, offset: 18739},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 549, col: 12, offset: 18746},
								expr: &actionExpr{
									pos: position{line: 549, col: 13, offset: 18747},
									run: (*parser).callonMultipleQuotedLineRanges10,
									expr: &seqExpr{
										pos: position{line: 549, col: 13, offset: 18747},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 549, col: 13, offset: 18747},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 549, col: 17, offset: 18751},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 549, col: 24, offset: 18758},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 549, col: 24, offset: 18758},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 549, col: 41, offset: 18775},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 551, col: 9, offset: 18828},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "MultiLineRange",
			pos:  position{line: 555, col: 1, offset: 18918},
			expr: &actionExpr{
				pos: position{line: 555, col: 19, offset: 18936},
				run: (*parser).callonMultiLineRange1,
				expr: &seqExpr{
					pos: position{line: 555, col: 19, offset: 18936},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 555, col: 19, offset: 18936},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 555, col: 26, offset: 18943},
								name: "Number",
							},
						},
						&litMatcher{
							pos:        position{line: 555, col: 34, offset: 18951},
							val:        "..",
							ignoreCase: false,
							want:       "\"..\"",
						},
						&labeledExpr{
							pos:   position{line: 555, col: 39, offset: 18956},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 555, col: 44, offset: 18961},
								name: "Number",
							},
						},
					},
				},
			},
		},
		{
			name: "MultiLineQuotedRange",
			pos:  position{line: 559, col: 1, offset: 19049},
			expr: &actionExpr{
				pos: position{line: 559, col: 25, offset: 19073},
				run: (*parser).callonMultiLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 559, col: 25, offset: 19073},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 559, col: 25, offset: 19073},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 559, col: 30, offset: 19078},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 559, col: 37, offset: 19085},
								name: "Number",
							},
						},
						&litMatcher{
							pos:        position{line: 559, col: 45, offset: 19093},
							val:        "..",
							ignoreCase: false,
							want:       "\"..\"",
						},
						&labeledExpr{
							pos:   position{line: 559, col: 50, offset: 19098},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 559, col: 55, offset: 19103},
								name: "Number",
							},
						},
						&litMatcher{
							pos:        position{line: 559, col: 63, offset: 19111},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "SingleLineRange",
			pos:  position{line: 563, col: 1, offset: 19196},
			expr: &actionExpr{
				pos: position{line: 563, col: 20, offset: 19215},
				run: (*parser).callonSingleLineRange1,
				expr: &labeledExpr{
					pos:   position{line: 563, col: 20, offset: 19215},
					label: "singleline",
					expr: &ruleRefExpr{
						pos:  position{line: 563, col: 32, offset: 19227},
						name: "Number",
					},
				},
			},
		},
		{
			name: "SingleLineQuotedRange",
			pos:  position{line: 567, col: 1, offset: 19322},
			expr: &actionExpr{
				pos: position{line: 567, col: 26, offset: 19347},
				run: (*parser).callonSingleLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 567, col: 26, offset: 19347},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 567, col: 26, offset: 19347},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 567, col: 31, offset: 19352},
							label: "singleline",
							expr: &ruleRefExpr{
								pos:  position{line: 567, col: 43, offset: 19364},
								name: "Number",
							},
						},
						&litMatcher{
							pos:        position{line: 567, col: 51, offset: 19372},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "UndefinedLineRange",
			pos:  position{line: 571, col: 1, offset: 19464},
			expr: &actionExpr{
				pos: position{line: 571, col: 23, offset: 19486},
				run: (*parser).callonUndefinedLineRange1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 571, col: 23, offset: 19486},
					expr: &charClassMatcher{
						pos:        position{line: 571, col: 23, offset: 19486},
						val:        "[^\\], ]",
						chars:      []rune{']', ',', ' '},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "TagRangesAttribute",
			pos:  position{line: 575, col: 1, offset: 19531},
			expr: &actionExpr{
				pos: position{line: 575, col: 23, offset: 19553},
				run: (*parser).callonTagRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 575, col: 23, offset: 19553},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 575, col: 24, offset: 19554},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 575, col: 24, offset: 19554},
									val:        "tags=",
									ignoreCase: false,
									want:       "\"tags=\"",
								},
								&litMatcher{
									pos:        position{line: 575, col: 34, offset: 19564},
									val:        "tag=",
									ignoreCase: false,
									want:       "\"tag=\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 575, col: 42, offset: 19572},
							label: "tags",
							expr: &ruleRefExpr{
								pos:  position{line: 575, col: 48, offset: 19578},
								name: "TagRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 575, col: 73, offset: 19603},
							expr: &litMatcher{
								pos:        position{line: 575, col: 73, offset: 19603},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
					},
				},
			},
		},
		{
			name: "TagRangesAttributeValue",
			pos:  position{line: 579, col: 1, offset: 19752},
			expr: &actionExpr{
				pos: position{line: 579, col: 28, offset: 19779},
				run: (*parser).callonTagRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 579, col: 28, offset: 19779},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 579, col: 28, offset: 19779},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 579, col: 35, offset: 19786},
								name: "MultipleTagRanges",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 579, col: 54, offset: 19805},
							expr: &ruleRefExpr{
								pos:  position{line: 579, col: 54, offset: 19805},
								name: "Space",
							},
						},
						&choiceExpr{
							pos: position{line: 579, col: 62, offset: 19813},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 579, col: 62, offset: 19813},
									expr: &litMatcher{
										pos:        position{line: 579, col: 63, offset: 19814},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
								&andExpr{
									pos: position{line: 579, col: 69, offset: 19820},
									expr: &litMatcher{
										pos:        position{line: 579, col: 70, offset: 19821},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleTagRanges",
			pos:  position{line: 583, col: 1, offset: 19853},
			expr: &actionExpr{
				pos: position{line: 583, col: 22, offset: 19874},
				run: (*parser).callonMultipleTagRanges1,
				expr: &seqExpr{
					pos: position{line: 583, col: 22, offset: 19874},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 583, col: 22, offset: 19874},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 583, col: 29, offset: 19881},
								name: "TagRange",
							},
						},
						&labeledExpr{
							pos:   position{line: 584, col: 5, offset: 19895},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 584, col: 12, offset: 19902},
								expr: &actionExpr{
									pos: position{line: 584, col: 13, offset: 19903},
									run: (*parser).callonMultipleTagRanges7,
									expr: &seqExpr{
										pos: position{line: 584, col: 13, offset: 19903},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 584, col: 13, offset: 19903},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&labeledExpr{
												pos:   position{line: 584, col: 17, offset: 19907},
												label: "other",
												expr: &ruleRefExpr{
													pos:  position{line: 584, col: 24, offset: 19914},
													name: "TagRange",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagRange",
			pos:  position{line: 590, col: 1, offset: 20045},
			expr: &choiceExpr{
				pos: position{line: 590, col: 13, offset: 20057},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 590, col: 13, offset: 20057},
						run: (*parser).callonTagRange2,
						expr: &labeledExpr{
							pos:   position{line: 590, col: 13, offset: 20057},
							label: "tag",
							expr: &choiceExpr{
								pos: position{line: 590, col: 18, offset: 20062},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 590, col: 18, offset: 20062},
										name: "Alphanums",
									},
									&ruleRefExpr{
										pos:  position{line: 590, col: 30, offset: 20074},
										name: "TagWildcard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 592, col: 5, offset: 20142},
						run: (*parser).callonTagRange7,
						expr: &seqExpr{
							pos: position{line: 592, col: 5, offset: 20142},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 592, col: 5, offset: 20142},
									val:        "!",
									ignoreCase: false,
									want:       "\"!\"",
								},
								&labeledExpr{
									pos:   position{line: 592, col: 9, offset: 20146},
									label: "tag",
									expr: &choiceExpr{
										pos: position{line: 592, col: 14, offset: 20151},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 592, col: 14, offset: 20151},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 592, col: 26, offset: 20163},
												name: "TagWildcard",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagWildcard",
			pos:  position{line: 596, col: 1, offset: 20231},
			expr: &actionExpr{
				pos: position{line: 596, col: 16, offset: 20246},
				run: (*parser).callonTagWildcard1,
				expr: &seqExpr{
					pos: position{line: 596, col: 16, offset: 20246},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 596, col: 16, offset: 20246},
							label: "stars",
							expr: &actionExpr{
								pos: position{line: 596, col: 23, offset: 20253},
								run: (*parser).callonTagWildcard4,
								expr: &oneOrMoreExpr{
									pos: position{line: 596, col: 23, offset: 20253},
									expr: &litMatcher{
										pos:        position{line: 596, col: 24, offset: 20254},
										val:        "*",
										ignoreCase: false,
										want:       "\"*\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 599, col: 5, offset: 20308},
							run: (*parser).callonTagWildcard7,
						},
					},
				},
			},
		},
		{
			name: "IncludedFileLine",
			pos:  position{line: 609, col: 1, offset: 20602},
			expr: &actionExpr{
				pos: position{line: 609, col: 21, offset: 20622},
				run: (*parser).callonIncludedFileLine1,
				expr: &seqExpr{
					pos: position{line: 609, col: 21, offset: 20622},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 609, col: 21, offset: 20622},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 609, col: 29, offset: 20630},
								expr: &choiceExpr{
									pos: position{line: 609, col: 30, offset: 20631},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 609, col: 30, offset: 20631},
											name: "IncludedFileStartTag",
										},
										&ruleRefExpr{
											pos:  position{line: 609, col: 53, offset: 20654},
											name: "IncludedFileEndTag",
										},
										&actionExpr{
											pos: position{line: 609, col: 74, offset: 20675},
											run: (*parser).callonIncludedFileLine8,
											expr: &anyMatcher{
												line: 609, col: 74, offset: 20675,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 609, col: 107, offset: 20708},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileStartTag",
			pos:  position{line: 613, col: 1, offset: 20779},
			expr: &actionExpr{
				pos: position{line: 613, col: 25, offset: 20803},
				run: (*parser).callonIncludedFileStartTag1,
				expr: &seqExpr{
					pos: position{line: 613, col: 25, offset: 20803},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 613, col: 25, offset: 20803},
							val:        "tag::",
							ignoreCase: false,
							want:       "\"tag::\"",
						},
						&labeledExpr{
							pos:   position{line: 613, col: 33, offset: 20811},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 613, col: 38, offset: 20816},
								run: (*parser).callonIncludedFileStartTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 613, col: 38, offset: 20816},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 613, col: 78, offset: 20856},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileEndTag",
			pos:  position{line: 617, col: 1, offset: 20921},
			expr: &actionExpr{
				pos: position{line: 617, col: 23, offset: 20943},
				run: (*parser).callonIncludedFileEndTag1,
				expr: &seqExpr{
					pos: position{line: 617, col: 23, offset: 20943},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 617, col: 23, offset: 20943},
							val:        "end::",
							ignoreCase: false,
							want:       "\"end::\"",
						},
						&labeledExpr{
							pos:   position{line: 617, col: 31, offset: 20951},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 617, col: 36, offset: 20956},
								run: (*parser).callonIncludedFileEndTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 617, col: 36, offset: 20956},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 617, col: 76, offset: 20996},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "ListParagraph",
			pos:  position{line: 624, col: 1, offset: 21160},
			expr: &choiceExpr{
				pos: position{line: 624, col: 18, offset: 21177},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 624, col: 18, offset: 21177},
						run: (*parser).callonListParagraph2,
						expr: &labeledExpr{
							pos:   position{line: 624, col: 18, offset: 21177},
							label: "comment",
							expr: &ruleRefExpr{
								pos:  position{line: 624, col: 27, offset: 21186},
								name: "SingleLineComment",
							},
						},
					},
					&actionExpr{
						pos: position{line: 626, col: 9, offset: 21243},
						run: (*parser).callonListParagraph5,
						expr: &labeledExpr{
							pos:   position{line: 626, col: 9, offset: 21243},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 626, col: 15, offset: 21249},
								expr: &ruleRefExpr{
									pos:  position{line: 626, col: 16, offset: 21250},
									name: "ListParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListParagraphLine",
			pos:  position{line: 630, col: 1, offset: 21342},
			expr: &actionExpr{
				pos: position{line: 630, col: 22, offset: 21363},
				run: (*parser).callonListParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 630, col: 22, offset: 21363},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 630, col: 22, offset: 21363},
							expr: &ruleRefExpr{
								pos:  position{line: 630, col: 23, offset: 21364},
								name: "EOF",
							},
						},
						&notExpr{
							pos: position{line: 631, col: 5, offset: 21372},
							expr: &ruleRefExpr{
								pos:  position{line: 631, col: 6, offset: 21373},
								name: "BlankLine",
							},
						},
						&notExpr{
							pos: position{line: 632, col: 5, offset: 21387},
							expr: &ruleRefExpr{
								pos:  position{line: 632, col: 6, offset: 21388},
								name: "SingleLineComment",
							},
						},
						&notExpr{
							pos: position{line: 633, col: 5, offset: 21410},
							expr: &ruleRefExpr{
								pos:  position{line: 633, col: 6, offset: 21411},
								name: "OrderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 634, col: 5, offset: 21437},
							expr: &ruleRefExpr{
								pos:  position{line: 634, col: 6, offset: 21438},
								name: "UnorderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 635, col: 5, offset: 21466},
							expr: &ruleRefExpr{
								pos:  position{line: 635, col: 6, offset: 21467},
								name: "CalloutListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 636, col: 5, offset: 21493},
							expr: &ruleRefExpr{
								pos:  position{line: 636, col: 6, offset: 21494},
								name: "ListItemContinuation",
							},
						},
						&notExpr{
							pos: position{line: 637, col: 5, offset: 21519},
							expr: &ruleRefExpr{
								pos:  position{line: 637, col: 6, offset: 21520},
								name: "ElementAttribute",
							},
						},
						&notExpr{
							pos: position{line: 638, col: 5, offset: 21541},
							expr: &ruleRefExpr{
								pos:  position{line: 638, col: 6, offset: 21542},
								name: "BlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 639, col: 5, offset: 21561},
							expr: &ruleRefExpr{
								pos:  position{line: 639, col: 6, offset: 21562},
								name: "LabeledListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 640, col: 5, offset: 21589},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 640, col: 11, offset: 21595},
								run: (*parser).callonListParagraphLine24,
								expr: &seqExpr{
									pos: position{line: 640, col: 11, offset: 21595},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 640, col: 11, offset: 21595},
											expr: &ruleRefExpr{
												pos:  position{line: 640, col: 11, offset: 21595},
												name: "Space",
											},
										},
										&labeledExpr{
											pos:   position{line: 640, col: 18, offset: 21602},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 640, col: 27, offset: 21611},
												expr: &ruleRefExpr{
													pos:  position{line: 640, col: 28, offset: 21612},
													name: "InlineElement",
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 642, col: 12, offset: 21711},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ListItemContinuation",
			pos:  position{line: 646, col: 1, offset: 21750},
			expr: &seqExpr{
				pos: position{line: 646, col: 25, offset: 21774},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 646, col: 25, offset: 21774},
						val:        "+",
						ignoreCase: false,
						want:       "\"+\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 646, col: 29, offset: 21778},
						expr: &ruleRefExpr{
							pos:  position{line: 646, col: 29, offset: 21778},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 646, col: 36, offset: 21785},
						name: "Newline",
					},
				},
			},
		},
		{
			name: "ContinuedListItemElement",
			pos:  position{line: 648, col: 1, offset: 21857},
			expr: &actionExpr{
				pos: position{line: 648, col: 29, offset: 21885},
				run: (*parser).callonContinuedListItemElement1,
				expr: &seqExpr{
					pos: position{line: 648, col: 29, offset: 21885},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 648, col: 29, offset: 21885},
							name: "ListItemContinuation",
						},
						&labeledExpr{
							pos:   position{line: 648, col: 50, offset: 21906},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 648, col: 58, offset: 21914},
								name: "ContinuedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "ContinuedListItemContent",
			pos:  position{line: 652, col: 1, offset: 22020},
			expr: &actionExpr{
				pos: position{line: 652, col: 29, offset: 22048},
				run: (*parser).callonContinuedListItemContent1,
				expr: &seqExpr{
					pos: position{line: 652, col: 29, offset: 22048},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 652, col: 29, offset: 22048},
							expr: &ruleRefExpr{
								pos:  position{line: 652, col: 30, offset: 22049},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 653, col: 5, offset: 22058},
							label: "content",
							expr: &choiceExpr{
								pos: position{line: 653, col: 14, offset: 22067},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 653, col: 14, offset: 22067},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 654, col: 11, offset: 22092},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 655, col: 11, offset: 22120},
										name: "Table",
									},
									&ruleRefExpr{
										pos:  position{line: 656, col: 11, offset: 22136},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 657, col: 11, offset: 22157},
										name: "ThematicBreak",
									},
									&ruleRefExpr{
										pos:  position{line: 658, col: 11, offset: 22181},
										name: "OrderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 659, col: 11, offset: 22208},
										name: "UnorderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 660, col: 11, offset: 22237},
										name: "LabeledListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 661, col: 11, offset: 22264},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 662, col: 11, offset: 22315},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 663, col: 11, offset: 22339},
										name: "AttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 664, col: 11, offset: 22371},
										name: "AttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 665, col: 11, offset: 22397},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 666, col: 11, offset: 22434},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 667, col: 11, offset: 22459},
										name: "ContinuedRawParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItem",
			pos:  position{line: 674, col: 1, offset: 22625},
			expr: &actionExpr{
				pos: position{line: 674, col: 20, offset: 22644},
				run: (*parser).callonOrderedListItem1,
				expr: &seqExpr{
					pos: position{line: 674, col: 20, offset: 22644},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 674, col: 20, offset: 22644},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 674, col: 31, offset: 22655},
								expr: &ruleRefExpr{
									pos:  position{line: 674, col: 32, offset: 22656},
									name: "BlockAttribute",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 674, col: 49, offset: 22673},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 674, col: 57, offset: 22681},
								name: "OrderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 674, col: 80, offset: 22704},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 674, col: 89, offset: 22713},
								name: "OrderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemPrefix",
			pos:  position{line: 678, col: 1, offset: 22869},
			expr: &actionExpr{
				pos: position{line: 679, col: 5, offset: 22899},
				run: (*parser).callonOrderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 679, col: 5, offset: 22899},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 679, col: 5, offset: 22899},
							expr: &ruleRefExpr{
								pos:  position{line: 679, col: 5, offset: 22899},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 679, col: 12, offset: 22906},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 681, col: 9, offset: 22969},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 681, col: 9, offset: 22969},
										run: (*parser).callonOrderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 681, col: 9, offset: 22969},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 681, col: 9, offset: 22969},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 681, col: 16, offset: 22976},
														run: (*parser).callonOrderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 681, col: 16, offset: 22976},
															expr: &litMatcher{
																pos:        position{line: 681, col: 17, offset: 22977},
																val:        ".",
																ignoreCase: false,
																want:       "\".\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 685, col: 9, offset: 23077},
													run: (*parser).callonOrderedListItemPrefix13,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 704, col: 11, offset: 23794},
										run: (*parser).callonOrderedListItemPrefix14,
										expr: &seqExpr{
											pos: position{line: 704, col: 11, offset: 23794},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 704, col: 11, offset: 23794},
													expr: &charClassMatcher{
														pos:        position{line: 704, col: 12, offset: 23795},
														val:        "[0-9]",
														ranges:     []rune{'0', '9'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 704, col: 20, offset: 23803},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 706, col: 13, offset: 23914},
										run: (*parser).callonOrderedListItemPrefix19,
										expr: &seqExpr{
											pos: position{line: 706, col: 13, offset: 23914},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 706, col: 14, offset: 23915},
													val:        "[a-z]",
													ranges:     []rune{'a', 'z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 706, col: 21, offset: 23922},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 708, col: 13, offset: 24036},
										run: (*parser).callonOrderedListItemPrefix23,
										expr: &seqExpr{
											pos: position{line: 708, col: 13, offset: 24036},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 708, col: 14, offset: 24037},
													val:        "[A-Z]",
													ranges:     []rune{'A', 'Z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 708, col: 21, offset: 24044},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 710, col: 13, offset: 24158},
										run: (*parser).callonOrderedListItemPrefix27,
										expr: &seqExpr{
											pos: position{line: 710, col: 13, offset: 24158},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 710, col: 13, offset: 24158},
													expr: &charClassMatcher{
														pos:        position{line: 710, col: 14, offset: 24159},
														val:        "[ivxdlcm]",
														chars:      []rune{'i', 'v', 'x', 'd', 'l', 'c', 'm'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 710, col: 26, offset: 24171},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 712, col: 13, offset: 24285},
										run: (*parser).callonOrderedListItemPrefix32,
										expr: &seqExpr{
											pos: position{line: 712, col: 13, offset: 24285},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 712, col: 13, offset: 24285},
													expr: &charClassMatcher{
														pos:        position{line: 712, col: 14, offset: 24286},
														val:        "[IVXDLCM]",
														chars:      []rune{'I', 'V', 'X', 'D', 'L', 'C', 'M'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 712, col: 26, offset: 24298},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 714, col: 12, offset: 24411},
							expr: &ruleRefExpr{
								pos:  position{line: 714, col: 12, offset: 24411},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemContent",
			pos:  position{line: 718, col: 1, offset: 24446},
			expr: &actionExpr{
				pos: position{line: 718, col: 27, offset: 24472},
				run: (*parser).callonOrderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 718, col: 27, offset: 24472},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 718, col: 37, offset: 24482},
						expr: &ruleRefExpr{
							pos:  position{line: 718, col: 37, offset: 24482},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItem",
			pos:  position{line: 725, col: 1, offset: 24682},
			expr: &actionExpr{
				pos: position{line: 725, col: 22, offset: 24703},
				run: (*parser).callonUnorderedListItem1,
				expr: &seqExpr{
					pos: position{line: 725, col: 22, offset: 24703},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 725, col: 22, offset: 24703},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 725, col: 33, offset: 24714},
								expr: &ruleRefExpr{
									pos:  position{line: 725, col: 34, offset: 24715},
									name: "BlockAttribute",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 725, col: 51, offset: 24732},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 725, col: 59, offset: 24740},
								name: "UnorderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 725, col: 84, offset: 24765},
							label: "checkstyle",
							expr: &zeroOrOneExpr{
								pos: position{line: 725, col: 95, offset: 24776},
								expr: &ruleRefExpr{
									pos:  position{line: 725, col: 96, offset: 24777},
									name: "UnorderedListItemCheckStyle",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 725, col: 126, offset: 24807},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 725, col: 135, offset: 24816},
								name: "UnorderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemPrefix",
			pos:  position{line: 729, col: 1, offset: 24990},
			expr: &actionExpr{
				pos: position{line: 730, col: 5, offset: 25022},
				run: (*parser).callonUnorderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 730, col: 5, offset: 25022},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 730, col: 5, offset: 25022},
							expr: &ruleRefExpr{
								pos:  position{line: 730, col: 5, offset: 25022},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 730, col: 12, offset: 25029},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 730, col: 20, offset: 25037},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 732, col: 9, offset: 25094},
										run: (*parser).callonUnorderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 732, col: 9, offset: 25094},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 732, col: 9, offset: 25094},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 732, col: 16, offset: 25101},
														run: (*parser).callonUnorderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 732, col: 16, offset: 25101},
															expr: &litMatcher{
																pos:        position{line: 732, col: 17, offset: 25102},
																val:        "*",
																ignoreCase: false,
																want:       "\"*\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 736, col: 9, offset: 25202},
													run: (*parser).callonUnorderedListItemPrefix13,
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 753, col: 14, offset: 25909},
										label: "depth",
										expr: &actionExpr{
											pos: position{line: 753, col: 21, offset: 25916},
											run: (*parser).callonUnorderedListItemPrefix15,
											expr: &litMatcher{
												pos:        position{line: 753, col: 22, offset: 25917},
												val:        "-",
												ignoreCase: false,
												want:       "\"-\"",
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 755, col: 13, offset: 26003},
							expr: &ruleRefExpr{
								pos:  position{line: 755, col: 13, offset: 26003},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemCheckStyle",
			pos:  position{line: 759, col: 1, offset: 26039},
			expr: &actionExpr{
				pos: position{line: 759, col: 32, offset: 26070},
				run: (*parser).callonUnorderedListItemCheckStyle1,
				expr: &seqExpr{
					pos: position{line: 759, col: 32, offset: 26070},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 759, col: 32, offset: 26070},
							expr: &litMatcher{
								pos:        position{line: 759, col: 33, offset: 26071},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 759, col: 37, offset: 26075},
							label: "style",
							expr: &choiceExpr{
								pos: position{line: 760, col: 7, offset: 26089},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 760, col: 7, offset: 26089},
										run: (*parser).callonUnorderedListItemCheckStyle7,
										expr: &litMatcher{
											pos:        position{line: 760, col: 7, offset: 26089},
											val:        "[ ]",
											ignoreCase: false,
											want:       "\"[ ]\"",
										},
									},
									&actionExpr{
										pos: position{line: 761, col: 7, offset: 26134},
										run: (*parser).callonUnorderedListItemCheckStyle9,
										expr: &litMatcher{
											pos:        position{line: 761, col: 7, offset: 26134},
											val:        "[*]",
											ignoreCase: false,
											want:       "\"[*]\"",
										},
									},
									&actionExpr{
										pos: position{line: 762, col: 7, offset: 26177},
										run: (*parser).callonUnorderedListItemCheckStyle11,
										expr: &litMatcher{
											pos:        position{line: 762, col: 7, offset: 26177},
											val:        "[x]",
											ignoreCase: false,
											want:       "\"[x]\"",
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 763, col: 7, offset: 26219},
							expr: &ruleRefExpr{
								pos:  position{line: 763, col: 7, offset: 26219},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemContent",
			pos:  position{line: 767, col: 1, offset: 26261},
			expr: &actionExpr{
				pos: position{line: 767, col: 29, offset: 26289},
				run: (*parser).callonUnorderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 767, col: 29, offset: 26289},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 767, col: 39, offset: 26299},
						expr: &ruleRefExpr{
							pos:  position{line: 767, col: 39, offset: 26299},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "LabeledListItem",
			pos:  position{line: 774, col: 1, offset: 26615},
			expr: &actionExpr{
				pos: position{line: 774, col: 20, offset: 26634},
				run: (*parser).callonLabeledListItem1,
				expr: &seqExpr{
					pos: position{line: 774, col: 20, offset: 26634},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 774, col: 20, offset: 26634},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 774, col: 31, offset: 26645},
								expr: &ruleRefExpr{
									pos:  position{line: 774, col: 32, offset: 26646},
									name: "BlockAttribute",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 774, col: 49, offset: 26663},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 774, col: 55, offset: 26669},
								name: "VerbatimLabeledListItemTerm",
							},
						},
						&labeledExpr{
							pos:   position{line: 774, col: 84, offset: 26698},
							label: "separator",
							expr: &ruleRefExpr{
								pos:  position{line: 774, col: 95, offset: 26709},
								name: "LabeledListItemSeparator",
							},
						},
						&labeledExpr{
							pos:   position{line: 774, col: 121, offset: 26735},
							label: "description",
							expr: &zeroOrOneExpr{
								pos: position{line: 774, col: 133, offset: 26747},
								expr: &ruleRefExpr{
									pos:  position{line: 774, col: 134, offset: 26748},
									name: "LabeledListItemDescription",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemPrefix",
			pos:  position{line: 778, col: 1, offset: 26910},
			expr: &seqExpr{
				pos: position{line: 778, col: 26, offset: 26935},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 778, col: 26, offset: 26935},
						name: "VerbatimLabeledListItemTerm",
					},
					&ruleRefExpr{
						pos:  position{line: 778, col: 54, offset: 26963},
						name: "LabeledListItemSeparator",
					},
				},
			},
		},
		{
			name: "VerbatimLabeledListItemChars",
			pos:  position{line: 780, col: 1, offset: 26989},
			expr: &choiceExpr{
				pos: position{line: 780, col: 33, offset: 27021},
				alternatives: []interface{}{
					&oneOrMoreExpr{
						pos: position{line: 780, col: 33, offset: 27021},
						expr: &charClassMatcher{
							pos:        position{line: 780, col: 33, offset: 27021},
							val:        "[^:\\r\\n]",
							chars:      []rune{':', '\r', '\n'},
							ignoreCase: false,
							inverted:   true,
						},
					},
					&seqExpr{
						pos: position{line: 780, col: 45, offset: 27033},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 780, col: 45, offset: 27033},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
							&notExpr{
								pos: position{line: 780, col: 49, offset: 27037},
								expr: &litMatcher{
									pos:        position{line: 780, col: 50, offset: 27038},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerbatimLabeledListItemTerm",
			pos:  position{line: 781, col: 1, offset: 27042},
			expr: &actionExpr{
				pos: position{line: 781, col: 32, offset: 27073},
				run: (*parser).callonVerbatimLabeledListItemTerm1,
				expr: &labeledExpr{
					pos:   position{line: 781, col: 32, offset: 27073},
					label: "content",
					expr: &actionExpr{
						pos: position{line: 781, col: 42, offset: 27083},
						run: (*parser).callonVerbatimLabeledListItemTerm3,
						expr: &oneOrMoreExpr{
							pos: position{line: 781, col: 42, offset: 27083},
							expr: &ruleRefExpr{
								pos:  position{line: 781, col: 42, offset: 27083},
								name: "VerbatimLabeledListItemChars",
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTerm",
			pos:  position{line: 787, col: 1, offset: 27238},
			expr: &actionExpr{
				pos: position{line: 787, col: 24, offset: 27261},
				run: (*parser).callonLabeledListItemTerm1,
				expr: &labeledExpr{
					pos:   position{line: 787, col: 24, offset: 27261},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 787, col: 33, offset: 27270},
						expr: &seqExpr{
							pos: position{line: 787, col: 34, offset: 27271},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 787, col: 34, offset: 27271},
									expr: &ruleRefExpr{
										pos:  position{line: 787, col: 35, offset: 27272},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 787, col: 43, offset: 27280},
									expr: &litMatcher{
										pos:        position{line: 787, col: 44, offset: 27281},
										val:        "::",
										ignoreCase: false,
										want:       "\"::\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 787, col: 49, offset: 27286},
									name: "LabeledListItemTermElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTermElement",
			pos:  position{line: 791, col: 1, offset: 27413},
			expr: &actionExpr{
				pos: position{line: 791, col: 31, offset: 27443},
				run: (*parser).callonLabeledListItemTermElement1,
				expr: &labeledExpr{
					pos:   position{line: 791, col: 31, offset: 27443},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 791, col: 40, offset: 27452},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 791, col: 40, offset: 27452},
								name: "Word",
							},
							&ruleRefExpr{
								pos:  position{line: 792, col: 11, offset: 27467},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 793, col: 11, offset: 27516},
								expr: &ruleRefExpr{
									pos:  position{line: 793, col: 11, offset: 27516},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 794, col: 11, offset: 27534},
								name: "CrossReference",
							},
							&ruleRefExpr{
								pos:  position{line: 795, col: 11, offset: 27559},
								name: "ConcealedIndexTerm",
							},
							&ruleRefExpr{
								pos:  position{line: 796, col: 11, offset: 27588},
								name: "IndexTerm",
							},
							&ruleRefExpr{
								pos:  position{line: 797, col: 11, offset: 27608},
								name: "InlinePassthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 798, col: 11, offset: 27697},
								name: "InlineIcon",
							},
							&ruleRefExpr{
								pos:  position{line: 799, col: 11, offset: 27718},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 800, col: 11, offset: 27741},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 801, col: 11, offset: 27756},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 802, col: 11, offset: 27781},
								name: "QuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 803, col: 11, offset: 27804},
								name: "QuotedText",
							},
							&ruleRefExpr{
								pos:  position{line: 804, col: 11, offset: 27825},
								name: "SpecialCharacter",
							},
							&ruleRefExpr{
								pos:  position{line: 805, col: 11, offset: 27852},
								name: "Symbol",
							},
							&ruleRefExpr{
								pos:  position{line: 806, col: 11, offset: 27869},
								name: "AttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 807, col: 11, offset: 27901},
								name: "AnyChar",
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemSeparator",
			pos:  position{line: 811, col: 1, offset: 27940},
			expr: &actionExpr{
				pos: position{line: 812, col: 5, offset: 27973},
				run: (*parser).callonLabeledListItemSeparator1,
				expr: &seqExpr{
					pos: position{line: 812, col: 5, offset: 27973},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 812, col: 5, offset: 27973},
							label: "separator",
							expr: &actionExpr{
								pos: position{line: 812, col: 16, offset: 27984},
								run: (*parser).callonLabeledListItemSeparator4,
								expr: &oneOrMoreExpr{
									pos: position{line: 812, col: 16, offset: 27984},
									expr: &litMatcher{
										pos:        position{line: 812, col: 17, offset: 27985},
										val:        ":",
										ignoreCase: false,
										want:       "\":\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 815, col: 5, offset: 28043},
							run: (*parser).callonLabeledListItemSeparator7,
						},
						&choiceExpr{
							pos: position{line: 819, col: 6, offset: 28219},
							alternatives: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 819, col: 6, offset: 28219},
									expr: &choiceExpr{
										pos: position{line: 819, col: 7, offset: 28220},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 819, col: 7, offset: 28220},
												name: "Space",
											},
											&ruleRefExpr{
												pos:  position{line: 819, col: 15, offset: 28228},
												name: "Newline",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 819, col: 27, offset: 28240},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemDescription",
			pos:  position{line: 823, col: 1, offset: 28280},
			expr: &actionExpr{
				pos: position{line: 823, col: 31, offset: 28310},
				run: (*parser).callonLabeledListItemDescription1,
				expr: &labeledExpr{
					pos:   position{line: 823, col: 31, offset: 28310},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 823, col: 40, offset: 28319},
						expr: &ruleRefExpr{
							pos:  position{line: 823, col: 41, offset: 28320},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionKind",
			pos:  position{line: 830, col: 1, offset: 28511},
			expr: &choiceExpr{
				pos: position{line: 830, col: 19, offset: 28529},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 830, col: 19, offset: 28529},
						run: (*parser).callonAdmonitionKind2,
						expr: &litMatcher{
							pos:        position{line: 830, col: 19, offset: 28529},
							val:        "TIP",
							ignoreCase: false,
							want:       "\"TIP\"",
						},
					},
					&actionExpr{
						pos: position{line: 832, col: 5, offset: 28567},
						run: (*parser).callonAdmonitionKind4,
						expr: &litMatcher{
							pos:        position{line: 832, col: 5, offset: 28567},
							val:        "NOTE",
							ignoreCase: false,
							want:       "\"NOTE\"",
						},
					},
					&actionExpr{
						pos: position{line: 834, col: 5, offset: 28607},
						run: (*parser).callonAdmonitionKind6,
						expr: &litMatcher{
							pos:        position{line: 834, col: 5, offset: 28607},
							val:        "IMPORTANT",
							ignoreCase: false,
							want:       "\"IMPORTANT\"",
						},
					},
					&actionExpr{
						pos: position{line: 836, col: 5, offset: 28657},
						run: (*parser).callonAdmonitionKind8,
						expr: &litMatcher{
							pos:        position{line: 836, col: 5, offset: 28657},
							val:        "WARNING",
							ignoreCase: false,
							want:       "\"WARNING\"",
						},
					},
					&actionExpr{
						pos: position{line: 838, col: 5, offset: 28703},
						run: (*parser).callonAdmonitionKind10,
						expr: &litMatcher{
							pos:        position{line: 838, col: 5, offset: 28703},
							val:        "CAUTION",
							ignoreCase: false,
							want:       "\"CAUTION\"",
						},
					},
				},
			},
		},
		{
			name: "RawParagraph",
			pos:  position{line: 850, col: 1, offset: 29083},
			expr: &choiceExpr{
				pos: position{line: 852, col: 6, offset: 29134},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 852, col: 6, offset: 29134},
						run: (*parser).callonRawParagraph2,
						expr: &seqExpr{
							pos: position{line: 852, col: 6, offset: 29134},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 852, col: 6, offset: 29134},
									label: "attributes",
									expr: &zeroOrMoreExpr{
										pos: position{line: 852, col: 17, offset: 29145},
										expr: &ruleRefExpr{
											pos:  position{line: 852, col: 18, offset: 29146},
											name: "ElementAttribute",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 852, col: 37, offset: 29165},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 852, col: 40, offset: 29168},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 852, col: 56, offset: 29184},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 852, col: 61, offset: 29189},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 852, col: 67, offset: 29195},
										expr: &choiceExpr{
											pos: position{line: 852, col: 68, offset: 29196},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 852, col: 68, offset: 29196},
													name: "SingleLineComment",
												},
												&ruleRefExpr{
													pos:  position{line: 852, col: 88, offset: 29216},
													name: "RawParagraphLine",
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 857, col: 5, offset: 29467},
						run: (*parser).callonRawParagraph15,
						expr: &seqExpr{
							pos: position{line: 857, col: 5, offset: 29467},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 857, col: 5, offset: 29467},
									label: "attributes",
									expr: &zeroOrMoreExpr{
										pos: position{line: 857, col: 16, offset: 29478},
										expr: &ruleRefExpr{
											pos:  position{line: 857, col: 17, offset: 29479},
											name: "ElementAttribute",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 857, col: 36, offset: 29498},
									val:        "> ",
									ignoreCase: false,
									want:       "\"> \"",
								},
								&labeledExpr{
									pos:   position{line: 857, col: 41, offset: 29503},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 857, col: 50, offset: 29512},
										name: "MarkdownQuoteBlockRawContent",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 861, col: 5, offset: 29701},
						run: (*parser).callonRawParagraph23,
						expr: &seqExpr{
							pos: position{line: 861, col: 5, offset: 29701},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 861, col: 5, offset: 29701},
									label: "attributes",
									expr: &zeroOrMoreExpr{
										pos: position{line: 861, col: 16, offset: 29712},
										expr: &ruleRefExpr{
											pos:  position{line: 861, col: 17, offset: 29713},
											name: "ElementAttribute",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 861, col: 36, offset: 29732},
									run: (*parser).callonRawParagraph28,
								},
								&labeledExpr{
									pos:   position{line: 864, col: 7, offset: 29908},
									label: "content",
									expr: &oneOrMoreExpr{
										pos: position{line: 864, col: 15, offset: 29916},
										expr: &ruleRefExpr{
											pos:  position{line: 864, col: 16, offset: 29917},
											name: "RawParagraphLine",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 868, col: 5, offset: 30099},
						run: (*parser).callonRawParagraph32,
						expr: &seqExpr{
							pos: position{line: 868, col: 5, offset: 30099},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 868, col: 5, offset: 30099},
									label: "attributes",
									expr: &zeroOrMoreExpr{
										pos: position{line: 868, col: 16, offset: 30110},
										expr: &ruleRefExpr{
											pos:  position{line: 868, col: 17, offset: 30111},
											name: "ElementAttribute",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 868, col: 36, offset: 30130},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 868, col: 42, offset: 30136},
										expr: &choiceExpr{
											pos: position{line: 868, col: 43, offset: 30137},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 868, col: 43, offset: 30137},
													name: "SingleLineComment",
												},
												&ruleRefExpr{
													pos:  position{line: 868, col: 63, offset: 30157},
													name: "RawParagraphLine",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkdownQuoteBlockRawContent",
			pos:  position{line: 872, col: 1, offset: 30271},
			expr: &oneOrMoreExpr{
				pos: position{line: 872, col: 33, offset: 30303},
				expr: &actionExpr{
					pos: position{line: 872, col: 34, offset: 30304},
					run: (*parser).callonMarkdownQuoteBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 872, col: 34, offset: 30304},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 872, col: 34, offset: 30304},
								expr: &ruleRefExpr{
									pos:  position{line: 872, col: 35, offset: 30305},
									name: "BlankLine",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 872, col: 45, offset: 30315},
								expr: &litMatcher{
									pos:        position{line: 872, col: 45, offset: 30315},
									val:        "> ",
									ignoreCase: false,
									want:       "\"> \"",
								},
							},
							&labeledExpr{
								pos:   position{line: 872, col: 51, offset: 30321},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 872, col: 60, offset: 30330},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RawParagraphLine",
			pos:  position{line: 876, col: 1, offset: 30371},
			expr: &actionExpr{
				pos: position{line: 876, col: 21, offset: 30391},
				run: (*parser).callonRawParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 876, col: 21, offset: 30391},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 876, col: 21, offset: 30391},
							expr: &ruleRefExpr{
								pos:  position{line: 876, col: 22, offset: 30392},
								name: "BlockDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 877, col: 5, offset: 30412},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 877, col: 14, offset: 30421},
								name: "RawParagraphLineContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 877, col: 39, offset: 30446},
							name: "EOL",
						},
						&andCodeExpr{
							pos: position{line: 877, col: 43, offset: 30450},
							run: (*parser).callonRawParagraphLine8,
						},
					},
				},
			},
		},
		{
			name: "RawParagraphLineContent",
			pos:  position{line: 887, col: 1, offset: 30685},
			expr: &actionExpr{
				pos: position{line: 887, col: 28, offset: 30712},
				run: (*parser).callonRawParagraphLineContent1,
				expr: &oneOrMoreExpr{
					pos: position{line: 887, col: 28, offset: 30712},
					expr: &charClassMatcher{
						pos:        position{line: 887, col: 28, offset: 30712},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "SimpleRawParagraph",
			pos:  position{line: 892, col: 1, offset: 30829},
			expr: &actionExpr{
				pos: position{line: 892, col: 23, offset: 30851},
				run: (*parser).callonSimpleRawParagraph1,
				expr: &seqExpr{
					pos: position{line: 892, col: 23, offset: 30851},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 892, col: 23, offset: 30851},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 892, col: 34, offset: 30862},
								expr: &ruleRefExpr{
									pos:  position{line: 892, col: 35, offset: 30863},
									name: "ElementAttribute",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 893, col: 5, offset: 30887},
							run: (*parser).callonSimpleRawParagraph6,
						},
						&labeledExpr{
							pos:   position{line: 896, col: 5, offset: 30997},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 896, col: 16, offset: 31008},
								name: "FirstParagraphRawLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 897, col: 5, offset: 31034},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 897, col: 16, offset: 31045},
								expr: &choiceExpr{
									pos: position{line: 897, col: 17, offset: 31046},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 897, col: 17, offset: 31046},
											name: "SingleLineComment",
										},
										&ruleRefExpr{
											pos:  position{line: 897, col: 37, offset: 31066},
											name: "RawParagraphLine",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FirstParagraphRawLine",
			pos:  position{line: 901, col: 1, offset: 31214},
			expr: &actionExpr{
				pos: position{line: 902, col: 5, offset: 31244},
				run: (*parser).callonFirstParagraphRawLine1,
				expr: &seqExpr{
					pos: position{line: 902, col: 5, offset: 31244},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 902, col: 5, offset: 31244},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 902, col: 14, offset: 31253},
								run: (*parser).callonFirstParagraphRawLine4,
								expr: &seqExpr{
									pos: position{line: 902, col: 14, offset: 31253},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 902, col: 14, offset: 31253},
											label: "elements",
											expr: &ruleRefExpr{
												pos:  position{line: 902, col: 23, offset: 31262},
												name: "Word",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 902, col: 28, offset: 31267},
											expr: &charClassMatcher{
												pos:        position{line: 902, col: 28, offset: 31267},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 902, col: 68, offset: 31307},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ContinuedRawParagraph",
			pos:  position{line: 913, col: 1, offset: 31559},
			expr: &choiceExpr{
				pos: position{line: 915, col: 5, offset: 31618},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 915, col: 5, offset: 31618},
						run: (*parser).callonContinuedRawParagraph2,
						expr: &seqExpr{
							pos: position{line: 915, col: 5, offset: 31618},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 915, col: 5, offset: 31618},
									label: "attributes",
									expr: &zeroOrMoreExpr{
										pos: position{line: 915, col: 16, offset: 31629},
										expr: &ruleRefExpr{
											pos:  position{line: 915, col: 17, offset: 31630},
											name: "ElementAttribute",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 915, col: 36, offset: 31649},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 915, col: 39, offset: 31652},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 915, col: 55, offset: 31668},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 915, col: 60, offset: 31673},
									label: "lines",
									expr: &ruleRefExpr{
										pos:  position{line: 915, col: 67, offset: 31680},
										name: "ContinuedRawParagraphLines",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 919, col: 5, offset: 31899},
						run: (*parser).callonContinuedRawParagraph12,
						expr: &seqExpr{
							pos: position{line: 919, col: 5, offset: 31899},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 919, col: 5, offset: 31899},
									label: "attributes",
									expr: &zeroOrMoreExpr{
										pos: position{line: 919, col: 16, offset: 31910},
										expr: &ruleRefExpr{
											pos:  position{line: 919, col: 17, offset: 31911},
											name: "ElementAttribute",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 919, col: 36, offset: 31930},
									label: "lines",
									expr: &ruleRefExpr{
										pos:  position{line: 919, col: 43, offset: 31937},
										name: "ContinuedRawParagraphLines",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ContinuedRawParagraphLines",
			pos:  position{line: 923, col: 1, offset: 32057},
			expr: &actionExpr{
				pos: position{line: 923, col: 31, offset: 32087},
				run: (*parser).callonContinuedRawParagraphLines1,
				expr: &seqExpr{
					pos: position{line: 923, col: 31, offset: 32087},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 923, col: 31, offset: 32087},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 923, col: 42, offset: 32098},
								name: "FirstParagraphRawLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 923, col: 65, offset: 32121},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 923, col: 76, offset: 32132},
								expr: &actionExpr{
									pos: position{line: 923, col: 77, offset: 32133},
									run: (*parser).callonContinuedRawParagraphLines7,
									expr: &seqExpr{
										pos: position{line: 923, col: 77, offset: 32133},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 923, col: 77, offset: 32133},
												expr: &ruleRefExpr{
													pos:  position{line: 923, col: 78, offset: 32134},
													name: "ListItemContinuation",
												},
											},
											&labeledExpr{
												pos:   position{line: 923, col: 99, offset: 32155},
												label: "line",
												expr: &choiceExpr{
													pos: position{line: 923, col: 105, offset: 32161},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 923, col: 105, offset: 32161},
															name: "SingleLineComment",
														},
														&ruleRefExpr{
															pos:  position{line: 923, col: 125, offset: 32181},
															name: "RawParagraphLine",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElements",
			pos:  position{line: 931, col: 1, offset: 32423},
			expr: &actionExpr{
				pos: position{line: 931, col: 19, offset: 32441},
				run: (*parser).callonInlineElements1,
				expr: &seqExpr{
					pos: position{line: 931, col: 19, offset: 32441},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 931, col: 19, offset: 32441},
							expr: &ruleRefExpr{
								pos:  position{line: 931, col: 20, offset: 32442},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 932, col: 5, offset: 32456},
							label: "elements",
							expr: &choiceExpr{
								pos: position{line: 932, col: 15, offset: 32466},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 932, col: 15, offset: 32466},
										run: (*parser).callonInlineElements7,
										expr: &labeledExpr{
											pos:   position{line: 932, col: 15, offset: 32466},
											label: "comment",
											expr: &ruleRefExpr{
												pos:  position{line: 932, col: 24, offset: 32475},
												name: "SingleLineComment",
											},
										},
									},
									&actionExpr{
										pos: position{line: 934, col: 9, offset: 32567},
										run: (*parser).callonInlineElements10,
										expr: &seqExpr{
											pos: position{line: 934, col: 9, offset: 32567},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 934, col: 9, offset: 32567},
													label: "elements",
													expr: &oneOrMoreExpr{
														pos: position{line: 934, col: 18, offset: 32576},
														expr: &ruleRefExpr{
															pos:  position{line: 934, col: 19, offset: 32577},
															name: "InlineElement",
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 934, col: 35, offset: 32593},
													name: "EOL",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElement",
			pos:  position{line: 940, col: 1, offset: 32710},
			expr: &actionExpr{
				pos: position{line: 941, col: 5, offset: 32733},
				run: (*parser).callonInlineElement1,
				expr: &labeledExpr{
					pos:   position{line: 941, col: 5, offset: 32733},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 941, col: 14, offset: 32742},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 941, col: 14, offset: 32742},
								name: "InlineWord",
							},
							&ruleRefExpr{
								pos:  position{line: 942, col: 11, offset: 32803},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 943, col: 11, offset: 32848},
								expr: &ruleRefExpr{
									pos:  position{line: 943, col: 11, offset: 32848},
									name: "Space",
								},
							},
							&seqExpr{
								pos: position{line: 944, col: 11, offset: 32866},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 944, col: 11, offset: 32866},
										expr: &ruleRefExpr{
											pos:  position{line: 944, col: 12, offset: 32867},
											name: "EOL",
										},
									},
									&choiceExpr{
										pos: position{line: 945, col: 13, offset: 32885},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 945, col: 13, offset: 32885},
												name: "QuotedString",
											},
											&ruleRefExpr{
												pos:  position{line: 946, col: 15, offset: 32912},
												name: "QuotedText",
											},
											&ruleRefExpr{
												pos:  position{line: 947, col: 15, offset: 32937},
												name: "InlineIcon",
											},
											&ruleRefExpr{
												pos:  position{line: 948, col: 15, offset: 32962},
												name: "InlineImage",
											},
											&ruleRefExpr{
												pos:  position{line: 949, col: 15, offset: 32989},
												name: "Link",
											},
											&ruleRefExpr{
												pos:  position{line: 950, col: 15, offset: 33009},
												name: "InlinePassthrough",
											},
											&ruleRefExpr{
												pos:  position{line: 951, col: 15, offset: 33102},
												name: "InlineFootnote",
											},
											&ruleRefExpr{
												pos:  position{line: 952, col: 15, offset: 33132},
												name: "CrossReference",
											},
											&ruleRefExpr{
												pos:  position{line: 953, col: 15, offset: 33200},
												name: "SpecialCharacter",
											},
											&ruleRefExpr{
												pos:  position{line: 954, col: 15, offset: 33231},
												name: "Symbol",
											},
											&ruleRefExpr{
												pos:  position{line: 955, col: 15, offset: 33252},
												name: "InlineUserMacro",
											},
											&ruleRefExpr{
												pos:  position{line: 956, col: 15, offset: 33283},
												name: "AttributeSubstitution",
											},
											&ruleRefExpr{
												pos:  position{line: 957, col: 15, offset: 33320},
												name: "InlineElementID",
											},
											&ruleRefExpr{
												pos:  position{line: 958, col: 15, offset: 33350},
												name: "ConcealedIndexTerm",
											},
											&ruleRefExpr{
												pos:  position{line: 959, col: 15, offset: 33383},
												name: "IndexTerm",
											},
											&ruleRefExpr{
												pos:  position{line: 960, col: 15, offset: 33407},
												name: "ElementPlaceHolder",
											},
											&ruleRefExpr{
												pos:  position{line: 961, col: 15, offset: 33440},
												name: "AnyChar",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LineBreak",
			pos:  position{line: 968, col: 1, offset: 33663},
			expr: &actionExpr{
				pos: position{line: 968, col: 14, offset: 33676},
				run: (*parser).callonLineBreak1,
				expr: &seqExpr{
					pos: position{line: 968, col: 14, offset: 33676},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 968, col: 14, offset: 33676},
							name: "Space",
						},
						&litMatcher{
							pos:        position{line: 968, col: 20, offset: 33682},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 968, col: 24, offset: 33686},
							expr: &ruleRefExpr{
								pos:  position{line: 968, col: 24, offset: 33686},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 968, col: 31, offset: 33693},
							expr: &ruleRefExpr{
								pos:  position{line: 968, col: 32, offset: 33694},
								name: "EOL",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedText",
			pos:  position{line: 975, col: 1, offset: 33978},
			expr: &choiceExpr{
				pos: position{line: 975, col: 15, offset: 33992},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 975, col: 15, offset: 33992},
						name: "UnconstrainedQuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 975, col: 41, offset: 34018},
						name: "ConstrainedQuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 975, col: 65, offset: 34042},
						name: "EscapedQuotedText",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedTextMarker",
			pos:  position{line: 977, col: 1, offset: 34061},
			expr: &choiceExpr{
				pos: position{line: 977, col: 32, offset: 34092},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 977, col: 32, offset: 34092},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 977, col: 32, offset: 34092},
								val:        "*",
								ignoreCase: false,
								want:       "\"*\"",
							},
							&notExpr{
								pos: position{line: 977, col: 36, offset: 34096},
								expr: &litMatcher{
									pos:        position{line: 977, col: 37, offset: 34097},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 977, col: 43, offset: 34103},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 977, col: 43, offset: 34103},
								val:        "_",
								ignoreCase: false,
								want:       "\"_\"",
							},
							&notExpr{
								pos: position{line: 977, col: 47, offset: 34107},
								expr: &litMatcher{
									pos:        position{line: 977, col: 48, offset: 34108},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 977, col: 54, offset: 34114},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 977, col: 54, offset: 34114},
								val:        "#",
								ignoreCase: false,
								want:       "\"#\"",
							},
							&notExpr{
								pos: position{line: 977, col: 58, offset: 34118},
								expr: &litMatcher{
									pos:        position{line: 977, col: 59, offset: 34119},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 977, col: 65, offset: 34125},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 977, col: 65, offset: 34125},
								val:        "`",
								ignoreCase: false,
								want:       "\"`\"",
							},
							&notExpr{
								pos: position{line: 977, col: 69, offset: 34129},
								expr: &litMatcher{
									pos:        position{line: 977, col: 70, offset: 34130},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedTextPrefix",
			pos:  position{line: 979, col: 1, offset: 34135},
			expr: &choiceExpr{
				pos: position{line: 979, col: 34, offset: 34168},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 979, col: 34, offset: 34168},
						val:        "**",
						ignoreCase: false,
						want:       "\"**\"",
					},
					&litMatcher{
						pos:        position{line: 979, col: 41, offset: 34175},
						val:        "__",
						ignoreCase: false,
						want:       "\"__\"",
					},
					&litMatcher{
						pos:        position{line: 979, col: 48, offset: 34182},
						val:        "``",
						ignoreCase: false,
						want:       "\"``\"",
					},
					&litMatcher{
						pos:        position{line: 979, col: 55, offset: 34189},
						val:        "##",
						ignoreCase: false,
						want:       "\"##\"",
					},
					&litMatcher{
						pos:        position{line: 979, col: 62, offset: 34196},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&litMatcher{
						pos:        position{line: 979, col: 68, offset: 34202},
						val:        "~",
						ignoreCase: false,
						want:       "\"~\"",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedText",
			pos:  position{line: 981, col: 1, offset: 34207},
			expr: &actionExpr{
				pos: position{line: 981, col: 26, offset: 34232},
				run: (*parser).callonConstrainedQuotedText1,
				expr: &labeledExpr{
					pos:   position{line: 981, col: 26, offset: 34232},
					label: "text",
					expr: &choiceExpr{
						pos: position{line: 981, col: 32, offset: 34238},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 981, col: 32, offset: 34238},
								name: "SingleQuoteBoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 982, col: 15, offset: 34273},
								name: "SingleQuoteItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 983, col: 15, offset: 34309},
								name: "SingleQuoteMarkedText",
							},
							&ruleRefExpr{
								pos:  position{line: 984, col: 15, offset: 34345},
								name: "SingleQuoteMonospaceText",
							},
							&ruleRefExpr{
								pos:  position{line: 985, col: 15, offset: 34385},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 986, col: 15, offset: 34414},
								name: "SuperscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 987, col: 15, offset: 34445},
								name: "SubscriptOrSuperscriptPrefix",
							},
						},
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedText",
			pos:  position{line: 991, col: 1, offset: 34599},
			expr: &choiceExpr{
				pos: position{line: 991, col: 28, offset: 34626},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 991, col: 28, offset: 34626},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 992, col: 15, offset: 34660},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 993, col: 15, offset: 34696},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 994, col: 15, offset: 34732},
						name: "DoubleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "EscapedQuotedText",
			pos:  position{line: 996, col: 1, offset: 34758},
			expr: &choiceExpr{
				pos: position{line: 996, col: 22, offset: 34779},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 996, col: 22, offset: 34779},
						name: "EscapedBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 997, col: 15, offset: 34810},
						name: "EscapedItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 998, col: 15, offset: 34842},
						name: "EscapedMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 999, col: 15, offset: 34874},
						name: "EscapedMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1000, col: 15, offset: 34910},
						name: "EscapedSubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1001, col: 15, offset: 34946},
						name: "EscapedSuperscriptText",
					},
				},
			},
		},
		{
			name: "SubscriptOrSuperscriptPrefix",
			pos:  position{line: 1003, col: 1, offset: 34970},
			expr: &choiceExpr{
				pos: position{line: 1003, col: 33, offset: 35002},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1003, col: 33, offset: 35002},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&actionExpr{
						pos: position{line: 1003, col: 39, offset: 35008},
						run: (*parser).callonSubscriptOrSuperscriptPrefix3,
						expr: &litMatcher{
							pos:        position{line: 1003, col: 39, offset: 35008},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "OneOrMoreBackslashes",
			pos:  position{line: 1007, col: 1, offset: 35141},
			expr: &actionExpr{
				pos: position{line: 1007, col: 25, offset: 35165},
				run: (*parser).callonOneOrMoreBackslashes1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1007, col: 25, offset: 35165},
					expr: &litMatcher{
						pos:        position{line: 1007, col: 25, offset: 35165},
						val:        "\\",
						ignoreCase: false,
						want:       "\"\\\\\"",
					},
				},
			},
		},
		{
			name: "TwoOrMoreBackslashes",
			pos:  position{line: 1011, col: 1, offset: 35206},
			expr: &actionExpr{
				pos: position{line: 1011, col: 25, offset: 35230},
				run: (*parser).callonTwoOrMoreBackslashes1,
				expr: &seqExpr{
					pos: position{line: 1011, col: 25, offset: 35230},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1011, col: 25, offset: 35230},
							val:        "\\\\",
							ignoreCase: false,
							want:       "\"\\\\\\\\\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1011, col: 30, offset: 35235},
							expr: &litMatcher{
								pos:        position{line: 1011, col: 30, offset: 35235},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
					},
				},
			},
		},
		{
			name: "BoldText",
			pos:  position{line: 1019, col: 1, offset: 35332},
			expr: &choiceExpr{
				pos: position{line: 1019, col: 13, offset: 35344},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1019, col: 13, offset: 35344},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1019, col: 35, offset: 35366},
						name: "SingleQuoteBoldText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldText",
			pos:  position{line: 1021, col: 1, offset: 35433},
			expr: &actionExpr{
				pos: position{line: 1021, col: 24, offset: 35456},
				run: (*parser).callonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 1021, col: 24, offset: 35456},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1021, col: 24, offset: 35456},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1021, col: 35, offset: 35467},
								expr: &ruleRefExpr{
									pos:  position{line: 1021, col: 36, offset: 35468},
									name: "QuotedTextAttributes",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1021, col: 59, offset: 35491},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
						&labeledExpr{
							pos:   position{line: 1021, col: 64, offset: 35496},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1021, col: 74, offset: 35506},
								name: "DoubleQuoteBoldTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1021, col: 103, offset: 35535},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElements",
			pos:  position{line: 1025, col: 1, offset: 35627},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1025, col: 32, offset: 35658},
				expr: &ruleRefExpr{
					pos:  position{line: 1025, col: 32, offset: 35658},
					name: "DoubleQuoteBoldTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElement",
			pos:  position{line: 1027, col: 1, offset: 35689},
			expr: &actionExpr{
				pos: position{line: 1027, col: 31, offset: 35719},
				run: (*parser).callonDoubleQuoteBoldTextElement1,
				expr: &seqExpr{
					pos: position{line: 1027, col: 31, offset: 35719},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1027, col: 31, offset: 35719},
							expr: &litMatcher{
								pos:        position{line: 1027, col: 33, offset: 35721},
								val:        "**",
								ignoreCase: false,
								want:       "\"**\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1027, col: 39, offset: 35727},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1027, col: 48, offset: 35736},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1027, col: 48, offset: 35736},
										name: "Word",
									},
									&ruleRefExpr{
										pos:  position{line: 1028, col: 11, offset: 35751},
										name: "Space",
									},
									&seqExpr{
										pos: position{line: 1029, col: 11, offset: 35800},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1029, col: 11, offset: 35800},
												name: "Newline",
											},
											&notExpr{
												pos: position{line: 1029, col: 19, offset: 35808},
												expr: &ruleRefExpr{
													pos:  position{line: 1029, col: 20, offset: 35809},
													name: "Newline",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1030, col: 11, offset: 35827},
										name: "SingleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1031, col: 11, offset: 35857},
										name: "QuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 1032, col: 11, offset: 35880},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1033, col: 11, offset: 35901},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1034, col: 11, offset: 35922},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1035, col: 11, offset: 35946},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1036, col: 11, offset: 35970},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1037, col: 11, offset: 35996},
										name: "ElementPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1038, col: 11, offset: 36025},
										name: "DoubleQuoteBoldTextFallbackCharacter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 1042, col: 1, offset: 36092},
			expr: &choiceExpr{
				pos: position{line: 1043, col: 5, offset: 36136},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1043, col: 5, offset: 36136},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1044, col: 7, offset: 36233},
						run: (*parser).callonDoubleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1044, col: 7, offset: 36233},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1044, col: 7, offset: 36233},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1044, col: 12, offset: 36238},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldText",
			pos:  position{line: 1048, col: 1, offset: 36401},
			expr: &choiceExpr{
				pos: position{line: 1048, col: 24, offset: 36424},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1048, col: 24, offset: 36424},
						run: (*parser).callonSingleQuoteBoldText2,
						expr: &seqExpr{
							pos: position{line: 1048, col: 24, offset: 36424},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1048, col: 24, offset: 36424},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1048, col: 35, offset: 36435},
										expr: &ruleRefExpr{
											pos:  position{line: 1048, col: 36, offset: 36436},
											name: "QuotedTextAttributes",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1048, col: 61, offset: 36461},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1048, col: 61, offset: 36461},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 1048, col: 65, offset: 36465},
											expr: &litMatcher{
												pos:        position{line: 1048, col: 66, offset: 36466},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1048, col: 71, offset: 36471},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1048, col: 81, offset: 36481},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1048, col: 110, offset: 36510},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&andExpr{
									pos: position{line: 1048, col: 114, offset: 36514},
									expr: &notExpr{
										pos: position{line: 1048, col: 116, offset: 36516},
										expr: &ruleRefExpr{
											pos:  position{line: 1048, col: 117, offset: 36517},
											name: "Alphanum",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1050, col: 5, offset: 36716},
						run: (*parser).callonSingleQuoteBoldText17,
						expr: &seqExpr{
							pos: position{line: 1050, col: 5, offset: 36716},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1050, col: 5, offset: 36716},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1050, col: 16, offset: 36727},
										expr: &ruleRefExpr{
											pos:  position{line: 1050, col: 17, offset: 36728},
											name: "QuotedTextAttributes",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1050, col: 40, offset: 36751},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 1050, col: 44, offset: 36755},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1050, col: 54, offset: 36765},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1050, col: 54, offset: 36765},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1050, col: 58, offset: 36769},
												name: "SingleQuoteBoldTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1050, col: 87, offset: 36798},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElements",
			pos:  position{line: 1054, col: 1, offset: 37009},
			expr: &seqExpr{
				pos: position{line: 1054, col: 32, offset: 37040},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1054, col: 32, offset: 37040},
						expr: &ruleRefExpr{
							pos:  position{line: 1054, col: 33, offset: 37041},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1054, col: 39, offset: 37047},
						expr: &ruleRefExpr{
							pos:  position{line: 1054, col: 39, offset: 37047},
							name: "SingleQuoteBoldTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElement",
			pos:  position{line: 1056, col: 1, offset: 37076},
			expr: &choiceExpr{
				pos: position{line: 1056, col: 31, offset: 37106},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1056, col: 31, offset: 37106},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1057, col: 11, offset: 37121},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1057, col: 11, offset: 37121},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1057, col: 19, offset: 37129},
								expr: &ruleRefExpr{
									pos:  position{line: 1057, col: 20, offset: 37130},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1058, col: 11, offset: 37148},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1059, col: 11, offset: 37178},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1060, col: 11, offset: 37201},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1060, col: 11, offset: 37201},
								expr: &ruleRefExpr{
									pos:  position{line: 1060, col: 11, offset: 37201},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1060, col: 18, offset: 37208},
								expr: &seqExpr{
									pos: position{line: 1060, col: 19, offset: 37209},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1060, col: 19, offset: 37209},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 1060, col: 23, offset: 37213},
											expr: &litMatcher{
												pos:        position{line: 1060, col: 24, offset: 37214},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1061, col: 11, offset: 37230},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1062, col: 11, offset: 37251},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1063, col: 11, offset: 37272},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1064, col: 11, offset: 37296},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1065, col: 11, offset: 37320},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1066, col: 11, offset: 37346},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1067, col: 11, offset: 37375},
						name: "SingleQuoteBoldTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 1069, col: 1, offset: 37413},
			expr: &choiceExpr{
				pos: position{line: 1070, col: 5, offset: 37457},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1070, col: 5, offset: 37457},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1071, col: 7, offset: 37554},
						run: (*parser).callonSingleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1071, col: 7, offset: 37554},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1071, col: 7, offset: 37554},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1071, col: 11, offset: 37558},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedBoldText",
			pos:  position{line: 1075, col: 1, offset: 37721},
			expr: &choiceExpr{
				pos: position{line: 1076, col: 5, offset: 37745},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1076, col: 5, offset: 37745},
						run: (*parser).callonEscapedBoldText2,
						expr: &seqExpr{
							pos: position{line: 1076, col: 5, offset: 37745},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1076, col: 5, offset: 37745},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1076, col: 18, offset: 37758},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1076, col: 40, offset: 37780},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1076, col: 45, offset: 37785},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1076, col: 55, offset: 37795},
										name: "DoubleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1076, col: 84, offset: 37824},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1078, col: 9, offset: 37981},
						run: (*parser).callonEscapedBoldText10,
						expr: &seqExpr{
							pos: position{line: 1078, col: 9, offset: 37981},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1078, col: 9, offset: 37981},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1078, col: 22, offset: 37994},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1078, col: 44, offset: 38016},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1078, col: 49, offset: 38021},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1078, col: 59, offset: 38031},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1078, col: 88, offset: 38060},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1081, col: 9, offset: 38260},
						run: (*parser).callonEscapedBoldText18,
						expr: &seqExpr{
							pos: position{line: 1081, col: 9, offset: 38260},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1081, col: 9, offset: 38260},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1081, col: 22, offset: 38273},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1081, col: 44, offset: 38295},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 1081, col: 48, offset: 38299},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1081, col: 58, offset: 38309},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1081, col: 87, offset: 38338},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ItalicText",
			pos:  position{line: 1089, col: 1, offset: 38546},
			expr: &choiceExpr{
				pos: position{line: 1089, col: 15, offset: 38560},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1089, col: 15, offset: 38560},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1089, col: 39, offset: 38584},
						name: "SingleQuoteItalicText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicText",
			pos:  position{line: 1091, col: 1, offset: 38607},
			expr: &actionExpr{
				pos: position{line: 1091, col: 26, offset: 38632},
				run: (*parser).callonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 1091, col: 26, offset: 38632},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1091, col: 26, offset: 38632},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1091, col: 37, offset: 38643},
								expr: &ruleRefExpr{
									pos:  position{line: 1091, col: 38, offset: 38644},
									name: "QuotedTextAttributes",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1091, col: 61, offset: 38667},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
						&labeledExpr{
							pos:   position{line: 1091, col: 66, offset: 38672},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1091, col: 76, offset: 38682},
								name: "DoubleQuoteItalicTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1091, col: 107, offset: 38713},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElements",
			pos:  position{line: 1095, col: 1, offset: 38852},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1095, col: 34, offset: 38885},
				expr: &ruleRefExpr{
					pos:  position{line: 1095, col: 34, offset: 38885},
					name: "DoubleQuoteItalicTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElement",
			pos:  position{line: 1097, col: 1, offset: 38917},
			expr: &actionExpr{
				pos: position{line: 1097, col: 33, offset: 38949},
				run: (*parser).callonDoubleQuoteItalicTextElement1,
				expr: &seqExpr{
					pos: position{line: 1097, col: 33, offset: 38949},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1097, col: 33, offset: 38949},
							expr: &litMatcher{
								pos:        position{line: 1097, col: 35, offset: 38951},
								val:        "__",
								ignoreCase: false,
								want:       "\"__\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1097, col: 41, offset: 38957},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1097, col: 50, offset: 38966},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1097, col: 50, offset: 38966},
										name: "Word",
									},
									&ruleRefExpr{
										pos:  position{line: 1098, col: 11, offset: 38981},
										name: "Space",
									},
									&seqExpr{
										pos: position{line: 1099, col: 11, offset: 39030},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1099, col: 11, offset: 39030},
												name: "Newline",
											},
											&notExpr{
												pos: position{line: 1099, col: 19, offset: 39038},
												expr: &ruleRefExpr{
													pos:  position{line: 1099, col: 20, offset: 39039},
													name: "Newline",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1100, col: 11, offset: 39057},
										name: "SingleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1101, col: 11, offset: 39089},
										name: "QuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 1102, col: 11, offset: 39112},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1103, col: 11, offset: 39131},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1104, col: 11, offset: 39152},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1105, col: 11, offset: 39176},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1106, col: 11, offset: 39200},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1107, col: 11, offset: 39226},
										name: "ElementPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1108, col: 11, offset: 39255},
										name: "DoubleQuoteItalicTextFallbackCharacter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1112, col: 1, offset: 39324},
			expr: &choiceExpr{
				pos: position{line: 1113, col: 5, offset: 39370},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1113, col: 5, offset: 39370},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1114, col: 7, offset: 39469},
						run: (*parser).callonDoubleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1114, col: 7, offset: 39469},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1114, col: 7, offset: 39469},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1114, col: 12, offset: 39474},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicText",
			pos:  position{line: 1118, col: 1, offset: 39639},
			expr: &choiceExpr{
				pos: position{line: 1118, col: 26, offset: 39664},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1118, col: 26, offset: 39664},
						run: (*parser).callonSingleQuoteItalicText2,
						expr: &seqExpr{
							pos: position{line: 1118, col: 26, offset: 39664},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1118, col: 26, offset: 39664},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1118, col: 37, offset: 39675},
										expr: &ruleRefExpr{
											pos:  position{line: 1118, col: 38, offset: 39676},
											name: "QuotedTextAttributes",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1118, col: 62, offset: 39700},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1118, col: 62, offset: 39700},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1118, col: 66, offset: 39704},
											expr: &litMatcher{
												pos:        position{line: 1118, col: 67, offset: 39705},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1118, col: 72, offset: 39710},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1118, col: 82, offset: 39720},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1118, col: 113, offset: 39751},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1120, col: 5, offset: 39946},
						run: (*parser).callonSingleQuoteItalicText14,
						expr: &seqExpr{
							pos: position{line: 1120, col: 5, offset: 39946},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1120, col: 5, offset: 39946},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1120, col: 16, offset: 39957},
										expr: &ruleRefExpr{
											pos:  position{line: 1120, col: 17, offset: 39958},
											name: "QuotedTextAttributes",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1120, col: 40, offset: 39981},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1120, col: 44, offset: 39985},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1120, col: 54, offset: 39995},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1120, col: 54, offset: 39995},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1120, col: 58, offset: 39999},
												name: "SingleQuoteItalicTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1120, col: 89, offset: 40030},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElements",
			pos:  position{line: 1124, col: 1, offset: 40245},
			expr: &seqExpr{
				pos: position{line: 1124, col: 34, offset: 40278},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1124, col: 34, offset: 40278},
						expr: &ruleRefExpr{
							pos:  position{line: 1124, col: 35, offset: 40279},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1124, col: 41, offset: 40285},
						expr: &ruleRefExpr{
							pos:  position{line: 1124, col: 41, offset: 40285},
							name: "SingleQuoteItalicTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElement",
			pos:  position{line: 1126, col: 1, offset: 40316},
			expr: &choiceExpr{
				pos: position{line: 1126, col: 33, offset: 40348},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1126, col: 33, offset: 40348},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1127, col: 11, offset: 40363},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1127, col: 11, offset: 40363},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1127, col: 19, offset: 40371},
								expr: &ruleRefExpr{
									pos:  position{line: 1127, col: 20, offset: 40372},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1128, col: 11, offset: 40390},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1129, col: 11, offset: 40422},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1130, col: 11, offset: 40445},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1130, col: 11, offset: 40445},
								expr: &ruleRefExpr{
									pos:  position{line: 1130, col: 11, offset: 40445},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1130, col: 18, offset: 40452},
								expr: &seqExpr{
									pos: position{line: 1130, col: 19, offset: 40453},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1130, col: 19, offset: 40453},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1130, col: 23, offset: 40457},
											expr: &litMatcher{
												pos:        position{line: 1130, col: 24, offset: 40458},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1131, col: 11, offset: 40474},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1132, col: 11, offset: 40493},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1133, col: 11, offset: 40514},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1134, col: 11, offset: 40538},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1135, col: 11, offset: 40562},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1136, col: 11, offset: 40588},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1137, col: 11, offset: 40617},
						name: "SingleQuoteItalicTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1139, col: 1, offset: 40657},
			expr: &choiceExpr{
				pos: position{line: 1140, col: 5, offset: 40703},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1140, col: 5, offset: 40703},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1141, col: 7, offset: 40802},
						run: (*parser).callonSingleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1141, col: 7, offset: 40802},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1141, col: 7, offset: 40802},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1141, col: 11, offset: 40806},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedItalicText",
			pos:  position{line: 1145, col: 1, offset: 40972},
			expr: &choiceExpr{
				pos: position{line: 1146, col: 5, offset: 40998},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1146, col: 5, offset: 40998},
						run: (*parser).callonEscapedItalicText2,
						expr: &seqExpr{
							pos: position{line: 1146, col: 5, offset: 40998},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1146, col: 5, offset: 40998},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1146, col: 18, offset: 41011},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1146, col: 40, offset: 41033},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1146, col: 45, offset: 41038},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1146, col: 55, offset: 41048},
										name: "DoubleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1146, col: 86, offset: 41079},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1148, col: 9, offset: 41236},
						run: (*parser).callonEscapedItalicText10,
						expr: &seqExpr{
							pos: position{line: 1148, col: 9, offset: 41236},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1148, col: 9, offset: 41236},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1148, col: 22, offset: 41249},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1148, col: 44, offset: 41271},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1148, col: 49, offset: 41276},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1148, col: 59, offset: 41286},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1148, col: 90, offset: 41317},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1151, col: 9, offset: 41517},
						run: (*parser).callonEscapedItalicText18,
						expr: &seqExpr{
							pos: position{line: 1151, col: 9, offset: 41517},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1151, col: 9, offset: 41517},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1151, col: 22, offset: 41530},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1151, col: 44, offset: 41552},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1151, col: 48, offset: 41556},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1151, col: 58, offset: 41566},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1151, col: 89, offset: 41597},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MonospaceText",
			pos:  position{line: 1158, col: 1, offset: 41807},
			expr: &choiceExpr{
				pos: position{line: 1158, col: 18, offset: 41824},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1158, col: 18, offset: 41824},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1158, col: 45, offset: 41851},
						name: "SingleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceText",
			pos:  position{line: 1160, col: 1, offset: 41877},
			expr: &actionExpr{
				pos: position{line: 1160, col: 29, offset: 41905},
				run: (*parser).callonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1160, col: 29, offset: 41905},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1160, col: 29, offset: 41905},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1160, col: 40, offset: 41916},
								expr: &ruleRefExpr{
									pos:  position{line: 1160, col: 41, offset: 41917},
									name: "QuotedTextAttributes",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1160, col: 64, offset: 41940},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
						&labeledExpr{
							pos:   position{line: 1160, col: 69, offset: 41945},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1160, col: 79, offset: 41955},
								name: "DoubleQuoteMonospaceTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1160, col: 113, offset: 41989},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElements",
			pos:  position{line: 1164, col: 1, offset: 42131},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1164, col: 37, offset: 42167},
				expr: &ruleRefExpr{
					pos:  position{line: 1164, col: 37, offset: 42167},
					name: "DoubleQuoteMonospaceTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElement",
			pos:  position{line: 1166, col: 1, offset: 42234},
			expr: &actionExpr{
				pos: position{line: 1166, col: 36, offset: 42269},
				run: (*parser).callonDoubleQuoteMonospaceTextElement1,
				expr: &seqExpr{
					pos: position{line: 1166, col: 36, offset: 42269},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1166, col: 36, offset: 42269},
							expr: &litMatcher{
								pos:        position{line: 1166, col: 38, offset: 42271},
								val:        "``",
								ignoreCase: false,
								want:       "\"``\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1166, col: 44, offset: 42277},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1166, col: 53, offset: 42286},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1166, col: 53, offset: 42286},
										name: "Word",
									},
									&ruleRefExpr{
										pos:  position{line: 1167, col: 11, offset: 42301},
										name: "Space",
									},
									&seqExpr{
										pos: position{line: 1168, col: 11, offset: 42350},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1168, col: 11, offset: 42350},
												name: "Newline",
											},
											&notExpr{
												pos: position{line: 1168, col: 19, offset: 42358},
												expr: &ruleRefExpr{
													pos:  position{line: 1168, col: 20, offset: 42359},
													name: "Newline",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1169, col: 11, offset: 42377},
										name: "QuotedString",
									},
									&actionExpr{
										pos: position{line: 1170, col: 11, offset: 42400},
										run: (*parser).callonDoubleQuoteMonospaceTextElement14,
										expr: &ruleRefExpr{
											pos:  position{line: 1170, col: 11, offset: 42400},
											name: "Apostrophe",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1174, col: 11, offset: 42584},
										name: "SingleQuoteMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1175, col: 11, offset: 42619},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1176, col: 11, offset: 42638},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1177, col: 11, offset: 42659},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1178, col: 11, offset: 42680},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1179, col: 11, offset: 42704},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1180, col: 11, offset: 42730},
										name: "ElementPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1181, col: 11, offset: 42759},
										name: "DoubleQuoteMonospaceTextFallbackCharacter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1185, col: 1, offset: 42831},
			expr: &choiceExpr{
				pos: position{line: 1186, col: 5, offset: 42880},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1186, col: 5, offset: 42880},
						val:        "[^\\r\\n`]",
						chars:      []rune{'\r', '\n', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1187, col: 7, offset: 42982},
						run: (*parser).callonDoubleQuoteMonospaceTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1187, col: 7, offset: 42982},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1187, col: 7, offset: 42982},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1187, col: 12, offset: 42987},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceText",
			pos:  position{line: 1191, col: 1, offset: 43155},
			expr: &choiceExpr{
				pos: position{line: 1191, col: 29, offset: 43183},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1191, col: 29, offset: 43183},
						run: (*parser).callonSingleQuoteMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1191, col: 29, offset: 43183},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1191, col: 29, offset: 43183},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1191, col: 40, offset: 43194},
										expr: &ruleRefExpr{
											pos:  position{line: 1191, col: 41, offset: 43195},
											name: "QuotedTextAttributes",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1191, col: 65, offset: 43219},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1191, col: 65, offset: 43219},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1191, col: 69, offset: 43223},
											expr: &litMatcher{
												pos:        position{line: 1191, col: 70, offset: 43224},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1191, col: 75, offset: 43229},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1191, col: 85, offset: 43239},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1191, col: 119, offset: 43273},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1193, col: 5, offset: 43471},
						run: (*parser).callonSingleQuoteMonospaceText14,
						expr: &seqExpr{
							pos: position{line: 1193, col: 5, offset: 43471},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1193, col: 5, offset: 43471},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1193, col: 16, offset: 43482},
										expr: &ruleRefExpr{
											pos:  position{line: 1193, col: 17, offset: 43483},
											name: "QuotedTextAttributes",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1193, col: 40, offset: 43506},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1193, col: 44, offset: 43510},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1193, col: 54, offset: 43520},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1193, col: 54, offset: 43520},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1193, col: 58, offset: 43524},
												name: "SingleQuoteMonospaceTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1193, col: 92, offset: 43558},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElements",
			pos:  position{line: 1197, col: 1, offset: 43777},
			expr: &seqExpr{
				pos: position{line: 1197, col: 37, offset: 43813},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1197, col: 37, offset: 43813},
						expr: &ruleRefExpr{
							pos:  position{line: 1197, col: 38, offset: 43814},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1197, col: 44, offset: 43820},
						expr: &ruleRefExpr{
							pos:  position{line: 1197, col: 44, offset: 43820},
							name: "SingleQuoteMonospaceTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElement",
			pos:  position{line: 1199, col: 1, offset: 43854},
			expr: &choiceExpr{
				pos: position{line: 1199, col: 37, offset: 43890},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1199, col: 37, offset: 43890},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1200, col: 11, offset: 43905},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1200, col: 11, offset: 43905},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1200, col: 19, offset: 43913},
								expr: &ruleRefExpr{
									pos:  position{line: 1200, col: 20, offset: 43914},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1201, col: 11, offset: 43932},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1202, col: 11, offset: 43967},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1203, col: 11, offset: 43990},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1203, col: 11, offset: 43990},
								expr: &ruleRefExpr{
									pos:  position{line: 1203, col: 11, offset: 43990},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1203, col: 18, offset: 43997},
								expr: &seqExpr{
									pos: position{line: 1203, col: 19, offset: 43998},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1203, col: 19, offset: 43998},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1203, col: 23, offset: 44002},
											expr: &litMatcher{
												pos:        position{line: 1203, col: 24, offset: 44003},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1204, col: 11, offset: 44131},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1205, col: 11, offset: 44150},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1206, col: 11, offset: 44171},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1207, col: 11, offset: 44192},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1208, col: 11, offset: 44216},
						name: "SuperscriptText",
					},
					&actionExpr{
						pos: position{line: 1209, col: 11, offset: 44242},
						run: (*parser).callonSingleQuoteMonospaceTextElement22,
						expr: &ruleRefExpr{
							pos:  position{line: 1209, col: 11, offset: 44242},
							name: "Apostrophe",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1213, col: 11, offset: 44383},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1214, col: 11, offset: 44412},
						name: "SingleQuoteMonospaceTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1216, col: 1, offset: 44455},
			expr: &choiceExpr{
				pos: position{line: 1217, col: 5, offset: 44504},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1217, col: 5, offset: 44504},
						val:        "[^\\r\\n`]",
						chars:      []rune{'\r', '\n', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1218, col: 7, offset: 44606},
						run: (*parser).callonSingleQuoteMonospaceTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1218, col: 7, offset: 44606},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1218, col: 7, offset: 44606},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1218, col: 11, offset: 44610},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMonospaceText",
			pos:  position{line: 1222, col: 1, offset: 44779},
			expr: &choiceExpr{
				pos: position{line: 1223, col: 5, offset: 44808},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1223, col: 5, offset: 44808},
						run: (*parser).callonEscapedMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1223, col: 5, offset: 44808},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1223, col: 5, offset: 44808},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1223, col: 18, offset: 44821},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1223, col: 40, offset: 44843},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1223, col: 45, offset: 44848},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1223, col: 55, offset: 44858},
										name: "DoubleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1223, col: 89, offset: 44892},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1225, col: 9, offset: 45049},
						run: (*parser).callonEscapedMonospaceText10,
						expr: &seqExpr{
							pos: position{line: 1225, col: 9, offset: 45049},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1225, col: 9, offset: 45049},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1225, col: 22, offset: 45062},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1225, col: 44, offset: 45084},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1225, col: 49, offset: 45089},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1225, col: 59, offset: 45099},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1225, col: 93, offset: 45133},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1228, col: 9, offset: 45333},
						run: (*parser).callonEscapedMonospaceText18,
						expr: &seqExpr{
							pos: position{line: 1228, col: 9, offset: 45333},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1228, col: 9, offset: 45333},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1228, col: 22, offset: 45346},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1228, col: 44, offset: 45368},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1228, col: 48, offset: 45372},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1228, col: 58, offset: 45382},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1228, col: 92, offset: 45416},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 1236, col: 1, offset: 45741},
			expr: &choiceExpr{
				pos: position{line: 1236, col: 17, offset: 45757},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1236, col: 17, offset: 45757},
						name: "SingleQuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1236, col: 38, offset: 45778},
						name: "DoubleQuotedString",
					},
				},
			},
		},
		{
			name: "SingleQuotedString",
			pos:  position{line: 1238, col: 1, offset: 45798},
			expr: &actionExpr{
				pos: position{line: 1238, col: 23, offset: 45820},
				run: (*parser).callonSingleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 1238, col: 23, offset: 45820},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1238, col: 23, offset: 45820},
							name: "SingleQuoteStringStart",
						},
						&labeledExpr{
							pos:   position{line: 1238, col: 46, offset: 45843},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1238, col: 55, offset: 45852},
								name: "SingleQuotedStringElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1238, col: 82, offset: 45879},
							name: "SingleQuoteStringEnd",
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringElements",
			pos:  position{line: 1242, col: 1, offset: 45983},
			expr: &actionExpr{
				pos: position{line: 1242, col: 31, offset: 46013},
				run: (*parser).callonSingleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 1242, col: 31, offset: 46013},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1242, col: 41, offset: 46023},
						expr: &ruleRefExpr{
							pos:  position{line: 1242, col: 41, offset: 46023},
							name: "SingleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteStringStart",
			pos:  position{line: 1246, col: 1, offset: 46101},
			expr: &seqExpr{
				pos: position{line: 1246, col: 27, offset: 46127},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1246, col: 27, offset: 46127},
						val:        "'`",
						ignoreCase: false,
						want:       "\"'`\"",
					},
					&notExpr{
						pos: position{line: 1246, col: 32, offset: 46132},
						expr: &charClassMatcher{
							pos:        position{line: 1246, col: 33, offset: 46133},
							val:        "[ \\t\\r\\n]",
							chars:      []rune{' ', '\t', '\r', '\n'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteStringEnd",
			pos:  position{line: 1248, col: 1, offset: 46144},
			expr: &litMatcher{
				pos:        position{line: 1248, col: 25, offset: 46168},
				val:        "`'",
				ignoreCase: false,
				want:       "\"`'\"",
			},
		},
		{
			name: "SingleQuotedStringElement",
			pos:  position{line: 1251, col: 1, offset: 46256},
			expr: &actionExpr{
				pos: position{line: 1251, col: 30, offset: 46285},
				run: (*parser).callonSingleQuotedStringElement1,
				expr: &labeledExpr{
					pos:   position{line: 1251, col: 30, offset: 46285},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1252, col: 9, offset: 46303},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 1252, col: 9, offset: 46303},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1252, col: 9, offset: 46303},
										name: "LineBreak",
									},
									&notExpr{
										pos: position{line: 1252, col: 19, offset: 46313},
										expr: &ruleRefExpr{
											pos:  position{line: 1252, col: 20, offset: 46314},
											name: "SingleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 1253, col: 11, offset: 46370},
								exprs: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 1253, col: 11, offset: 46370},
										expr: &ruleRefExpr{
											pos:  position{line: 1253, col: 11, offset: 46370},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 1253, col: 18, offset: 46377},
										expr: &ruleRefExpr{
											pos:  position{line: 1253, col: 19, offset: 46378},
											name: "SingleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 1254, col: 11, offset: 46409},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1254, col: 11, offset: 46409},
										expr: &litMatcher{
											pos:        position{line: 1254, col: 12, offset: 46410},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1254, col: 16, offset: 46414},
										name: "Symbol",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1255, col: 11, offset: 46462},
								name: "BoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 1256, col: 11, offset: 46481},
								name: "ItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 1257, col: 11, offset: 46502},
								name: "MarkedText",
							},
							&ruleRefExpr{
								pos:  position{line: 1258, col: 11, offset: 46523},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1259, col: 11, offset: 46547},
								name: "SuperscriptText",
							},
							&seqExpr{
								pos: position{line: 1260, col: 11, offset: 46573},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1260, col: 11, offset: 46573},
										expr: &litMatcher{
											pos:        position{line: 1260, col: 12, offset: 46574},
											val:        "`'",
											ignoreCase: false,
											want:       "\"`'\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1260, col: 17, offset: 46579},
										name: "MonospaceText",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1261, col: 11, offset: 46603},
								name: "DoubleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 1262, col: 11, offset: 46632},
								name: "SingleQuotedStringFallbackCharacter",
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringFallbackCharacter",
			pos:  position{line: 1266, col: 1, offset: 46698},
			expr: &choiceExpr{
				pos: position{line: 1266, col: 41, offset: 46738},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1266, col: 41, offset: 46738},
						val:        "[^\\r\\n\\t `]",
						chars:      []rune{'\r', '\n', '\t', ' ', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1266, col: 55, offset: 46752},
						run: (*parser).callonSingleQuotedStringFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1266, col: 55, offset: 46752},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1266, col: 55, offset: 46752},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&notExpr{
									pos: position{line: 1266, col: 59, offset: 46756},
									expr: &litMatcher{
										pos:        position{line: 1266, col: 60, offset: 46757},
										val:        "'",
										ignoreCase: false,
										want:       "\"'\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedString",
			pos:  position{line: 1270, col: 1, offset: 46816},
			expr: &actionExpr{
				pos: position{line: 1270, col: 23, offset: 46838},
				run: (*parser).callonDoubleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 1270, col: 23, offset: 46838},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1270, col: 23, offset: 46838},
							name: "DoubleQuoteStringStart",
						},
						&labeledExpr{
							pos:   position{line: 1270, col: 46, offset: 46861},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1270, col: 55, offset: 46870},
								name: "DoubleQuotedStringElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1270, col: 82, offset: 46897},
							name: "DoubleQuoteStringEnd",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElements",
			pos:  position{line: 1274, col: 1, offset: 47001},
			expr: &actionExpr{
				pos: position{line: 1274, col: 31, offset: 47031},
				run: (*parser).callonDoubleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 1274, col: 31, offset: 47031},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1274, col: 41, offset: 47041},
						expr: &ruleRefExpr{
							pos:  position{line: 1274, col: 41, offset: 47041},
							name: "DoubleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElement",
			pos:  position{line: 1279, col: 1, offset: 47201},
			expr: &actionExpr{
				pos: position{line: 1279, col: 30, offset: 47230},
				run: (*parser).callonDoubleQuotedStringElement1,
				expr: &labeledExpr{
					pos:   position{line: 1279, col: 30, offset: 47230},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1280, col: 9, offset: 47248},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 1280, col: 9, offset: 47248},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1280, col: 9, offset: 47248},
										name: "LineBreak",
									},
									&notExpr{
										pos: position{line: 1280, col: 19, offset: 47258},
										expr: &ruleRefExpr{
											pos:  position{line: 1280, col: 20, offset: 47259},
											name: "DoubleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 1281, col: 11, offset: 47315},
								exprs: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 1281, col: 11, offset: 47315},
										expr: &ruleRefExpr{
											pos:  position{line: 1281, col: 11, offset: 47315},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 1281, col: 18, offset: 47322},
										expr: &ruleRefExpr{
											pos:  position{line: 1281, col: 19, offset: 47323},
											name: "DoubleQuoteStringEnd",
										},
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1282, col: 11, offset: 47354},
								name: "BoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 1283, col: 11, offset: 47373},
								name: "ItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 1284, col: 11, offset: 47394},
								name: "MarkedText",
							},
							&ruleRefExpr{
								pos:  position{line: 1285, col: 11, offset: 47415},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1286, col: 11, offset: 47439},
								name: "SuperscriptText",
							},
							&seqExpr{
								pos: position{line: 1287, col: 11, offset: 47465},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1287, col: 11, offset: 47465},
										expr: &litMatcher{
											pos:        position{line: 1287, col: 12, offset: 47466},
											val:        "`\"",
											ignoreCase: false,
											want:       "\"`\\\"\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1287, col: 18, offset: 47472},
										name: "MonospaceText",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1288, col: 10, offset: 47495},
								name: "SingleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 1289, col: 11, offset: 47524},
								name: "DoubleQuotedStringFallbackCharacter",
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteStringStart",
			pos:  position{line: 1293, col: 1, offset: 47598},
			expr: &seqExpr{
				pos: position{line: 1293, col: 27, offset: 47624},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1293, col: 27, offset: 47624},
						val:        "\"`",
						ignoreCase: false,
						want:       "\"\\\"`\"",
					},
					&notExpr{
						pos: position{line: 1293, col: 33, offset: 47630},
						expr: &charClassMatcher{
							pos:        position{line: 1293, col: 34, offset: 47631},
							val:        "[ \\t\\r\\n]",
							chars:      []rune{' ', '\t', '\r', '\n'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteStringEnd",
			pos:  position{line: 1295, col: 1, offset: 47642},
			expr: &litMatcher{
				pos:        position{line: 1295, col: 25, offset: 47666},
				val:        "`\"",
				ignoreCase: false,
				want:       "\"`\\\"\"",
			},
		},
		{
			name: "DoubleQuotedStringFallbackCharacter",
			pos:  position{line: 1297, col: 1, offset: 47673},
			expr: &actionExpr{
				pos: position{line: 1297, col: 41, offset: 47713},
				run: (*parser).callonDoubleQuotedStringFallbackCharacter1,
				expr: &choiceExpr{
					pos: position{line: 1297, col: 42, offset: 47714},
					alternatives: []interface{}{
						&charClassMatcher{
							pos:        position{line: 1297, col: 42, offset: 47714},
							val:        "[^\\r\\n\\t `]",
							chars:      []rune{'\r', '\n', '\t', ' ', '`'},
							ignoreCase: false,
							inverted:   true,
						},
						&seqExpr{
							pos: position{line: 1297, col: 56, offset: 47728},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1297, col: 56, offset: 47728},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&notExpr{
									pos: position{line: 1297, col: 60, offset: 47732},
									expr: &litMatcher{
										pos:        position{line: 1297, col: 61, offset: 47733},
										val:        "\"",
										ignoreCase: false,
										want:       "\"\\\"\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkedText",
			pos:  position{line: 1306, col: 1, offset: 47853},
			expr: &choiceExpr{
				pos: position{line: 1306, col: 15, offset: 47867},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1306, col: 15, offset: 47867},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1306, col: 39, offset: 47891},
						name: "SingleQuoteMarkedText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedText",
			pos:  position{line: 1308, col: 1, offset: 47914},
			expr: &actionExpr{
				pos: position{line: 1308, col: 26, offset: 47939},
				run: (*parser).callonDoubleQuoteMarkedText1,
				expr: &seqExpr{
					pos: position{line: 1308, col: 26, offset: 47939},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1308, col: 26, offset: 47939},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1308, col: 37, offset: 47950},
								expr: &ruleRefExpr{
									pos:  position{line: 1308, col: 38, offset: 47951},
									name: "QuotedTextAttributes",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1308, col: 61, offset: 47974},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
						&labeledExpr{
							pos:   position{line: 1308, col: 66, offset: 47979},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1308, col: 76, offset: 47989},
								name: "DoubleQuoteMarkedTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1308, col: 107, offset: 48020},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElements",
			pos:  position{line: 1312, col: 1, offset: 48159},
			expr: &seqExpr{
				pos: position{line: 1312, col: 34, offset: 48192},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1312, col: 34, offset: 48192},
						name: "DoubleQuoteMarkedTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1312, col: 63, offset: 48221},
						expr: &seqExpr{
							pos: position{line: 1312, col: 64, offset: 48222},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1312, col: 64, offset: 48222},
									expr: &litMatcher{
										pos:        position{line: 1312, col: 66, offset: 48224},
										val:        "##",
										ignoreCase: false,
										want:       "\"##\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1312, col: 73, offset: 48231},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1312, col: 73, offset: 48231},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1312, col: 81, offset: 48239},
											name: "DoubleQuoteMarkedTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElement",
			pos:  position{line: 1314, col: 1, offset: 48306},
			expr: &choiceExpr{
				pos: position{line: 1314, col: 33, offset: 48338},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1314, col: 33, offset: 48338},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 1315, col: 11, offset: 48353},
						name: "SingleQuoteMarkedText",
					},
					&seqExpr{
						pos: position{line: 1316, col: 11, offset: 48385},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1316, col: 11, offset: 48385},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1316, col: 19, offset: 48393},
								expr: &ruleRefExpr{
									pos:  position{line: 1316, col: 20, offset: 48394},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1317, col: 11, offset: 48412},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1318, col: 11, offset: 48435},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1319, col: 11, offset: 48454},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1320, col: 11, offset: 48475},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1321, col: 11, offset: 48499},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1322, col: 11, offset: 48523},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1323, col: 11, offset: 48549},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1324, col: 11, offset: 48578},
						name: "DoubleQuoteMarkedTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextFallbackCharacter",
			pos:  position{line: 1326, col: 1, offset: 48618},
			expr: &choiceExpr{
				pos: position{line: 1327, col: 5, offset: 48664},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1327, col: 5, offset: 48664},
						val:        "[^\\r\\n#]",
						chars:      []rune{'\r', '\n', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1328, col: 7, offset: 48763},
						run: (*parser).callonDoubleQuoteMarkedTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1328, col: 7, offset: 48763},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1328, col: 7, offset: 48763},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1328, col: 12, offset: 48768},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedText",
			pos:  position{line: 1332, col: 1, offset: 48933},
			expr: &choiceExpr{
				pos: position{line: 1332, col: 26, offset: 48958},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1332, col: 26, offset: 48958},
						run: (*parser).callonSingleQuoteMarkedText2,
						expr: &seqExpr{
							pos: position{line: 1332, col: 26, offset: 48958},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1332, col: 26, offset: 48958},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1332, col: 37, offset: 48969},
										expr: &ruleRefExpr{
											pos:  position{line: 1332, col: 38, offset: 48970},
											name: "QuotedTextAttributes",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1332, col: 62, offset: 48994},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1332, col: 62, offset: 48994},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
										&notExpr{
											pos: position{line: 1332, col: 66, offset: 48998},
											expr: &litMatcher{
												pos:        position{line: 1332, col: 67, offset: 48999},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1332, col: 72, offset: 49004},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1332, col: 82, offset: 49014},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1332, col: 113, offset: 49045},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1334, col: 5, offset: 49240},
						run: (*parser).callonSingleQuoteMarkedText14,
						expr: &seqExpr{
							pos: position{line: 1334, col: 5, offset: 49240},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1334, col: 5, offset: 49240},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1334, col: 16, offset: 49251},
										expr: &ruleRefExpr{
											pos:  position{line: 1334, col: 17, offset: 49252},
											name: "QuotedTextAttributes",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1334, col: 40, offset: 49275},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1334, col: 44, offset: 49279},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1334, col: 54, offset: 49289},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1334, col: 54, offset: 49289},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1334, col: 58, offset: 49293},
												name: "SingleQuoteMarkedTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1334, col: 89, offset: 49324},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElements",
			pos:  position{line: 1338, col: 1, offset: 49538},
			expr: &seqExpr{
				pos: position{line: 1338, col: 34, offset: 49571},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1338, col: 34, offset: 49571},
						expr: &ruleRefExpr{
							pos:  position{line: 1338, col: 35, offset: 49572},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1338, col: 41, offset: 49578},
						expr: &ruleRefExpr{
							pos:  position{line: 1338, col: 41, offset: 49578},
							name: "SingleQuoteMarkedTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElement",
			pos:  position{line: 1340, col: 1, offset: 49609},
			expr: &choiceExpr{
				pos: position{line: 1340, col: 33, offset: 49641},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1340, col: 33, offset: 49641},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 1341, col: 11, offset: 49656},
						name: "DoubleQuoteMarkedText",
					},
					&seqExpr{
						pos: position{line: 1342, col: 11, offset: 49688},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1342, col: 11, offset: 49688},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1342, col: 19, offset: 49696},
								expr: &ruleRefExpr{
									pos:  position{line: 1342, col: 20, offset: 49697},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1343, col: 11, offset: 49715},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1344, col: 11, offset: 49738},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1344, col: 11, offset: 49738},
								expr: &ruleRefExpr{
									pos:  position{line: 1344, col: 11, offset: 49738},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1344, col: 18, offset: 49745},
								expr: &seqExpr{
									pos: position{line: 1344, col: 19, offset: 49746},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1344, col: 19, offset: 49746},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
										&notExpr{
											pos: position{line: 1344, col: 23, offset: 49750},
											expr: &litMatcher{
												pos:        position{line: 1344, col: 24, offset: 49751},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1345, col: 11, offset: 49767},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1346, col: 11, offset: 49786},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1347, col: 11, offset: 49807},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1348, col: 11, offset: 49831},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1349, col: 11, offset: 49855},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1350, col: 11, offset: 49881},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1351, col: 11, offset: 49910},
						name: "SingleQuoteMarkedTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextFallbackCharacter",
			pos:  position{line: 1353, col: 1, offset: 49950},
			expr: &choiceExpr{
				pos: position{line: 1354, col: 5, offset: 49996},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1354, col: 5, offset: 49996},
						val:        "[^\\r\\n#]",
						chars:      []rune{'\r', '\n', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1355, col: 7, offset: 50093},
						run: (*parser).callonSingleQuoteMarkedTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1355, col: 7, offset: 50093},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1355, col: 7, offset: 50093},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1355, col: 11, offset: 50097},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMarkedText",
			pos:  position{line: 1359, col: 1, offset: 50260},
			expr: &choiceExpr{
				pos: position{line: 1360, col: 5, offset: 50285},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1360, col: 5, offset: 50285},
						run: (*parser).callonEscapedMarkedText2,
						expr: &seqExpr{
							pos: position{line: 1360, col: 5, offset: 50285},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1360, col: 5, offset: 50285},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1360, col: 18, offset: 50298},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1360, col: 40, offset: 50320},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 1360, col: 45, offset: 50325},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1360, col: 55, offset: 50335},
										name: "DoubleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1360, col: 86, offset: 50366},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1362, col: 9, offset: 50523},
						run: (*parser).callonEscapedMarkedText10,
						expr: &seqExpr{
							pos: position{line: 1362, col: 9, offset: 50523},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1362, col: 9, offset: 50523},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1362, col: 22, offset: 50536},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1362, col: 44, offset: 50558},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 1362, col: 49, offset: 50563},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1362, col: 59, offset: 50573},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1362, col: 90, offset: 50604},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1365, col: 9, offset: 50804},
						run: (*parser).callonEscapedMarkedText18,
						expr: &seqExpr{
							pos: position{line: 1365, col: 9, offset: 50804},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1365, col: 9, offset: 50804},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1365, col: 22, offset: 50817},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1365, col: 44, offset: 50839},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1365, col: 48, offset: 50843},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1365, col: 58, offset: 50853},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1365, col: 89, offset: 50884},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptText",
			pos:  position{line: 1370, col: 1, offset: 51034},
			expr: &actionExpr{
				pos: position{line: 1370, col: 18, offset: 51051},
				run: (*parser).callonSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1370, col: 18, offset: 51051},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1370, col: 18, offset: 51051},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1370, col: 29, offset: 51062},
								expr: &ruleRefExpr{
									pos:  position{line: 1370, col: 30, offset: 51063},
									name: "QuotedTextAttributes",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1370, col: 53, offset: 51086},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1370, col: 57, offset: 51090},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1370, col: 66, offset: 51099},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1370, col: 88, offset: 51121},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SubscriptTextElement",
			pos:  position{line: 1374, col: 1, offset: 51222},
			expr: &choiceExpr{
				pos: position{line: 1374, col: 25, offset: 51246},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1374, col: 25, offset: 51246},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1374, col: 38, offset: 51259},
						name: "NonSubscriptText",
					},
				},
			},
		},
		{
			name: "NonSubscriptText",
			pos:  position{line: 1376, col: 1, offset: 51278},
			expr: &actionExpr{
				pos: position{line: 1376, col: 21, offset: 51298},
				run: (*parser).callonNonSubscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1376, col: 21, offset: 51298},
					expr: &charClassMatcher{
						pos:        position{line: 1376, col: 21, offset: 51298},
						val:        "[^\\r\\n ~]",
						chars:      []rune{'\r', '\n', ' ', '~'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSubscriptText",
			pos:  position{line: 1380, col: 1, offset: 51375},
			expr: &actionExpr{
				pos: position{line: 1380, col: 25, offset: 51399},
				run: (*parser).callonEscapedSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1380, col: 25, offset: 51399},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1380, col: 25, offset: 51399},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1380, col: 38, offset: 51412},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1380, col: 60, offset: 51434},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1380, col: 64, offset: 51438},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1380, col: 73, offset: 51447},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1380, col: 95, offset: 51469},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptText",
			pos:  position{line: 1384, col: 1, offset: 51598},
			expr: &actionExpr{
				pos: position{line: 1384, col: 20, offset: 51617},
				run: (*parser).callonSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1384, col: 20, offset: 51617},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1384, col: 20, offset: 51617},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1384, col: 31, offset: 51628},
								expr: &ruleRefExpr{
									pos:  position{line: 1384, col: 32, offset: 51629},
									name: "QuotedTextAttributes",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1384, col: 55, offset: 51652},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1384, col: 59, offset: 51656},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1384, col: 68, offset: 51665},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1384, col: 92, offset: 51689},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptTextElement",
			pos:  position{line: 1388, col: 1, offset: 51792},
			expr: &choiceExpr{
				pos: position{line: 1388, col: 27, offset: 51818},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1388, col: 27, offset: 51818},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1388, col: 40, offset: 51831},
						name: "NonSuperscriptText",
					},
				},
			},
		},
		{
			name: "NonSuperscriptText",
			pos:  position{line: 1390, col: 1, offset: 51852},
			expr: &actionExpr{
				pos: position{line: 1390, col: 23, offset: 51874},
				run: (*parser).callonNonSuperscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1390, col: 23, offset: 51874},
					expr: &charClassMatcher{
						pos:        position{line: 1390, col: 23, offset: 51874},
						val:        "[^\\r\\n ^]",
						chars:      []rune{'\r', '\n', ' ', '^'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSuperscriptText",
			pos:  position{line: 1394, col: 1, offset: 51951},
			expr: &actionExpr{
				pos: position{line: 1394, col: 27, offset: 51977},
				run: (*parser).callonEscapedSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1394, col: 27, offset: 51977},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1394, col: 27, offset: 51977},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1394, col: 40, offset: 51990},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1394, col: 62, offset: 52012},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1394, col: 66, offset: 52016},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1394, col: 75, offset: 52025},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1394, col: 99, offset: 52049},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "InlinePassthrough",
			pos:  position{line: 1401, col: 1, offset: 52291},
			expr: &choiceExpr{
				pos: position{line: 1401, col: 22, offset: 52312},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1401, col: 22, offset: 52312},
						name: "TriplePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1401, col: 46, offset: 52336},
						name: "SinglePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1401, col: 70, offset: 52360},
						name: "PassthroughMacro",
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughPrefix",
			pos:  position{line: 1403, col: 1, offset: 52378},
			expr: &litMatcher{
				pos:        position{line: 1403, col: 32, offset: 52409},
				val:        "+",
				ignoreCase: false,
				want:       "\"+\"",
			},
		},
		{
			name: "SinglePlusPassthrough",
			pos:  position{line: 1405, col: 1, offset: 52414},
			expr: &actionExpr{
				pos: position{line: 1405, col: 26, offset: 52439},
				run: (*parser).callonSinglePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1405, col: 26, offset: 52439},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1405, col: 26, offset: 52439},
							name: "SinglePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1405, col: 54, offset: 52467},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1405, col: 63, offset: 52476},
								name: "SinglePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1405, col: 93, offset: 52506},
							name: "SinglePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1405, col: 121, offset: 52534},
							expr: &ruleRefExpr{
								pos:  position{line: 1405, col: 122, offset: 52535},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughContent",
			pos:  position{line: 1409, col: 1, offset: 52640},
			expr: &choiceExpr{
				pos: position{line: 1409, col: 33, offset: 52672},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1409, col: 34, offset: 52673},
						run: (*parser).callonSinglePlusPassthroughContent2,
						expr: &seqExpr{
							pos: position{line: 1409, col: 34, offset: 52673},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1409, col: 35, offset: 52674},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1409, col: 35, offset: 52674},
											expr: &ruleRefExpr{
												pos:  position{line: 1409, col: 36, offset: 52675},
												name: "SinglePlusPassthroughPrefix",
											},
										},
										&notExpr{
											pos: position{line: 1409, col: 64, offset: 52703},
											expr: &ruleRefExpr{
												pos:  position{line: 1409, col: 65, offset: 52704},
												name: "Space",
											},
										},
										&notExpr{
											pos: position{line: 1409, col: 71, offset: 52710},
											expr: &ruleRefExpr{
												pos:  position{line: 1409, col: 72, offset: 52711},
												name: "Newline",
											},
										},
										&anyMatcher{
											line: 1409, col: 80, offset: 52719,
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1409, col: 83, offset: 52722},
									expr: &seqExpr{
										pos: position{line: 1409, col: 84, offset: 52723},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1409, col: 84, offset: 52723},
												expr: &seqExpr{
													pos: position{line: 1409, col: 86, offset: 52725},
													exprs: []interface{}{
														&oneOrMoreExpr{
															pos: position{line: 1409, col: 86, offset: 52725},
															expr: &ruleRefExpr{
																pos:  position{line: 1409, col: 86, offset: 52725},
																name: "Space",
															},
														},
														&ruleRefExpr{
															pos:  position{line: 1409, col: 93, offset: 52732},
															name: "SinglePlusPassthroughPrefix",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 1409, col: 122, offset: 52761},
												expr: &ruleRefExpr{
													pos:  position{line: 1409, col: 123, offset: 52762},
													name: "SinglePlusPassthroughPrefix",
												},
											},
											&notExpr{
												pos: position{line: 1409, col: 151, offset: 52790},
												expr: &ruleRefExpr{
													pos:  position{line: 1409, col: 152, offset: 52791},
													name: "Newline",
												},
											},
											&anyMatcher{
												line: 1409, col: 160, offset: 52799,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1411, col: 7, offset: 52941},
						run: (*parser).callonSinglePlusPassthroughContent24,
						expr: &seqExpr{
							pos: position{line: 1411, col: 8, offset: 52942},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1411, col: 8, offset: 52942},
									expr: &ruleRefExpr{
										pos:  position{line: 1411, col: 9, offset: 52943},
										name: "Space",
									},
								},
								&notExpr{
									pos: position{line: 1411, col: 15, offset: 52949},
									expr: &ruleRefExpr{
										pos:  position{line: 1411, col: 16, offset: 52950},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 1411, col: 24, offset: 52958},
									expr: &ruleRefExpr{
										pos:  position{line: 1411, col: 25, offset: 52959},
										name: "SinglePlusPassthroughPrefix",
									},
								},
								&anyMatcher{
									line: 1411, col: 53, offset: 52987,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughPrefix",
			pos:  position{line: 1415, col: 1, offset: 53069},
			expr: &litMatcher{
				pos:        position{line: 1415, col: 32, offset: 53100},
				val:        "+++",
				ignoreCase: false,
				want:       "\"+++\"",
			},
		},
		{
			name: "TriplePlusPassthrough",
			pos:  position{line: 1417, col: 1, offset: 53107},
			expr: &actionExpr{
				pos: position{line: 1417, col: 26, offset: 53132},
				run: (*parser).callonTriplePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1417, col: 26, offset: 53132},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1417, col: 26, offset: 53132},
							name: "TriplePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1417, col: 54, offset: 53160},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1417, col: 63, offset: 53169},
								name: "TriplePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1417, col: 93, offset: 53199},
							name: "TriplePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1417, col: 121, offset: 53227},
							expr: &ruleRefExpr{
								pos:  position{line: 1417, col: 122, offset: 53228},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughContent",
			pos:  position{line: 1421, col: 1, offset: 53333},
			expr: &choiceExpr{
				pos: position{line: 1421, col: 33, offset: 53365},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1421, col: 34, offset: 53366},
						run: (*parser).callonTriplePlusPassthroughContent2,
						expr: &zeroOrMoreExpr{
							pos: position{line: 1421, col: 34, offset: 53366},
							expr: &seqExpr{
								pos: position{line: 1421, col: 35, offset: 53367},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1421, col: 35, offset: 53367},
										expr: &ruleRefExpr{
											pos:  position{line: 1421, col: 36, offset: 53368},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1421, col: 64, offset: 53396,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1423, col: 7, offset: 53561},
						run: (*parser).callonTriplePlusPassthroughContent8,
						expr: &zeroOrOneExpr{
							pos: position{line: 1423, col: 7, offset: 53561},
							expr: &seqExpr{
								pos: position{line: 1423, col: 8, offset: 53562},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1423, col: 8, offset: 53562},
										expr: &ruleRefExpr{
											pos:  position{line: 1423, col: 9, offset: 53563},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 1423, col: 15, offset: 53569},
										expr: &ruleRefExpr{
											pos:  position{line: 1423, col: 16, offset: 53570},
											name: "Newline",
										},
									},
									&notExpr{
										pos: position{line: 1423, col: 24, offset: 53578},
										expr: &ruleRefExpr{
											pos:  position{line: 1423, col: 25, offset: 53579},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1423, col: 53, offset: 53607,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacro",
			pos:  position{line: 1427, col: 1, offset: 53690},
			expr: &choiceExpr{
				pos: position{line: 1427, col: 21, offset: 53710},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1427, col: 21, offset: 53710},
						run: (*parser).callonPassthroughMacro2,
						expr: &seqExpr{
							pos: position{line: 1427, col: 21, offset: 53710},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1427, col: 21, offset: 53710},
									val:        "pass:[",
									ignoreCase: false,
									want:       "\"pass:[\"",
								},
								&labeledExpr{
									pos:   position{line: 1427, col: 30, offset: 53719},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1427, col: 38, offset: 53727},
										expr: &ruleRefExpr{
											pos:  position{line: 1427, col: 39, offset: 53728},
											name: "PassthroughMacroCharacter",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1427, col: 67, offset: 53756},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1429, col: 5, offset: 53852},
						run: (*parser).callonPassthroughMacro9,
						expr: &seqExpr{
							pos: position{line: 1429, col: 5, offset: 53852},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1429, col: 5, offset: 53852},
									val:        "pass:q[",
									ignoreCase: false,
									want:       "\"pass:q[\"",
								},
								&labeledExpr{
									pos:   position{line: 1429, col: 15, offset: 53862},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1429, col: 23, offset: 53870},
										expr: &choiceExpr{
											pos: position{line: 1429, col: 24, offset: 53871},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1429, col: 24, offset: 53871},
													name: "QuotedText",
												},
												&ruleRefExpr{
													pos:  position{line: 1429, col: 37, offset: 53884},
													name: "PassthroughMacroCharacter",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1429, col: 65, offset: 53912},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacroCharacter",
			pos:  position{line: 1433, col: 1, offset: 54008},
			expr: &actionExpr{
				pos: position{line: 1433, col: 30, offset: 54037},
				run: (*parser).callonPassthroughMacroCharacter1,
				expr: &charClassMatcher{
					pos:        position{line: 1433, col: 30, offset: 54037},
					val:        "[^\\]]",
					chars:      []rune{']'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "CrossReference",
			pos:  position{line: 1440, col: 1, offset: 54210},
			expr: &choiceExpr{
				pos: position{line: 1440, col: 19, offset: 54228},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1440, col: 19, offset: 54228},
						name: "InternalCrossReference",
					},
					&ruleRefExpr{
						pos:  position{line: 1440, col: 44, offset: 54253},
						name: "ExternalCrossReference",
					},
				},
			},
		},
		{
			name: "InternalCrossReference",
			pos:  position{line: 1442, col: 1, offset: 54278},
			expr: &choiceExpr{
				pos: position{line: 1442, col: 27, offset: 54304},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1442, col: 27, offset: 54304},
						run: (*parser).callonInternalCrossReference2,
						expr: &seqExpr{
							pos: position{line: 1442, col: 27, offset: 54304},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1442, col: 27, offset: 54304},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 1442, col: 32, offset: 54309},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1442, col: 36, offset: 54313},
										name: "Id",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1442, col: 40, offset: 54317},
									expr: &ruleRefExpr{
										pos:  position{line: 1442, col: 40, offset: 54317},
										name: "Space",
									},
								},
								&litMatcher{
									pos:        position{line: 1442, col: 47, offset: 54324},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&labeledExpr{
									pos:   position{line: 1442, col: 51, offset: 54328},
									label: "label",
									expr: &ruleRefExpr{
										pos:  position{line: 1442, col: 58, offset: 54335},
										name: "CrossReferenceLabel",
									},
								},
								&litMatcher{
									pos:        position{line: 1442, col: 79, offset: 54356},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1444, col: 5, offset: 54421},
						run: (*parser).callonInternalCrossReference13,
						expr: &seqExpr{
							pos: position{line: 1444, col: 5, offset: 54421},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1444, col: 5, offset: 54421},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 1444, col: 10, offset: 54426},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1444, col: 14, offset: 54430},
										name: "Id",
									},
								},
								&litMatcher{
									pos:        position{line: 1444, col: 18, offset: 54434},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalCrossReference",
			pos:  position{line: 1448, col: 1, offset: 54497},
			expr: &actionExpr{
				pos: position{line: 1448, col: 27, offset: 54523},
				run: (*parser).callonExternalCrossReference1,
				expr: &seqExpr{
					pos: position{line: 1448, col: 27, offset: 54523},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1448, col: 27, offset: 54523},
							val:        "xref:",
							ignoreCase: false,
							want:       "\"xref:\"",
						},
						&labeledExpr{
							pos:   position{line: 1448, col: 35, offset: 54531},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1448, col: 40, offset: 54536},
								name: "FileLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 1448, col: 54, offset: 54550},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1448, col: 72, offset: 54568},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReferenceLabel",
			pos:  position{line: 1452, col: 1, offset: 54691},
			expr: &ruleRefExpr{
				pos:  position{line: 1452, col: 24, offset: 54714},
				name: "ElementTitleContent",
			},
		},
		{
			name: "Link",
			pos:  position{line: 1457, col: 1, offset: 54836},
			expr: &choiceExpr{
				pos: position{line: 1457, col: 9, offset: 54844},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1457, col: 9, offset: 54844},
						name: "RelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1457, col: 24, offset: 54859},
						name: "ExternalLink",
					},
				},
			},
		},
		{
			name: "RelativeLink",
			pos:  position{line: 1460, col: 1, offset: 54940},
			expr: &actionExpr{
				pos: position{line: 1460, col: 17, offset: 54956},
				run: (*parser).callonRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1460, col: 17, offset: 54956},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1460, col: 17, offset: 54956},
							val:        "link:",
							ignoreCase: false,
							want:       "\"link:\"",
						},
						&labeledExpr{
							pos:   position{line: 1460, col: 25, offset: 54964},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1460, col: 30, offset: 54969},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1460, col: 40, offset: 54979},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1460, col: 58, offset: 54997},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalLink",
			pos:  position{line: 1464, col: 1, offset: 55108},
			expr: &actionExpr{
				pos: position{line: 1464, col: 17, offset: 55124},
				run: (*parser).callonExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1464, col: 17, offset: 55124},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1464, col: 17, offset: 55124},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1464, col: 22, offset: 55129},
								name: "LocationWithScheme",
							},
						},
						&labeledExpr{
							pos:   position{line: 1464, col: 42, offset: 55149},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1464, col: 59, offset: 55166},
								expr: &ruleRefExpr{
									pos:  position{line: 1464, col: 60, offset: 55167},
									name: "LinkAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LinkAttributes",
			pos:  position{line: 1468, col: 1, offset: 55260},
			expr: &actionExpr{
				pos: position{line: 1468, col: 19, offset: 55278},
				run: (*parser).callonLinkAttributes1,
				expr: &seqExpr{
					pos: position{line: 1468, col: 19, offset: 55278},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1468, col: 19, offset: 55278},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1468, col: 23, offset: 55282},
							label: "firstAttr",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1468, col: 33, offset: 55292},
								expr: &ruleRefExpr{
									pos:  position{line: 1468, col: 34, offset: 55293},
									name: "FirstLinkAttributeElement",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1469, col: 5, offset: 55325},
							expr: &ruleRefExpr{
								pos:  position{line: 1469, col: 5, offset: 55325},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1469, col: 12, offset: 55332},
							label: "otherAttrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1469, col: 23, offset: 55343},
								expr: &ruleRefExpr{
									pos:  position{line: 1469, col: 24, offset: 55344},
									name: "NamedAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1469, col: 41, offset: 55361},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FirstLinkAttributeElement",
			pos:  position{line: 1473, col: 1, offset: 55478},
			expr: &actionExpr{
				pos: position{line: 1473, col: 30, offset: 55507},
				run: (*parser).callonFirstLinkAttributeElement1,
				expr: &labeledExpr{
					pos:   position{line: 1473, col: 30, offset: 55507},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1475, col: 5, offset: 55558},
						alternatives: []interface{}{
							&actionExpr{
								pos: position{line: 1475, col: 6, offset: 55559},
								run: (*parser).callonFirstLinkAttributeElement4,
								expr: &seqExpr{
									pos: position{line: 1475, col: 6, offset: 55559},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1475, col: 6, offset: 55559},
											val:        "\"",
											ignoreCase: false,
											want:       "\"\\\"\"",
										},
										&labeledExpr{
											pos:   position{line: 1475, col: 11, offset: 55564},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 1475, col: 20, offset: 55573},
												expr: &choiceExpr{
													pos: position{line: 1475, col: 21, offset: 55574},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1475, col: 21, offset: 55574},
															name: "QuotedString",
														},
														&ruleRefExpr{
															pos:  position{line: 1475, col: 36, offset: 55589},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1475, col: 49, offset: 55602},
															name: "ElementPlaceHolder",
														},
														&ruleRefExpr{
															pos:  position{line: 1475, col: 70, offset: 55623},
															name: "QuotedAttributeChar",
														},
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 1475, col: 92, offset: 55645},
											val:        "\"",
											ignoreCase: false,
											want:       "\"\\\"\"",
										},
										&andExpr{
											pos: position{line: 1475, col: 97, offset: 55650},
											expr: &notExpr{
												pos: position{line: 1475, col: 99, offset: 55652},
												expr: &litMatcher{
													pos:        position{line: 1475, col: 100, offset: 55653},
													val:        "=",
													ignoreCase: false,
													want:       "\"=\"",
												},
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 1475, col: 105, offset: 55658},
											expr: &litMatcher{
												pos:        position{line: 1475, col: 105, offset: 55658},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
										},
									},
								},
							},
							&actionExpr{
								pos: position{line: 1479, col: 6, offset: 55785},
								run: (*parser).callonFirstLinkAttributeElement20,
								expr: &seqExpr{
									pos: position{line: 1479, col: 6, offset: 55785},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 1479, col: 6, offset: 55785},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 1479, col: 15, offset: 55794},
												expr: &choiceExpr{
													pos: position{line: 1479, col: 16, offset: 55795},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1479, col: 16, offset: 55795},
															name: "QuotedString",
														},
														&ruleRefExpr{
															pos:  position{line: 1479, col: 31, offset: 55810},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1479, col: 44, offset: 55823},
															name: "ElementPlaceHolder",
														},
														&ruleRefExpr{
															pos:  position{line: 1479, col: 65, offset: 55844},
															name: "UnquotedAttributeChar",
														},
													},
												},
											},
										},
										&andExpr{
											pos: position{line: 1479, col: 89, offset: 55868},
											expr: &notExpr{
												pos: position{line: 1479, col: 91, offset: 55870},
												expr: &litMatcher{
													pos:        position{line: 1479, col: 92, offset: 55871},
													val:        "=",
													ignoreCase: false,
													want:       "\"=\"",
												},
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 1479, col: 97, offset: 55876},
											expr: &litMatcher{
												pos:        position{line: 1479, col: 97, offset: 55876},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeChar",
			pos:  position{line: 1485, col: 1, offset: 55990},
			expr: &actionExpr{
				pos: position{line: 1485, col: 18, offset: 56007},
				run: (*parser).callonAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1485, col: 18, offset: 56007},
					val:        "[^\\r\\n\"=\\],]",
					chars:      []rune{'\r', '\n', '"', '=', ']', ','},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "QuotedAttributeChar",
			pos:  position{line: 1489, col: 1, offset: 56093},
			expr: &actionExpr{
				pos: position{line: 1489, col: 24, offset: 56116},
				run: (*parser).callonQuotedAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1489, col: 24, offset: 56116},
					val:        "[^\\r\\n\"=\\]]",
					chars:      []rune{'\r', '\n', '"', '=', ']'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "UnquotedAttributeChar",
			pos:  position{line: 1493, col: 1, offset: 56209},
			expr: &actionExpr{
				pos: position{line: 1493, col: 26, offset: 56234},
				run: (*parser).callonUnquotedAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1493, col: 26, offset: 56234},
					val:        "[^\\r\\n\"=\\],]",
					chars:      []rune{'\r', '\n', '"', '=', ']', ','},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "ImageBlock",
			pos:  position{line: 1500, col: 1, offset: 56422},
			expr: &actionExpr{
				pos: position{line: 1500, col: 15, offset: 56436},
				run: (*parser).callonImageBlock1,
				expr: &seqExpr{
					pos: position{line: 1500, col: 15, offset: 56436},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1500, col: 15, offset: 56436},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1500, col: 27, offset: 56448},
								name: "ImageBlockAttributes",
							},
						},
						&litMatcher{
							pos:        position{line: 1500, col: 49, offset: 56470},
							val:        "image::",
							ignoreCase: false,
							want:       "\"image::\"",
						},
						&labeledExpr{
							pos:   position{line: 1500, col: 59, offset: 56480},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1500, col: 65, offset: 56486},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1500, col: 75, offset: 56496},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1500, col: 93, offset: 56514},
								name: "InlineImageAttributes",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1500, col: 116, offset: 56537},
							expr: &ruleRefExpr{
								pos:  position{line: 1500, col: 116, offset: 56537},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1500, col: 123, offset: 56544},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ImageBlockAttributes",
			pos:  position{line: 1505, col: 1, offset: 56775},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1505, col: 25, offset: 56799},
				expr: &actionExpr{
					pos: position{line: 1505, col: 26, offset: 56800},
					run: (*parser).callonImageBlockAttributes2,
					expr: &seqExpr{
						pos: position{line: 1505, col: 26, offset: 56800},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1505, col: 26, offset: 56800},
								expr: &ruleRefExpr{
									pos:  position{line: 1505, col: 27, offset: 56801},
									name: "VerseAttributes",
								},
							},
							&labeledExpr{
								pos:   position{line: 1505, col: 43, offset: 56817},
								label: "attribute",
								expr: &choiceExpr{
									pos: position{line: 1505, col: 54, offset: 56828},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1505, col: 54, offset: 56828},
											name: "ElementShortHandAttributes",
										},
										&ruleRefExpr{
											pos:  position{line: 1505, col: 83, offset: 56857},
											name: "ElementTitle",
										},
										&ruleRefExpr{
											pos:  position{line: 1505, col: 98, offset: 56872},
											name: "ElementID",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageAttrList",
			pos:  position{line: 1507, col: 1, offset: 56913},
			expr: &actionExpr{
				pos: position{line: 1507, col: 18, offset: 56930},
				run: (*parser).callonImageAttrList1,
				expr: &seqExpr{
					pos: position{line: 1507, col: 18, offset: 56930},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1507, col: 18, offset: 56930},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1507, col: 22, offset: 56934},
							label: "alt",
							expr: &zeroOrOneExpr{
								pos: position{line: 1507, col: 26, offset: 56938},
								expr: &ruleRefExpr{
									pos:  position{line: 1507, col: 27, offset: 56939},
									name: "ImageAlt",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1507, col: 38, offset: 56950},
							label: "shortHands",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1507, col: 49, offset: 56961},
								expr: &ruleRefExpr{
									pos:  position{line: 1507, col: 50, offset: 56962},
									name: "ShortHandAttr",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1507, col: 66, offset: 56978},
							expr: &seqExpr{
								pos: position{line: 1507, col: 67, offset: 56979},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 1507, col: 67, offset: 56979},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 1507, col: 71, offset: 56983},
										expr: &ruleRefExpr{
											pos:  position{line: 1507, col: 71, offset: 56983},
											name: "Space",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1507, col: 80, offset: 56992},
							label: "width",
							expr: &zeroOrOneExpr{
								pos: position{line: 1507, col: 86, offset: 56998},
								expr: &ruleRefExpr{
									pos:  position{line: 1507, col: 87, offset: 56999},
									name: "ImageWidth",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1507, col: 100, offset: 57012},
							expr: &seqExpr{
								pos: position{line: 1507, col: 101, offset: 57013},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 1507, col: 101, offset: 57013},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 1507, col: 105, offset: 57017},
										expr: &ruleRefExpr{
											pos:  position{line: 1507, col: 105, offset: 57017},
											name: "Space",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1507, col: 114, offset: 57026},
							label: "height",
							expr: &zeroOrOneExpr{
								pos: position{line: 1507, col: 121, offset: 57033},
								expr: &ruleRefExpr{
									pos:  position{line: 1507, col: 122, offset: 57034},
									name: "ImageHeight",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1507, col: 136, offset: 57048},
							expr: &seqExpr{
								pos: position{line: 1507, col: 137, offset: 57049},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 1507, col: 137, offset: 57049},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 1507, col: 141, offset: 57053},
										expr: &ruleRefExpr{
											pos:  position{line: 1507, col: 141, offset: 57053},
											name: "Space",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1507, col: 150, offset: 57062},
							label: "others",
							expr: &ruleRefExpr{
								pos:  position{line: 1507, col: 158, offset: 57070},
								name: "NamedAttributes",
							},
						},
						&litMatcher{
							pos:        position{line: 1507, col: 175, offset: 57087},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1507, col: 179, offset: 57091},
							expr: &ruleRefExpr{
								pos:  position{line: 1507, col: 179, offset: 57091},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1507, col: 186, offset: 57098},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "InlineImage",
			pos:  position{line: 1511, col: 1, offset: 57170},
			expr: &actionExpr{
				pos: position{line: 1511, col: 16, offset: 57185},
				run: (*parser).callonInlineImage1,
				expr: &seqExpr{
					pos: position{line: 1511, col: 16, offset: 57185},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1511, col: 16, offset: 57185},
							val:        "image:",
							ignoreCase: false,
							want:       "\"image:\"",
						},
						&notExpr{
							pos: position{line: 1511, col: 25, offset: 57194},
							expr: &litMatcher{
								pos:        position{line: 1511, col: 26, offset: 57195},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1511, col: 30, offset: 57199},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1511, col: 36, offset: 57205},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1511, col: 46, offset: 57215},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1511, col: 64, offset: 57233},
								name: "InlineImageAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineImageAttributes",
			pos:  position{line: 1515, col: 1, offset: 57381},
			expr: &actionExpr{
				pos: position{line: 1515, col: 26, offset: 57406},
				run: (*parser).callonInlineImageAttributes1,
				expr: &seqExpr{
					pos: position{line: 1515, col: 26, offset: 57406},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1515, col: 26, offset: 57406},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1515, col: 30, offset: 57410},
							expr: &ruleRefExpr{
								pos:  position{line: 1515, col: 30, offset: 57410},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1515, col: 37, offset: 57417},
							label: "alt",
							expr: &zeroOrOneExpr{
								pos: position{line: 1515, col: 41, offset: 57421},
								expr: &ruleRefExpr{
									pos:  position{line: 1515, col: 42, offset: 57422},
									name: "ImageAlt",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1515, col: 53, offset: 57433},
							expr: &seqExpr{
								pos: position{line: 1515, col: 54, offset: 57434},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 1515, col: 54, offset: 57434},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 1515, col: 58, offset: 57438},
										expr: &ruleRefExpr{
											pos:  position{line: 1515, col: 58, offset: 57438},
											name: "Space",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1515, col: 67, offset: 57447},
							label: "width",
							expr: &zeroOrOneExpr{
								pos: position{line: 1515, col: 73, offset: 57453},
								expr: &ruleRefExpr{
									pos:  position{line: 1515, col: 74, offset: 57454},
									name: "ImageWidth",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1515, col: 87, offset: 57467},
							expr: &seqExpr{
								pos: position{line: 1515, col: 88, offset: 57468},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 1515, col: 88, offset: 57468},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 1515, col: 92, offset: 57472},
										expr: &ruleRefExpr{
											pos:  position{line: 1515, col: 92, offset: 57472},
											name: "Space",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1515, col: 101, offset: 57481},
							label: "height",
							expr: &zeroOrOneExpr{
								pos: position{line: 1515, col: 108, offset: 57488},
								expr: &ruleRefExpr{
									pos:  position{line: 1515, col: 109, offset: 57489},
									name: "ImageHeight",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1515, col: 123, offset: 57503},
							expr: &seqExpr{
								pos: position{line: 1515, col: 124, offset: 57504},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 1515, col: 124, offset: 57504},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 1515, col: 128, offset: 57508},
										expr: &ruleRefExpr{
											pos:  position{line: 1515, col: 128, offset: 57508},
											name: "Space",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1515, col: 137, offset: 57517},
							label: "others",
							expr: &ruleRefExpr{
								pos:  position{line: 1515, col: 145, offset: 57525},
								name: "NamedAttributes",
							},
						},
						&litMatcher{
							pos:        position{line: 1515, col: 162, offset: 57542},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "ImageAlt",
			pos:  position{line: 1519, col: 1, offset: 57614},
			expr: &actionExpr{
				pos: position{line: 1519, col: 13, offset: 57626},
				run: (*parser).callonImageAlt1,
				expr: &labeledExpr{
					pos:   position{line: 1519, col: 13, offset: 57626},
					label: "value",
					expr: &ruleRefExpr{
						pos:  position{line: 1519, col: 20, offset: 57633},
						name: "AttributeValue",
					},
				},
			},
		},
		{
			name: "ImageWidth",
			pos:  position{line: 1523, col: 1, offset: 57717},
			expr: &actionExpr{
				pos: position{line: 1523, col: 15, offset: 57731},
				run: (*parser).callonImageWidth1,
				expr: &labeledExpr{
					pos:   position{line: 1523, col: 15, offset: 57731},
					label: "value",
					expr: &ruleRefExpr{
						pos:  position{line: 1523, col: 22, offset: 57738},
						name: "AttributeValue",
					},
				},
			},
		},
		{
			name: "ImageHeight",
			pos:  position{line: 1527, col: 1, offset: 57819},
			expr: &actionExpr{
				pos: position{line: 1527, col: 16, offset: 57834},
				run: (*parser).callonImageHeight1,
				expr: &labeledExpr{
					pos:   position{line: 1527, col: 16, offset: 57834},
					label: "value",
					expr: &ruleRefExpr{
						pos:  position{line: 1527, col: 23, offset: 57841},
						name: "AttributeValue",
					},
				},
			},
		},
		{
			name: "InlineIcon",
			pos:  position{line: 1534, col: 1, offset: 58120},
			expr: &actionExpr{
				pos: position{line: 1534, col: 15, offset: 58134},
				run: (*parser).callonInlineIcon1,
				expr: &seqExpr{
					pos: position{line: 1534, col: 15, offset: 58134},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1534, col: 15, offset: 58134},
							val:        "icon:",
							ignoreCase: false,
							want:       "\"icon:\"",
						},
						&labeledExpr{
							pos:   position{line: 1534, col: 23, offset: 58142},
							label: "icon",
							expr: &actionExpr{
								pos: position{line: 1534, col: 29, offset: 58148},
								run: (*parser).callonInlineIcon5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1534, col: 29, offset: 58148},
									expr: &charClassMatcher{
										pos:        position{line: 1534, col: 29, offset: 58148},
										val:        "[\\pL0-9_-]",
										chars:      []rune{'_', '-'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1534, col: 73, offset: 58192},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1534, col: 85, offset: 58204},
								name: "IconAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "IconAttributes",
			pos:  position{line: 1538, col: 1, offset: 58296},
			expr: &actionExpr{
				pos: position{line: 1538, col: 19, offset: 58314},
				run: (*parser).callonIconAttributes1,
				expr: &seqExpr{
					pos: position{line: 1538, col: 19, offset: 58314},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1538, col: 19, offset: 58314},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1538, col: 23, offset: 58318},
							label: "size",
							expr: &zeroOrOneExpr{
								pos: position{line: 1538, col: 28, offset: 58323},
								expr: &ruleRefExpr{
									pos:  position{line: 1538, col: 29, offset: 58324},
									name: "IconSize",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1538, col: 40, offset: 58335},
							label: "others",
							expr: &ruleRefExpr{
								pos:  position{line: 1538, col: 48, offset: 58343},
								name: "NamedAttributes",
							},
						},
						&litMatcher{
							pos:        position{line: 1538, col: 65, offset: 58360},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "IconSize",
			pos:  position{line: 1543, col: 1, offset: 58453},
			expr: &actionExpr{
				pos: position{line: 1543, col: 13, offset: 58465},
				run: (*parser).callonIconSize1,
				expr: &seqExpr{
					pos: position{line: 1543, col: 13, offset: 58465},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1543, col: 13, offset: 58465},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 1543, col: 20, offset: 58472},
								name: "AttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1543, col: 36, offset: 58488},
							expr: &seqExpr{
								pos: position{line: 1543, col: 37, offset: 58489},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 1543, col: 37, offset: 58489},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 1543, col: 41, offset: 58493},
										expr: &ruleRefExpr{
											pos:  position{line: 1543, col: 41, offset: 58493},
											name: "Space",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineFootnote",
			pos:  position{line: 1550, col: 1, offset: 58767},
			expr: &choiceExpr{
				pos: position{line: 1550, col: 19, offset: 58785},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1550, col: 19, offset: 58785},
						run: (*parser).callonInlineFootnote2,
						expr: &seqExpr{
							pos: position{line: 1550, col: 19, offset: 58785},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1550, col: 19, offset: 58785},
									val:        "footnote:[",
									ignoreCase: false,
									want:       "\"footnote:[\"",
								},
								&labeledExpr{
									pos:   position{line: 1550, col: 32, offset: 58798},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1550, col: 41, offset: 58807},
										name: "FootnoteContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1550, col: 58, offset: 58824},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1552, col: 5, offset: 58892},
						run: (*parser).callonInlineFootnote8,
						expr: &seqExpr{
							pos: position{line: 1552, col: 5, offset: 58892},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1552, col: 5, offset: 58892},
									val:        "footnote:",
									ignoreCase: false,
									want:       "\"footnote:\"",
								},
								&labeledExpr{
									pos:   position{line: 1552, col: 17, offset: 58904},
									label: "ref",
									expr: &ruleRefExpr{
										pos:  position{line: 1552, col: 22, offset: 58909},
										name: "FootnoteRef",
									},
								},
								&litMatcher{
									pos:        position{line: 1552, col: 35, offset: 58922},
									val:        "[",
									ignoreCase: false,
									want:       "\"[\"",
								},
								&labeledExpr{
									pos:   position{line: 1552, col: 39, offset: 58926},
									label: "content",
									expr: &zeroOrOneExpr{
										pos: position{line: 1552, col: 47, offset: 58934},
										expr: &ruleRefExpr{
											pos:  position{line: 1552, col: 48, offset: 58935},
											name: "FootnoteContent",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1552, col: 66, offset: 58953},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FootnoteRef",
			pos:  position{line: 1556, col: 1, offset: 59014},
			expr: &ruleRefExpr{
				pos:  position{line: 1556, col: 16, offset: 59029},
				name: "Alphanums",
			},
		},
		{
			name: "FootnoteContent",
			pos:  position{line: 1558, col: 1, offset: 59040},
			expr: &actionExpr{
				pos: position{line: 1558, col: 20, offset: 59059},
				run: (*parser).callonFootnoteContent1,
				expr: &labeledExpr{
					pos:   position{line: 1558, col: 20, offset: 59059},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1558, col: 29, offset: 59068},
						expr: &seqExpr{
							pos: position{line: 1558, col: 30, offset: 59069},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1558, col: 30, offset: 59069},
									expr: &litMatcher{
										pos:        position{line: 1558, col: 31, offset: 59070},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1558, col: 35, offset: 59074},
									name: "InlineElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Callout",
			pos:  position{line: 1566, col: 1, offset: 59390},
			expr: &actionExpr{
				pos: position{line: 1566, col: 12, offset: 59401},
				run: (*parser).callonCallout1,
				expr: &seqExpr{
					pos: position{line: 1566, col: 12, offset: 59401},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1566, col: 12, offset: 59401},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 1566, col: 16, offset: 59405},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1566, col: 21, offset: 59410},
								run: (*parser).callonCallout5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1566, col: 21, offset: 59410},
									expr: &charClassMatcher{
										pos:        position{line: 1566, col: 21, offset: 59410},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1566, col: 69, offset: 59458},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1566, col: 73, offset: 59462},
							expr: &ruleRefExpr{
								pos:  position{line: 1566, col: 73, offset: 59462},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 1566, col: 80, offset: 59469},
							expr: &choiceExpr{
								pos: position{line: 1566, col: 82, offset: 59471},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1566, col: 82, offset: 59471},
										name: "EOL",
									},
									&ruleRefExpr{
										pos:  position{line: 1566, col: 88, offset: 59477},
										name: "Callout",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CalloutListItem",
			pos:  position{line: 1570, col: 1, offset: 59530},
			expr: &actionExpr{
				pos: position{line: 1570, col: 20, offset: 59549},
				run: (*parser).callonCalloutListItem1,
				expr: &seqExpr{
					pos: position{line: 1570, col: 20, offset: 59549},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1570, col: 20, offset: 59549},
							label: "ref",
							expr: &ruleRefExpr{
								pos:  position{line: 1570, col: 25, offset: 59554},
								name: "CalloutListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 1570, col: 48, offset: 59577},
							label: "description",
							expr: &oneOrMoreExpr{
								pos: position{line: 1570, col: 61, offset: 59590},
								expr: &ruleRefExpr{
									pos:  position{line: 1570, col: 61, offset: 59590},
									name: "ListParagraph",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CalloutListItemPrefix",
			pos:  position{line: 1574, col: 1, offset: 59687},
			expr: &actionExpr{
				pos: position{line: 1574, col: 26, offset: 59712},
				run: (*parser).callonCalloutListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 1574, col: 26, offset: 59712},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1574, col: 26, offset: 59712},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 1574, col: 30, offset: 59716},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1574, col: 35, offset: 59721},
								run: (*parser).callonCalloutListItemPrefix5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1574, col: 35, offset: 59721},
									expr: &charClassMatcher{
										pos:        position{line: 1574, col: 35, offset: 59721},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1574, col: 83, offset: 59769},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 1574, col: 87, offset: 59773},
							expr: &ruleRefExpr{
								pos:  position{line: 1574, col: 87, offset: 59773},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "ThematicBreak",
			pos:  position{line: 1583, col: 1, offset: 60020},
			expr: &actionExpr{
				pos: position{line: 1583, col: 18, offset: 60037},
				run: (*parser).callonThematicBreak1,
				expr: &seqExpr{
					pos: position{line: 1583, col: 18, offset: 60037},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1583, col: 19, offset: 60038},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1583, col: 19, offset: 60038},
									val:        "***",
									ignoreCase: false,
									want:       "\"***\"",
								},
								&litMatcher{
									pos:        position{line: 1583, col: 27, offset: 60046},
									val:        "* * *",
									ignoreCase: false,
									want:       "\"* * *\"",
								},
								&litMatcher{
									pos:        position{line: 1583, col: 37, offset: 60056},
									val:        "---",
									ignoreCase: false,
									want:       "\"---\"",
								},
								&litMatcher{
									pos:        position{line: 1583, col: 45, offset: 60064},
									val:        "- - -",
									ignoreCase: false,
									want:       "\"- - -\"",
								},
								&litMatcher{
									pos:        position{line: 1583, col: 55, offset: 60074},
									val:        "___",
									ignoreCase: false,
									want:       "\"___\"",
								},
								&litMatcher{
									pos:        position{line: 1583, col: 63, offset: 60082},
									val:        "_ _ _",
									ignoreCase: false,
									want:       "\"_ _ _\"",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1583, col: 72, offset: 60091},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DelimitedBlock",
			pos:  position{line: 1593, col: 1, offset: 60341},
			expr: &actionExpr{
				pos: position{line: 1593, col: 19, offset: 60359},
				run: (*parser).callonDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 1593, col: 19, offset: 60359},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1593, col: 19, offset: 60359},
							expr: &ruleRefExpr{
								pos:  position{line: 1593, col: 20, offset: 60360},
								name: "Alphanum",
							},
						},
						&labeledExpr{
							pos:   position{line: 1594, col: 5, offset: 60448},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 1594, col: 12, offset: 60455},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1594, col: 12, offset: 60455},
										name: "FencedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1595, col: 11, offset: 60478},
										name: "ListingBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1596, col: 11, offset: 60502},
										name: "ExampleBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1597, col: 11, offset: 60526},
										name: "VerseBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1598, col: 11, offset: 60547},
										name: "QuoteBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1599, col: 11, offset: 60568},
										name: "SidebarBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1600, col: 11, offset: 60591},
										name: "PassthroughBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1601, col: 11, offset: 60618},
										name: "CommentBlock",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockDelimiter",
			pos:  position{line: 1605, col: 1, offset: 60659},
			expr: &choiceExpr{
				pos: position{line: 1605, col: 19, offset: 60677},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1605, col: 19, offset: 60677},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1605, col: 19, offset: 60677},
								expr: &ruleRefExpr{
									pos:  position{line: 1605, col: 21, offset: 60679},
									name: "Alphanum",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1605, col: 31, offset: 60689},
								name: "LiteralBlockDelimiter",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1606, col: 19, offset: 60760},
						name: "FencedBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1607, col: 19, offset: 60800},
						name: "ListingBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1608, col: 19, offset: 60841},
						name: "ExampleBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1609, col: 19, offset: 60882},
						name: "CommentBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1610, col: 19, offset: 60923},
						name: "QuoteBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1611, col: 19, offset: 60961},
						name: "SidebarBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1612, col: 19, offset: 61001},
						name: "PassthroughBlockDelimiter",
					},
				},
			},
		},
		{
			name: "ExampleBlock",
			pos:  position{line: 1617, col: 1, offset: 61224},
			expr: &actionExpr{
				pos: position{line: 1617, col: 17, offset: 61240},
				run: (*parser).callonExampleBlock1,
				expr: &seqExpr{
					pos: position{line: 1617, col: 17, offset: 61240},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1617, col: 17, offset: 61240},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1617, col: 28, offset: 61251},
								expr: &ruleRefExpr{
									pos:  position{line: 1617, col: 29, offset: 61252},
									name: "ElementAttribute",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1617, col: 48, offset: 61271},
							name: "ExampleBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1617, col: 75, offset: 61298},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 1617, col: 83, offset: 61306},
								name: "ExampleBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1617, col: 107, offset: 61330},
							name: "ExampleBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockDelimiter",
			pos:  position{line: 1621, col: 1, offset: 61445},
			expr: &seqExpr{
				pos: position{line: 1621, col: 26, offset: 61470},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1621, col: 26, offset: 61470},
						val:        "====",
						ignoreCase: false,
						want:       "\"====\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1621, col: 33, offset: 61477},
						expr: &ruleRefExpr{
							pos:  position{line: 1621, col: 33, offset: 61477},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1621, col: 40, offset: 61484},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ExampleBlockStartDelimiter",
			pos:  position{line: 1623, col: 1, offset: 61489},
			expr: &seqExpr{
				pos: position{line: 1623, col: 31, offset: 61519},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1623, col: 31, offset: 61519},
						val:        "====",
						ignoreCase: false,
						want:       "\"====\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1623, col: 38, offset: 61526},
						expr: &ruleRefExpr{
							pos:  position{line: 1623, col: 38, offset: 61526},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1623, col: 45, offset: 61533},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ExampleBlockEndDelimiter",
			pos:  position{line: 1625, col: 1, offset: 61538},
			expr: &choiceExpr{
				pos: position{line: 1625, col: 29, offset: 61566},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1625, col: 30, offset: 61567},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1625, col: 30, offset: 61567},
								val:        "====",
								ignoreCase: false,
								want:       "\"====\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1625, col: 37, offset: 61574},
								expr: &ruleRefExpr{
									pos:  position{line: 1625, col: 37, offset: 61574},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1625, col: 44, offset: 61581},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1625, col: 51, offset: 61588},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "ExampleBlockRawContent",
			pos:  position{line: 1627, col: 1, offset: 61593},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1627, col: 27, offset: 61619},
				expr: &actionExpr{
					pos: position{line: 1628, col: 8, offset: 61628},
					run: (*parser).callonExampleBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1628, col: 8, offset: 61628},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1628, col: 8, offset: 61628},
								expr: &ruleRefExpr{
									pos:  position{line: 1628, col: 9, offset: 61629},
									name: "ExampleBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1629, col: 8, offset: 61662},
								label: "element",
								expr: &choiceExpr{
									pos: position{line: 1629, col: 17, offset: 61671},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1629, col: 17, offset: 61671},
											name: "BlankLine",
										},
										&ruleRefExpr{
											pos:  position{line: 1630, col: 15, offset: 61695},
											name: "ImageBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1631, col: 15, offset: 61720},
											name: "ThematicBreak",
										},
										&ruleRefExpr{
											pos:  position{line: 1632, col: 15, offset: 61748},
											name: "OrderedListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1633, col: 15, offset: 61779},
											name: "UnorderedListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1634, col: 15, offset: 61812},
											name: "LabeledListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1635, col: 15, offset: 61843},
											name: "ContinuedListItemElement",
										},
										&ruleRefExpr{
											pos:  position{line: 1636, col: 15, offset: 61882},
											name: "FencedBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1637, col: 15, offset: 61909},
											name: "ListingBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1638, col: 15, offset: 61937},
											name: "VerseBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1639, col: 15, offset: 61962},
											name: "QuoteBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1640, col: 15, offset: 61987},
											name: "SidebarBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1641, col: 15, offset: 62014},
											name: "SingleLineComment",
										},
										&ruleRefExpr{
											pos:  position{line: 1642, col: 15, offset: 62046},
											name: "PassthroughBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1643, col: 15, offset: 62077},
											name: "Table",
										},
										&ruleRefExpr{
											pos:  position{line: 1644, col: 15, offset: 62097},
											name: "CommentBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1645, col: 15, offset: 62124},
											name: "LiteralBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1646, col: 15, offset: 62152},
											name: "RawParagraph",
										},
										&ruleRefExpr{
											pos:  position{line: 1647, col: 15, offset: 62179},
											name: "StandaloneAttributes",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlock",
			pos:  position{line: 1654, col: 1, offset: 62435},
			expr: &actionExpr{
				pos: position{line: 1654, col: 15, offset: 62449},
				run: (*parser).callonQuoteBlock1,
				expr: &seqExpr{
					pos: position{line: 1654, col: 15, offset: 62449},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1654, col: 15, offset: 62449},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1654, col: 26, offset: 62460},
								expr: &ruleRefExpr{
									pos:  position{line: 1654, col: 27, offset: 62461},
									name: "ElementAttribute",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1655, col: 5, offset: 62485},
							run: (*parser).callonQuoteBlock6,
						},
						&ruleRefExpr{
							pos:  position{line: 1663, col: 5, offset: 62789},
							name: "QuoteBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1663, col: 30, offset: 62814},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1663, col: 39, offset: 62823},
								name: "QuoteBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1663, col: 61, offset: 62845},
							name: "QuoteBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockDelimiter",
			pos:  position{line: 1667, col: 1, offset: 62965},
			expr: &seqExpr{
				pos: position{line: 1667, col: 24, offset: 62988},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1667, col: 24, offset: 62988},
						val:        "____",
						ignoreCase: false,
						want:       "\"____\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1667, col: 31, offset: 62995},
						expr: &ruleRefExpr{
							pos:  position{line: 1667, col: 31, offset: 62995},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1667, col: 38, offset: 63002},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "QuoteBlockStartDelimiter",
			pos:  position{line: 1669, col: 1, offset: 63032},
			expr: &seqExpr{
				pos: position{line: 1669, col: 29, offset: 63060},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1669, col: 29, offset: 63060},
						val:        "____",
						ignoreCase: false,
						want:       "\"____\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1669, col: 36, offset: 63067},
						expr: &ruleRefExpr{
							pos:  position{line: 1669, col: 36, offset: 63067},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1669, col: 43, offset: 63074},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "QuoteBlockEndDelimiter",
			pos:  position{line: 1671, col: 1, offset: 63104},
			expr: &choiceExpr{
				pos: position{line: 1671, col: 27, offset: 63130},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1671, col: 28, offset: 63131},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1671, col: 28, offset: 63131},
								val:        "____",
								ignoreCase: false,
								want:       "\"____\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1671, col: 35, offset: 63138},
								expr: &ruleRefExpr{
									pos:  position{line: 1671, col: 35, offset: 63138},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1671, col: 42, offset: 63145},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1671, col: 49, offset: 63152},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "QuoteBlockRawContent",
			pos:  position{line: 1673, col: 1, offset: 63182},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1673, col: 25, offset: 63206},
				expr: &actionExpr{
					pos: position{line: 1674, col: 8, offset: 63215},
					run: (*parser).callonQuoteBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1674, col: 8, offset: 63215},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1674, col: 8, offset: 63215},
								expr: &ruleRefExpr{
									pos:  position{line: 1674, col: 9, offset: 63216},
									name: "QuoteBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1675, col: 8, offset: 63247},
								label: "element",
								expr: &choiceExpr{
									pos: position{line: 1675, col: 17, offset: 63256},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1675, col: 17, offset: 63256},
											name: "BlankLine",
										},
										&ruleRefExpr{
											pos:  position{line: 1676, col: 15, offset: 63280},
											name: "ImageBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1677, col: 15, offset: 63305},
											name: "ThematicBreak",
										},
										&ruleRefExpr{
											pos:  position{line: 1678, col: 15, offset: 63333},
											name: "OrderedListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1679, col: 15, offset: 63364},
											name: "UnorderedListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1680, col: 15, offset: 63397},
											name: "LabeledListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1681, col: 15, offset: 63428},
											name: "ContinuedListItemElement",
										},
										&ruleRefExpr{
											pos:  position{line: 1682, col: 15, offset: 63467},
											name: "FencedBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1683, col: 15, offset: 63494},
											name: "ListingBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1684, col: 15, offset: 63522},
											name: "VerseBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1685, col: 15, offset: 63547},
											name: "ExampleBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1686, col: 15, offset: 63574},
											name: "SidebarBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1687, col: 15, offset: 63601},
											name: "SingleLineComment",
										},
										&ruleRefExpr{
											pos:  position{line: 1688, col: 15, offset: 63633},
											name: "PassthroughBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1689, col: 15, offset: 63664},
											name: "Table",
										},
										&ruleRefExpr{
											pos:  position{line: 1690, col: 15, offset: 63684},
											name: "CommentBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1691, col: 15, offset: 63711},
											name: "LiteralBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1692, col: 15, offset: 63739},
											name: "RawParagraph",
										},
										&ruleRefExpr{
											pos:  position{line: 1693, col: 15, offset: 63766},
											name: "StandaloneAttributes",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlock",
			pos:  position{line: 1700, col: 1, offset: 64024},
			expr: &actionExpr{
				pos: position{line: 1700, col: 17, offset: 64040},
				run: (*parser).callonSidebarBlock1,
				expr: &seqExpr{
					pos: position{line: 1700, col: 17, offset: 64040},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1700, col: 17, offset: 64040},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1700, col: 28, offset: 64051},
								expr: &ruleRefExpr{
									pos:  position{line: 1700, col: 29, offset: 64052},
									name: "ElementAttribute",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1700, col: 48, offset: 64071},
							name: "SidebarBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1700, col: 75, offset: 64098},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1700, col: 84, offset: 64107},
								name: "SidebarBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1700, col: 108, offset: 64131},
							name: "SidebarBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockDelimiter",
			pos:  position{line: 1704, col: 1, offset: 64247},
			expr: &seqExpr{
				pos: position{line: 1704, col: 26, offset: 64272},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1704, col: 26, offset: 64272},
						val:        "****",
						ignoreCase: false,
						want:       "\"****\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1704, col: 33, offset: 64279},
						expr: &ruleRefExpr{
							pos:  position{line: 1704, col: 33, offset: 64279},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1704, col: 40, offset: 64286},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "SidebarBlockStartDelimiter",
			pos:  position{line: 1706, col: 1, offset: 64291},
			expr: &seqExpr{
				pos: position{line: 1706, col: 31, offset: 64321},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1706, col: 31, offset: 64321},
						val:        "****",
						ignoreCase: false,
						want:       "\"****\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1706, col: 38, offset: 64328},
						expr: &ruleRefExpr{
							pos:  position{line: 1706, col: 38, offset: 64328},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1706, col: 45, offset: 64335},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "SidebarBlockEndDelimiter",
			pos:  position{line: 1708, col: 1, offset: 64340},
			expr: &choiceExpr{
				pos: position{line: 1708, col: 29, offset: 64368},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1708, col: 30, offset: 64369},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1708, col: 30, offset: 64369},
								val:        "****",
								ignoreCase: false,
								want:       "\"****\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1708, col: 37, offset: 64376},
								expr: &ruleRefExpr{
									pos:  position{line: 1708, col: 37, offset: 64376},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1708, col: 44, offset: 64383},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1708, col: 51, offset: 64390},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "SidebarBlockRawContent",
			pos:  position{line: 1710, col: 1, offset: 64395},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1710, col: 27, offset: 64421},
				expr: &actionExpr{
					pos: position{line: 1711, col: 8, offset: 64430},
					run: (*parser).callonSidebarBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1711, col: 8, offset: 64430},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1711, col: 8, offset: 64430},
								expr: &ruleRefExpr{
									pos:  position{line: 1711, col: 9, offset: 64431},
									name: "SidebarBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1712, col: 8, offset: 64464},
								label: "element",
								expr: &choiceExpr{
									pos: position{line: 1712, col: 17, offset: 64473},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1712, col: 17, offset: 64473},
											name: "BlankLine",
										},
										&ruleRefExpr{
											pos:  position{line: 1713, col: 15, offset: 64497},
											name: "ImageBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1714, col: 15, offset: 64522},
											name: "ThematicBreak",
										},
										&ruleRefExpr{
											pos:  position{line: 1715, col: 15, offset: 64550},
											name: "OrderedListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1716, col: 15, offset: 64581},
											name: "UnorderedListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1717, col: 15, offset: 64614},
											name: "LabeledListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1718, col: 15, offset: 64645},
											name: "ContinuedListItemElement",
										},
										&ruleRefExpr{
											pos:  position{line: 1719, col: 15, offset: 64684},
											name: "FencedBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1720, col: 15, offset: 64711},
											name: "ListingBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1721, col: 15, offset: 64738},
											name: "VerseBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1722, col: 15, offset: 64764},
											name: "ExampleBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1723, col: 15, offset: 64791},
											name: "QuoteBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1724, col: 15, offset: 64816},
											name: "SingleLineComment",
										},
										&ruleRefExpr{
											pos:  position{line: 1725, col: 15, offset: 64848},
											name: "PassthroughBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1726, col: 15, offset: 64879},
											name: "Table",
										},
										&ruleRefExpr{
											pos:  position{line: 1727, col: 15, offset: 64899},
											name: "CommentBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1728, col: 15, offset: 64926},
											name: "LiteralBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1729, col: 15, offset: 64954},
											name: "RawParagraph",
										},
										&ruleRefExpr{
											pos:  position{line: 1730, col: 15, offset: 64981},
											name: "StandaloneAttributes",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FencedBlock",
			pos:  position{line: 1737, col: 1, offset: 65238},
			expr: &actionExpr{
				pos: position{line: 1737, col: 16, offset: 65253},
				run: (*parser).callonFencedBlock1,
				expr: &seqExpr{
					pos: position{line: 1737, col: 16, offset: 65253},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1737, col: 16, offset: 65253},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1737, col: 27, offset: 65264},
								expr: &ruleRefExpr{
									pos:  position{line: 1737, col: 28, offset: 65265},
									name: "ElementAttribute",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1737, col: 47, offset: 65284},
							name: "FencedBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1737, col: 73, offset: 65310},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1737, col: 82, offset: 65319},
								name: "FencedBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1737, col: 105, offset: 65342},
							name: "FencedBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "FencedBlockDelimiter",
			pos:  position{line: 1741, col: 1, offset: 65456},
			expr: &seqExpr{
				pos: position{line: 1741, col: 25, offset: 65480},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1741, col: 25, offset: 65480},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1741, col: 31, offset: 65486},
						expr: &ruleRefExpr{
							pos:  position{line: 1741, col: 31, offset: 65486},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1741, col: 38, offset: 65493},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "FencedBlockStartDelimiter",
			pos:  position{line: 1743, col: 1, offset: 65553},
			expr: &seqExpr{
				pos: position{line: 1743, col: 30, offset: 65582},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1743, col: 30, offset: 65582},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1743, col: 36, offset: 65588},
						expr: &ruleRefExpr{
							pos:  position{line: 1743, col: 36, offset: 65588},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1743, col: 43, offset: 65595},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "FencedBlockEndDelimiter",
			pos:  position{line: 1745, col: 1, offset: 65600},
			expr: &choiceExpr{
				pos: position{line: 1745, col: 28, offset: 65627},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1745, col: 29, offset: 65628},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1745, col: 29, offset: 65628},
								val:        "```",
								ignoreCase: false,
								want:       "\"```\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1745, col: 35, offset: 65634},
								expr: &ruleRefExpr{
									pos:  position{line: 1745, col: 35, offset: 65634},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1745, col: 42, offset: 65641},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1745, col: 49, offset: 65648},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "FencedBlockRawContent",
			pos:  position{line: 1747, col: 1, offset: 65653},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1747, col: 26, offset: 65678},
				expr: &actionExpr{
					pos: position{line: 1747, col: 27, offset: 65679},
					run: (*parser).callonFencedBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1747, col: 27, offset: 65679},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1747, col: 27, offset: 65679},
								expr: &ruleRefExpr{
									pos:  position{line: 1747, col: 28, offset: 65680},
									name: "FencedBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1747, col: 52, offset: 65704},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1747, col: 58, offset: 65710},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListingBlock",
			pos:  position{line: 1754, col: 1, offset: 65944},
			expr: &actionExpr{
				pos: position{line: 1754, col: 17, offset: 65960},
				run: (*parser).callonListingBlock1,
				expr: &seqExpr{
					pos: position{line: 1754, col: 17, offset: 65960},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1754, col: 17, offset: 65960},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1754, col: 28, offset: 65971},
								expr: &ruleRefExpr{
									pos:  position{line: 1754, col: 29, offset: 65972},
									name: "ElementAttribute",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1754, col: 48, offset: 65991},
							name: "ListingBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1754, col: 75, offset: 66018},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1754, col: 84, offset: 66027},
								name: "ListingBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1754, col: 108, offset: 66051},
							name: "ListingBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "ListingBlockDelimiter",
			pos:  position{line: 1758, col: 1, offset: 66167},
			expr: &seqExpr{
				pos: position{line: 1758, col: 26, offset: 66192},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1758, col: 26, offset: 66192},
						val:        "----",
						ignoreCase: false,
						want:       "\"----\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1758, col: 33, offset: 66199},
						expr: &ruleRefExpr{
							pos:  position{line: 1758, col: 33, offset: 66199},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1758, col: 40, offset: 66206},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ListingBlockStartDelimiter",
			pos:  position{line: 1760, col: 1, offset: 66211},
			expr: &seqExpr{
				pos: position{line: 1760, col: 31, offset: 66241},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1760, col: 31, offset: 66241},
						val:        "----",
						ignoreCase: false,
						want:       "\"----\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1760, col: 38, offset: 66248},
						expr: &ruleRefExpr{
							pos:  position{line: 1760, col: 38, offset: 66248},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1760, col: 45, offset: 66255},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ListingBlockEndDelimiter",
			pos:  position{line: 1762, col: 1, offset: 66260},
			expr: &choiceExpr{
				pos: position{line: 1762, col: 29, offset: 66288},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1762, col: 30, offset: 66289},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1762, col: 30, offset: 66289},
								val:        "----",
								ignoreCase: false,
								want:       "\"----\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1762, col: 37, offset: 66296},
								expr: &ruleRefExpr{
									pos:  position{line: 1762, col: 37, offset: 66296},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1762, col: 44, offset: 66303},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1762, col: 51, offset: 66310},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "ListingBlockRawContent",
			pos:  position{line: 1764, col: 1, offset: 66315},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1764, col: 27, offset: 66341},
				expr: &actionExpr{
					pos: position{line: 1764, col: 28, offset: 66342},
					run: (*parser).callonListingBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1764, col: 28, offset: 66342},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1764, col: 28, offset: 66342},
								expr: &ruleRefExpr{
									pos:  position{line: 1764, col: 29, offset: 66343},
									name: "ListingBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1764, col: 54, offset: 66368},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1764, col: 60, offset: 66374},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlock",
			pos:  position{line: 1771, col: 1, offset: 66606},
			expr: &actionExpr{
				pos: position{line: 1771, col: 15, offset: 66620},
				run: (*parser).callonVerseBlock1,
				expr: &seqExpr{
					pos: position{line: 1771, col: 15, offset: 66620},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1771, col: 15, offset: 66620},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1771, col: 26, offset: 66631},
								expr: &ruleRefExpr{
									pos:  position{line: 1771, col: 27, offset: 66632},
									name: "ElementAttribute",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1772, col: 5, offset: 66656},
							run: (*parser).callonVerseBlock6,
						},
						&ruleRefExpr{
							pos:  position{line: 1776, col: 5, offset: 66813},
							name: "QuoteBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1776, col: 30, offset: 66838},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1776, col: 39, offset: 66847},
								name: "VerseBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1776, col: 61, offset: 66869},
							name: "QuoteBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "VerseBlockRawContent",
			pos:  position{line: 1780, col: 1, offset: 66989},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1780, col: 25, offset: 67013},
				expr: &actionExpr{
					pos: position{line: 1780, col: 26, offset: 67014},
					run: (*parser).callonVerseBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1780, col: 26, offset: 67014},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1780, col: 26, offset: 67014},
								expr: &ruleRefExpr{
									pos:  position{line: 1780, col: 27, offset: 67015},
									name: "QuoteBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1780, col: 50, offset: 67038},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1780, col: 56, offset: 67044},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlock",
			pos:  position{line: 1787, col: 1, offset: 67282},
			expr: &actionExpr{
				pos: position{line: 1787, col: 21, offset: 67302},
				run: (*parser).callonPassthroughBlock1,
				expr: &seqExpr{
					pos: position{line: 1787, col: 21, offset: 67302},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1787, col: 21, offset: 67302},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1787, col: 32, offset: 67313},
								expr: &ruleRefExpr{
									pos:  position{line: 1787, col: 33, offset: 67314},
									name: "ElementAttribute",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1787, col: 52, offset: 67333},
							name: "PassthroughBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1787, col: 83, offset: 67364},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1787, col: 92, offset: 67373},
								name: "PassthroughBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1787, col: 120, offset: 67401},
							name: "PassthroughBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockDelimiter",
			pos:  position{line: 1791, col: 1, offset: 67525},
			expr: &seqExpr{
				pos: position{line: 1791, col: 30, offset: 67554},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1791, col: 30, offset: 67554},
						val:        "++++",
						ignoreCase: false,
						want:       "\"++++\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1791, col: 37, offset: 67561},
						expr: &ruleRefExpr{
							pos:  position{line: 1791, col: 37, offset: 67561},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1791, col: 44, offset: 67568},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "PassthroughBlockStartDelimiter",
			pos:  position{line: 1793, col: 1, offset: 67573},
			expr: &seqExpr{
				pos: position{line: 1793, col: 35, offset: 67607},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1793, col: 35, offset: 67607},
						val:        "++++",
						ignoreCase: false,
						want:       "\"++++\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1793, col: 42, offset: 67614},
						expr: &ruleRefExpr{
							pos:  position{line: 1793, col: 42, offset: 67614},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1793, col: 49, offset: 67621},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "PassthroughBlockEndDelimiter",
			pos:  position{line: 1795, col: 1, offset: 67626},
			expr: &choiceExpr{
				pos: position{line: 1795, col: 33, offset: 67658},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1795, col: 34, offset: 67659},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1795, col: 34, offset: 67659},
								val:        "++++",
								ignoreCase: false,
								want:       "\"++++\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1795, col: 41, offset: 67666},
								expr: &ruleRefExpr{
									pos:  position{line: 1795, col: 41, offset: 67666},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1795, col: 48, offset: 67673},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1795, col: 55, offset: 67680},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "PassthroughBlockRawContent",
			pos:  position{line: 1797, col: 1, offset: 67685},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1797, col: 31, offset: 67715},
				expr: &actionExpr{
					pos: position{line: 1797, col: 32, offset: 67716},
					run: (*parser).callonPassthroughBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1797, col: 32, offset: 67716},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1797, col: 32, offset: 67716},
								expr: &ruleRefExpr{
									pos:  position{line: 1797, col: 33, offset: 67717},
									name: "PassthroughBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1797, col: 62, offset: 67746},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1797, col: 68, offset: 67752},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CommentBlockDelimiter",
			pos:  position{line: 1804, col: 1, offset: 67986},
			expr: &seqExpr{
				pos: position{line: 1804, col: 26, offset: 68011},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1804, col: 26, offset: 68011},
						val:        "////",
						ignoreCase: false,
						want:       "\"////\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1804, col: 33, offset: 68018},
						expr: &ruleRefExpr{
							pos:  position{line: 1804, col: 33, offset: 68018},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1804, col: 40, offset: 68025},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "CommentBlockStartDelimiter",
			pos:  position{line: 1806, col: 1, offset: 68030},
			expr: &seqExpr{
				pos: position{line: 1806, col: 31, offset: 68060},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1806, col: 31, offset: 68060},
						val:        "////",
						ignoreCase: false,
						want:       "\"////\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1806, col: 38, offset: 68067},
						expr: &ruleRefExpr{
							pos:  position{line: 1806, col: 38, offset: 68067},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1806, col: 45, offset: 68074},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "CommentBlockEndDelimiter",
			pos:  position{line: 1808, col: 1, offset: 68079},
			expr: &choiceExpr{
				pos: position{line: 1808, col: 29, offset: 68107},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1808, col: 30, offset: 68108},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1808, col: 30, offset: 68108},
								val:        "////",
								ignoreCase: false,
								want:       "\"////\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1808, col: 37, offset: 68115},
								expr: &ruleRefExpr{
									pos:  position{line: 1808, col: 37, offset: 68115},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1808, col: 44, offset: 68122},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1808, col: 51, offset: 68129},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "CommentBlock",
			pos:  position{line: 1810, col: 1, offset: 68134},
			expr: &actionExpr{
				pos: position{line: 1810, col: 17, offset: 68150},
				run: (*parser).callonCommentBlock1,
				expr: &seqExpr{
					pos: position{line: 1810, col: 17, offset: 68150},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1810, col: 17, offset: 68150},
							name: "CommentBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1810, col: 44, offset: 68177},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1810, col: 53, offset: 68186},
								name: "CommentBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1810, col: 78, offset: 68211},
							name: "CommentBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "CommentBlockRawContent",
			pos:  position{line: 1814, col: 1, offset: 68304},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1814, col: 27, offset: 68330},
				expr: &actionExpr{
					pos: position{line: 1814, col: 28, offset: 68331},
					run: (*parser).callonCommentBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1814, col: 28, offset: 68331},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1814, col: 28, offset: 68331},
								expr: &ruleRefExpr{
									pos:  position{line: 1814, col: 29, offset: 68332},
									name: "CommentBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1814, col: 54, offset: 68357},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1814, col: 60, offset: 68363},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1818, col: 1, offset: 68401},
			expr: &actionExpr{
				pos: position{line: 1818, col: 22, offset: 68422},
				run: (*parser).callonSingleLineComment1,
				expr: &seqExpr{
					pos: position{line: 1818, col: 22, offset: 68422},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1818, col: 22, offset: 68422},
							expr: &ruleRefExpr{
								pos:  position{line: 1818, col: 23, offset: 68423},
								name: "CommentBlockDelimiter",
							},
						},
						&litMatcher{
							pos:        position{line: 1818, col: 45, offset: 68445},
							val:        "//",
							ignoreCase: false,
							want:       "\"//\"",
						},
						&labeledExpr{
							pos:   position{line: 1818, col: 50, offset: 68450},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1818, col: 59, offset: 68459},
								name: "SingleLineCommentContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1818, col: 85, offset: 68485},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SingleLineCommentContent",
			pos:  position{line: 1822, col: 1, offset: 68550},
			expr: &actionExpr{
				pos: position{line: 1822, col: 29, offset: 68578},
				run: (*parser).callonSingleLineCommentContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1822, col: 29, offset: 68578},
					expr: &charClassMatcher{
						pos:        position{line: 1822, col: 29, offset: 68578},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "InlineMacros",
			pos:  position{line: 1830, col: 1, offset: 68867},
			expr: &choiceExpr{
				pos: position{line: 1830, col: 17, offset: 68883},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1830, col: 17, offset: 68883},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1831, col: 19, offset: 68912},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1832, col: 19, offset: 68943},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1833, col: 19, offset: 68967},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1834, col: 19, offset: 69004},
						name: "InlineFootnote",
					},
					&ruleRefExpr{
						pos:  position{line: 1835, col: 19, offset: 69038},
						name: "CrossReference",
					},
					&ruleRefExpr{
						pos:  position{line: 1836, col: 19, offset: 69072},
						name: "InlineUserMacro",
					},
					&ruleRefExpr{
						pos:  position{line: 1837, col: 19, offset: 69107},
						name: "InlineElementID",
					},
					&ruleRefExpr{
						pos:  position{line: 1838, col: 19, offset: 69141},
						name: "ConcealedIndexTerm",
					},
					&ruleRefExpr{
						pos:  position{line: 1839, col: 19, offset: 69178},
						name: "IndexTerm",
					},
				},
			},
		},
		{
			name: "ElementPlaceHolder",
			pos:  position{line: 1841, col: 1, offset: 69189},
			expr: &actionExpr{
				pos: position{line: 1841, col: 23, offset: 69211},
				run: (*parser).callonElementPlaceHolder1,
				expr: &seqExpr{
					pos: position{line: 1841, col: 23, offset: 69211},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1841, col: 23, offset: 69211},
							val:        "�",
							ignoreCase: false,
							want:       "\"�\"",
						},
						&labeledExpr{
							pos:   position{line: 1841, col: 32, offset: 69220},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1841, col: 37, offset: 69225},
								run: (*parser).callonElementPlaceHolder5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1841, col: 37, offset: 69225},
									expr: &charClassMatcher{
										pos:        position{line: 1841, col: 37, offset: 69225},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1841, col: 76, offset: 69264},
							val:        "�",
							ignoreCase: false,
							want:       "\"�\"",
						},
					},
				},
			},
		},
		{
			name: "InlinePassthroughSubs",
			pos:  position{line: 1846, col: 1, offset: 69416},
			expr: &seqExpr{
				pos: position{line: 1847, col: 5, offset: 69446},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1847, col: 5, offset: 69446},
						expr: &choiceExpr{
							pos: position{line: 1847, col: 6, offset: 69447},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1847, col: 6, offset: 69447},
									name: "InlinePassthrough",
								},
								&ruleRefExpr{
									pos:  position{line: 1848, col: 11, offset: 69476},
									name: "InlineWord",
								},
								&ruleRefExpr{
									pos:  position{line: 1849, col: 11, offset: 69537},
									name: "ElementPlaceHolder",
								},
								&oneOrMoreExpr{
									pos: position{line: 1850, col: 11, offset: 69566},
									expr: &ruleRefExpr{
										pos:  position{line: 1850, col: 11, offset: 69566},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1851, col: 11, offset: 69584},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1852, col: 11, offset: 69602},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1852, col: 21, offset: 69612},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "SpecialCharacterSubs",
			pos:  position{line: 1855, col: 1, offset: 69733},
			expr: &seqExpr{
				pos: position{line: 1856, col: 5, offset: 69762},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1856, col: 5, offset: 69762},
						expr: &choiceExpr{
							pos: position{line: 1856, col: 6, offset: 69763},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1856, col: 6, offset: 69763},
									name: "InlineWord",
								},
								&ruleRefExpr{
									pos:  position{line: 1857, col: 11, offset: 69824},
									name: "SpecialCharacter",
								},
								&ruleRefExpr{
									pos:  position{line: 1858, col: 11, offset: 69851},
									name: "ElementPlaceHolder",
								},
								&oneOrMoreExpr{
									pos: position{line: 1859, col: 11, offset: 69880},
									expr: &ruleRefExpr{
										pos:  position{line: 1859, col: 11, offset: 69880},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1860, col: 11, offset: 69897},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1861, col: 11, offset: 69915},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1861, col: 21, offset: 69925},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "QuotedTextSubs",
			pos:  position{line: 1864, col: 1, offset: 69979},
			expr: &seqExpr{
				pos: position{line: 1865, col: 5, offset: 70002},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1865, col: 5, offset: 70002},
						expr: &choiceExpr{
							pos: position{line: 1865, col: 6, offset: 70003},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1865, col: 6, offset: 70003},
									name: "InlineWord",
								},
								&oneOrMoreExpr{
									pos: position{line: 1866, col: 11, offset: 70064},
									expr: &ruleRefExpr{
										pos:  position{line: 1866, col: 11, offset: 70064},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1867, col: 11, offset: 70082},
									name: "QuotedText",
								},
								&ruleRefExpr{
									pos:  position{line: 1868, col: 11, offset: 70104},
									name: "QuotedString",
								},
								&ruleRefExpr{
									pos:  position{line: 1869, col: 11, offset: 70127},
									name: "ElementPlaceHolder",
								},
								&ruleRefExpr{
									pos:  position{line: 1870, col: 11, offset: 70156},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1871, col: 11, offset: 70174},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1871, col: 21, offset: 70184},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "AttributeSubs",
			pos:  position{line: 1874, col: 1, offset: 70242},
			expr: &seqExpr{
				pos: position{line: 1875, col: 5, offset: 70264},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1875, col: 5, offset: 70264},
						expr: &choiceExpr{
							pos: position{line: 1875, col: 6, offset: 70265},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1875, col: 6, offset: 70265},
									name: "InlineWord",
								},
								&oneOrMoreExpr{
									pos: position{line: 1876, col: 11, offset: 70326},
									expr: &ruleRefExpr{
										pos:  position{line: 1876, col: 11, offset: 70326},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1877, col: 11, offset: 70344},
									name: "AttributeSubstitution",
								},
								&ruleRefExpr{
									pos:  position{line: 1878, col: 11, offset: 70376},
									name: "ElementPlaceHolder",
								},
								&ruleRefExpr{
									pos:  position{line: 1879, col: 11, offset: 70405},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1880, col: 11, offset: 70423},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1880, col: 21, offset: 70433},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "InlineMacroSubs",
			pos:  position{line: 1883, col: 1, offset: 70487},
			expr: &seqExpr{
				pos: position{line: 1884, col: 5, offset: 70511},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1884, col: 5, offset: 70511},
						expr: &choiceExpr{
							pos: position{line: 1884, col: 6, offset: 70512},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1884, col: 6, offset: 70512},
									name: "InlineWord",
								},
								&oneOrMoreExpr{
									pos: position{line: 1885, col: 11, offset: 70573},
									expr: &ruleRefExpr{
										pos:  position{line: 1885, col: 11, offset: 70573},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1886, col: 11, offset: 70591},
									name: "InlineMacros",
								},
								&ruleRefExpr{
									pos:  position{line: 1887, col: 11, offset: 70614},
									name: "ElementPlaceHolder",
								},
								&ruleRefExpr{
									pos:  position{line: 1888, col: 11, offset: 70643},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1889, col: 11, offset: 70661},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1889, col: 21, offset: 70671},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "MarkdownQuoteMacroSubs",
			pos:  position{line: 1892, col: 1, offset: 70751},
			expr: &actionExpr{
				pos: position{line: 1892, col: 27, offset: 70777},
				run: (*parser).callonMarkdownQuoteMacroSubs1,
				expr: &seqExpr{
					pos: position{line: 1892, col: 27, offset: 70777},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1892, col: 27, offset: 70777},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1892, col: 33, offset: 70783},
								expr: &ruleRefExpr{
									pos:  position{line: 1892, col: 34, offset: 70784},
									name: "MarkdownQuoteLine",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1892, col: 54, offset: 70804},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "MarkdownQuoteLine",
			pos:  position{line: 1896, col: 1, offset: 70871},
			expr: &actionExpr{
				pos: position{line: 1897, col: 5, offset: 70897},
				run: (*parser).callonMarkdownQuoteLine1,
				expr: &seqExpr{
					pos: position{line: 1897, col: 5, offset: 70897},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1897, col: 5, offset: 70897},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1897, col: 14, offset: 70906},
								expr: &choiceExpr{
									pos: position{line: 1897, col: 15, offset: 70907},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1897, col: 15, offset: 70907},
											name: "InlineWord",
										},
										&oneOrMoreExpr{
											pos: position{line: 1898, col: 11, offset: 70968},
											expr: &ruleRefExpr{
												pos:  position{line: 1898, col: 11, offset: 70968},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1899, col: 11, offset: 70986},
											name: "InlineMacros",
										},
										&ruleRefExpr{
											pos:  position{line: 1900, col: 11, offset: 71009},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 1901, col: 11, offset: 71038},
											name: "AnyChar",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1901, col: 21, offset: 71048},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "MarkdownQuoteAttribution",
			pos:  position{line: 1905, col: 1, offset: 71119},
			expr: &actionExpr{
				pos: position{line: 1905, col: 29, offset: 71147},
				run: (*parser).callonMarkdownQuoteAttribution1,
				expr: &seqExpr{
					pos: position{line: 1905, col: 29, offset: 71147},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1905, col: 29, offset: 71147},
							val:        "-- ",
							ignoreCase: false,
							want:       "\"-- \"",
						},
						&labeledExpr{
							pos:   position{line: 1905, col: 35, offset: 71153},
							label: "author",
							expr: &actionExpr{
								pos: position{line: 1905, col: 43, offset: 71161},
								run: (*parser).callonMarkdownQuoteAttribution5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1905, col: 44, offset: 71162},
									expr: &charClassMatcher{
										pos:        position{line: 1905, col: 44, offset: 71162},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1907, col: 8, offset: 71212},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ReplacementSubs",
			pos:  position{line: 1912, col: 1, offset: 71299},
			expr: &seqExpr{
				pos: position{line: 1913, col: 5, offset: 71323},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1913, col: 5, offset: 71323},
						expr: &choiceExpr{
							pos: position{line: 1913, col: 6, offset: 71324},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1913, col: 6, offset: 71324},
									name: "InlineWord",
								},
								&oneOrMoreExpr{
									pos: position{line: 1914, col: 11, offset: 71385},
									expr: &ruleRefExpr{
										pos:  position{line: 1914, col: 11, offset: 71385},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1915, col: 11, offset: 71403},
									name: "Symbol",
								},
								&ruleRefExpr{
									pos:  position{line: 1916, col: 11, offset: 71421},
									name: "ElementPlaceHolder",
								},
								&ruleRefExpr{
									pos:  position{line: 1917, col: 11, offset: 71450},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1918, col: 11, offset: 71468},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1918, col: 21, offset: 71478},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "PostReplacementSubs",
			pos:  position{line: 1922, col: 1, offset: 71626},
			expr: &seqExpr{
				pos: position{line: 1922, col: 24, offset: 71649},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1922, col: 24, offset: 71649},
						expr: &choiceExpr{
							pos: position{line: 1923, col: 5, offset: 71655},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1923, col: 5, offset: 71655},
									name: "InlineWord",
								},
								&ruleRefExpr{
									pos:  position{line: 1924, col: 7, offset: 71712},
									name: "ElementPlaceHolder",
								},
								&ruleRefExpr{
									pos:  position{line: 1925, col: 7, offset: 71737},
									name: "LineBreak",
								},
								&oneOrMoreExpr{
									pos: position{line: 1926, col: 7, offset: 71780},
									expr: &ruleRefExpr{
										pos:  position{line: 1926, col: 7, offset: 71780},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1927, col: 7, offset: 71794},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1928, col: 7, offset: 71808},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1928, col: 17, offset: 71818},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "CalloutSubs",
			pos:  position{line: 1931, col: 1, offset: 71875},
			expr: &seqExpr{
				pos: position{line: 1932, col: 5, offset: 71895},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1932, col: 5, offset: 71895},
						expr: &choiceExpr{
							pos: position{line: 1932, col: 6, offset: 71896},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1932, col: 6, offset: 71896},
									name: "InlineWord",
								},
								&ruleRefExpr{
									pos:  position{line: 1933, col: 11, offset: 71957},
									name: "ElementPlaceHolder",
								},
								&oneOrMoreExpr{
									pos: position{line: 1934, col: 11, offset: 71986},
									expr: &ruleRefExpr{
										pos:  position{line: 1934, col: 11, offset: 71986},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1935, col: 11, offset: 72003},
									name: "Callout",
								},
								&ruleRefExpr{
									pos:  position{line: 1936, col: 11, offset: 72021},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1937, col: 11, offset: 72039},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1937, col: 21, offset: 72049},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "NoneSubs",
			pos:  position{line: 1940, col: 1, offset: 72101},
			expr: &seqExpr{
				pos: position{line: 1940, col: 13, offset: 72113},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1940, col: 13, offset: 72113},
						expr: &choiceExpr{
							pos: position{line: 1941, col: 5, offset: 72119},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1941, col: 5, offset: 72119},
									name: "ElementPlaceHolder",
								},
								&actionExpr{
									pos: position{line: 1942, col: 8, offset: 72146},
									run: (*parser).callonNoneSubs5,
									expr: &seqExpr{
										pos: position{line: 1942, col: 8, offset: 72146},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1942, col: 8, offset: 72146},
												expr: &ruleRefExpr{
													pos:  position{line: 1942, col: 9, offset: 72147},
													name: "EOF",
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 1942, col: 13, offset: 72151},
												expr: &charClassMatcher{
													pos:        position{line: 1942, col: 13, offset: 72151},
													val:        "[^\\r\\n]",
													chars:      []rune{'\r', '\n'},
													ignoreCase: false,
													inverted:   true,
												},
											},
											&ruleRefExpr{
												pos:  position{line: 1942, col: 22, offset: 72160},
												name: "EOL",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1944, col: 10, offset: 72265},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "Table",
			pos:  position{line: 1949, col: 1, offset: 72458},
			expr: &actionExpr{
				pos: position{line: 1949, col: 10, offset: 72467},
				run: (*parser).callonTable1,
				expr: &seqExpr{
					pos: position{line: 1949, col: 10, offset: 72467},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1949, col: 10, offset: 72467},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1949, col: 21, offset: 72478},
								expr: &ruleRefExpr{
									pos:  position{line: 1949, col: 22, offset: 72479},
									name: "BlockAttribute",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1949, col: 39, offset: 72496},
							name: "TableDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1950, col: 5, offset: 72515},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 1950, col: 12, offset: 72522},
								expr: &ruleRefExpr{
									pos:  position{line: 1950, col: 13, offset: 72523},
									name: "TableLineHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1951, col: 5, offset: 72545},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1951, col: 11, offset: 72551},
								expr: &ruleRefExpr{
									pos:  position{line: 1951, col: 12, offset: 72552},
									name: "TableLine",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1952, col: 6, offset: 72569},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1952, col: 6, offset: 72569},
									name: "TableDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1952, col: 23, offset: 72586},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TableCellSeparator",
			pos:  position{line: 1956, col: 1, offset: 72721},
			expr: &seqExpr{
				pos: position{line: 1956, col: 23, offset: 72743},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1956, col: 23, offset: 72743},
						val:        "|",
						ignoreCase: false,
						want:       "\"|\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1956, col: 27, offset: 72747},
						expr: &ruleRefExpr{
							pos:  position{line: 1956, col: 27, offset: 72747},
							name: "Space",
						},
					},
				},
			},
		},
		{
			name: "TableDelimiter",
			pos:  position{line: 1958, col: 1, offset: 72755},
			expr: &seqExpr{
				pos: position{line: 1958, col: 19, offset: 72773},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1958, col: 19, offset: 72773},
						val:        "|===",
						ignoreCase: false,
						want:       "\"|===\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1958, col: 26, offset: 72780},
						expr: &ruleRefExpr{
							pos:  position{line: 1958, col: 26, offset: 72780},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1958, col: 33, offset: 72787},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "TableLineHeader",
			pos:  position{line: 1961, col: 1, offset: 72855},
			expr: &actionExpr{
				pos: position{line: 1961, col: 20, offset: 72874},
				run: (*parser).callonTableLineHeader1,
				expr: &seqExpr{
					pos: position{line: 1961, col: 20, offset: 72874},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1961, col: 20, offset: 72874},
							expr: &ruleRefExpr{
								pos:  position{line: 1961, col: 21, offset: 72875},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1961, col: 36, offset: 72890},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1961, col: 42, offset: 72896},
								expr: &ruleRefExpr{
									pos:  position{line: 1961, col: 43, offset: 72897},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1961, col: 55, offset: 72909},
							name: "EOL",
						},
						&ruleRefExpr{
							pos:  position{line: 1961, col: 59, offset: 72913},
							name: "BlankLine",
						},
					},
				},
			},
		},
		{
			name: "TableLine",
			pos:  position{line: 1965, col: 1, offset: 72981},
			expr: &actionExpr{
				pos: position{line: 1965, col: 14, offset: 72994},
				run: (*parser).callonTableLine1,
				expr: &seqExpr{
					pos: position{line: 1965, col: 14, offset: 72994},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1965, col: 14, offset: 72994},
							expr: &ruleRefExpr{
								pos:  position{line: 1965, col: 15, offset: 72995},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1965, col: 30, offset: 73010},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1965, col: 36, offset: 73016},
								expr: &ruleRefExpr{
									pos:  position{line: 1965, col: 37, offset: 73017},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1965, col: 49, offset: 73029},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1965, col: 53, offset: 73033},
							expr: &ruleRefExpr{
								pos:  position{line: 1965, col: 53, offset: 73033},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "TableCell",
			pos:  position{line: 1969, col: 1, offset: 73102},
			expr: &actionExpr{
				pos: position{line: 1969, col: 14, offset: 73115},
				run: (*parser).callonTableCell1,
				expr: &seqExpr{
					pos: position{line: 1969, col: 14, offset: 73115},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1969, col: 14, offset: 73115},
							name: "TableCellSeparator",
						},
						&labeledExpr{
							pos:   position{line: 1969, col: 33, offset: 73134},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1969, col: 42, offset: 73143},
								expr: &seqExpr{
									pos: position{line: 1969, col: 43, offset: 73144},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1969, col: 43, offset: 73144},
											expr: &ruleRefExpr{
												pos:  position{line: 1969, col: 44, offset: 73145},
												name: "TableCellSeparator",
											},
										},
										&notExpr{
											pos: position{line: 1969, col: 63, offset: 73164},
											expr: &ruleRefExpr{
												pos:  position{line: 1969, col: 64, offset: 73165},
												name: "EOL",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 1969, col: 68, offset: 73169},
											expr: &ruleRefExpr{
												pos:  position{line: 1969, col: 68, offset: 73169},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1969, col: 75, offset: 73176},
											name: "InlineElement",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1969, col: 89, offset: 73190},
											expr: &ruleRefExpr{
												pos:  position{line: 1969, col: 89, offset: 73190},
												name: "Space",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralBlock",
			pos:  position{line: 1976, col: 1, offset: 73516},
			expr: &choiceExpr{
				pos: position{line: 1976, col: 17, offset: 73532},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1976, col: 17, offset: 73532},
						name: "ParagraphWithLiteralAttribute",
					},
					&ruleRefExpr{
						pos:  position{line: 1976, col: 49, offset: 73564},
						name: "ParagraphWithHeadingSpaces",
					},
					&ruleRefExpr{
						pos:  position{line: 1976, col: 78, offset: 73593},
						name: "ParagraphWithLiteralBlockDelimiter",
					},
				},
			},
		},
		{
			name: "LiteralBlockDelimiter",
			pos:  position{line: 1978, col: 1, offset: 73629},
			expr: &litMatcher{
				pos:        position{line: 1978, col: 26, offset: 73654},
				val:        "....",
				ignoreCase: false,
				want:       "\"....\"",
			},
		},
		{
			name: "ParagraphWithHeadingSpaces",
			pos:  position{line: 1981, col: 1, offset: 73726},
			expr: &actionExpr{
				pos: position{line: 1981, col: 31, offset: 73756},
				run: (*parser).callonParagraphWithHeadingSpaces1,
				expr: &seqExpr{
					pos: position{line: 1981, col: 31, offset: 73756},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1981, col: 31, offset: 73756},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1981, col: 42, offset: 73767},
								expr: &ruleRefExpr{
									pos:  position{line: 1981, col: 43, offset: 73768},
									name: "ElementAttribute",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1981, col: 62, offset: 73787},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1981, col: 69, offset: 73794},
								name: "ParagraphWithHeadingSpacesLines",
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithHeadingSpacesLines",
			pos:  position{line: 1986, col: 1, offset: 74040},
			expr: &actionExpr{
				pos: position{line: 1987, col: 5, offset: 74080},
				run: (*parser).callonParagraphWithHeadingSpacesLines1,
				expr: &seqExpr{
					pos: position{line: 1987, col: 5, offset: 74080},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1987, col: 5, offset: 74080},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 1987, col: 16, offset: 74091},
								name: "ParagraphWithHeadingSpacesLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1988, col: 5, offset: 74127},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1988, col: 16, offset: 74138},
								expr: &ruleRefExpr{
									pos:  position{line: 1988, col: 17, offset: 74139},
									name: "LiteralParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithHeadingSpacesLine",
			pos:  position{line: 1992, col: 1, offset: 74248},
			expr: &actionExpr{
				pos: position{line: 1992, col: 35, offset: 74282},
				run: (*parser).callonParagraphWithHeadingSpacesLine1,
				expr: &seqExpr{
					pos: position{line: 1992, col: 35, offset: 74282},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1992, col: 35, offset: 74282},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1992, col: 41, offset: 74288},
								run: (*parser).callonParagraphWithHeadingSpacesLine4,
								expr: &seqExpr{
									pos: position{line: 1992, col: 41, offset: 74288},
									exprs: []interface{}{
										&oneOrMoreExpr{
											pos: position{line: 1992, col: 41, offset: 74288},
											expr: &ruleRefExpr{
												pos:  position{line: 1992, col: 41, offset: 74288},
												name: "Space",
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 1992, col: 48, offset: 74295},
											expr: &charClassMatcher{
												pos:        position{line: 1992, col: 48, offset: 74295},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1994, col: 8, offset: 74361},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiter",
			pos:  position{line: 1999, col: 1, offset: 74501},
			expr: &actionExpr{
				pos: position{line: 1999, col: 39, offset: 74539},
				run: (*parser).callonParagraphWithLiteralBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1999, col: 39, offset: 74539},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1999, col: 39, offset: 74539},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1999, col: 50, offset: 74550},
								expr: &ruleRefExpr{
									pos:  position{line: 1999, col: 51, offset: 74551},
									name: "ElementAttribute",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2000, col: 9, offset: 74578},
							name: "LiteralBlockDelimiter",
						},
						&zeroOrMoreExpr{
							pos: position{line: 2000, col: 31, offset: 74600},
							expr: &ruleRefExpr{
								pos:  position{line: 2000, col: 31, offset: 74600},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2000, col: 38, offset: 74607},
							name: "Newline",
						},
						&labeledExpr{
							pos:   position{line: 2000, col: 46, offset: 74615},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 2000, col: 53, offset: 74622},
								name: "ParagraphWithLiteralBlockDelimiterLines",
							},
						},
						&choiceExpr{
							pos: position{line: 2000, col: 95, offset: 74664},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 2000, col: 96, offset: 74665},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 2000, col: 96, offset: 74665},
											name: "LiteralBlockDelimiter",
										},
										&zeroOrMoreExpr{
											pos: position{line: 2000, col: 118, offset: 74687},
											expr: &ruleRefExpr{
												pos:  position{line: 2000, col: 118, offset: 74687},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 2000, col: 125, offset: 74694},
											name: "EOL",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2000, col: 132, offset: 74701},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLines",
			pos:  position{line: 2005, col: 1, offset: 74876},
			expr: &actionExpr{
				pos: position{line: 2005, col: 44, offset: 74919},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLines1,
				expr: &labeledExpr{
					pos:   position{line: 2005, col: 44, offset: 74919},
					label: "lines",
					expr: &zeroOrMoreExpr{
						pos: position{line: 2005, col: 50, offset: 74925},
						expr: &ruleRefExpr{
							pos:  position{line: 2005, col: 51, offset: 74926},
							name: "ParagraphWithLiteralBlockDelimiterLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLine",
			pos:  position{line: 2009, col: 1, offset: 75010},
			expr: &actionExpr{
				pos: position{line: 2010, col: 5, offset: 75065},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLine1,
				expr: &seqExpr{
					pos: position{line: 2010, col: 5, offset: 75065},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2010, col: 5, offset: 75065},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 2010, col: 11, offset: 75071},
								run: (*parser).callonParagraphWithLiteralBlockDelimiterLine4,
								expr: &seqExpr{
									pos: position{line: 2010, col: 11, offset: 75071},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 2010, col: 11, offset: 75071},
											expr: &ruleRefExpr{
												pos:  position{line: 2010, col: 12, offset: 75072},
												name: "LiteralBlockDelimiter",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 2010, col: 34, offset: 75094},
											expr: &charClassMatcher{
												pos:        position{line: 2010, col: 34, offset: 75094},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2012, col: 8, offset: 75160},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttribute",
			pos:  position{line: 2017, col: 1, offset: 75286},
			expr: &actionExpr{
				pos: position{line: 2018, col: 5, offset: 75324},
				run: (*parser).callonParagraphWithLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 2018, col: 5, offset: 75324},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2018, col: 5, offset: 75324},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2018, col: 16, offset: 75335},
								expr: &ruleRefExpr{
									pos:  position{line: 2018, col: 17, offset: 75336},
									name: "ElementAttribute",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 2019, col: 5, offset: 75359},
							run: (*parser).callonParagraphWithLiteralAttribute6,
						},
						&labeledExpr{
							pos:   position{line: 2022, col: 5, offset: 75468},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 2022, col: 11, offset: 75474},
								expr: &ruleRefExpr{
									pos:  position{line: 2022, col: 12, offset: 75475},
									name: "LiteralParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralKind",
			pos:  position{line: 2026, col: 1, offset: 75628},
			expr: &actionExpr{
				pos: position{line: 2026, col: 16, offset: 75643},
				run: (*parser).callonLiteralKind1,
				expr: &litMatcher{
					pos:        position{line: 2026, col: 16, offset: 75643},
					val:        "literal",
					ignoreCase: false,
					want:       "\"literal\"",
				},
			},
		},
		{
			name: "LiteralParagraphLine",
			pos:  position{line: 2030, col: 1, offset: 75689},
			expr: &actionExpr{
				pos: position{line: 2030, col: 25, offset: 75713},
				run: (*parser).callonLiteralParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 2030, col: 25, offset: 75713},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2030, col: 25, offset: 75713},
							expr: &ruleRefExpr{
								pos:  position{line: 2030, col: 26, offset: 75714},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 2030, col: 36, offset: 75724},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 2030, col: 45, offset: 75733},
								run: (*parser).callonLiteralParagraphLine6,
								expr: &oneOrMoreExpr{
									pos: position{line: 2030, col: 45, offset: 75733},
									expr: &charClassMatcher{
										pos:        position{line: 2030, col: 45, offset: 75733},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2032, col: 4, offset: 75791},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IndexTerm",
			pos:  position{line: 2039, col: 1, offset: 75968},
			expr: &actionExpr{
				pos: position{line: 2039, col: 14, offset: 75981},
				run: (*parser).callonIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 2039, col: 14, offset: 75981},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2039, col: 14, offset: 75981},
							val:        "((",
							ignoreCase: false,
							want:       "\"((\"",
						},
						&labeledExpr{
							pos:   position{line: 2039, col: 19, offset: 75986},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 2039, col: 25, offset: 75992},
								name: "IndexTermContent",
							},
						},
						&litMatcher{
							pos:        position{line: 2039, col: 43, offset: 76010},
							val:        "))",
							ignoreCase: false,
							want:       "\"))\"",
						},
					},
				},
			},
		},
		{
			name: "IndexTermContent",
			pos:  position{line: 2043, col: 1, offset: 76075},
			expr: &actionExpr{
				pos: position{line: 2043, col: 21, offset: 76095},
				run: (*parser).callonIndexTermContent1,
				expr: &labeledExpr{
					pos:   position{line: 2043, col: 21, offset: 76095},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 2043, col: 30, offset: 76104},
						expr: &choiceExpr{
							pos: position{line: 2043, col: 31, offset: 76105},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 2043, col: 31, offset: 76105},
									name: "Word",
								},
								&ruleRefExpr{
									pos:  position{line: 2043, col: 38, offset: 76112},
									name: "QuotedString",
								},
								&ruleRefExpr{
									pos:  position{line: 2043, col: 53, offset: 76127},
									name: "QuotedText",
								},
								&ruleRefExpr{
									pos:  position{line: 2043, col: 66, offset: 76140},
									name: "Space",
								},
								&ruleRefExpr{
									pos:  position{line: 2043, col: 74, offset: 76148},
									name: "SpecialCharacter",
								},
								&ruleRefExpr{
									pos:  position{line: 2043, col: 93, offset: 76167},
									name: "ElementPlaceHolder",
								},
								&actionExpr{
									pos: position{line: 2043, col: 114, offset: 76188},
									run: (*parser).callonIndexTermContent11,
									expr: &seqExpr{
										pos: position{line: 2043, col: 115, offset: 76189},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 2043, col: 115, offset: 76189},
												expr: &litMatcher{
													pos:        position{line: 2043, col: 116, offset: 76190},
													val:        "))",
													ignoreCase: false,
													want:       "\"))\"",
												},
											},
											&anyMatcher{
												line: 2043, col: 121, offset: 76195,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTerm",
			pos:  position{line: 2049, col: 1, offset: 76301},
			expr: &actionExpr{
				pos: position{line: 2049, col: 23, offset: 76323},
				run: (*parser).callonConcealedIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 2049, col: 23, offset: 76323},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2049, col: 23, offset: 76323},
							val:        "(((",
							ignoreCase: false,
							want:       "\"(((\"",
						},
						&labeledExpr{
							pos:   position{line: 2049, col: 29, offset: 76329},
							label: "term1",
							expr: &ruleRefExpr{
								pos:  position{line: 2049, col: 36, offset: 76336},
								name: "ConcealedIndexTermContent",
							},
						},
						&labeledExpr{
							pos:   position{line: 2050, col: 5, offset: 76368},
							label: "term2",
							expr: &zeroOrOneExpr{
								pos: position{line: 2050, col: 11, offset: 76374},
								expr: &actionExpr{
									pos: position{line: 2050, col: 12, offset: 76375},
									run: (*parser).callonConcealedIndexTerm8,
									expr: &seqExpr{
										pos: position{line: 2050, col: 12, offset: 76375},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 2050, col: 12, offset: 76375},
												expr: &ruleRefExpr{
													pos:  position{line: 2050, col: 12, offset: 76375},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 2050, col: 19, offset: 76382},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 2050, col: 23, offset: 76386},
												expr: &ruleRefExpr{
													pos:  position{line: 2050, col: 23, offset: 76386},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 2050, col: 30, offset: 76393},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 2050, col: 39, offset: 76402},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2051, col: 5, offset: 76460},
							label: "term3",
							expr: &zeroOrOneExpr{
								pos: position{line: 2051, col: 11, offset: 76466},
								expr: &actionExpr{
									pos: position{line: 2051, col: 12, offset: 76467},
									run: (*parser).callonConcealedIndexTerm19,
									expr: &seqExpr{
										pos: position{line: 2051, col: 12, offset: 76467},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 2051, col: 12, offset: 76467},
												expr: &ruleRefExpr{
													pos:  position{line: 2051, col: 12, offset: 76467},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 2051, col: 19, offset: 76474},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 2051, col: 23, offset: 76478},
												expr: &ruleRefExpr{
													pos:  position{line: 2051, col: 23, offset: 76478},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 2051, col: 30, offset: 76485},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 2051, col: 39, offset: 76494},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 2052, col: 5, offset: 76552},
							val:        ")))",
							ignoreCase: false,
							want:       "\")))\"",
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTermContent",
			pos:  position{line: 2056, col: 1, offset: 76631},
			expr: &actionExpr{
				pos: position{line: 2056, col: 30, offset: 76660},
				run: (*parser).callonConcealedIndexTermContent1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2056, col: 30, offset: 76660},
					expr: &choiceExpr{
						pos: position{line: 2056, col: 31, offset: 76661},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 2056, col: 31, offset: 76661},
								name: "Alphanum",
							},
							&ruleRefExpr{
								pos:  position{line: 2056, col: 42, offset: 76672},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "BlankLine",
			pos:  position{line: 2063, col: 1, offset: 76821},
			expr: &actionExpr{
				pos: position{line: 2063, col: 14, offset: 76834},
				run: (*parser).callonBlankLine1,
				expr: &seqExpr{
					pos: position{line: 2063, col: 14, offset: 76834},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2063, col: 14, offset: 76834},
							expr: &ruleRefExpr{
								pos:  position{line: 2063, col: 15, offset: 76835},
								name: "EOF",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 2063, col: 19, offset: 76839},
							expr: &ruleRefExpr{
								pos:  position{line: 2063, col: 19, offset: 76839},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2063, col: 26, offset: 76846},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "Symbol",
			pos:  position{line: 2071, col: 1, offset: 76991},
			expr: &choiceExpr{
				pos: position{line: 2071, col: 11, offset: 77001},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2071, col: 11, offset: 77001},
						name: "Apostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 2071, col: 24, offset: 77014},
						name: "Copyright",
					},
					&ruleRefExpr{
						pos:  position{line: 2071, col: 36, offset: 77026},
						name: "Trademark",
					},
					&ruleRefExpr{
						pos:  position{line: 2071, col: 48, offset: 77038},
						name: "Registered",
					},
					&ruleRefExpr{
						pos:  position{line: 2071, col: 61, offset: 77051},
						name: "Ellipsis",
					},
					&ruleRefExpr{
						pos:  position{line: 2071, col: 72, offset: 77062},
						name: "ImpliedApostrophe",
					},
				},
			},
		},
		{
			name: "Apostrophe",
			pos:  position{line: 2073, col: 1, offset: 77081},
			expr: &actionExpr{
				pos: position{line: 2073, col: 15, offset: 77095},
				run: (*parser).callonApostrophe1,
				expr: &litMatcher{
					pos:        position{line: 2073, col: 15, offset: 77095},
					val:        "`'",
					ignoreCase: false,
					want:       "\"`'\"",
				},
			},
		},
		{
			name: "Copyright",
			pos:  position{line: 2076, col: 1, offset: 77148},
			expr: &actionExpr{
				pos: position{line: 2076, col: 14, offset: 77161},
				run: (*parser).callonCopyright1,
				expr: &litMatcher{
					pos:        position{line: 2076, col: 14, offset: 77161},
					val:        "(C)",
					ignoreCase: false,
					want:       "\"(C)\"",
				},
			},
		},
		{
			name: "Trademark",
			pos:  position{line: 2079, col: 1, offset: 77215},
			expr: &actionExpr{
				pos: position{line: 2079, col: 14, offset: 77228},
				run: (*parser).callonTrademark1,
				expr: &litMatcher{
					pos:        position{line: 2079, col: 14, offset: 77228},
					val:        "(TM)",
					ignoreCase: false,
					want:       "\"(TM)\"",
				},
			},
		},
		{
			name: "Registered",
			pos:  position{line: 2082, col: 1, offset: 77283},
			expr: &actionExpr{
				pos: position{line: 2082, col: 15, offset: 77297},
				run: (*parser).callonRegistered1,
				expr: &litMatcher{
					pos:        position{line: 2082, col: 15, offset: 77297},
					val:        "(R)",
					ignoreCase: false,
					want:       "\"(R)\"",
				},
			},
		},
		{
			name: "Ellipsis",
			pos:  position{line: 2085, col: 1, offset: 77351},
			expr: &actionExpr{
				pos: position{line: 2085, col: 13, offset: 77363},
				run: (*parser).callonEllipsis1,
				expr: &litMatcher{
					pos:        position{line: 2085, col: 13, offset: 77363},
					val:        "...",
					ignoreCase: false,
					want:       "\"...\"",
				},
			},
		},
		{
			name: "ImpliedApostrophe",
			pos:  position{line: 2093, col: 1, offset: 77640},
			expr: &actionExpr{
				pos: position{line: 2093, col: 22, offset: 77661},
				run: (*parser).callonImpliedApostrophe1,
				expr: &seqExpr{
					pos: position{line: 2093, col: 22, offset: 77661},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 2093, col: 22, offset: 77661},
							name: "Alphanum",
						},
						&litMatcher{
							pos:        position{line: 2093, col: 31, offset: 77670},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&andExpr{
							pos: position{line: 2093, col: 35, offset: 77674},
							expr: &charClassMatcher{
								pos:        position{line: 2093, col: 36, offset: 77675},
								val:        "[\\pL]",
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "SpecialCharacter",
			pos:  position{line: 2102, col: 1, offset: 78037},
			expr: &choiceExpr{
				pos: position{line: 2102, col: 21, offset: 78057},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2102, col: 21, offset: 78057},
						run: (*parser).callonSpecialCharacter2,
						expr: &ruleRefExpr{
							pos:  position{line: 2102, col: 21, offset: 78057},
							name: "InternalCrossReference",
						},
					},
					&actionExpr{
						pos: position{line: 2105, col: 9, offset: 78220},
						run: (*parser).callonSpecialCharacter4,
						expr: &choiceExpr{
							pos: position{line: 2105, col: 10, offset: 78221},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 2105, col: 10, offset: 78221},
									val:        "<",
									ignoreCase: false,
									want:       "\"<\"",
								},
								&litMatcher{
									pos:        position{line: 2105, col: 16, offset: 78227},
									val:        ">",
									ignoreCase: false,
									want:       "\">\"",
								},
								&litMatcher{
									pos:        position{line: 2105, col: 22, offset: 78233},
									val:        "&",
									ignoreCase: false,
									want:       "\"&\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Alphanum",
			pos:  position{line: 2112, col: 1, offset: 78411},
			expr: &charClassMatcher{
				pos:        position{line: 2112, col: 13, offset: 78423},
				val:        "[\\pL0-9]",
				ranges:     []rune{'0', '9'},
				classes:    []*unicode.RangeTable{rangeTable("L")},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Parenthesis",
			pos:  position{line: 2114, col: 1, offset: 78433},
			expr: &choiceExpr{
				pos: position{line: 2114, col: 16, offset: 78448},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2114, col: 16, offset: 78448},
						val:        "(",
						ignoreCase: false,
						want:       "\"(\"",
					},
					&litMatcher{
						pos:        position{line: 2114, col: 22, offset: 78454},
						val:        ")",
						ignoreCase: false,
						want:       "\")\"",
					},
					&litMatcher{
						pos:        position{line: 2114, col: 28, offset: 78460},
						val:        "[",
						ignoreCase: false,
						want:       "\"[\"",
					},
					&litMatcher{
						pos:        position{line: 2114, col: 34, offset: 78466},
						val:        "]",
						ignoreCase: false,
						want:       "\"]\"",
					},
					&litMatcher{
						pos:        position{line: 2114, col: 40, offset: 78472},
						val:        "{",
						ignoreCase: false,
						want:       "\"{\"",
					},
					&litMatcher{
						pos:        position{line: 2114, col: 46, offset: 78478},
						val:        "}",
						ignoreCase: false,
						want:       "\"}\"",
					},
				},
			},
		},
		{
			name: "Alphanums",
			pos:  position{line: 2116, col: 1, offset: 78484},
			expr: &actionExpr{
				pos: position{line: 2116, col: 14, offset: 78497},
				run: (*parser).callonAlphanums1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2116, col: 14, offset: 78497},
					expr: &charClassMatcher{
						pos:        position{line: 2116, col: 14, offset: 78497},
						val:        "[\\pL0-9]",
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Word",
			pos:  position{line: 2120, col: 1, offset: 78543},
			expr: &choiceExpr{
				pos: position{line: 2124, col: 5, offset: 78870},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2124, col: 5, offset: 78870},
						run: (*parser).callonWord2,
						expr: &seqExpr{
							pos: position{line: 2124, col: 5, offset: 78870},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2124, col: 5, offset: 78870},
									expr: &charClassMatcher{
										pos:        position{line: 2124, col: 5, offset: 78870},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 2124, col: 15, offset: 78880},
									expr: &choiceExpr{
										pos: position{line: 2124, col: 17, offset: 78882},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2124, col: 17, offset: 78882},
												val:        "[\\r\\n ,\\]]",
												chars:      []rune{'\r', '\n', ' ', ',', ']'},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 2124, col: 30, offset: 78895},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2126, col: 9, offset: 78965},
						run: (*parser).callonWord10,
						expr: &seqExpr{
							pos: position{line: 2126, col: 9, offset: 78965},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2126, col: 9, offset: 78965},
									expr: &charClassMatcher{
										pos:        position{line: 2126, col: 9, offset: 78965},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 2126, col: 19, offset: 78975},
									expr: &seqExpr{
										pos: position{line: 2126, col: 20, offset: 78976},
										exprs: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2126, col: 20, offset: 78976},
												val:        "[=*_`]",
												chars:      []rune{'=', '*', '_', '`'},
												ignoreCase: false,
												inverted:   false,
											},
											&oneOrMoreExpr{
												pos: position{line: 2126, col: 27, offset: 78983},
												expr: &charClassMatcher{
													pos:        position{line: 2126, col: 27, offset: 78983},
													val:        "[\\pL0-9]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineWord",
			pos:  position{line: 2130, col: 1, offset: 79059},
			expr: &choiceExpr{
				pos: position{line: 2131, col: 5, offset: 79140},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2131, col: 5, offset: 79140},
						run: (*parser).callonInlineWord2,
						expr: &seqExpr{
							pos: position{line: 2131, col: 5, offset: 79140},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2131, col: 5, offset: 79140},
									expr: &charClassMatcher{
										pos:        position{line: 2131, col: 5, offset: 79140},
										val:        "[\\pL0-9,?!;]",
										chars:      []rune{',', '?', '!', ';'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 2131, col: 19, offset: 79154},
									expr: &choiceExpr{
										pos: position{line: 2131, col: 21, offset: 79156},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2131, col: 21, offset: 79156},
												val:        "[\\r\\n ]",
												chars:      []rune{'\r', '\n', ' '},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 2131, col: 31, offset: 79166},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2133, col: 9, offset: 79235},
						name: "Word",
					},
				},
			},
		},
		{
			name: "AnyChar",
			pos:  position{line: 2136, col: 1, offset: 79335},
			expr: &actionExpr{
				pos: position{line: 2136, col: 12, offset: 79346},
				run: (*parser).callonAnyChar1,
				expr: &charClassMatcher{
					pos:        position{line: 2136, col: 12, offset: 79346},
					val:        "[^\\r\\n]",
					chars:      []rune{'\r', '\n'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "FileLocation",
			pos:  position{line: 2140, col: 1, offset: 79411},
			expr: &actionExpr{
				pos: position{line: 2140, col: 17, offset: 79427},
				run: (*parser).callonFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 2140, col: 17, offset: 79427},
					label: "path",
					expr: &oneOrMoreExpr{
						pos: position{line: 2140, col: 22, offset: 79432},
						expr: &choiceExpr{
							pos: position{line: 2140, col: 23, offset: 79433},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 2140, col: 23, offset: 79433},
									name: "Filename",
								},
								&ruleRefExpr{
									pos:  position{line: 2140, col: 34, offset: 79444},
									name: "ElementPlaceHolder",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Location",
			pos:  position{line: 2144, col: 1, offset: 79525},
			expr: &actionExpr{
				pos: position{line: 2144, col: 13, offset: 79537},
				run: (*parser).callonLocation1,
				expr: &seqExpr{
					pos: position{line: 2144, col: 13, offset: 79537},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2144, col: 13, offset: 79537},
							label: "scheme",
							expr: &zeroOrOneExpr{
								pos: position{line: 2144, col: 20, offset: 79544},
								expr: &ruleRefExpr{
									pos:  position{line: 2144, col: 21, offset: 79545},
									name: "Scheme",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2144, col: 30, offset: 79554},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 2144, col: 35, offset: 79559},
								expr: &choiceExpr{
									pos: position{line: 2144, col: 36, offset: 79560},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 2144, col: 36, offset: 79560},
											name: "Filename",
										},
										&ruleRefExpr{
											pos:  position{line: 2144, col: 47, offset: 79571},
											name: "ElementPlaceHolder",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LocationWithScheme",
			pos:  position{line: 2148, col: 1, offset: 79656},
			expr: &actionExpr{
				pos: position{line: 2148, col: 23, offset: 79678},
				run: (*parser).callonLocationWithScheme1,
				expr: &seqExpr{
					pos: position{line: 2148, col: 23, offset: 79678},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2148, col: 23, offset: 79678},
							label: "scheme",
							expr: &ruleRefExpr{
								pos:  position{line: 2148, col: 31, offset: 79686},
								name: "Scheme",
							},
						},
						&labeledExpr{
							pos:   position{line: 2148, col: 39, offset: 79694},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 2148, col: 44, offset: 79699},
								expr: &choiceExpr{
									pos: position{line: 2148, col: 45, offset: 79700},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 2148, col: 45, offset: 79700},
											name: "Filename",
										},
										&ruleRefExpr{
											pos:  position{line: 2148, col: 56, offset: 79711},
											name: "ElementPlaceHolder",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Filename",
			pos:  position{line: 2152, col: 1, offset: 79796},
			expr: &actionExpr{
				pos: position{line: 2152, col: 13, offset: 79808},
				run: (*parser).callonFilename1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2152, col: 13, offset: 79808},
					expr: &charClassMatcher{
						pos:        position{line: 2152, col: 14, offset: 79809},
						val:        "[^\\r\\n[\\]\\uFFFD ]",
						chars:      []rune{'\r', '\n', '[', ']', '�', ' '},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "Scheme",
			pos:  position{line: 2156, col: 1, offset: 79931},
			expr: &choiceExpr{
				pos: position{line: 2156, col: 11, offset: 79941},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2156, col: 11, offset: 79941},
						val:        "http://",
						ignoreCase: false,
						want:       "\"http://\"",
					},
					&litMatcher{
						pos:        position{line: 2156, col: 23, offset: 79953},
						val:        "https://",
						ignoreCase: false,
						want:       "\"https://\"",
					},
					&litMatcher{
						pos:        position{line: 2156, col: 36, offset: 79966},
						val:        "ftp://",
						ignoreCase: false,
						want:       "\"ftp://\"",
					},
					&litMatcher{
						pos:        position{line: 2156, col: 47, offset: 79977},
						val:        "irc://",
						ignoreCase: false,
						want:       "\"irc://\"",
					},
					&litMatcher{
						pos:        position{line: 2156, col: 58, offset: 79988},
						val:        "mailto:",
						ignoreCase: false,
						want:       "\"mailto:\"",
					},
				},
			},
		},
		{
			name: "Id",
			pos:  position{line: 2158, col: 1, offset: 79999},
			expr: &actionExpr{
				pos: position{line: 2158, col: 7, offset: 80005},
				run: (*parser).callonId1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2158, col: 7, offset: 80005},
					expr: &charClassMatcher{
						pos:        position{line: 2158, col: 7, offset: 80005},
						val:        "[^[\\]<>,]",
						chars:      []rune{'[', ']', '<', '>', ','},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "Digit",
			pos:  position{line: 2162, col: 1, offset: 80130},
			expr: &actionExpr{
				pos: position{line: 2162, col: 10, offset: 80139},
				run: (*parser).callonDigit1,
				expr: &charClassMatcher{
					pos:        position{line: 2162, col: 10, offset: 80139},
					val:        "[0-9]",
					ranges:     []rune{'0', '9'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "Number",
			pos:  position{line: 2166, col: 1, offset: 80181},
			expr: &actionExpr{
				pos: position{line: 2166, col: 11, offset: 80191},
				run: (*parser).callonNumber1,
				expr: &seqExpr{
					pos: position{line: 2166, col: 11, offset: 80191},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 2166, col: 11, offset: 80191},
							expr: &litMatcher{
								pos:        position{line: 2166, col: 11, offset: 80191},
								val:        "-",
								ignoreCase: false,
								want:       "\"-\"",
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 2166, col: 16, offset: 80196},
							expr: &ruleRefExpr{
								pos:  position{line: 2166, col: 16, offset: 80196},
								name: "Digit",
							},
						},
					},
				},
			},
		},
		{
			name: "Space",
			pos:  position{line: 2170, col: 1, offset: 80248},
			expr: &choiceExpr{
				pos: position{line: 2170, col: 10, offset: 80257},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2170, col: 10, offset: 80257},
						val:        " ",
						ignoreCase: false,
						want:       "\" \"",
					},
					&actionExpr{
						pos: position{line: 2170, col: 16, offset: 80263},
						run: (*parser).callonSpace3,
						expr: &litMatcher{
							pos:        position{line: 2170, col: 16, offset: 80263},
							val:        "\t",
							ignoreCase: false,
							want:       "\"\\t\"",
						},
					},
				},
			},
		},
		{
			name: "Newline",
			pos:  position{line: 2174, col: 1, offset: 80304},
			expr: &choiceExpr{
				pos: position{line: 2174, col: 12, offset: 80315},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2174, col: 12, offset: 80315},
						val:        "\r\n",
						ignoreCase: false,
						want:       "\"\\r\\n\"",
					},
					&litMatcher{
						pos:        position{line: 2174, col: 21, offset: 80324},
						val:        "\r",
						ignoreCase: false,
						want:       "\"\\r\"",
					},
					&litMatcher{
						pos:        position{line: 2174, col: 28, offset: 80331},
						val:        "\n",
						ignoreCase: false,
						want:       "\"\\n\"",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 2176, col: 1, offset: 80337},
			expr: &notExpr{
				pos: position{line: 2176, col: 8, offset: 80344},
				expr: &anyMatcher{
					line: 2176, col: 9, offset: 80345,
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 2178, col: 1, offset: 80348},
			expr: &choiceExpr{
				pos: position{line: 2178, col: 8, offset: 80355},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2178, col: 8, offset: 80355},
						name: "Newline",
					},
					&ruleRefExpr{
						pos:  position{line: 2178, col: 18, offset: 80365},
						name: "EOF",
					},
				},
			},
		},
	},
}

func (c *current) onRawSource1(lines interface{}) (interface{}, error) {
	return lines.([]interface{}), nil
}

func (p *parser) callonRawSource1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawSource1(stack["lines"])
}

func (c *current) onRawSection4() (interface{}, error) {

	// `=` is level 0, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonRawSection4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawSection4()
}

func (c *current) onRawSection7(level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonRawSection7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawSection7(stack["level"])
}

func (c *current) onRawSection1(level, title interface{}) (interface{}, error) {
	return types.NewRawSection(level.(int), title.(string))
}

func (p *parser) callonRawSection1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawSection1(stack["level"], stack["title"])
}

func (c *current) onRawSectionTitle1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonRawSectionTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawSectionTitle1()
}

func (c *current) onRawLine6() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonRawLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawLine6()
}

func (c *current) onRawLine1(content interface{}) (interface{}, error) {
	// line MAY have content
	return types.NewRawLine(content.(string))

}

func (p *parser) callonRawLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawLine1(stack["content"])
}

func (c *current) onRawDocument1(frontmatter, blocks interface{}) (interface{}, error) {
	return types.NewRawDocument(frontmatter, blocks.([]interface{}))
}

func (p *parser) callonRawDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawDocument1(stack["frontmatter"], stack["blocks"])
}

func (c *current) onRawBlocks1(header, blocks interface{}) (interface{}, error) {
	if header != nil && blocks != nil {
		return append([]interface{}{header}, blocks.([]interface{})...), nil
	} else if blocks != nil {
		return blocks.([]interface{}), nil
	}
	return []interface{}{}, nil
}

func (p *parser) callonRawBlocks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawBlocks1(stack["header"], stack["blocks"])
}

func (c *current) onDocumentRawBlock1(block interface{}) (interface{}, error) {
	log.Debugf("new raw block of kind '%T'", block)
	return block, nil
}

func (p *parser) callonDocumentRawBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawBlock1(stack["block"])
}

func (c *current) onYamlFrontMatter1(content interface{}) (interface{}, error) {
	return types.NewYamlFrontMatter(content.(string))
}

func (p *parser) callonYamlFrontMatter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatter1(stack["content"])
}

func (c *current) onYamlFrontMatterContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonYamlFrontMatterContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatterContent1()
}

func (c *current) onDocumentHeader1(title, id, authors, revision interface{}) (interface{}, error) {
	return types.NewDocumentHeader(title.([]interface{}), authors, revision)
}

func (p *parser) callonDocumentHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader1(stack["title"], stack["id"], stack["authors"], stack["revision"])
}

func (c *current) onDocumentAuthorsInlineForm1(authors interface{}) (interface{}, error) {
	return types.NewDocumentAuthors(authors.([]interface{}))
}

func (p *parser) callonDocumentAuthorsInlineForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsInlineForm1(stack["authors"])
}

func (c *current) onDocumentAuthorsAttributeForm1(author interface{}) (interface{}, error) {
	return []types.DocumentAuthor{author.(types.DocumentAuthor)}, nil
}

func (p *parser) callonDocumentAuthorsAttributeForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsAttributeForm1(stack["author"])
}

func (c *current) onDocumentAuthor1(fullname, email interface{}) (interface{}, error) {
	return types.NewDocumentAuthor(fullname, email)
}

func (p *parser) callonDocumentAuthor1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthor1(stack["fullname"], stack["email"])
}

func (c *current) onDocumentAuthorName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorName1()
}

func (c *current) onDocumentAuthorEmail5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorEmail5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail5()
}

func (c *current) onDocumentAuthorEmail1(email interface{}) (interface{}, error) {
	return email, nil
}

func (p *parser) callonDocumentAuthorEmail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail1(stack["email"])
}

func (c *current) onDocumentRevision9(revnumber, revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(revnumber, revdate, revremark)

}

func (p *parser) callonDocumentRevision9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision9(stack["revnumber"], stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision23(revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(nil, revdate, revremark)

}

func (p *parser) callonDocumentRevision23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision23(stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision1(revision interface{}) (interface{}, error) {
	return revision, nil
}

func (p *parser) callonDocumentRevision1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision1(stack["revision"])
}

func (c *current) onDocumentRevisionNumber2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber2()
}

func (c *current) onDocumentRevisionNumber8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber8()
}

func (c *current) onDocumentRevisionDate1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionDate1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionDate1()
}

func (c *current) onDocumentRevisionRemark1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionRemark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionRemark1()
}

func (c *current) onAttributeDeclaration9(value interface{}) (interface{}, error) {

	return value, nil

}

func (p *parser) callonAttributeDeclaration9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration9(stack["value"])
}

func (c *current) onAttributeDeclaration1(name, value interface{}) (interface{}, error) {
	return types.NewAttributeDeclaration(name.(string), value)
}

func (p *parser) callonAttributeDeclaration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration1(stack["name"], stack["value"])
}

func (c *current) onAttributeName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeName1()
}

func (c *current) onAttributeDeclarationValue1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeDeclarationValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue1()
}

func (c *current) onAttributeReset2(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonAttributeReset2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset2(stack["name"])
}

func (c *current) onAttributeReset11(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonAttributeReset11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset11(stack["name"])
}

func (c *current) onAttrSub1(name interface{}) (interface{}, error) {
	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonAttrSub1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrSub1(stack["name"])
}

func (c *current) onCounterSub11(name interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, nil)
}

func (p *parser) callonCounterSub11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSub11(stack["name"])
}

func (c *current) onCounterSub21(name interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonCounterSub21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSub21(stack["name"])
}

func (c *current) onCounterSubAlpha1(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonCounterSubAlpha1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubAlpha1(stack["name"], stack["start"])
}

func (c *current) onCounterSubAlpha21(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, start)
}

func (p *parser) callonCounterSubAlpha21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubAlpha21(stack["name"], stack["start"])
}

func (c *current) onCounterSubStart8() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCounterSubStart8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubStart8()
}

func (c *current) onCounterSubStart1(name, num interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, num.(int))
}

func (p *parser) callonCounterSubStart1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubStart1(stack["name"], stack["num"])
}

func (c *current) onCounterSubStart28() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCounterSubStart28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubStart28()
}

func (c *current) onCounterSubStart21(name, num interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, num.(int))
}

func (p *parser) callonCounterSubStart21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubStart21(stack["name"], stack["num"])
}

func (c *current) onElementAttribute1(attr interface{}) (interface{}, error) {
	return attr, nil // avoid returning something like `[]interface{}{attr, EOL}`
}

func (p *parser) callonElementAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttribute1(stack["attr"])
}

func (c *current) onElementID1(id interface{}) (interface{}, error) {
	return types.NewElementID(id)
}

func (p *parser) callonElementID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementID1(stack["id"])
}

func (c *current) onInlineElementID1(id interface{}) (interface{}, error) {
	// no EOL here since there can be multiple InlineElementID on the same line
	return types.NewInlineElementID(id.(string))
}

func (p *parser) callonInlineElementID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementID1(stack["id"])
}

func (c *current) onElementTitle1(title interface{}) (interface{}, error) {
	return types.NewElementTitle(title.([]interface{}))
}

func (p *parser) callonElementTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitle1(stack["title"])
}

func (c *current) onElementTitleContent3() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonElementTitleContent3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitleContent3()
}

func (c *current) onElementTitleContent9() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonElementTitleContent9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitleContent9()
}

func (c *current) onElementShortHandAttributes1(attributes interface{}) (interface{}, error) {
	return types.NewAttributeGroup(attributes.([]interface{})...)
}

func (p *parser) callonElementShortHandAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementShortHandAttributes1(stack["attributes"])
}

func (c *current) onBlockAttributeList1(attributes interface{}) (interface{}, error) {
	return types.NewAttributeGroup(attributes.([]interface{})...)
}

func (p *parser) callonBlockAttributeList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributeList1(stack["attributes"])
}

func (c *current) onBlockAttrStyle1(style interface{}) (interface{}, error) {
	return types.NewElementStyle(style)
}

func (p *parser) callonBlockAttrStyle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttrStyle1(stack["style"])
}

func (c *current) onBlockAttrPositional21(value interface{}) (interface{}, error) {
	if value != nil {
		return types.NewNamedAttribute(types.AttrPositional2, value)
	}
	return nil, nil
}

func (p *parser) callonBlockAttrPositional21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttrPositional21(stack["value"])
}

func (c *current) onBlockAttrPositional31(value interface{}) (interface{}, error) {
	if value != nil {
		return types.NewNamedAttribute(types.AttrPositional3, value)
	}
	return nil, nil
}

func (p *parser) callonBlockAttrPositional31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttrPositional31(stack["value"])
}

func (c *current) onLiteralBlockAttribute1() (interface{}, error) {
	return types.NewLiteralBlockAttribute()
}

func (p *parser) callonLiteralBlockAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralBlockAttribute1()
}

func (c *current) onPassthroughBlockAttribute1() (interface{}, error) {
	return types.NewPassthroughBlockAttribute()
}

func (p *parser) callonPassthroughBlockAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockAttribute1()
}

func (c *current) onExampleBlockAttribute1() (interface{}, error) {
	return types.NewExampleBlockAttribute()
}

func (p *parser) callonExampleBlockAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockAttribute1()
}

func (c *current) onListingBlockAttribute1() (interface{}, error) {
	return types.NewListingBlockAttribute()
}

func (p *parser) callonListingBlockAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockAttribute1()
}

func (c *current) onAdmonitionMarkerAttribute1(k interface{}) (interface{}, error) {
	return types.NewAdmonitionAttribute(k.(types.AdmonitionKind))
}

func (p *parser) callonAdmonitionMarkerAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionMarkerAttribute1(stack["k"])
}

func (c *current) onSourceAttributes6() (interface{}, error) {
	return "nowrap", nil

}

func (p *parser) callonSourceAttributes6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes6()
}

func (c *current) onSourceAttributes10(attr interface{}) (interface{}, error) {
	return attr, nil
}

func (p *parser) callonSourceAttributes10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes10(stack["attr"])
}

func (c *current) onSourceAttributes18(attr interface{}) (interface{}, error) {
	return attr, nil
}

func (p *parser) callonSourceAttributes18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes18(stack["attr"])
}

func (c *current) onSourceAttributes1(option, language, others interface{}) (interface{}, error) {
	return types.NewSourceAttributes(language, option, others.([]interface{})...)
}

func (p *parser) callonSourceAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes1(stack["option"], stack["language"], stack["others"])
}

func (c *current) onAttributeGroup1(attributes interface{}) (interface{}, error) {
	return types.NewAttributeGroup(attributes.([]interface{})...)
}

func (p *parser) callonAttributeGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeGroup1(stack["attributes"])
}

func (c *current) onNamedAttributes1(attributes interface{}) (interface{}, error) {
	return types.NewAttributeGroup(attributes.([]interface{})...)
}

func (p *parser) callonNamedAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttributes1(stack["attributes"])
}

func (c *current) onNamedAttribute1(key, value interface{}) (interface{}, error) {
	return types.NewNamedAttribute(key.(string), value)
}

func (p *parser) callonNamedAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttribute1(stack["key"], stack["value"])
}

func (c *current) onNamedAttributeKey1() (interface{}, error) {
	return strings.TrimSpace(string(c.text)), nil
}

func (p *parser) callonNamedAttributeKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttributeKey1()
}

func (c *current) onAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue1(stack["value"])
}

func (c *current) onSingleQuotedAttributeValue7() (interface{}, error) {
	// '=' and `,` signs are allowed within quotes
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuotedAttributeValue7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue7()
}

func (c *current) onSingleQuotedAttributeValue12() (interface{}, error) {
	return `'`, nil
}

func (p *parser) callonSingleQuotedAttributeValue12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue12()
}

func (c *current) onSingleQuotedAttributeValue14() (interface{}, error) {
	// `{` or `\`
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuotedAttributeValue14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue14()
}

func (c *current) onSingleQuotedAttributeValue1(elements interface{}) (interface{}, error) {
	return types.Reduce(elements), nil
}

func (p *parser) callonSingleQuotedAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue1(stack["elements"])
}

func (c *current) onDoubleQuotedAttributeValue7() (interface{}, error) {
	// '=' and `,` signs are allowed within quotes
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuotedAttributeValue7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue7()
}

func (c *current) onDoubleQuotedAttributeValue12() (interface{}, error) {
	// escaped "
	return types.NewStringElement(`"`) // escaped "

}

func (p *parser) callonDoubleQuotedAttributeValue12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue12()
}

func (c *current) onDoubleQuotedAttributeValue14() (interface{}, error) {
	// `{` or `\`
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuotedAttributeValue14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue14()
}

func (c *current) onDoubleQuotedAttributeValue1(elements interface{}) (interface{}, error) {
	return types.Reduce(elements), nil
}

func (p *parser) callonDoubleQuotedAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue1(stack["elements"])
}

func (c *current) onUnquotedAttributeValue5() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonUnquotedAttributeValue5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue5()
}

func (c *current) onUnquotedAttributeValue10() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonUnquotedAttributeValue10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue10()
}

func (c *current) onUnquotedAttributeValue1(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonUnquotedAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue1(stack["elements"])
}

func (c *current) onStandaloneAttributeKey1(key interface{}) (interface{}, error) {
	// value is not defined
	return types.NewNamedAttribute(key.(string), nil)
}

func (p *parser) callonStandaloneAttributeKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStandaloneAttributeKey1(stack["key"])
}

func (c *current) onQuoteAttributes1(author, title interface{}) (interface{}, error) {
	return types.NewQuoteAttributes("quote", author, title)
}

func (p *parser) callonQuoteAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttributes1(stack["author"], stack["title"])
}

func (c *current) onVerseAttributes1(author, title interface{}) (interface{}, error) {
	return types.NewQuoteAttributes("verse", author.(string), title.(string))
}

func (p *parser) callonVerseAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseAttributes1(stack["author"], stack["title"])
}

func (c *current) onQuoteAttribute1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttribute1()
}

func (c *current) onQuotedTextAttributes1(attributes interface{}) (interface{}, error) {
	return types.NewAttributeGroup(attributes.([]interface{})...)
}

func (p *parser) callonQuotedTextAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextAttributes1(stack["attributes"])
}

func (c *current) onQuotedTextAttrRole1(role interface{}) (interface{}, error) {
	return types.NewElementRole(role)
}

func (p *parser) callonQuotedTextAttrRole1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextAttrRole1(stack["role"])
}

func (c *current) onStandaloneAttributes1(attributes interface{}) (interface{}, error) {
	// standalone attributes, i.e., with nothing afterwards
	return types.NewAttributeGroup(attributes.([]interface{})...)
}

func (p *parser) callonStandaloneAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStandaloneAttributes1(stack["attributes"])
}

func (c *current) onShortHandAttrOption1(option interface{}) (interface{}, error) {
	return types.NewElementOption(option)
}

func (p *parser) callonShortHandAttrOption1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttrOption1(stack["option"])
}

func (c *current) onShortHandAttrID1(id interface{}) (interface{}, error) {
	return types.NewElementID(id)
}

func (p *parser) callonShortHandAttrID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttrID1(stack["id"])
}

func (c *current) onShortHandAttrRole1(role interface{}) (interface{}, error) {
	return types.NewElementRole(role)
}

func (p *parser) callonShortHandAttrRole1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttrRole1(stack["role"])
}

func (c *current) onPositionalValue1(value interface{}) (interface{}, error) {
	return types.Reduce(value, strings.TrimSpace), nil
}

func (p *parser) callonPositionalValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalValue1(stack["value"])
}

func (c *current) onShortHandValuePlain4() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandValuePlain4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandValuePlain4()
}

func (c *current) onShortHandValuePlain12() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandValuePlain12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandValuePlain12()
}

func (c *current) onShortHandValuePlain1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonShortHandValuePlain1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandValuePlain1(stack["first"], stack["others"])
}

func (c *current) onSection7() (interface{}, error) {

	// `=` is level 0, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonSection7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection7()
}

func (c *current) onSection10(attributes, level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonSection10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection10(stack["attributes"], stack["level"])
}

func (c *current) onSection1(attributes, level, title, id interface{}) (interface{}, error) {
	return types.NewSection(level.(int), title.([]interface{}), id.([]interface{}), attributes.([]interface{}))
}

func (p *parser) callonSection1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection1(stack["attributes"], stack["level"], stack["title"], stack["id"])
}

func (c *current) onTitleElements1(elements interface{}) (interface{}, error) {
	// absorbs heading and trailing spaces
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonTitleElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElements1(stack["elements"])
}

func (c *current) onTitleElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonTitleElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElement1(stack["element"])
}

func (c *current) onUserMacroBlock1(name, value, attributes interface{}) (interface{}, error) {
	return types.NewUserMacroBlock(name.(string), value.(string), attributes.(types.Attributes), string(c.text))
}

func (p *parser) callonUserMacroBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock1(stack["name"], stack["value"], stack["attributes"])
}

func (c *current) onInlineUserMacro1(name, value, attributes interface{}) (interface{}, error) {
	return types.NewInlineUserMacro(name.(string), value.(string), attributes.(types.Attributes), string(c.text))
}

func (p *parser) callonInlineUserMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro1(stack["name"], stack["value"], stack["attributes"])
}

func (c *current) onUserMacroName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUserMacroName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroName1()
}

func (c *current) onUserMacroValue1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUserMacroValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroValue1()
}

func (c *current) onUserMacroAttributes1(attributes interface{}) (interface{}, error) {
	return types.NewAttributeGroup(attributes.([]interface{})...)
}

func (p *parser) callonUserMacroAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroAttributes1(stack["attributes"])
}

func (c *current) onFileInclusion4(path, inlineAttributes interface{}) (interface{}, error) {

	return types.NewFileInclusion(path.(types.Location), inlineAttributes.(types.Attributes), string(c.text))

}

func (p *parser) callonFileInclusion4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion4(stack["path"], stack["inlineAttributes"])
}

func (c *current) onFileInclusion1(incl interface{}) (interface{}, error) {
	return incl.(types.FileInclusion), nil
}

func (p *parser) callonFileInclusion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion1(stack["incl"])
}

func (c *current) onFileIncludeAttributes1(attributes interface{}) (interface{}, error) {
	return types.NewAttributeGroup(attributes.([]interface{})...)
}

func (p *parser) callonFileIncludeAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileIncludeAttributes1(stack["attributes"])
}

func (c *current) onLineRangesAttribute1(lines interface{}) (interface{}, error) {

	return types.NewLineRangesAttribute(lines)
}

func (p *parser) callonLineRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttribute1(stack["lines"])
}

func (c *current) onLineRangesAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonLineRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleLineRanges9(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleLineRanges9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges9(stack["other"])
}

func (c *current) onMultipleLineRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultipleQuotedLineRanges10(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleQuotedLineRanges10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges10(stack["other"])
}

func (c *current) onMultipleQuotedLineRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleQuotedLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultiLineRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineRange1(stack["start"], stack["end"])
}

func (c *current) onMultiLineQuotedRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineQuotedRange1(stack["start"], stack["end"])
}

func (c *current) onSingleLineRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineRange1(stack["singleline"])
}

func (c *current) onSingleLineQuotedRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineQuotedRange1(stack["singleline"])
}

func (c *current) onUndefinedLineRange1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUndefinedLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUndefinedLineRange1()
}

func (c *current) onTagRangesAttribute1(tags interface{}) (interface{}, error) {
	//TODO: check if 'tags'/'tag' is allowed for both single and multiple values
	return types.NewTagRangesAttribute(tags.([]interface{}))
}

func (p *parser) callonTagRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttribute1(stack["tags"])
}

func (c *current) onTagRangesAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonTagRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleTagRanges7(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleTagRanges7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges7(stack["other"])
}

func (c *current) onMultipleTagRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleTagRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges1(stack["first"], stack["others"])
}

func (c *current) onTagRange2(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), true)
}

func (p *parser) callonTagRange2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange2(stack["tag"])
}

func (c *current) onTagRange7(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), false)
}

func (p *parser) callonTagRange7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange7(stack["tag"])
}

func (c *current) onTagWildcard4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagWildcard4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard4()
}

func (c *current) onTagWildcard7(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagWildcard7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard7(stack["stars"])
}

func (c *current) onTagWildcard1(stars interface{}) (interface{}, error) {
	return stars, nil
}

func (p *parser) callonTagWildcard1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard1(stack["stars"])
}

func (c *current) onIncludedFileLine8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine8()
}

func (c *current) onIncludedFileLine1(content interface{}) (interface{}, error) {
	return types.NewIncludedFileLine(content.([]interface{}))
}

func (p *parser) callonIncludedFileLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine1(stack["content"])
}

func (c *current) onIncludedFileStartTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileStartTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag5()
}

func (c *current) onIncludedFileStartTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileStartTag(tag.(string))
}

func (p *parser) callonIncludedFileStartTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag1(stack["tag"])
}

func (c *current) onIncludedFileEndTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileEndTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag5()
}

func (c *current) onIncludedFileEndTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileEndTag(tag.(string))
}

func (p *parser) callonIncludedFileEndTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag1(stack["tag"])
}

func (c *current) onListParagraph2(comment interface{}) (interface{}, error) {
	return comment, nil

}

func (p *parser) callonListParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph2(stack["comment"])
}

func (c *current) onListParagraph5(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), nil)

}

func (p *parser) callonListParagraph5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph5(stack["lines"])
}

func (c *current) onListParagraphLine24(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonListParagraphLine24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine24(stack["elements"])
}

func (c *current) onListParagraphLine1(line interface{}) (interface{}, error) {

	return line, nil

}

func (p *parser) callonListParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine1(stack["line"])
}

func (c *current) onContinuedListItemElement1(element interface{}) (interface{}, error) {
	return types.NewContinuedListItemElement(element) // offset is negative
}

func (p *parser) callonContinuedListItemElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemElement1(stack["element"])
}

func (c *current) onContinuedListItemContent1(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonContinuedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent1(stack["content"])
}

func (c *current) onOrderedListItem1(attributes, prefix, content interface{}) (interface{}, error) {
	return types.NewOrderedListItem(prefix.(types.OrderedListItemPrefix), content.([]interface{}), attributes.([]interface{}))
}

func (p *parser) callonOrderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItem1(stack["attributes"], stack["prefix"], stack["content"])
}

func (c *current) onOrderedListItemPrefix10() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonOrderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix10()
}

func (c *current) onOrderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonOrderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix13(stack["depth"])
}

func (c *current) onOrderedListItemPrefix7(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListItemPrefix(types.Arabic, 1)
	case 2:
		return types.NewOrderedListItemPrefix(types.LowerAlpha, 2)
	case 3:
		return types.NewOrderedListItemPrefix(types.LowerRoman, 3)
	case 4:
		return types.NewOrderedListItemPrefix(types.UpperAlpha, 4)
	default:
		return types.NewOrderedListItemPrefix(types.UpperRoman, 5)
	}

}

func (p *parser) callonOrderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix7(stack["depth"])
}

func (c *current) onOrderedListItemPrefix14() (interface{}, error) {
	// numbering style: "1."
	return types.NewOrderedListItemPrefix(types.Arabic, 1)

}

func (p *parser) callonOrderedListItemPrefix14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix14()
}

func (c *current) onOrderedListItemPrefix19() (interface{}, error) {
	// numbering style: "a."
	return types.NewOrderedListItemPrefix(types.LowerAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix19()
}

func (c *current) onOrderedListItemPrefix23() (interface{}, error) {
	// numbering style: "A."
	return types.NewOrderedListItemPrefix(types.UpperAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix23()
}

func (c *current) onOrderedListItemPrefix27() (interface{}, error) {
	// numbering style: "i)"
	return types.NewOrderedListItemPrefix(types.LowerRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix27()
}

func (c *current) onOrderedListItemPrefix32() (interface{}, error) {
	// numbering style: "I)"
	return types.NewOrderedListItemPrefix(types.UpperRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix32()
}

func (c *current) onOrderedListItemPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonOrderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix1(stack["prefix"])
}

func (c *current) onOrderedListItemContent1(elements interface{}) (interface{}, error) {
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonOrderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemContent1(stack["elements"])
}

func (c *current) onUnorderedListItem1(attributes, prefix, checkstyle, content interface{}) (interface{}, error) {
	return types.NewUnorderedListItem(prefix.(types.UnorderedListItemPrefix), checkstyle, content.([]interface{}), attributes.([]interface{}))
}

func (p *parser) callonUnorderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItem1(stack["attributes"], stack["prefix"], stack["checkstyle"], stack["content"])
}

func (c *current) onUnorderedListItemPrefix10() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonUnorderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix10()
}

func (c *current) onUnorderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonUnorderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix13(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix7(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListItemPrefix(types.OneAsterisk, 1)
	case 2:
		return types.NewUnorderedListItemPrefix(types.TwoAsterisks, 2)
	case 3:
		return types.NewUnorderedListItemPrefix(types.ThreeAsterisks, 3)
	case 4:
		return types.NewUnorderedListItemPrefix(types.FourAsterisks, 4)
	default:
		return types.NewUnorderedListItemPrefix(types.FiveAsterisks, 5)
	}

}

func (p *parser) callonUnorderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix7(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix15() (interface{}, error) {
	return types.NewUnorderedListItemPrefix(types.Dash, 1)

}

func (p *parser) callonUnorderedListItemPrefix15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix15()
}

func (c *current) onUnorderedListItemPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonUnorderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix1(stack["prefix"])
}

func (c *current) onUnorderedListItemCheckStyle7() (interface{}, error) {
	return types.Unchecked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle7()
}

func (c *current) onUnorderedListItemCheckStyle9() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle9()
}

func (c *current) onUnorderedListItemCheckStyle11() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle11()
}

func (c *current) onUnorderedListItemCheckStyle1(style interface{}) (interface{}, error) {
	return style, nil

}

func (p *parser) callonUnorderedListItemCheckStyle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle1(stack["style"])
}

func (c *current) onUnorderedListItemContent1(elements interface{}) (interface{}, error) {
	// Another list or a literal paragraph immediately following a list item will be implicitly included in the list item
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonUnorderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemContent1(stack["elements"])
}

func (c *current) onLabeledListItem1(attributes, term, separator, description interface{}) (interface{}, error) {
	return types.NewLabeledListItem(len(separator.(string))-1, term.([]interface{}), description, attributes.([]interface{}))
}

func (p *parser) callonLabeledListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItem1(stack["attributes"], stack["term"], stack["separator"], stack["description"])
}

func (c *current) onVerbatimLabeledListItemTerm3() (interface{}, error) {
	return types.NewStringElement(strings.TrimSpace(string(c.text)))
}

func (p *parser) callonVerbatimLabeledListItemTerm3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLabeledListItemTerm3()
}

func (c *current) onVerbatimLabeledListItemTerm1(content interface{}) (interface{}, error) {
	return types.NewInlineElements(content)
}

func (p *parser) callonVerbatimLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLabeledListItemTerm1(stack["content"])
}

func (c *current) onLabeledListItemTerm1(elements interface{}) (interface{}, error) {
	// rule as an extra entrypoint
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTerm1(stack["elements"])
}

func (c *current) onLabeledListItemTermElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonLabeledListItemTermElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTermElement1(stack["element"])
}

func (c *current) onLabeledListItemSeparator4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonLabeledListItemSeparator4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator4()
}

func (c *current) onLabeledListItemSeparator7(separator interface{}) (bool, error) {

	// use a predicate to make sure that only `::` to `::::` are allowed
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonLabeledListItemSeparator7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator7(stack["separator"])
}

func (c *current) onLabeledListItemSeparator1(separator interface{}) (interface{}, error) {
	return separator, nil
}

func (p *parser) callonLabeledListItemSeparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator1(stack["separator"])
}

func (c *current) onLabeledListItemDescription1(elements interface{}) (interface{}, error) {

	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemDescription1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemDescription1(stack["elements"])
}

func (c *current) onAdmonitionKind2() (interface{}, error) {
	return types.Tip, nil
}

func (p *parser) callonAdmonitionKind2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind2()
}

func (c *current) onAdmonitionKind4() (interface{}, error) {
	return types.Note, nil
}

func (p *parser) callonAdmonitionKind4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind4()
}

func (c *current) onAdmonitionKind6() (interface{}, error) {
	return types.Important, nil
}

func (p *parser) callonAdmonitionKind6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind6()
}

func (c *current) onAdmonitionKind8() (interface{}, error) {
	return types.Warning, nil
}

func (p *parser) callonAdmonitionKind8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind8()
}

func (c *current) onAdmonitionKind10() (interface{}, error) {
	return types.Caution, nil
}

func (p *parser) callonAdmonitionKind10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind10()
}

func (c *current) onRawParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes.([]interface{}))

}

func (p *parser) callonRawParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onRawParagraph15(attributes, content interface{}) (interface{}, error) {
	return types.NewMarkdownQuoteBlock(content.([]interface{}), attributes.([]interface{}))

}

func (p *parser) callonRawParagraph15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph15(stack["attributes"], stack["content"])
}

func (c *current) onRawParagraph28(attributes interface{}) (bool, error) {
	// verify that one of the attributes is `kind:passthrough`
	return types.HasAttributeWithValue(attributes, types.AttrBlockKind, types.Passthrough), nil

}

func (p *parser) callonRawParagraph28() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph28(stack["attributes"])
}

func (c *current) onRawParagraph23(attributes, content interface{}) (interface{}, error) {

	return types.NewPassthroughBlock(content.([]interface{}), attributes.([]interface{}))

}

func (p *parser) callonRawParagraph23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph23(stack["attributes"], stack["content"])
}

func (c *current) onRawParagraph32(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes.([]interface{}))

}

func (p *parser) callonRawParagraph32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph32(stack["attributes"], stack["lines"])
}

func (c *current) onMarkdownQuoteBlockRawContent2(content interface{}) (interface{}, error) {

	return content, nil
}

func (p *parser) callonMarkdownQuoteBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteBlockRawContent2(stack["content"])
}

func (c *current) onRawParagraphLine8(content interface{}) (bool, error) {
	// exclude line if it is a blankline
	if strings.Trim(content.(string), " \t") == "" {
		return false, nil
	}
	return true, nil

}

func (p *parser) callonRawParagraphLine8() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraphLine8(stack["content"])
}

func (c *current) onRawParagraphLine1(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonRawParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraphLine1(stack["content"])
}

func (c *current) onRawParagraphLineContent1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonRawParagraphLineContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraphLineContent1()
}

func (c *current) onSimpleRawParagraph6(attributes interface{}) (bool, error) {
	return !types.HasAttributeWithValue(attributes, types.AttrBlockKind, types.Literal), nil

}

func (p *parser) callonSimpleRawParagraph6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleRawParagraph6(stack["attributes"])
}

func (c *current) onSimpleRawParagraph1(attributes, firstLine, otherLines interface{}) (interface{}, error) {

	return types.NewParagraph(append([]interface{}{firstLine}, otherLines.([]interface{})...), attributes.([]interface{}))
}

func (p *parser) callonSimpleRawParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleRawParagraph1(stack["attributes"], stack["firstLine"], stack["otherLines"])
}

func (c *current) onFirstParagraphRawLine4(elements interface{}) (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonFirstParagraphRawLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstParagraphRawLine4(stack["elements"])
}

func (c *current) onFirstParagraphRawLine1(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))
}

func (p *parser) callonFirstParagraphRawLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstParagraphRawLine1(stack["content"])
}

func (c *current) onContinuedRawParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes.([]interface{}))

}

func (p *parser) callonContinuedRawParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedRawParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onContinuedRawParagraph12(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes.([]interface{}))
}

func (p *parser) callonContinuedRawParagraph12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedRawParagraph12(stack["attributes"], stack["lines"])
}

func (c *current) onContinuedRawParagraphLines7(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonContinuedRawParagraphLines7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedRawParagraphLines7(stack["line"])
}

func (c *current) onContinuedRawParagraphLines1(firstLine, otherLines interface{}) (interface{}, error) {
	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonContinuedRawParagraphLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedRawParagraphLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onInlineElements7(comment interface{}) (interface{}, error) {
	return types.NewInlineElements([]interface{}{comment})

}

func (p *parser) callonInlineElements7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements7(stack["comment"])
}

func (c *current) onInlineElements10(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonInlineElements10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements10(stack["elements"])
}

func (c *current) onInlineElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonInlineElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements1(stack["elements"])
}

func (c *current) onInlineElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonInlineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement1(stack["element"])
}

func (c *current) onLineBreak1() (interface{}, error) {
	return types.NewLineBreak()
}

func (p *parser) callonLineBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineBreak1()
}

func (c *current) onConstrainedQuotedText1(text interface{}) (interface{}, error) {
	// if a '^' or '~' is alone (ie, badly formatted superscript or subscript, then accept it as-is)
	return text, nil
}

func (p *parser) callonConstrainedQuotedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstrainedQuotedText1(stack["text"])
}

func (c *current) onSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	// rule used withn `words` to detect superscript or subscript portions, eg in math formulae.
	return string(c.text), nil
}

func (p *parser) callonSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptOrSuperscriptPrefix3()
}

func (c *current) onOneOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonOneOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOneOrMoreBackslashes1()
}

func (c *current) onTwoOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonTwoOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTwoOrMoreBackslashes1()
}

func (c *current) onDoubleQuoteBoldText1(attributes, elements interface{}) (interface{}, error) {
	return types.NewQuotedText(types.Bold, attributes, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldText1(stack["attributes"], stack["elements"])
}

func (c *current) onDoubleQuoteBoldTextElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonDoubleQuoteBoldTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement1(stack["element"])
}

func (c *current) onDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onSingleQuoteBoldText2(attributes, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '**' to emphazise a portion of a word)
	return types.NewQuotedText(types.Bold, attributes, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText2(stack["attributes"], stack["elements"])
}

func (c *current) onSingleQuoteBoldText17(attributes, elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation.
	return types.NewQuotedText(types.Bold, attributes, elements.([]interface{})) // include the second heading `*` as a regular StringElement in the bold content
}

func (p *parser) callonSingleQuoteBoldText17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText17(stack["attributes"], stack["elements"])
}

func (c *current) onSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onEscapedBoldText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "**", elements.([]interface{}))

}

func (p *parser) callonEscapedBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation
	result := append([]interface{}{"*"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "*", result)

}

func (p *parser) callonEscapedBoldText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "*", elements.([]interface{}))
}

func (p *parser) callonEscapedBoldText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicText1(attributes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Italic, attributes, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicText1(stack["attributes"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicTextElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonDoubleQuoteItalicTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement1(stack["element"])
}

func (c *current) onDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or a italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onSingleQuoteItalicText2(attributes, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '__' to emphazise a portion of a word)
	return types.NewQuotedText(types.Italic, attributes, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText2(stack["attributes"], stack["elements"])
}

func (c *current) onSingleQuoteItalicText14(attributes, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation.
	return types.NewQuotedText(types.Italic, attributes, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content
}

func (p *parser) callonSingleQuoteItalicText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText14(stack["attributes"], stack["elements"])
}

func (c *current) onSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or an italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onEscapedItalicText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "__", elements.([]interface{}))

}

func (p *parser) callonEscapedItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation
	result := append([]interface{}{"_"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "_", result)

}

func (p *parser) callonEscapedItalicText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "_", elements.([]interface{}))
}

func (p *parser) callonEscapedItalicText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceText1(attributes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Monospace, attributes, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceText1(stack["attributes"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceTextElement14() (interface{}, error) {
	// must be before SingleQuoteMonospaceText
	// do not convert to apostrophe (yet)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextElement14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement14()
}

func (c *current) onDoubleQuoteMonospaceTextElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonDoubleQuoteMonospaceTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement1(stack["element"])
}

func (c *current) onDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	// or a monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextFallbackCharacter3()
}

func (c *current) onSingleQuoteMonospaceText2(attributes, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs "``" to emphazise a portion of a word)
	return types.NewQuotedText(types.Monospace, attributes, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText2(stack["attributes"], stack["elements"])
}

func (c *current) onSingleQuoteMonospaceText14(attributes, elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation.
	return types.NewQuotedText(types.Monospace, attributes, elements.([]interface{})) // include the second heading "`" as a regular StringElement in the monospace content
}

func (p *parser) callonSingleQuoteMonospaceText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText14(stack["attributes"], stack["elements"])
}

func (c *current) onSingleQuoteMonospaceTextElement22() (interface{}, error) {
	// do not convert to apostrophe (yet)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextElement22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement22()
}

func (c *current) onSingleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	// or an monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextFallbackCharacter3()
}

func (c *current) onEscapedMonospaceText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "``", elements.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation
	result := append([]interface{}{"`"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "`", result)

}

func (p *parser) callonEscapedMonospaceText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "`", elements.([]interface{}))
}

func (p *parser) callonEscapedMonospaceText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText18(stack["backslashes"], stack["elements"])
}

func (c *current) onSingleQuotedString1(elements interface{}) (interface{}, error) {
	return types.NewQuotedString(types.SingleQuote, elements.([]interface{}))
}

func (p *parser) callonSingleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedString1(stack["elements"])
}

func (c *current) onSingleQuotedStringElements1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonSingleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElements1(stack["elements"])
}

func (c *current) onSingleQuotedStringElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonSingleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement1(stack["element"])
}

func (c *current) onSingleQuotedStringFallbackCharacter3() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuotedStringFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringFallbackCharacter3()
}

func (c *current) onDoubleQuotedString1(elements interface{}) (interface{}, error) {
	return types.NewQuotedString(types.DoubleQuote, elements.([]interface{}))
}

func (p *parser) callonDoubleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedString1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElements1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonDoubleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElements1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonDoubleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement1(stack["element"])
}

func (c *current) onDoubleQuotedStringFallbackCharacter1() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuotedStringFallbackCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringFallbackCharacter1()
}

func (c *current) onDoubleQuoteMarkedText1(attributes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Marked, attributes, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteMarkedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedText1(stack["attributes"], stack["elements"])
}

func (c *current) onDoubleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	// or a marked delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextFallbackCharacter3()
}

func (c *current) onSingleQuoteMarkedText2(attributes, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '##' to emphazise a portion of a word)
	return types.NewQuotedText(types.Marked, attributes, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText2(stack["attributes"], stack["elements"])
}

func (c *current) onSingleQuoteMarkedText14(attributes, elements interface{}) (interface{}, error) {
	// unbalanced `##` vs `#` punctuation.
	return types.NewQuotedText(types.Marked, attributes, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content
}

func (p *parser) callonSingleQuoteMarkedText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText14(stack["attributes"], stack["elements"])
}

func (c *current) onSingleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	// or a mark delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextFallbackCharacter3()
}

func (c *current) onEscapedMarkedText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "##", elements.([]interface{}))

}

func (p *parser) callonEscapedMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `##` vs `#` punctuation
	result := append([]interface{}{"#"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "#", result)

}

func (p *parser) callonEscapedMarkedText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "#", elements.([]interface{}))
}

func (p *parser) callonEscapedMarkedText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText18(stack["backslashes"], stack["elements"])
}

func (c *current) onSubscriptText1(attributes, element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Subscript, attributes, element)
}

func (p *parser) callonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptText1(stack["attributes"], stack["element"])
}

func (c *current) onNonSubscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '~'
	return c.text, nil
}

func (p *parser) callonNonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSubscriptText1()
}

func (c *current) onEscapedSubscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "~", element)
}

func (p *parser) callonEscapedSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSuperscriptText1(attributes, element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Superscript, attributes, element)
}

func (p *parser) callonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptText1(stack["attributes"], stack["element"])
}

func (c *current) onNonSuperscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '^'
	return c.text, nil
}

func (p *parser) callonNonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSuperscriptText1()
}

func (c *current) onEscapedSuperscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "^", element)
}

func (p *parser) callonEscapedSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSinglePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.SinglePlusPassthrough, []interface{}{content})
}

func (p *parser) callonSinglePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthrough1(stack["content"])
}

func (c *current) onSinglePlusPassthroughContent2() (interface{}, error) {
	// no space in the first or last position of the content, but allowed elsewhere
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent2()
}

func (c *current) onSinglePlusPassthroughContent24() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent24()
}

func (c *current) onTriplePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.TriplePlusPassthrough, []interface{}{content})
}

func (p *parser) callonTriplePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthrough1(stack["content"])
}

func (c *current) onTriplePlusPassthroughContent2() (interface{}, error) {
	// spaces and newlines are also allowed in the first or last position of the content and elsewhere too
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent2()
}

func (c *current) onTriplePlusPassthroughContent8() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent8()
}

func (c *current) onPassthroughMacro2(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.PassthroughMacro, []interface{}{content})
}

func (p *parser) callonPassthroughMacro2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro2(stack["content"])
}

func (c *current) onPassthroughMacro9(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.PassthroughMacro, content.([]interface{}))
}

func (p *parser) callonPassthroughMacro9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro9(stack["content"])
}

func (c *current) onPassthroughMacroCharacter1() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonPassthroughMacroCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacroCharacter1()
}

func (c *current) onInternalCrossReference2(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)
}

func (p *parser) callonInternalCrossReference2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference2(stack["id"], stack["label"])
}

func (c *current) onInternalCrossReference13(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)
}

func (p *parser) callonInternalCrossReference13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference13(stack["id"])
}

func (c *current) onExternalCrossReference1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewExternalCrossReference(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonExternalCrossReference1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onLinkAttributes1(firstAttr, otherAttrs interface{}) (interface{}, error) {
	return types.NewInlineLinkAttributes(append(firstAttr.([]interface{}), otherAttrs.([]interface{})...))
}

func (p *parser) callonLinkAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkAttributes1(stack["firstAttr"], stack["otherAttrs"])
}

func (c *current) onFirstLinkAttributeElement4(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFirstLinkAttributeElement4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement4(stack["elements"])
}

func (c *current) onFirstLinkAttributeElement20(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFirstLinkAttributeElement20() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement20(stack["elements"])
}

func (c *current) onFirstLinkAttributeElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonFirstLinkAttributeElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement1(stack["element"])
}

func (c *current) onAttributeChar1() (interface{}, error) {
	// excludes comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeChar1()
}

func (c *current) onQuotedAttributeChar1() (interface{}, error) {
	// does not exclude comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonQuotedAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedAttributeChar1()
}

func (c *current) onUnquotedAttributeChar1() (interface{}, error) {
	// excludes comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonUnquotedAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeChar1()
}

func (c *current) onImageBlock1(attributes, path, inlineAttributes interface{}) (interface{}, error) {
	// 'imagesdir' attribute is added after applying the attribute substitutions on the image location
	return types.NewImageBlock(path.(types.Location), inlineAttributes.(types.Attributes), attributes.([]interface{}))
}

func (p *parser) callonImageBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock1(stack["attributes"], stack["path"], stack["inlineAttributes"])
}

func (c *current) onImageBlockAttributes2(attribute interface{}) (interface{}, error) {
	return attribute, nil
}

func (p *parser) callonImageBlockAttributes2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlockAttributes2(stack["attribute"])
}

func (c *current) onImageAttrList1(alt, shortHands, width, height, others interface{}) (interface{}, error) {
	return types.NewAttributeGroup(alt, width, height, others)
}

func (p *parser) callonImageAttrList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAttrList1(stack["alt"], stack["shortHands"], stack["width"], stack["height"], stack["others"])
}

func (c *current) onInlineImage1(path, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineImage(path.(types.Location), inlineAttributes.(types.Attributes), c.globalStore["imagesdir"])
}

func (p *parser) callonInlineImage1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage1(stack["path"], stack["inlineAttributes"])
}

func (c *current) onInlineImageAttributes1(alt, width, height, others interface{}) (interface{}, error) {
	return types.NewAttributeGroup(alt, width, height, others)
}

func (p *parser) callonInlineImageAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImageAttributes1(stack["alt"], stack["width"], stack["height"], stack["others"])
}

func (c *current) onImageAlt1(value interface{}) (interface{}, error) {
	return types.NewInlineAttribute(types.AttrImageAlt, value)
}

func (p *parser) callonImageAlt1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAlt1(stack["value"])
}

func (c *current) onImageWidth1(value interface{}) (interface{}, error) {
	return types.NewInlineAttribute(types.AttrWidth, value)
}

func (p *parser) callonImageWidth1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageWidth1(stack["value"])
}

func (c *current) onImageHeight1(value interface{}) (interface{}, error) {
	return types.NewInlineAttribute(types.AttrImageHeight, value)
}

func (p *parser) callonImageHeight1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageHeight1(stack["value"])
}

func (c *current) onInlineIcon5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineIcon5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon5()
}

func (c *current) onInlineIcon1(icon, attributes interface{}) (interface{}, error) {
	return types.NewIcon(icon.(string), attributes.(types.Attributes))
}

func (p *parser) callonInlineIcon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon1(stack["icon"], stack["attributes"])
}

func (c *current) onIconAttributes1(size, others interface{}) (interface{}, error) {
	// TODO: use ellipsis on `nv`?
	return types.NewAttributeGroup(size, others)
}

func (p *parser) callonIconAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIconAttributes1(stack["size"], stack["others"])
}

func (c *current) onIconSize1(value interface{}) (interface{}, error) {
	return types.NewInlineAttribute(types.AttrIconSize, value)
}

func (p *parser) callonIconSize1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIconSize1(stack["value"])
}

func (c *current) onInlineFootnote2(content interface{}) (interface{}, error) {
	return types.NewFootnote("", content.([]interface{}))
}

func (p *parser) callonInlineFootnote2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote2(stack["content"])
}

func (c *current) onInlineFootnote8(ref, content interface{}) (interface{}, error) {
	return types.NewFootnote(ref.(string), content)
}

func (p *parser) callonInlineFootnote8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote8(stack["ref"], stack["content"])
}

func (c *current) onFootnoteContent1(elements interface{}) (interface{}, error) {
	// footnote content may span multiple lines
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonFootnoteContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteContent1(stack["elements"])
}

func (c *current) onCallout5() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCallout5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout5()
}

func (c *current) onCallout1(ref interface{}) (interface{}, error) {
	return types.NewCallout(ref.(int))
}

func (p *parser) callonCallout1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout1(stack["ref"])
}

func (c *current) onCalloutListItem1(ref, description interface{}) (interface{}, error) {
	return types.NewCalloutListItem(ref.(int), description.([]interface{}))
}

func (p *parser) callonCalloutListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItem1(stack["ref"], stack["description"])
}

func (c *current) onCalloutListItemPrefix5() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCalloutListItemPrefix5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItemPrefix5()
}

func (c *current) onCalloutListItemPrefix1(ref interface{}) (interface{}, error) {
	return ref, nil
}

func (p *parser) callonCalloutListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItemPrefix1(stack["ref"])
}

func (c *current) onThematicBreak1() (interface{}, error) {
	return types.NewThematicBreak()
}

func (p *parser) callonThematicBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onThematicBreak1()
}

func (c *current) onDelimitedBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock1(stack["block"])
}

func (c *current) onExampleBlock1(attributes, blocks interface{}) (interface{}, error) {
	return types.NewExampleBlock(blocks.([]interface{}), attributes.([]interface{}))
}

func (p *parser) callonExampleBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlock1(stack["attributes"], stack["blocks"])
}

func (c *current) onExampleBlockRawContent2(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonExampleBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent2(stack["element"])
}

func (c *current) onQuoteBlock6(attributes interface{}) (bool, error) {
	// AttrBlockKind may be missing or must be equal to `quote`
	if types.HasNotAttribute(attributes, types.AttrBlockKind) ||
		types.HasAttributeWithValue(attributes, types.AttrBlockKind, types.Quote) {
		return true, nil
	}
	return false, nil

}

func (p *parser) callonQuoteBlock6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlock6(stack["attributes"])
}

func (c *current) onQuoteBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewQuoteBlock(content.([]interface{}), attributes.([]interface{}))

}

func (p *parser) callonQuoteBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlock1(stack["attributes"], stack["content"])
}

func (c *current) onQuoteBlockRawContent2(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonQuoteBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent2(stack["element"])
}

func (c *current) onSidebarBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewSidebarBlock(content.([]interface{}), attributes.([]interface{}))
}

func (p *parser) callonSidebarBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlock1(stack["attributes"], stack["content"])
}

func (c *current) onSidebarBlockRawContent2(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSidebarBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent2(stack["element"])
}

func (c *current) onFencedBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewFencedBlock(content.([]interface{}), attributes.([]interface{}))
}

func (p *parser) callonFencedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlock1(stack["attributes"], stack["content"])
}

func (c *current) onFencedBlockRawContent2(line interface{}) (interface{}, error) {

	return line, nil
}

func (p *parser) callonFencedBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockRawContent2(stack["line"])
}

func (c *current) onListingBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewListingBlock(content.([]interface{}), attributes.([]interface{}))
}

func (p *parser) callonListingBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlock1(stack["attributes"], stack["content"])
}

func (c *current) onListingBlockRawContent2(line interface{}) (interface{}, error) {

	return line, nil
}

func (p *parser) callonListingBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockRawContent2(stack["line"])
}

func (c *current) onVerseBlock6(attributes interface{}) (bool, error) {
	// AttrBlockKind must be equal to `verse`
	return types.HasAttributeWithValue(attributes, types.AttrBlockKind, types.Verse), nil

}

func (p *parser) callonVerseBlock6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlock6(stack["attributes"])
}

func (c *current) onVerseBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewVerseBlock(content.([]interface{}), attributes.([]interface{}))

}

func (p *parser) callonVerseBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlock1(stack["attributes"], stack["content"])
}

func (c *current) onVerseBlockRawContent2(line interface{}) (interface{}, error) {

	return line, nil
}

func (p *parser) callonVerseBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockRawContent2(stack["line"])
}

func (c *current) onPassthroughBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewPassthroughBlock(content.([]interface{}), attributes.([]interface{}))
}

func (p *parser) callonPassthroughBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlock1(stack["attributes"], stack["content"])
}

func (c *current) onPassthroughBlockRawContent2(line interface{}) (interface{}, error) {

	return line, nil
}

func (p *parser) callonPassthroughBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockRawContent2(stack["line"])
}

func (c *current) onCommentBlock1(content interface{}) (interface{}, error) {
	return types.NewCommentBlock(content.([]interface{}), nil)
}

func (p *parser) callonCommentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlock1(stack["content"])
}

func (c *current) onCommentBlockRawContent2(line interface{}) (interface{}, error) {

	return line, nil
}

func (p *parser) callonCommentBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlockRawContent2(stack["line"])
}

func (c *current) onSingleLineComment1(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))
}

func (p *parser) callonSingleLineComment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineComment1(stack["content"])
}

func (c *current) onSingleLineCommentContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleLineCommentContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineCommentContent1()
}

func (c *current) onElementPlaceHolder5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonElementPlaceHolder5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementPlaceHolder5()
}

func (c *current) onElementPlaceHolder1(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonElementPlaceHolder1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementPlaceHolder1(stack["ref"])
}

func (c *current) onMarkdownQuoteMacroSubs1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), nil)
}

func (p *parser) callonMarkdownQuoteMacroSubs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteMacroSubs1(stack["lines"])
}

func (c *current) onMarkdownQuoteLine1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonMarkdownQuoteLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteLine1(stack["elements"])
}

func (c *current) onMarkdownQuoteAttribution5() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonMarkdownQuoteAttribution5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteAttribution5()
}

func (c *current) onMarkdownQuoteAttribution1(author interface{}) (interface{}, error) {
	return author, nil
}

func (p *parser) callonMarkdownQuoteAttribution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteAttribution1(stack["author"])
}

func (c *current) onNoneSubs5() (interface{}, error) {
	// just text, including empty lines
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonNoneSubs5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNoneSubs5()
}

func (c *current) onTable1(attributes, header, lines interface{}) (interface{}, error) {
	// end delimiter or end of file
	return types.NewTable(header, lines.([]interface{}), attributes.([]interface{}))

}

func (p *parser) callonTable1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTable1(stack["attributes"], stack["header"], stack["lines"])
}

func (c *current) onTableLineHeader1(cells interface{}) (interface{}, error) {
	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLineHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLineHeader1(stack["cells"])
}

func (c *current) onTableLine1(cells interface{}) (interface{}, error) {
	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLine1(stack["cells"])
}

func (c *current) onTableCell1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonTableCell1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCell1(stack["elements"])
}

func (c *current) onParagraphWithHeadingSpaces1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithSpacesOnFirstLine, lines.([]interface{}), attributes.([]interface{}))
}

func (p *parser) callonParagraphWithHeadingSpaces1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpaces1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithHeadingSpacesLines1(firstLine, otherLines interface{}) (interface{}, error) {

	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonParagraphWithHeadingSpacesLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onParagraphWithHeadingSpacesLine4() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonParagraphWithHeadingSpacesLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLine4()
}

func (c *current) onParagraphWithHeadingSpacesLine1(line interface{}) (interface{}, error) {
	// do not include the trailing 'EOL' on the first line
	return line, nil
}

func (p *parser) callonParagraphWithHeadingSpacesLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLine1(stack["line"])
}

func (c *current) onParagraphWithLiteralBlockDelimiter1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithDelimiter, lines.([]interface{}), attributes.([]interface{}))
}

func (p *parser) callonParagraphWithLiteralBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiter1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLines1(lines interface{}) (interface{}, error) {
	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine4()
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine1(line interface{}) (interface{}, error) {

	return line, nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine1(stack["line"])
}

func (c *current) onParagraphWithLiteralAttribute6(attributes interface{}) (bool, error) {
	return types.HasAttributeWithValue(attributes, types.AttrBlockKind, types.Literal), nil

}

func (p *parser) callonParagraphWithLiteralAttribute6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute6(stack["attributes"])
}

func (c *current) onParagraphWithLiteralAttribute1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithAttribute, lines.([]interface{}), attributes.([]interface{}))

}

func (p *parser) callonParagraphWithLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute1(stack["attributes"], stack["lines"])
}

func (c *current) onLiteralKind1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLiteralKind1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralKind1()
}

func (c *current) onLiteralParagraphLine6() (interface{}, error) {
	return types.NewRawLine(string(c.text))
}

func (p *parser) callonLiteralParagraphLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralParagraphLine6()
}

func (c *current) onLiteralParagraphLine1(content interface{}) (interface{}, error) {
	return content, nil // do not include the trailing 'EOL'
}

func (p *parser) callonLiteralParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralParagraphLine1(stack["content"])
}

func (c *current) onIndexTerm1(term interface{}) (interface{}, error) {
	return types.NewIndexTerm(term.([]interface{}))
}

func (p *parser) callonIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTerm1(stack["term"])
}

func (c *current) onIndexTermContent11() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIndexTermContent11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent11()
}

func (c *current) onIndexTermContent1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent1(stack["elements"])
}

func (c *current) onConcealedIndexTerm8(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm8(stack["content"])
}

func (c *current) onConcealedIndexTerm19(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm19(stack["content"])
}

func (c *current) onConcealedIndexTerm1(term1, term2, term3 interface{}) (interface{}, error) {
	return types.NewConcealedIndexTerm(term1, term2, term3)

}

func (p *parser) callonConcealedIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm1(stack["term1"], stack["term2"], stack["term3"])
}

func (c *current) onConcealedIndexTermContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonConcealedIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTermContent1()
}

func (c *current) onBlankLine1() (interface{}, error) {
	return types.NewBlankLine()
}

func (p *parser) callonBlankLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlankLine1()
}

func (c *current) onApostrophe1() (interface{}, error) {
	return types.NewStringElement("\u2019")
}

func (p *parser) callonApostrophe1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onApostrophe1()
}

func (c *current) onCopyright1() (interface{}, error) {
	return types.NewStringElement("\u00a9")
}

func (p *parser) callonCopyright1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCopyright1()
}

func (c *current) onTrademark1() (interface{}, error) {
	return types.NewStringElement("\u2122")
}

func (p *parser) callonTrademark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTrademark1()
}

func (c *current) onRegistered1() (interface{}, error) {
	return types.NewStringElement("\u00ae")
}

func (p *parser) callonRegistered1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegistered1()
}

func (c *current) onEllipsis1() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")
}

func (p *parser) callonEllipsis1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEllipsis1()
}

func (c *current) onImpliedApostrophe1() (interface{}, error) {
	return types.NewStringElement(string(c.text[:1]) + "\u2019")
}

func (p *parser) callonImpliedApostrophe1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImpliedApostrophe1()
}

func (c *current) onSpecialCharacter2() (interface{}, error) {
	// if we have a InternalCrossReference we just return a StringElement.
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSpecialCharacter2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacter2()
}

func (c *current) onSpecialCharacter4() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonSpecialCharacter4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacter4()
}

func (c *current) onAlphanums1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAlphanums1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAlphanums1()
}

func (c *current) onWord2() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord2()
}

func (c *current) onWord10() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord10()
}

func (c *current) onInlineWord2() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineWord2()
}

func (c *current) onAnyChar1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonAnyChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyChar1()
}

func (c *current) onFileLocation1(path interface{}) (interface{}, error) {
	return types.NewLocation("", path.([]interface{}))
}

func (p *parser) callonFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation1(stack["path"])
}

func (c *current) onLocation1(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocation1(stack["scheme"], stack["path"])
}

func (c *current) onLocationWithScheme1(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonLocationWithScheme1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocationWithScheme1(stack["scheme"], stack["path"])
}

func (c *current) onFilename1() (interface{}, error) {
	// not supported for now: EOL, space, "[", "]"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonFilename1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilename1()
}

func (c *current) onId1() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil
}

func (p *parser) callonId1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onId1()
}

func (c *current) onDigit1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDigit1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDigit1()
}

func (c *current) onNumber1() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonNumber1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumber1()
}

func (c *current) onSpace3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSpace3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpace3()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			return val, ok
		}
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}
