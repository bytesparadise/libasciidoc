// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/bytesparadise/libasciidoc/pkg/types"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "PreflightDocument",
			pos:  position{line: 17, col: 1, offset: 290},
			expr: &actionExpr{
				pos: position{line: 17, col: 22, offset: 311},
				run: (*parser).callonPreflightDocument1,
				expr: &seqExpr{
					pos: position{line: 17, col: 22, offset: 311},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 17, col: 22, offset: 311},
							label: "frontmatter",
							expr: &zeroOrOneExpr{
								pos: position{line: 17, col: 35, offset: 324},
								expr: &ruleRefExpr{
									pos:  position{line: 17, col: 35, offset: 324},
									name: "FrontMatter",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 17, col: 49, offset: 338},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 17, col: 57, offset: 346},
								name: "DocumentBlocks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 17, col: 73, offset: 362},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "PreflightDocumentWithinDelimitedBlock",
			pos:  position{line: 21, col: 1, offset: 446},
			expr: &actionExpr{
				pos: position{line: 21, col: 42, offset: 487},
				run: (*parser).callonPreflightDocumentWithinDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 21, col: 42, offset: 487},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 21, col: 42, offset: 487},
							label: "frontmatter",
							expr: &zeroOrOneExpr{
								pos: position{line: 21, col: 55, offset: 500},
								expr: &ruleRefExpr{
									pos:  position{line: 21, col: 55, offset: 500},
									name: "FrontMatter",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 21, col: 69, offset: 514},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 21, col: 77, offset: 522},
								name: "DocumentBlocksWithinDelimitedBlock",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 21, col: 113, offset: 558},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "DocumentBlocks",
			pos:  position{line: 28, col: 1, offset: 753},
			expr: &actionExpr{
				pos: position{line: 28, col: 19, offset: 771},
				run: (*parser).callonDocumentBlocks1,
				expr: &seqExpr{
					pos: position{line: 28, col: 19, offset: 771},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 28, col: 19, offset: 771},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 28, col: 27, offset: 779},
								expr: &ruleRefExpr{
									pos:  position{line: 28, col: 27, offset: 779},
									name: "DocumentHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 28, col: 44, offset: 796},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 28, col: 52, offset: 804},
								expr: &ruleRefExpr{
									pos:  position{line: 28, col: 52, offset: 804},
									name: "DocumentBlock",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentBlock",
			pos:  position{line: 37, col: 1, offset: 1053},
			expr: &actionExpr{
				pos: position{line: 37, col: 18, offset: 1070},
				run: (*parser).callonDocumentBlock1,
				expr: &seqExpr{
					pos: position{line: 37, col: 18, offset: 1070},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 37, col: 18, offset: 1070},
							expr: &ruleRefExpr{
								pos:  position{line: 37, col: 19, offset: 1071},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 38, col: 5, offset: 1080},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 38, col: 12, offset: 1087},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 38, col: 12, offset: 1087},
										name: "SimpleParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 39, col: 11, offset: 1113},
										name: "Section",
									},
									&ruleRefExpr{
										pos:  position{line: 40, col: 11, offset: 1132},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 41, col: 11, offset: 1157},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 42, col: 11, offset: 1181},
										name: "VerseParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 43, col: 11, offset: 1235},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 44, col: 11, offset: 1257},
										name: "ListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 45, col: 11, offset: 1276},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 46, col: 11, offset: 1327},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 47, col: 11, offset: 1351},
										name: "DocumentAttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 48, col: 11, offset: 1391},
										name: "DocumentAttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 49, col: 11, offset: 1425},
										name: "TableOfContentsMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 50, col: 11, offset: 1456},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 51, col: 11, offset: 1481},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentBlocksWithinDelimitedBlock",
			pos:  position{line: 55, col: 1, offset: 1519},
			expr: &labeledExpr{
				pos:   position{line: 55, col: 39, offset: 1557},
				label: "blocks",
				expr: &zeroOrMoreExpr{
					pos: position{line: 55, col: 46, offset: 1564},
					expr: &ruleRefExpr{
						pos:  position{line: 55, col: 47, offset: 1565},
						name: "DocumentBlockWithinDelimitedBlock",
					},
				},
			},
		},
		{
			name: "DocumentBlockWithinDelimitedBlock",
			pos:  position{line: 57, col: 1, offset: 1602},
			expr: &actionExpr{
				pos: position{line: 57, col: 38, offset: 1639},
				run: (*parser).callonDocumentBlockWithinDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 57, col: 38, offset: 1639},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 57, col: 38, offset: 1639},
							expr: &ruleRefExpr{
								pos:  position{line: 57, col: 39, offset: 1640},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 58, col: 5, offset: 1649},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 58, col: 12, offset: 1656},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 58, col: 12, offset: 1656},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 59, col: 11, offset: 1681},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 60, col: 11, offset: 1705},
										name: "VerseParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 61, col: 11, offset: 1730},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 62, col: 11, offset: 1752},
										name: "ListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 63, col: 11, offset: 1771},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 64, col: 11, offset: 1822},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 65, col: 11, offset: 1846},
										name: "DocumentAttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 66, col: 11, offset: 1886},
										name: "DocumentAttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 67, col: 11, offset: 1920},
										name: "TableOfContentsMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 68, col: 11, offset: 1951},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 69, col: 11, offset: 1976},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FrontMatter",
			pos:  position{line: 76, col: 1, offset: 2122},
			expr: &ruleRefExpr{
				pos:  position{line: 76, col: 16, offset: 2137},
				name: "YamlFrontMatter",
			},
		},
		{
			name: "YamlFrontMatter",
			pos:  position{line: 78, col: 1, offset: 2155},
			expr: &actionExpr{
				pos: position{line: 78, col: 20, offset: 2174},
				run: (*parser).callonYamlFrontMatter1,
				expr: &seqExpr{
					pos: position{line: 78, col: 20, offset: 2174},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 78, col: 20, offset: 2174},
							name: "YamlFrontMatterToken",
						},
						&labeledExpr{
							pos:   position{line: 78, col: 41, offset: 2195},
							label: "content",
							expr: &zeroOrOneExpr{
								pos: position{line: 78, col: 49, offset: 2203},
								expr: &ruleRefExpr{
									pos:  position{line: 78, col: 50, offset: 2204},
									name: "YamlFrontMatterContent",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 78, col: 75, offset: 2229},
							name: "YamlFrontMatterToken",
						},
					},
				},
			},
		},
		{
			name: "YamlFrontMatterToken",
			pos:  position{line: 82, col: 1, offset: 2309},
			expr: &seqExpr{
				pos: position{line: 82, col: 26, offset: 2334},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 82, col: 26, offset: 2334},
						val:        "---",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 82, col: 32, offset: 2340},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "YamlFrontMatterContent",
			pos:  position{line: 84, col: 1, offset: 2346},
			expr: &actionExpr{
				pos: position{line: 84, col: 27, offset: 2372},
				run: (*parser).callonYamlFrontMatterContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 84, col: 27, offset: 2372},
					expr: &oneOrMoreExpr{
						pos: position{line: 84, col: 28, offset: 2373},
						expr: &seqExpr{
							pos: position{line: 84, col: 29, offset: 2374},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 84, col: 29, offset: 2374},
									expr: &ruleRefExpr{
										pos:  position{line: 84, col: 30, offset: 2375},
										name: "YamlFrontMatterToken",
									},
								},
								&anyMatcher{
									line: 84, col: 51, offset: 2396,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentHeader",
			pos:  position{line: 91, col: 1, offset: 2562},
			expr: &actionExpr{
				pos: position{line: 91, col: 19, offset: 2580},
				run: (*parser).callonDocumentHeader1,
				expr: &seqExpr{
					pos: position{line: 91, col: 19, offset: 2580},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 91, col: 19, offset: 2580},
							val:        "=",
							ignoreCase: false,
						},
						&oneOrMoreExpr{
							pos: position{line: 91, col: 23, offset: 2584},
							expr: &ruleRefExpr{
								pos:  position{line: 91, col: 23, offset: 2584},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 91, col: 27, offset: 2588},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 91, col: 34, offset: 2595},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 91, col: 49, offset: 2610},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 91, col: 53, offset: 2614},
								expr: &ruleRefExpr{
									pos:  position{line: 91, col: 53, offset: 2614},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 91, col: 71, offset: 2632},
							name: "EOL",
						},
						&labeledExpr{
							pos:   position{line: 92, col: 9, offset: 2644},
							label: "authors",
							expr: &zeroOrOneExpr{
								pos: position{line: 92, col: 18, offset: 2653},
								expr: &ruleRefExpr{
									pos:  position{line: 92, col: 18, offset: 2653},
									name: "DocumentAuthors",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 93, col: 9, offset: 2680},
							label: "revision",
							expr: &zeroOrOneExpr{
								pos: position{line: 93, col: 19, offset: 2690},
								expr: &ruleRefExpr{
									pos:  position{line: 93, col: 19, offset: 2690},
									name: "DocumentRevision",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthors",
			pos:  position{line: 98, col: 1, offset: 2799},
			expr: &choiceExpr{
				pos: position{line: 98, col: 20, offset: 2818},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 98, col: 20, offset: 2818},
						name: "DocumentAuthorsInlineForm",
					},
					&ruleRefExpr{
						pos:  position{line: 98, col: 48, offset: 2846},
						name: "DocumentAuthorsAttributeForm",
					},
				},
			},
		},
		{
			name: "DocumentAuthorsInlineForm",
			pos:  position{line: 100, col: 1, offset: 2876},
			expr: &actionExpr{
				pos: position{line: 100, col: 30, offset: 2905},
				run: (*parser).callonDocumentAuthorsInlineForm1,
				expr: &seqExpr{
					pos: position{line: 100, col: 30, offset: 2905},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 100, col: 30, offset: 2905},
							expr: &ruleRefExpr{
								pos:  position{line: 100, col: 30, offset: 2905},
								name: "WS",
							},
						},
						&notExpr{
							pos: position{line: 100, col: 34, offset: 2909},
							expr: &litMatcher{
								pos:        position{line: 100, col: 35, offset: 2910},
								val:        ":",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 100, col: 39, offset: 2914},
							label: "authors",
							expr: &oneOrMoreExpr{
								pos: position{line: 100, col: 48, offset: 2923},
								expr: &ruleRefExpr{
									pos:  position{line: 100, col: 48, offset: 2923},
									name: "DocumentAuthor",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 100, col: 65, offset: 2940},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorsAttributeForm",
			pos:  position{line: 104, col: 1, offset: 3010},
			expr: &actionExpr{
				pos: position{line: 104, col: 33, offset: 3042},
				run: (*parser).callonDocumentAuthorsAttributeForm1,
				expr: &seqExpr{
					pos: position{line: 104, col: 33, offset: 3042},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 104, col: 33, offset: 3042},
							expr: &ruleRefExpr{
								pos:  position{line: 104, col: 33, offset: 3042},
								name: "WS",
							},
						},
						&litMatcher{
							pos:        position{line: 104, col: 37, offset: 3046},
							val:        ":author:",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 104, col: 48, offset: 3057},
							label: "author",
							expr: &ruleRefExpr{
								pos:  position{line: 104, col: 56, offset: 3065},
								name: "DocumentAuthor",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 104, col: 72, offset: 3081},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthor",
			pos:  position{line: 108, col: 1, offset: 3160},
			expr: &actionExpr{
				pos: position{line: 108, col: 19, offset: 3178},
				run: (*parser).callonDocumentAuthor1,
				expr: &seqExpr{
					pos: position{line: 108, col: 19, offset: 3178},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 108, col: 19, offset: 3178},
							expr: &ruleRefExpr{
								pos:  position{line: 108, col: 19, offset: 3178},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 108, col: 23, offset: 3182},
							label: "fullname",
							expr: &ruleRefExpr{
								pos:  position{line: 108, col: 33, offset: 3192},
								name: "DocumentAuthorName",
							},
						},
						&labeledExpr{
							pos:   position{line: 108, col: 53, offset: 3212},
							label: "email",
							expr: &zeroOrOneExpr{
								pos: position{line: 108, col: 59, offset: 3218},
								expr: &ruleRefExpr{
									pos:  position{line: 108, col: 60, offset: 3219},
									name: "DocumentAuthorEmail",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 108, col: 82, offset: 3241},
							expr: &ruleRefExpr{
								pos:  position{line: 108, col: 82, offset: 3241},
								name: "WS",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 108, col: 86, offset: 3245},
							expr: &litMatcher{
								pos:        position{line: 108, col: 86, offset: 3245},
								val:        ";",
								ignoreCase: false,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 108, col: 91, offset: 3250},
							expr: &ruleRefExpr{
								pos:  position{line: 108, col: 91, offset: 3250},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorName",
			pos:  position{line: 113, col: 1, offset: 3392},
			expr: &actionExpr{
				pos: position{line: 113, col: 23, offset: 3414},
				run: (*parser).callonDocumentAuthorName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 113, col: 23, offset: 3414},
					expr: &choiceExpr{
						pos: position{line: 113, col: 24, offset: 3415},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 113, col: 24, offset: 3415},
								name: "Alphanums",
							},
							&seqExpr{
								pos: position{line: 113, col: 37, offset: 3428},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 113, col: 37, offset: 3428},
										expr: &litMatcher{
											pos:        position{line: 113, col: 38, offset: 3429},
											val:        "<",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 113, col: 42, offset: 3433},
										expr: &litMatcher{
											pos:        position{line: 113, col: 43, offset: 3434},
											val:        ";",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 113, col: 47, offset: 3438},
										expr: &ruleRefExpr{
											pos:  position{line: 113, col: 48, offset: 3439},
											name: "NEWLINE",
										},
									},
									&anyMatcher{
										line: 113, col: 56, offset: 3447,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorEmail",
			pos:  position{line: 117, col: 1, offset: 3488},
			expr: &actionExpr{
				pos: position{line: 117, col: 24, offset: 3511},
				run: (*parser).callonDocumentAuthorEmail1,
				expr: &seqExpr{
					pos: position{line: 117, col: 24, offset: 3511},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 117, col: 24, offset: 3511},
							val:        "<",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 117, col: 28, offset: 3515},
							label: "email",
							expr: &actionExpr{
								pos: position{line: 117, col: 35, offset: 3522},
								run: (*parser).callonDocumentAuthorEmail5,
								expr: &oneOrMoreExpr{
									pos: position{line: 117, col: 35, offset: 3522},
									expr: &choiceExpr{
										pos: position{line: 117, col: 36, offset: 3523},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 117, col: 36, offset: 3523},
												name: "Alphanums",
											},
											&seqExpr{
												pos: position{line: 117, col: 49, offset: 3536},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 117, col: 49, offset: 3536},
														expr: &litMatcher{
															pos:        position{line: 117, col: 50, offset: 3537},
															val:        ">",
															ignoreCase: false,
														},
													},
													&notExpr{
														pos: position{line: 117, col: 54, offset: 3541},
														expr: &ruleRefExpr{
															pos:  position{line: 117, col: 55, offset: 3542},
															name: "EOL",
														},
													},
													&anyMatcher{
														line: 117, col: 60, offset: 3547,
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 119, col: 4, offset: 3588},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "DocumentRevision",
			pos:  position{line: 125, col: 1, offset: 3749},
			expr: &actionExpr{
				pos: position{line: 125, col: 21, offset: 3769},
				run: (*parser).callonDocumentRevision1,
				expr: &seqExpr{
					pos: position{line: 125, col: 21, offset: 3769},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 125, col: 21, offset: 3769},
							expr: &ruleRefExpr{
								pos:  position{line: 125, col: 21, offset: 3769},
								name: "WS",
							},
						},
						&notExpr{
							pos: position{line: 125, col: 25, offset: 3773},
							expr: &litMatcher{
								pos:        position{line: 125, col: 26, offset: 3774},
								val:        ":",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 125, col: 30, offset: 3778},
							label: "revision",
							expr: &choiceExpr{
								pos: position{line: 126, col: 9, offset: 3797},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 126, col: 10, offset: 3798},
										run: (*parser).callonDocumentRevision9,
										expr: &seqExpr{
											pos: position{line: 126, col: 10, offset: 3798},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 126, col: 10, offset: 3798},
													label: "revnumber",
													expr: &ruleRefExpr{
														pos:  position{line: 126, col: 21, offset: 3809},
														name: "DocumentRevisionNumber",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 126, col: 45, offset: 3833},
													expr: &litMatcher{
														pos:        position{line: 126, col: 45, offset: 3833},
														val:        ",",
														ignoreCase: false,
													},
												},
												&labeledExpr{
													pos:   position{line: 126, col: 50, offset: 3838},
													label: "revdate",
													expr: &zeroOrOneExpr{
														pos: position{line: 126, col: 58, offset: 3846},
														expr: &ruleRefExpr{
															pos:  position{line: 126, col: 59, offset: 3847},
															name: "DocumentRevisionDate",
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 126, col: 82, offset: 3870},
													expr: &litMatcher{
														pos:        position{line: 126, col: 82, offset: 3870},
														val:        ":",
														ignoreCase: false,
													},
												},
												&labeledExpr{
													pos:   position{line: 126, col: 87, offset: 3875},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 126, col: 97, offset: 3885},
														expr: &ruleRefExpr{
															pos:  position{line: 126, col: 98, offset: 3886},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 128, col: 15, offset: 4003},
										run: (*parser).callonDocumentRevision23,
										expr: &seqExpr{
											pos: position{line: 128, col: 15, offset: 4003},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 128, col: 15, offset: 4003},
													label: "revdate",
													expr: &ruleRefExpr{
														pos:  position{line: 128, col: 24, offset: 4012},
														name: "DocumentRevisionDate",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 128, col: 46, offset: 4034},
													expr: &litMatcher{
														pos:        position{line: 128, col: 46, offset: 4034},
														val:        ":",
														ignoreCase: false,
													},
												},
												&labeledExpr{
													pos:   position{line: 128, col: 51, offset: 4039},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 128, col: 61, offset: 4049},
														expr: &ruleRefExpr{
															pos:  position{line: 128, col: 62, offset: 4050},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 130, col: 13, offset: 4159},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionNumber",
			pos:  position{line: 135, col: 1, offset: 4289},
			expr: &choiceExpr{
				pos: position{line: 135, col: 27, offset: 4315},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 135, col: 27, offset: 4315},
						run: (*parser).callonDocumentRevisionNumber2,
						expr: &seqExpr{
							pos: position{line: 135, col: 27, offset: 4315},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 135, col: 27, offset: 4315},
									val:        "v",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 135, col: 32, offset: 4320},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 135, col: 39, offset: 4327},
									expr: &choiceExpr{
										pos: position{line: 135, col: 40, offset: 4328},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 135, col: 40, offset: 4328},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 135, col: 52, offset: 4340},
												name: "Spaces",
											},
											&seqExpr{
												pos: position{line: 135, col: 62, offset: 4350},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 135, col: 62, offset: 4350},
														expr: &ruleRefExpr{
															pos:  position{line: 135, col: 63, offset: 4351},
															name: "EOL",
														},
													},
													&notExpr{
														pos: position{line: 135, col: 67, offset: 4355},
														expr: &litMatcher{
															pos:        position{line: 135, col: 68, offset: 4356},
															val:        ",",
															ignoreCase: false,
														},
													},
													&notExpr{
														pos: position{line: 135, col: 72, offset: 4360},
														expr: &litMatcher{
															pos:        position{line: 135, col: 73, offset: 4361},
															val:        ":",
															ignoreCase: false,
														},
													},
													&anyMatcher{
														line: 135, col: 78, offset: 4366,
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 137, col: 5, offset: 4408},
						run: (*parser).callonDocumentRevisionNumber18,
						expr: &seqExpr{
							pos: position{line: 137, col: 5, offset: 4408},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 137, col: 5, offset: 4408},
									expr: &litMatcher{
										pos:        position{line: 137, col: 5, offset: 4408},
										val:        "v",
										ignoreCase: true,
									},
								},
								&ruleRefExpr{
									pos:  position{line: 137, col: 11, offset: 4414},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 137, col: 18, offset: 4421},
									expr: &choiceExpr{
										pos: position{line: 137, col: 19, offset: 4422},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 137, col: 19, offset: 4422},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 137, col: 31, offset: 4434},
												name: "Spaces",
											},
											&seqExpr{
												pos: position{line: 137, col: 41, offset: 4444},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 137, col: 41, offset: 4444},
														expr: &ruleRefExpr{
															pos:  position{line: 137, col: 42, offset: 4445},
															name: "EOL",
														},
													},
													&notExpr{
														pos: position{line: 137, col: 46, offset: 4449},
														expr: &litMatcher{
															pos:        position{line: 137, col: 47, offset: 4450},
															val:        ",",
															ignoreCase: false,
														},
													},
													&notExpr{
														pos: position{line: 137, col: 51, offset: 4454},
														expr: &litMatcher{
															pos:        position{line: 137, col: 52, offset: 4455},
															val:        ":",
															ignoreCase: false,
														},
													},
													&anyMatcher{
														line: 137, col: 57, offset: 4460,
													},
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 137, col: 62, offset: 4465},
									expr: &ruleRefExpr{
										pos:  position{line: 137, col: 62, offset: 4465},
										name: "WS",
									},
								},
								&andExpr{
									pos: position{line: 137, col: 66, offset: 4469},
									expr: &litMatcher{
										pos:        position{line: 137, col: 67, offset: 4470},
										val:        ",",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionDate",
			pos:  position{line: 141, col: 1, offset: 4510},
			expr: &actionExpr{
				pos: position{line: 141, col: 25, offset: 4534},
				run: (*parser).callonDocumentRevisionDate1,
				expr: &oneOrMoreExpr{
					pos: position{line: 141, col: 25, offset: 4534},
					expr: &choiceExpr{
						pos: position{line: 141, col: 26, offset: 4535},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 141, col: 26, offset: 4535},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 141, col: 38, offset: 4547},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 141, col: 48, offset: 4557},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 141, col: 48, offset: 4557},
										expr: &ruleRefExpr{
											pos:  position{line: 141, col: 49, offset: 4558},
											name: "EOL",
										},
									},
									&notExpr{
										pos: position{line: 141, col: 53, offset: 4562},
										expr: &litMatcher{
											pos:        position{line: 141, col: 54, offset: 4563},
											val:        ":",
											ignoreCase: false,
										},
									},
									&anyMatcher{
										line: 141, col: 59, offset: 4568,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionRemark",
			pos:  position{line: 145, col: 1, offset: 4609},
			expr: &actionExpr{
				pos: position{line: 145, col: 27, offset: 4635},
				run: (*parser).callonDocumentRevisionRemark1,
				expr: &oneOrMoreExpr{
					pos: position{line: 145, col: 27, offset: 4635},
					expr: &choiceExpr{
						pos: position{line: 145, col: 28, offset: 4636},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 145, col: 28, offset: 4636},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 145, col: 40, offset: 4648},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 145, col: 50, offset: 4658},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 145, col: 50, offset: 4658},
										expr: &ruleRefExpr{
											pos:  position{line: 145, col: 51, offset: 4659},
											name: "EOL",
										},
									},
									&anyMatcher{
										line: 145, col: 56, offset: 4664,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeDeclaration",
			pos:  position{line: 152, col: 1, offset: 4820},
			expr: &actionExpr{
				pos: position{line: 152, col: 33, offset: 4852},
				run: (*parser).callonDocumentAttributeDeclaration1,
				expr: &seqExpr{
					pos: position{line: 152, col: 33, offset: 4852},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 152, col: 33, offset: 4852},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 152, col: 37, offset: 4856},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 152, col: 43, offset: 4862},
								name: "DocumentAttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 152, col: 66, offset: 4885},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 152, col: 70, offset: 4889},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 152, col: 76, offset: 4895},
								expr: &actionExpr{
									pos: position{line: 152, col: 77, offset: 4896},
									run: (*parser).callonDocumentAttributeDeclaration9,
									expr: &seqExpr{
										pos: position{line: 152, col: 78, offset: 4897},
										exprs: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 152, col: 78, offset: 4897},
												expr: &ruleRefExpr{
													pos:  position{line: 152, col: 78, offset: 4897},
													name: "WS",
												},
											},
											&labeledExpr{
												pos:   position{line: 152, col: 82, offset: 4901},
												label: "value",
												expr: &ruleRefExpr{
													pos:  position{line: 152, col: 89, offset: 4908},
													name: "DocumentAttributeValue",
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 152, col: 138, offset: 4957},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeName",
			pos:  position{line: 159, col: 1, offset: 5206},
			expr: &actionExpr{
				pos: position{line: 159, col: 26, offset: 5231},
				run: (*parser).callonDocumentAttributeName1,
				expr: &seqExpr{
					pos: position{line: 159, col: 26, offset: 5231},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 159, col: 27, offset: 5232},
							alternatives: []interface{}{
								&charClassMatcher{
									pos:        position{line: 159, col: 27, offset: 5232},
									val:        "[A-Z]",
									ranges:     []rune{'A', 'Z'},
									ignoreCase: false,
									inverted:   false,
								},
								&charClassMatcher{
									pos:        position{line: 159, col: 35, offset: 5240},
									val:        "[a-z]",
									ranges:     []rune{'a', 'z'},
									ignoreCase: false,
									inverted:   false,
								},
								&charClassMatcher{
									pos:        position{line: 159, col: 43, offset: 5248},
									val:        "[0-9]",
									ranges:     []rune{'0', '9'},
									ignoreCase: false,
									inverted:   false,
								},
								&litMatcher{
									pos:        position{line: 159, col: 51, offset: 5256},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 159, col: 56, offset: 5261},
							expr: &choiceExpr{
								pos: position{line: 159, col: 57, offset: 5262},
								alternatives: []interface{}{
									&charClassMatcher{
										pos:        position{line: 159, col: 57, offset: 5262},
										val:        "[A-Z]",
										ranges:     []rune{'A', 'Z'},
										ignoreCase: false,
										inverted:   false,
									},
									&charClassMatcher{
										pos:        position{line: 159, col: 65, offset: 5270},
										val:        "[a-z]",
										ranges:     []rune{'a', 'z'},
										ignoreCase: false,
										inverted:   false,
									},
									&charClassMatcher{
										pos:        position{line: 159, col: 73, offset: 5278},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
									&litMatcher{
										pos:        position{line: 159, col: 81, offset: 5286},
										val:        "-",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeValue",
			pos:  position{line: 163, col: 1, offset: 5328},
			expr: &actionExpr{
				pos: position{line: 163, col: 27, offset: 5354},
				run: (*parser).callonDocumentAttributeValue1,
				expr: &oneOrMoreExpr{
					pos: position{line: 163, col: 27, offset: 5354},
					expr: &seqExpr{
						pos: position{line: 163, col: 28, offset: 5355},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 163, col: 28, offset: 5355},
								expr: &ruleRefExpr{
									pos:  position{line: 163, col: 29, offset: 5356},
									name: "NEWLINE",
								},
							},
							&anyMatcher{
								line: 163, col: 37, offset: 5364,
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeReset",
			pos:  position{line: 167, col: 1, offset: 5404},
			expr: &choiceExpr{
				pos: position{line: 167, col: 27, offset: 5430},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 167, col: 27, offset: 5430},
						run: (*parser).callonDocumentAttributeReset2,
						expr: &seqExpr{
							pos: position{line: 167, col: 27, offset: 5430},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 167, col: 27, offset: 5430},
									val:        ":!",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 167, col: 32, offset: 5435},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 167, col: 38, offset: 5441},
										name: "DocumentAttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 167, col: 61, offset: 5464},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 167, col: 65, offset: 5468},
									name: "EOLS",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 169, col: 5, offset: 5537},
						run: (*parser).callonDocumentAttributeReset9,
						expr: &seqExpr{
							pos: position{line: 169, col: 5, offset: 5537},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 169, col: 5, offset: 5537},
									val:        ":",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 169, col: 9, offset: 5541},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 169, col: 15, offset: 5547},
										name: "DocumentAttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 169, col: 38, offset: 5570},
									val:        "!:",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 169, col: 43, offset: 5575},
									name: "EOLS",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeSubstitution",
			pos:  position{line: 173, col: 1, offset: 5643},
			expr: &actionExpr{
				pos: position{line: 173, col: 34, offset: 5676},
				run: (*parser).callonDocumentAttributeSubstitution1,
				expr: &seqExpr{
					pos: position{line: 173, col: 34, offset: 5676},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 173, col: 34, offset: 5676},
							val:        "{",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 173, col: 38, offset: 5680},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 173, col: 44, offset: 5686},
								name: "DocumentAttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 173, col: 67, offset: 5709},
							val:        "}",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "ElementAttributes",
			pos:  position{line: 180, col: 1, offset: 5897},
			expr: &actionExpr{
				pos: position{line: 180, col: 22, offset: 5918},
				run: (*parser).callonElementAttributes1,
				expr: &labeledExpr{
					pos:   position{line: 180, col: 22, offset: 5918},
					label: "attrs",
					expr: &oneOrMoreExpr{
						pos: position{line: 180, col: 28, offset: 5924},
						expr: &ruleRefExpr{
							pos:  position{line: 180, col: 29, offset: 5925},
							name: "ElementAttribute",
						},
					},
				},
			},
		},
		{
			name: "ElementAttribute",
			pos:  position{line: 184, col: 1, offset: 6015},
			expr: &actionExpr{
				pos: position{line: 184, col: 21, offset: 6035},
				run: (*parser).callonElementAttribute1,
				expr: &seqExpr{
					pos: position{line: 184, col: 21, offset: 6035},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 184, col: 21, offset: 6035},
							expr: &choiceExpr{
								pos: position{line: 184, col: 23, offset: 6037},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 184, col: 23, offset: 6037},
										val:        "[",
										ignoreCase: false,
									},
									&litMatcher{
										pos:        position{line: 184, col: 29, offset: 6043},
										val:        ".",
										ignoreCase: false,
									},
									&litMatcher{
										pos:        position{line: 184, col: 35, offset: 6049},
										val:        "#",
										ignoreCase: false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 185, col: 5, offset: 6125},
							label: "attr",
							expr: &choiceExpr{
								pos: position{line: 185, col: 11, offset: 6131},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 185, col: 11, offset: 6131},
										name: "ElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 186, col: 9, offset: 6152},
										name: "ElementTitle",
									},
									&ruleRefExpr{
										pos:  position{line: 187, col: 9, offset: 6176},
										name: "ElementRole",
									},
									&ruleRefExpr{
										pos:  position{line: 188, col: 9, offset: 6199},
										name: "LiteralAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 189, col: 9, offset: 6227},
										name: "SourceAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 190, col: 9, offset: 6255},
										name: "QuoteAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 191, col: 9, offset: 6282},
										name: "VerseAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 192, col: 9, offset: 6309},
										name: "AdmonitionMarkerAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 193, col: 9, offset: 6346},
										name: "HorizontalLayout",
									},
									&ruleRefExpr{
										pos:  position{line: 194, col: 9, offset: 6374},
										name: "AttributeGroup",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MasqueradeAttribute",
			pos:  position{line: 199, col: 1, offset: 6557},
			expr: &choiceExpr{
				pos: position{line: 199, col: 24, offset: 6580},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 199, col: 24, offset: 6580},
						name: "QuoteAttributes",
					},
					&ruleRefExpr{
						pos:  position{line: 199, col: 42, offset: 6598},
						name: "VerseAttributes",
					},
				},
			},
		},
		{
			name: "ElementID",
			pos:  position{line: 201, col: 1, offset: 6615},
			expr: &choiceExpr{
				pos: position{line: 201, col: 14, offset: 6628},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 201, col: 14, offset: 6628},
						run: (*parser).callonElementID2,
						expr: &seqExpr{
							pos: position{line: 201, col: 14, offset: 6628},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 201, col: 14, offset: 6628},
									val:        "[[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 201, col: 19, offset: 6633},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 201, col: 23, offset: 6637},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 201, col: 27, offset: 6641},
									val:        "]]",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 201, col: 32, offset: 6646},
									name: "EOLS",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 203, col: 5, offset: 6700},
						run: (*parser).callonElementID9,
						expr: &seqExpr{
							pos: position{line: 203, col: 5, offset: 6700},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 203, col: 5, offset: 6700},
									val:        "[#",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 203, col: 10, offset: 6705},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 203, col: 14, offset: 6709},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 203, col: 18, offset: 6713},
									val:        "]",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 203, col: 23, offset: 6718},
									name: "EOLS",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElementID",
			pos:  position{line: 207, col: 1, offset: 6771},
			expr: &actionExpr{
				pos: position{line: 207, col: 20, offset: 6790},
				run: (*parser).callonInlineElementID1,
				expr: &seqExpr{
					pos: position{line: 207, col: 20, offset: 6790},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 207, col: 20, offset: 6790},
							val:        "[[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 207, col: 25, offset: 6795},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 207, col: 29, offset: 6799},
								name: "ID",
							},
						},
						&litMatcher{
							pos:        position{line: 207, col: 33, offset: 6803},
							val:        "]]",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 207, col: 38, offset: 6808},
							expr: &ruleRefExpr{
								pos:  position{line: 207, col: 38, offset: 6808},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "ElementTitle",
			pos:  position{line: 213, col: 1, offset: 7082},
			expr: &actionExpr{
				pos: position{line: 213, col: 17, offset: 7098},
				run: (*parser).callonElementTitle1,
				expr: &seqExpr{
					pos: position{line: 213, col: 17, offset: 7098},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 213, col: 17, offset: 7098},
							val:        ".",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 213, col: 21, offset: 7102},
							label: "title",
							expr: &actionExpr{
								pos: position{line: 213, col: 28, offset: 7109},
								run: (*parser).callonElementTitle5,
								expr: &seqExpr{
									pos: position{line: 213, col: 28, offset: 7109},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 213, col: 28, offset: 7109},
											name: "Alphanums",
										},
										&zeroOrMoreExpr{
											pos: position{line: 213, col: 38, offset: 7119},
											expr: &choiceExpr{
												pos: position{line: 213, col: 39, offset: 7120},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 213, col: 39, offset: 7120},
														name: "Alphanums",
													},
													&ruleRefExpr{
														pos:  position{line: 213, col: 51, offset: 7132},
														name: "Spaces",
													},
													&seqExpr{
														pos: position{line: 213, col: 61, offset: 7142},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 213, col: 61, offset: 7142},
																expr: &ruleRefExpr{
																	pos:  position{line: 213, col: 62, offset: 7143},
																	name: "NEWLINE",
																},
															},
															&anyMatcher{
																line: 213, col: 70, offset: 7151,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 215, col: 4, offset: 7192},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ElementRole",
			pos:  position{line: 221, col: 1, offset: 7344},
			expr: &actionExpr{
				pos: position{line: 221, col: 16, offset: 7359},
				run: (*parser).callonElementRole1,
				expr: &seqExpr{
					pos: position{line: 221, col: 16, offset: 7359},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 221, col: 16, offset: 7359},
							val:        "[.",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 221, col: 21, offset: 7364},
							label: "role",
							expr: &actionExpr{
								pos: position{line: 221, col: 27, offset: 7370},
								run: (*parser).callonElementRole5,
								expr: &seqExpr{
									pos: position{line: 221, col: 27, offset: 7370},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 221, col: 27, offset: 7370},
											name: "Alphanums",
										},
										&zeroOrMoreExpr{
											pos: position{line: 221, col: 37, offset: 7380},
											expr: &choiceExpr{
												pos: position{line: 221, col: 38, offset: 7381},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 221, col: 38, offset: 7381},
														name: "Alphanums",
													},
													&ruleRefExpr{
														pos:  position{line: 221, col: 50, offset: 7393},
														name: "Spaces",
													},
													&seqExpr{
														pos: position{line: 221, col: 60, offset: 7403},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 221, col: 60, offset: 7403},
																expr: &ruleRefExpr{
																	pos:  position{line: 221, col: 61, offset: 7404},
																	name: "NEWLINE",
																},
															},
															&notExpr{
																pos: position{line: 221, col: 69, offset: 7412},
																expr: &litMatcher{
																	pos:        position{line: 221, col: 70, offset: 7413},
																	val:        "]",
																	ignoreCase: false,
																},
															},
															&anyMatcher{
																line: 221, col: 74, offset: 7417,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 223, col: 4, offset: 7458},
							val:        "]",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 223, col: 8, offset: 7462},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "LiteralAttribute",
			pos:  position{line: 227, col: 1, offset: 7519},
			expr: &actionExpr{
				pos: position{line: 227, col: 21, offset: 7539},
				run: (*parser).callonLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 227, col: 21, offset: 7539},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 227, col: 21, offset: 7539},
							val:        "[literal]",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 227, col: 33, offset: 7551},
							expr: &ruleRefExpr{
								pos:  position{line: 227, col: 33, offset: 7551},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 227, col: 37, offset: 7555},
							name: "NEWLINE",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionMarkerAttribute",
			pos:  position{line: 232, col: 1, offset: 7687},
			expr: &actionExpr{
				pos: position{line: 232, col: 30, offset: 7716},
				run: (*parser).callonAdmonitionMarkerAttribute1,
				expr: &seqExpr{
					pos: position{line: 232, col: 30, offset: 7716},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 232, col: 30, offset: 7716},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 232, col: 34, offset: 7720},
							label: "k",
							expr: &ruleRefExpr{
								pos:  position{line: 232, col: 37, offset: 7723},
								name: "AdmonitionKind",
							},
						},
						&litMatcher{
							pos:        position{line: 232, col: 53, offset: 7739},
							val:        "]",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 232, col: 57, offset: 7743},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "SourceAttributes",
			pos:  position{line: 237, col: 1, offset: 7899},
			expr: &actionExpr{
				pos: position{line: 237, col: 21, offset: 7919},
				run: (*parser).callonSourceAttributes1,
				expr: &seqExpr{
					pos: position{line: 237, col: 21, offset: 7919},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 237, col: 21, offset: 7919},
							val:        "[source",
							ignoreCase: false,
						},
						&zeroOrOneExpr{
							pos: position{line: 237, col: 31, offset: 7929},
							expr: &litMatcher{
								pos:        position{line: 237, col: 31, offset: 7929},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 237, col: 36, offset: 7934},
							label: "language",
							expr: &zeroOrOneExpr{
								pos: position{line: 237, col: 45, offset: 7943},
								expr: &actionExpr{
									pos: position{line: 237, col: 46, offset: 7944},
									run: (*parser).callonSourceAttributes8,
									expr: &oneOrMoreExpr{
										pos: position{line: 237, col: 46, offset: 7944},
										expr: &choiceExpr{
											pos: position{line: 237, col: 47, offset: 7945},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 237, col: 47, offset: 7945},
													name: "Alphanums",
												},
												&ruleRefExpr{
													pos:  position{line: 237, col: 59, offset: 7957},
													name: "Spaces",
												},
												&seqExpr{
													pos: position{line: 237, col: 69, offset: 7967},
													exprs: []interface{}{
														&notExpr{
															pos: position{line: 237, col: 69, offset: 7967},
															expr: &ruleRefExpr{
																pos:  position{line: 237, col: 70, offset: 7968},
																name: "NEWLINE",
															},
														},
														&notExpr{
															pos: position{line: 237, col: 78, offset: 7976},
															expr: &litMatcher{
																pos:        position{line: 237, col: 79, offset: 7977},
																val:        "]",
																ignoreCase: false,
															},
														},
														&anyMatcher{
															line: 237, col: 83, offset: 7981,
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 239, col: 9, offset: 8031},
							val:        "]",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 239, col: 13, offset: 8035},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "AttributeGroup",
			pos:  position{line: 244, col: 1, offset: 8160},
			expr: &actionExpr{
				pos: position{line: 244, col: 19, offset: 8178},
				run: (*parser).callonAttributeGroup1,
				expr: &seqExpr{
					pos: position{line: 244, col: 19, offset: 8178},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 244, col: 19, offset: 8178},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 244, col: 23, offset: 8182},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 244, col: 34, offset: 8193},
								expr: &ruleRefExpr{
									pos:  position{line: 244, col: 35, offset: 8194},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 244, col: 54, offset: 8213},
							val:        "]",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 244, col: 58, offset: 8217},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "GenericAttribute",
			pos:  position{line: 248, col: 1, offset: 8290},
			expr: &actionExpr{
				pos: position{line: 248, col: 21, offset: 8310},
				run: (*parser).callonGenericAttribute1,
				expr: &seqExpr{
					pos: position{line: 248, col: 21, offset: 8310},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 248, col: 21, offset: 8310},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 248, col: 26, offset: 8315},
								name: "AttributeKey",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 248, col: 40, offset: 8329},
							expr: &litMatcher{
								pos:        position{line: 248, col: 40, offset: 8329},
								val:        "=",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 248, col: 45, offset: 8334},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 248, col: 51, offset: 8340},
								expr: &ruleRefExpr{
									pos:  position{line: 248, col: 52, offset: 8341},
									name: "AttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 248, col: 69, offset: 8358},
							expr: &litMatcher{
								pos:        position{line: 248, col: 69, offset: 8358},
								val:        ",",
								ignoreCase: false,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 248, col: 74, offset: 8363},
							expr: &ruleRefExpr{
								pos:  position{line: 248, col: 74, offset: 8363},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeKey",
			pos:  position{line: 252, col: 1, offset: 8446},
			expr: &actionExpr{
				pos: position{line: 252, col: 17, offset: 8462},
				run: (*parser).callonAttributeKey1,
				expr: &seqExpr{
					pos: position{line: 252, col: 17, offset: 8462},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 252, col: 17, offset: 8462},
							expr: &litMatcher{
								pos:        position{line: 252, col: 18, offset: 8463},
								val:        "quote",
								ignoreCase: false,
							},
						},
						&notExpr{
							pos: position{line: 252, col: 26, offset: 8471},
							expr: &litMatcher{
								pos:        position{line: 252, col: 27, offset: 8472},
								val:        "verse",
								ignoreCase: false,
							},
						},
						&notExpr{
							pos: position{line: 252, col: 35, offset: 8480},
							expr: &litMatcher{
								pos:        position{line: 252, col: 36, offset: 8481},
								val:        "literal",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 252, col: 46, offset: 8491},
							label: "key",
							expr: &oneOrMoreExpr{
								pos: position{line: 252, col: 50, offset: 8495},
								expr: &choiceExpr{
									pos: position{line: 252, col: 51, offset: 8496},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 252, col: 51, offset: 8496},
											name: "Alphanums",
										},
										&ruleRefExpr{
											pos:  position{line: 252, col: 63, offset: 8508},
											name: "OtherAttributeChar",
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 252, col: 84, offset: 8529},
							expr: &ruleRefExpr{
								pos:  position{line: 252, col: 84, offset: 8529},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeValue",
			pos:  position{line: 256, col: 1, offset: 8569},
			expr: &actionExpr{
				pos: position{line: 256, col: 19, offset: 8587},
				run: (*parser).callonAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 256, col: 19, offset: 8587},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 256, col: 19, offset: 8587},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 256, col: 25, offset: 8593},
								expr: &choiceExpr{
									pos: position{line: 256, col: 26, offset: 8594},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 256, col: 26, offset: 8594},
											name: "Alphanums",
										},
										&ruleRefExpr{
											pos:  position{line: 256, col: 38, offset: 8606},
											name: "Spaces",
										},
										&ruleRefExpr{
											pos:  position{line: 256, col: 47, offset: 8615},
											name: "OtherAttributeChar",
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 256, col: 68, offset: 8636},
							expr: &litMatcher{
								pos:        position{line: 256, col: 69, offset: 8637},
								val:        "=",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "OtherAttributeChar",
			pos:  position{line: 260, col: 1, offset: 8792},
			expr: &seqExpr{
				pos: position{line: 260, col: 24, offset: 8815},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 260, col: 24, offset: 8815},
						expr: &ruleRefExpr{
							pos:  position{line: 260, col: 25, offset: 8816},
							name: "WS",
						},
					},
					&notExpr{
						pos: position{line: 260, col: 28, offset: 8819},
						expr: &litMatcher{
							pos:        position{line: 260, col: 29, offset: 8820},
							val:        "=",
							ignoreCase: false,
						},
					},
					&notExpr{
						pos: position{line: 260, col: 33, offset: 8824},
						expr: &litMatcher{
							pos:        position{line: 260, col: 34, offset: 8825},
							val:        ",",
							ignoreCase: false,
						},
					},
					&notExpr{
						pos: position{line: 260, col: 38, offset: 8829},
						expr: &litMatcher{
							pos:        position{line: 260, col: 39, offset: 8830},
							val:        "]",
							ignoreCase: false,
						},
					},
					&anyMatcher{
						line: 260, col: 43, offset: 8834,
					},
				},
			},
		},
		{
			name: "HorizontalLayout",
			pos:  position{line: 262, col: 1, offset: 8838},
			expr: &actionExpr{
				pos: position{line: 262, col: 21, offset: 8858},
				run: (*parser).callonHorizontalLayout1,
				expr: &seqExpr{
					pos: position{line: 262, col: 21, offset: 8858},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 262, col: 21, offset: 8858},
							val:        "[horizontal]",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 262, col: 36, offset: 8873},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "QuoteAttributes",
			pos:  position{line: 266, col: 1, offset: 8947},
			expr: &actionExpr{
				pos: position{line: 266, col: 20, offset: 8966},
				run: (*parser).callonQuoteAttributes1,
				expr: &seqExpr{
					pos: position{line: 266, col: 20, offset: 8966},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 266, col: 20, offset: 8966},
							val:        "[quote",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 266, col: 29, offset: 8975},
							expr: &ruleRefExpr{
								pos:  position{line: 266, col: 29, offset: 8975},
								name: "WS",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 266, col: 33, offset: 8979},
							expr: &litMatcher{
								pos:        position{line: 266, col: 33, offset: 8979},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 266, col: 38, offset: 8984},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 266, col: 45, offset: 8991},
								expr: &ruleRefExpr{
									pos:  position{line: 266, col: 46, offset: 8992},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 266, col: 63, offset: 9009},
							expr: &litMatcher{
								pos:        position{line: 266, col: 63, offset: 9009},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 266, col: 68, offset: 9014},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 266, col: 74, offset: 9020},
								expr: &ruleRefExpr{
									pos:  position{line: 266, col: 75, offset: 9021},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 266, col: 92, offset: 9038},
							val:        "]",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 266, col: 96, offset: 9042},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "VerseAttributes",
			pos:  position{line: 270, col: 1, offset: 9112},
			expr: &actionExpr{
				pos: position{line: 270, col: 20, offset: 9131},
				run: (*parser).callonVerseAttributes1,
				expr: &seqExpr{
					pos: position{line: 270, col: 20, offset: 9131},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 270, col: 20, offset: 9131},
							val:        "[verse",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 270, col: 29, offset: 9140},
							expr: &ruleRefExpr{
								pos:  position{line: 270, col: 29, offset: 9140},
								name: "WS",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 270, col: 33, offset: 9144},
							expr: &litMatcher{
								pos:        position{line: 270, col: 33, offset: 9144},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 270, col: 38, offset: 9149},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 270, col: 45, offset: 9156},
								expr: &ruleRefExpr{
									pos:  position{line: 270, col: 46, offset: 9157},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 270, col: 63, offset: 9174},
							expr: &litMatcher{
								pos:        position{line: 270, col: 63, offset: 9174},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 270, col: 68, offset: 9179},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 270, col: 74, offset: 9185},
								expr: &ruleRefExpr{
									pos:  position{line: 270, col: 75, offset: 9186},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 270, col: 92, offset: 9203},
							val:        "]",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 270, col: 96, offset: 9207},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "QuoteAttribute",
			pos:  position{line: 274, col: 1, offset: 9295},
			expr: &actionExpr{
				pos: position{line: 274, col: 19, offset: 9313},
				run: (*parser).callonQuoteAttribute1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 274, col: 19, offset: 9313},
					expr: &choiceExpr{
						pos: position{line: 274, col: 20, offset: 9314},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 274, col: 20, offset: 9314},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 274, col: 32, offset: 9326},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 274, col: 42, offset: 9336},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 274, col: 42, offset: 9336},
										expr: &litMatcher{
											pos:        position{line: 274, col: 43, offset: 9337},
											val:        ",",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 274, col: 47, offset: 9341},
										expr: &litMatcher{
											pos:        position{line: 274, col: 48, offset: 9342},
											val:        "]",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 274, col: 52, offset: 9346},
										expr: &ruleRefExpr{
											pos:  position{line: 274, col: 53, offset: 9347},
											name: "EOL",
										},
									},
									&anyMatcher{
										line: 274, col: 57, offset: 9351,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineAttributes",
			pos:  position{line: 278, col: 1, offset: 9392},
			expr: &actionExpr{
				pos: position{line: 278, col: 21, offset: 9412},
				run: (*parser).callonInlineAttributes1,
				expr: &seqExpr{
					pos: position{line: 278, col: 21, offset: 9412},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 278, col: 21, offset: 9412},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 278, col: 25, offset: 9416},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 278, col: 31, offset: 9422},
								expr: &ruleRefExpr{
									pos:  position{line: 278, col: 32, offset: 9423},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 278, col: 51, offset: 9442},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Section",
			pos:  position{line: 285, col: 1, offset: 9616},
			expr: &actionExpr{
				pos: position{line: 285, col: 12, offset: 9627},
				run: (*parser).callonSection1,
				expr: &seqExpr{
					pos: position{line: 285, col: 12, offset: 9627},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 285, col: 12, offset: 9627},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 285, col: 23, offset: 9638},
								expr: &ruleRefExpr{
									pos:  position{line: 285, col: 24, offset: 9639},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 286, col: 5, offset: 9663},
							label: "level",
							expr: &actionExpr{
								pos: position{line: 286, col: 12, offset: 9670},
								run: (*parser).callonSection7,
								expr: &oneOrMoreExpr{
									pos: position{line: 286, col: 12, offset: 9670},
									expr: &litMatcher{
										pos:        position{line: 286, col: 13, offset: 9671},
										val:        "=",
										ignoreCase: false,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 290, col: 5, offset: 9762},
							run: (*parser).callonSection10,
						},
						&oneOrMoreExpr{
							pos: position{line: 294, col: 5, offset: 9914},
							expr: &ruleRefExpr{
								pos:  position{line: 294, col: 5, offset: 9914},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 294, col: 9, offset: 9918},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 294, col: 16, offset: 9925},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 294, col: 31, offset: 9940},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 294, col: 35, offset: 9944},
								expr: &ruleRefExpr{
									pos:  position{line: 294, col: 35, offset: 9944},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 294, col: 53, offset: 9962},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "TitleElements",
			pos:  position{line: 299, col: 1, offset: 10076},
			expr: &actionExpr{
				pos: position{line: 299, col: 18, offset: 10093},
				run: (*parser).callonTitleElements1,
				expr: &labeledExpr{
					pos:   position{line: 299, col: 18, offset: 10093},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 299, col: 27, offset: 10102},
						expr: &seqExpr{
							pos: position{line: 299, col: 28, offset: 10103},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 299, col: 28, offset: 10103},
									expr: &ruleRefExpr{
										pos:  position{line: 299, col: 29, offset: 10104},
										name: "NEWLINE",
									},
								},
								&notExpr{
									pos: position{line: 299, col: 37, offset: 10112},
									expr: &ruleRefExpr{
										pos:  position{line: 299, col: 38, offset: 10113},
										name: "InlineElementID",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 299, col: 54, offset: 10129},
									name: "TitleElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TitleElement",
			pos:  position{line: 303, col: 1, offset: 10250},
			expr: &actionExpr{
				pos: position{line: 303, col: 17, offset: 10266},
				run: (*parser).callonTitleElement1,
				expr: &labeledExpr{
					pos:   position{line: 303, col: 17, offset: 10266},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 303, col: 26, offset: 10275},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 303, col: 26, offset: 10275},
								name: "SimpleWord",
							},
							&ruleRefExpr{
								pos:  position{line: 304, col: 11, offset: 10296},
								name: "Spaces",
							},
							&ruleRefExpr{
								pos:  position{line: 305, col: 11, offset: 10314},
								name: "CrossReference",
							},
							&ruleRefExpr{
								pos:  position{line: 306, col: 11, offset: 10339},
								name: "Passthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 307, col: 11, offset: 10361},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 308, col: 11, offset: 10384},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 309, col: 11, offset: 10399},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 310, col: 11, offset: 10424},
								name: "QuotedText",
							},
							&ruleRefExpr{
								pos:  position{line: 311, col: 11, offset: 10445},
								name: "DocumentAttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 312, col: 11, offset: 10485},
								name: "LineBreak",
							},
							&ruleRefExpr{
								pos:  position{line: 313, col: 11, offset: 10505},
								name: "OtherWord",
							},
						},
					},
				},
			},
		},
		{
			name: "TableOfContentsMacro",
			pos:  position{line: 320, col: 1, offset: 10658},
			expr: &seqExpr{
				pos: position{line: 320, col: 25, offset: 10682},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 320, col: 25, offset: 10682},
						val:        "toc::[]",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 320, col: 35, offset: 10692},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "UserMacroBlock",
			pos:  position{line: 325, col: 1, offset: 10803},
			expr: &actionExpr{
				pos: position{line: 325, col: 19, offset: 10821},
				run: (*parser).callonUserMacroBlock1,
				expr: &seqExpr{
					pos: position{line: 325, col: 19, offset: 10821},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 325, col: 19, offset: 10821},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 325, col: 25, offset: 10827},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 325, col: 40, offset: 10842},
							val:        "::",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 325, col: 45, offset: 10847},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 325, col: 52, offset: 10854},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 325, col: 68, offset: 10870},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 325, col: 75, offset: 10877},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineUserMacro",
			pos:  position{line: 329, col: 1, offset: 11018},
			expr: &actionExpr{
				pos: position{line: 329, col: 20, offset: 11037},
				run: (*parser).callonInlineUserMacro1,
				expr: &seqExpr{
					pos: position{line: 329, col: 20, offset: 11037},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 329, col: 20, offset: 11037},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 329, col: 26, offset: 11043},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 329, col: 41, offset: 11058},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 329, col: 45, offset: 11062},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 329, col: 52, offset: 11069},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 329, col: 68, offset: 11085},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 329, col: 75, offset: 11092},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroName",
			pos:  position{line: 333, col: 1, offset: 11234},
			expr: &actionExpr{
				pos: position{line: 333, col: 18, offset: 11251},
				run: (*parser).callonUserMacroName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 333, col: 18, offset: 11251},
					expr: &choiceExpr{
						pos: position{line: 333, col: 19, offset: 11252},
						alternatives: []interface{}{
							&charClassMatcher{
								pos:        position{line: 333, col: 19, offset: 11252},
								val:        "[a-zA-Z0-9]",
								ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
							&litMatcher{
								pos:        position{line: 333, col: 33, offset: 11266},
								val:        "_",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 333, col: 39, offset: 11272},
								val:        "-",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroValue",
			pos:  position{line: 337, col: 1, offset: 11314},
			expr: &actionExpr{
				pos: position{line: 337, col: 19, offset: 11332},
				run: (*parser).callonUserMacroValue1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 337, col: 19, offset: 11332},
					expr: &choiceExpr{
						pos: position{line: 337, col: 20, offset: 11333},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 337, col: 20, offset: 11333},
								name: "Alphanums",
							},
							&seqExpr{
								pos: position{line: 337, col: 33, offset: 11346},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 337, col: 33, offset: 11346},
										expr: &litMatcher{
											pos:        position{line: 337, col: 34, offset: 11347},
											val:        ":",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 337, col: 38, offset: 11351},
										expr: &litMatcher{
											pos:        position{line: 337, col: 39, offset: 11352},
											val:        "[",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 337, col: 43, offset: 11356},
										expr: &ruleRefExpr{
											pos:  position{line: 337, col: 44, offset: 11357},
											name: "EOL",
										},
									},
									&anyMatcher{
										line: 337, col: 48, offset: 11361,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroAttributes",
			pos:  position{line: 341, col: 1, offset: 11402},
			expr: &actionExpr{
				pos: position{line: 341, col: 24, offset: 11425},
				run: (*parser).callonUserMacroAttributes1,
				expr: &seqExpr{
					pos: position{line: 341, col: 24, offset: 11425},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 341, col: 24, offset: 11425},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 341, col: 28, offset: 11429},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 341, col: 34, offset: 11435},
								expr: &ruleRefExpr{
									pos:  position{line: 341, col: 35, offset: 11436},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 341, col: 54, offset: 11455},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FileInclusion",
			pos:  position{line: 348, col: 1, offset: 11635},
			expr: &actionExpr{
				pos: position{line: 348, col: 18, offset: 11652},
				run: (*parser).callonFileInclusion1,
				expr: &seqExpr{
					pos: position{line: 348, col: 18, offset: 11652},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 348, col: 18, offset: 11652},
							label: "incl",
							expr: &actionExpr{
								pos: position{line: 348, col: 24, offset: 11658},
								run: (*parser).callonFileInclusion4,
								expr: &seqExpr{
									pos: position{line: 348, col: 24, offset: 11658},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 348, col: 24, offset: 11658},
											val:        "include::",
											ignoreCase: false,
										},
										&labeledExpr{
											pos:   position{line: 348, col: 36, offset: 11670},
											label: "path",
											expr: &ruleRefExpr{
												pos:  position{line: 348, col: 42, offset: 11676},
												name: "FileLocation",
											},
										},
										&labeledExpr{
											pos:   position{line: 348, col: 56, offset: 11690},
											label: "inlineAttributes",
											expr: &ruleRefExpr{
												pos:  position{line: 348, col: 74, offset: 11708},
												name: "FileIncludeAttributes",
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 350, col: 8, offset: 11862},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "FileIncludeAttributes",
			pos:  position{line: 354, col: 1, offset: 11915},
			expr: &actionExpr{
				pos: position{line: 354, col: 26, offset: 11940},
				run: (*parser).callonFileIncludeAttributes1,
				expr: &seqExpr{
					pos: position{line: 354, col: 26, offset: 11940},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 354, col: 26, offset: 11940},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 354, col: 30, offset: 11944},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 354, col: 36, offset: 11950},
								expr: &choiceExpr{
									pos: position{line: 354, col: 37, offset: 11951},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 354, col: 37, offset: 11951},
											name: "LineRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 354, col: 59, offset: 11973},
											name: "GenericAttribute",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 354, col: 78, offset: 11992},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttribute",
			pos:  position{line: 358, col: 1, offset: 12062},
			expr: &actionExpr{
				pos: position{line: 358, col: 24, offset: 12085},
				run: (*parser).callonLineRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 358, col: 24, offset: 12085},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 358, col: 24, offset: 12085},
							val:        "lines=",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 358, col: 33, offset: 12094},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 358, col: 40, offset: 12101},
								name: "LineRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 358, col: 66, offset: 12127},
							expr: &litMatcher{
								pos:        position{line: 358, col: 66, offset: 12127},
								val:        ",",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttributeValue",
			pos:  position{line: 363, col: 1, offset: 12223},
			expr: &actionExpr{
				pos: position{line: 363, col: 29, offset: 12251},
				run: (*parser).callonLineRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 363, col: 29, offset: 12251},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 363, col: 29, offset: 12251},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 363, col: 36, offset: 12258},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 363, col: 36, offset: 12258},
										name: "MultipleRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 364, col: 11, offset: 12363},
										name: "MultipleQuotedRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 365, col: 11, offset: 12395},
										name: "MultilineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 366, col: 11, offset: 12421},
										name: "MultilineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 367, col: 11, offset: 12453},
										name: "SinglelineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 368, col: 11, offset: 12485},
										name: "SinglelineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 369, col: 11, offset: 12512},
										name: "UndefinedLineRange",
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 369, col: 31, offset: 12532},
							expr: &ruleRefExpr{
								pos:  position{line: 369, col: 31, offset: 12532},
								name: "WS",
							},
						},
						&choiceExpr{
							pos: position{line: 369, col: 36, offset: 12537},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 369, col: 36, offset: 12537},
									expr: &litMatcher{
										pos:        position{line: 369, col: 37, offset: 12538},
										val:        ",",
										ignoreCase: false,
									},
								},
								&andExpr{
									pos: position{line: 369, col: 43, offset: 12544},
									expr: &litMatcher{
										pos:        position{line: 369, col: 44, offset: 12545},
										val:        "]",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleRanges",
			pos:  position{line: 373, col: 1, offset: 12577},
			expr: &actionExpr{
				pos: position{line: 373, col: 19, offset: 12595},
				run: (*parser).callonMultipleRanges1,
				expr: &seqExpr{
					pos: position{line: 373, col: 19, offset: 12595},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 373, col: 19, offset: 12595},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 373, col: 26, offset: 12602},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 373, col: 26, offset: 12602},
										name: "MultilineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 373, col: 43, offset: 12619},
										name: "SinglelineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 374, col: 5, offset: 12641},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 374, col: 12, offset: 12648},
								expr: &actionExpr{
									pos: position{line: 374, col: 13, offset: 12649},
									run: (*parser).callonMultipleRanges9,
									expr: &seqExpr{
										pos: position{line: 374, col: 13, offset: 12649},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 374, col: 13, offset: 12649},
												val:        ";",
												ignoreCase: false,
											},
											&labeledExpr{
												pos:   position{line: 374, col: 17, offset: 12653},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 374, col: 24, offset: 12660},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 374, col: 24, offset: 12660},
															name: "MultilineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 374, col: 41, offset: 12677},
															name: "SinglelineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleQuotedRanges",
			pos:  position{line: 380, col: 1, offset: 12815},
			expr: &actionExpr{
				pos: position{line: 380, col: 25, offset: 12839},
				run: (*parser).callonMultipleQuotedRanges1,
				expr: &seqExpr{
					pos: position{line: 380, col: 25, offset: 12839},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 380, col: 25, offset: 12839},
							val:        "\"",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 380, col: 30, offset: 12844},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 380, col: 37, offset: 12851},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 380, col: 37, offset: 12851},
										name: "MultilineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 380, col: 54, offset: 12868},
										name: "SinglelineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 381, col: 5, offset: 12890},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 381, col: 12, offset: 12897},
								expr: &actionExpr{
									pos: position{line: 381, col: 13, offset: 12898},
									run: (*parser).callonMultipleQuotedRanges10,
									expr: &seqExpr{
										pos: position{line: 381, col: 13, offset: 12898},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 381, col: 13, offset: 12898},
												val:        ",",
												ignoreCase: false,
											},
											&labeledExpr{
												pos:   position{line: 381, col: 17, offset: 12902},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 381, col: 24, offset: 12909},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 381, col: 24, offset: 12909},
															name: "MultilineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 381, col: 41, offset: 12926},
															name: "SinglelineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 383, col: 9, offset: 12979},
							val:        "\"",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "MultilineRange",
			pos:  position{line: 387, col: 1, offset: 13069},
			expr: &actionExpr{
				pos: position{line: 387, col: 19, offset: 13087},
				run: (*parser).callonMultilineRange1,
				expr: &seqExpr{
					pos: position{line: 387, col: 19, offset: 13087},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 387, col: 19, offset: 13087},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 387, col: 26, offset: 13094},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 387, col: 34, offset: 13102},
							val:        "..",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 387, col: 39, offset: 13107},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 387, col: 44, offset: 13112},
								name: "NUMBER",
							},
						},
					},
				},
			},
		},
		{
			name: "MultilineQuotedRange",
			pos:  position{line: 391, col: 1, offset: 13205},
			expr: &actionExpr{
				pos: position{line: 391, col: 25, offset: 13229},
				run: (*parser).callonMultilineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 391, col: 25, offset: 13229},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 391, col: 25, offset: 13229},
							val:        "\"",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 391, col: 30, offset: 13234},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 391, col: 37, offset: 13241},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 391, col: 45, offset: 13249},
							val:        "..",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 391, col: 50, offset: 13254},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 391, col: 55, offset: 13259},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 391, col: 63, offset: 13267},
							val:        "\"",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SinglelineRange",
			pos:  position{line: 395, col: 1, offset: 13357},
			expr: &actionExpr{
				pos: position{line: 395, col: 20, offset: 13376},
				run: (*parser).callonSinglelineRange1,
				expr: &labeledExpr{
					pos:   position{line: 395, col: 20, offset: 13376},
					label: "singleline",
					expr: &ruleRefExpr{
						pos:  position{line: 395, col: 32, offset: 13388},
						name: "NUMBER",
					},
				},
			},
		},
		{
			name: "SinglelineQuotedRange",
			pos:  position{line: 399, col: 1, offset: 13471},
			expr: &actionExpr{
				pos: position{line: 399, col: 26, offset: 13496},
				run: (*parser).callonSinglelineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 399, col: 26, offset: 13496},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 399, col: 26, offset: 13496},
							val:        "\"",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 399, col: 31, offset: 13501},
							label: "singleline",
							expr: &ruleRefExpr{
								pos:  position{line: 399, col: 43, offset: 13513},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 399, col: 51, offset: 13521},
							val:        "\"",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "UndefinedLineRange",
			pos:  position{line: 403, col: 1, offset: 13601},
			expr: &actionExpr{
				pos: position{line: 403, col: 23, offset: 13623},
				run: (*parser).callonUndefinedLineRange1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 403, col: 23, offset: 13623},
					expr: &seqExpr{
						pos: position{line: 403, col: 24, offset: 13624},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 403, col: 24, offset: 13624},
								expr: &litMatcher{
									pos:        position{line: 403, col: 25, offset: 13625},
									val:        "]",
									ignoreCase: false,
								},
							},
							&notExpr{
								pos: position{line: 403, col: 29, offset: 13629},
								expr: &litMatcher{
									pos:        position{line: 403, col: 30, offset: 13630},
									val:        ",",
									ignoreCase: false,
								},
							},
							&notExpr{
								pos: position{line: 403, col: 34, offset: 13634},
								expr: &ruleRefExpr{
									pos:  position{line: 403, col: 35, offset: 13635},
									name: "WS",
								},
							},
							&anyMatcher{
								line: 403, col: 38, offset: 13638,
							},
						},
					},
				},
			},
		},
		{
			name: "ListItems",
			pos:  position{line: 410, col: 1, offset: 13779},
			expr: &oneOrMoreExpr{
				pos: position{line: 410, col: 14, offset: 13792},
				expr: &ruleRefExpr{
					pos:  position{line: 410, col: 14, offset: 13792},
					name: "ListItem",
				},
			},
		},
		{
			name: "ListItem",
			pos:  position{line: 412, col: 1, offset: 13803},
			expr: &choiceExpr{
				pos: position{line: 412, col: 13, offset: 13815},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 412, col: 13, offset: 13815},
						name: "OrderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 412, col: 31, offset: 13833},
						name: "UnorderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 412, col: 51, offset: 13853},
						name: "LabeledListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 412, col: 69, offset: 13871},
						name: "ContinuedListItemElement",
					},
				},
			},
		},
		{
			name: "ListParagraph",
			pos:  position{line: 414, col: 1, offset: 13897},
			expr: &choiceExpr{
				pos: position{line: 414, col: 18, offset: 13914},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 414, col: 18, offset: 13914},
						run: (*parser).callonListParagraph2,
						expr: &labeledExpr{
							pos:   position{line: 414, col: 18, offset: 13914},
							label: "comment",
							expr: &ruleRefExpr{
								pos:  position{line: 414, col: 27, offset: 13923},
								name: "SingleLineComment",
							},
						},
					},
					&actionExpr{
						pos: position{line: 416, col: 9, offset: 13980},
						run: (*parser).callonListParagraph5,
						expr: &labeledExpr{
							pos:   position{line: 416, col: 9, offset: 13980},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 416, col: 15, offset: 13986},
								expr: &ruleRefExpr{
									pos:  position{line: 416, col: 16, offset: 13987},
									name: "ListParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListParagraphLine",
			pos:  position{line: 420, col: 1, offset: 14079},
			expr: &actionExpr{
				pos: position{line: 420, col: 22, offset: 14100},
				run: (*parser).callonListParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 420, col: 22, offset: 14100},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 420, col: 22, offset: 14100},
							expr: &ruleRefExpr{
								pos:  position{line: 420, col: 23, offset: 14101},
								name: "EOF",
							},
						},
						&notExpr{
							pos: position{line: 421, col: 5, offset: 14109},
							expr: &ruleRefExpr{
								pos:  position{line: 421, col: 6, offset: 14110},
								name: "BlankLine",
							},
						},
						&notExpr{
							pos: position{line: 422, col: 5, offset: 14125},
							expr: &ruleRefExpr{
								pos:  position{line: 422, col: 6, offset: 14126},
								name: "SingleLineComment",
							},
						},
						&notExpr{
							pos: position{line: 423, col: 5, offset: 14148},
							expr: &ruleRefExpr{
								pos:  position{line: 423, col: 6, offset: 14149},
								name: "OrderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 424, col: 5, offset: 14175},
							expr: &ruleRefExpr{
								pos:  position{line: 424, col: 6, offset: 14176},
								name: "UnorderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 425, col: 5, offset: 14204},
							expr: &seqExpr{
								pos: position{line: 425, col: 7, offset: 14206},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 425, col: 7, offset: 14206},
										name: "LabeledListItemTerm",
									},
									&ruleRefExpr{
										pos:  position{line: 425, col: 27, offset: 14226},
										name: "LabeledListItemSeparator",
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 426, col: 5, offset: 14257},
							expr: &ruleRefExpr{
								pos:  position{line: 426, col: 6, offset: 14258},
								name: "ListItemContinuation",
							},
						},
						&notExpr{
							pos: position{line: 427, col: 5, offset: 14283},
							expr: &ruleRefExpr{
								pos:  position{line: 427, col: 6, offset: 14284},
								name: "ElementAttribute",
							},
						},
						&notExpr{
							pos: position{line: 428, col: 5, offset: 14305},
							expr: &ruleRefExpr{
								pos:  position{line: 428, col: 6, offset: 14306},
								name: "BlockDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 429, col: 5, offset: 14325},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 430, col: 9, offset: 14340},
								run: (*parser).callonListParagraphLine24,
								expr: &seqExpr{
									pos: position{line: 430, col: 9, offset: 14340},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 430, col: 9, offset: 14340},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 430, col: 18, offset: 14349},
												expr: &ruleRefExpr{
													pos:  position{line: 430, col: 19, offset: 14350},
													name: "InlineElement",
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 430, col: 35, offset: 14366},
											label: "linebreak",
											expr: &zeroOrOneExpr{
												pos: position{line: 430, col: 45, offset: 14376},
												expr: &ruleRefExpr{
													pos:  position{line: 430, col: 46, offset: 14377},
													name: "LineBreak",
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 432, col: 12, offset: 14529},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ListItemContinuation",
			pos:  position{line: 436, col: 1, offset: 14576},
			expr: &seqExpr{
				pos: position{line: 436, col: 25, offset: 14600},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 436, col: 25, offset: 14600},
						val:        "+",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 436, col: 29, offset: 14604},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "ContinuedListItemElement",
			pos:  position{line: 438, col: 1, offset: 14611},
			expr: &actionExpr{
				pos: position{line: 438, col: 29, offset: 14639},
				run: (*parser).callonContinuedListItemElement1,
				expr: &seqExpr{
					pos: position{line: 438, col: 29, offset: 14639},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 438, col: 29, offset: 14639},
							label: "blanklines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 438, col: 41, offset: 14651},
								expr: &ruleRefExpr{
									pos:  position{line: 438, col: 41, offset: 14651},
									name: "BlankLine",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 438, col: 53, offset: 14663},
							name: "ListItemContinuation",
						},
						&labeledExpr{
							pos:   position{line: 438, col: 74, offset: 14684},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 438, col: 82, offset: 14692},
								name: "DocumentBlock",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItem",
			pos:  position{line: 445, col: 1, offset: 14934},
			expr: &actionExpr{
				pos: position{line: 445, col: 20, offset: 14953},
				run: (*parser).callonOrderedListItem1,
				expr: &seqExpr{
					pos: position{line: 445, col: 20, offset: 14953},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 445, col: 20, offset: 14953},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 445, col: 31, offset: 14964},
								expr: &ruleRefExpr{
									pos:  position{line: 445, col: 32, offset: 14965},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 445, col: 52, offset: 14985},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 445, col: 60, offset: 14993},
								name: "OrderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 445, col: 83, offset: 15016},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 445, col: 92, offset: 15025},
								name: "OrderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemPrefix",
			pos:  position{line: 449, col: 1, offset: 15165},
			expr: &actionExpr{
				pos: position{line: 450, col: 5, offset: 15195},
				run: (*parser).callonOrderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 450, col: 5, offset: 15195},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 450, col: 5, offset: 15195},
							expr: &ruleRefExpr{
								pos:  position{line: 450, col: 5, offset: 15195},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 450, col: 9, offset: 15199},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 452, col: 9, offset: 15262},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 452, col: 9, offset: 15262},
										run: (*parser).callonOrderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 452, col: 9, offset: 15262},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 452, col: 9, offset: 15262},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 452, col: 16, offset: 15269},
														run: (*parser).callonOrderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 452, col: 16, offset: 15269},
															expr: &litMatcher{
																pos:        position{line: 452, col: 17, offset: 15270},
																val:        ".",
																ignoreCase: false,
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 456, col: 9, offset: 15370},
													run: (*parser).callonOrderedListItemPrefix13,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 475, col: 11, offset: 16087},
										run: (*parser).callonOrderedListItemPrefix14,
										expr: &seqExpr{
											pos: position{line: 475, col: 11, offset: 16087},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 475, col: 11, offset: 16087},
													expr: &charClassMatcher{
														pos:        position{line: 475, col: 12, offset: 16088},
														val:        "[0-9]",
														ranges:     []rune{'0', '9'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 475, col: 20, offset: 16096},
													val:        ".",
													ignoreCase: false,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 477, col: 13, offset: 16207},
										run: (*parser).callonOrderedListItemPrefix19,
										expr: &seqExpr{
											pos: position{line: 477, col: 13, offset: 16207},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 477, col: 14, offset: 16208},
													val:        "[a-z]",
													ranges:     []rune{'a', 'z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 477, col: 21, offset: 16215},
													val:        ".",
													ignoreCase: false,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 479, col: 13, offset: 16329},
										run: (*parser).callonOrderedListItemPrefix23,
										expr: &seqExpr{
											pos: position{line: 479, col: 13, offset: 16329},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 479, col: 14, offset: 16330},
													val:        "[A-Z]",
													ranges:     []rune{'A', 'Z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 479, col: 21, offset: 16337},
													val:        ".",
													ignoreCase: false,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 481, col: 13, offset: 16451},
										run: (*parser).callonOrderedListItemPrefix27,
										expr: &seqExpr{
											pos: position{line: 481, col: 13, offset: 16451},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 481, col: 13, offset: 16451},
													expr: &charClassMatcher{
														pos:        position{line: 481, col: 14, offset: 16452},
														val:        "[a-z]",
														ranges:     []rune{'a', 'z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 481, col: 22, offset: 16460},
													val:        ")",
													ignoreCase: false,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 483, col: 13, offset: 16574},
										run: (*parser).callonOrderedListItemPrefix32,
										expr: &seqExpr{
											pos: position{line: 483, col: 13, offset: 16574},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 483, col: 13, offset: 16574},
													expr: &charClassMatcher{
														pos:        position{line: 483, col: 14, offset: 16575},
														val:        "[A-Z]",
														ranges:     []rune{'A', 'Z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 483, col: 22, offset: 16583},
													val:        ")",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 485, col: 12, offset: 16696},
							expr: &ruleRefExpr{
								pos:  position{line: 485, col: 12, offset: 16696},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemContent",
			pos:  position{line: 489, col: 1, offset: 16728},
			expr: &actionExpr{
				pos: position{line: 489, col: 27, offset: 16754},
				run: (*parser).callonOrderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 489, col: 27, offset: 16754},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 489, col: 37, offset: 16764},
						expr: &ruleRefExpr{
							pos:  position{line: 489, col: 37, offset: 16764},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItem",
			pos:  position{line: 496, col: 1, offset: 16964},
			expr: &actionExpr{
				pos: position{line: 496, col: 22, offset: 16985},
				run: (*parser).callonUnorderedListItem1,
				expr: &seqExpr{
					pos: position{line: 496, col: 22, offset: 16985},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 496, col: 22, offset: 16985},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 496, col: 33, offset: 16996},
								expr: &ruleRefExpr{
									pos:  position{line: 496, col: 34, offset: 16997},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 496, col: 54, offset: 17017},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 496, col: 62, offset: 17025},
								name: "UnorderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 496, col: 87, offset: 17050},
							label: "checkstyle",
							expr: &zeroOrOneExpr{
								pos: position{line: 496, col: 98, offset: 17061},
								expr: &ruleRefExpr{
									pos:  position{line: 496, col: 99, offset: 17062},
									name: "UnorderedListItemCheckStyle",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 496, col: 129, offset: 17092},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 496, col: 138, offset: 17101},
								name: "UnorderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemPrefix",
			pos:  position{line: 500, col: 1, offset: 17259},
			expr: &actionExpr{
				pos: position{line: 501, col: 5, offset: 17291},
				run: (*parser).callonUnorderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 501, col: 5, offset: 17291},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 501, col: 5, offset: 17291},
							expr: &ruleRefExpr{
								pos:  position{line: 501, col: 5, offset: 17291},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 501, col: 9, offset: 17295},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 501, col: 17, offset: 17303},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 503, col: 9, offset: 17360},
										run: (*parser).callonUnorderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 503, col: 9, offset: 17360},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 503, col: 9, offset: 17360},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 503, col: 16, offset: 17367},
														run: (*parser).callonUnorderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 503, col: 16, offset: 17367},
															expr: &litMatcher{
																pos:        position{line: 503, col: 17, offset: 17368},
																val:        "*",
																ignoreCase: false,
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 507, col: 9, offset: 17468},
													run: (*parser).callonUnorderedListItemPrefix13,
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 524, col: 14, offset: 18175},
										label: "depth",
										expr: &actionExpr{
											pos: position{line: 524, col: 21, offset: 18182},
											run: (*parser).callonUnorderedListItemPrefix15,
											expr: &litMatcher{
												pos:        position{line: 524, col: 22, offset: 18183},
												val:        "-",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 526, col: 13, offset: 18269},
							expr: &ruleRefExpr{
								pos:  position{line: 526, col: 13, offset: 18269},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemCheckStyle",
			pos:  position{line: 530, col: 1, offset: 18302},
			expr: &actionExpr{
				pos: position{line: 530, col: 32, offset: 18333},
				run: (*parser).callonUnorderedListItemCheckStyle1,
				expr: &seqExpr{
					pos: position{line: 530, col: 32, offset: 18333},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 530, col: 32, offset: 18333},
							expr: &litMatcher{
								pos:        position{line: 530, col: 33, offset: 18334},
								val:        "[",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 530, col: 37, offset: 18338},
							label: "style",
							expr: &choiceExpr{
								pos: position{line: 531, col: 7, offset: 18352},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 531, col: 7, offset: 18352},
										run: (*parser).callonUnorderedListItemCheckStyle7,
										expr: &litMatcher{
											pos:        position{line: 531, col: 7, offset: 18352},
											val:        "[ ]",
											ignoreCase: false,
										},
									},
									&actionExpr{
										pos: position{line: 532, col: 7, offset: 18397},
										run: (*parser).callonUnorderedListItemCheckStyle9,
										expr: &litMatcher{
											pos:        position{line: 532, col: 7, offset: 18397},
											val:        "[*]",
											ignoreCase: false,
										},
									},
									&actionExpr{
										pos: position{line: 533, col: 7, offset: 18440},
										run: (*parser).callonUnorderedListItemCheckStyle11,
										expr: &litMatcher{
											pos:        position{line: 533, col: 7, offset: 18440},
											val:        "[x]",
											ignoreCase: false,
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 534, col: 7, offset: 18482},
							expr: &ruleRefExpr{
								pos:  position{line: 534, col: 7, offset: 18482},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemContent",
			pos:  position{line: 538, col: 1, offset: 18521},
			expr: &actionExpr{
				pos: position{line: 538, col: 29, offset: 18549},
				run: (*parser).callonUnorderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 538, col: 29, offset: 18549},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 538, col: 39, offset: 18559},
						expr: &ruleRefExpr{
							pos:  position{line: 538, col: 39, offset: 18559},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "LabeledListItem",
			pos:  position{line: 545, col: 1, offset: 18875},
			expr: &actionExpr{
				pos: position{line: 545, col: 20, offset: 18894},
				run: (*parser).callonLabeledListItem1,
				expr: &seqExpr{
					pos: position{line: 545, col: 20, offset: 18894},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 545, col: 20, offset: 18894},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 545, col: 31, offset: 18905},
								expr: &ruleRefExpr{
									pos:  position{line: 545, col: 32, offset: 18906},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 545, col: 52, offset: 18926},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 545, col: 58, offset: 18932},
								name: "LabeledListItemTerm",
							},
						},
						&labeledExpr{
							pos:   position{line: 545, col: 79, offset: 18953},
							label: "separator",
							expr: &ruleRefExpr{
								pos:  position{line: 545, col: 90, offset: 18964},
								name: "LabeledListItemSeparator",
							},
						},
						&labeledExpr{
							pos:   position{line: 545, col: 116, offset: 18990},
							label: "description",
							expr: &zeroOrOneExpr{
								pos: position{line: 545, col: 128, offset: 19002},
								expr: &ruleRefExpr{
									pos:  position{line: 545, col: 129, offset: 19003},
									name: "LabeledListItemDescription",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTerm",
			pos:  position{line: 549, col: 1, offset: 19142},
			expr: &actionExpr{
				pos: position{line: 549, col: 24, offset: 19165},
				run: (*parser).callonLabeledListItemTerm1,
				expr: &oneOrMoreExpr{
					pos: position{line: 549, col: 24, offset: 19165},
					expr: &choiceExpr{
						pos: position{line: 549, col: 25, offset: 19166},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 549, col: 25, offset: 19166},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 549, col: 37, offset: 19178},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 549, col: 47, offset: 19188},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 549, col: 47, offset: 19188},
										expr: &ruleRefExpr{
											pos:  position{line: 549, col: 48, offset: 19189},
											name: "NEWLINE",
										},
									},
									&notExpr{
										pos: position{line: 549, col: 56, offset: 19197},
										expr: &litMatcher{
											pos:        position{line: 549, col: 57, offset: 19198},
											val:        "::",
											ignoreCase: false,
										},
									},
									&anyMatcher{
										line: 549, col: 62, offset: 19203,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemSeparator",
			pos:  position{line: 553, col: 1, offset: 19245},
			expr: &actionExpr{
				pos: position{line: 554, col: 5, offset: 19278},
				run: (*parser).callonLabeledListItemSeparator1,
				expr: &seqExpr{
					pos: position{line: 554, col: 5, offset: 19278},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 554, col: 5, offset: 19278},
							label: "separator",
							expr: &actionExpr{
								pos: position{line: 554, col: 16, offset: 19289},
								run: (*parser).callonLabeledListItemSeparator4,
								expr: &oneOrMoreExpr{
									pos: position{line: 554, col: 16, offset: 19289},
									expr: &litMatcher{
										pos:        position{line: 554, col: 17, offset: 19290},
										val:        ":",
										ignoreCase: false,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 557, col: 5, offset: 19348},
							run: (*parser).callonLabeledListItemSeparator7,
						},
						&choiceExpr{
							pos: position{line: 561, col: 6, offset: 19524},
							alternatives: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 561, col: 6, offset: 19524},
									expr: &choiceExpr{
										pos: position{line: 561, col: 7, offset: 19525},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 561, col: 7, offset: 19525},
												name: "WS",
											},
											&ruleRefExpr{
												pos:  position{line: 561, col: 12, offset: 19530},
												name: "NEWLINE",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 561, col: 24, offset: 19542},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemDescription",
			pos:  position{line: 565, col: 1, offset: 19582},
			expr: &actionExpr{
				pos: position{line: 565, col: 31, offset: 19612},
				run: (*parser).callonLabeledListItemDescription1,
				expr: &labeledExpr{
					pos:   position{line: 565, col: 31, offset: 19612},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 565, col: 40, offset: 19621},
						expr: &ruleRefExpr{
							pos:  position{line: 565, col: 41, offset: 19622},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionKind",
			pos:  position{line: 572, col: 1, offset: 19813},
			expr: &choiceExpr{
				pos: position{line: 572, col: 19, offset: 19831},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 572, col: 19, offset: 19831},
						run: (*parser).callonAdmonitionKind2,
						expr: &litMatcher{
							pos:        position{line: 572, col: 19, offset: 19831},
							val:        "TIP",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 574, col: 9, offset: 19877},
						run: (*parser).callonAdmonitionKind4,
						expr: &litMatcher{
							pos:        position{line: 574, col: 9, offset: 19877},
							val:        "NOTE",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 576, col: 9, offset: 19925},
						run: (*parser).callonAdmonitionKind6,
						expr: &litMatcher{
							pos:        position{line: 576, col: 9, offset: 19925},
							val:        "IMPORTANT",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 578, col: 9, offset: 19983},
						run: (*parser).callonAdmonitionKind8,
						expr: &litMatcher{
							pos:        position{line: 578, col: 9, offset: 19983},
							val:        "WARNING",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 580, col: 9, offset: 20037},
						run: (*parser).callonAdmonitionKind10,
						expr: &litMatcher{
							pos:        position{line: 580, col: 9, offset: 20037},
							val:        "CAUTION",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Paragraph",
			pos:  position{line: 589, col: 1, offset: 20344},
			expr: &choiceExpr{
				pos: position{line: 591, col: 5, offset: 20391},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 591, col: 5, offset: 20391},
						run: (*parser).callonParagraph2,
						expr: &seqExpr{
							pos: position{line: 591, col: 5, offset: 20391},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 591, col: 5, offset: 20391},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 591, col: 16, offset: 20402},
										expr: &ruleRefExpr{
											pos:  position{line: 591, col: 17, offset: 20403},
											name: "ElementAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 591, col: 37, offset: 20423},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 591, col: 40, offset: 20426},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 591, col: 56, offset: 20442},
									val:        ": ",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 591, col: 61, offset: 20447},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 591, col: 67, offset: 20453},
										expr: &ruleRefExpr{
											pos:  position{line: 591, col: 68, offset: 20454},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 595, col: 5, offset: 20646},
						run: (*parser).callonParagraph13,
						expr: &seqExpr{
							pos: position{line: 595, col: 5, offset: 20646},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 595, col: 5, offset: 20646},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 595, col: 16, offset: 20657},
										expr: &ruleRefExpr{
											pos:  position{line: 595, col: 17, offset: 20658},
											name: "ElementAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 595, col: 37, offset: 20678},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 595, col: 43, offset: 20684},
										expr: &ruleRefExpr{
											pos:  position{line: 595, col: 44, offset: 20685},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SimpleParagraph",
			pos:  position{line: 600, col: 1, offset: 20850},
			expr: &actionExpr{
				pos: position{line: 600, col: 20, offset: 20869},
				run: (*parser).callonSimpleParagraph1,
				expr: &seqExpr{
					pos: position{line: 600, col: 20, offset: 20869},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 600, col: 20, offset: 20869},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 600, col: 31, offset: 20880},
								expr: &ruleRefExpr{
									pos:  position{line: 600, col: 32, offset: 20881},
									name: "ElementAttributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 601, col: 5, offset: 20906},
							run: (*parser).callonSimpleParagraph6,
						},
						&labeledExpr{
							pos:   position{line: 609, col: 5, offset: 21197},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 609, col: 16, offset: 21208},
								name: "FirstParagraphLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 610, col: 5, offset: 21231},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 610, col: 16, offset: 21242},
								expr: &ruleRefExpr{
									pos:  position{line: 610, col: 17, offset: 21243},
									name: "OtherParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphLines",
			pos:  position{line: 614, col: 1, offset: 21377},
			expr: &actionExpr{
				pos: position{line: 614, col: 19, offset: 21395},
				run: (*parser).callonParagraphLines1,
				expr: &seqExpr{
					pos: position{line: 614, col: 19, offset: 21395},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 614, col: 19, offset: 21395},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 614, col: 30, offset: 21406},
								name: "FirstParagraphLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 614, col: 50, offset: 21426},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 614, col: 61, offset: 21437},
								expr: &ruleRefExpr{
									pos:  position{line: 614, col: 62, offset: 21438},
									name: "OtherParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FirstParagraphLine",
			pos:  position{line: 618, col: 1, offset: 21544},
			expr: &actionExpr{
				pos: position{line: 618, col: 23, offset: 21566},
				run: (*parser).callonFirstParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 618, col: 23, offset: 21566},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 618, col: 23, offset: 21566},
							expr: &seqExpr{
								pos: position{line: 618, col: 25, offset: 21568},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 618, col: 25, offset: 21568},
										name: "LabeledListItemTerm",
									},
									&ruleRefExpr{
										pos:  position{line: 618, col: 45, offset: 21588},
										name: "LabeledListItemSeparator",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 619, col: 5, offset: 21618},
							label: "elements",
							expr: &seqExpr{
								pos: position{line: 619, col: 15, offset: 21628},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 619, col: 15, offset: 21628},
										name: "SimpleWord",
									},
									&zeroOrMoreExpr{
										pos: position{line: 619, col: 26, offset: 21639},
										expr: &ruleRefExpr{
											pos:  position{line: 619, col: 26, offset: 21639},
											name: "InlineElement",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 619, col: 42, offset: 21655},
							label: "linebreak",
							expr: &zeroOrOneExpr{
								pos: position{line: 619, col: 52, offset: 21665},
								expr: &ruleRefExpr{
									pos:  position{line: 619, col: 53, offset: 21666},
									name: "LineBreak",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 619, col: 65, offset: 21678},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "OtherParagraphLine",
			pos:  position{line: 623, col: 1, offset: 21768},
			expr: &actionExpr{
				pos: position{line: 623, col: 23, offset: 21790},
				run: (*parser).callonOtherParagraphLine1,
				expr: &labeledExpr{
					pos:   position{line: 623, col: 23, offset: 21790},
					label: "elements",
					expr: &ruleRefExpr{
						pos:  position{line: 623, col: 33, offset: 21800},
						name: "InlineElements",
					},
				},
			},
		},
		{
			name: "VerseParagraph",
			pos:  position{line: 627, col: 1, offset: 21846},
			expr: &choiceExpr{
				pos: position{line: 629, col: 5, offset: 21898},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 629, col: 5, offset: 21898},
						run: (*parser).callonVerseParagraph2,
						expr: &seqExpr{
							pos: position{line: 629, col: 5, offset: 21898},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 629, col: 5, offset: 21898},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 629, col: 16, offset: 21909},
										expr: &ruleRefExpr{
											pos:  position{line: 629, col: 17, offset: 21910},
											name: "ElementAttributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 630, col: 5, offset: 21934},
									run: (*parser).callonVerseParagraph7,
								},
								&labeledExpr{
									pos:   position{line: 637, col: 5, offset: 22146},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 637, col: 8, offset: 22149},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 637, col: 24, offset: 22165},
									val:        ": ",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 637, col: 29, offset: 22170},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 637, col: 35, offset: 22176},
										expr: &ruleRefExpr{
											pos:  position{line: 637, col: 36, offset: 22177},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 641, col: 5, offset: 22369},
						run: (*parser).callonVerseParagraph14,
						expr: &seqExpr{
							pos: position{line: 641, col: 5, offset: 22369},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 641, col: 5, offset: 22369},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 641, col: 16, offset: 22380},
										expr: &ruleRefExpr{
											pos:  position{line: 641, col: 17, offset: 22381},
											name: "ElementAttributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 642, col: 5, offset: 22405},
									run: (*parser).callonVerseParagraph19,
								},
								&labeledExpr{
									pos:   position{line: 649, col: 5, offset: 22617},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 649, col: 11, offset: 22623},
										expr: &ruleRefExpr{
											pos:  position{line: 649, col: 12, offset: 22624},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElements",
			pos:  position{line: 653, col: 1, offset: 22725},
			expr: &actionExpr{
				pos: position{line: 653, col: 19, offset: 22743},
				run: (*parser).callonInlineElements1,
				expr: &seqExpr{
					pos: position{line: 653, col: 19, offset: 22743},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 653, col: 19, offset: 22743},
							expr: &ruleRefExpr{
								pos:  position{line: 653, col: 20, offset: 22744},
								name: "EOF",
							},
						},
						&notExpr{
							pos: position{line: 653, col: 24, offset: 22748},
							expr: &ruleRefExpr{
								pos:  position{line: 653, col: 25, offset: 22749},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 654, col: 5, offset: 22763},
							label: "elements",
							expr: &choiceExpr{
								pos: position{line: 654, col: 15, offset: 22773},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 654, col: 15, offset: 22773},
										run: (*parser).callonInlineElements9,
										expr: &labeledExpr{
											pos:   position{line: 654, col: 15, offset: 22773},
											label: "comment",
											expr: &ruleRefExpr{
												pos:  position{line: 654, col: 24, offset: 22782},
												name: "SingleLineComment",
											},
										},
									},
									&actionExpr{
										pos: position{line: 656, col: 9, offset: 22874},
										run: (*parser).callonInlineElements12,
										expr: &seqExpr{
											pos: position{line: 656, col: 9, offset: 22874},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 656, col: 9, offset: 22874},
													expr: &ruleRefExpr{
														pos:  position{line: 656, col: 10, offset: 22875},
														name: "BlockDelimiter",
													},
												},
												&labeledExpr{
													pos:   position{line: 656, col: 25, offset: 22890},
													label: "elements",
													expr: &oneOrMoreExpr{
														pos: position{line: 656, col: 34, offset: 22899},
														expr: &ruleRefExpr{
															pos:  position{line: 656, col: 35, offset: 22900},
															name: "InlineElement",
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 656, col: 51, offset: 22916},
													label: "linebreak",
													expr: &zeroOrOneExpr{
														pos: position{line: 656, col: 61, offset: 22926},
														expr: &ruleRefExpr{
															pos:  position{line: 656, col: 62, offset: 22927},
															name: "LineBreak",
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 656, col: 74, offset: 22939},
													name: "EOL",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElement",
			pos:  position{line: 662, col: 1, offset: 23075},
			expr: &actionExpr{
				pos: position{line: 662, col: 18, offset: 23092},
				run: (*parser).callonInlineElement1,
				expr: &seqExpr{
					pos: position{line: 662, col: 18, offset: 23092},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 662, col: 18, offset: 23092},
							expr: &ruleRefExpr{
								pos:  position{line: 662, col: 19, offset: 23093},
								name: "EOL",
							},
						},
						&notExpr{
							pos: position{line: 662, col: 23, offset: 23097},
							expr: &ruleRefExpr{
								pos:  position{line: 662, col: 24, offset: 23098},
								name: "LineBreak",
							},
						},
						&labeledExpr{
							pos:   position{line: 663, col: 5, offset: 23113},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 663, col: 14, offset: 23122},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 663, col: 14, offset: 23122},
										name: "SimpleWord",
									},
									&ruleRefExpr{
										pos:  position{line: 664, col: 11, offset: 23143},
										name: "Spaces",
									},
									&ruleRefExpr{
										pos:  position{line: 665, col: 11, offset: 23161},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 666, col: 11, offset: 23184},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 667, col: 11, offset: 23200},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 668, col: 11, offset: 23223},
										name: "InlineFootnote",
									},
									&ruleRefExpr{
										pos:  position{line: 669, col: 11, offset: 23249},
										name: "InlineUserMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 670, col: 11, offset: 23276},
										name: "QuotedText",
									},
									&ruleRefExpr{
										pos:  position{line: 671, col: 11, offset: 23298},
										name: "CrossReference",
									},
									&ruleRefExpr{
										pos:  position{line: 672, col: 11, offset: 23324},
										name: "DocumentAttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 673, col: 11, offset: 23365},
										name: "InlineElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 674, col: 11, offset: 23392},
										name: "OtherWord",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElementsWithoutSubtitution",
			pos:  position{line: 681, col: 1, offset: 23652},
			expr: &actionExpr{
				pos: position{line: 681, col: 37, offset: 23688},
				run: (*parser).callonInlineElementsWithoutSubtitution1,
				expr: &seqExpr{
					pos: position{line: 681, col: 37, offset: 23688},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 681, col: 37, offset: 23688},
							expr: &ruleRefExpr{
								pos:  position{line: 681, col: 38, offset: 23689},
								name: "BlankLine",
							},
						},
						&notExpr{
							pos: position{line: 681, col: 48, offset: 23699},
							expr: &ruleRefExpr{
								pos:  position{line: 681, col: 49, offset: 23700},
								name: "BlockDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 681, col: 64, offset: 23715},
							label: "elements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 681, col: 73, offset: 23724},
								expr: &ruleRefExpr{
									pos:  position{line: 681, col: 74, offset: 23725},
									name: "InlineElementWithoutSubtitution",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 681, col: 108, offset: 23759},
							label: "linebreak",
							expr: &zeroOrOneExpr{
								pos: position{line: 681, col: 118, offset: 23769},
								expr: &ruleRefExpr{
									pos:  position{line: 681, col: 119, offset: 23770},
									name: "LineBreak",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 681, col: 131, offset: 23782},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "InlineElementWithoutSubtitution",
			pos:  position{line: 685, col: 1, offset: 23873},
			expr: &actionExpr{
				pos: position{line: 685, col: 36, offset: 23908},
				run: (*parser).callonInlineElementWithoutSubtitution1,
				expr: &seqExpr{
					pos: position{line: 685, col: 36, offset: 23908},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 685, col: 36, offset: 23908},
							expr: &ruleRefExpr{
								pos:  position{line: 685, col: 37, offset: 23909},
								name: "EOL",
							},
						},
						&notExpr{
							pos: position{line: 685, col: 41, offset: 23913},
							expr: &ruleRefExpr{
								pos:  position{line: 685, col: 42, offset: 23914},
								name: "LineBreak",
							},
						},
						&labeledExpr{
							pos:   position{line: 686, col: 5, offset: 23929},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 686, col: 14, offset: 23938},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 686, col: 14, offset: 23938},
										name: "SimpleWord",
									},
									&ruleRefExpr{
										pos:  position{line: 687, col: 11, offset: 23959},
										name: "Spaces",
									},
									&ruleRefExpr{
										pos:  position{line: 688, col: 11, offset: 23977},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 689, col: 11, offset: 24000},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 690, col: 11, offset: 24016},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 691, col: 11, offset: 24039},
										name: "QuotedText",
									},
									&ruleRefExpr{
										pos:  position{line: 692, col: 11, offset: 24061},
										name: "CrossReference",
									},
									&ruleRefExpr{
										pos:  position{line: 693, col: 11, offset: 24087},
										name: "InlineElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 694, col: 11, offset: 24113},
										name: "OtherWord",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerbatimBlock",
			pos:  position{line: 699, col: 1, offset: 24247},
			expr: &actionExpr{
				pos: position{line: 699, col: 18, offset: 24264},
				run: (*parser).callonVerbatimBlock1,
				expr: &seqExpr{
					pos: position{line: 699, col: 18, offset: 24264},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 699, col: 18, offset: 24264},
							label: "elements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 699, col: 27, offset: 24273},
								expr: &choiceExpr{
									pos: position{line: 699, col: 28, offset: 24274},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 699, col: 28, offset: 24274},
											name: "BlankLine",
										},
										&ruleRefExpr{
											pos:  position{line: 699, col: 40, offset: 24286},
											name: "FileInclusion",
										},
										&ruleRefExpr{
											pos:  position{line: 699, col: 56, offset: 24302},
											name: "VerbatimParagraph",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 699, col: 76, offset: 24322},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "VerbatimParagraph",
			pos:  position{line: 703, col: 1, offset: 24356},
			expr: &actionExpr{
				pos: position{line: 703, col: 22, offset: 24377},
				run: (*parser).callonVerbatimParagraph1,
				expr: &seqExpr{
					pos: position{line: 703, col: 22, offset: 24377},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 703, col: 22, offset: 24377},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 703, col: 33, offset: 24388},
								expr: &ruleRefExpr{
									pos:  position{line: 703, col: 34, offset: 24389},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 703, col: 54, offset: 24409},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 703, col: 60, offset: 24415},
								expr: &actionExpr{
									pos: position{line: 703, col: 61, offset: 24416},
									run: (*parser).callonVerbatimParagraph8,
									expr: &seqExpr{
										pos: position{line: 703, col: 61, offset: 24416},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 703, col: 61, offset: 24416},
												expr: &ruleRefExpr{
													pos:  position{line: 703, col: 62, offset: 24417},
													name: "EOF",
												},
											},
											&labeledExpr{
												pos:   position{line: 703, col: 66, offset: 24421},
												label: "line",
												expr: &ruleRefExpr{
													pos:  position{line: 703, col: 72, offset: 24427},
													name: "VerbatimParagraphLine",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerbatimParagraphLine",
			pos:  position{line: 709, col: 1, offset: 24547},
			expr: &actionExpr{
				pos: position{line: 709, col: 26, offset: 24572},
				run: (*parser).callonVerbatimParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 709, col: 26, offset: 24572},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 709, col: 26, offset: 24572},
							expr: &ruleRefExpr{
								pos:  position{line: 709, col: 27, offset: 24573},
								name: "BlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 709, col: 42, offset: 24588},
							expr: &ruleRefExpr{
								pos:  position{line: 709, col: 43, offset: 24589},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 709, col: 53, offset: 24599},
							label: "elements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 709, col: 62, offset: 24608},
								expr: &ruleRefExpr{
									pos:  position{line: 709, col: 63, offset: 24609},
									name: "VerbatimParagraphLineElement",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 709, col: 94, offset: 24640},
							label: "linebreak",
							expr: &zeroOrOneExpr{
								pos: position{line: 709, col: 104, offset: 24650},
								expr: &ruleRefExpr{
									pos:  position{line: 709, col: 105, offset: 24651},
									name: "LineBreak",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 709, col: 117, offset: 24663},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "VerbatimParagraphLineElement",
			pos:  position{line: 713, col: 1, offset: 24754},
			expr: &actionExpr{
				pos: position{line: 713, col: 33, offset: 24786},
				run: (*parser).callonVerbatimParagraphLineElement1,
				expr: &oneOrMoreExpr{
					pos: position{line: 713, col: 33, offset: 24786},
					expr: &seqExpr{
						pos: position{line: 713, col: 34, offset: 24787},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 713, col: 34, offset: 24787},
								expr: &ruleRefExpr{
									pos:  position{line: 713, col: 35, offset: 24788},
									name: "EOL",
								},
							},
							&notExpr{
								pos: position{line: 713, col: 39, offset: 24792},
								expr: &ruleRefExpr{
									pos:  position{line: 713, col: 40, offset: 24793},
									name: "LineBreak",
								},
							},
							&anyMatcher{
								line: 713, col: 50, offset: 24803,
							},
						},
					},
				},
			},
		},
		{
			name: "LineBreak",
			pos:  position{line: 720, col: 1, offset: 25027},
			expr: &actionExpr{
				pos: position{line: 720, col: 14, offset: 25040},
				run: (*parser).callonLineBreak1,
				expr: &seqExpr{
					pos: position{line: 720, col: 14, offset: 25040},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 720, col: 14, offset: 25040},
							name: "WS",
						},
						&litMatcher{
							pos:        position{line: 720, col: 17, offset: 25043},
							val:        "+",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 720, col: 21, offset: 25047},
							expr: &ruleRefExpr{
								pos:  position{line: 720, col: 21, offset: 25047},
								name: "WS",
							},
						},
						&andExpr{
							pos: position{line: 720, col: 25, offset: 25051},
							expr: &ruleRefExpr{
								pos:  position{line: 720, col: 26, offset: 25052},
								name: "EOL",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedText",
			pos:  position{line: 727, col: 1, offset: 25336},
			expr: &actionExpr{
				pos: position{line: 727, col: 15, offset: 25350},
				run: (*parser).callonQuotedText1,
				expr: &seqExpr{
					pos: position{line: 727, col: 15, offset: 25350},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 727, col: 15, offset: 25350},
							expr: &ruleRefExpr{
								pos:  position{line: 727, col: 16, offset: 25351},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 727, col: 19, offset: 25354},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 727, col: 25, offset: 25360},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 727, col: 25, offset: 25360},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 728, col: 15, offset: 25384},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 729, col: 15, offset: 25410},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 730, col: 15, offset: 25439},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 731, col: 15, offset: 25468},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 732, col: 15, offset: 25499},
										name: "EscapedBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 733, col: 15, offset: 25530},
										name: "EscapedItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 734, col: 15, offset: 25563},
										name: "EscapedMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 735, col: 15, offset: 25599},
										name: "EscapedSubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 736, col: 15, offset: 25635},
										name: "EscapedSuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 737, col: 15, offset: 25672},
										name: "SubscriptOrSuperscriptPrefix",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextPrefix",
			pos:  position{line: 741, col: 1, offset: 25826},
			expr: &choiceExpr{
				pos: position{line: 741, col: 21, offset: 25846},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 741, col: 21, offset: 25846},
						val:        "**",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 741, col: 28, offset: 25853},
						val:        "*",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 741, col: 34, offset: 25859},
						val:        "__",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 741, col: 41, offset: 25866},
						val:        "_",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 741, col: 47, offset: 25872},
						val:        "``",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 741, col: 54, offset: 25879},
						val:        "`",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 741, col: 60, offset: 25885},
						val:        "^",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 741, col: 66, offset: 25891},
						val:        "~",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "SubscriptOrSuperscriptPrefix",
			pos:  position{line: 743, col: 1, offset: 25896},
			expr: &choiceExpr{
				pos: position{line: 743, col: 33, offset: 25928},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 743, col: 33, offset: 25928},
						val:        "^",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 743, col: 39, offset: 25934},
						run: (*parser).callonSubscriptOrSuperscriptPrefix3,
						expr: &litMatcher{
							pos:        position{line: 743, col: 39, offset: 25934},
							val:        "~",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "OneOrMoreBackslashes",
			pos:  position{line: 747, col: 1, offset: 26067},
			expr: &actionExpr{
				pos: position{line: 747, col: 25, offset: 26091},
				run: (*parser).callonOneOrMoreBackslashes1,
				expr: &oneOrMoreExpr{
					pos: position{line: 747, col: 25, offset: 26091},
					expr: &litMatcher{
						pos:        position{line: 747, col: 25, offset: 26091},
						val:        "\\",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "TwoOrMoreBackslashes",
			pos:  position{line: 751, col: 1, offset: 26132},
			expr: &actionExpr{
				pos: position{line: 751, col: 25, offset: 26156},
				run: (*parser).callonTwoOrMoreBackslashes1,
				expr: &seqExpr{
					pos: position{line: 751, col: 25, offset: 26156},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 751, col: 25, offset: 26156},
							val:        "\\\\",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 751, col: 30, offset: 26161},
							expr: &litMatcher{
								pos:        position{line: 751, col: 30, offset: 26161},
								val:        "\\",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "BoldText",
			pos:  position{line: 759, col: 1, offset: 26258},
			expr: &choiceExpr{
				pos: position{line: 759, col: 13, offset: 26270},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 759, col: 13, offset: 26270},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 759, col: 35, offset: 26292},
						name: "SingleQuoteBoldText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldText",
			pos:  position{line: 761, col: 1, offset: 26313},
			expr: &actionExpr{
				pos: position{line: 761, col: 24, offset: 26336},
				run: (*parser).callonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 761, col: 24, offset: 26336},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 761, col: 24, offset: 26336},
							expr: &litMatcher{
								pos:        position{line: 761, col: 25, offset: 26337},
								val:        "\\\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 761, col: 30, offset: 26342},
							val:        "**",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 761, col: 35, offset: 26347},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 761, col: 44, offset: 26356},
								name: "DoubleQuoteBoldTextContent",
							},
						},
						&litMatcher{
							pos:        position{line: 761, col: 72, offset: 26384},
							val:        "**",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextContent",
			pos:  position{line: 765, col: 1, offset: 26509},
			expr: &seqExpr{
				pos: position{line: 765, col: 31, offset: 26539},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 765, col: 31, offset: 26539},
						name: "DoubleQuoteBoldTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 765, col: 58, offset: 26566},
						expr: &actionExpr{
							pos: position{line: 765, col: 59, offset: 26567},
							run: (*parser).callonDoubleQuoteBoldTextContent4,
							expr: &seqExpr{
								pos: position{line: 765, col: 59, offset: 26567},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 765, col: 59, offset: 26567},
										expr: &litMatcher{
											pos:        position{line: 765, col: 61, offset: 26569},
											val:        "**",
											ignoreCase: false,
										},
									},
									&labeledExpr{
										pos:   position{line: 765, col: 67, offset: 26575},
										label: "element",
										expr: &choiceExpr{
											pos: position{line: 765, col: 76, offset: 26584},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 765, col: 76, offset: 26584},
													name: "WS",
												},
												&ruleRefExpr{
													pos:  position{line: 765, col: 81, offset: 26589},
													name: "DoubleQuoteBoldTextElement",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElement",
			pos:  position{line: 769, col: 1, offset: 26681},
			expr: &actionExpr{
				pos: position{line: 769, col: 31, offset: 26711},
				run: (*parser).callonDoubleQuoteBoldTextElement1,
				expr: &seqExpr{
					pos: position{line: 769, col: 31, offset: 26711},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 769, col: 31, offset: 26711},
							expr: &ruleRefExpr{
								pos:  position{line: 769, col: 32, offset: 26712},
								name: "NEWLINE",
							},
						},
						&labeledExpr{
							pos:   position{line: 769, col: 40, offset: 26720},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 769, col: 49, offset: 26729},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 769, col: 49, offset: 26729},
										name: "SingleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 770, col: 11, offset: 26760},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 771, col: 11, offset: 26782},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 772, col: 11, offset: 26806},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 773, col: 11, offset: 26830},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 774, col: 11, offset: 26856},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 775, col: 11, offset: 26879},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 776, col: 11, offset: 26895},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 777, col: 11, offset: 26918},
										name: "NonDoubleQuoteBoldText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonDoubleQuoteBoldText",
			pos:  position{line: 781, col: 1, offset: 27074},
			expr: &actionExpr{
				pos: position{line: 781, col: 27, offset: 27100},
				run: (*parser).callonNonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 781, col: 27, offset: 27100},
					exprs: []interface{}{
						&anyMatcher{
							line: 781, col: 28, offset: 27101,
						},
						&zeroOrMoreExpr{
							pos: position{line: 781, col: 31, offset: 27104},
							expr: &seqExpr{
								pos: position{line: 781, col: 32, offset: 27105},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 781, col: 32, offset: 27105},
										expr: &litMatcher{
											pos:        position{line: 781, col: 33, offset: 27106},
											val:        "**",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 781, col: 38, offset: 27111},
										expr: &ruleRefExpr{
											pos:  position{line: 781, col: 39, offset: 27112},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 781, col: 42, offset: 27115},
										expr: &litMatcher{
											pos:        position{line: 781, col: 43, offset: 27116},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 781, col: 47, offset: 27120},
										expr: &litMatcher{
											pos:        position{line: 781, col: 48, offset: 27121},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 781, col: 52, offset: 27125},
										expr: &ruleRefExpr{
											pos:  position{line: 781, col: 53, offset: 27126},
											name: "NEWLINE",
										},
									},
									&anyMatcher{
										line: 781, col: 61, offset: 27134,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldText",
			pos:  position{line: 785, col: 1, offset: 27194},
			expr: &choiceExpr{
				pos: position{line: 785, col: 24, offset: 27217},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 785, col: 24, offset: 27217},
						run: (*parser).callonSingleQuoteBoldText2,
						expr: &seqExpr{
							pos: position{line: 785, col: 24, offset: 27217},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 785, col: 24, offset: 27217},
									expr: &litMatcher{
										pos:        position{line: 785, col: 25, offset: 27218},
										val:        "\\",
										ignoreCase: false,
									},
								},
								&notExpr{
									pos: position{line: 785, col: 29, offset: 27222},
									expr: &litMatcher{
										pos:        position{line: 785, col: 30, offset: 27223},
										val:        "**",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 785, col: 35, offset: 27228},
									val:        "*",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 785, col: 39, offset: 27232},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 785, col: 48, offset: 27241},
										name: "SingleQuoteBoldTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 785, col: 76, offset: 27269},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 787, col: 5, offset: 27449},
						run: (*parser).callonSingleQuoteBoldText12,
						expr: &seqExpr{
							pos: position{line: 787, col: 5, offset: 27449},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 787, col: 5, offset: 27449},
									expr: &litMatcher{
										pos:        position{line: 787, col: 6, offset: 27450},
										val:        "\\\\",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 787, col: 11, offset: 27455},
									val:        "**",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 787, col: 16, offset: 27460},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 787, col: 25, offset: 27469},
										name: "SingleQuoteBoldTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 787, col: 53, offset: 27497},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextContent",
			pos:  position{line: 791, col: 1, offset: 27755},
			expr: &seqExpr{
				pos: position{line: 791, col: 31, offset: 27785},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 791, col: 31, offset: 27785},
						expr: &ruleRefExpr{
							pos:  position{line: 791, col: 32, offset: 27786},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 791, col: 35, offset: 27789},
						name: "SingleQuoteBoldTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 791, col: 62, offset: 27816},
						expr: &actionExpr{
							pos: position{line: 791, col: 63, offset: 27817},
							run: (*parser).callonSingleQuoteBoldTextContent6,
							expr: &seqExpr{
								pos: position{line: 791, col: 63, offset: 27817},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 791, col: 63, offset: 27817},
										expr: &seqExpr{
											pos: position{line: 791, col: 65, offset: 27819},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 791, col: 65, offset: 27819},
													val:        "*",
													ignoreCase: false,
												},
												&notExpr{
													pos: position{line: 791, col: 69, offset: 27823},
													expr: &ruleRefExpr{
														pos:  position{line: 791, col: 70, offset: 27824},
														name: "Alphanum",
													},
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 791, col: 80, offset: 27834},
										label: "spaces",
										expr: &zeroOrMoreExpr{
											pos: position{line: 791, col: 88, offset: 27842},
											expr: &ruleRefExpr{
												pos:  position{line: 791, col: 88, offset: 27842},
												name: "WS",
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 791, col: 93, offset: 27847},
										label: "element",
										expr: &ruleRefExpr{
											pos:  position{line: 791, col: 102, offset: 27856},
											name: "SingleQuoteBoldTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElement",
			pos:  position{line: 795, col: 1, offset: 27947},
			expr: &actionExpr{
				pos: position{line: 795, col: 31, offset: 27977},
				run: (*parser).callonSingleQuoteBoldTextElement1,
				expr: &seqExpr{
					pos: position{line: 795, col: 31, offset: 27977},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 795, col: 31, offset: 27977},
							expr: &ruleRefExpr{
								pos:  position{line: 795, col: 32, offset: 27978},
								name: "NEWLINE",
							},
						},
						&labeledExpr{
							pos:   position{line: 795, col: 40, offset: 27986},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 795, col: 49, offset: 27995},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 795, col: 49, offset: 27995},
										name: "DoubleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 796, col: 11, offset: 28025},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 797, col: 11, offset: 28047},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 798, col: 11, offset: 28071},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 799, col: 11, offset: 28095},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 800, col: 11, offset: 28121},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 801, col: 11, offset: 28144},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 802, col: 11, offset: 28160},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 803, col: 11, offset: 28183},
										name: "NonSingleQuoteBoldText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonSingleQuoteBoldText",
			pos:  position{line: 807, col: 1, offset: 28339},
			expr: &actionExpr{
				pos: position{line: 807, col: 27, offset: 28365},
				run: (*parser).callonNonSingleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 807, col: 27, offset: 28365},
					exprs: []interface{}{
						&anyMatcher{
							line: 807, col: 28, offset: 28366,
						},
						&zeroOrMoreExpr{
							pos: position{line: 807, col: 31, offset: 28369},
							expr: &seqExpr{
								pos: position{line: 807, col: 32, offset: 28370},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 807, col: 32, offset: 28370},
										expr: &litMatcher{
											pos:        position{line: 807, col: 33, offset: 28371},
											val:        "*",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 807, col: 37, offset: 28375},
										expr: &ruleRefExpr{
											pos:  position{line: 807, col: 38, offset: 28376},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 807, col: 41, offset: 28379},
										expr: &litMatcher{
											pos:        position{line: 807, col: 42, offset: 28380},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 807, col: 46, offset: 28384},
										expr: &litMatcher{
											pos:        position{line: 807, col: 47, offset: 28385},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 807, col: 51, offset: 28389},
										expr: &ruleRefExpr{
											pos:  position{line: 807, col: 52, offset: 28390},
											name: "NEWLINE",
										},
									},
									&anyMatcher{
										line: 807, col: 60, offset: 28398,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedBoldText",
			pos:  position{line: 811, col: 1, offset: 28458},
			expr: &choiceExpr{
				pos: position{line: 812, col: 5, offset: 28482},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 812, col: 5, offset: 28482},
						run: (*parser).callonEscapedBoldText2,
						expr: &seqExpr{
							pos: position{line: 812, col: 5, offset: 28482},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 812, col: 5, offset: 28482},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 812, col: 18, offset: 28495},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 812, col: 40, offset: 28517},
									val:        "**",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 812, col: 45, offset: 28522},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 812, col: 54, offset: 28531},
										name: "DoubleQuoteBoldTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 812, col: 82, offset: 28559},
									val:        "**",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 814, col: 9, offset: 28715},
						run: (*parser).callonEscapedBoldText10,
						expr: &seqExpr{
							pos: position{line: 814, col: 9, offset: 28715},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 814, col: 9, offset: 28715},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 814, col: 22, offset: 28728},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 814, col: 44, offset: 28750},
									val:        "**",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 814, col: 49, offset: 28755},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 814, col: 58, offset: 28764},
										name: "SingleQuoteBoldTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 814, col: 86, offset: 28792},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 817, col: 9, offset: 28991},
						run: (*parser).callonEscapedBoldText18,
						expr: &seqExpr{
							pos: position{line: 817, col: 9, offset: 28991},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 817, col: 9, offset: 28991},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 817, col: 22, offset: 29004},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 817, col: 44, offset: 29026},
									val:        "*",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 817, col: 48, offset: 29030},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 817, col: 57, offset: 29039},
										name: "SingleQuoteBoldTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 817, col: 85, offset: 29067},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ItalicText",
			pos:  position{line: 825, col: 1, offset: 29274},
			expr: &choiceExpr{
				pos: position{line: 825, col: 15, offset: 29288},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 825, col: 15, offset: 29288},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 825, col: 39, offset: 29312},
						name: "SingleQuoteItalicText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicText",
			pos:  position{line: 827, col: 1, offset: 29335},
			expr: &actionExpr{
				pos: position{line: 827, col: 26, offset: 29360},
				run: (*parser).callonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 827, col: 26, offset: 29360},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 827, col: 26, offset: 29360},
							expr: &litMatcher{
								pos:        position{line: 827, col: 27, offset: 29361},
								val:        "\\\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 827, col: 32, offset: 29366},
							val:        "__",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 827, col: 37, offset: 29371},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 827, col: 46, offset: 29380},
								name: "DoubleQuoteItalicTextContent",
							},
						},
						&litMatcher{
							pos:        position{line: 827, col: 76, offset: 29410},
							val:        "__",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextContent",
			pos:  position{line: 831, col: 1, offset: 29536},
			expr: &seqExpr{
				pos: position{line: 831, col: 33, offset: 29568},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 831, col: 33, offset: 29568},
						name: "DoubleQuoteItalicTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 831, col: 62, offset: 29597},
						expr: &actionExpr{
							pos: position{line: 831, col: 63, offset: 29598},
							run: (*parser).callonDoubleQuoteItalicTextContent4,
							expr: &seqExpr{
								pos: position{line: 831, col: 63, offset: 29598},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 831, col: 63, offset: 29598},
										expr: &litMatcher{
											pos:        position{line: 831, col: 65, offset: 29600},
											val:        "__",
											ignoreCase: false,
										},
									},
									&labeledExpr{
										pos:   position{line: 831, col: 71, offset: 29606},
										label: "element",
										expr: &choiceExpr{
											pos: position{line: 831, col: 80, offset: 29615},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 831, col: 80, offset: 29615},
													name: "WS",
												},
												&ruleRefExpr{
													pos:  position{line: 831, col: 85, offset: 29620},
													name: "DoubleQuoteItalicTextElement",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElement",
			pos:  position{line: 835, col: 1, offset: 29714},
			expr: &actionExpr{
				pos: position{line: 835, col: 33, offset: 29746},
				run: (*parser).callonDoubleQuoteItalicTextElement1,
				expr: &seqExpr{
					pos: position{line: 835, col: 33, offset: 29746},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 835, col: 33, offset: 29746},
							expr: &ruleRefExpr{
								pos:  position{line: 835, col: 34, offset: 29747},
								name: "NEWLINE",
							},
						},
						&labeledExpr{
							pos:   position{line: 835, col: 42, offset: 29755},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 835, col: 51, offset: 29764},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 835, col: 51, offset: 29764},
										name: "SingleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 836, col: 11, offset: 29797},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 837, col: 11, offset: 29817},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 838, col: 11, offset: 29841},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 839, col: 11, offset: 29865},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 840, col: 11, offset: 29891},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 841, col: 11, offset: 29914},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 842, col: 11, offset: 29930},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 843, col: 11, offset: 29953},
										name: "NonDoubleQuoteItalicText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonDoubleQuoteItalicText",
			pos:  position{line: 847, col: 1, offset: 30111},
			expr: &actionExpr{
				pos: position{line: 847, col: 29, offset: 30139},
				run: (*parser).callonNonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 847, col: 29, offset: 30139},
					exprs: []interface{}{
						&anyMatcher{
							line: 847, col: 30, offset: 30140,
						},
						&zeroOrMoreExpr{
							pos: position{line: 847, col: 33, offset: 30143},
							expr: &seqExpr{
								pos: position{line: 847, col: 34, offset: 30144},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 847, col: 34, offset: 30144},
										expr: &litMatcher{
											pos:        position{line: 847, col: 35, offset: 30145},
											val:        "__",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 847, col: 40, offset: 30150},
										expr: &litMatcher{
											pos:        position{line: 847, col: 41, offset: 30151},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 847, col: 45, offset: 30155},
										expr: &litMatcher{
											pos:        position{line: 847, col: 46, offset: 30156},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 847, col: 50, offset: 30160},
										expr: &ruleRefExpr{
											pos:  position{line: 847, col: 51, offset: 30161},
											name: "NEWLINE",
										},
									},
									&anyMatcher{
										line: 847, col: 59, offset: 30169,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicText",
			pos:  position{line: 851, col: 1, offset: 30229},
			expr: &choiceExpr{
				pos: position{line: 851, col: 26, offset: 30254},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 851, col: 26, offset: 30254},
						run: (*parser).callonSingleQuoteItalicText2,
						expr: &seqExpr{
							pos: position{line: 851, col: 26, offset: 30254},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 851, col: 26, offset: 30254},
									expr: &litMatcher{
										pos:        position{line: 851, col: 27, offset: 30255},
										val:        "\\",
										ignoreCase: false,
									},
								},
								&notExpr{
									pos: position{line: 851, col: 31, offset: 30259},
									expr: &litMatcher{
										pos:        position{line: 851, col: 32, offset: 30260},
										val:        "__",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 851, col: 37, offset: 30265},
									val:        "_",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 851, col: 41, offset: 30269},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 851, col: 50, offset: 30278},
										name: "SingleQuoteItalicTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 851, col: 80, offset: 30308},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 853, col: 5, offset: 30490},
						run: (*parser).callonSingleQuoteItalicText12,
						expr: &seqExpr{
							pos: position{line: 853, col: 5, offset: 30490},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 853, col: 5, offset: 30490},
									expr: &litMatcher{
										pos:        position{line: 853, col: 6, offset: 30491},
										val:        "\\\\",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 853, col: 11, offset: 30496},
									val:        "__",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 853, col: 16, offset: 30501},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 853, col: 25, offset: 30510},
										name: "SingleQuoteItalicTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 853, col: 55, offset: 30540},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextContent",
			pos:  position{line: 857, col: 1, offset: 30802},
			expr: &seqExpr{
				pos: position{line: 857, col: 33, offset: 30834},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 857, col: 33, offset: 30834},
						expr: &ruleRefExpr{
							pos:  position{line: 857, col: 34, offset: 30835},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 857, col: 37, offset: 30838},
						name: "SingleQuoteItalicTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 857, col: 66, offset: 30867},
						expr: &actionExpr{
							pos: position{line: 857, col: 67, offset: 30868},
							run: (*parser).callonSingleQuoteItalicTextContent6,
							expr: &seqExpr{
								pos: position{line: 857, col: 67, offset: 30868},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 857, col: 67, offset: 30868},
										expr: &seqExpr{
											pos: position{line: 857, col: 69, offset: 30870},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 857, col: 69, offset: 30870},
													val:        "_",
													ignoreCase: false,
												},
												&notExpr{
													pos: position{line: 857, col: 73, offset: 30874},
													expr: &ruleRefExpr{
														pos:  position{line: 857, col: 74, offset: 30875},
														name: "Alphanum",
													},
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 857, col: 84, offset: 30885},
										label: "spaces",
										expr: &zeroOrMoreExpr{
											pos: position{line: 857, col: 92, offset: 30893},
											expr: &ruleRefExpr{
												pos:  position{line: 857, col: 92, offset: 30893},
												name: "WS",
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 857, col: 97, offset: 30898},
										label: "element",
										expr: &ruleRefExpr{
											pos:  position{line: 857, col: 106, offset: 30907},
											name: "SingleQuoteItalicTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElement",
			pos:  position{line: 861, col: 1, offset: 31000},
			expr: &actionExpr{
				pos: position{line: 861, col: 33, offset: 31032},
				run: (*parser).callonSingleQuoteItalicTextElement1,
				expr: &seqExpr{
					pos: position{line: 861, col: 33, offset: 31032},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 861, col: 33, offset: 31032},
							expr: &ruleRefExpr{
								pos:  position{line: 861, col: 34, offset: 31033},
								name: "NEWLINE",
							},
						},
						&labeledExpr{
							pos:   position{line: 861, col: 42, offset: 31041},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 861, col: 51, offset: 31050},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 861, col: 51, offset: 31050},
										name: "DoubleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 862, col: 11, offset: 31082},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 863, col: 11, offset: 31102},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 864, col: 11, offset: 31126},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 865, col: 11, offset: 31150},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 866, col: 11, offset: 31176},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 867, col: 11, offset: 31199},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 868, col: 11, offset: 31215},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 869, col: 11, offset: 31238},
										name: "NonSingleQuoteItalicText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonSingleQuoteItalicText",
			pos:  position{line: 873, col: 1, offset: 31396},
			expr: &actionExpr{
				pos: position{line: 873, col: 29, offset: 31424},
				run: (*parser).callonNonSingleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 873, col: 29, offset: 31424},
					exprs: []interface{}{
						&anyMatcher{
							line: 873, col: 30, offset: 31425,
						},
						&zeroOrMoreExpr{
							pos: position{line: 873, col: 33, offset: 31428},
							expr: &seqExpr{
								pos: position{line: 873, col: 34, offset: 31429},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 873, col: 34, offset: 31429},
										expr: &litMatcher{
											pos:        position{line: 873, col: 35, offset: 31430},
											val:        "_",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 873, col: 39, offset: 31434},
										expr: &ruleRefExpr{
											pos:  position{line: 873, col: 40, offset: 31435},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 873, col: 43, offset: 31438},
										expr: &litMatcher{
											pos:        position{line: 873, col: 44, offset: 31439},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 873, col: 48, offset: 31443},
										expr: &litMatcher{
											pos:        position{line: 873, col: 49, offset: 31444},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 873, col: 53, offset: 31448},
										expr: &ruleRefExpr{
											pos:  position{line: 873, col: 54, offset: 31449},
											name: "NEWLINE",
										},
									},
									&anyMatcher{
										line: 873, col: 62, offset: 31457,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedItalicText",
			pos:  position{line: 877, col: 1, offset: 31517},
			expr: &choiceExpr{
				pos: position{line: 878, col: 5, offset: 31543},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 878, col: 5, offset: 31543},
						run: (*parser).callonEscapedItalicText2,
						expr: &seqExpr{
							pos: position{line: 878, col: 5, offset: 31543},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 878, col: 5, offset: 31543},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 878, col: 18, offset: 31556},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 878, col: 40, offset: 31578},
									val:        "__",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 878, col: 45, offset: 31583},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 878, col: 54, offset: 31592},
										name: "DoubleQuoteItalicTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 878, col: 84, offset: 31622},
									val:        "__",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 880, col: 9, offset: 31778},
						run: (*parser).callonEscapedItalicText10,
						expr: &seqExpr{
							pos: position{line: 880, col: 9, offset: 31778},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 880, col: 9, offset: 31778},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 880, col: 22, offset: 31791},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 880, col: 44, offset: 31813},
									val:        "__",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 880, col: 49, offset: 31818},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 880, col: 58, offset: 31827},
										name: "SingleQuoteItalicTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 880, col: 88, offset: 31857},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 883, col: 9, offset: 32056},
						run: (*parser).callonEscapedItalicText18,
						expr: &seqExpr{
							pos: position{line: 883, col: 9, offset: 32056},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 883, col: 9, offset: 32056},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 883, col: 22, offset: 32069},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 883, col: 44, offset: 32091},
									val:        "_",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 883, col: 48, offset: 32095},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 883, col: 57, offset: 32104},
										name: "SingleQuoteItalicTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 883, col: 87, offset: 32134},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MonospaceText",
			pos:  position{line: 890, col: 1, offset: 32343},
			expr: &choiceExpr{
				pos: position{line: 890, col: 18, offset: 32360},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 890, col: 18, offset: 32360},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 890, col: 45, offset: 32387},
						name: "SingleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceText",
			pos:  position{line: 892, col: 1, offset: 32413},
			expr: &actionExpr{
				pos: position{line: 892, col: 29, offset: 32441},
				run: (*parser).callonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 892, col: 29, offset: 32441},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 892, col: 29, offset: 32441},
							expr: &litMatcher{
								pos:        position{line: 892, col: 30, offset: 32442},
								val:        "\\\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 892, col: 35, offset: 32447},
							val:        "``",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 892, col: 40, offset: 32452},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 892, col: 49, offset: 32461},
								name: "DoubleQuoteMonospaceTextContent",
							},
						},
						&litMatcher{
							pos:        position{line: 892, col: 82, offset: 32494},
							val:        "``",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextContent",
			pos:  position{line: 896, col: 1, offset: 32623},
			expr: &seqExpr{
				pos: position{line: 896, col: 36, offset: 32658},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 896, col: 36, offset: 32658},
						name: "DoubleQuoteMonospaceTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 896, col: 68, offset: 32690},
						expr: &actionExpr{
							pos: position{line: 896, col: 69, offset: 32691},
							run: (*parser).callonDoubleQuoteMonospaceTextContent4,
							expr: &seqExpr{
								pos: position{line: 896, col: 69, offset: 32691},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 896, col: 69, offset: 32691},
										expr: &litMatcher{
											pos:        position{line: 896, col: 71, offset: 32693},
											val:        "``",
											ignoreCase: false,
										},
									},
									&labeledExpr{
										pos:   position{line: 896, col: 77, offset: 32699},
										label: "element",
										expr: &choiceExpr{
											pos: position{line: 896, col: 86, offset: 32708},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 896, col: 86, offset: 32708},
													name: "WS",
												},
												&ruleRefExpr{
													pos:  position{line: 896, col: 91, offset: 32713},
													name: "DoubleQuoteMonospaceTextElement",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElement",
			pos:  position{line: 900, col: 1, offset: 32810},
			expr: &actionExpr{
				pos: position{line: 900, col: 36, offset: 32845},
				run: (*parser).callonDoubleQuoteMonospaceTextElement1,
				expr: &seqExpr{
					pos: position{line: 900, col: 36, offset: 32845},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 900, col: 36, offset: 32845},
							expr: &ruleRefExpr{
								pos:  position{line: 900, col: 37, offset: 32846},
								name: "NEWLINE",
							},
						},
						&labeledExpr{
							pos:   position{line: 900, col: 45, offset: 32854},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 900, col: 54, offset: 32863},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 900, col: 54, offset: 32863},
										name: "SingleQuoteMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 901, col: 11, offset: 32899},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 902, col: 11, offset: 32918},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 903, col: 11, offset: 32940},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 904, col: 11, offset: 32964},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 905, col: 11, offset: 32990},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 906, col: 11, offset: 33013},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 907, col: 11, offset: 33029},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 908, col: 11, offset: 33052},
										name: "NonDoubleQuoteMonospaceText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonDoubleQuoteMonospaceText",
			pos:  position{line: 912, col: 1, offset: 33213},
			expr: &actionExpr{
				pos: position{line: 912, col: 32, offset: 33244},
				run: (*parser).callonNonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 912, col: 32, offset: 33244},
					exprs: []interface{}{
						&anyMatcher{
							line: 912, col: 33, offset: 33245,
						},
						&zeroOrMoreExpr{
							pos: position{line: 912, col: 36, offset: 33248},
							expr: &seqExpr{
								pos: position{line: 912, col: 37, offset: 33249},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 912, col: 37, offset: 33249},
										expr: &litMatcher{
											pos:        position{line: 912, col: 38, offset: 33250},
											val:        "``",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 912, col: 43, offset: 33255},
										expr: &ruleRefExpr{
											pos:  position{line: 912, col: 44, offset: 33256},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 912, col: 47, offset: 33259},
										expr: &litMatcher{
											pos:        position{line: 912, col: 48, offset: 33260},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 912, col: 52, offset: 33264},
										expr: &litMatcher{
											pos:        position{line: 912, col: 53, offset: 33265},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 912, col: 57, offset: 33269},
										expr: &ruleRefExpr{
											pos:  position{line: 912, col: 58, offset: 33270},
											name: "NEWLINE",
										},
									},
									&anyMatcher{
										line: 912, col: 66, offset: 33278,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceText",
			pos:  position{line: 916, col: 1, offset: 33338},
			expr: &choiceExpr{
				pos: position{line: 916, col: 29, offset: 33366},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 916, col: 29, offset: 33366},
						run: (*parser).callonSingleQuoteMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 916, col: 29, offset: 33366},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 916, col: 29, offset: 33366},
									expr: &litMatcher{
										pos:        position{line: 916, col: 30, offset: 33367},
										val:        "\\",
										ignoreCase: false,
									},
								},
								&notExpr{
									pos: position{line: 916, col: 34, offset: 33371},
									expr: &litMatcher{
										pos:        position{line: 916, col: 35, offset: 33372},
										val:        "``",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 916, col: 40, offset: 33377},
									val:        "`",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 916, col: 44, offset: 33381},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 916, col: 53, offset: 33390},
										name: "SingleQuoteMonospaceTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 916, col: 86, offset: 33423},
									val:        "`",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 918, col: 5, offset: 33608},
						run: (*parser).callonSingleQuoteMonospaceText12,
						expr: &seqExpr{
							pos: position{line: 918, col: 5, offset: 33608},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 918, col: 5, offset: 33608},
									expr: &litMatcher{
										pos:        position{line: 918, col: 6, offset: 33609},
										val:        "\\\\",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 918, col: 11, offset: 33614},
									val:        "``",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 918, col: 16, offset: 33619},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 918, col: 25, offset: 33628},
										name: "SingleQuoteMonospaceTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 918, col: 58, offset: 33661},
									val:        "`",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextContent",
			pos:  position{line: 922, col: 1, offset: 33929},
			expr: &seqExpr{
				pos: position{line: 922, col: 36, offset: 33964},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 922, col: 36, offset: 33964},
						expr: &ruleRefExpr{
							pos:  position{line: 922, col: 37, offset: 33965},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 922, col: 40, offset: 33968},
						name: "SingleQuoteMonospaceTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 922, col: 72, offset: 34000},
						expr: &actionExpr{
							pos: position{line: 922, col: 73, offset: 34001},
							run: (*parser).callonSingleQuoteMonospaceTextContent6,
							expr: &seqExpr{
								pos: position{line: 922, col: 73, offset: 34001},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 922, col: 73, offset: 34001},
										expr: &seqExpr{
											pos: position{line: 922, col: 75, offset: 34003},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 922, col: 75, offset: 34003},
													val:        "`",
													ignoreCase: false,
												},
												&notExpr{
													pos: position{line: 922, col: 79, offset: 34007},
													expr: &ruleRefExpr{
														pos:  position{line: 922, col: 80, offset: 34008},
														name: "Alphanum",
													},
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 922, col: 90, offset: 34018},
										label: "spaces",
										expr: &zeroOrMoreExpr{
											pos: position{line: 922, col: 98, offset: 34026},
											expr: &ruleRefExpr{
												pos:  position{line: 922, col: 98, offset: 34026},
												name: "WS",
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 922, col: 103, offset: 34031},
										label: "element",
										expr: &ruleRefExpr{
											pos:  position{line: 922, col: 112, offset: 34040},
											name: "SingleQuoteMonospaceTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElement",
			pos:  position{line: 926, col: 1, offset: 34136},
			expr: &actionExpr{
				pos: position{line: 926, col: 37, offset: 34172},
				run: (*parser).callonSingleQuoteMonospaceTextElement1,
				expr: &labeledExpr{
					pos:   position{line: 926, col: 37, offset: 34172},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 926, col: 46, offset: 34181},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 926, col: 46, offset: 34181},
								name: "NEWLINE",
							},
							&ruleRefExpr{
								pos:  position{line: 927, col: 11, offset: 34219},
								name: "DoubleQuoteMonospaceText",
							},
							&ruleRefExpr{
								pos:  position{line: 928, col: 11, offset: 34255},
								name: "BoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 929, col: 11, offset: 34275},
								name: "ItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 930, col: 11, offset: 34296},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 931, col: 11, offset: 34320},
								name: "SuperscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 932, col: 11, offset: 34346},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 933, col: 11, offset: 34369},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 934, col: 11, offset: 34385},
								name: "Passthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 935, col: 11, offset: 34408},
								name: "NonSingleQuoteMonospaceText",
							},
						},
					},
				},
			},
		},
		{
			name: "NonSingleQuoteMonospaceText",
			pos:  position{line: 939, col: 1, offset: 34569},
			expr: &actionExpr{
				pos: position{line: 939, col: 32, offset: 34600},
				run: (*parser).callonNonSingleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 939, col: 32, offset: 34600},
					exprs: []interface{}{
						&anyMatcher{
							line: 939, col: 33, offset: 34601,
						},
						&zeroOrMoreExpr{
							pos: position{line: 939, col: 36, offset: 34604},
							expr: &seqExpr{
								pos: position{line: 939, col: 37, offset: 34605},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 939, col: 37, offset: 34605},
										expr: &ruleRefExpr{
											pos:  position{line: 939, col: 38, offset: 34606},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 939, col: 41, offset: 34609},
										expr: &litMatcher{
											pos:        position{line: 939, col: 42, offset: 34610},
											val:        "`",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 939, col: 46, offset: 34614},
										expr: &litMatcher{
											pos:        position{line: 939, col: 47, offset: 34615},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 939, col: 51, offset: 34619},
										expr: &litMatcher{
											pos:        position{line: 939, col: 52, offset: 34620},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 939, col: 56, offset: 34624},
										expr: &ruleRefExpr{
											pos:  position{line: 939, col: 57, offset: 34625},
											name: "NEWLINE",
										},
									},
									&anyMatcher{
										line: 939, col: 65, offset: 34633,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMonospaceText",
			pos:  position{line: 943, col: 1, offset: 34714},
			expr: &choiceExpr{
				pos: position{line: 944, col: 5, offset: 34743},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 944, col: 5, offset: 34743},
						run: (*parser).callonEscapedMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 944, col: 5, offset: 34743},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 944, col: 5, offset: 34743},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 944, col: 18, offset: 34756},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 944, col: 40, offset: 34778},
									val:        "``",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 944, col: 45, offset: 34783},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 944, col: 54, offset: 34792},
										name: "DoubleQuoteMonospaceTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 944, col: 87, offset: 34825},
									val:        "``",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 946, col: 9, offset: 34981},
						run: (*parser).callonEscapedMonospaceText10,
						expr: &seqExpr{
							pos: position{line: 946, col: 9, offset: 34981},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 946, col: 9, offset: 34981},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 946, col: 22, offset: 34994},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 946, col: 44, offset: 35016},
									val:        "``",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 946, col: 49, offset: 35021},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 946, col: 58, offset: 35030},
										name: "SingleQuoteMonospaceTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 946, col: 91, offset: 35063},
									val:        "`",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 949, col: 9, offset: 35262},
						run: (*parser).callonEscapedMonospaceText18,
						expr: &seqExpr{
							pos: position{line: 949, col: 9, offset: 35262},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 949, col: 9, offset: 35262},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 949, col: 22, offset: 35275},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 949, col: 44, offset: 35297},
									val:        "`",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 949, col: 48, offset: 35301},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 949, col: 57, offset: 35310},
										name: "SingleQuoteMonospaceTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 949, col: 90, offset: 35343},
									val:        "`",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptText",
			pos:  position{line: 953, col: 1, offset: 35492},
			expr: &actionExpr{
				pos: position{line: 953, col: 18, offset: 35509},
				run: (*parser).callonSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 953, col: 18, offset: 35509},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 953, col: 18, offset: 35509},
							expr: &litMatcher{
								pos:        position{line: 953, col: 19, offset: 35510},
								val:        "\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 953, col: 23, offset: 35514},
							val:        "~",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 953, col: 27, offset: 35518},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 953, col: 36, offset: 35527},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 953, col: 58, offset: 35549},
							val:        "~",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SubscriptTextElement",
			pos:  position{line: 957, col: 1, offset: 35638},
			expr: &choiceExpr{
				pos: position{line: 957, col: 25, offset: 35662},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 957, col: 25, offset: 35662},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 957, col: 38, offset: 35675},
						name: "NonSubscriptText",
					},
				},
			},
		},
		{
			name: "NonSubscriptText",
			pos:  position{line: 959, col: 1, offset: 35694},
			expr: &actionExpr{
				pos: position{line: 959, col: 21, offset: 35714},
				run: (*parser).callonNonSubscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 959, col: 21, offset: 35714},
					expr: &seqExpr{
						pos: position{line: 959, col: 22, offset: 35715},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 959, col: 22, offset: 35715},
								expr: &ruleRefExpr{
									pos:  position{line: 959, col: 23, offset: 35716},
									name: "NEWLINE",
								},
							},
							&notExpr{
								pos: position{line: 959, col: 31, offset: 35724},
								expr: &ruleRefExpr{
									pos:  position{line: 959, col: 32, offset: 35725},
									name: "WS",
								},
							},
							&notExpr{
								pos: position{line: 959, col: 35, offset: 35728},
								expr: &litMatcher{
									pos:        position{line: 959, col: 36, offset: 35729},
									val:        "~",
									ignoreCase: false,
								},
							},
							&anyMatcher{
								line: 959, col: 40, offset: 35733,
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedSubscriptText",
			pos:  position{line: 963, col: 1, offset: 35766},
			expr: &actionExpr{
				pos: position{line: 963, col: 25, offset: 35790},
				run: (*parser).callonEscapedSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 963, col: 25, offset: 35790},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 963, col: 25, offset: 35790},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 963, col: 38, offset: 35803},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 963, col: 60, offset: 35825},
							val:        "~",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 963, col: 64, offset: 35829},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 963, col: 73, offset: 35838},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 963, col: 95, offset: 35860},
							val:        "~",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SuperscriptText",
			pos:  position{line: 967, col: 1, offset: 35989},
			expr: &actionExpr{
				pos: position{line: 967, col: 20, offset: 36008},
				run: (*parser).callonSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 967, col: 20, offset: 36008},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 967, col: 20, offset: 36008},
							expr: &litMatcher{
								pos:        position{line: 967, col: 21, offset: 36009},
								val:        "\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 967, col: 25, offset: 36013},
							val:        "^",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 967, col: 29, offset: 36017},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 967, col: 38, offset: 36026},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 967, col: 62, offset: 36050},
							val:        "^",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SuperscriptTextElement",
			pos:  position{line: 971, col: 1, offset: 36141},
			expr: &choiceExpr{
				pos: position{line: 971, col: 27, offset: 36167},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 971, col: 27, offset: 36167},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 971, col: 40, offset: 36180},
						name: "NonSuperscriptText",
					},
				},
			},
		},
		{
			name: "NonSuperscriptText",
			pos:  position{line: 973, col: 1, offset: 36201},
			expr: &actionExpr{
				pos: position{line: 973, col: 23, offset: 36223},
				run: (*parser).callonNonSuperscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 973, col: 23, offset: 36223},
					expr: &seqExpr{
						pos: position{line: 973, col: 24, offset: 36224},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 973, col: 24, offset: 36224},
								expr: &ruleRefExpr{
									pos:  position{line: 973, col: 25, offset: 36225},
									name: "NEWLINE",
								},
							},
							&notExpr{
								pos: position{line: 973, col: 33, offset: 36233},
								expr: &ruleRefExpr{
									pos:  position{line: 973, col: 34, offset: 36234},
									name: "WS",
								},
							},
							&notExpr{
								pos: position{line: 973, col: 37, offset: 36237},
								expr: &litMatcher{
									pos:        position{line: 973, col: 38, offset: 36238},
									val:        "^",
									ignoreCase: false,
								},
							},
							&anyMatcher{
								line: 973, col: 42, offset: 36242,
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedSuperscriptText",
			pos:  position{line: 977, col: 1, offset: 36275},
			expr: &actionExpr{
				pos: position{line: 977, col: 27, offset: 36301},
				run: (*parser).callonEscapedSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 977, col: 27, offset: 36301},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 977, col: 27, offset: 36301},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 977, col: 40, offset: 36314},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 977, col: 62, offset: 36336},
							val:        "^",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 977, col: 66, offset: 36340},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 977, col: 75, offset: 36349},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 977, col: 99, offset: 36373},
							val:        "^",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Passthrough",
			pos:  position{line: 984, col: 1, offset: 36609},
			expr: &choiceExpr{
				pos: position{line: 984, col: 16, offset: 36624},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 984, col: 16, offset: 36624},
						name: "TriplePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 984, col: 40, offset: 36648},
						name: "SinglePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 984, col: 64, offset: 36672},
						name: "PassthroughMacro",
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughPrefix",
			pos:  position{line: 986, col: 1, offset: 36690},
			expr: &litMatcher{
				pos:        position{line: 986, col: 32, offset: 36721},
				val:        "+",
				ignoreCase: false,
			},
		},
		{
			name: "SinglePlusPassthrough",
			pos:  position{line: 988, col: 1, offset: 36726},
			expr: &actionExpr{
				pos: position{line: 988, col: 26, offset: 36751},
				run: (*parser).callonSinglePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 988, col: 26, offset: 36751},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 988, col: 26, offset: 36751},
							name: "SinglePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 988, col: 54, offset: 36779},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 988, col: 63, offset: 36788},
								name: "SinglePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 988, col: 93, offset: 36818},
							name: "SinglePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 988, col: 121, offset: 36846},
							expr: &ruleRefExpr{
								pos:  position{line: 988, col: 122, offset: 36847},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughContent",
			pos:  position{line: 992, col: 1, offset: 36946},
			expr: &choiceExpr{
				pos: position{line: 992, col: 33, offset: 36978},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 992, col: 34, offset: 36979},
						run: (*parser).callonSinglePlusPassthroughContent2,
						expr: &seqExpr{
							pos: position{line: 992, col: 34, offset: 36979},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 992, col: 35, offset: 36980},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 992, col: 35, offset: 36980},
											expr: &ruleRefExpr{
												pos:  position{line: 992, col: 36, offset: 36981},
												name: "SinglePlusPassthroughPrefix",
											},
										},
										&notExpr{
											pos: position{line: 992, col: 64, offset: 37009},
											expr: &ruleRefExpr{
												pos:  position{line: 992, col: 65, offset: 37010},
												name: "WS",
											},
										},
										&notExpr{
											pos: position{line: 992, col: 68, offset: 37013},
											expr: &ruleRefExpr{
												pos:  position{line: 992, col: 69, offset: 37014},
												name: "NEWLINE",
											},
										},
										&anyMatcher{
											line: 992, col: 77, offset: 37022,
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 992, col: 80, offset: 37025},
									expr: &seqExpr{
										pos: position{line: 992, col: 81, offset: 37026},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 992, col: 81, offset: 37026},
												expr: &seqExpr{
													pos: position{line: 992, col: 83, offset: 37028},
													exprs: []interface{}{
														&oneOrMoreExpr{
															pos: position{line: 992, col: 83, offset: 37028},
															expr: &ruleRefExpr{
																pos:  position{line: 992, col: 83, offset: 37028},
																name: "WS",
															},
														},
														&ruleRefExpr{
															pos:  position{line: 992, col: 87, offset: 37032},
															name: "SinglePlusPassthroughPrefix",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 992, col: 116, offset: 37061},
												expr: &ruleRefExpr{
													pos:  position{line: 992, col: 117, offset: 37062},
													name: "SinglePlusPassthroughPrefix",
												},
											},
											&notExpr{
												pos: position{line: 992, col: 145, offset: 37090},
												expr: &ruleRefExpr{
													pos:  position{line: 992, col: 146, offset: 37091},
													name: "NEWLINE",
												},
											},
											&anyMatcher{
												line: 992, col: 154, offset: 37099,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 994, col: 7, offset: 37241},
						run: (*parser).callonSinglePlusPassthroughContent24,
						expr: &seqExpr{
							pos: position{line: 994, col: 8, offset: 37242},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 994, col: 8, offset: 37242},
									expr: &ruleRefExpr{
										pos:  position{line: 994, col: 9, offset: 37243},
										name: "WS",
									},
								},
								&notExpr{
									pos: position{line: 994, col: 12, offset: 37246},
									expr: &ruleRefExpr{
										pos:  position{line: 994, col: 13, offset: 37247},
										name: "NEWLINE",
									},
								},
								&notExpr{
									pos: position{line: 994, col: 21, offset: 37255},
									expr: &ruleRefExpr{
										pos:  position{line: 994, col: 22, offset: 37256},
										name: "SinglePlusPassthroughPrefix",
									},
								},
								&anyMatcher{
									line: 994, col: 50, offset: 37284,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughPrefix",
			pos:  position{line: 998, col: 1, offset: 37366},
			expr: &litMatcher{
				pos:        position{line: 998, col: 32, offset: 37397},
				val:        "+++",
				ignoreCase: false,
			},
		},
		{
			name: "TriplePlusPassthrough",
			pos:  position{line: 1000, col: 1, offset: 37404},
			expr: &actionExpr{
				pos: position{line: 1000, col: 26, offset: 37429},
				run: (*parser).callonTriplePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1000, col: 26, offset: 37429},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1000, col: 26, offset: 37429},
							name: "TriplePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1000, col: 54, offset: 37457},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1000, col: 63, offset: 37466},
								name: "TriplePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1000, col: 93, offset: 37496},
							name: "TriplePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1000, col: 121, offset: 37524},
							expr: &ruleRefExpr{
								pos:  position{line: 1000, col: 122, offset: 37525},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughContent",
			pos:  position{line: 1004, col: 1, offset: 37624},
			expr: &choiceExpr{
				pos: position{line: 1004, col: 33, offset: 37656},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1004, col: 34, offset: 37657},
						run: (*parser).callonTriplePlusPassthroughContent2,
						expr: &zeroOrMoreExpr{
							pos: position{line: 1004, col: 34, offset: 37657},
							expr: &seqExpr{
								pos: position{line: 1004, col: 35, offset: 37658},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1004, col: 35, offset: 37658},
										expr: &ruleRefExpr{
											pos:  position{line: 1004, col: 36, offset: 37659},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1004, col: 64, offset: 37687,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1006, col: 7, offset: 37852},
						run: (*parser).callonTriplePlusPassthroughContent8,
						expr: &zeroOrOneExpr{
							pos: position{line: 1006, col: 7, offset: 37852},
							expr: &seqExpr{
								pos: position{line: 1006, col: 8, offset: 37853},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1006, col: 8, offset: 37853},
										expr: &ruleRefExpr{
											pos:  position{line: 1006, col: 9, offset: 37854},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 1006, col: 12, offset: 37857},
										expr: &ruleRefExpr{
											pos:  position{line: 1006, col: 13, offset: 37858},
											name: "NEWLINE",
										},
									},
									&notExpr{
										pos: position{line: 1006, col: 21, offset: 37866},
										expr: &ruleRefExpr{
											pos:  position{line: 1006, col: 22, offset: 37867},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1006, col: 50, offset: 37895,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacro",
			pos:  position{line: 1010, col: 1, offset: 37978},
			expr: &choiceExpr{
				pos: position{line: 1010, col: 21, offset: 37998},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1010, col: 21, offset: 37998},
						run: (*parser).callonPassthroughMacro2,
						expr: &seqExpr{
							pos: position{line: 1010, col: 21, offset: 37998},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1010, col: 21, offset: 37998},
									val:        "pass:[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1010, col: 30, offset: 38007},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1010, col: 38, offset: 38015},
										expr: &ruleRefExpr{
											pos:  position{line: 1010, col: 39, offset: 38016},
											name: "PassthroughMacroCharacter",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1010, col: 67, offset: 38044},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1012, col: 5, offset: 38134},
						run: (*parser).callonPassthroughMacro9,
						expr: &seqExpr{
							pos: position{line: 1012, col: 5, offset: 38134},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1012, col: 5, offset: 38134},
									val:        "pass:q[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1012, col: 15, offset: 38144},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1012, col: 23, offset: 38152},
										expr: &choiceExpr{
											pos: position{line: 1012, col: 24, offset: 38153},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1012, col: 24, offset: 38153},
													name: "QuotedText",
												},
												&ruleRefExpr{
													pos:  position{line: 1012, col: 37, offset: 38166},
													name: "PassthroughMacroCharacter",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1012, col: 65, offset: 38194},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacroCharacter",
			pos:  position{line: 1016, col: 1, offset: 38284},
			expr: &choiceExpr{
				pos: position{line: 1016, col: 31, offset: 38314},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1016, col: 31, offset: 38314},
						name: "Alphanums",
					},
					&ruleRefExpr{
						pos:  position{line: 1016, col: 43, offset: 38326},
						name: "Spaces",
					},
					&actionExpr{
						pos: position{line: 1016, col: 52, offset: 38335},
						run: (*parser).callonPassthroughMacroCharacter4,
						expr: &seqExpr{
							pos: position{line: 1016, col: 53, offset: 38336},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1016, col: 53, offset: 38336},
									expr: &litMatcher{
										pos:        position{line: 1016, col: 54, offset: 38337},
										val:        "]",
										ignoreCase: false,
									},
								},
								&anyMatcher{
									line: 1016, col: 58, offset: 38341,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReference",
			pos:  position{line: 1023, col: 1, offset: 38511},
			expr: &choiceExpr{
				pos: position{line: 1023, col: 19, offset: 38529},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1023, col: 19, offset: 38529},
						run: (*parser).callonCrossReference2,
						expr: &seqExpr{
							pos: position{line: 1023, col: 19, offset: 38529},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1023, col: 19, offset: 38529},
									val:        "<<",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1023, col: 24, offset: 38534},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1023, col: 28, offset: 38538},
										name: "ID",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1023, col: 32, offset: 38542},
									expr: &ruleRefExpr{
										pos:  position{line: 1023, col: 32, offset: 38542},
										name: "WS",
									},
								},
								&litMatcher{
									pos:        position{line: 1023, col: 36, offset: 38546},
									val:        ",",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1023, col: 40, offset: 38550},
									label: "label",
									expr: &ruleRefExpr{
										pos:  position{line: 1023, col: 47, offset: 38557},
										name: "CrossReferenceLabel",
									},
								},
								&litMatcher{
									pos:        position{line: 1023, col: 68, offset: 38578},
									val:        ">>",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1025, col: 5, offset: 38653},
						run: (*parser).callonCrossReference13,
						expr: &seqExpr{
							pos: position{line: 1025, col: 5, offset: 38653},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1025, col: 5, offset: 38653},
									val:        "<<",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1025, col: 10, offset: 38658},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1025, col: 14, offset: 38662},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 1025, col: 18, offset: 38666},
									val:        ">>",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReferenceLabel",
			pos:  position{line: 1029, col: 1, offset: 38729},
			expr: &actionExpr{
				pos: position{line: 1029, col: 24, offset: 38752},
				run: (*parser).callonCrossReferenceLabel1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1029, col: 24, offset: 38752},
					expr: &choiceExpr{
						pos: position{line: 1029, col: 25, offset: 38753},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1029, col: 25, offset: 38753},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 1029, col: 37, offset: 38765},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 1029, col: 47, offset: 38775},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1029, col: 47, offset: 38775},
										expr: &litMatcher{
											pos:        position{line: 1029, col: 48, offset: 38776},
											val:        ">>",
											ignoreCase: false,
										},
									},
									&anyMatcher{
										line: 1029, col: 54, offset: 38782,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Link",
			pos:  position{line: 1036, col: 1, offset: 38924},
			expr: &actionExpr{
				pos: position{line: 1036, col: 9, offset: 38932},
				run: (*parser).callonLink1,
				expr: &labeledExpr{
					pos:   position{line: 1036, col: 9, offset: 38932},
					label: "link",
					expr: &choiceExpr{
						pos: position{line: 1036, col: 15, offset: 38938},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1036, col: 15, offset: 38938},
								name: "RelativeLink",
							},
							&ruleRefExpr{
								pos:  position{line: 1036, col: 30, offset: 38953},
								name: "ExternalLink",
							},
						},
					},
				},
			},
		},
		{
			name: "RelativeLink",
			pos:  position{line: 1041, col: 1, offset: 39060},
			expr: &actionExpr{
				pos: position{line: 1041, col: 17, offset: 39076},
				run: (*parser).callonRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1041, col: 17, offset: 39076},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1041, col: 17, offset: 39076},
							val:        "link:",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1041, col: 25, offset: 39084},
							label: "url",
							expr: &choiceExpr{
								pos: position{line: 1041, col: 30, offset: 39089},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1041, col: 30, offset: 39089},
										name: "Location",
									},
									&ruleRefExpr{
										pos:  position{line: 1041, col: 41, offset: 39100},
										name: "FileLocation",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1041, col: 55, offset: 39114},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1041, col: 73, offset: 39132},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalLink",
			pos:  position{line: 1045, col: 1, offset: 39250},
			expr: &actionExpr{
				pos: position{line: 1045, col: 17, offset: 39266},
				run: (*parser).callonExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1045, col: 17, offset: 39266},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1045, col: 17, offset: 39266},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1045, col: 22, offset: 39271},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1045, col: 32, offset: 39281},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1045, col: 49, offset: 39298},
								expr: &ruleRefExpr{
									pos:  position{line: 1045, col: 50, offset: 39299},
									name: "LinkAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LinkAttributes",
			pos:  position{line: 1049, col: 1, offset: 39392},
			expr: &actionExpr{
				pos: position{line: 1049, col: 19, offset: 39410},
				run: (*parser).callonLinkAttributes1,
				expr: &seqExpr{
					pos: position{line: 1049, col: 19, offset: 39410},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1049, col: 19, offset: 39410},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1049, col: 23, offset: 39414},
							label: "text",
							expr: &zeroOrOneExpr{
								pos: position{line: 1049, col: 28, offset: 39419},
								expr: &ruleRefExpr{
									pos:  position{line: 1049, col: 29, offset: 39420},
									name: "LinkTextAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1049, col: 49, offset: 39440},
							expr: &litMatcher{
								pos:        position{line: 1049, col: 49, offset: 39440},
								val:        ",",
								ignoreCase: false,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1049, col: 54, offset: 39445},
							expr: &ruleRefExpr{
								pos:  position{line: 1049, col: 54, offset: 39445},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 1049, col: 58, offset: 39449},
							label: "otherattrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1049, col: 69, offset: 39460},
								expr: &ruleRefExpr{
									pos:  position{line: 1049, col: 70, offset: 39461},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1049, col: 89, offset: 39480},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "LinkTextAttribute",
			pos:  position{line: 1053, col: 1, offset: 39565},
			expr: &actionExpr{
				pos: position{line: 1053, col: 22, offset: 39586},
				run: (*parser).callonLinkTextAttribute1,
				expr: &seqExpr{
					pos: position{line: 1053, col: 22, offset: 39586},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1053, col: 22, offset: 39586},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1053, col: 31, offset: 39595},
								expr: &seqExpr{
									pos: position{line: 1053, col: 32, offset: 39596},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1053, col: 32, offset: 39596},
											expr: &litMatcher{
												pos:        position{line: 1053, col: 33, offset: 39597},
												val:        "=",
												ignoreCase: false,
											},
										},
										&notExpr{
											pos: position{line: 1053, col: 37, offset: 39601},
											expr: &litMatcher{
												pos:        position{line: 1053, col: 38, offset: 39602},
												val:        ",",
												ignoreCase: false,
											},
										},
										&notExpr{
											pos: position{line: 1053, col: 42, offset: 39606},
											expr: &litMatcher{
												pos:        position{line: 1053, col: 43, offset: 39607},
												val:        "]",
												ignoreCase: false,
											},
										},
										&choiceExpr{
											pos: position{line: 1053, col: 48, offset: 39612},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1053, col: 48, offset: 39612},
													name: "QuotedText",
												},
												&ruleRefExpr{
													pos:  position{line: 1053, col: 61, offset: 39625},
													name: "SimpleWord",
												},
												&ruleRefExpr{
													pos:  position{line: 1053, col: 74, offset: 39638},
													name: "Spaces",
												},
												&actionExpr{
													pos: position{line: 1053, col: 84, offset: 39648},
													run: (*parser).callonLinkTextAttribute16,
													expr: &seqExpr{
														pos: position{line: 1053, col: 85, offset: 39649},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 1053, col: 85, offset: 39649},
																expr: &ruleRefExpr{
																	pos:  position{line: 1053, col: 86, offset: 39650},
																	name: "QuotedTextPrefix",
																},
															},
															&anyMatcher{
																line: 1053, col: 103, offset: 39667,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 1055, col: 7, offset: 39728},
							expr: &notExpr{
								pos: position{line: 1055, col: 9, offset: 39730},
								expr: &litMatcher{
									pos:        position{line: 1055, col: 10, offset: 39731},
									val:        "=",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageBlock",
			pos:  position{line: 1062, col: 1, offset: 39904},
			expr: &actionExpr{
				pos: position{line: 1062, col: 15, offset: 39918},
				run: (*parser).callonImageBlock1,
				expr: &seqExpr{
					pos: position{line: 1062, col: 15, offset: 39918},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1062, col: 15, offset: 39918},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1062, col: 26, offset: 39929},
								expr: &ruleRefExpr{
									pos:  position{line: 1062, col: 27, offset: 39930},
									name: "ElementAttributes",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1062, col: 47, offset: 39950},
							val:        "image::",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1062, col: 57, offset: 39960},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1062, col: 63, offset: 39966},
								name: "URL",
							},
						},
						&labeledExpr{
							pos:   position{line: 1062, col: 68, offset: 39971},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1062, col: 86, offset: 39989},
								name: "ImageAttributes",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1062, col: 103, offset: 40006},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "InlineImage",
			pos:  position{line: 1066, col: 1, offset: 40118},
			expr: &actionExpr{
				pos: position{line: 1066, col: 16, offset: 40133},
				run: (*parser).callonInlineImage1,
				expr: &seqExpr{
					pos: position{line: 1066, col: 16, offset: 40133},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1066, col: 16, offset: 40133},
							val:        "image:",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 1066, col: 25, offset: 40142},
							expr: &litMatcher{
								pos:        position{line: 1066, col: 26, offset: 40143},
								val:        ":",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 1066, col: 30, offset: 40147},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1066, col: 36, offset: 40153},
								name: "URL",
							},
						},
						&labeledExpr{
							pos:   position{line: 1066, col: 41, offset: 40158},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1066, col: 59, offset: 40176},
								name: "ImageAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ImageAttributes",
			pos:  position{line: 1070, col: 1, offset: 40289},
			expr: &actionExpr{
				pos: position{line: 1070, col: 20, offset: 40308},
				run: (*parser).callonImageAttributes1,
				expr: &seqExpr{
					pos: position{line: 1070, col: 20, offset: 40308},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1070, col: 20, offset: 40308},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1070, col: 24, offset: 40312},
							label: "alt",
							expr: &zeroOrOneExpr{
								pos: position{line: 1070, col: 28, offset: 40316},
								expr: &ruleRefExpr{
									pos:  position{line: 1070, col: 29, offset: 40317},
									name: "AttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1070, col: 46, offset: 40334},
							expr: &litMatcher{
								pos:        position{line: 1070, col: 46, offset: 40334},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 1070, col: 51, offset: 40339},
							label: "width",
							expr: &zeroOrOneExpr{
								pos: position{line: 1070, col: 57, offset: 40345},
								expr: &ruleRefExpr{
									pos:  position{line: 1070, col: 58, offset: 40346},
									name: "AttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1070, col: 75, offset: 40363},
							expr: &litMatcher{
								pos:        position{line: 1070, col: 75, offset: 40363},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 1070, col: 80, offset: 40368},
							label: "height",
							expr: &zeroOrOneExpr{
								pos: position{line: 1070, col: 87, offset: 40375},
								expr: &ruleRefExpr{
									pos:  position{line: 1070, col: 88, offset: 40376},
									name: "AttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1070, col: 105, offset: 40393},
							expr: &litMatcher{
								pos:        position{line: 1070, col: 105, offset: 40393},
								val:        ",",
								ignoreCase: false,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1070, col: 110, offset: 40398},
							expr: &ruleRefExpr{
								pos:  position{line: 1070, col: 110, offset: 40398},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 1070, col: 114, offset: 40402},
							label: "otherattrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1070, col: 125, offset: 40413},
								expr: &ruleRefExpr{
									pos:  position{line: 1070, col: 126, offset: 40414},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1070, col: 145, offset: 40433},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "InlineFootnote",
			pos:  position{line: 1077, col: 1, offset: 40723},
			expr: &choiceExpr{
				pos: position{line: 1077, col: 19, offset: 40741},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1077, col: 19, offset: 40741},
						run: (*parser).callonInlineFootnote2,
						expr: &seqExpr{
							pos: position{line: 1077, col: 19, offset: 40741},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1077, col: 19, offset: 40741},
									val:        "footnote:[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1077, col: 32, offset: 40754},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1077, col: 41, offset: 40763},
										name: "FootnoteContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1077, col: 58, offset: 40780},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1079, col: 5, offset: 40855},
						run: (*parser).callonInlineFootnote8,
						expr: &seqExpr{
							pos: position{line: 1079, col: 5, offset: 40855},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1079, col: 5, offset: 40855},
									val:        "footnoteref:[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1079, col: 21, offset: 40871},
									label: "ref",
									expr: &ruleRefExpr{
										pos:  position{line: 1079, col: 26, offset: 40876},
										name: "FootnoteRef",
									},
								},
								&litMatcher{
									pos:        position{line: 1079, col: 39, offset: 40889},
									val:        ",",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1079, col: 43, offset: 40893},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1079, col: 52, offset: 40902},
										name: "FootnoteContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1079, col: 69, offset: 40919},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1081, col: 5, offset: 41004},
						run: (*parser).callonInlineFootnote17,
						expr: &seqExpr{
							pos: position{line: 1081, col: 5, offset: 41004},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1081, col: 5, offset: 41004},
									val:        "footnoteref:[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1081, col: 21, offset: 41020},
									label: "ref",
									expr: &ruleRefExpr{
										pos:  position{line: 1081, col: 26, offset: 41025},
										name: "FootnoteRef",
									},
								},
								&litMatcher{
									pos:        position{line: 1081, col: 39, offset: 41038},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FootnoteRef",
			pos:  position{line: 1085, col: 1, offset: 41153},
			expr: &actionExpr{
				pos: position{line: 1085, col: 16, offset: 41168},
				run: (*parser).callonFootnoteRef1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1085, col: 16, offset: 41168},
					expr: &choiceExpr{
						pos: position{line: 1085, col: 17, offset: 41169},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1085, col: 17, offset: 41169},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 1085, col: 29, offset: 41181},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 1085, col: 39, offset: 41191},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1085, col: 39, offset: 41191},
										expr: &litMatcher{
											pos:        position{line: 1085, col: 40, offset: 41192},
											val:        ",",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1085, col: 44, offset: 41196},
										expr: &litMatcher{
											pos:        position{line: 1085, col: 45, offset: 41197},
											val:        "]",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1085, col: 49, offset: 41201},
										expr: &ruleRefExpr{
											pos:  position{line: 1085, col: 50, offset: 41202},
											name: "EOL",
										},
									},
									&anyMatcher{
										line: 1085, col: 55, offset: 41207,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FootnoteContent",
			pos:  position{line: 1089, col: 1, offset: 41292},
			expr: &actionExpr{
				pos: position{line: 1089, col: 20, offset: 41311},
				run: (*parser).callonFootnoteContent1,
				expr: &labeledExpr{
					pos:   position{line: 1089, col: 20, offset: 41311},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1089, col: 29, offset: 41320},
						expr: &seqExpr{
							pos: position{line: 1089, col: 30, offset: 41321},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1089, col: 30, offset: 41321},
									expr: &litMatcher{
										pos:        position{line: 1089, col: 31, offset: 41322},
										val:        "]",
										ignoreCase: false,
									},
								},
								&notExpr{
									pos: position{line: 1089, col: 35, offset: 41326},
									expr: &ruleRefExpr{
										pos:  position{line: 1089, col: 36, offset: 41327},
										name: "EOL",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1089, col: 40, offset: 41331},
									expr: &ruleRefExpr{
										pos:  position{line: 1089, col: 40, offset: 41331},
										name: "WS",
									},
								},
								&notExpr{
									pos: position{line: 1089, col: 44, offset: 41335},
									expr: &ruleRefExpr{
										pos:  position{line: 1089, col: 45, offset: 41336},
										name: "InlineElementID",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1089, col: 61, offset: 41352},
									name: "InlineElement",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1089, col: 75, offset: 41366},
									expr: &ruleRefExpr{
										pos:  position{line: 1089, col: 75, offset: 41366},
										name: "WS",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DelimitedBlock",
			pos:  position{line: 1096, col: 1, offset: 41680},
			expr: &actionExpr{
				pos: position{line: 1096, col: 19, offset: 41698},
				run: (*parser).callonDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 1096, col: 19, offset: 41698},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1096, col: 19, offset: 41698},
							expr: &ruleRefExpr{
								pos:  position{line: 1096, col: 20, offset: 41699},
								name: "Alphanum",
							},
						},
						&labeledExpr{
							pos:   position{line: 1097, col: 5, offset: 41728},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 1097, col: 12, offset: 41735},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1097, col: 12, offset: 41735},
										name: "FencedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1098, col: 11, offset: 41758},
										name: "ListingBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1099, col: 11, offset: 41782},
										name: "ExampleBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1100, col: 11, offset: 41806},
										name: "VerseBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1101, col: 11, offset: 41828},
										name: "QuoteBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1102, col: 11, offset: 41850},
										name: "SidebarBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1103, col: 11, offset: 41873},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 1104, col: 11, offset: 41901},
										name: "Table",
									},
									&ruleRefExpr{
										pos:  position{line: 1105, col: 11, offset: 41917},
										name: "CommentBlock",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockDelimiter",
			pos:  position{line: 1109, col: 1, offset: 41958},
			expr: &choiceExpr{
				pos: position{line: 1109, col: 19, offset: 41976},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1109, col: 19, offset: 41976},
						name: "LiteralBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1110, col: 19, offset: 42017},
						name: "FencedBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1111, col: 19, offset: 42057},
						name: "ListingBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1112, col: 19, offset: 42098},
						name: "ExampleBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1113, col: 19, offset: 42139},
						name: "CommentBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1114, col: 19, offset: 42180},
						name: "QuoteBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1115, col: 19, offset: 42218},
						name: "SidebarBlockDelimiter",
					},
				},
			},
		},
		{
			name: "FencedBlockDelimiter",
			pos:  position{line: 1121, col: 1, offset: 42437},
			expr: &seqExpr{
				pos: position{line: 1121, col: 25, offset: 42461},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1121, col: 25, offset: 42461},
						val:        "```",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1121, col: 31, offset: 42467},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "FencedBlock",
			pos:  position{line: 1123, col: 1, offset: 42473},
			expr: &actionExpr{
				pos: position{line: 1123, col: 16, offset: 42488},
				run: (*parser).callonFencedBlock1,
				expr: &seqExpr{
					pos: position{line: 1123, col: 16, offset: 42488},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1123, col: 16, offset: 42488},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1123, col: 27, offset: 42499},
								expr: &ruleRefExpr{
									pos:  position{line: 1123, col: 28, offset: 42500},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1123, col: 48, offset: 42520},
							name: "FencedBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1123, col: 69, offset: 42541},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1123, col: 77, offset: 42549},
								expr: &ruleRefExpr{
									pos:  position{line: 1123, col: 78, offset: 42550},
									name: "FencedBlockContent",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1123, col: 100, offset: 42572},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1123, col: 100, offset: 42572},
									name: "FencedBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1123, col: 123, offset: 42595},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FencedBlockContent",
			pos:  position{line: 1127, col: 1, offset: 42703},
			expr: &choiceExpr{
				pos: position{line: 1127, col: 23, offset: 42725},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1127, col: 23, offset: 42725},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 1127, col: 35, offset: 42737},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 1127, col: 51, offset: 42753},
						name: "ListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 1127, col: 62, offset: 42764},
						name: "FencedBlockParagraph",
					},
				},
			},
		},
		{
			name: "FencedBlockParagraph",
			pos:  position{line: 1130, col: 1, offset: 42804},
			expr: &actionExpr{
				pos: position{line: 1130, col: 25, offset: 42828},
				run: (*parser).callonFencedBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1130, col: 25, offset: 42828},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1130, col: 31, offset: 42834},
						expr: &ruleRefExpr{
							pos:  position{line: 1130, col: 32, offset: 42835},
							name: "FencedBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "FencedBlockParagraphLine",
			pos:  position{line: 1134, col: 1, offset: 42948},
			expr: &actionExpr{
				pos: position{line: 1134, col: 29, offset: 42976},
				run: (*parser).callonFencedBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1134, col: 29, offset: 42976},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1134, col: 29, offset: 42976},
							expr: &ruleRefExpr{
								pos:  position{line: 1134, col: 30, offset: 42977},
								name: "FencedBlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 1134, col: 51, offset: 42998},
							expr: &ruleRefExpr{
								pos:  position{line: 1134, col: 52, offset: 42999},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1134, col: 62, offset: 43009},
							label: "line",
							expr: &ruleRefExpr{
								pos:  position{line: 1134, col: 68, offset: 43015},
								name: "InlineElements",
							},
						},
					},
				},
			},
		},
		{
			name: "ListingBlockDelimiter",
			pos:  position{line: 1141, col: 1, offset: 43253},
			expr: &seqExpr{
				pos: position{line: 1141, col: 26, offset: 43278},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1141, col: 26, offset: 43278},
						val:        "----",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1141, col: 33, offset: 43285},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "ListingBlock",
			pos:  position{line: 1144, col: 1, offset: 43326},
			expr: &actionExpr{
				pos: position{line: 1144, col: 17, offset: 43342},
				run: (*parser).callonListingBlock1,
				expr: &seqExpr{
					pos: position{line: 1144, col: 17, offset: 43342},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1144, col: 17, offset: 43342},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1144, col: 28, offset: 43353},
								expr: &ruleRefExpr{
									pos:  position{line: 1144, col: 29, offset: 43354},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1144, col: 49, offset: 43374},
							name: "ListingBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1144, col: 71, offset: 43396},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1144, col: 79, offset: 43404},
								expr: &ruleRefExpr{
									pos:  position{line: 1144, col: 80, offset: 43405},
									name: "ListingBlockElement",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1144, col: 103, offset: 43428},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1144, col: 103, offset: 43428},
									name: "ListingBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1144, col: 127, offset: 43452},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListingBlockElement",
			pos:  position{line: 1148, col: 1, offset: 43561},
			expr: &choiceExpr{
				pos: position{line: 1148, col: 24, offset: 43584},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1148, col: 24, offset: 43584},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 1148, col: 40, offset: 43600},
						name: "ListingBlockParagraph",
					},
				},
			},
		},
		{
			name: "ListingBlockParagraph",
			pos:  position{line: 1150, col: 1, offset: 43623},
			expr: &actionExpr{
				pos: position{line: 1150, col: 26, offset: 43648},
				run: (*parser).callonListingBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1150, col: 26, offset: 43648},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1150, col: 32, offset: 43654},
						expr: &ruleRefExpr{
							pos:  position{line: 1150, col: 33, offset: 43655},
							name: "ListingBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "ListingBlockParagraphLine",
			pos:  position{line: 1154, col: 1, offset: 43774},
			expr: &actionExpr{
				pos: position{line: 1154, col: 30, offset: 43803},
				run: (*parser).callonListingBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1154, col: 30, offset: 43803},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1154, col: 30, offset: 43803},
							expr: &ruleRefExpr{
								pos:  position{line: 1154, col: 31, offset: 43804},
								name: "ListingBlockDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1154, col: 53, offset: 43826},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1154, col: 59, offset: 43832},
								run: (*parser).callonListingBlockParagraphLine6,
								expr: &seqExpr{
									pos: position{line: 1154, col: 59, offset: 43832},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1154, col: 59, offset: 43832},
											expr: &ruleRefExpr{
												pos:  position{line: 1154, col: 60, offset: 43833},
												name: "EOF",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 1154, col: 64, offset: 43837},
											expr: &choiceExpr{
												pos: position{line: 1154, col: 65, offset: 43838},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 1154, col: 65, offset: 43838},
														name: "Alphanums",
													},
													&ruleRefExpr{
														pos:  position{line: 1154, col: 77, offset: 43850},
														name: "Spaces",
													},
													&seqExpr{
														pos: position{line: 1154, col: 87, offset: 43860},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 1154, col: 87, offset: 43860},
																expr: &ruleRefExpr{
																	pos:  position{line: 1154, col: 88, offset: 43861},
																	name: "EOL",
																},
															},
															&anyMatcher{
																line: 1154, col: 92, offset: 43865,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1154, col: 128, offset: 43901},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockDelimiter",
			pos:  position{line: 1161, col: 1, offset: 44227},
			expr: &seqExpr{
				pos: position{line: 1161, col: 26, offset: 44252},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1161, col: 26, offset: 44252},
						val:        "====",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1161, col: 33, offset: 44259},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "ExampleBlock",
			pos:  position{line: 1163, col: 1, offset: 44265},
			expr: &actionExpr{
				pos: position{line: 1163, col: 17, offset: 44281},
				run: (*parser).callonExampleBlock1,
				expr: &seqExpr{
					pos: position{line: 1163, col: 17, offset: 44281},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1163, col: 17, offset: 44281},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1163, col: 28, offset: 44292},
								expr: &ruleRefExpr{
									pos:  position{line: 1163, col: 29, offset: 44293},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1163, col: 49, offset: 44313},
							name: "ExampleBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1163, col: 71, offset: 44335},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1163, col: 79, offset: 44343},
								expr: &choiceExpr{
									pos: position{line: 1163, col: 80, offset: 44344},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1163, col: 80, offset: 44344},
											name: "BlankLine",
										},
										&ruleRefExpr{
											pos:  position{line: 1163, col: 92, offset: 44356},
											name: "FileInclusion",
										},
										&ruleRefExpr{
											pos:  position{line: 1163, col: 108, offset: 44372},
											name: "ListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1163, col: 119, offset: 44383},
											name: "ExampleBlockParagraph",
										},
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1163, col: 145, offset: 44409},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1163, col: 145, offset: 44409},
									name: "ExampleBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1163, col: 169, offset: 44433},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockParagraph",
			pos:  position{line: 1168, col: 1, offset: 44560},
			expr: &actionExpr{
				pos: position{line: 1168, col: 26, offset: 44585},
				run: (*parser).callonExampleBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1168, col: 26, offset: 44585},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1168, col: 32, offset: 44591},
						expr: &ruleRefExpr{
							pos:  position{line: 1168, col: 33, offset: 44592},
							name: "ExampleBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockParagraphLine",
			pos:  position{line: 1172, col: 1, offset: 44706},
			expr: &actionExpr{
				pos: position{line: 1172, col: 30, offset: 44735},
				run: (*parser).callonExampleBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1172, col: 30, offset: 44735},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1172, col: 30, offset: 44735},
							expr: &ruleRefExpr{
								pos:  position{line: 1172, col: 31, offset: 44736},
								name: "ExampleBlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 1172, col: 53, offset: 44758},
							expr: &ruleRefExpr{
								pos:  position{line: 1172, col: 54, offset: 44759},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1172, col: 64, offset: 44769},
							label: "line",
							expr: &ruleRefExpr{
								pos:  position{line: 1172, col: 70, offset: 44775},
								name: "InlineElements",
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockDelimiter",
			pos:  position{line: 1179, col: 1, offset: 45011},
			expr: &seqExpr{
				pos: position{line: 1179, col: 24, offset: 45034},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1179, col: 24, offset: 45034},
						val:        "____",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1179, col: 31, offset: 45041},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "QuoteBlock",
			pos:  position{line: 1181, col: 1, offset: 45072},
			expr: &actionExpr{
				pos: position{line: 1181, col: 15, offset: 45086},
				run: (*parser).callonQuoteBlock1,
				expr: &seqExpr{
					pos: position{line: 1181, col: 15, offset: 45086},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1181, col: 15, offset: 45086},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1181, col: 26, offset: 45097},
								expr: &ruleRefExpr{
									pos:  position{line: 1181, col: 27, offset: 45098},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1181, col: 47, offset: 45118},
							name: "QuoteBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1181, col: 67, offset: 45138},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1181, col: 75, offset: 45146},
								expr: &ruleRefExpr{
									pos:  position{line: 1181, col: 76, offset: 45147},
									name: "QuoteBlockElement",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1181, col: 97, offset: 45168},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1181, col: 97, offset: 45168},
									name: "QuoteBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1181, col: 119, offset: 45190},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockElement",
			pos:  position{line: 1185, col: 1, offset: 45297},
			expr: &actionExpr{
				pos: position{line: 1186, col: 5, offset: 45323},
				run: (*parser).callonQuoteBlockElement1,
				expr: &seqExpr{
					pos: position{line: 1186, col: 5, offset: 45323},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1186, col: 5, offset: 45323},
							expr: &ruleRefExpr{
								pos:  position{line: 1186, col: 6, offset: 45324},
								name: "QuoteBlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 1186, col: 26, offset: 45344},
							expr: &ruleRefExpr{
								pos:  position{line: 1186, col: 27, offset: 45345},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1186, col: 31, offset: 45349},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1186, col: 40, offset: 45358},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1186, col: 40, offset: 45358},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 1187, col: 15, offset: 45383},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 1188, col: 15, offset: 45411},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1189, col: 15, offset: 45437},
										name: "ListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 1190, col: 15, offset: 45460},
										name: "FencedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1191, col: 15, offset: 45486},
										name: "ListingBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1192, col: 15, offset: 45513},
										name: "ExampleBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1193, col: 15, offset: 45540},
										name: "CommentBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1194, col: 15, offset: 45567},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 1195, col: 15, offset: 45599},
										name: "QuoteBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1196, col: 15, offset: 45625},
										name: "SidebarBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1197, col: 15, offset: 45652},
										name: "Table",
									},
									&ruleRefExpr{
										pos:  position{line: 1198, col: 15, offset: 45673},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1199, col: 15, offset: 45701},
										name: "DocumentAttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 1200, col: 15, offset: 45745},
										name: "DocumentAttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 1201, col: 15, offset: 45783},
										name: "TableOfContentsMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 1202, col: 15, offset: 45818},
										name: "QuoteBlockParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockParagraph",
			pos:  position{line: 1206, col: 1, offset: 45877},
			expr: &actionExpr{
				pos: position{line: 1206, col: 24, offset: 45900},
				run: (*parser).callonQuoteBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1206, col: 24, offset: 45900},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1206, col: 30, offset: 45906},
						expr: &ruleRefExpr{
							pos:  position{line: 1206, col: 31, offset: 45907},
							name: "InlineElements",
						},
					},
				},
			},
		},
		{
			name: "VerseBlock",
			pos:  position{line: 1215, col: 1, offset: 46253},
			expr: &actionExpr{
				pos: position{line: 1215, col: 15, offset: 46267},
				run: (*parser).callonVerseBlock1,
				expr: &seqExpr{
					pos: position{line: 1215, col: 15, offset: 46267},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1215, col: 15, offset: 46267},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1215, col: 27, offset: 46279},
								name: "ElementAttributes",
							},
						},
						&andCodeExpr{
							pos: position{line: 1216, col: 5, offset: 46303},
							run: (*parser).callonVerseBlock5,
						},
						&ruleRefExpr{
							pos:  position{line: 1220, col: 5, offset: 46489},
							name: "QuoteBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1220, col: 25, offset: 46509},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1220, col: 33, offset: 46517},
								expr: &ruleRefExpr{
									pos:  position{line: 1220, col: 34, offset: 46518},
									name: "VerseBlockElement",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1220, col: 55, offset: 46539},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1220, col: 55, offset: 46539},
									name: "QuoteBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1220, col: 77, offset: 46561},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockElement",
			pos:  position{line: 1224, col: 1, offset: 46676},
			expr: &choiceExpr{
				pos: position{line: 1224, col: 22, offset: 46697},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1224, col: 22, offset: 46697},
						name: "VerseFileInclude",
					},
					&ruleRefExpr{
						pos:  position{line: 1224, col: 41, offset: 46716},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 1224, col: 53, offset: 46728},
						name: "VerseBlockParagraph",
					},
				},
			},
		},
		{
			name: "VerseFileInclude",
			pos:  position{line: 1226, col: 1, offset: 46749},
			expr: &actionExpr{
				pos: position{line: 1226, col: 21, offset: 46769},
				run: (*parser).callonVerseFileInclude1,
				expr: &seqExpr{
					pos: position{line: 1226, col: 21, offset: 46769},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1226, col: 21, offset: 46769},
							expr: &ruleRefExpr{
								pos:  position{line: 1226, col: 22, offset: 46770},
								name: "QuoteBlockDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1226, col: 42, offset: 46790},
							label: "include",
							expr: &ruleRefExpr{
								pos:  position{line: 1226, col: 51, offset: 46799},
								name: "FileInclusion",
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraph",
			pos:  position{line: 1231, col: 1, offset: 46861},
			expr: &actionExpr{
				pos: position{line: 1231, col: 24, offset: 46884},
				run: (*parser).callonVerseBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1231, col: 24, offset: 46884},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1231, col: 30, offset: 46890},
						expr: &ruleRefExpr{
							pos:  position{line: 1231, col: 31, offset: 46891},
							name: "VerseBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraphLine",
			pos:  position{line: 1235, col: 1, offset: 46981},
			expr: &actionExpr{
				pos: position{line: 1235, col: 28, offset: 47008},
				run: (*parser).callonVerseBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1235, col: 28, offset: 47008},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1235, col: 28, offset: 47008},
							expr: &ruleRefExpr{
								pos:  position{line: 1235, col: 29, offset: 47009},
								name: "QuoteBlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 1235, col: 49, offset: 47029},
							expr: &ruleRefExpr{
								pos:  position{line: 1235, col: 50, offset: 47030},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1235, col: 60, offset: 47040},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1235, col: 66, offset: 47046},
								run: (*parser).callonVerseBlockParagraphLine8,
								expr: &seqExpr{
									pos: position{line: 1235, col: 66, offset: 47046},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 1235, col: 66, offset: 47046},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 1235, col: 75, offset: 47055},
												expr: &ruleRefExpr{
													pos:  position{line: 1235, col: 76, offset: 47056},
													name: "VerseBlockParagraphLineElement",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1235, col: 109, offset: 47089},
											name: "EOL",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraphLineElement",
			pos:  position{line: 1241, col: 1, offset: 47185},
			expr: &actionExpr{
				pos: position{line: 1241, col: 35, offset: 47219},
				run: (*parser).callonVerseBlockParagraphLineElement1,
				expr: &seqExpr{
					pos: position{line: 1241, col: 35, offset: 47219},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1241, col: 35, offset: 47219},
							expr: &ruleRefExpr{
								pos:  position{line: 1241, col: 36, offset: 47220},
								name: "EOL",
							},
						},
						&notExpr{
							pos: position{line: 1241, col: 40, offset: 47224},
							expr: &ruleRefExpr{
								pos:  position{line: 1241, col: 41, offset: 47225},
								name: "LineBreak",
							},
						},
						&labeledExpr{
							pos:   position{line: 1242, col: 5, offset: 47240},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1242, col: 14, offset: 47249},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1242, col: 14, offset: 47249},
										name: "Spaces",
									},
									&ruleRefExpr{
										pos:  position{line: 1243, col: 11, offset: 47267},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 1244, col: 11, offset: 47290},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 1245, col: 11, offset: 47306},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 1246, col: 11, offset: 47329},
										name: "InlineFootnote",
									},
									&ruleRefExpr{
										pos:  position{line: 1247, col: 11, offset: 47355},
										name: "InlineUserMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 1248, col: 11, offset: 47382},
										name: "QuotedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1249, col: 11, offset: 47404},
										name: "CrossReference",
									},
									&ruleRefExpr{
										pos:  position{line: 1250, col: 11, offset: 47430},
										name: "DocumentAttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 1251, col: 11, offset: 47471},
										name: "InlineElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 1252, col: 11, offset: 47498},
										name: "OtherWord",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockDelimiter",
			pos:  position{line: 1259, col: 1, offset: 47728},
			expr: &seqExpr{
				pos: position{line: 1259, col: 26, offset: 47753},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1259, col: 26, offset: 47753},
						val:        "****",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1259, col: 33, offset: 47760},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "SidebarBlock",
			pos:  position{line: 1261, col: 1, offset: 47766},
			expr: &actionExpr{
				pos: position{line: 1261, col: 17, offset: 47782},
				run: (*parser).callonSidebarBlock1,
				expr: &seqExpr{
					pos: position{line: 1261, col: 17, offset: 47782},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1261, col: 17, offset: 47782},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1261, col: 28, offset: 47793},
								expr: &ruleRefExpr{
									pos:  position{line: 1261, col: 29, offset: 47794},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1261, col: 49, offset: 47814},
							name: "SidebarBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1261, col: 71, offset: 47836},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1261, col: 79, offset: 47844},
								expr: &ruleRefExpr{
									pos:  position{line: 1261, col: 80, offset: 47845},
									name: "SidebarBlockContent",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1261, col: 104, offset: 47869},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1261, col: 104, offset: 47869},
									name: "SidebarBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1261, col: 128, offset: 47893},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockContent",
			pos:  position{line: 1265, col: 1, offset: 48002},
			expr: &choiceExpr{
				pos: position{line: 1265, col: 24, offset: 48025},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1265, col: 24, offset: 48025},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 1265, col: 36, offset: 48037},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 1265, col: 52, offset: 48053},
						name: "ListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 1265, col: 63, offset: 48064},
						name: "NonSidebarBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 1265, col: 81, offset: 48082},
						name: "SidebarBlockParagraph",
					},
				},
			},
		},
		{
			name: "NonSidebarBlock",
			pos:  position{line: 1267, col: 1, offset: 48105},
			expr: &actionExpr{
				pos: position{line: 1267, col: 20, offset: 48124},
				run: (*parser).callonNonSidebarBlock1,
				expr: &seqExpr{
					pos: position{line: 1267, col: 20, offset: 48124},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1267, col: 20, offset: 48124},
							expr: &ruleRefExpr{
								pos:  position{line: 1267, col: 21, offset: 48125},
								name: "SidebarBlock",
							},
						},
						&labeledExpr{
							pos:   position{line: 1267, col: 34, offset: 48138},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1267, col: 43, offset: 48147},
								name: "DelimitedBlock",
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockParagraph",
			pos:  position{line: 1272, col: 1, offset: 48210},
			expr: &actionExpr{
				pos: position{line: 1272, col: 26, offset: 48235},
				run: (*parser).callonSidebarBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1272, col: 26, offset: 48235},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1272, col: 32, offset: 48241},
						expr: &ruleRefExpr{
							pos:  position{line: 1272, col: 33, offset: 48242},
							name: "SidebarBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockParagraphLine",
			pos:  position{line: 1276, col: 1, offset: 48356},
			expr: &actionExpr{
				pos: position{line: 1276, col: 30, offset: 48385},
				run: (*parser).callonSidebarBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1276, col: 30, offset: 48385},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1276, col: 30, offset: 48385},
							expr: &ruleRefExpr{
								pos:  position{line: 1276, col: 31, offset: 48386},
								name: "SidebarBlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 1276, col: 53, offset: 48408},
							expr: &ruleRefExpr{
								pos:  position{line: 1276, col: 54, offset: 48409},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1276, col: 64, offset: 48419},
							label: "line",
							expr: &ruleRefExpr{
								pos:  position{line: 1276, col: 70, offset: 48425},
								name: "InlineElements",
							},
						},
					},
				},
			},
		},
		{
			name: "Table",
			pos:  position{line: 1284, col: 1, offset: 48656},
			expr: &actionExpr{
				pos: position{line: 1284, col: 10, offset: 48665},
				run: (*parser).callonTable1,
				expr: &seqExpr{
					pos: position{line: 1284, col: 10, offset: 48665},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1284, col: 10, offset: 48665},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1284, col: 21, offset: 48676},
								expr: &ruleRefExpr{
									pos:  position{line: 1284, col: 22, offset: 48677},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1284, col: 42, offset: 48697},
							name: "TableDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1285, col: 5, offset: 48716},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 1285, col: 12, offset: 48723},
								expr: &ruleRefExpr{
									pos:  position{line: 1285, col: 13, offset: 48724},
									name: "TableLineHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1286, col: 5, offset: 48746},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1286, col: 11, offset: 48752},
								expr: &ruleRefExpr{
									pos:  position{line: 1286, col: 12, offset: 48753},
									name: "TableLine",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1287, col: 6, offset: 48770},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1287, col: 6, offset: 48770},
									name: "TableDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1287, col: 23, offset: 48787},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TableCellSeparator",
			pos:  position{line: 1291, col: 1, offset: 48902},
			expr: &seqExpr{
				pos: position{line: 1291, col: 23, offset: 48924},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1291, col: 23, offset: 48924},
						val:        "|",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1291, col: 27, offset: 48928},
						expr: &ruleRefExpr{
							pos:  position{line: 1291, col: 27, offset: 48928},
							name: "WS",
						},
					},
				},
			},
		},
		{
			name: "TableDelimiter",
			pos:  position{line: 1293, col: 1, offset: 48933},
			expr: &seqExpr{
				pos: position{line: 1293, col: 19, offset: 48951},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1293, col: 19, offset: 48951},
						val:        "|===",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1293, col: 26, offset: 48958},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "TableLineHeader",
			pos:  position{line: 1296, col: 1, offset: 49027},
			expr: &actionExpr{
				pos: position{line: 1296, col: 20, offset: 49046},
				run: (*parser).callonTableLineHeader1,
				expr: &seqExpr{
					pos: position{line: 1296, col: 20, offset: 49046},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1296, col: 20, offset: 49046},
							expr: &ruleRefExpr{
								pos:  position{line: 1296, col: 21, offset: 49047},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1296, col: 36, offset: 49062},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1296, col: 42, offset: 49068},
								expr: &ruleRefExpr{
									pos:  position{line: 1296, col: 43, offset: 49069},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1296, col: 55, offset: 49081},
							name: "EOL",
						},
						&ruleRefExpr{
							pos:  position{line: 1296, col: 59, offset: 49085},
							name: "BlankLine",
						},
					},
				},
			},
		},
		{
			name: "TableLine",
			pos:  position{line: 1300, col: 1, offset: 49153},
			expr: &actionExpr{
				pos: position{line: 1300, col: 14, offset: 49166},
				run: (*parser).callonTableLine1,
				expr: &seqExpr{
					pos: position{line: 1300, col: 14, offset: 49166},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1300, col: 14, offset: 49166},
							expr: &ruleRefExpr{
								pos:  position{line: 1300, col: 15, offset: 49167},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1300, col: 30, offset: 49182},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1300, col: 36, offset: 49188},
								expr: &ruleRefExpr{
									pos:  position{line: 1300, col: 37, offset: 49189},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1300, col: 49, offset: 49201},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1300, col: 53, offset: 49205},
							expr: &ruleRefExpr{
								pos:  position{line: 1300, col: 53, offset: 49205},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "TableCell",
			pos:  position{line: 1304, col: 1, offset: 49274},
			expr: &actionExpr{
				pos: position{line: 1304, col: 14, offset: 49287},
				run: (*parser).callonTableCell1,
				expr: &seqExpr{
					pos: position{line: 1304, col: 14, offset: 49287},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1304, col: 14, offset: 49287},
							name: "TableCellSeparator",
						},
						&labeledExpr{
							pos:   position{line: 1304, col: 33, offset: 49306},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1304, col: 42, offset: 49315},
								expr: &seqExpr{
									pos: position{line: 1304, col: 43, offset: 49316},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1304, col: 43, offset: 49316},
											expr: &ruleRefExpr{
												pos:  position{line: 1304, col: 44, offset: 49317},
												name: "TableCellSeparator",
											},
										},
										&notExpr{
											pos: position{line: 1304, col: 63, offset: 49336},
											expr: &ruleRefExpr{
												pos:  position{line: 1304, col: 64, offset: 49337},
												name: "EOL",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 1304, col: 68, offset: 49341},
											expr: &ruleRefExpr{
												pos:  position{line: 1304, col: 68, offset: 49341},
												name: "WS",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1304, col: 72, offset: 49345},
											name: "InlineElement",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1304, col: 86, offset: 49359},
											expr: &ruleRefExpr{
												pos:  position{line: 1304, col: 86, offset: 49359},
												name: "WS",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CommentBlockDelimiter",
			pos:  position{line: 1311, col: 1, offset: 49605},
			expr: &litMatcher{
				pos:        position{line: 1311, col: 26, offset: 49630},
				val:        "////",
				ignoreCase: false,
			},
		},
		{
			name: "CommentBlock",
			pos:  position{line: 1313, col: 1, offset: 49638},
			expr: &actionExpr{
				pos: position{line: 1313, col: 17, offset: 49654},
				run: (*parser).callonCommentBlock1,
				expr: &seqExpr{
					pos: position{line: 1313, col: 17, offset: 49654},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1313, col: 17, offset: 49654},
							name: "CommentBlockDelimiter",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1313, col: 39, offset: 49676},
							expr: &ruleRefExpr{
								pos:  position{line: 1313, col: 39, offset: 49676},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1313, col: 43, offset: 49680},
							name: "NEWLINE",
						},
						&labeledExpr{
							pos:   position{line: 1313, col: 51, offset: 49688},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1313, col: 59, offset: 49696},
								expr: &ruleRefExpr{
									pos:  position{line: 1313, col: 60, offset: 49697},
									name: "CommentBlockLine",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1313, col: 81, offset: 49718},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 1313, col: 82, offset: 49719},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1313, col: 82, offset: 49719},
											name: "CommentBlockDelimiter",
										},
										&ruleRefExpr{
											pos:  position{line: 1313, col: 104, offset: 49741},
											name: "EOLS",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1313, col: 112, offset: 49749},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CommentBlockLine",
			pos:  position{line: 1317, col: 1, offset: 49855},
			expr: &actionExpr{
				pos: position{line: 1317, col: 21, offset: 49875},
				run: (*parser).callonCommentBlockLine1,
				expr: &seqExpr{
					pos: position{line: 1317, col: 21, offset: 49875},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 1317, col: 21, offset: 49875},
							expr: &choiceExpr{
								pos: position{line: 1317, col: 22, offset: 49876},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1317, col: 22, offset: 49876},
										name: "Alphanums",
									},
									&ruleRefExpr{
										pos:  position{line: 1317, col: 34, offset: 49888},
										name: "Spaces",
									},
									&seqExpr{
										pos: position{line: 1317, col: 44, offset: 49898},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1317, col: 44, offset: 49898},
												expr: &ruleRefExpr{
													pos:  position{line: 1317, col: 45, offset: 49899},
													name: "CommentBlockDelimiter",
												},
											},
											&notExpr{
												pos: position{line: 1317, col: 67, offset: 49921},
												expr: &ruleRefExpr{
													pos:  position{line: 1317, col: 68, offset: 49922},
													name: "EOL",
												},
											},
											&anyMatcher{
												line: 1317, col: 73, offset: 49927,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1317, col: 78, offset: 49932},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1321, col: 1, offset: 49972},
			expr: &actionExpr{
				pos: position{line: 1321, col: 22, offset: 49993},
				run: (*parser).callonSingleLineComment1,
				expr: &seqExpr{
					pos: position{line: 1321, col: 22, offset: 49993},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1321, col: 22, offset: 49993},
							expr: &ruleRefExpr{
								pos:  position{line: 1321, col: 23, offset: 49994},
								name: "CommentBlockDelimiter",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1321, col: 45, offset: 50016},
							expr: &ruleRefExpr{
								pos:  position{line: 1321, col: 45, offset: 50016},
								name: "WS",
							},
						},
						&litMatcher{
							pos:        position{line: 1321, col: 49, offset: 50020},
							val:        "//",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1321, col: 54, offset: 50025},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1321, col: 63, offset: 50034},
								name: "SingleLineCommentContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1321, col: 89, offset: 50060},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SingleLineCommentContent",
			pos:  position{line: 1325, col: 1, offset: 50125},
			expr: &actionExpr{
				pos: position{line: 1325, col: 29, offset: 50153},
				run: (*parser).callonSingleLineCommentContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1325, col: 29, offset: 50153},
					expr: &choiceExpr{
						pos: position{line: 1325, col: 30, offset: 50154},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1325, col: 30, offset: 50154},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 1325, col: 42, offset: 50166},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 1325, col: 52, offset: 50176},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1325, col: 52, offset: 50176},
										expr: &ruleRefExpr{
											pos:  position{line: 1325, col: 53, offset: 50177},
											name: "EOL",
										},
									},
									&anyMatcher{
										line: 1325, col: 58, offset: 50182,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralBlock",
			pos:  position{line: 1333, col: 1, offset: 50491},
			expr: &choiceExpr{
				pos: position{line: 1333, col: 17, offset: 50507},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1333, col: 17, offset: 50507},
						name: "ParagraphWithLiteralAttribute",
					},
					&ruleRefExpr{
						pos:  position{line: 1333, col: 49, offset: 50539},
						name: "ParagraphWithHeadingSpaces",
					},
					&ruleRefExpr{
						pos:  position{line: 1333, col: 78, offset: 50568},
						name: "ParagraphWithLiteralBlockDelimiter",
					},
				},
			},
		},
		{
			name: "LiteralBlockDelimiter",
			pos:  position{line: 1335, col: 1, offset: 50604},
			expr: &litMatcher{
				pos:        position{line: 1335, col: 26, offset: 50629},
				val:        "....",
				ignoreCase: false,
			},
		},
		{
			name: "ParagraphWithHeadingSpaces",
			pos:  position{line: 1338, col: 1, offset: 50701},
			expr: &actionExpr{
				pos: position{line: 1338, col: 31, offset: 50731},
				run: (*parser).callonParagraphWithHeadingSpaces1,
				expr: &seqExpr{
					pos: position{line: 1338, col: 31, offset: 50731},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1338, col: 31, offset: 50731},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1338, col: 42, offset: 50742},
								expr: &ruleRefExpr{
									pos:  position{line: 1338, col: 43, offset: 50743},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1338, col: 63, offset: 50763},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1338, col: 70, offset: 50770},
								name: "ParagraphWithHeadingSpacesLines",
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithHeadingSpacesLines",
			pos:  position{line: 1343, col: 1, offset: 51000},
			expr: &actionExpr{
				pos: position{line: 1344, col: 5, offset: 51040},
				run: (*parser).callonParagraphWithHeadingSpacesLines1,
				expr: &seqExpr{
					pos: position{line: 1344, col: 5, offset: 51040},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1344, col: 5, offset: 51040},
							label: "firstLine",
							expr: &actionExpr{
								pos: position{line: 1344, col: 16, offset: 51051},
								run: (*parser).callonParagraphWithHeadingSpacesLines4,
								expr: &seqExpr{
									pos: position{line: 1344, col: 16, offset: 51051},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1344, col: 16, offset: 51051},
											name: "WS",
										},
										&oneOrMoreExpr{
											pos: position{line: 1344, col: 19, offset: 51054},
											expr: &choiceExpr{
												pos: position{line: 1344, col: 20, offset: 51055},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 1344, col: 20, offset: 51055},
														name: "Alphanums",
													},
													&ruleRefExpr{
														pos:  position{line: 1344, col: 32, offset: 51067},
														name: "Spaces",
													},
													&actionExpr{
														pos: position{line: 1344, col: 41, offset: 51076},
														run: (*parser).callonParagraphWithHeadingSpacesLines11,
														expr: &seqExpr{
															pos: position{line: 1344, col: 42, offset: 51077},
															exprs: []interface{}{
																&notExpr{
																	pos: position{line: 1344, col: 42, offset: 51077},
																	expr: &ruleRefExpr{
																		pos:  position{line: 1344, col: 43, offset: 51078},
																		name: "EOL",
																	},
																},
																&anyMatcher{
																	line: 1344, col: 48, offset: 51083,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1348, col: 8, offset: 51174},
							name: "EOL",
						},
						&labeledExpr{
							pos:   position{line: 1349, col: 5, offset: 51237},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1349, col: 16, offset: 51248},
								expr: &actionExpr{
									pos: position{line: 1350, col: 9, offset: 51258},
									run: (*parser).callonParagraphWithHeadingSpacesLines19,
									expr: &seqExpr{
										pos: position{line: 1350, col: 9, offset: 51258},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1350, col: 9, offset: 51258},
												expr: &ruleRefExpr{
													pos:  position{line: 1350, col: 10, offset: 51259},
													name: "BlankLine",
												},
											},
											&labeledExpr{
												pos:   position{line: 1351, col: 9, offset: 51278},
												label: "otherLine",
												expr: &actionExpr{
													pos: position{line: 1351, col: 20, offset: 51289},
													run: (*parser).callonParagraphWithHeadingSpacesLines24,
													expr: &oneOrMoreExpr{
														pos: position{line: 1351, col: 20, offset: 51289},
														expr: &choiceExpr{
															pos: position{line: 1351, col: 21, offset: 51290},
															alternatives: []interface{}{
																&ruleRefExpr{
																	pos:  position{line: 1351, col: 21, offset: 51290},
																	name: "Alphanums",
																},
																&ruleRefExpr{
																	pos:  position{line: 1351, col: 33, offset: 51302},
																	name: "Spaces",
																},
																&seqExpr{
																	pos: position{line: 1351, col: 43, offset: 51312},
																	exprs: []interface{}{
																		&notExpr{
																			pos: position{line: 1351, col: 43, offset: 51312},
																			expr: &ruleRefExpr{
																				pos:  position{line: 1351, col: 44, offset: 51313},
																				name: "EOL",
																			},
																		},
																		&anyMatcher{
																			line: 1351, col: 49, offset: 51318,
																		},
																	},
																},
															},
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 1353, col: 12, offset: 51375},
												name: "EOL",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiter",
			pos:  position{line: 1360, col: 1, offset: 51605},
			expr: &actionExpr{
				pos: position{line: 1360, col: 39, offset: 51643},
				run: (*parser).callonParagraphWithLiteralBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1360, col: 39, offset: 51643},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1360, col: 39, offset: 51643},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1360, col: 50, offset: 51654},
								expr: &ruleRefExpr{
									pos:  position{line: 1360, col: 51, offset: 51655},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1361, col: 9, offset: 51683},
							name: "LiteralBlockDelimiter",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1361, col: 31, offset: 51705},
							expr: &ruleRefExpr{
								pos:  position{line: 1361, col: 31, offset: 51705},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1361, col: 35, offset: 51709},
							name: "NEWLINE",
						},
						&labeledExpr{
							pos:   position{line: 1361, col: 43, offset: 51717},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1361, col: 50, offset: 51724},
								name: "ParagraphWithLiteralBlockDelimiterLines",
							},
						},
						&choiceExpr{
							pos: position{line: 1361, col: 92, offset: 51766},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 1361, col: 93, offset: 51767},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1361, col: 93, offset: 51767},
											name: "LiteralBlockDelimiter",
										},
										&ruleRefExpr{
											pos:  position{line: 1361, col: 115, offset: 51789},
											name: "EOLS",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1361, col: 123, offset: 51797},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLines",
			pos:  position{line: 1366, col: 1, offset: 51956},
			expr: &actionExpr{
				pos: position{line: 1366, col: 44, offset: 51999},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLines1,
				expr: &labeledExpr{
					pos:   position{line: 1366, col: 44, offset: 51999},
					label: "lines",
					expr: &zeroOrMoreExpr{
						pos: position{line: 1366, col: 50, offset: 52005},
						expr: &ruleRefExpr{
							pos:  position{line: 1366, col: 51, offset: 52006},
							name: "ParagraphWithLiteralBlockDelimiterLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLine",
			pos:  position{line: 1370, col: 1, offset: 52090},
			expr: &actionExpr{
				pos: position{line: 1371, col: 5, offset: 52145},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLine1,
				expr: &seqExpr{
					pos: position{line: 1371, col: 5, offset: 52145},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1371, col: 5, offset: 52145},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1371, col: 11, offset: 52151},
								run: (*parser).callonParagraphWithLiteralBlockDelimiterLine4,
								expr: &zeroOrMoreExpr{
									pos: position{line: 1371, col: 11, offset: 52151},
									expr: &choiceExpr{
										pos: position{line: 1371, col: 12, offset: 52152},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1371, col: 12, offset: 52152},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 1371, col: 24, offset: 52164},
												name: "Spaces",
											},
											&seqExpr{
												pos: position{line: 1371, col: 34, offset: 52174},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 1371, col: 34, offset: 52174},
														expr: &ruleRefExpr{
															pos:  position{line: 1371, col: 35, offset: 52175},
															name: "LiteralBlockDelimiter",
														},
													},
													&notExpr{
														pos: position{line: 1371, col: 57, offset: 52197},
														expr: &ruleRefExpr{
															pos:  position{line: 1371, col: 58, offset: 52198},
															name: "EOL",
														},
													},
													&anyMatcher{
														line: 1371, col: 62, offset: 52202,
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1373, col: 8, offset: 52251},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttribute",
			pos:  position{line: 1378, col: 1, offset: 52377},
			expr: &actionExpr{
				pos: position{line: 1379, col: 5, offset: 52415},
				run: (*parser).callonParagraphWithLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 1379, col: 5, offset: 52415},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1379, col: 5, offset: 52415},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1379, col: 16, offset: 52426},
								expr: &ruleRefExpr{
									pos:  position{line: 1379, col: 17, offset: 52427},
									name: "ElementAttributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1380, col: 5, offset: 52451},
							run: (*parser).callonParagraphWithLiteralAttribute6,
						},
						&labeledExpr{
							pos:   position{line: 1387, col: 5, offset: 52665},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1387, col: 12, offset: 52672},
								name: "ParagraphWithLiteralAttributeLines",
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralKind",
			pos:  position{line: 1391, col: 1, offset: 52822},
			expr: &actionExpr{
				pos: position{line: 1391, col: 16, offset: 52837},
				run: (*parser).callonLiteralKind1,
				expr: &litMatcher{
					pos:        position{line: 1391, col: 16, offset: 52837},
					val:        "literal",
					ignoreCase: false,
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttributeLines",
			pos:  position{line: 1396, col: 1, offset: 52920},
			expr: &actionExpr{
				pos: position{line: 1396, col: 39, offset: 52958},
				run: (*parser).callonParagraphWithLiteralAttributeLines1,
				expr: &labeledExpr{
					pos:   position{line: 1396, col: 39, offset: 52958},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1396, col: 45, offset: 52964},
						expr: &ruleRefExpr{
							pos:  position{line: 1396, col: 46, offset: 52965},
							name: "ParagraphWithLiteralAttributeLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttributeLine",
			pos:  position{line: 1400, col: 1, offset: 53045},
			expr: &actionExpr{
				pos: position{line: 1400, col: 38, offset: 53082},
				run: (*parser).callonParagraphWithLiteralAttributeLine1,
				expr: &seqExpr{
					pos: position{line: 1400, col: 38, offset: 53082},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1400, col: 38, offset: 53082},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1400, col: 44, offset: 53088},
								run: (*parser).callonParagraphWithLiteralAttributeLine4,
								expr: &seqExpr{
									pos: position{line: 1400, col: 44, offset: 53088},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1400, col: 44, offset: 53088},
											expr: &ruleRefExpr{
												pos:  position{line: 1400, col: 46, offset: 53090},
												name: "BlankLine",
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 1400, col: 57, offset: 53101},
											expr: &choiceExpr{
												pos: position{line: 1400, col: 58, offset: 53102},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 1400, col: 58, offset: 53102},
														name: "Alphanums",
													},
													&ruleRefExpr{
														pos:  position{line: 1400, col: 70, offset: 53114},
														name: "Spaces",
													},
													&seqExpr{
														pos: position{line: 1400, col: 80, offset: 53124},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 1400, col: 80, offset: 53124},
																expr: &ruleRefExpr{
																	pos:  position{line: 1400, col: 81, offset: 53125},
																	name: "EOL",
																},
															},
															&anyMatcher{
																line: 1400, col: 86, offset: 53130,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1402, col: 4, offset: 53171},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "BlankLine",
			pos:  position{line: 1409, col: 1, offset: 53343},
			expr: &actionExpr{
				pos: position{line: 1409, col: 14, offset: 53356},
				run: (*parser).callonBlankLine1,
				expr: &seqExpr{
					pos: position{line: 1409, col: 14, offset: 53356},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1409, col: 14, offset: 53356},
							expr: &ruleRefExpr{
								pos:  position{line: 1409, col: 15, offset: 53357},
								name: "EOF",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1409, col: 19, offset: 53361},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "Alphanum",
			pos:  position{line: 1416, col: 1, offset: 53509},
			expr: &charClassMatcher{
				pos:        position{line: 1416, col: 13, offset: 53521},
				val:        "[\\pL0-9]",
				ranges:     []rune{'0', '9'},
				classes:    []*unicode.RangeTable{rangeTable("L")},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Parenthesis",
			pos:  position{line: 1418, col: 1, offset: 53531},
			expr: &choiceExpr{
				pos: position{line: 1418, col: 16, offset: 53546},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1418, col: 16, offset: 53546},
						val:        "(",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1418, col: 22, offset: 53552},
						val:        ")",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1418, col: 28, offset: 53558},
						val:        "[",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1418, col: 34, offset: 53564},
						val:        "]",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "Alphanums",
			pos:  position{line: 1420, col: 1, offset: 53569},
			expr: &oneOrMoreExpr{
				pos: position{line: 1420, col: 14, offset: 53582},
				expr: &charClassMatcher{
					pos:        position{line: 1420, col: 14, offset: 53582},
					val:        "[\\pL0-9]",
					ranges:     []rune{'0', '9'},
					classes:    []*unicode.RangeTable{rangeTable("L")},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "Dot",
			pos:  position{line: 1422, col: 1, offset: 53593},
			expr: &litMatcher{
				pos:        position{line: 1422, col: 8, offset: 53600},
				val:        ".",
				ignoreCase: false,
			},
		},
		{
			name: "SimpleWord",
			pos:  position{line: 1424, col: 1, offset: 53605},
			expr: &actionExpr{
				pos: position{line: 1424, col: 15, offset: 53619},
				run: (*parser).callonSimpleWord1,
				expr: &seqExpr{
					pos: position{line: 1424, col: 15, offset: 53619},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1424, col: 15, offset: 53619},
							name: "Alphanums",
						},
						&andExpr{
							pos: position{line: 1424, col: 25, offset: 53629},
							expr: &choiceExpr{
								pos: position{line: 1424, col: 27, offset: 53631},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1424, col: 27, offset: 53631},
										name: "WS",
									},
									&ruleRefExpr{
										pos:  position{line: 1424, col: 32, offset: 53636},
										name: "EOL",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OtherWord",
			pos:  position{line: 1429, col: 1, offset: 53901},
			expr: &actionExpr{
				pos: position{line: 1429, col: 14, offset: 53914},
				run: (*parser).callonOtherWord1,
				expr: &choiceExpr{
					pos: position{line: 1429, col: 15, offset: 53915},
					alternatives: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1429, col: 15, offset: 53915},
							name: "Alphanums",
						},
						&ruleRefExpr{
							pos:  position{line: 1429, col: 27, offset: 53927},
							name: "QuotedTextPrefix",
						},
						&ruleRefExpr{
							pos:  position{line: 1429, col: 46, offset: 53946},
							name: "Parenthesis",
						},
						&oneOrMoreExpr{
							pos: position{line: 1429, col: 60, offset: 53960},
							expr: &actionExpr{
								pos: position{line: 1429, col: 61, offset: 53961},
								run: (*parser).callonOtherWord7,
								expr: &seqExpr{
									pos: position{line: 1429, col: 61, offset: 53961},
									exprs: []interface{}{
										&seqExpr{
											pos: position{line: 1429, col: 62, offset: 53962},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1429, col: 62, offset: 53962},
													expr: &ruleRefExpr{
														pos:  position{line: 1429, col: 63, offset: 53963},
														name: "NEWLINE",
													},
												},
												&notExpr{
													pos: position{line: 1429, col: 71, offset: 53971},
													expr: &ruleRefExpr{
														pos:  position{line: 1429, col: 72, offset: 53972},
														name: "WS",
													},
												},
												&notExpr{
													pos: position{line: 1429, col: 75, offset: 53975},
													expr: &ruleRefExpr{
														pos:  position{line: 1429, col: 76, offset: 53976},
														name: "Dot",
													},
												},
												&notExpr{
													pos: position{line: 1429, col: 80, offset: 53980},
													expr: &ruleRefExpr{
														pos:  position{line: 1429, col: 81, offset: 53981},
														name: "QuotedTextPrefix",
													},
												},
												&anyMatcher{
													line: 1429, col: 98, offset: 53998,
												},
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 1429, col: 101, offset: 54001},
											expr: &ruleRefExpr{
												pos:  position{line: 1429, col: 101, offset: 54001},
												name: "Dot",
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1431, col: 7, offset: 54110},
							expr: &litMatcher{
								pos:        position{line: 1431, col: 7, offset: 54110},
								val:        ".",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "Spaces",
			pos:  position{line: 1435, col: 1, offset: 54291},
			expr: &oneOrMoreExpr{
				pos: position{line: 1435, col: 11, offset: 54301},
				expr: &ruleRefExpr{
					pos:  position{line: 1435, col: 11, offset: 54301},
					name: "WS",
				},
			},
		},
		{
			name: "FileLocation",
			pos:  position{line: 1437, col: 1, offset: 54307},
			expr: &actionExpr{
				pos: position{line: 1437, col: 17, offset: 54323},
				run: (*parser).callonFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 1437, col: 17, offset: 54323},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1437, col: 26, offset: 54332},
						expr: &choiceExpr{
							pos: position{line: 1437, col: 27, offset: 54333},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1437, col: 27, offset: 54333},
									name: "FILENAME",
								},
								&ruleRefExpr{
									pos:  position{line: 1437, col: 38, offset: 54344},
									name: "DocumentAttributeSubstitution",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Location",
			pos:  position{line: 1441, col: 1, offset: 54436},
			expr: &actionExpr{
				pos: position{line: 1441, col: 13, offset: 54448},
				run: (*parser).callonLocation1,
				expr: &labeledExpr{
					pos:   position{line: 1441, col: 13, offset: 54448},
					label: "elements",
					expr: &seqExpr{
						pos: position{line: 1441, col: 23, offset: 54458},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1441, col: 23, offset: 54458},
								name: "URL_SCHEME",
							},
							&oneOrMoreExpr{
								pos: position{line: 1441, col: 34, offset: 54469},
								expr: &choiceExpr{
									pos: position{line: 1441, col: 35, offset: 54470},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1441, col: 35, offset: 54470},
											name: "FILENAME",
										},
										&ruleRefExpr{
											pos:  position{line: 1441, col: 46, offset: 54481},
											name: "DocumentAttributeSubstitution",
										},
										&seqExpr{
											pos: position{line: 1441, col: 78, offset: 54513},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1441, col: 78, offset: 54513},
													expr: &ruleRefExpr{
														pos:  position{line: 1441, col: 79, offset: 54514},
														name: "EOL",
													},
												},
												&notExpr{
													pos: position{line: 1441, col: 83, offset: 54518},
													expr: &litMatcher{
														pos:        position{line: 1441, col: 84, offset: 54519},
														val:        "[",
														ignoreCase: false,
													},
												},
												&anyMatcher{
													line: 1441, col: 88, offset: 54523,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FILENAME",
			pos:  position{line: 1445, col: 1, offset: 54588},
			expr: &oneOrMoreExpr{
				pos: position{line: 1445, col: 13, offset: 54600},
				expr: &choiceExpr{
					pos: position{line: 1445, col: 14, offset: 54601},
					alternatives: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1445, col: 14, offset: 54601},
							name: "Alphanums",
						},
						&litMatcher{
							pos:        position{line: 1445, col: 26, offset: 54613},
							val:        ".",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1445, col: 32, offset: 54619},
							val:        "_",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1445, col: 38, offset: 54625},
							val:        "/",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1445, col: 44, offset: 54631},
							val:        "-",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "URL",
			pos:  position{line: 1447, col: 1, offset: 54638},
			expr: &actionExpr{
				pos: position{line: 1447, col: 8, offset: 54645},
				run: (*parser).callonURL1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1447, col: 8, offset: 54645},
					expr: &choiceExpr{
						pos: position{line: 1447, col: 9, offset: 54646},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1447, col: 9, offset: 54646},
								name: "Alphanums",
							},
							&seqExpr{
								pos: position{line: 1447, col: 22, offset: 54659},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1447, col: 22, offset: 54659},
										expr: &ruleRefExpr{
											pos:  position{line: 1447, col: 23, offset: 54660},
											name: "NEWLINE",
										},
									},
									&notExpr{
										pos: position{line: 1447, col: 31, offset: 54668},
										expr: &ruleRefExpr{
											pos:  position{line: 1447, col: 32, offset: 54669},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 1447, col: 35, offset: 54672},
										expr: &litMatcher{
											pos:        position{line: 1447, col: 36, offset: 54673},
											val:        "[",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1447, col: 40, offset: 54677},
										expr: &litMatcher{
											pos:        position{line: 1447, col: 41, offset: 54678},
											val:        "]",
											ignoreCase: false,
										},
									},
									&anyMatcher{
										line: 1447, col: 46, offset: 54683,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "URL_SCHEME",
			pos:  position{line: 1451, col: 1, offset: 54724},
			expr: &choiceExpr{
				pos: position{line: 1451, col: 15, offset: 54738},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1451, col: 15, offset: 54738},
						val:        "http://",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1451, col: 27, offset: 54750},
						val:        "https://",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1451, col: 40, offset: 54763},
						val:        "ftp://",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1451, col: 51, offset: 54774},
						val:        "irc://",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1451, col: 62, offset: 54785},
						val:        "mailto:",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "ID",
			pos:  position{line: 1453, col: 1, offset: 54796},
			expr: &actionExpr{
				pos: position{line: 1453, col: 7, offset: 54802},
				run: (*parser).callonID1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1453, col: 7, offset: 54802},
					expr: &choiceExpr{
						pos: position{line: 1453, col: 8, offset: 54803},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1453, col: 8, offset: 54803},
								name: "Alphanums",
							},
							&seqExpr{
								pos: position{line: 1453, col: 21, offset: 54816},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1453, col: 21, offset: 54816},
										expr: &ruleRefExpr{
											pos:  position{line: 1453, col: 22, offset: 54817},
											name: "NEWLINE",
										},
									},
									&notExpr{
										pos: position{line: 1453, col: 30, offset: 54825},
										expr: &ruleRefExpr{
											pos:  position{line: 1453, col: 31, offset: 54826},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 1453, col: 34, offset: 54829},
										expr: &litMatcher{
											pos:        position{line: 1453, col: 35, offset: 54830},
											val:        "[",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1453, col: 39, offset: 54834},
										expr: &litMatcher{
											pos:        position{line: 1453, col: 40, offset: 54835},
											val:        "]",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1453, col: 44, offset: 54839},
										expr: &litMatcher{
											pos:        position{line: 1453, col: 45, offset: 54840},
											val:        "<<",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1453, col: 50, offset: 54845},
										expr: &litMatcher{
											pos:        position{line: 1453, col: 51, offset: 54846},
											val:        ">>",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1453, col: 56, offset: 54851},
										expr: &litMatcher{
											pos:        position{line: 1453, col: 57, offset: 54852},
											val:        ",",
											ignoreCase: false,
										},
									},
									&anyMatcher{
										line: 1453, col: 62, offset: 54857,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DIGIT",
			pos:  position{line: 1457, col: 1, offset: 54898},
			expr: &actionExpr{
				pos: position{line: 1457, col: 10, offset: 54907},
				run: (*parser).callonDIGIT1,
				expr: &charClassMatcher{
					pos:        position{line: 1457, col: 10, offset: 54907},
					val:        "[0-9]",
					ranges:     []rune{'0', '9'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "NUMBER",
			pos:  position{line: 1461, col: 1, offset: 54949},
			expr: &actionExpr{
				pos: position{line: 1461, col: 11, offset: 54959},
				run: (*parser).callonNUMBER1,
				expr: &seqExpr{
					pos: position{line: 1461, col: 11, offset: 54959},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1461, col: 11, offset: 54959},
							expr: &litMatcher{
								pos:        position{line: 1461, col: 11, offset: 54959},
								val:        "-",
								ignoreCase: false,
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1461, col: 16, offset: 54964},
							expr: &ruleRefExpr{
								pos:  position{line: 1461, col: 16, offset: 54964},
								name: "DIGIT",
							},
						},
					},
				},
			},
		},
		{
			name: "WS",
			pos:  position{line: 1465, col: 1, offset: 55016},
			expr: &choiceExpr{
				pos: position{line: 1465, col: 7, offset: 55022},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1465, col: 7, offset: 55022},
						val:        " ",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1465, col: 13, offset: 55028},
						run: (*parser).callonWS3,
						expr: &litMatcher{
							pos:        position{line: 1465, col: 13, offset: 55028},
							val:        "\t",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NEWLINE",
			pos:  position{line: 1469, col: 1, offset: 55069},
			expr: &choiceExpr{
				pos: position{line: 1469, col: 12, offset: 55080},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1469, col: 12, offset: 55080},
						val:        "\r\n",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1469, col: 21, offset: 55089},
						val:        "\r",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1469, col: 28, offset: 55096},
						val:        "\n",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 1471, col: 1, offset: 55102},
			expr: &notExpr{
				pos: position{line: 1471, col: 8, offset: 55109},
				expr: &anyMatcher{
					line: 1471, col: 9, offset: 55110,
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 1473, col: 1, offset: 55113},
			expr: &choiceExpr{
				pos: position{line: 1473, col: 8, offset: 55120},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1473, col: 8, offset: 55120},
						name: "NEWLINE",
					},
					&ruleRefExpr{
						pos:  position{line: 1473, col: 18, offset: 55130},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "EOLS",
			pos:  position{line: 1475, col: 1, offset: 55135},
			expr: &seqExpr{
				pos: position{line: 1475, col: 9, offset: 55143},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1475, col: 9, offset: 55143},
						expr: &ruleRefExpr{
							pos:  position{line: 1475, col: 9, offset: 55143},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1475, col: 13, offset: 55147},
						name: "EOL",
					},
				},
			},
		},
	},
}

func (c *current) onPreflightDocument1(frontmatter, blocks interface{}) (interface{}, error) {
	return types.NewPreflightDocument(frontmatter, blocks.([]interface{}))
}

func (p *parser) callonPreflightDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPreflightDocument1(stack["frontmatter"], stack["blocks"])
}

func (c *current) onPreflightDocumentWithinDelimitedBlock1(frontmatter, blocks interface{}) (interface{}, error) {
	return types.NewPreflightDocument(frontmatter, blocks.([]interface{}))
}

func (p *parser) callonPreflightDocumentWithinDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPreflightDocumentWithinDelimitedBlock1(stack["frontmatter"], stack["blocks"])
}

func (c *current) onDocumentBlocks1(header, others interface{}) (interface{}, error) {
	if header != nil && others != nil {
		return append([]interface{}{header}, others.([]interface{})...), nil
	} else if others != nil {
		return others.([]interface{}), nil
	}
	return []interface{}{}, nil
}

func (p *parser) callonDocumentBlocks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlocks1(stack["header"], stack["others"])
}

func (c *current) onDocumentBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDocumentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock1(stack["block"])
}

func (c *current) onDocumentBlockWithinDelimitedBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDocumentBlockWithinDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlockWithinDelimitedBlock1(stack["block"])
}

func (c *current) onYamlFrontMatter1(content interface{}) (interface{}, error) {
	return types.NewYamlFrontMatter(content.(string))
}

func (p *parser) callonYamlFrontMatter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatter1(stack["content"])
}

func (c *current) onYamlFrontMatterContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonYamlFrontMatterContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatterContent1()
}

func (c *current) onDocumentHeader1(title, id, authors, revision interface{}) (interface{}, error) {
	return types.NewDocumentHeader(title.(types.InlineElements), authors, revision)
}

func (p *parser) callonDocumentHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader1(stack["title"], stack["id"], stack["authors"], stack["revision"])
}

func (c *current) onDocumentAuthorsInlineForm1(authors interface{}) (interface{}, error) {
	return types.NewDocumentAuthors(authors.([]interface{}))
}

func (p *parser) callonDocumentAuthorsInlineForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsInlineForm1(stack["authors"])
}

func (c *current) onDocumentAuthorsAttributeForm1(author interface{}) (interface{}, error) {
	return []types.DocumentAuthor{author.(types.DocumentAuthor)}, nil
}

func (p *parser) callonDocumentAuthorsAttributeForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsAttributeForm1(stack["author"])
}

func (c *current) onDocumentAuthor1(fullname, email interface{}) (interface{}, error) {
	return types.NewDocumentAuthor(fullname, email)
}

func (p *parser) callonDocumentAuthor1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthor1(stack["fullname"], stack["email"])
}

func (c *current) onDocumentAuthorName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorName1()
}

func (c *current) onDocumentAuthorEmail5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorEmail5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail5()
}

func (c *current) onDocumentAuthorEmail1(email interface{}) (interface{}, error) {
	return email, nil
}

func (p *parser) callonDocumentAuthorEmail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail1(stack["email"])
}

func (c *current) onDocumentRevision9(revnumber, revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(revnumber, revdate, revremark)

}

func (p *parser) callonDocumentRevision9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision9(stack["revnumber"], stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision23(revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(nil, revdate, revremark)

}

func (p *parser) callonDocumentRevision23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision23(stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision1(revision interface{}) (interface{}, error) {
	return revision, nil
}

func (p *parser) callonDocumentRevision1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision1(stack["revision"])
}

func (c *current) onDocumentRevisionNumber2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber2()
}

func (c *current) onDocumentRevisionNumber18() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber18()
}

func (c *current) onDocumentRevisionDate1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionDate1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionDate1()
}

func (c *current) onDocumentRevisionRemark1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionRemark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionRemark1()
}

func (c *current) onDocumentAttributeDeclaration9(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonDocumentAttributeDeclaration9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeDeclaration9(stack["value"])
}

func (c *current) onDocumentAttributeDeclaration1(name, value interface{}) (interface{}, error) {
	return types.NewDocumentAttributeDeclaration(name.(string), value)
}

func (p *parser) callonDocumentAttributeDeclaration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeDeclaration1(stack["name"], stack["value"])
}

func (c *current) onDocumentAttributeName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAttributeName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeName1()
}

func (c *current) onDocumentAttributeValue1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeValue1()
}

func (c *current) onDocumentAttributeReset2(name interface{}) (interface{}, error) {
	return types.NewDocumentAttributeReset(name.(string))
}

func (p *parser) callonDocumentAttributeReset2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeReset2(stack["name"])
}

func (c *current) onDocumentAttributeReset9(name interface{}) (interface{}, error) {
	return types.NewDocumentAttributeReset(name.(string))
}

func (p *parser) callonDocumentAttributeReset9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeReset9(stack["name"])
}

func (c *current) onDocumentAttributeSubstitution1(name interface{}) (interface{}, error) {
	return types.NewDocumentAttributeSubstitution(name.(string))
}

func (p *parser) callonDocumentAttributeSubstitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeSubstitution1(stack["name"])
}

func (c *current) onElementAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewElementAttributes(attrs.([]interface{})), nil
}

func (p *parser) callonElementAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributes1(stack["attrs"])
}

func (c *current) onElementAttribute1(attr interface{}) (interface{}, error) {
	return attr, nil // avoid returning something like `[]interface{}{attr, EOL}`
}

func (p *parser) callonElementAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttribute1(stack["attr"])
}

func (c *current) onElementID2(id interface{}) (interface{}, error) {
	return types.NewElementID(id.(string))
}

func (p *parser) callonElementID2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementID2(stack["id"])
}

func (c *current) onElementID9(id interface{}) (interface{}, error) {
	return types.NewElementID(id.(string))
}

func (p *parser) callonElementID9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementID9(stack["id"])
}

func (c *current) onInlineElementID1(id interface{}) (interface{}, error) {
	// no EOL here since there can be multiple InlineElementID on the same line
	return types.NewInlineElementID(id.(string))
}

func (p *parser) callonInlineElementID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementID1(stack["id"])
}

func (c *current) onElementTitle5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonElementTitle5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitle5()
}

func (c *current) onElementTitle1(title interface{}) (interface{}, error) {
	return types.NewElementTitle(title.(string))
}

func (p *parser) callonElementTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitle1(stack["title"])
}

func (c *current) onElementRole5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonElementRole5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementRole5()
}

func (c *current) onElementRole1(role interface{}) (interface{}, error) {
	return types.NewElementRole(role.(string))
}

func (p *parser) callonElementRole1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementRole1(stack["role"])
}

func (c *current) onLiteralAttribute1() (interface{}, error) {
	return types.NewLiteralAttribute()
}

func (p *parser) callonLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralAttribute1()
}

func (c *current) onAdmonitionMarkerAttribute1(k interface{}) (interface{}, error) {
	return types.NewAdmonitionAttribute(k.(types.AdmonitionKind))
}

func (p *parser) callonAdmonitionMarkerAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionMarkerAttribute1(stack["k"])
}

func (c *current) onSourceAttributes8() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSourceAttributes8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes8()
}

func (c *current) onSourceAttributes1(language interface{}) (interface{}, error) {
	return types.NewSourceAttributes(language)
}

func (p *parser) callonSourceAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes1(stack["language"])
}

func (c *current) onAttributeGroup1(attributes interface{}) (interface{}, error) {
	return types.NewAttributeGroup(attributes.([]interface{}))
}

func (p *parser) callonAttributeGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeGroup1(stack["attributes"])
}

func (c *current) onGenericAttribute1(key, value interface{}) (interface{}, error) {
	// value is set
	return types.NewGenericAttribute(key.(string), value)
}

func (p *parser) callonGenericAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttribute1(stack["key"], stack["value"])
}

func (c *current) onAttributeKey1(key interface{}) (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeKey1(stack["key"])
}

func (c *current) onAttributeValue1(value interface{}) (interface{}, error) {
	// attribute value cannot be followed by a `=`, otherwise it causes troubles for standalone values (eg: in images)
	return string(c.text), nil
}

func (p *parser) callonAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue1(stack["value"])
}

func (c *current) onHorizontalLayout1() (interface{}, error) {
	return types.ElementAttributes{"layout": "horizontal"}, nil
}

func (p *parser) callonHorizontalLayout1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHorizontalLayout1()
}

func (c *current) onQuoteAttributes1(author, title interface{}) (interface{}, error) {
	return types.NewQuoteAttributes("quote", author, title)
}

func (p *parser) callonQuoteAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttributes1(stack["author"], stack["title"])
}

func (c *current) onVerseAttributes1(author, title interface{}) (interface{}, error) {
	return types.NewQuoteAttributes("verse", author.(string), title.(string))
}

func (p *parser) callonVerseAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseAttributes1(stack["author"], stack["title"])
}

func (c *current) onQuoteAttribute1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttribute1()
}

func (c *current) onInlineAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewInlineAttributes(attrs.([]interface{}))
}

func (p *parser) callonInlineAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAttributes1(stack["attrs"])
}

func (c *current) onSection7() (interface{}, error) {

	// `=` is level 0, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonSection7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection7()
}

func (c *current) onSection10(attributes, level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonSection10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection10(stack["attributes"], stack["level"])
}

func (c *current) onSection1(attributes, level, title, id interface{}) (interface{}, error) {
	return types.NewSection(level.(int), title.(types.InlineElements), id.([]interface{}), attributes)
}

func (p *parser) callonSection1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection1(stack["attributes"], stack["level"], stack["title"], stack["id"])
}

func (c *current) onTitleElements1(elements interface{}) (interface{}, error) {
	// absorbs heading and trailing spaces
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonTitleElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElements1(stack["elements"])
}

func (c *current) onTitleElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonTitleElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElement1(stack["element"])
}

func (c *current) onUserMacroBlock1(name, value, attrs interface{}) (interface{}, error) {
	return types.NewUserMacroBlock(name.(string), value.(string), attrs.(types.ElementAttributes), string(c.text))
}

func (p *parser) callonUserMacroBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onInlineUserMacro1(name, value, attrs interface{}) (interface{}, error) {
	return types.NewInlineUserMacro(name.(string), value.(string), attrs.(types.ElementAttributes), string(c.text))
}

func (p *parser) callonInlineUserMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onUserMacroName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUserMacroName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroName1()
}

func (c *current) onUserMacroValue1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUserMacroValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroValue1()
}

func (c *current) onUserMacroAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewInlineAttributes(attrs.([]interface{}))
}

func (p *parser) callonUserMacroAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroAttributes1(stack["attrs"])
}

func (c *current) onFileInclusion4(path, inlineAttributes interface{}) (interface{}, error) {

	return types.NewFileInclusion(path.(types.Location), inlineAttributes.(types.ElementAttributes), string(c.text))

}

func (p *parser) callonFileInclusion4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion4(stack["path"], stack["inlineAttributes"])
}

func (c *current) onFileInclusion1(incl interface{}) (interface{}, error) {
	return incl.(types.FileInclusion), nil
}

func (p *parser) callonFileInclusion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion1(stack["incl"])
}

func (c *current) onFileIncludeAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewInlineAttributes(attrs.([]interface{}))
}

func (p *parser) callonFileIncludeAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileIncludeAttributes1(stack["attrs"])
}

func (c *current) onLineRangesAttribute1(lines interface{}) (interface{}, error) {

	return types.NewLineRangesAttribute(lines)
}

func (p *parser) callonLineRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttribute1(stack["lines"])
}

func (c *current) onLineRangesAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonLineRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleRanges9(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleRanges9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleRanges9(stack["other"])
}

func (c *current) onMultipleRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleRanges1(stack["first"], stack["others"])
}

func (c *current) onMultipleQuotedRanges10(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleQuotedRanges10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedRanges10(stack["other"])
}

func (c *current) onMultipleQuotedRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleQuotedRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedRanges1(stack["first"], stack["others"])
}

func (c *current) onMultilineRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewMultilineRange(start.(int), end.(int))
}

func (p *parser) callonMultilineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultilineRange1(stack["start"], stack["end"])
}

func (c *current) onMultilineQuotedRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewMultilineRange(start.(int), end.(int))
}

func (p *parser) callonMultilineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultilineQuotedRange1(stack["start"], stack["end"])
}

func (c *current) onSinglelineRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewSingleLineRange(singleline.(int))
}

func (p *parser) callonSinglelineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglelineRange1(stack["singleline"])
}

func (c *current) onSinglelineQuotedRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewSingleLineRange(singleline.(int))
}

func (p *parser) callonSinglelineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglelineQuotedRange1(stack["singleline"])
}

func (c *current) onUndefinedLineRange1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUndefinedLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUndefinedLineRange1()
}

func (c *current) onListParagraph2(comment interface{}) (interface{}, error) {
	return comment, nil

}

func (p *parser) callonListParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph2(stack["comment"])
}

func (c *current) onListParagraph5(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), nil)

}

func (p *parser) callonListParagraph5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph5(stack["lines"])
}

func (c *current) onListParagraphLine24(elements, linebreak interface{}) (interface{}, error) {
	// absorbs heading and trailing spaces
	return types.NewInlineElements(append(elements.([]interface{}), linebreak))

}

func (p *parser) callonListParagraphLine24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine24(stack["elements"], stack["linebreak"])
}

func (c *current) onListParagraphLine1(line interface{}) (interface{}, error) {

	return line, nil

}

func (p *parser) callonListParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine1(stack["line"])
}

func (c *current) onContinuedListItemElement1(blanklines, element interface{}) (interface{}, error) {
	return types.NewContinuedListItemElement(-len(blanklines.([]interface{})), element) // offset is negative
}

func (p *parser) callonContinuedListItemElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemElement1(stack["blanklines"], stack["element"])
}

func (c *current) onOrderedListItem1(attributes, prefix, content interface{}) (interface{}, error) {
	return types.NewOrderedListItem(prefix.(types.OrderedListItemPrefix), content.([]interface{}), attributes)
}

func (p *parser) callonOrderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItem1(stack["attributes"], stack["prefix"], stack["content"])
}

func (c *current) onOrderedListItemPrefix10() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonOrderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix10()
}

func (c *current) onOrderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonOrderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix13(stack["depth"])
}

func (c *current) onOrderedListItemPrefix7(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListItemPrefix(types.Arabic, 1)
	case 2:
		return types.NewOrderedListItemPrefix(types.LowerAlpha, 2)
	case 3:
		return types.NewOrderedListItemPrefix(types.LowerRoman, 3)
	case 4:
		return types.NewOrderedListItemPrefix(types.UpperAlpha, 4)
	default:
		return types.NewOrderedListItemPrefix(types.UpperRoman, 5)
	}

}

func (p *parser) callonOrderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix7(stack["depth"])
}

func (c *current) onOrderedListItemPrefix14() (interface{}, error) {
	// numbering style: "1."
	return types.NewOrderedListItemPrefix(types.Arabic, 1)

}

func (p *parser) callonOrderedListItemPrefix14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix14()
}

func (c *current) onOrderedListItemPrefix19() (interface{}, error) {
	// numbering style: "a."
	return types.NewOrderedListItemPrefix(types.LowerAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix19()
}

func (c *current) onOrderedListItemPrefix23() (interface{}, error) {
	// numbering style: "A."
	return types.NewOrderedListItemPrefix(types.UpperAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix23()
}

func (c *current) onOrderedListItemPrefix27() (interface{}, error) {
	// numbering style: "i)"
	return types.NewOrderedListItemPrefix(types.LowerRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix27()
}

func (c *current) onOrderedListItemPrefix32() (interface{}, error) {
	// numbering style: "I)"
	return types.NewOrderedListItemPrefix(types.UpperRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix32()
}

func (c *current) onOrderedListItemPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonOrderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix1(stack["prefix"])
}

func (c *current) onOrderedListItemContent1(elements interface{}) (interface{}, error) {
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonOrderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemContent1(stack["elements"])
}

func (c *current) onUnorderedListItem1(attributes, prefix, checkstyle, content interface{}) (interface{}, error) {
	return types.NewUnorderedListItem(prefix.(types.UnorderedListItemPrefix), checkstyle, content.([]interface{}), attributes)
}

func (p *parser) callonUnorderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItem1(stack["attributes"], stack["prefix"], stack["checkstyle"], stack["content"])
}

func (c *current) onUnorderedListItemPrefix10() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonUnorderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix10()
}

func (c *current) onUnorderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonUnorderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix13(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix7(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListItemPrefix(types.OneAsterisk, 1)
	case 2:
		return types.NewUnorderedListItemPrefix(types.TwoAsterisks, 2)
	case 3:
		return types.NewUnorderedListItemPrefix(types.ThreeAsterisks, 3)
	case 4:
		return types.NewUnorderedListItemPrefix(types.FourAsterisks, 4)
	default:
		return types.NewUnorderedListItemPrefix(types.FiveAsterisks, 5)
	}

}

func (p *parser) callonUnorderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix7(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix15() (interface{}, error) {
	return types.NewUnorderedListItemPrefix(types.Dash, 1)

}

func (p *parser) callonUnorderedListItemPrefix15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix15()
}

func (c *current) onUnorderedListItemPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonUnorderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix1(stack["prefix"])
}

func (c *current) onUnorderedListItemCheckStyle7() (interface{}, error) {
	return types.Unchecked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle7()
}

func (c *current) onUnorderedListItemCheckStyle9() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle9()
}

func (c *current) onUnorderedListItemCheckStyle11() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle11()
}

func (c *current) onUnorderedListItemCheckStyle1(style interface{}) (interface{}, error) {
	return style, nil

}

func (p *parser) callonUnorderedListItemCheckStyle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle1(stack["style"])
}

func (c *current) onUnorderedListItemContent1(elements interface{}) (interface{}, error) {
	// Another list or a literal paragraph immediately following a list item will be implicitly included in the list item
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonUnorderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemContent1(stack["elements"])
}

func (c *current) onLabeledListItem1(attributes, term, separator, description interface{}) (interface{}, error) {
	return types.NewLabeledListItem(len(separator.(string))-1, term.(string), description, attributes)
}

func (p *parser) callonLabeledListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItem1(stack["attributes"], stack["term"], stack["separator"], stack["description"])
}

func (c *current) onLabeledListItemTerm1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTerm1()
}

func (c *current) onLabeledListItemSeparator4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonLabeledListItemSeparator4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator4()
}

func (c *current) onLabeledListItemSeparator7(separator interface{}) (bool, error) {

	// use a predicate to make sure that only `::` to `::::` are allowed
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonLabeledListItemSeparator7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator7(stack["separator"])
}

func (c *current) onLabeledListItemSeparator1(separator interface{}) (interface{}, error) {
	return separator, nil
}

func (p *parser) callonLabeledListItemSeparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator1(stack["separator"])
}

func (c *current) onLabeledListItemDescription1(elements interface{}) (interface{}, error) {

	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemDescription1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemDescription1(stack["elements"])
}

func (c *current) onAdmonitionKind2() (interface{}, error) {
	return types.Tip, nil

}

func (p *parser) callonAdmonitionKind2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind2()
}

func (c *current) onAdmonitionKind4() (interface{}, error) {
	return types.Note, nil

}

func (p *parser) callonAdmonitionKind4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind4()
}

func (c *current) onAdmonitionKind6() (interface{}, error) {
	return types.Important, nil

}

func (p *parser) callonAdmonitionKind6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind6()
}

func (c *current) onAdmonitionKind8() (interface{}, error) {
	return types.Warning, nil

}

func (p *parser) callonAdmonitionKind8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind8()
}

func (c *current) onAdmonitionKind10() (interface{}, error) {
	return types.Caution, nil
}

func (p *parser) callonAdmonitionKind10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind10()
}

func (c *current) onParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onParagraph13(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)
}

func (p *parser) callonParagraph13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph13(stack["attributes"], stack["lines"])
}

func (c *current) onSimpleParagraph6(attributes interface{}) (bool, error) {
	// skip if the '[literal]' attribute was set on this paragraph
	if attrs, ok := attributes.(types.ElementAttributes); ok {
		kind, found := attrs[types.AttrKind]
		return !found || kind != types.Literal, nil
	}
	return true, nil

}

func (p *parser) callonSimpleParagraph6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleParagraph6(stack["attributes"])
}

func (c *current) onSimpleParagraph1(attributes, firstLine, otherLines interface{}) (interface{}, error) {

	return types.NewParagraph(append([]interface{}{firstLine}, otherLines.([]interface{})...), attributes)
}

func (p *parser) callonSimpleParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleParagraph1(stack["attributes"], stack["firstLine"], stack["otherLines"])
}

func (c *current) onParagraphLines1(firstLine, otherLines interface{}) (interface{}, error) {
	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonParagraphLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onFirstParagraphLine1(elements, linebreak interface{}) (interface{}, error) {

	return types.NewInlineElements(append(elements.([]interface{}), linebreak))
}

func (p *parser) callonFirstParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstParagraphLine1(stack["elements"], stack["linebreak"])
}

func (c *current) onOtherParagraphLine1(elements interface{}) (interface{}, error) {
	return elements, nil
}

func (p *parser) callonOtherParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherParagraphLine1(stack["elements"])
}

func (c *current) onVerseParagraph7(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.ElementAttributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Verse, nil
	}
	return false, nil

}

func (p *parser) callonVerseParagraph7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph7(stack["attributes"])
}

func (c *current) onVerseParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonVerseParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onVerseParagraph19(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.ElementAttributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Verse, nil
	}
	return false, nil

}

func (p *parser) callonVerseParagraph19() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph19(stack["attributes"])
}

func (c *current) onVerseParagraph14(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)

}

func (p *parser) callonVerseParagraph14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph14(stack["attributes"], stack["lines"])
}

func (c *current) onInlineElements9(comment interface{}) (interface{}, error) {
	return types.NewInlineElements([]interface{}{comment})

}

func (p *parser) callonInlineElements9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements9(stack["comment"])
}

func (c *current) onInlineElements12(elements, linebreak interface{}) (interface{}, error) {

	return types.NewInlineElements(append(elements.([]interface{}), linebreak))

}

func (p *parser) callonInlineElements12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements12(stack["elements"], stack["linebreak"])
}

func (c *current) onInlineElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonInlineElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements1(stack["elements"])
}

func (c *current) onInlineElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonInlineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement1(stack["element"])
}

func (c *current) onInlineElementsWithoutSubtitution1(elements, linebreak interface{}) (interface{}, error) {

	return types.NewInlineElements(append(elements.([]interface{}), linebreak))
}

func (p *parser) callonInlineElementsWithoutSubtitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementsWithoutSubtitution1(stack["elements"], stack["linebreak"])
}

func (c *current) onInlineElementWithoutSubtitution1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonInlineElementWithoutSubtitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementWithoutSubtitution1(stack["element"])
}

func (c *current) onVerbatimBlock1(elements interface{}) (interface{}, error) {
	return elements, nil
}

func (p *parser) callonVerbatimBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimBlock1(stack["elements"])
}

func (c *current) onVerbatimParagraph8(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonVerbatimParagraph8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimParagraph8(stack["line"])
}

func (c *current) onVerbatimParagraph1(attributes, lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), attributes)
}

func (p *parser) callonVerbatimParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimParagraph1(stack["attributes"], stack["lines"])
}

func (c *current) onVerbatimParagraphLine1(elements, linebreak interface{}) (interface{}, error) {

	return types.NewInlineElements(append(elements.([]interface{}), linebreak))
}

func (p *parser) callonVerbatimParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimParagraphLine1(stack["elements"], stack["linebreak"])
}

func (c *current) onVerbatimParagraphLineElement1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonVerbatimParagraphLineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimParagraphLineElement1()
}

func (c *current) onLineBreak1() (interface{}, error) {
	return types.NewLineBreak()
}

func (p *parser) callonLineBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineBreak1()
}

func (c *current) onQuotedText1(text interface{}) (interface{}, error) {
	// if a '^' or '~' is alone (ie, badly formatted superscript or subscript, then accept it as-is)
	return text, nil
}

func (p *parser) callonQuotedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedText1(stack["text"])
}

func (c *current) onSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	// rule used withn `words` to detect superscript or subscript portions, eg in math formulae.
	return string(c.text), nil
}

func (p *parser) callonSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptOrSuperscriptPrefix3()
}

func (c *current) onOneOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonOneOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOneOrMoreBackslashes1()
}

func (c *current) onTwoOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonTwoOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTwoOrMoreBackslashes1()
}

func (c *current) onDoubleQuoteBoldText1(content interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Bold, content.([]interface{}))
}

func (p *parser) callonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldText1(stack["content"])
}

func (c *current) onDoubleQuoteBoldTextContent4(element interface{}) (interface{}, error) {
	// may start and end with spaces
	return element, nil
}

func (p *parser) callonDoubleQuoteBoldTextContent4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextContent4(stack["element"])
}

func (c *current) onDoubleQuoteBoldTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonDoubleQuoteBoldTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement1(stack["element"])
}

func (c *current) onNonDoubleQuoteBoldText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonDoubleQuoteBoldText1()
}

func (c *current) onSingleQuoteBoldText2(content interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '**' to emphazise a portion of a word)
	return types.NewQuotedText(types.Bold, content.([]interface{}))
}

func (p *parser) callonSingleQuoteBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText2(stack["content"])
}

func (c *current) onSingleQuoteBoldText12(content interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation.
	return types.NewQuotedText(types.Bold, append([]interface{}{types.StringElement{Content: "*"}}, content.([]interface{})...)) // include the second heading `*` as a regular StringElement in the bold content
}

func (p *parser) callonSingleQuoteBoldText12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText12(stack["content"])
}

func (c *current) onSingleQuoteBoldTextContent6(spaces, element interface{}) (interface{}, error) {
	return append(spaces.([]interface{}), element), nil
}

func (p *parser) callonSingleQuoteBoldTextContent6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextContent6(stack["spaces"], stack["element"])
}

func (c *current) onSingleQuoteBoldTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonSingleQuoteBoldTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement1(stack["element"])
}

func (c *current) onNonSingleQuoteBoldText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonSingleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSingleQuoteBoldText1()
}

func (c *current) onEscapedBoldText2(backslashes, content interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "**", content.([]interface{}))

}

func (p *parser) callonEscapedBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText2(stack["backslashes"], stack["content"])
}

func (c *current) onEscapedBoldText10(backslashes, content interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation
	result := append([]interface{}{"*"}, content.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "*", result)

}

func (p *parser) callonEscapedBoldText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText10(stack["backslashes"], stack["content"])
}

func (c *current) onEscapedBoldText18(backslashes, content interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "*", content.([]interface{}))
}

func (p *parser) callonEscapedBoldText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText18(stack["backslashes"], stack["content"])
}

func (c *current) onDoubleQuoteItalicText1(content interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Italic, content.([]interface{}))
}

func (p *parser) callonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicText1(stack["content"])
}

func (c *current) onDoubleQuoteItalicTextContent4(element interface{}) (interface{}, error) {
	// may start and end with spaces
	return element, nil
}

func (p *parser) callonDoubleQuoteItalicTextContent4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextContent4(stack["element"])
}

func (c *current) onDoubleQuoteItalicTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonDoubleQuoteItalicTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement1(stack["element"])
}

func (c *current) onNonDoubleQuoteItalicText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonDoubleQuoteItalicText1()
}

func (c *current) onSingleQuoteItalicText2(content interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '__' to emphazise a portion of a word)
	return types.NewQuotedText(types.Italic, content.([]interface{}))
}

func (p *parser) callonSingleQuoteItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText2(stack["content"])
}

func (c *current) onSingleQuoteItalicText12(content interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation.
	return types.NewQuotedText(types.Italic, append([]interface{}{types.StringElement{Content: "_"}}, content.([]interface{})...)) // include the second heading `_` as a regular StringElement in the italic content
}

func (p *parser) callonSingleQuoteItalicText12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText12(stack["content"])
}

func (c *current) onSingleQuoteItalicTextContent6(spaces, element interface{}) (interface{}, error) {
	return append(spaces.([]interface{}), element), nil
}

func (p *parser) callonSingleQuoteItalicTextContent6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextContent6(stack["spaces"], stack["element"])
}

func (c *current) onSingleQuoteItalicTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonSingleQuoteItalicTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement1(stack["element"])
}

func (c *current) onNonSingleQuoteItalicText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonSingleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSingleQuoteItalicText1()
}

func (c *current) onEscapedItalicText2(backslashes, content interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "__", content.([]interface{}))

}

func (p *parser) callonEscapedItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText2(stack["backslashes"], stack["content"])
}

func (c *current) onEscapedItalicText10(backslashes, content interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation
	result := append([]interface{}{"_"}, content.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "_", result)

}

func (p *parser) callonEscapedItalicText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText10(stack["backslashes"], stack["content"])
}

func (c *current) onEscapedItalicText18(backslashes, content interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "_", content.([]interface{}))
}

func (p *parser) callonEscapedItalicText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText18(stack["backslashes"], stack["content"])
}

func (c *current) onDoubleQuoteMonospaceText1(content interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Monospace, content.([]interface{}))
}

func (p *parser) callonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceText1(stack["content"])
}

func (c *current) onDoubleQuoteMonospaceTextContent4(element interface{}) (interface{}, error) {
	// may start and end with spaces
	return element, nil
}

func (p *parser) callonDoubleQuoteMonospaceTextContent4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextContent4(stack["element"])
}

func (c *current) onDoubleQuoteMonospaceTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonDoubleQuoteMonospaceTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement1(stack["element"])
}

func (c *current) onNonDoubleQuoteMonospaceText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonDoubleQuoteMonospaceText1()
}

func (c *current) onSingleQuoteMonospaceText2(content interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs "``" to emphazise a portion of a word)
	return types.NewQuotedText(types.Monospace, content.([]interface{}))
}

func (p *parser) callonSingleQuoteMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText2(stack["content"])
}

func (c *current) onSingleQuoteMonospaceText12(content interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation.
	return types.NewQuotedText(types.Monospace, append([]interface{}{types.StringElement{Content: "`"}}, content.([]interface{})...)) // include the second heading "`" as a regular StringElement in the monospace content
}

func (p *parser) callonSingleQuoteMonospaceText12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText12(stack["content"])
}

func (c *current) onSingleQuoteMonospaceTextContent6(spaces, element interface{}) (interface{}, error) {
	return append(spaces.([]interface{}), element), nil
}

func (p *parser) callonSingleQuoteMonospaceTextContent6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextContent6(stack["spaces"], stack["element"])
}

func (c *current) onSingleQuoteMonospaceTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonSingleQuoteMonospaceTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement1(stack["element"])
}

func (c *current) onNonSingleQuoteMonospaceText1() (interface{}, error) {
	// break at multiline
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonSingleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSingleQuoteMonospaceText1()
}

func (c *current) onEscapedMonospaceText2(backslashes, content interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "``", content.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText2(stack["backslashes"], stack["content"])
}

func (c *current) onEscapedMonospaceText10(backslashes, content interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation
	result := append([]interface{}{"`"}, content.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "`", result)

}

func (p *parser) callonEscapedMonospaceText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText10(stack["backslashes"], stack["content"])
}

func (c *current) onEscapedMonospaceText18(backslashes, content interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "`", content.([]interface{}))
}

func (p *parser) callonEscapedMonospaceText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText18(stack["backslashes"], stack["content"])
}

func (c *current) onSubscriptText1(content interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Subscript, content)
}

func (p *parser) callonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptText1(stack["content"])
}

func (c *current) onNonSubscriptText1() (interface{}, error) {

	return c.text, nil
}

func (p *parser) callonNonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSubscriptText1()
}

func (c *current) onEscapedSubscriptText1(backslashes, content interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "~", content)
}

func (p *parser) callonEscapedSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscriptText1(stack["backslashes"], stack["content"])
}

func (c *current) onSuperscriptText1(content interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Superscript, content)
}

func (p *parser) callonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptText1(stack["content"])
}

func (c *current) onNonSuperscriptText1() (interface{}, error) {

	return c.text, nil
}

func (p *parser) callonNonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSuperscriptText1()
}

func (c *current) onEscapedSuperscriptText1(backslashes, content interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "^", content)
}

func (p *parser) callonEscapedSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscriptText1(stack["backslashes"], stack["content"])
}

func (c *current) onSinglePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewPassthrough(types.SinglePlusPassthrough, []interface{}{content})
}

func (p *parser) callonSinglePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthrough1(stack["content"])
}

func (c *current) onSinglePlusPassthroughContent2() (interface{}, error) {
	// no space in the first or last position of the content, but allowed elsewhere
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent2()
}

func (c *current) onSinglePlusPassthroughContent24() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent24()
}

func (c *current) onTriplePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewPassthrough(types.TriplePlusPassthrough, []interface{}{content})
}

func (p *parser) callonTriplePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthrough1(stack["content"])
}

func (c *current) onTriplePlusPassthroughContent2() (interface{}, error) {
	// spaces and newlines are also allowed in the first or last position of the content and elsewhere too
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent2()
}

func (c *current) onTriplePlusPassthroughContent8() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent8()
}

func (c *current) onPassthroughMacro2(content interface{}) (interface{}, error) {
	return types.NewPassthrough(types.PassthroughMacro, []interface{}{content})
}

func (p *parser) callonPassthroughMacro2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro2(stack["content"])
}

func (c *current) onPassthroughMacro9(content interface{}) (interface{}, error) {
	return types.NewPassthrough(types.PassthroughMacro, content.([]interface{}))
}

func (p *parser) callonPassthroughMacro9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro9(stack["content"])
}

func (c *current) onPassthroughMacroCharacter4() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonPassthroughMacroCharacter4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacroCharacter4()
}

func (c *current) onCrossReference2(id, label interface{}) (interface{}, error) {
	return types.NewCrossReference(id.(string), label.(string))
}

func (p *parser) callonCrossReference2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference2(stack["id"], stack["label"])
}

func (c *current) onCrossReference13(id interface{}) (interface{}, error) {
	return types.NewCrossReference(id.(string), nil)
}

func (p *parser) callonCrossReference13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference13(stack["id"])
}

func (c *current) onCrossReferenceLabel1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonCrossReferenceLabel1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReferenceLabel1()
}

func (c *current) onLink1(link interface{}) (interface{}, error) {
	return link, nil
}

func (p *parser) callonLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink1(stack["link"])
}

func (c *current) onRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.ElementAttributes))
}

func (p *parser) callonRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onLinkAttributes1(text, otherattrs interface{}) (interface{}, error) {
	return types.NewInlineLinkAttributes(text, otherattrs.([]interface{}))
}

func (p *parser) callonLinkAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkAttributes1(stack["text"], stack["otherattrs"])
}

func (c *current) onLinkTextAttribute16() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonLinkTextAttribute16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextAttribute16()
}

func (c *current) onLinkTextAttribute1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonLinkTextAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextAttribute1(stack["elements"])
}

func (c *current) onImageBlock1(attributes, path, inlineAttributes interface{}) (interface{}, error) {
	return types.NewImageBlock(path.(string), inlineAttributes.(types.ElementAttributes), attributes)
}

func (p *parser) callonImageBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock1(stack["attributes"], stack["path"], stack["inlineAttributes"])
}

func (c *current) onInlineImage1(path, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineImage(path.(string), inlineAttributes.(types.ElementAttributes))
}

func (p *parser) callonInlineImage1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage1(stack["path"], stack["inlineAttributes"])
}

func (c *current) onImageAttributes1(alt, width, height, otherattrs interface{}) (interface{}, error) {
	return types.NewImageAttributes(alt, width, height, otherattrs.([]interface{}))
}

func (p *parser) callonImageAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAttributes1(stack["alt"], stack["width"], stack["height"], stack["otherattrs"])
}

func (c *current) onInlineFootnote2(content interface{}) (interface{}, error) {
	return types.NewFootnote("", content.(types.InlineElements))
}

func (p *parser) callonInlineFootnote2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote2(stack["content"])
}

func (c *current) onInlineFootnote8(ref, content interface{}) (interface{}, error) {
	return types.NewFootnote(ref.(string), content.(types.InlineElements))
}

func (p *parser) callonInlineFootnote8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote8(stack["ref"], stack["content"])
}

func (c *current) onInlineFootnote17(ref interface{}) (interface{}, error) {
	return types.NewFootnote(ref.(string), types.InlineElements{}) // foot note referring to another note
}

func (p *parser) callonInlineFootnote17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote17(stack["ref"])
}

func (c *current) onFootnoteRef1() (interface{}, error) {
	// footnote ID not may span multiple lines
	return string(c.text), nil
}

func (p *parser) callonFootnoteRef1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteRef1()
}

func (c *current) onFootnoteContent1(elements interface{}) (interface{}, error) {
	// footnote content may span multiple lines
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonFootnoteContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteContent1(stack["elements"])
}

func (c *current) onDelimitedBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock1(stack["block"])
}

func (c *current) onFencedBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Fenced, content.([]interface{}), types.None, attributes)
}

func (p *parser) callonFencedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlock1(stack["attributes"], stack["content"])
}

func (c *current) onFencedBlockParagraph1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), types.ElementAttributes{})
}

func (p *parser) callonFencedBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockParagraph1(stack["lines"])
}

func (c *current) onFencedBlockParagraphLine1(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonFencedBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockParagraphLine1(stack["line"])
}

func (c *current) onListingBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Listing, content.([]interface{}), types.None, attributes)
}

func (p *parser) callonListingBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlock1(stack["attributes"], stack["content"])
}

func (c *current) onListingBlockParagraph1(lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), nil) // no attributes supported
}

func (p *parser) callonListingBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockParagraph1(stack["lines"])
}

func (c *current) onListingBlockParagraphLine6() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonListingBlockParagraphLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockParagraphLine6()
}

func (c *current) onListingBlockParagraphLine1(line interface{}) (interface{}, error) {
	// skip EOL in line content, and stop when quote block delimiter is encountered
	return types.NewInlineElements(line)
}

func (p *parser) callonListingBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockParagraphLine1(stack["line"])
}

func (c *current) onExampleBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Example, content.([]interface{}), types.None, attributes)
}

func (p *parser) callonExampleBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlock1(stack["attributes"], stack["content"])
}

func (c *current) onExampleBlockParagraph1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), types.ElementAttributes{})
}

func (p *parser) callonExampleBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockParagraph1(stack["lines"])
}

func (c *current) onExampleBlockParagraphLine1(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonExampleBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockParagraphLine1(stack["line"])
}

func (c *current) onQuoteBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Quote, content.([]interface{}), types.None, attributes)
}

func (p *parser) callonQuoteBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlock1(stack["attributes"], stack["content"])
}

func (c *current) onQuoteBlockElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonQuoteBlockElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockElement1(stack["element"])
}

func (c *current) onQuoteBlockParagraph1(lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), types.ElementAttributes{})
}

func (p *parser) callonQuoteBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockParagraph1(stack["lines"])
}

func (c *current) onVerseBlock5(attributes interface{}) (bool, error) {

	kind := attributes.(types.ElementAttributes).GetAsString("kind") // once we got the attributes, check that `[verse]`  was set
	return kind == "verse", nil

}

func (p *parser) callonVerseBlock5() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlock5(stack["attributes"])
}

func (c *current) onVerseBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Verse, content.([]interface{}), types.None, attributes)

}

func (p *parser) callonVerseBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlock1(stack["attributes"], stack["content"])
}

func (c *current) onVerseFileInclude1(include interface{}) (interface{}, error) {
	return include, nil
}

func (p *parser) callonVerseFileInclude1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseFileInclude1(stack["include"])
}

func (c *current) onVerseBlockParagraph1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), nil)
}

func (p *parser) callonVerseBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraph1(stack["lines"])
}

func (c *current) onVerseBlockParagraphLine8(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonVerseBlockParagraphLine8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraphLine8(stack["elements"])
}

func (c *current) onVerseBlockParagraphLine1(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonVerseBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraphLine1(stack["line"])
}

func (c *current) onVerseBlockParagraphLineElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonVerseBlockParagraphLineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraphLineElement1(stack["element"])
}

func (c *current) onSidebarBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Sidebar, content.([]interface{}), types.None, attributes)
}

func (p *parser) callonSidebarBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlock1(stack["attributes"], stack["content"])
}

func (c *current) onNonSidebarBlock1(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonNonSidebarBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSidebarBlock1(stack["content"])
}

func (c *current) onSidebarBlockParagraph1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), types.ElementAttributes{})
}

func (p *parser) callonSidebarBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockParagraph1(stack["lines"])
}

func (c *current) onSidebarBlockParagraphLine1(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonSidebarBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockParagraphLine1(stack["line"])
}

func (c *current) onTable1(attributes, header, lines interface{}) (interface{}, error) {
	// end delimiter or end of file
	return types.NewTable(header, lines.([]interface{}), attributes)
}

func (p *parser) callonTable1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTable1(stack["attributes"], stack["header"], stack["lines"])
}

func (c *current) onTableLineHeader1(cells interface{}) (interface{}, error) {
	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLineHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLineHeader1(stack["cells"])
}

func (c *current) onTableLine1(cells interface{}) (interface{}, error) {
	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLine1(stack["cells"])
}

func (c *current) onTableCell1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonTableCell1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCell1(stack["elements"])
}

func (c *current) onCommentBlock1(content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Comment, content.([]interface{}), types.Verbatim, nil)
}

func (p *parser) callonCommentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlock1(stack["content"])
}

func (c *current) onCommentBlockLine1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonCommentBlockLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlockLine1()
}

func (c *current) onSingleLineComment1(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))
}

func (p *parser) callonSingleLineComment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineComment1(stack["content"])
}

func (c *current) onSingleLineCommentContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleLineCommentContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineCommentContent1()
}

func (c *current) onParagraphWithHeadingSpaces1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithSpacesOnFirstLine, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithHeadingSpaces1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpaces1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithHeadingSpacesLines11() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines11()
}

func (c *current) onParagraphWithHeadingSpacesLines4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines4()
}

func (c *current) onParagraphWithHeadingSpacesLines24() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines24()
}

func (c *current) onParagraphWithHeadingSpacesLines19(otherLine interface{}) (interface{}, error) {
	return otherLine, nil // do not include the trailing 'EOL'

}

func (p *parser) callonParagraphWithHeadingSpacesLines19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines19(stack["otherLine"])
}

func (c *current) onParagraphWithHeadingSpacesLines1(firstLine, otherLines interface{}) (interface{}, error) {

	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonParagraphWithHeadingSpacesLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiter1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithDelimiter, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithLiteralBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiter1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLines1(lines interface{}) (interface{}, error) {
	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine4()
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine1(line interface{}) (interface{}, error) {

	return line, nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine1(stack["line"])
}

func (c *current) onParagraphWithLiteralAttribute6(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.ElementAttributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Literal, nil
	}
	return false, nil

}

func (p *parser) callonParagraphWithLiteralAttribute6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute6(stack["attributes"])
}

func (c *current) onParagraphWithLiteralAttribute1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithAttribute, lines.([]interface{}), attributes)

}

func (p *parser) callonParagraphWithLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute1(stack["attributes"], stack["lines"])
}

func (c *current) onLiteralKind1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLiteralKind1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralKind1()
}

func (c *current) onParagraphWithLiteralAttributeLines1(lines interface{}) (interface{}, error) {

	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralAttributeLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralAttributeLine4() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonParagraphWithLiteralAttributeLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLine4()
}

func (c *current) onParagraphWithLiteralAttributeLine1(line interface{}) (interface{}, error) {
	return line, nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralAttributeLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLine1(stack["line"])
}

func (c *current) onBlankLine1() (interface{}, error) {
	return types.NewBlankLine()
}

func (p *parser) callonBlankLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlankLine1()
}

func (c *current) onSimpleWord1() (interface{}, error) {
	// very straightforward content: alphanums followed by spaces but not the "+" signs because it needs a heading space to become a LineBreak element
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSimpleWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleWord1()
}

func (c *current) onOtherWord7() (interface{}, error) {
	// TODO: remove check on parenthesis and dot?
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonOtherWord7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherWord7()
}

func (c *current) onOtherWord1() (interface{}, error) {
	// word cannot contain parenthesis. Dots and ellipsis are treated as independent words (but will be combined afterwards)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonOtherWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherWord1()
}

func (c *current) onFileLocation1(elements interface{}) (interface{}, error) {
	return types.NewLocation(elements.([]interface{}))
}

func (p *parser) callonFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation1(stack["elements"])
}

func (c *current) onLocation1(elements interface{}) (interface{}, error) {
	return types.NewLocation(elements.([]interface{}))
}

func (p *parser) callonLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocation1(stack["elements"])
}

func (c *current) onURL1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonURL1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURL1()
}

func (c *current) onID1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onID1()
}

func (c *current) onDIGIT1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDIGIT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDIGIT1()
}

func (c *current) onNUMBER1() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonNUMBER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNUMBER1()
}

func (c *current) onWS3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonWS3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWS3()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			return val, ok
		}
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	ignoreCase := ""
	if lit.ignoreCase {
		ignoreCase = "i"
	}
	val := string(strconv.AppendQuote([]byte{}, lit.val)) + ignoreCase // wrap 'lit.val' with double quotes
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, val)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, val)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}
