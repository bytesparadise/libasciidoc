// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/bytesparadise/libasciidoc/pkg/types"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "AsciidocDocument",
			pos:  position{line: 17, col: 1, offset: 319},
			expr: &actionExpr{
				pos: position{line: 17, col: 21, offset: 339},
				run: (*parser).callonAsciidocDocument1,
				expr: &seqExpr{
					pos: position{line: 17, col: 21, offset: 339},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 17, col: 21, offset: 339},
							label: "frontmatter",
							expr: &zeroOrOneExpr{
								pos: position{line: 17, col: 34, offset: 352},
								expr: &ruleRefExpr{
									pos:  position{line: 17, col: 34, offset: 352},
									name: "FrontMatter",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 17, col: 48, offset: 366},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 17, col: 56, offset: 374},
								name: "AsciidocDocumentBlocks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 17, col: 80, offset: 398},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "AsciidocDocumentWithinDelimitedBlock",
			pos:  position{line: 21, col: 1, offset: 478},
			expr: &actionExpr{
				pos: position{line: 21, col: 41, offset: 518},
				run: (*parser).callonAsciidocDocumentWithinDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 21, col: 41, offset: 518},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 21, col: 41, offset: 518},
							label: "frontmatter",
							expr: &zeroOrOneExpr{
								pos: position{line: 21, col: 54, offset: 531},
								expr: &ruleRefExpr{
									pos:  position{line: 21, col: 54, offset: 531},
									name: "FrontMatter",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 21, col: 68, offset: 545},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 21, col: 76, offset: 553},
								name: "AsciidocDocumentBlocksWithinDelimitedBlock",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 21, col: 120, offset: 597},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "TextDocument",
			pos:  position{line: 25, col: 1, offset: 677},
			expr: &actionExpr{
				pos: position{line: 25, col: 17, offset: 693},
				run: (*parser).callonTextDocument1,
				expr: &seqExpr{
					pos: position{line: 25, col: 17, offset: 693},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 25, col: 17, offset: 693},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 25, col: 25, offset: 701},
								name: "TextDocumentBlocks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 25, col: 45, offset: 721},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "AsciidocDocumentBlocks",
			pos:  position{line: 32, col: 1, offset: 904},
			expr: &actionExpr{
				pos: position{line: 32, col: 27, offset: 930},
				run: (*parser).callonAsciidocDocumentBlocks1,
				expr: &seqExpr{
					pos: position{line: 32, col: 27, offset: 930},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 32, col: 27, offset: 930},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 32, col: 35, offset: 938},
								expr: &ruleRefExpr{
									pos:  position{line: 32, col: 35, offset: 938},
									name: "DocumentHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 32, col: 52, offset: 955},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 32, col: 60, offset: 963},
								expr: &ruleRefExpr{
									pos:  position{line: 32, col: 60, offset: 963},
									name: "DocumentBlock",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentBlock",
			pos:  position{line: 41, col: 1, offset: 1212},
			expr: &actionExpr{
				pos: position{line: 41, col: 18, offset: 1229},
				run: (*parser).callonDocumentBlock1,
				expr: &seqExpr{
					pos: position{line: 41, col: 18, offset: 1229},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 41, col: 18, offset: 1229},
							expr: &ruleRefExpr{
								pos:  position{line: 41, col: 19, offset: 1230},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 42, col: 5, offset: 1239},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 42, col: 12, offset: 1246},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 42, col: 12, offset: 1246},
										name: "SimpleParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 43, col: 11, offset: 1272},
										name: "Section",
									},
									&ruleRefExpr{
										pos:  position{line: 44, col: 11, offset: 1291},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 45, col: 11, offset: 1316},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 46, col: 11, offset: 1340},
										name: "VerseParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 47, col: 11, offset: 1394},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 48, col: 11, offset: 1416},
										name: "ListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 49, col: 11, offset: 1435},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 50, col: 11, offset: 1486},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 51, col: 11, offset: 1510},
										name: "DocumentAttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 52, col: 11, offset: 1550},
										name: "DocumentAttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 53, col: 11, offset: 1584},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 54, col: 11, offset: 1621},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 55, col: 11, offset: 1646},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AsciidocDocumentBlocksWithinDelimitedBlock",
			pos:  position{line: 59, col: 1, offset: 1684},
			expr: &labeledExpr{
				pos:   position{line: 59, col: 47, offset: 1730},
				label: "blocks",
				expr: &zeroOrMoreExpr{
					pos: position{line: 59, col: 54, offset: 1737},
					expr: &ruleRefExpr{
						pos:  position{line: 59, col: 55, offset: 1738},
						name: "DocumentBlockWithinDelimitedBlock",
					},
				},
			},
		},
		{
			name: "DocumentBlockWithinDelimitedBlock",
			pos:  position{line: 61, col: 1, offset: 1775},
			expr: &actionExpr{
				pos: position{line: 61, col: 38, offset: 1812},
				run: (*parser).callonDocumentBlockWithinDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 61, col: 38, offset: 1812},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 61, col: 38, offset: 1812},
							expr: &ruleRefExpr{
								pos:  position{line: 61, col: 39, offset: 1813},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 62, col: 5, offset: 1822},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 62, col: 12, offset: 1829},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 62, col: 12, offset: 1829},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 63, col: 11, offset: 1854},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 64, col: 11, offset: 1878},
										name: "VerseParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 65, col: 11, offset: 1903},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 66, col: 11, offset: 1925},
										name: "ListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 67, col: 11, offset: 1944},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 68, col: 11, offset: 1995},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 69, col: 11, offset: 2019},
										name: "DocumentAttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 70, col: 11, offset: 2059},
										name: "DocumentAttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 71, col: 11, offset: 2093},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 72, col: 11, offset: 2130},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 73, col: 11, offset: 2155},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TextDocumentBlocks",
			pos:  position{line: 77, col: 1, offset: 2193},
			expr: &labeledExpr{
				pos:   position{line: 77, col: 23, offset: 2215},
				label: "blocks",
				expr: &zeroOrMoreExpr{
					pos: position{line: 77, col: 30, offset: 2222},
					expr: &ruleRefExpr{
						pos:  position{line: 77, col: 31, offset: 2223},
						name: "TextDocumentBlock",
					},
				},
			},
		},
		{
			name: "TextDocumentBlock",
			pos:  position{line: 79, col: 1, offset: 2244},
			expr: &actionExpr{
				pos: position{line: 79, col: 22, offset: 2265},
				run: (*parser).callonTextDocumentBlock1,
				expr: &seqExpr{
					pos: position{line: 79, col: 22, offset: 2265},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 79, col: 22, offset: 2265},
							expr: &ruleRefExpr{
								pos:  position{line: 79, col: 23, offset: 2266},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 80, col: 5, offset: 2275},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 80, col: 12, offset: 2282},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 80, col: 12, offset: 2282},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 80, col: 24, offset: 2294},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FrontMatter",
			pos:  position{line: 87, col: 1, offset: 2440},
			expr: &ruleRefExpr{
				pos:  position{line: 87, col: 16, offset: 2455},
				name: "YamlFrontMatter",
			},
		},
		{
			name: "YamlFrontMatter",
			pos:  position{line: 89, col: 1, offset: 2473},
			expr: &actionExpr{
				pos: position{line: 89, col: 20, offset: 2492},
				run: (*parser).callonYamlFrontMatter1,
				expr: &seqExpr{
					pos: position{line: 89, col: 20, offset: 2492},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 89, col: 20, offset: 2492},
							name: "YamlFrontMatterToken",
						},
						&labeledExpr{
							pos:   position{line: 89, col: 41, offset: 2513},
							label: "content",
							expr: &zeroOrOneExpr{
								pos: position{line: 89, col: 49, offset: 2521},
								expr: &ruleRefExpr{
									pos:  position{line: 89, col: 50, offset: 2522},
									name: "YamlFrontMatterContent",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 89, col: 75, offset: 2547},
							name: "YamlFrontMatterToken",
						},
					},
				},
			},
		},
		{
			name: "YamlFrontMatterToken",
			pos:  position{line: 93, col: 1, offset: 2627},
			expr: &seqExpr{
				pos: position{line: 93, col: 26, offset: 2652},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 93, col: 26, offset: 2652},
						val:        "---",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 93, col: 32, offset: 2658},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "YamlFrontMatterContent",
			pos:  position{line: 95, col: 1, offset: 2664},
			expr: &actionExpr{
				pos: position{line: 95, col: 27, offset: 2690},
				run: (*parser).callonYamlFrontMatterContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 95, col: 27, offset: 2690},
					expr: &oneOrMoreExpr{
						pos: position{line: 95, col: 28, offset: 2691},
						expr: &seqExpr{
							pos: position{line: 95, col: 29, offset: 2692},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 95, col: 29, offset: 2692},
									expr: &ruleRefExpr{
										pos:  position{line: 95, col: 30, offset: 2693},
										name: "YamlFrontMatterToken",
									},
								},
								&anyMatcher{
									line: 95, col: 51, offset: 2714,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentHeader",
			pos:  position{line: 102, col: 1, offset: 2880},
			expr: &actionExpr{
				pos: position{line: 102, col: 19, offset: 2898},
				run: (*parser).callonDocumentHeader1,
				expr: &seqExpr{
					pos: position{line: 102, col: 19, offset: 2898},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 102, col: 19, offset: 2898},
							val:        "=",
							ignoreCase: false,
						},
						&oneOrMoreExpr{
							pos: position{line: 102, col: 23, offset: 2902},
							expr: &ruleRefExpr{
								pos:  position{line: 102, col: 23, offset: 2902},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 102, col: 27, offset: 2906},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 102, col: 34, offset: 2913},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 102, col: 49, offset: 2928},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 102, col: 53, offset: 2932},
								expr: &ruleRefExpr{
									pos:  position{line: 102, col: 53, offset: 2932},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 102, col: 71, offset: 2950},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 103, col: 9, offset: 2962},
							expr: &choiceExpr{
								pos: position{line: 103, col: 10, offset: 2963},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 103, col: 10, offset: 2963},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 103, col: 30, offset: 2983},
										name: "CommentBlock",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 104, col: 9, offset: 3006},
							label: "authors",
							expr: &zeroOrOneExpr{
								pos: position{line: 104, col: 18, offset: 3015},
								expr: &ruleRefExpr{
									pos:  position{line: 104, col: 18, offset: 3015},
									name: "DocumentAuthors",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 105, col: 9, offset: 3042},
							expr: &choiceExpr{
								pos: position{line: 105, col: 10, offset: 3043},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 105, col: 10, offset: 3043},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 105, col: 30, offset: 3063},
										name: "CommentBlock",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 106, col: 9, offset: 3086},
							label: "revision",
							expr: &zeroOrOneExpr{
								pos: position{line: 106, col: 19, offset: 3096},
								expr: &ruleRefExpr{
									pos:  position{line: 106, col: 19, offset: 3096},
									name: "DocumentRevision",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthors",
			pos:  position{line: 110, col: 1, offset: 3197},
			expr: &choiceExpr{
				pos: position{line: 110, col: 20, offset: 3216},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 110, col: 20, offset: 3216},
						name: "DocumentAuthorsInlineForm",
					},
					&ruleRefExpr{
						pos:  position{line: 110, col: 48, offset: 3244},
						name: "DocumentAuthorsAttributeForm",
					},
				},
			},
		},
		{
			name: "DocumentAuthorsInlineForm",
			pos:  position{line: 112, col: 1, offset: 3274},
			expr: &actionExpr{
				pos: position{line: 112, col: 30, offset: 3303},
				run: (*parser).callonDocumentAuthorsInlineForm1,
				expr: &seqExpr{
					pos: position{line: 112, col: 30, offset: 3303},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 112, col: 30, offset: 3303},
							expr: &ruleRefExpr{
								pos:  position{line: 112, col: 30, offset: 3303},
								name: "WS",
							},
						},
						&notExpr{
							pos: position{line: 112, col: 34, offset: 3307},
							expr: &litMatcher{
								pos:        position{line: 112, col: 35, offset: 3308},
								val:        ":",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 112, col: 39, offset: 3312},
							label: "authors",
							expr: &oneOrMoreExpr{
								pos: position{line: 112, col: 48, offset: 3321},
								expr: &ruleRefExpr{
									pos:  position{line: 112, col: 48, offset: 3321},
									name: "DocumentAuthor",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 112, col: 65, offset: 3338},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorsAttributeForm",
			pos:  position{line: 116, col: 1, offset: 3408},
			expr: &actionExpr{
				pos: position{line: 116, col: 33, offset: 3440},
				run: (*parser).callonDocumentAuthorsAttributeForm1,
				expr: &seqExpr{
					pos: position{line: 116, col: 33, offset: 3440},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 116, col: 33, offset: 3440},
							expr: &ruleRefExpr{
								pos:  position{line: 116, col: 33, offset: 3440},
								name: "WS",
							},
						},
						&litMatcher{
							pos:        position{line: 116, col: 37, offset: 3444},
							val:        ":author:",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 116, col: 48, offset: 3455},
							label: "author",
							expr: &ruleRefExpr{
								pos:  position{line: 116, col: 56, offset: 3463},
								name: "DocumentAuthor",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 116, col: 72, offset: 3479},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthor",
			pos:  position{line: 120, col: 1, offset: 3558},
			expr: &actionExpr{
				pos: position{line: 120, col: 19, offset: 3576},
				run: (*parser).callonDocumentAuthor1,
				expr: &seqExpr{
					pos: position{line: 120, col: 19, offset: 3576},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 120, col: 19, offset: 3576},
							expr: &ruleRefExpr{
								pos:  position{line: 120, col: 19, offset: 3576},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 120, col: 23, offset: 3580},
							label: "fullname",
							expr: &ruleRefExpr{
								pos:  position{line: 120, col: 33, offset: 3590},
								name: "DocumentAuthorName",
							},
						},
						&labeledExpr{
							pos:   position{line: 120, col: 53, offset: 3610},
							label: "email",
							expr: &zeroOrOneExpr{
								pos: position{line: 120, col: 59, offset: 3616},
								expr: &ruleRefExpr{
									pos:  position{line: 120, col: 60, offset: 3617},
									name: "DocumentAuthorEmail",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 120, col: 82, offset: 3639},
							expr: &ruleRefExpr{
								pos:  position{line: 120, col: 82, offset: 3639},
								name: "WS",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 120, col: 86, offset: 3643},
							expr: &litMatcher{
								pos:        position{line: 120, col: 86, offset: 3643},
								val:        ";",
								ignoreCase: false,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 120, col: 91, offset: 3648},
							expr: &ruleRefExpr{
								pos:  position{line: 120, col: 91, offset: 3648},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorName",
			pos:  position{line: 125, col: 1, offset: 3790},
			expr: &actionExpr{
				pos: position{line: 125, col: 23, offset: 3812},
				run: (*parser).callonDocumentAuthorName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 125, col: 23, offset: 3812},
					expr: &choiceExpr{
						pos: position{line: 125, col: 24, offset: 3813},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 125, col: 24, offset: 3813},
								name: "Alphanums",
							},
							&seqExpr{
								pos: position{line: 125, col: 37, offset: 3826},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 125, col: 37, offset: 3826},
										expr: &litMatcher{
											pos:        position{line: 125, col: 38, offset: 3827},
											val:        "<",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 125, col: 42, offset: 3831},
										expr: &litMatcher{
											pos:        position{line: 125, col: 43, offset: 3832},
											val:        ";",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 125, col: 47, offset: 3836},
										expr: &ruleRefExpr{
											pos:  position{line: 125, col: 48, offset: 3837},
											name: "Newline",
										},
									},
									&anyMatcher{
										line: 125, col: 56, offset: 3845,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorEmail",
			pos:  position{line: 129, col: 1, offset: 3886},
			expr: &actionExpr{
				pos: position{line: 129, col: 24, offset: 3909},
				run: (*parser).callonDocumentAuthorEmail1,
				expr: &seqExpr{
					pos: position{line: 129, col: 24, offset: 3909},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 129, col: 24, offset: 3909},
							val:        "<",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 129, col: 28, offset: 3913},
							label: "email",
							expr: &actionExpr{
								pos: position{line: 129, col: 35, offset: 3920},
								run: (*parser).callonDocumentAuthorEmail5,
								expr: &oneOrMoreExpr{
									pos: position{line: 129, col: 35, offset: 3920},
									expr: &choiceExpr{
										pos: position{line: 129, col: 36, offset: 3921},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 129, col: 36, offset: 3921},
												name: "Alphanums",
											},
											&seqExpr{
												pos: position{line: 129, col: 49, offset: 3934},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 129, col: 49, offset: 3934},
														expr: &litMatcher{
															pos:        position{line: 129, col: 50, offset: 3935},
															val:        ">",
															ignoreCase: false,
														},
													},
													&notExpr{
														pos: position{line: 129, col: 54, offset: 3939},
														expr: &ruleRefExpr{
															pos:  position{line: 129, col: 55, offset: 3940},
															name: "EOL",
														},
													},
													&anyMatcher{
														line: 129, col: 60, offset: 3945,
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 131, col: 4, offset: 3986},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "DocumentRevision",
			pos:  position{line: 137, col: 1, offset: 4147},
			expr: &actionExpr{
				pos: position{line: 137, col: 21, offset: 4167},
				run: (*parser).callonDocumentRevision1,
				expr: &seqExpr{
					pos: position{line: 137, col: 21, offset: 4167},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 137, col: 21, offset: 4167},
							expr: &ruleRefExpr{
								pos:  position{line: 137, col: 21, offset: 4167},
								name: "WS",
							},
						},
						&notExpr{
							pos: position{line: 137, col: 25, offset: 4171},
							expr: &litMatcher{
								pos:        position{line: 137, col: 26, offset: 4172},
								val:        ":",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 137, col: 30, offset: 4176},
							label: "revision",
							expr: &choiceExpr{
								pos: position{line: 138, col: 9, offset: 4195},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 138, col: 10, offset: 4196},
										run: (*parser).callonDocumentRevision9,
										expr: &seqExpr{
											pos: position{line: 138, col: 10, offset: 4196},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 138, col: 10, offset: 4196},
													label: "revnumber",
													expr: &ruleRefExpr{
														pos:  position{line: 138, col: 21, offset: 4207},
														name: "DocumentRevisionNumber",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 138, col: 45, offset: 4231},
													expr: &litMatcher{
														pos:        position{line: 138, col: 45, offset: 4231},
														val:        ",",
														ignoreCase: false,
													},
												},
												&labeledExpr{
													pos:   position{line: 138, col: 50, offset: 4236},
													label: "revdate",
													expr: &zeroOrOneExpr{
														pos: position{line: 138, col: 58, offset: 4244},
														expr: &ruleRefExpr{
															pos:  position{line: 138, col: 59, offset: 4245},
															name: "DocumentRevisionDate",
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 138, col: 82, offset: 4268},
													expr: &litMatcher{
														pos:        position{line: 138, col: 82, offset: 4268},
														val:        ":",
														ignoreCase: false,
													},
												},
												&labeledExpr{
													pos:   position{line: 138, col: 87, offset: 4273},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 138, col: 97, offset: 4283},
														expr: &ruleRefExpr{
															pos:  position{line: 138, col: 98, offset: 4284},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 140, col: 15, offset: 4401},
										run: (*parser).callonDocumentRevision23,
										expr: &seqExpr{
											pos: position{line: 140, col: 15, offset: 4401},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 140, col: 15, offset: 4401},
													label: "revdate",
													expr: &ruleRefExpr{
														pos:  position{line: 140, col: 24, offset: 4410},
														name: "DocumentRevisionDate",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 140, col: 46, offset: 4432},
													expr: &litMatcher{
														pos:        position{line: 140, col: 46, offset: 4432},
														val:        ":",
														ignoreCase: false,
													},
												},
												&labeledExpr{
													pos:   position{line: 140, col: 51, offset: 4437},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 140, col: 61, offset: 4447},
														expr: &ruleRefExpr{
															pos:  position{line: 140, col: 62, offset: 4448},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 142, col: 13, offset: 4557},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionNumber",
			pos:  position{line: 147, col: 1, offset: 4687},
			expr: &choiceExpr{
				pos: position{line: 147, col: 27, offset: 4713},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 147, col: 27, offset: 4713},
						run: (*parser).callonDocumentRevisionNumber2,
						expr: &seqExpr{
							pos: position{line: 147, col: 27, offset: 4713},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 147, col: 27, offset: 4713},
									val:        "v",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 147, col: 32, offset: 4718},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 147, col: 39, offset: 4725},
									expr: &choiceExpr{
										pos: position{line: 147, col: 40, offset: 4726},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 147, col: 40, offset: 4726},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 147, col: 52, offset: 4738},
												name: "Spaces",
											},
											&seqExpr{
												pos: position{line: 147, col: 62, offset: 4748},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 147, col: 62, offset: 4748},
														expr: &ruleRefExpr{
															pos:  position{line: 147, col: 63, offset: 4749},
															name: "EOL",
														},
													},
													&notExpr{
														pos: position{line: 147, col: 67, offset: 4753},
														expr: &litMatcher{
															pos:        position{line: 147, col: 68, offset: 4754},
															val:        ",",
															ignoreCase: false,
														},
													},
													&notExpr{
														pos: position{line: 147, col: 72, offset: 4758},
														expr: &litMatcher{
															pos:        position{line: 147, col: 73, offset: 4759},
															val:        ":",
															ignoreCase: false,
														},
													},
													&anyMatcher{
														line: 147, col: 78, offset: 4764,
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 149, col: 5, offset: 4806},
						run: (*parser).callonDocumentRevisionNumber18,
						expr: &seqExpr{
							pos: position{line: 149, col: 5, offset: 4806},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 149, col: 5, offset: 4806},
									expr: &litMatcher{
										pos:        position{line: 149, col: 5, offset: 4806},
										val:        "v",
										ignoreCase: true,
									},
								},
								&ruleRefExpr{
									pos:  position{line: 149, col: 11, offset: 4812},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 149, col: 18, offset: 4819},
									expr: &choiceExpr{
										pos: position{line: 149, col: 19, offset: 4820},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 149, col: 19, offset: 4820},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 149, col: 31, offset: 4832},
												name: "Spaces",
											},
											&seqExpr{
												pos: position{line: 149, col: 41, offset: 4842},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 149, col: 41, offset: 4842},
														expr: &ruleRefExpr{
															pos:  position{line: 149, col: 42, offset: 4843},
															name: "EOL",
														},
													},
													&notExpr{
														pos: position{line: 149, col: 46, offset: 4847},
														expr: &litMatcher{
															pos:        position{line: 149, col: 47, offset: 4848},
															val:        ",",
															ignoreCase: false,
														},
													},
													&notExpr{
														pos: position{line: 149, col: 51, offset: 4852},
														expr: &litMatcher{
															pos:        position{line: 149, col: 52, offset: 4853},
															val:        ":",
															ignoreCase: false,
														},
													},
													&anyMatcher{
														line: 149, col: 57, offset: 4858,
													},
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 149, col: 62, offset: 4863},
									expr: &ruleRefExpr{
										pos:  position{line: 149, col: 62, offset: 4863},
										name: "WS",
									},
								},
								&andExpr{
									pos: position{line: 149, col: 66, offset: 4867},
									expr: &litMatcher{
										pos:        position{line: 149, col: 67, offset: 4868},
										val:        ",",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionDate",
			pos:  position{line: 153, col: 1, offset: 4908},
			expr: &actionExpr{
				pos: position{line: 153, col: 25, offset: 4932},
				run: (*parser).callonDocumentRevisionDate1,
				expr: &oneOrMoreExpr{
					pos: position{line: 153, col: 25, offset: 4932},
					expr: &choiceExpr{
						pos: position{line: 153, col: 26, offset: 4933},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 153, col: 26, offset: 4933},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 153, col: 38, offset: 4945},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 153, col: 48, offset: 4955},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 153, col: 48, offset: 4955},
										expr: &ruleRefExpr{
											pos:  position{line: 153, col: 49, offset: 4956},
											name: "EOL",
										},
									},
									&notExpr{
										pos: position{line: 153, col: 53, offset: 4960},
										expr: &litMatcher{
											pos:        position{line: 153, col: 54, offset: 4961},
											val:        ":",
											ignoreCase: false,
										},
									},
									&anyMatcher{
										line: 153, col: 59, offset: 4966,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionRemark",
			pos:  position{line: 157, col: 1, offset: 5007},
			expr: &actionExpr{
				pos: position{line: 157, col: 27, offset: 5033},
				run: (*parser).callonDocumentRevisionRemark1,
				expr: &oneOrMoreExpr{
					pos: position{line: 157, col: 27, offset: 5033},
					expr: &choiceExpr{
						pos: position{line: 157, col: 28, offset: 5034},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 157, col: 28, offset: 5034},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 157, col: 40, offset: 5046},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 157, col: 50, offset: 5056},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 157, col: 50, offset: 5056},
										expr: &ruleRefExpr{
											pos:  position{line: 157, col: 51, offset: 5057},
											name: "EOL",
										},
									},
									&anyMatcher{
										line: 157, col: 56, offset: 5062,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeDeclaration",
			pos:  position{line: 164, col: 1, offset: 5218},
			expr: &actionExpr{
				pos: position{line: 164, col: 33, offset: 5250},
				run: (*parser).callonDocumentAttributeDeclaration1,
				expr: &seqExpr{
					pos: position{line: 164, col: 33, offset: 5250},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 164, col: 33, offset: 5250},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 164, col: 37, offset: 5254},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 164, col: 43, offset: 5260},
								name: "DocumentAttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 164, col: 66, offset: 5283},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 164, col: 70, offset: 5287},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 164, col: 76, offset: 5293},
								expr: &actionExpr{
									pos: position{line: 164, col: 77, offset: 5294},
									run: (*parser).callonDocumentAttributeDeclaration9,
									expr: &seqExpr{
										pos: position{line: 164, col: 78, offset: 5295},
										exprs: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 164, col: 78, offset: 5295},
												expr: &ruleRefExpr{
													pos:  position{line: 164, col: 78, offset: 5295},
													name: "WS",
												},
											},
											&labeledExpr{
												pos:   position{line: 164, col: 82, offset: 5299},
												label: "value",
												expr: &ruleRefExpr{
													pos:  position{line: 164, col: 89, offset: 5306},
													name: "DocumentAttributeValue",
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 164, col: 138, offset: 5355},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeName",
			pos:  position{line: 171, col: 1, offset: 5604},
			expr: &actionExpr{
				pos: position{line: 171, col: 26, offset: 5629},
				run: (*parser).callonDocumentAttributeName1,
				expr: &seqExpr{
					pos: position{line: 171, col: 26, offset: 5629},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 171, col: 27, offset: 5630},
							alternatives: []interface{}{
								&charClassMatcher{
									pos:        position{line: 171, col: 27, offset: 5630},
									val:        "[A-Z]",
									ranges:     []rune{'A', 'Z'},
									ignoreCase: false,
									inverted:   false,
								},
								&charClassMatcher{
									pos:        position{line: 171, col: 35, offset: 5638},
									val:        "[a-z]",
									ranges:     []rune{'a', 'z'},
									ignoreCase: false,
									inverted:   false,
								},
								&charClassMatcher{
									pos:        position{line: 171, col: 43, offset: 5646},
									val:        "[0-9]",
									ranges:     []rune{'0', '9'},
									ignoreCase: false,
									inverted:   false,
								},
								&litMatcher{
									pos:        position{line: 171, col: 51, offset: 5654},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 171, col: 56, offset: 5659},
							expr: &choiceExpr{
								pos: position{line: 171, col: 57, offset: 5660},
								alternatives: []interface{}{
									&charClassMatcher{
										pos:        position{line: 171, col: 57, offset: 5660},
										val:        "[A-Z]",
										ranges:     []rune{'A', 'Z'},
										ignoreCase: false,
										inverted:   false,
									},
									&charClassMatcher{
										pos:        position{line: 171, col: 65, offset: 5668},
										val:        "[a-z]",
										ranges:     []rune{'a', 'z'},
										ignoreCase: false,
										inverted:   false,
									},
									&charClassMatcher{
										pos:        position{line: 171, col: 73, offset: 5676},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
									&litMatcher{
										pos:        position{line: 171, col: 81, offset: 5684},
										val:        "-",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeValue",
			pos:  position{line: 175, col: 1, offset: 5726},
			expr: &actionExpr{
				pos: position{line: 175, col: 27, offset: 5752},
				run: (*parser).callonDocumentAttributeValue1,
				expr: &oneOrMoreExpr{
					pos: position{line: 175, col: 27, offset: 5752},
					expr: &seqExpr{
						pos: position{line: 175, col: 28, offset: 5753},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 175, col: 28, offset: 5753},
								expr: &ruleRefExpr{
									pos:  position{line: 175, col: 29, offset: 5754},
									name: "Newline",
								},
							},
							&anyMatcher{
								line: 175, col: 37, offset: 5762,
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeReset",
			pos:  position{line: 179, col: 1, offset: 5802},
			expr: &choiceExpr{
				pos: position{line: 179, col: 27, offset: 5828},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 179, col: 27, offset: 5828},
						run: (*parser).callonDocumentAttributeReset2,
						expr: &seqExpr{
							pos: position{line: 179, col: 27, offset: 5828},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 179, col: 27, offset: 5828},
									val:        ":!",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 179, col: 32, offset: 5833},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 179, col: 38, offset: 5839},
										name: "DocumentAttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 179, col: 61, offset: 5862},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 179, col: 65, offset: 5866},
									name: "EOLS",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 181, col: 5, offset: 5935},
						run: (*parser).callonDocumentAttributeReset9,
						expr: &seqExpr{
							pos: position{line: 181, col: 5, offset: 5935},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 181, col: 5, offset: 5935},
									val:        ":",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 181, col: 9, offset: 5939},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 181, col: 15, offset: 5945},
										name: "DocumentAttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 181, col: 38, offset: 5968},
									val:        "!:",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 181, col: 43, offset: 5973},
									name: "EOLS",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeSubstitution",
			pos:  position{line: 185, col: 1, offset: 6041},
			expr: &actionExpr{
				pos: position{line: 185, col: 34, offset: 6074},
				run: (*parser).callonDocumentAttributeSubstitution1,
				expr: &seqExpr{
					pos: position{line: 185, col: 34, offset: 6074},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 185, col: 34, offset: 6074},
							val:        "{",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 185, col: 38, offset: 6078},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 185, col: 44, offset: 6084},
								name: "DocumentAttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 185, col: 67, offset: 6107},
							val:        "}",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "ElementAttributes",
			pos:  position{line: 192, col: 1, offset: 6295},
			expr: &actionExpr{
				pos: position{line: 192, col: 22, offset: 6316},
				run: (*parser).callonElementAttributes1,
				expr: &labeledExpr{
					pos:   position{line: 192, col: 22, offset: 6316},
					label: "attrs",
					expr: &oneOrMoreExpr{
						pos: position{line: 192, col: 28, offset: 6322},
						expr: &ruleRefExpr{
							pos:  position{line: 192, col: 29, offset: 6323},
							name: "ElementAttribute",
						},
					},
				},
			},
		},
		{
			name: "ElementAttribute",
			pos:  position{line: 196, col: 1, offset: 6413},
			expr: &actionExpr{
				pos: position{line: 196, col: 21, offset: 6433},
				run: (*parser).callonElementAttribute1,
				expr: &seqExpr{
					pos: position{line: 196, col: 21, offset: 6433},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 196, col: 21, offset: 6433},
							expr: &choiceExpr{
								pos: position{line: 196, col: 23, offset: 6435},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 196, col: 23, offset: 6435},
										val:        "[",
										ignoreCase: false,
									},
									&litMatcher{
										pos:        position{line: 196, col: 29, offset: 6441},
										val:        ".",
										ignoreCase: false,
									},
									&litMatcher{
										pos:        position{line: 196, col: 35, offset: 6447},
										val:        "#",
										ignoreCase: false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 197, col: 5, offset: 6523},
							label: "attr",
							expr: &choiceExpr{
								pos: position{line: 197, col: 11, offset: 6529},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 197, col: 11, offset: 6529},
										name: "ElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 198, col: 9, offset: 6550},
										name: "ElementTitle",
									},
									&ruleRefExpr{
										pos:  position{line: 199, col: 9, offset: 6574},
										name: "ElementRole",
									},
									&ruleRefExpr{
										pos:  position{line: 200, col: 9, offset: 6597},
										name: "LiteralAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 201, col: 9, offset: 6625},
										name: "SourceAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 202, col: 9, offset: 6653},
										name: "QuoteAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 203, col: 9, offset: 6680},
										name: "VerseAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 204, col: 9, offset: 6707},
										name: "AdmonitionMarkerAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 205, col: 9, offset: 6744},
										name: "HorizontalLayout",
									},
									&ruleRefExpr{
										pos:  position{line: 206, col: 9, offset: 6772},
										name: "AttributeGroup",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MasqueradeAttribute",
			pos:  position{line: 211, col: 1, offset: 6955},
			expr: &choiceExpr{
				pos: position{line: 211, col: 24, offset: 6978},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 211, col: 24, offset: 6978},
						name: "QuoteAttributes",
					},
					&ruleRefExpr{
						pos:  position{line: 211, col: 42, offset: 6996},
						name: "VerseAttributes",
					},
				},
			},
		},
		{
			name: "ElementID",
			pos:  position{line: 213, col: 1, offset: 7013},
			expr: &choiceExpr{
				pos: position{line: 213, col: 14, offset: 7026},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 213, col: 14, offset: 7026},
						run: (*parser).callonElementID2,
						expr: &seqExpr{
							pos: position{line: 213, col: 14, offset: 7026},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 213, col: 14, offset: 7026},
									val:        "[[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 213, col: 19, offset: 7031},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 213, col: 23, offset: 7035},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 213, col: 27, offset: 7039},
									val:        "]]",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 213, col: 32, offset: 7044},
									name: "EOLS",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 215, col: 5, offset: 7098},
						run: (*parser).callonElementID9,
						expr: &seqExpr{
							pos: position{line: 215, col: 5, offset: 7098},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 215, col: 5, offset: 7098},
									val:        "[#",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 215, col: 10, offset: 7103},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 215, col: 14, offset: 7107},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 215, col: 18, offset: 7111},
									val:        "]",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 215, col: 23, offset: 7116},
									name: "EOLS",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElementID",
			pos:  position{line: 219, col: 1, offset: 7169},
			expr: &actionExpr{
				pos: position{line: 219, col: 20, offset: 7188},
				run: (*parser).callonInlineElementID1,
				expr: &seqExpr{
					pos: position{line: 219, col: 20, offset: 7188},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 219, col: 20, offset: 7188},
							val:        "[[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 219, col: 25, offset: 7193},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 219, col: 29, offset: 7197},
								name: "ID",
							},
						},
						&litMatcher{
							pos:        position{line: 219, col: 33, offset: 7201},
							val:        "]]",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 219, col: 38, offset: 7206},
							expr: &ruleRefExpr{
								pos:  position{line: 219, col: 38, offset: 7206},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "ElementTitle",
			pos:  position{line: 225, col: 1, offset: 7480},
			expr: &actionExpr{
				pos: position{line: 225, col: 17, offset: 7496},
				run: (*parser).callonElementTitle1,
				expr: &seqExpr{
					pos: position{line: 225, col: 17, offset: 7496},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 225, col: 17, offset: 7496},
							val:        ".",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 225, col: 21, offset: 7500},
							label: "title",
							expr: &actionExpr{
								pos: position{line: 225, col: 28, offset: 7507},
								run: (*parser).callonElementTitle5,
								expr: &seqExpr{
									pos: position{line: 225, col: 28, offset: 7507},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 225, col: 28, offset: 7507},
											name: "Alphanums",
										},
										&zeroOrMoreExpr{
											pos: position{line: 225, col: 38, offset: 7517},
											expr: &choiceExpr{
												pos: position{line: 225, col: 39, offset: 7518},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 225, col: 39, offset: 7518},
														name: "Alphanums",
													},
													&ruleRefExpr{
														pos:  position{line: 225, col: 51, offset: 7530},
														name: "Spaces",
													},
													&seqExpr{
														pos: position{line: 225, col: 61, offset: 7540},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 225, col: 61, offset: 7540},
																expr: &ruleRefExpr{
																	pos:  position{line: 225, col: 62, offset: 7541},
																	name: "Newline",
																},
															},
															&anyMatcher{
																line: 225, col: 70, offset: 7549,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 227, col: 4, offset: 7590},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ElementRole",
			pos:  position{line: 233, col: 1, offset: 7742},
			expr: &actionExpr{
				pos: position{line: 233, col: 16, offset: 7757},
				run: (*parser).callonElementRole1,
				expr: &seqExpr{
					pos: position{line: 233, col: 16, offset: 7757},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 233, col: 16, offset: 7757},
							val:        "[.",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 233, col: 21, offset: 7762},
							label: "role",
							expr: &actionExpr{
								pos: position{line: 233, col: 27, offset: 7768},
								run: (*parser).callonElementRole5,
								expr: &seqExpr{
									pos: position{line: 233, col: 27, offset: 7768},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 233, col: 27, offset: 7768},
											name: "Alphanums",
										},
										&zeroOrMoreExpr{
											pos: position{line: 233, col: 37, offset: 7778},
											expr: &choiceExpr{
												pos: position{line: 233, col: 38, offset: 7779},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 233, col: 38, offset: 7779},
														name: "Alphanums",
													},
													&ruleRefExpr{
														pos:  position{line: 233, col: 50, offset: 7791},
														name: "Spaces",
													},
													&seqExpr{
														pos: position{line: 233, col: 60, offset: 7801},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 233, col: 60, offset: 7801},
																expr: &ruleRefExpr{
																	pos:  position{line: 233, col: 61, offset: 7802},
																	name: "Newline",
																},
															},
															&notExpr{
																pos: position{line: 233, col: 69, offset: 7810},
																expr: &litMatcher{
																	pos:        position{line: 233, col: 70, offset: 7811},
																	val:        "]",
																	ignoreCase: false,
																},
															},
															&anyMatcher{
																line: 233, col: 74, offset: 7815,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 235, col: 4, offset: 7856},
							val:        "]",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 235, col: 8, offset: 7860},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "LiteralAttribute",
			pos:  position{line: 239, col: 1, offset: 7917},
			expr: &actionExpr{
				pos: position{line: 239, col: 21, offset: 7937},
				run: (*parser).callonLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 239, col: 21, offset: 7937},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 239, col: 21, offset: 7937},
							val:        "[literal]",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 239, col: 33, offset: 7949},
							expr: &ruleRefExpr{
								pos:  position{line: 239, col: 33, offset: 7949},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 239, col: 37, offset: 7953},
							name: "Newline",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionMarkerAttribute",
			pos:  position{line: 244, col: 1, offset: 8085},
			expr: &actionExpr{
				pos: position{line: 244, col: 30, offset: 8114},
				run: (*parser).callonAdmonitionMarkerAttribute1,
				expr: &seqExpr{
					pos: position{line: 244, col: 30, offset: 8114},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 244, col: 30, offset: 8114},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 244, col: 34, offset: 8118},
							label: "k",
							expr: &ruleRefExpr{
								pos:  position{line: 244, col: 37, offset: 8121},
								name: "AdmonitionKind",
							},
						},
						&litMatcher{
							pos:        position{line: 244, col: 53, offset: 8137},
							val:        "]",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 244, col: 57, offset: 8141},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "SourceAttributes",
			pos:  position{line: 249, col: 1, offset: 8297},
			expr: &actionExpr{
				pos: position{line: 249, col: 21, offset: 8317},
				run: (*parser).callonSourceAttributes1,
				expr: &seqExpr{
					pos: position{line: 249, col: 21, offset: 8317},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 249, col: 21, offset: 8317},
							val:        "[source",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 250, col: 5, offset: 8332},
							label: "language",
							expr: &zeroOrOneExpr{
								pos: position{line: 250, col: 14, offset: 8341},
								expr: &actionExpr{
									pos: position{line: 250, col: 15, offset: 8342},
									run: (*parser).callonSourceAttributes6,
									expr: &seqExpr{
										pos: position{line: 250, col: 15, offset: 8342},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 250, col: 15, offset: 8342},
												val:        ",",
												ignoreCase: false,
											},
											&labeledExpr{
												pos:   position{line: 250, col: 19, offset: 8346},
												label: "attr",
												expr: &zeroOrOneExpr{
													pos: position{line: 250, col: 24, offset: 8351},
													expr: &ruleRefExpr{
														pos:  position{line: 250, col: 25, offset: 8352},
														name: "StandaloneAttributeValue",
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 251, col: 5, offset: 8407},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 251, col: 12, offset: 8414},
								expr: &actionExpr{
									pos: position{line: 251, col: 13, offset: 8415},
									run: (*parser).callonSourceAttributes14,
									expr: &seqExpr{
										pos: position{line: 251, col: 13, offset: 8415},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 251, col: 13, offset: 8415},
												val:        ",",
												ignoreCase: false,
											},
											&labeledExpr{
												pos:   position{line: 251, col: 17, offset: 8419},
												label: "attr",
												expr: &zeroOrOneExpr{
													pos: position{line: 251, col: 22, offset: 8424},
													expr: &ruleRefExpr{
														pos:  position{line: 251, col: 23, offset: 8425},
														name: "GenericAttribute",
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 252, col: 5, offset: 8472},
							val:        "]",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 252, col: 9, offset: 8476},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "AttributeGroup",
			pos:  position{line: 257, col: 1, offset: 8628},
			expr: &actionExpr{
				pos: position{line: 257, col: 19, offset: 8646},
				run: (*parser).callonAttributeGroup1,
				expr: &seqExpr{
					pos: position{line: 257, col: 19, offset: 8646},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 257, col: 19, offset: 8646},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 257, col: 23, offset: 8650},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 257, col: 34, offset: 8661},
								expr: &ruleRefExpr{
									pos:  position{line: 257, col: 35, offset: 8662},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 257, col: 54, offset: 8681},
							val:        "]",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 257, col: 58, offset: 8685},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "GenericAttribute",
			pos:  position{line: 261, col: 1, offset: 8758},
			expr: &choiceExpr{
				pos: position{line: 262, col: 5, offset: 8783},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 262, col: 5, offset: 8783},
						run: (*parser).callonGenericAttribute2,
						expr: &seqExpr{
							pos: position{line: 262, col: 5, offset: 8783},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 262, col: 5, offset: 8783},
									label: "key",
									expr: &ruleRefExpr{
										pos:  position{line: 262, col: 10, offset: 8788},
										name: "AttributeKey",
									},
								},
								&litMatcher{
									pos:        position{line: 262, col: 24, offset: 8802},
									val:        "=",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 262, col: 28, offset: 8806},
									label: "value",
									expr: &zeroOrOneExpr{
										pos: position{line: 262, col: 34, offset: 8812},
										expr: &ruleRefExpr{
											pos:  position{line: 262, col: 35, offset: 8813},
											name: "AttributeValue",
										},
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 262, col: 52, offset: 8830},
									expr: &litMatcher{
										pos:        position{line: 262, col: 52, offset: 8830},
										val:        ",",
										ignoreCase: false,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 262, col: 57, offset: 8835},
									expr: &ruleRefExpr{
										pos:  position{line: 262, col: 57, offset: 8835},
										name: "WS",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 264, col: 9, offset: 8940},
						run: (*parser).callonGenericAttribute14,
						expr: &seqExpr{
							pos: position{line: 264, col: 9, offset: 8940},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 264, col: 9, offset: 8940},
									label: "key",
									expr: &ruleRefExpr{
										pos:  position{line: 264, col: 14, offset: 8945},
										name: "AttributeKey",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 264, col: 28, offset: 8959},
									expr: &litMatcher{
										pos:        position{line: 264, col: 28, offset: 8959},
										val:        ",",
										ignoreCase: false,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 264, col: 33, offset: 8964},
									expr: &ruleRefExpr{
										pos:  position{line: 264, col: 33, offset: 8964},
										name: "WS",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeKey",
			pos:  position{line: 268, col: 1, offset: 9057},
			expr: &actionExpr{
				pos: position{line: 268, col: 17, offset: 9073},
				run: (*parser).callonAttributeKey1,
				expr: &seqExpr{
					pos: position{line: 268, col: 17, offset: 9073},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 268, col: 17, offset: 9073},
							expr: &litMatcher{
								pos:        position{line: 268, col: 18, offset: 9074},
								val:        "quote",
								ignoreCase: false,
							},
						},
						&notExpr{
							pos: position{line: 268, col: 26, offset: 9082},
							expr: &litMatcher{
								pos:        position{line: 268, col: 27, offset: 9083},
								val:        "verse",
								ignoreCase: false,
							},
						},
						&notExpr{
							pos: position{line: 268, col: 35, offset: 9091},
							expr: &litMatcher{
								pos:        position{line: 268, col: 36, offset: 9092},
								val:        "literal",
								ignoreCase: false,
							},
						},
						&notExpr{
							pos: position{line: 268, col: 46, offset: 9102},
							expr: &ruleRefExpr{
								pos:  position{line: 268, col: 47, offset: 9103},
								name: "Spaces",
							},
						},
						&labeledExpr{
							pos:   position{line: 268, col: 54, offset: 9110},
							label: "key",
							expr: &oneOrMoreExpr{
								pos: position{line: 268, col: 58, offset: 9114},
								expr: &choiceExpr{
									pos: position{line: 268, col: 59, offset: 9115},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 268, col: 59, offset: 9115},
											name: "Alphanums",
										},
										&ruleRefExpr{
											pos:  position{line: 268, col: 71, offset: 9127},
											name: "OtherAttributeChar",
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 268, col: 92, offset: 9148},
							expr: &ruleRefExpr{
								pos:  position{line: 268, col: 92, offset: 9148},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeValue",
			pos:  position{line: 272, col: 1, offset: 9188},
			expr: &actionExpr{
				pos: position{line: 272, col: 19, offset: 9206},
				run: (*parser).callonAttributeValue1,
				expr: &labeledExpr{
					pos:   position{line: 272, col: 19, offset: 9206},
					label: "value",
					expr: &oneOrMoreExpr{
						pos: position{line: 272, col: 25, offset: 9212},
						expr: &choiceExpr{
							pos: position{line: 272, col: 26, offset: 9213},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 272, col: 26, offset: 9213},
									name: "Alphanums",
								},
								&ruleRefExpr{
									pos:  position{line: 272, col: 38, offset: 9225},
									name: "Spaces",
								},
								&ruleRefExpr{
									pos:  position{line: 272, col: 47, offset: 9234},
									name: "OtherAttributeChar",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StandaloneAttributeValue",
			pos:  position{line: 276, col: 1, offset: 9292},
			expr: &actionExpr{
				pos: position{line: 276, col: 29, offset: 9320},
				run: (*parser).callonStandaloneAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 276, col: 29, offset: 9320},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 276, col: 29, offset: 9320},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 276, col: 35, offset: 9326},
								expr: &choiceExpr{
									pos: position{line: 276, col: 36, offset: 9327},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 276, col: 36, offset: 9327},
											name: "Alphanums",
										},
										&ruleRefExpr{
											pos:  position{line: 276, col: 48, offset: 9339},
											name: "Spaces",
										},
										&ruleRefExpr{
											pos:  position{line: 276, col: 57, offset: 9348},
											name: "OtherAttributeChar",
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 276, col: 78, offset: 9369},
							expr: &litMatcher{
								pos:        position{line: 276, col: 79, offset: 9370},
								val:        "=",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "OtherAttributeChar",
			pos:  position{line: 280, col: 1, offset: 9536},
			expr: &seqExpr{
				pos: position{line: 280, col: 24, offset: 9559},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 280, col: 24, offset: 9559},
						expr: &ruleRefExpr{
							pos:  position{line: 280, col: 25, offset: 9560},
							name: "Newline",
						},
					},
					&notExpr{
						pos: position{line: 280, col: 33, offset: 9568},
						expr: &litMatcher{
							pos:        position{line: 280, col: 34, offset: 9569},
							val:        "=",
							ignoreCase: false,
						},
					},
					&notExpr{
						pos: position{line: 280, col: 38, offset: 9573},
						expr: &litMatcher{
							pos:        position{line: 280, col: 39, offset: 9574},
							val:        ",",
							ignoreCase: false,
						},
					},
					&notExpr{
						pos: position{line: 280, col: 43, offset: 9578},
						expr: &litMatcher{
							pos:        position{line: 280, col: 44, offset: 9579},
							val:        "]",
							ignoreCase: false,
						},
					},
					&anyMatcher{
						line: 280, col: 48, offset: 9583,
					},
				},
			},
		},
		{
			name: "HorizontalLayout",
			pos:  position{line: 282, col: 1, offset: 9587},
			expr: &actionExpr{
				pos: position{line: 282, col: 21, offset: 9607},
				run: (*parser).callonHorizontalLayout1,
				expr: &seqExpr{
					pos: position{line: 282, col: 21, offset: 9607},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 282, col: 21, offset: 9607},
							val:        "[horizontal]",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 282, col: 36, offset: 9622},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "QuoteAttributes",
			pos:  position{line: 286, col: 1, offset: 9696},
			expr: &actionExpr{
				pos: position{line: 286, col: 20, offset: 9715},
				run: (*parser).callonQuoteAttributes1,
				expr: &seqExpr{
					pos: position{line: 286, col: 20, offset: 9715},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 286, col: 20, offset: 9715},
							val:        "[quote",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 286, col: 29, offset: 9724},
							expr: &ruleRefExpr{
								pos:  position{line: 286, col: 29, offset: 9724},
								name: "WS",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 286, col: 33, offset: 9728},
							expr: &litMatcher{
								pos:        position{line: 286, col: 33, offset: 9728},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 286, col: 38, offset: 9733},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 286, col: 45, offset: 9740},
								expr: &ruleRefExpr{
									pos:  position{line: 286, col: 46, offset: 9741},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 286, col: 63, offset: 9758},
							expr: &litMatcher{
								pos:        position{line: 286, col: 63, offset: 9758},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 286, col: 68, offset: 9763},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 286, col: 74, offset: 9769},
								expr: &ruleRefExpr{
									pos:  position{line: 286, col: 75, offset: 9770},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 286, col: 92, offset: 9787},
							val:        "]",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 286, col: 96, offset: 9791},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "VerseAttributes",
			pos:  position{line: 290, col: 1, offset: 9861},
			expr: &actionExpr{
				pos: position{line: 290, col: 20, offset: 9880},
				run: (*parser).callonVerseAttributes1,
				expr: &seqExpr{
					pos: position{line: 290, col: 20, offset: 9880},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 290, col: 20, offset: 9880},
							val:        "[verse",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 290, col: 29, offset: 9889},
							expr: &ruleRefExpr{
								pos:  position{line: 290, col: 29, offset: 9889},
								name: "WS",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 290, col: 33, offset: 9893},
							expr: &litMatcher{
								pos:        position{line: 290, col: 33, offset: 9893},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 290, col: 38, offset: 9898},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 290, col: 45, offset: 9905},
								expr: &ruleRefExpr{
									pos:  position{line: 290, col: 46, offset: 9906},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 290, col: 63, offset: 9923},
							expr: &litMatcher{
								pos:        position{line: 290, col: 63, offset: 9923},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 290, col: 68, offset: 9928},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 290, col: 74, offset: 9934},
								expr: &ruleRefExpr{
									pos:  position{line: 290, col: 75, offset: 9935},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 290, col: 92, offset: 9952},
							val:        "]",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 290, col: 96, offset: 9956},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "QuoteAttribute",
			pos:  position{line: 294, col: 1, offset: 10044},
			expr: &actionExpr{
				pos: position{line: 294, col: 19, offset: 10062},
				run: (*parser).callonQuoteAttribute1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 294, col: 19, offset: 10062},
					expr: &choiceExpr{
						pos: position{line: 294, col: 20, offset: 10063},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 294, col: 20, offset: 10063},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 294, col: 32, offset: 10075},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 294, col: 42, offset: 10085},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 294, col: 42, offset: 10085},
										expr: &litMatcher{
											pos:        position{line: 294, col: 43, offset: 10086},
											val:        ",",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 294, col: 47, offset: 10090},
										expr: &litMatcher{
											pos:        position{line: 294, col: 48, offset: 10091},
											val:        "]",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 294, col: 52, offset: 10095},
										expr: &ruleRefExpr{
											pos:  position{line: 294, col: 53, offset: 10096},
											name: "EOL",
										},
									},
									&anyMatcher{
										line: 294, col: 57, offset: 10100,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineAttributes",
			pos:  position{line: 298, col: 1, offset: 10141},
			expr: &actionExpr{
				pos: position{line: 298, col: 21, offset: 10161},
				run: (*parser).callonInlineAttributes1,
				expr: &seqExpr{
					pos: position{line: 298, col: 21, offset: 10161},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 298, col: 21, offset: 10161},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 298, col: 25, offset: 10165},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 298, col: 31, offset: 10171},
								expr: &ruleRefExpr{
									pos:  position{line: 298, col: 32, offset: 10172},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 298, col: 51, offset: 10191},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Section",
			pos:  position{line: 305, col: 1, offset: 10365},
			expr: &actionExpr{
				pos: position{line: 305, col: 12, offset: 10376},
				run: (*parser).callonSection1,
				expr: &seqExpr{
					pos: position{line: 305, col: 12, offset: 10376},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 305, col: 12, offset: 10376},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 305, col: 23, offset: 10387},
								expr: &ruleRefExpr{
									pos:  position{line: 305, col: 24, offset: 10388},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 306, col: 5, offset: 10412},
							label: "level",
							expr: &actionExpr{
								pos: position{line: 306, col: 12, offset: 10419},
								run: (*parser).callonSection7,
								expr: &oneOrMoreExpr{
									pos: position{line: 306, col: 12, offset: 10419},
									expr: &litMatcher{
										pos:        position{line: 306, col: 13, offset: 10420},
										val:        "=",
										ignoreCase: false,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 310, col: 5, offset: 10511},
							run: (*parser).callonSection10,
						},
						&oneOrMoreExpr{
							pos: position{line: 314, col: 5, offset: 10663},
							expr: &ruleRefExpr{
								pos:  position{line: 314, col: 5, offset: 10663},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 314, col: 9, offset: 10667},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 314, col: 16, offset: 10674},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 314, col: 31, offset: 10689},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 314, col: 35, offset: 10693},
								expr: &ruleRefExpr{
									pos:  position{line: 314, col: 35, offset: 10693},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 314, col: 53, offset: 10711},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "TitleElements",
			pos:  position{line: 318, col: 1, offset: 10817},
			expr: &actionExpr{
				pos: position{line: 318, col: 18, offset: 10834},
				run: (*parser).callonTitleElements1,
				expr: &labeledExpr{
					pos:   position{line: 318, col: 18, offset: 10834},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 318, col: 27, offset: 10843},
						expr: &seqExpr{
							pos: position{line: 318, col: 28, offset: 10844},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 318, col: 28, offset: 10844},
									expr: &ruleRefExpr{
										pos:  position{line: 318, col: 29, offset: 10845},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 318, col: 37, offset: 10853},
									expr: &ruleRefExpr{
										pos:  position{line: 318, col: 38, offset: 10854},
										name: "InlineElementID",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 318, col: 54, offset: 10870},
									name: "TitleElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TitleElement",
			pos:  position{line: 322, col: 1, offset: 10991},
			expr: &actionExpr{
				pos: position{line: 322, col: 17, offset: 11007},
				run: (*parser).callonTitleElement1,
				expr: &labeledExpr{
					pos:   position{line: 322, col: 17, offset: 11007},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 322, col: 26, offset: 11016},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 322, col: 26, offset: 11016},
								name: "SimpleWord",
							},
							&ruleRefExpr{
								pos:  position{line: 323, col: 11, offset: 11037},
								name: "Spaces",
							},
							&ruleRefExpr{
								pos:  position{line: 324, col: 11, offset: 11055},
								name: "CrossReference",
							},
							&ruleRefExpr{
								pos:  position{line: 325, col: 11, offset: 11080},
								name: "Passthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 326, col: 11, offset: 11102},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 327, col: 11, offset: 11125},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 328, col: 11, offset: 11140},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 329, col: 11, offset: 11165},
								name: "QuotedText",
							},
							&ruleRefExpr{
								pos:  position{line: 330, col: 11, offset: 11186},
								name: "DocumentAttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 331, col: 11, offset: 11226},
								name: "LineBreak",
							},
							&ruleRefExpr{
								pos:  position{line: 332, col: 11, offset: 11246},
								name: "OtherWord",
							},
							&ruleRefExpr{
								pos:  position{line: 333, col: 11, offset: 11266},
								name: "Parenthesis",
							},
						},
					},
				},
			},
		},
		{
			name: "TableOfContentsPlaceHolder",
			pos:  position{line: 340, col: 1, offset: 11421},
			expr: &seqExpr{
				pos: position{line: 340, col: 31, offset: 11451},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 340, col: 31, offset: 11451},
						val:        "toc::[]",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 340, col: 41, offset: 11461},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "UserMacroBlock",
			pos:  position{line: 345, col: 1, offset: 11572},
			expr: &actionExpr{
				pos: position{line: 345, col: 19, offset: 11590},
				run: (*parser).callonUserMacroBlock1,
				expr: &seqExpr{
					pos: position{line: 345, col: 19, offset: 11590},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 345, col: 19, offset: 11590},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 345, col: 25, offset: 11596},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 345, col: 40, offset: 11611},
							val:        "::",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 345, col: 45, offset: 11616},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 345, col: 52, offset: 11623},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 345, col: 68, offset: 11639},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 345, col: 75, offset: 11646},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineUserMacro",
			pos:  position{line: 349, col: 1, offset: 11787},
			expr: &actionExpr{
				pos: position{line: 349, col: 20, offset: 11806},
				run: (*parser).callonInlineUserMacro1,
				expr: &seqExpr{
					pos: position{line: 349, col: 20, offset: 11806},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 349, col: 20, offset: 11806},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 349, col: 26, offset: 11812},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 349, col: 41, offset: 11827},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 349, col: 45, offset: 11831},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 349, col: 52, offset: 11838},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 349, col: 68, offset: 11854},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 349, col: 75, offset: 11861},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroName",
			pos:  position{line: 353, col: 1, offset: 12003},
			expr: &actionExpr{
				pos: position{line: 353, col: 18, offset: 12020},
				run: (*parser).callonUserMacroName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 353, col: 18, offset: 12020},
					expr: &choiceExpr{
						pos: position{line: 353, col: 19, offset: 12021},
						alternatives: []interface{}{
							&charClassMatcher{
								pos:        position{line: 353, col: 19, offset: 12021},
								val:        "[a-zA-Z0-9]",
								ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
							&litMatcher{
								pos:        position{line: 353, col: 33, offset: 12035},
								val:        "_",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 353, col: 39, offset: 12041},
								val:        "-",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroValue",
			pos:  position{line: 357, col: 1, offset: 12083},
			expr: &actionExpr{
				pos: position{line: 357, col: 19, offset: 12101},
				run: (*parser).callonUserMacroValue1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 357, col: 19, offset: 12101},
					expr: &choiceExpr{
						pos: position{line: 357, col: 20, offset: 12102},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 357, col: 20, offset: 12102},
								name: "Alphanums",
							},
							&seqExpr{
								pos: position{line: 357, col: 33, offset: 12115},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 357, col: 33, offset: 12115},
										expr: &ruleRefExpr{
											pos:  position{line: 357, col: 34, offset: 12116},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 357, col: 37, offset: 12119},
										expr: &litMatcher{
											pos:        position{line: 357, col: 38, offset: 12120},
											val:        ":",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 357, col: 42, offset: 12124},
										expr: &litMatcher{
											pos:        position{line: 357, col: 43, offset: 12125},
											val:        "[",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 357, col: 47, offset: 12129},
										expr: &ruleRefExpr{
											pos:  position{line: 357, col: 48, offset: 12130},
											name: "EOL",
										},
									},
									&anyMatcher{
										line: 357, col: 52, offset: 12134,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroAttributes",
			pos:  position{line: 361, col: 1, offset: 12175},
			expr: &actionExpr{
				pos: position{line: 361, col: 24, offset: 12198},
				run: (*parser).callonUserMacroAttributes1,
				expr: &seqExpr{
					pos: position{line: 361, col: 24, offset: 12198},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 361, col: 24, offset: 12198},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 361, col: 28, offset: 12202},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 361, col: 34, offset: 12208},
								expr: &ruleRefExpr{
									pos:  position{line: 361, col: 35, offset: 12209},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 361, col: 54, offset: 12228},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FileInclusion",
			pos:  position{line: 368, col: 1, offset: 12408},
			expr: &actionExpr{
				pos: position{line: 368, col: 18, offset: 12425},
				run: (*parser).callonFileInclusion1,
				expr: &seqExpr{
					pos: position{line: 368, col: 18, offset: 12425},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 368, col: 18, offset: 12425},
							label: "incl",
							expr: &actionExpr{
								pos: position{line: 368, col: 24, offset: 12431},
								run: (*parser).callonFileInclusion4,
								expr: &seqExpr{
									pos: position{line: 368, col: 24, offset: 12431},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 368, col: 24, offset: 12431},
											val:        "include::",
											ignoreCase: false,
										},
										&labeledExpr{
											pos:   position{line: 368, col: 36, offset: 12443},
											label: "path",
											expr: &ruleRefExpr{
												pos:  position{line: 368, col: 42, offset: 12449},
												name: "FileLocation",
											},
										},
										&labeledExpr{
											pos:   position{line: 368, col: 56, offset: 12463},
											label: "inlineAttributes",
											expr: &ruleRefExpr{
												pos:  position{line: 368, col: 74, offset: 12481},
												name: "FileIncludeAttributes",
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 370, col: 8, offset: 12635},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "FileIncludeAttributes",
			pos:  position{line: 374, col: 1, offset: 12688},
			expr: &actionExpr{
				pos: position{line: 374, col: 26, offset: 12713},
				run: (*parser).callonFileIncludeAttributes1,
				expr: &seqExpr{
					pos: position{line: 374, col: 26, offset: 12713},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 374, col: 26, offset: 12713},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 374, col: 30, offset: 12717},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 374, col: 36, offset: 12723},
								expr: &choiceExpr{
									pos: position{line: 374, col: 37, offset: 12724},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 374, col: 37, offset: 12724},
											name: "LineRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 374, col: 59, offset: 12746},
											name: "TagRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 374, col: 80, offset: 12767},
											name: "GenericAttribute",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 374, col: 99, offset: 12786},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttribute",
			pos:  position{line: 378, col: 1, offset: 12856},
			expr: &actionExpr{
				pos: position{line: 378, col: 24, offset: 12879},
				run: (*parser).callonLineRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 378, col: 24, offset: 12879},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 378, col: 24, offset: 12879},
							val:        "lines=",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 378, col: 33, offset: 12888},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 378, col: 40, offset: 12895},
								name: "LineRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 378, col: 66, offset: 12921},
							expr: &litMatcher{
								pos:        position{line: 378, col: 66, offset: 12921},
								val:        ",",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttributeValue",
			pos:  position{line: 382, col: 1, offset: 12980},
			expr: &actionExpr{
				pos: position{line: 382, col: 29, offset: 13008},
				run: (*parser).callonLineRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 382, col: 29, offset: 13008},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 382, col: 29, offset: 13008},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 382, col: 36, offset: 13015},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 382, col: 36, offset: 13015},
										name: "MultipleLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 383, col: 11, offset: 13132},
										name: "MultipleQuotedLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 384, col: 11, offset: 13168},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 385, col: 11, offset: 13194},
										name: "MultiLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 386, col: 11, offset: 13226},
										name: "SingleLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 387, col: 11, offset: 13258},
										name: "SingleLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 388, col: 11, offset: 13285},
										name: "UndefinedLineRange",
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 388, col: 31, offset: 13305},
							expr: &ruleRefExpr{
								pos:  position{line: 388, col: 31, offset: 13305},
								name: "WS",
							},
						},
						&choiceExpr{
							pos: position{line: 388, col: 36, offset: 13310},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 388, col: 36, offset: 13310},
									expr: &litMatcher{
										pos:        position{line: 388, col: 37, offset: 13311},
										val:        ",",
										ignoreCase: false,
									},
								},
								&andExpr{
									pos: position{line: 388, col: 43, offset: 13317},
									expr: &litMatcher{
										pos:        position{line: 388, col: 44, offset: 13318},
										val:        "]",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleLineRanges",
			pos:  position{line: 392, col: 1, offset: 13350},
			expr: &actionExpr{
				pos: position{line: 392, col: 23, offset: 13372},
				run: (*parser).callonMultipleLineRanges1,
				expr: &seqExpr{
					pos: position{line: 392, col: 23, offset: 13372},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 392, col: 23, offset: 13372},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 392, col: 30, offset: 13379},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 392, col: 30, offset: 13379},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 392, col: 47, offset: 13396},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 393, col: 5, offset: 13418},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 393, col: 12, offset: 13425},
								expr: &actionExpr{
									pos: position{line: 393, col: 13, offset: 13426},
									run: (*parser).callonMultipleLineRanges9,
									expr: &seqExpr{
										pos: position{line: 393, col: 13, offset: 13426},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 393, col: 13, offset: 13426},
												val:        ";",
												ignoreCase: false,
											},
											&labeledExpr{
												pos:   position{line: 393, col: 17, offset: 13430},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 393, col: 24, offset: 13437},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 393, col: 24, offset: 13437},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 393, col: 41, offset: 13454},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleQuotedLineRanges",
			pos:  position{line: 399, col: 1, offset: 13592},
			expr: &actionExpr{
				pos: position{line: 399, col: 29, offset: 13620},
				run: (*parser).callonMultipleQuotedLineRanges1,
				expr: &seqExpr{
					pos: position{line: 399, col: 29, offset: 13620},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 399, col: 29, offset: 13620},
							val:        "\"",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 399, col: 34, offset: 13625},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 399, col: 41, offset: 13632},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 399, col: 41, offset: 13632},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 399, col: 58, offset: 13649},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 400, col: 5, offset: 13671},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 400, col: 12, offset: 13678},
								expr: &actionExpr{
									pos: position{line: 400, col: 13, offset: 13679},
									run: (*parser).callonMultipleQuotedLineRanges10,
									expr: &seqExpr{
										pos: position{line: 400, col: 13, offset: 13679},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 400, col: 13, offset: 13679},
												val:        ",",
												ignoreCase: false,
											},
											&labeledExpr{
												pos:   position{line: 400, col: 17, offset: 13683},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 400, col: 24, offset: 13690},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 400, col: 24, offset: 13690},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 400, col: 41, offset: 13707},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 402, col: 9, offset: 13760},
							val:        "\"",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "MultiLineRange",
			pos:  position{line: 406, col: 1, offset: 13850},
			expr: &actionExpr{
				pos: position{line: 406, col: 19, offset: 13868},
				run: (*parser).callonMultiLineRange1,
				expr: &seqExpr{
					pos: position{line: 406, col: 19, offset: 13868},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 406, col: 19, offset: 13868},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 406, col: 26, offset: 13875},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 406, col: 34, offset: 13883},
							val:        "..",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 406, col: 39, offset: 13888},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 406, col: 44, offset: 13893},
								name: "NUMBER",
							},
						},
					},
				},
			},
		},
		{
			name: "MultiLineQuotedRange",
			pos:  position{line: 410, col: 1, offset: 13981},
			expr: &actionExpr{
				pos: position{line: 410, col: 25, offset: 14005},
				run: (*parser).callonMultiLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 410, col: 25, offset: 14005},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 410, col: 25, offset: 14005},
							val:        "\"",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 410, col: 30, offset: 14010},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 410, col: 37, offset: 14017},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 410, col: 45, offset: 14025},
							val:        "..",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 410, col: 50, offset: 14030},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 410, col: 55, offset: 14035},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 410, col: 63, offset: 14043},
							val:        "\"",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SingleLineRange",
			pos:  position{line: 414, col: 1, offset: 14128},
			expr: &actionExpr{
				pos: position{line: 414, col: 20, offset: 14147},
				run: (*parser).callonSingleLineRange1,
				expr: &labeledExpr{
					pos:   position{line: 414, col: 20, offset: 14147},
					label: "singleline",
					expr: &ruleRefExpr{
						pos:  position{line: 414, col: 32, offset: 14159},
						name: "NUMBER",
					},
				},
			},
		},
		{
			name: "SingleLineQuotedRange",
			pos:  position{line: 418, col: 1, offset: 14254},
			expr: &actionExpr{
				pos: position{line: 418, col: 26, offset: 14279},
				run: (*parser).callonSingleLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 418, col: 26, offset: 14279},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 418, col: 26, offset: 14279},
							val:        "\"",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 418, col: 31, offset: 14284},
							label: "singleline",
							expr: &ruleRefExpr{
								pos:  position{line: 418, col: 43, offset: 14296},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 418, col: 51, offset: 14304},
							val:        "\"",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "UndefinedLineRange",
			pos:  position{line: 422, col: 1, offset: 14396},
			expr: &actionExpr{
				pos: position{line: 422, col: 23, offset: 14418},
				run: (*parser).callonUndefinedLineRange1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 422, col: 23, offset: 14418},
					expr: &seqExpr{
						pos: position{line: 422, col: 24, offset: 14419},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 422, col: 24, offset: 14419},
								expr: &litMatcher{
									pos:        position{line: 422, col: 25, offset: 14420},
									val:        "]",
									ignoreCase: false,
								},
							},
							&notExpr{
								pos: position{line: 422, col: 29, offset: 14424},
								expr: &litMatcher{
									pos:        position{line: 422, col: 30, offset: 14425},
									val:        ",",
									ignoreCase: false,
								},
							},
							&notExpr{
								pos: position{line: 422, col: 34, offset: 14429},
								expr: &ruleRefExpr{
									pos:  position{line: 422, col: 35, offset: 14430},
									name: "WS",
								},
							},
							&anyMatcher{
								line: 422, col: 38, offset: 14433,
							},
						},
					},
				},
			},
		},
		{
			name: "TagRangesAttribute",
			pos:  position{line: 426, col: 1, offset: 14473},
			expr: &actionExpr{
				pos: position{line: 426, col: 23, offset: 14495},
				run: (*parser).callonTagRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 426, col: 23, offset: 14495},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 426, col: 24, offset: 14496},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 426, col: 24, offset: 14496},
									val:        "tags=",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 426, col: 34, offset: 14506},
									val:        "tag=",
									ignoreCase: false,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 426, col: 42, offset: 14514},
							label: "tags",
							expr: &ruleRefExpr{
								pos:  position{line: 426, col: 48, offset: 14520},
								name: "TagRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 426, col: 73, offset: 14545},
							expr: &litMatcher{
								pos:        position{line: 426, col: 73, offset: 14545},
								val:        ",",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "TagRangesAttributeValue",
			pos:  position{line: 430, col: 1, offset: 14694},
			expr: &actionExpr{
				pos: position{line: 430, col: 28, offset: 14721},
				run: (*parser).callonTagRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 430, col: 28, offset: 14721},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 430, col: 28, offset: 14721},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 430, col: 35, offset: 14728},
								name: "MultipleTagRanges",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 430, col: 54, offset: 14747},
							expr: &ruleRefExpr{
								pos:  position{line: 430, col: 54, offset: 14747},
								name: "WS",
							},
						},
						&choiceExpr{
							pos: position{line: 430, col: 59, offset: 14752},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 430, col: 59, offset: 14752},
									expr: &litMatcher{
										pos:        position{line: 430, col: 60, offset: 14753},
										val:        ",",
										ignoreCase: false,
									},
								},
								&andExpr{
									pos: position{line: 430, col: 66, offset: 14759},
									expr: &litMatcher{
										pos:        position{line: 430, col: 67, offset: 14760},
										val:        "]",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleTagRanges",
			pos:  position{line: 434, col: 1, offset: 14792},
			expr: &actionExpr{
				pos: position{line: 434, col: 22, offset: 14813},
				run: (*parser).callonMultipleTagRanges1,
				expr: &seqExpr{
					pos: position{line: 434, col: 22, offset: 14813},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 434, col: 22, offset: 14813},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 434, col: 29, offset: 14820},
								name: "TagRange",
							},
						},
						&labeledExpr{
							pos:   position{line: 435, col: 5, offset: 14834},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 435, col: 12, offset: 14841},
								expr: &actionExpr{
									pos: position{line: 435, col: 13, offset: 14842},
									run: (*parser).callonMultipleTagRanges7,
									expr: &seqExpr{
										pos: position{line: 435, col: 13, offset: 14842},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 435, col: 13, offset: 14842},
												val:        ";",
												ignoreCase: false,
											},
											&labeledExpr{
												pos:   position{line: 435, col: 17, offset: 14846},
												label: "other",
												expr: &ruleRefExpr{
													pos:  position{line: 435, col: 24, offset: 14853},
													name: "TagRange",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagRange",
			pos:  position{line: 441, col: 1, offset: 14984},
			expr: &choiceExpr{
				pos: position{line: 441, col: 13, offset: 14996},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 441, col: 13, offset: 14996},
						run: (*parser).callonTagRange2,
						expr: &labeledExpr{
							pos:   position{line: 441, col: 13, offset: 14996},
							label: "tag",
							expr: &choiceExpr{
								pos: position{line: 441, col: 18, offset: 15001},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 441, col: 18, offset: 15001},
										name: "Alphanums",
									},
									&ruleRefExpr{
										pos:  position{line: 441, col: 30, offset: 15013},
										name: "TagWildcard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 443, col: 5, offset: 15081},
						run: (*parser).callonTagRange7,
						expr: &seqExpr{
							pos: position{line: 443, col: 5, offset: 15081},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 443, col: 5, offset: 15081},
									val:        "!",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 443, col: 9, offset: 15085},
									label: "tag",
									expr: &choiceExpr{
										pos: position{line: 443, col: 14, offset: 15090},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 443, col: 14, offset: 15090},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 443, col: 26, offset: 15102},
												name: "TagWildcard",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagWildcard",
			pos:  position{line: 447, col: 1, offset: 15170},
			expr: &actionExpr{
				pos: position{line: 447, col: 16, offset: 15185},
				run: (*parser).callonTagWildcard1,
				expr: &seqExpr{
					pos: position{line: 447, col: 16, offset: 15185},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 447, col: 16, offset: 15185},
							label: "stars",
							expr: &actionExpr{
								pos: position{line: 447, col: 23, offset: 15192},
								run: (*parser).callonTagWildcard4,
								expr: &oneOrMoreExpr{
									pos: position{line: 447, col: 23, offset: 15192},
									expr: &litMatcher{
										pos:        position{line: 447, col: 24, offset: 15193},
										val:        "*",
										ignoreCase: false,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 450, col: 5, offset: 15247},
							run: (*parser).callonTagWildcard7,
						},
					},
				},
			},
		},
		{
			name: "IncludedFileLine",
			pos:  position{line: 460, col: 1, offset: 15541},
			expr: &actionExpr{
				pos: position{line: 460, col: 21, offset: 15561},
				run: (*parser).callonIncludedFileLine1,
				expr: &seqExpr{
					pos: position{line: 460, col: 21, offset: 15561},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 460, col: 21, offset: 15561},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 460, col: 29, offset: 15569},
								expr: &choiceExpr{
									pos: position{line: 460, col: 30, offset: 15570},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 460, col: 30, offset: 15570},
											name: "IncludedFileStartTag",
										},
										&ruleRefExpr{
											pos:  position{line: 460, col: 53, offset: 15593},
											name: "IncludedFileEndTag",
										},
										&actionExpr{
											pos: position{line: 460, col: 74, offset: 15614},
											run: (*parser).callonIncludedFileLine8,
											expr: &anyMatcher{
												line: 460, col: 74, offset: 15614,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 460, col: 107, offset: 15647},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileStartTag",
			pos:  position{line: 464, col: 1, offset: 15718},
			expr: &actionExpr{
				pos: position{line: 464, col: 25, offset: 15742},
				run: (*parser).callonIncludedFileStartTag1,
				expr: &seqExpr{
					pos: position{line: 464, col: 25, offset: 15742},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 464, col: 25, offset: 15742},
							val:        "tag::",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 464, col: 33, offset: 15750},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 464, col: 38, offset: 15755},
								run: (*parser).callonIncludedFileStartTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 464, col: 38, offset: 15755},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 464, col: 78, offset: 15795},
							val:        "[]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IncludedFileEndTag",
			pos:  position{line: 468, col: 1, offset: 15860},
			expr: &actionExpr{
				pos: position{line: 468, col: 23, offset: 15882},
				run: (*parser).callonIncludedFileEndTag1,
				expr: &seqExpr{
					pos: position{line: 468, col: 23, offset: 15882},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 468, col: 23, offset: 15882},
							val:        "end::",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 468, col: 31, offset: 15890},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 468, col: 36, offset: 15895},
								run: (*parser).callonIncludedFileEndTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 468, col: 36, offset: 15895},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 468, col: 76, offset: 15935},
							val:        "[]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "ListItems",
			pos:  position{line: 475, col: 1, offset: 16099},
			expr: &oneOrMoreExpr{
				pos: position{line: 475, col: 14, offset: 16112},
				expr: &ruleRefExpr{
					pos:  position{line: 475, col: 14, offset: 16112},
					name: "ListItem",
				},
			},
		},
		{
			name: "ListItem",
			pos:  position{line: 477, col: 1, offset: 16123},
			expr: &choiceExpr{
				pos: position{line: 477, col: 13, offset: 16135},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 477, col: 13, offset: 16135},
						name: "OrderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 477, col: 31, offset: 16153},
						name: "UnorderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 477, col: 51, offset: 16173},
						name: "LabeledListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 477, col: 69, offset: 16191},
						name: "ContinuedListItemElement",
					},
				},
			},
		},
		{
			name: "ListParagraph",
			pos:  position{line: 479, col: 1, offset: 16217},
			expr: &choiceExpr{
				pos: position{line: 479, col: 18, offset: 16234},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 479, col: 18, offset: 16234},
						run: (*parser).callonListParagraph2,
						expr: &labeledExpr{
							pos:   position{line: 479, col: 18, offset: 16234},
							label: "comment",
							expr: &ruleRefExpr{
								pos:  position{line: 479, col: 27, offset: 16243},
								name: "SingleLineComment",
							},
						},
					},
					&actionExpr{
						pos: position{line: 481, col: 9, offset: 16300},
						run: (*parser).callonListParagraph5,
						expr: &labeledExpr{
							pos:   position{line: 481, col: 9, offset: 16300},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 481, col: 15, offset: 16306},
								expr: &ruleRefExpr{
									pos:  position{line: 481, col: 16, offset: 16307},
									name: "ListParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListParagraphLine",
			pos:  position{line: 485, col: 1, offset: 16399},
			expr: &actionExpr{
				pos: position{line: 485, col: 22, offset: 16420},
				run: (*parser).callonListParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 485, col: 22, offset: 16420},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 485, col: 22, offset: 16420},
							expr: &ruleRefExpr{
								pos:  position{line: 485, col: 23, offset: 16421},
								name: "EOF",
							},
						},
						&notExpr{
							pos: position{line: 486, col: 5, offset: 16429},
							expr: &ruleRefExpr{
								pos:  position{line: 486, col: 6, offset: 16430},
								name: "BlankLine",
							},
						},
						&notExpr{
							pos: position{line: 487, col: 5, offset: 16445},
							expr: &ruleRefExpr{
								pos:  position{line: 487, col: 6, offset: 16446},
								name: "SingleLineComment",
							},
						},
						&notExpr{
							pos: position{line: 488, col: 5, offset: 16468},
							expr: &ruleRefExpr{
								pos:  position{line: 488, col: 6, offset: 16469},
								name: "OrderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 489, col: 5, offset: 16495},
							expr: &ruleRefExpr{
								pos:  position{line: 489, col: 6, offset: 16496},
								name: "UnorderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 490, col: 5, offset: 16524},
							expr: &seqExpr{
								pos: position{line: 490, col: 7, offset: 16526},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 490, col: 7, offset: 16526},
										name: "SimpleLabeledListItemTerm",
									},
									&ruleRefExpr{
										pos:  position{line: 490, col: 33, offset: 16552},
										name: "LabeledListItemSeparator",
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 491, col: 5, offset: 16583},
							expr: &ruleRefExpr{
								pos:  position{line: 491, col: 6, offset: 16584},
								name: "ListItemContinuation",
							},
						},
						&notExpr{
							pos: position{line: 492, col: 5, offset: 16609},
							expr: &ruleRefExpr{
								pos:  position{line: 492, col: 6, offset: 16610},
								name: "ElementAttribute",
							},
						},
						&notExpr{
							pos: position{line: 493, col: 5, offset: 16631},
							expr: &ruleRefExpr{
								pos:  position{line: 493, col: 6, offset: 16632},
								name: "BlockDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 494, col: 5, offset: 16651},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 495, col: 9, offset: 16666},
								run: (*parser).callonListParagraphLine24,
								expr: &seqExpr{
									pos: position{line: 495, col: 9, offset: 16666},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 495, col: 9, offset: 16666},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 495, col: 18, offset: 16675},
												expr: &ruleRefExpr{
													pos:  position{line: 495, col: 19, offset: 16676},
													name: "InlineElement",
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 495, col: 35, offset: 16692},
											label: "linebreak",
											expr: &zeroOrOneExpr{
												pos: position{line: 495, col: 45, offset: 16702},
												expr: &ruleRefExpr{
													pos:  position{line: 495, col: 46, offset: 16703},
													name: "LineBreak",
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 497, col: 12, offset: 16855},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ListItemContinuation",
			pos:  position{line: 501, col: 1, offset: 16902},
			expr: &seqExpr{
				pos: position{line: 501, col: 25, offset: 16926},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 501, col: 25, offset: 16926},
						val:        "+",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 501, col: 29, offset: 16930},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "ContinuedListItemElement",
			pos:  position{line: 503, col: 1, offset: 16937},
			expr: &actionExpr{
				pos: position{line: 503, col: 29, offset: 16965},
				run: (*parser).callonContinuedListItemElement1,
				expr: &seqExpr{
					pos: position{line: 503, col: 29, offset: 16965},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 503, col: 29, offset: 16965},
							label: "blanklines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 503, col: 41, offset: 16977},
								expr: &ruleRefExpr{
									pos:  position{line: 503, col: 41, offset: 16977},
									name: "BlankLine",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 503, col: 53, offset: 16989},
							name: "ListItemContinuation",
						},
						&labeledExpr{
							pos:   position{line: 503, col: 74, offset: 17010},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 503, col: 82, offset: 17018},
								name: "DocumentBlock",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItem",
			pos:  position{line: 510, col: 1, offset: 17260},
			expr: &actionExpr{
				pos: position{line: 510, col: 20, offset: 17279},
				run: (*parser).callonOrderedListItem1,
				expr: &seqExpr{
					pos: position{line: 510, col: 20, offset: 17279},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 510, col: 20, offset: 17279},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 510, col: 31, offset: 17290},
								expr: &ruleRefExpr{
									pos:  position{line: 510, col: 32, offset: 17291},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 510, col: 52, offset: 17311},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 510, col: 60, offset: 17319},
								name: "OrderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 510, col: 83, offset: 17342},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 510, col: 92, offset: 17351},
								name: "OrderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemPrefix",
			pos:  position{line: 514, col: 1, offset: 17491},
			expr: &actionExpr{
				pos: position{line: 515, col: 5, offset: 17521},
				run: (*parser).callonOrderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 515, col: 5, offset: 17521},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 515, col: 5, offset: 17521},
							expr: &ruleRefExpr{
								pos:  position{line: 515, col: 5, offset: 17521},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 515, col: 9, offset: 17525},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 517, col: 9, offset: 17588},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 517, col: 9, offset: 17588},
										run: (*parser).callonOrderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 517, col: 9, offset: 17588},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 517, col: 9, offset: 17588},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 517, col: 16, offset: 17595},
														run: (*parser).callonOrderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 517, col: 16, offset: 17595},
															expr: &litMatcher{
																pos:        position{line: 517, col: 17, offset: 17596},
																val:        ".",
																ignoreCase: false,
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 521, col: 9, offset: 17696},
													run: (*parser).callonOrderedListItemPrefix13,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 540, col: 11, offset: 18413},
										run: (*parser).callonOrderedListItemPrefix14,
										expr: &seqExpr{
											pos: position{line: 540, col: 11, offset: 18413},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 540, col: 11, offset: 18413},
													expr: &charClassMatcher{
														pos:        position{line: 540, col: 12, offset: 18414},
														val:        "[0-9]",
														ranges:     []rune{'0', '9'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 540, col: 20, offset: 18422},
													val:        ".",
													ignoreCase: false,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 542, col: 13, offset: 18533},
										run: (*parser).callonOrderedListItemPrefix19,
										expr: &seqExpr{
											pos: position{line: 542, col: 13, offset: 18533},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 542, col: 14, offset: 18534},
													val:        "[a-z]",
													ranges:     []rune{'a', 'z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 542, col: 21, offset: 18541},
													val:        ".",
													ignoreCase: false,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 544, col: 13, offset: 18655},
										run: (*parser).callonOrderedListItemPrefix23,
										expr: &seqExpr{
											pos: position{line: 544, col: 13, offset: 18655},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 544, col: 14, offset: 18656},
													val:        "[A-Z]",
													ranges:     []rune{'A', 'Z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 544, col: 21, offset: 18663},
													val:        ".",
													ignoreCase: false,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 546, col: 13, offset: 18777},
										run: (*parser).callonOrderedListItemPrefix27,
										expr: &seqExpr{
											pos: position{line: 546, col: 13, offset: 18777},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 546, col: 13, offset: 18777},
													expr: &charClassMatcher{
														pos:        position{line: 546, col: 14, offset: 18778},
														val:        "[a-z]",
														ranges:     []rune{'a', 'z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 546, col: 22, offset: 18786},
													val:        ")",
													ignoreCase: false,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 548, col: 13, offset: 18900},
										run: (*parser).callonOrderedListItemPrefix32,
										expr: &seqExpr{
											pos: position{line: 548, col: 13, offset: 18900},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 548, col: 13, offset: 18900},
													expr: &charClassMatcher{
														pos:        position{line: 548, col: 14, offset: 18901},
														val:        "[A-Z]",
														ranges:     []rune{'A', 'Z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 548, col: 22, offset: 18909},
													val:        ")",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 550, col: 12, offset: 19022},
							expr: &ruleRefExpr{
								pos:  position{line: 550, col: 12, offset: 19022},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemContent",
			pos:  position{line: 554, col: 1, offset: 19054},
			expr: &actionExpr{
				pos: position{line: 554, col: 27, offset: 19080},
				run: (*parser).callonOrderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 554, col: 27, offset: 19080},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 554, col: 37, offset: 19090},
						expr: &ruleRefExpr{
							pos:  position{line: 554, col: 37, offset: 19090},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItem",
			pos:  position{line: 561, col: 1, offset: 19290},
			expr: &actionExpr{
				pos: position{line: 561, col: 22, offset: 19311},
				run: (*parser).callonUnorderedListItem1,
				expr: &seqExpr{
					pos: position{line: 561, col: 22, offset: 19311},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 561, col: 22, offset: 19311},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 561, col: 33, offset: 19322},
								expr: &ruleRefExpr{
									pos:  position{line: 561, col: 34, offset: 19323},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 561, col: 54, offset: 19343},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 561, col: 62, offset: 19351},
								name: "UnorderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 561, col: 87, offset: 19376},
							label: "checkstyle",
							expr: &zeroOrOneExpr{
								pos: position{line: 561, col: 98, offset: 19387},
								expr: &ruleRefExpr{
									pos:  position{line: 561, col: 99, offset: 19388},
									name: "UnorderedListItemCheckStyle",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 561, col: 129, offset: 19418},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 561, col: 138, offset: 19427},
								name: "UnorderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemPrefix",
			pos:  position{line: 565, col: 1, offset: 19585},
			expr: &actionExpr{
				pos: position{line: 566, col: 5, offset: 19617},
				run: (*parser).callonUnorderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 566, col: 5, offset: 19617},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 566, col: 5, offset: 19617},
							expr: &ruleRefExpr{
								pos:  position{line: 566, col: 5, offset: 19617},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 566, col: 9, offset: 19621},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 566, col: 17, offset: 19629},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 568, col: 9, offset: 19686},
										run: (*parser).callonUnorderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 568, col: 9, offset: 19686},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 568, col: 9, offset: 19686},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 568, col: 16, offset: 19693},
														run: (*parser).callonUnorderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 568, col: 16, offset: 19693},
															expr: &litMatcher{
																pos:        position{line: 568, col: 17, offset: 19694},
																val:        "*",
																ignoreCase: false,
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 572, col: 9, offset: 19794},
													run: (*parser).callonUnorderedListItemPrefix13,
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 589, col: 14, offset: 20501},
										label: "depth",
										expr: &actionExpr{
											pos: position{line: 589, col: 21, offset: 20508},
											run: (*parser).callonUnorderedListItemPrefix15,
											expr: &litMatcher{
												pos:        position{line: 589, col: 22, offset: 20509},
												val:        "-",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 591, col: 13, offset: 20595},
							expr: &ruleRefExpr{
								pos:  position{line: 591, col: 13, offset: 20595},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemCheckStyle",
			pos:  position{line: 595, col: 1, offset: 20628},
			expr: &actionExpr{
				pos: position{line: 595, col: 32, offset: 20659},
				run: (*parser).callonUnorderedListItemCheckStyle1,
				expr: &seqExpr{
					pos: position{line: 595, col: 32, offset: 20659},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 595, col: 32, offset: 20659},
							expr: &litMatcher{
								pos:        position{line: 595, col: 33, offset: 20660},
								val:        "[",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 595, col: 37, offset: 20664},
							label: "style",
							expr: &choiceExpr{
								pos: position{line: 596, col: 7, offset: 20678},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 596, col: 7, offset: 20678},
										run: (*parser).callonUnorderedListItemCheckStyle7,
										expr: &litMatcher{
											pos:        position{line: 596, col: 7, offset: 20678},
											val:        "[ ]",
											ignoreCase: false,
										},
									},
									&actionExpr{
										pos: position{line: 597, col: 7, offset: 20723},
										run: (*parser).callonUnorderedListItemCheckStyle9,
										expr: &litMatcher{
											pos:        position{line: 597, col: 7, offset: 20723},
											val:        "[*]",
											ignoreCase: false,
										},
									},
									&actionExpr{
										pos: position{line: 598, col: 7, offset: 20766},
										run: (*parser).callonUnorderedListItemCheckStyle11,
										expr: &litMatcher{
											pos:        position{line: 598, col: 7, offset: 20766},
											val:        "[x]",
											ignoreCase: false,
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 599, col: 7, offset: 20808},
							expr: &ruleRefExpr{
								pos:  position{line: 599, col: 7, offset: 20808},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemContent",
			pos:  position{line: 603, col: 1, offset: 20847},
			expr: &actionExpr{
				pos: position{line: 603, col: 29, offset: 20875},
				run: (*parser).callonUnorderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 603, col: 29, offset: 20875},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 603, col: 39, offset: 20885},
						expr: &ruleRefExpr{
							pos:  position{line: 603, col: 39, offset: 20885},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "LabeledListItem",
			pos:  position{line: 610, col: 1, offset: 21201},
			expr: &actionExpr{
				pos: position{line: 610, col: 20, offset: 21220},
				run: (*parser).callonLabeledListItem1,
				expr: &seqExpr{
					pos: position{line: 610, col: 20, offset: 21220},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 610, col: 20, offset: 21220},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 610, col: 31, offset: 21231},
								expr: &ruleRefExpr{
									pos:  position{line: 610, col: 32, offset: 21232},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 610, col: 52, offset: 21252},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 610, col: 58, offset: 21258},
								name: "SimpleLabeledListItemTerm",
							},
						},
						&labeledExpr{
							pos:   position{line: 610, col: 85, offset: 21285},
							label: "separator",
							expr: &ruleRefExpr{
								pos:  position{line: 610, col: 96, offset: 21296},
								name: "LabeledListItemSeparator",
							},
						},
						&labeledExpr{
							pos:   position{line: 610, col: 122, offset: 21322},
							label: "description",
							expr: &zeroOrOneExpr{
								pos: position{line: 610, col: 134, offset: 21334},
								expr: &ruleRefExpr{
									pos:  position{line: 610, col: 135, offset: 21335},
									name: "LabeledListItemDescription",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SimpleLabeledListItemTerm",
			pos:  position{line: 614, col: 1, offset: 21481},
			expr: &actionExpr{
				pos: position{line: 614, col: 30, offset: 21510},
				run: (*parser).callonSimpleLabeledListItemTerm1,
				expr: &labeledExpr{
					pos:   position{line: 614, col: 30, offset: 21510},
					label: "content",
					expr: &actionExpr{
						pos: position{line: 614, col: 39, offset: 21519},
						run: (*parser).callonSimpleLabeledListItemTerm3,
						expr: &oneOrMoreExpr{
							pos: position{line: 614, col: 39, offset: 21519},
							expr: &choiceExpr{
								pos: position{line: 614, col: 40, offset: 21520},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 614, col: 40, offset: 21520},
										name: "Alphanums",
									},
									&ruleRefExpr{
										pos:  position{line: 614, col: 52, offset: 21532},
										name: "Spaces",
									},
									&seqExpr{
										pos: position{line: 614, col: 62, offset: 21542},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 614, col: 62, offset: 21542},
												expr: &ruleRefExpr{
													pos:  position{line: 614, col: 63, offset: 21543},
													name: "Newline",
												},
											},
											&notExpr{
												pos: position{line: 614, col: 71, offset: 21551},
												expr: &ruleRefExpr{
													pos:  position{line: 614, col: 72, offset: 21552},
													name: "LabeledListItemSeparator",
												},
											},
											&anyMatcher{
												line: 614, col: 97, offset: 21577,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTerm",
			pos:  position{line: 620, col: 1, offset: 21706},
			expr: &actionExpr{
				pos: position{line: 620, col: 24, offset: 21729},
				run: (*parser).callonLabeledListItemTerm1,
				expr: &labeledExpr{
					pos:   position{line: 620, col: 24, offset: 21729},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 620, col: 33, offset: 21738},
						expr: &seqExpr{
							pos: position{line: 620, col: 34, offset: 21739},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 620, col: 34, offset: 21739},
									expr: &ruleRefExpr{
										pos:  position{line: 620, col: 35, offset: 21740},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 620, col: 43, offset: 21748},
									expr: &ruleRefExpr{
										pos:  position{line: 620, col: 44, offset: 21749},
										name: "LabeledListItemSeparator",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 620, col: 69, offset: 21774},
									name: "LabeledListItemTermElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTermElement",
			pos:  position{line: 624, col: 1, offset: 21909},
			expr: &actionExpr{
				pos: position{line: 624, col: 31, offset: 21939},
				run: (*parser).callonLabeledListItemTermElement1,
				expr: &labeledExpr{
					pos:   position{line: 624, col: 31, offset: 21939},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 624, col: 40, offset: 21948},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 624, col: 40, offset: 21948},
								name: "SimpleWord",
							},
							&ruleRefExpr{
								pos:  position{line: 625, col: 11, offset: 21969},
								name: "Spaces",
							},
							&ruleRefExpr{
								pos:  position{line: 626, col: 11, offset: 21987},
								name: "CrossReference",
							},
							&ruleRefExpr{
								pos:  position{line: 627, col: 11, offset: 22012},
								name: "Passthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 628, col: 11, offset: 22034},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 629, col: 11, offset: 22057},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 630, col: 11, offset: 22072},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 631, col: 11, offset: 22097},
								name: "QuotedText",
							},
							&ruleRefExpr{
								pos:  position{line: 632, col: 11, offset: 22118},
								name: "DocumentAttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 633, col: 11, offset: 22158},
								name: "LineBreak",
							},
							&ruleRefExpr{
								pos:  position{line: 634, col: 11, offset: 22178},
								name: "OtherWord",
							},
							&ruleRefExpr{
								pos:  position{line: 635, col: 11, offset: 22198},
								name: "Parenthesis",
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemSeparator",
			pos:  position{line: 639, col: 1, offset: 22240},
			expr: &actionExpr{
				pos: position{line: 640, col: 5, offset: 22273},
				run: (*parser).callonLabeledListItemSeparator1,
				expr: &seqExpr{
					pos: position{line: 640, col: 5, offset: 22273},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 640, col: 5, offset: 22273},
							label: "separator",
							expr: &actionExpr{
								pos: position{line: 640, col: 16, offset: 22284},
								run: (*parser).callonLabeledListItemSeparator4,
								expr: &oneOrMoreExpr{
									pos: position{line: 640, col: 16, offset: 22284},
									expr: &litMatcher{
										pos:        position{line: 640, col: 17, offset: 22285},
										val:        ":",
										ignoreCase: false,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 643, col: 5, offset: 22343},
							run: (*parser).callonLabeledListItemSeparator7,
						},
						&choiceExpr{
							pos: position{line: 647, col: 6, offset: 22519},
							alternatives: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 647, col: 6, offset: 22519},
									expr: &choiceExpr{
										pos: position{line: 647, col: 7, offset: 22520},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 647, col: 7, offset: 22520},
												name: "WS",
											},
											&ruleRefExpr{
												pos:  position{line: 647, col: 12, offset: 22525},
												name: "Newline",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 647, col: 24, offset: 22537},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemDescription",
			pos:  position{line: 651, col: 1, offset: 22577},
			expr: &actionExpr{
				pos: position{line: 651, col: 31, offset: 22607},
				run: (*parser).callonLabeledListItemDescription1,
				expr: &labeledExpr{
					pos:   position{line: 651, col: 31, offset: 22607},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 651, col: 40, offset: 22616},
						expr: &ruleRefExpr{
							pos:  position{line: 651, col: 41, offset: 22617},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionKind",
			pos:  position{line: 658, col: 1, offset: 22808},
			expr: &choiceExpr{
				pos: position{line: 658, col: 19, offset: 22826},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 658, col: 19, offset: 22826},
						run: (*parser).callonAdmonitionKind2,
						expr: &litMatcher{
							pos:        position{line: 658, col: 19, offset: 22826},
							val:        "TIP",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 660, col: 9, offset: 22872},
						run: (*parser).callonAdmonitionKind4,
						expr: &litMatcher{
							pos:        position{line: 660, col: 9, offset: 22872},
							val:        "NOTE",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 662, col: 9, offset: 22920},
						run: (*parser).callonAdmonitionKind6,
						expr: &litMatcher{
							pos:        position{line: 662, col: 9, offset: 22920},
							val:        "IMPORTANT",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 664, col: 9, offset: 22978},
						run: (*parser).callonAdmonitionKind8,
						expr: &litMatcher{
							pos:        position{line: 664, col: 9, offset: 22978},
							val:        "WARNING",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 666, col: 9, offset: 23032},
						run: (*parser).callonAdmonitionKind10,
						expr: &litMatcher{
							pos:        position{line: 666, col: 9, offset: 23032},
							val:        "CAUTION",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Paragraph",
			pos:  position{line: 675, col: 1, offset: 23339},
			expr: &choiceExpr{
				pos: position{line: 677, col: 5, offset: 23386},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 677, col: 5, offset: 23386},
						run: (*parser).callonParagraph2,
						expr: &seqExpr{
							pos: position{line: 677, col: 5, offset: 23386},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 677, col: 5, offset: 23386},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 677, col: 16, offset: 23397},
										expr: &ruleRefExpr{
											pos:  position{line: 677, col: 17, offset: 23398},
											name: "ElementAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 677, col: 37, offset: 23418},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 677, col: 40, offset: 23421},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 677, col: 56, offset: 23437},
									val:        ": ",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 677, col: 61, offset: 23442},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 677, col: 67, offset: 23448},
										expr: &ruleRefExpr{
											pos:  position{line: 677, col: 68, offset: 23449},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 681, col: 5, offset: 23641},
						run: (*parser).callonParagraph13,
						expr: &seqExpr{
							pos: position{line: 681, col: 5, offset: 23641},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 681, col: 5, offset: 23641},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 681, col: 16, offset: 23652},
										expr: &ruleRefExpr{
											pos:  position{line: 681, col: 17, offset: 23653},
											name: "ElementAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 681, col: 37, offset: 23673},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 681, col: 43, offset: 23679},
										expr: &ruleRefExpr{
											pos:  position{line: 681, col: 44, offset: 23680},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SimpleParagraph",
			pos:  position{line: 686, col: 1, offset: 23845},
			expr: &actionExpr{
				pos: position{line: 686, col: 20, offset: 23864},
				run: (*parser).callonSimpleParagraph1,
				expr: &seqExpr{
					pos: position{line: 686, col: 20, offset: 23864},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 686, col: 20, offset: 23864},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 686, col: 31, offset: 23875},
								expr: &ruleRefExpr{
									pos:  position{line: 686, col: 32, offset: 23876},
									name: "ElementAttributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 687, col: 5, offset: 23901},
							run: (*parser).callonSimpleParagraph6,
						},
						&labeledExpr{
							pos:   position{line: 695, col: 5, offset: 24192},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 695, col: 16, offset: 24203},
								name: "FirstParagraphLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 696, col: 5, offset: 24226},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 696, col: 16, offset: 24237},
								expr: &ruleRefExpr{
									pos:  position{line: 696, col: 17, offset: 24238},
									name: "OtherParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphLines",
			pos:  position{line: 700, col: 1, offset: 24372},
			expr: &actionExpr{
				pos: position{line: 700, col: 19, offset: 24390},
				run: (*parser).callonParagraphLines1,
				expr: &seqExpr{
					pos: position{line: 700, col: 19, offset: 24390},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 700, col: 19, offset: 24390},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 700, col: 30, offset: 24401},
								name: "FirstParagraphLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 700, col: 50, offset: 24421},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 700, col: 61, offset: 24432},
								expr: &ruleRefExpr{
									pos:  position{line: 700, col: 62, offset: 24433},
									name: "OtherParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FirstParagraphLine",
			pos:  position{line: 704, col: 1, offset: 24539},
			expr: &actionExpr{
				pos: position{line: 704, col: 23, offset: 24561},
				run: (*parser).callonFirstParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 704, col: 23, offset: 24561},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 704, col: 23, offset: 24561},
							expr: &seqExpr{
								pos: position{line: 704, col: 25, offset: 24563},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 704, col: 25, offset: 24563},
										name: "SimpleLabeledListItemTerm",
									},
									&ruleRefExpr{
										pos:  position{line: 704, col: 51, offset: 24589},
										name: "LabeledListItemSeparator",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 705, col: 5, offset: 24619},
							label: "elements",
							expr: &seqExpr{
								pos: position{line: 705, col: 15, offset: 24629},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 705, col: 15, offset: 24629},
										name: "SimpleWord",
									},
									&zeroOrMoreExpr{
										pos: position{line: 705, col: 26, offset: 24640},
										expr: &ruleRefExpr{
											pos:  position{line: 705, col: 26, offset: 24640},
											name: "InlineElement",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 705, col: 42, offset: 24656},
							label: "linebreak",
							expr: &zeroOrOneExpr{
								pos: position{line: 705, col: 52, offset: 24666},
								expr: &ruleRefExpr{
									pos:  position{line: 705, col: 53, offset: 24667},
									name: "LineBreak",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 705, col: 65, offset: 24679},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "OtherParagraphLine",
			pos:  position{line: 709, col: 1, offset: 24769},
			expr: &actionExpr{
				pos: position{line: 709, col: 23, offset: 24791},
				run: (*parser).callonOtherParagraphLine1,
				expr: &labeledExpr{
					pos:   position{line: 709, col: 23, offset: 24791},
					label: "elements",
					expr: &ruleRefExpr{
						pos:  position{line: 709, col: 33, offset: 24801},
						name: "InlineElements",
					},
				},
			},
		},
		{
			name: "VerseParagraph",
			pos:  position{line: 713, col: 1, offset: 24847},
			expr: &choiceExpr{
				pos: position{line: 715, col: 5, offset: 24899},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 715, col: 5, offset: 24899},
						run: (*parser).callonVerseParagraph2,
						expr: &seqExpr{
							pos: position{line: 715, col: 5, offset: 24899},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 715, col: 5, offset: 24899},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 715, col: 16, offset: 24910},
										expr: &ruleRefExpr{
											pos:  position{line: 715, col: 17, offset: 24911},
											name: "ElementAttributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 716, col: 5, offset: 24935},
									run: (*parser).callonVerseParagraph7,
								},
								&labeledExpr{
									pos:   position{line: 723, col: 5, offset: 25147},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 723, col: 8, offset: 25150},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 723, col: 24, offset: 25166},
									val:        ": ",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 723, col: 29, offset: 25171},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 723, col: 35, offset: 25177},
										expr: &ruleRefExpr{
											pos:  position{line: 723, col: 36, offset: 25178},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 727, col: 5, offset: 25370},
						run: (*parser).callonVerseParagraph14,
						expr: &seqExpr{
							pos: position{line: 727, col: 5, offset: 25370},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 727, col: 5, offset: 25370},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 727, col: 16, offset: 25381},
										expr: &ruleRefExpr{
											pos:  position{line: 727, col: 17, offset: 25382},
											name: "ElementAttributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 728, col: 5, offset: 25406},
									run: (*parser).callonVerseParagraph19,
								},
								&labeledExpr{
									pos:   position{line: 735, col: 5, offset: 25618},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 735, col: 11, offset: 25624},
										expr: &ruleRefExpr{
											pos:  position{line: 735, col: 12, offset: 25625},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElements",
			pos:  position{line: 739, col: 1, offset: 25726},
			expr: &actionExpr{
				pos: position{line: 739, col: 19, offset: 25744},
				run: (*parser).callonInlineElements1,
				expr: &seqExpr{
					pos: position{line: 739, col: 19, offset: 25744},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 739, col: 19, offset: 25744},
							expr: &ruleRefExpr{
								pos:  position{line: 739, col: 20, offset: 25745},
								name: "EOF",
							},
						},
						&notExpr{
							pos: position{line: 739, col: 24, offset: 25749},
							expr: &ruleRefExpr{
								pos:  position{line: 739, col: 25, offset: 25750},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 740, col: 5, offset: 25764},
							label: "elements",
							expr: &choiceExpr{
								pos: position{line: 740, col: 15, offset: 25774},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 740, col: 15, offset: 25774},
										run: (*parser).callonInlineElements9,
										expr: &labeledExpr{
											pos:   position{line: 740, col: 15, offset: 25774},
											label: "comment",
											expr: &ruleRefExpr{
												pos:  position{line: 740, col: 24, offset: 25783},
												name: "SingleLineComment",
											},
										},
									},
									&actionExpr{
										pos: position{line: 742, col: 9, offset: 25875},
										run: (*parser).callonInlineElements12,
										expr: &seqExpr{
											pos: position{line: 742, col: 9, offset: 25875},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 742, col: 9, offset: 25875},
													expr: &ruleRefExpr{
														pos:  position{line: 742, col: 10, offset: 25876},
														name: "BlockDelimiter",
													},
												},
												&labeledExpr{
													pos:   position{line: 742, col: 25, offset: 25891},
													label: "elements",
													expr: &oneOrMoreExpr{
														pos: position{line: 742, col: 34, offset: 25900},
														expr: &ruleRefExpr{
															pos:  position{line: 742, col: 35, offset: 25901},
															name: "InlineElement",
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 742, col: 51, offset: 25917},
													label: "linebreak",
													expr: &zeroOrOneExpr{
														pos: position{line: 742, col: 61, offset: 25927},
														expr: &ruleRefExpr{
															pos:  position{line: 742, col: 62, offset: 25928},
															name: "LineBreak",
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 742, col: 74, offset: 25940},
													name: "EOL",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElement",
			pos:  position{line: 748, col: 1, offset: 26076},
			expr: &actionExpr{
				pos: position{line: 748, col: 18, offset: 26093},
				run: (*parser).callonInlineElement1,
				expr: &seqExpr{
					pos: position{line: 748, col: 18, offset: 26093},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 748, col: 18, offset: 26093},
							expr: &ruleRefExpr{
								pos:  position{line: 748, col: 19, offset: 26094},
								name: "EOL",
							},
						},
						&notExpr{
							pos: position{line: 748, col: 23, offset: 26098},
							expr: &ruleRefExpr{
								pos:  position{line: 748, col: 24, offset: 26099},
								name: "LineBreak",
							},
						},
						&labeledExpr{
							pos:   position{line: 749, col: 5, offset: 26114},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 749, col: 14, offset: 26123},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 749, col: 14, offset: 26123},
										name: "SimpleWord",
									},
									&ruleRefExpr{
										pos:  position{line: 750, col: 11, offset: 26144},
										name: "Spaces",
									},
									&ruleRefExpr{
										pos:  position{line: 751, col: 11, offset: 26162},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 752, col: 11, offset: 26185},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 753, col: 11, offset: 26201},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 754, col: 11, offset: 26224},
										name: "InlineFootnote",
									},
									&ruleRefExpr{
										pos:  position{line: 755, col: 11, offset: 26250},
										name: "QuotedText",
									},
									&ruleRefExpr{
										pos:  position{line: 756, col: 11, offset: 26272},
										name: "CrossReference",
									},
									&ruleRefExpr{
										pos:  position{line: 757, col: 11, offset: 26298},
										name: "InlineUserMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 758, col: 11, offset: 26325},
										name: "DocumentAttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 759, col: 11, offset: 26366},
										name: "InlineElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 760, col: 11, offset: 26393},
										name: "OtherWord",
									},
									&ruleRefExpr{
										pos:  position{line: 761, col: 11, offset: 26413},
										name: "ConceleadIndexTerm",
									},
									&ruleRefExpr{
										pos:  position{line: 762, col: 11, offset: 26442},
										name: "Parenthesis",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElementsWithoutSubtitution",
			pos:  position{line: 770, col: 1, offset: 26705},
			expr: &actionExpr{
				pos: position{line: 770, col: 37, offset: 26741},
				run: (*parser).callonInlineElementsWithoutSubtitution1,
				expr: &seqExpr{
					pos: position{line: 770, col: 37, offset: 26741},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 770, col: 37, offset: 26741},
							expr: &ruleRefExpr{
								pos:  position{line: 770, col: 38, offset: 26742},
								name: "BlankLine",
							},
						},
						&notExpr{
							pos: position{line: 770, col: 48, offset: 26752},
							expr: &ruleRefExpr{
								pos:  position{line: 770, col: 49, offset: 26753},
								name: "BlockDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 770, col: 64, offset: 26768},
							label: "elements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 770, col: 73, offset: 26777},
								expr: &ruleRefExpr{
									pos:  position{line: 770, col: 74, offset: 26778},
									name: "InlineElementWithoutSubtitution",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 770, col: 108, offset: 26812},
							label: "linebreak",
							expr: &zeroOrOneExpr{
								pos: position{line: 770, col: 118, offset: 26822},
								expr: &ruleRefExpr{
									pos:  position{line: 770, col: 119, offset: 26823},
									name: "LineBreak",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 770, col: 131, offset: 26835},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "InlineElementWithoutSubtitution",
			pos:  position{line: 774, col: 1, offset: 26926},
			expr: &actionExpr{
				pos: position{line: 774, col: 36, offset: 26961},
				run: (*parser).callonInlineElementWithoutSubtitution1,
				expr: &seqExpr{
					pos: position{line: 774, col: 36, offset: 26961},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 774, col: 36, offset: 26961},
							expr: &ruleRefExpr{
								pos:  position{line: 774, col: 37, offset: 26962},
								name: "EOL",
							},
						},
						&notExpr{
							pos: position{line: 774, col: 41, offset: 26966},
							expr: &ruleRefExpr{
								pos:  position{line: 774, col: 42, offset: 26967},
								name: "LineBreak",
							},
						},
						&labeledExpr{
							pos:   position{line: 775, col: 5, offset: 26982},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 775, col: 14, offset: 26991},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 775, col: 14, offset: 26991},
										name: "SimpleWord",
									},
									&ruleRefExpr{
										pos:  position{line: 776, col: 11, offset: 27012},
										name: "Spaces",
									},
									&ruleRefExpr{
										pos:  position{line: 777, col: 11, offset: 27030},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 778, col: 11, offset: 27053},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 779, col: 11, offset: 27069},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 780, col: 11, offset: 27092},
										name: "QuotedText",
									},
									&ruleRefExpr{
										pos:  position{line: 781, col: 11, offset: 27114},
										name: "CrossReference",
									},
									&ruleRefExpr{
										pos:  position{line: 782, col: 11, offset: 27140},
										name: "InlineElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 783, col: 11, offset: 27166},
										name: "OtherWord",
									},
									&ruleRefExpr{
										pos:  position{line: 784, col: 11, offset: 27186},
										name: "Parenthesis",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerbatimParagraph",
			pos:  position{line: 788, col: 1, offset: 27228},
			expr: &actionExpr{
				pos: position{line: 788, col: 22, offset: 27249},
				run: (*parser).callonVerbatimParagraph1,
				expr: &seqExpr{
					pos: position{line: 788, col: 22, offset: 27249},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 788, col: 22, offset: 27249},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 788, col: 33, offset: 27260},
								expr: &ruleRefExpr{
									pos:  position{line: 788, col: 34, offset: 27261},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 788, col: 54, offset: 27281},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 788, col: 60, offset: 27287},
								expr: &actionExpr{
									pos: position{line: 788, col: 61, offset: 27288},
									run: (*parser).callonVerbatimParagraph8,
									expr: &seqExpr{
										pos: position{line: 788, col: 61, offset: 27288},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 788, col: 61, offset: 27288},
												expr: &ruleRefExpr{
													pos:  position{line: 788, col: 62, offset: 27289},
													name: "EOF",
												},
											},
											&labeledExpr{
												pos:   position{line: 788, col: 66, offset: 27293},
												label: "line",
												expr: &ruleRefExpr{
													pos:  position{line: 788, col: 72, offset: 27299},
													name: "VerbatimParagraphLine",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerbatimParagraphLine",
			pos:  position{line: 794, col: 1, offset: 27419},
			expr: &actionExpr{
				pos: position{line: 794, col: 26, offset: 27444},
				run: (*parser).callonVerbatimParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 794, col: 26, offset: 27444},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 794, col: 26, offset: 27444},
							expr: &ruleRefExpr{
								pos:  position{line: 794, col: 27, offset: 27445},
								name: "BlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 794, col: 42, offset: 27460},
							expr: &ruleRefExpr{
								pos:  position{line: 794, col: 43, offset: 27461},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 794, col: 53, offset: 27471},
							label: "elements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 794, col: 62, offset: 27480},
								expr: &ruleRefExpr{
									pos:  position{line: 794, col: 63, offset: 27481},
									name: "VerbatimParagraphLineElement",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 794, col: 94, offset: 27512},
							label: "linebreak",
							expr: &zeroOrOneExpr{
								pos: position{line: 794, col: 104, offset: 27522},
								expr: &ruleRefExpr{
									pos:  position{line: 794, col: 105, offset: 27523},
									name: "LineBreak",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 794, col: 117, offset: 27535},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "VerbatimParagraphLineElement",
			pos:  position{line: 798, col: 1, offset: 27626},
			expr: &actionExpr{
				pos: position{line: 798, col: 33, offset: 27658},
				run: (*parser).callonVerbatimParagraphLineElement1,
				expr: &oneOrMoreExpr{
					pos: position{line: 798, col: 33, offset: 27658},
					expr: &seqExpr{
						pos: position{line: 798, col: 34, offset: 27659},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 798, col: 34, offset: 27659},
								expr: &ruleRefExpr{
									pos:  position{line: 798, col: 35, offset: 27660},
									name: "EOL",
								},
							},
							&notExpr{
								pos: position{line: 798, col: 39, offset: 27664},
								expr: &ruleRefExpr{
									pos:  position{line: 798, col: 40, offset: 27665},
									name: "LineBreak",
								},
							},
							&anyMatcher{
								line: 798, col: 50, offset: 27675,
							},
						},
					},
				},
			},
		},
		{
			name: "LineBreak",
			pos:  position{line: 805, col: 1, offset: 27899},
			expr: &actionExpr{
				pos: position{line: 805, col: 14, offset: 27912},
				run: (*parser).callonLineBreak1,
				expr: &seqExpr{
					pos: position{line: 805, col: 14, offset: 27912},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 805, col: 14, offset: 27912},
							name: "WS",
						},
						&litMatcher{
							pos:        position{line: 805, col: 17, offset: 27915},
							val:        "+",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 805, col: 21, offset: 27919},
							expr: &ruleRefExpr{
								pos:  position{line: 805, col: 21, offset: 27919},
								name: "WS",
							},
						},
						&andExpr{
							pos: position{line: 805, col: 25, offset: 27923},
							expr: &ruleRefExpr{
								pos:  position{line: 805, col: 26, offset: 27924},
								name: "EOL",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedText",
			pos:  position{line: 812, col: 1, offset: 28208},
			expr: &actionExpr{
				pos: position{line: 812, col: 15, offset: 28222},
				run: (*parser).callonQuotedText1,
				expr: &seqExpr{
					pos: position{line: 812, col: 15, offset: 28222},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 812, col: 15, offset: 28222},
							expr: &ruleRefExpr{
								pos:  position{line: 812, col: 16, offset: 28223},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 812, col: 19, offset: 28226},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 812, col: 25, offset: 28232},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 812, col: 25, offset: 28232},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 813, col: 15, offset: 28256},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 814, col: 15, offset: 28282},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 815, col: 15, offset: 28311},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 816, col: 15, offset: 28340},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 817, col: 15, offset: 28371},
										name: "EscapedBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 818, col: 15, offset: 28402},
										name: "EscapedItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 819, col: 15, offset: 28435},
										name: "EscapedMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 820, col: 15, offset: 28471},
										name: "EscapedSubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 821, col: 15, offset: 28507},
										name: "EscapedSuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 822, col: 15, offset: 28544},
										name: "SubscriptOrSuperscriptPrefix",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextPrefix",
			pos:  position{line: 826, col: 1, offset: 28698},
			expr: &choiceExpr{
				pos: position{line: 826, col: 21, offset: 28718},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 826, col: 21, offset: 28718},
						val:        "**",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 826, col: 28, offset: 28725},
						val:        "*",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 826, col: 34, offset: 28731},
						val:        "__",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 826, col: 41, offset: 28738},
						val:        "_",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 826, col: 47, offset: 28744},
						val:        "``",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 826, col: 54, offset: 28751},
						val:        "`",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 826, col: 60, offset: 28757},
						val:        "^",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 826, col: 66, offset: 28763},
						val:        "~",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "SubscriptOrSuperscriptPrefix",
			pos:  position{line: 828, col: 1, offset: 28768},
			expr: &choiceExpr{
				pos: position{line: 828, col: 33, offset: 28800},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 828, col: 33, offset: 28800},
						val:        "^",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 828, col: 39, offset: 28806},
						run: (*parser).callonSubscriptOrSuperscriptPrefix3,
						expr: &litMatcher{
							pos:        position{line: 828, col: 39, offset: 28806},
							val:        "~",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "OneOrMoreBackslashes",
			pos:  position{line: 832, col: 1, offset: 28939},
			expr: &actionExpr{
				pos: position{line: 832, col: 25, offset: 28963},
				run: (*parser).callonOneOrMoreBackslashes1,
				expr: &oneOrMoreExpr{
					pos: position{line: 832, col: 25, offset: 28963},
					expr: &litMatcher{
						pos:        position{line: 832, col: 25, offset: 28963},
						val:        "\\",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "TwoOrMoreBackslashes",
			pos:  position{line: 836, col: 1, offset: 29004},
			expr: &actionExpr{
				pos: position{line: 836, col: 25, offset: 29028},
				run: (*parser).callonTwoOrMoreBackslashes1,
				expr: &seqExpr{
					pos: position{line: 836, col: 25, offset: 29028},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 836, col: 25, offset: 29028},
							val:        "\\\\",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 836, col: 30, offset: 29033},
							expr: &litMatcher{
								pos:        position{line: 836, col: 30, offset: 29033},
								val:        "\\",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "BoldText",
			pos:  position{line: 844, col: 1, offset: 29130},
			expr: &choiceExpr{
				pos: position{line: 844, col: 13, offset: 29142},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 844, col: 13, offset: 29142},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 844, col: 35, offset: 29164},
						name: "SingleQuoteBoldText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldText",
			pos:  position{line: 846, col: 1, offset: 29185},
			expr: &actionExpr{
				pos: position{line: 846, col: 24, offset: 29208},
				run: (*parser).callonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 846, col: 24, offset: 29208},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 846, col: 24, offset: 29208},
							expr: &litMatcher{
								pos:        position{line: 846, col: 25, offset: 29209},
								val:        "\\\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 846, col: 30, offset: 29214},
							val:        "**",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 846, col: 35, offset: 29219},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 846, col: 45, offset: 29229},
								name: "DoubleQuoteBoldTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 846, col: 74, offset: 29258},
							val:        "**",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElements",
			pos:  position{line: 850, col: 1, offset: 29384},
			expr: &seqExpr{
				pos: position{line: 850, col: 32, offset: 29415},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 850, col: 32, offset: 29415},
						name: "DoubleQuoteBoldTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 850, col: 59, offset: 29442},
						expr: &seqExpr{
							pos: position{line: 850, col: 60, offset: 29443},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 850, col: 60, offset: 29443},
									expr: &litMatcher{
										pos:        position{line: 850, col: 62, offset: 29445},
										val:        "**",
										ignoreCase: false,
									},
								},
								&choiceExpr{
									pos: position{line: 850, col: 69, offset: 29452},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 850, col: 69, offset: 29452},
											name: "WS",
										},
										&ruleRefExpr{
											pos:  position{line: 850, col: 74, offset: 29457},
											name: "DoubleQuoteBoldTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElement",
			pos:  position{line: 852, col: 1, offset: 29522},
			expr: &actionExpr{
				pos: position{line: 852, col: 31, offset: 29552},
				run: (*parser).callonDoubleQuoteBoldTextElement1,
				expr: &seqExpr{
					pos: position{line: 852, col: 31, offset: 29552},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 852, col: 31, offset: 29552},
							expr: &ruleRefExpr{
								pos:  position{line: 852, col: 32, offset: 29553},
								name: "Newline",
							},
						},
						&labeledExpr{
							pos:   position{line: 852, col: 40, offset: 29561},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 852, col: 49, offset: 29570},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 852, col: 49, offset: 29570},
										name: "SingleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 853, col: 11, offset: 29601},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 854, col: 11, offset: 29623},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 855, col: 11, offset: 29647},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 856, col: 11, offset: 29671},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 857, col: 11, offset: 29697},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 858, col: 11, offset: 29720},
										name: "QuotedLink",
									},
									&ruleRefExpr{
										pos:  position{line: 859, col: 11, offset: 29742},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 860, col: 11, offset: 29765},
										name: "DocumentAttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 861, col: 11, offset: 29805},
										name: "NonDoubleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 862, col: 11, offset: 29838},
										name: "Parenthesis",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonDoubleQuoteBoldText",
			pos:  position{line: 866, col: 1, offset: 29983},
			expr: &actionExpr{
				pos: position{line: 866, col: 27, offset: 30009},
				run: (*parser).callonNonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 866, col: 27, offset: 30009},
					exprs: []interface{}{
						&anyMatcher{
							line: 866, col: 28, offset: 30010,
						},
						&zeroOrMoreExpr{
							pos: position{line: 866, col: 31, offset: 30013},
							expr: &seqExpr{
								pos: position{line: 866, col: 32, offset: 30014},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 866, col: 32, offset: 30014},
										expr: &litMatcher{
											pos:        position{line: 866, col: 33, offset: 30015},
											val:        "**",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 866, col: 38, offset: 30020},
										expr: &ruleRefExpr{
											pos:  position{line: 866, col: 39, offset: 30021},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 866, col: 42, offset: 30024},
										expr: &litMatcher{
											pos:        position{line: 866, col: 43, offset: 30025},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 866, col: 47, offset: 30029},
										expr: &litMatcher{
											pos:        position{line: 866, col: 48, offset: 30030},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 866, col: 52, offset: 30034},
										expr: &ruleRefExpr{
											pos:  position{line: 866, col: 53, offset: 30035},
											name: "Newline",
										},
									},
									&notExpr{
										pos: position{line: 866, col: 61, offset: 30043},
										expr: &ruleRefExpr{
											pos:  position{line: 866, col: 62, offset: 30044},
											name: "Parenthesis",
										},
									},
									&anyMatcher{
										line: 866, col: 74, offset: 30056,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldText",
			pos:  position{line: 870, col: 1, offset: 30116},
			expr: &choiceExpr{
				pos: position{line: 870, col: 24, offset: 30139},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 870, col: 24, offset: 30139},
						run: (*parser).callonSingleQuoteBoldText2,
						expr: &seqExpr{
							pos: position{line: 870, col: 24, offset: 30139},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 870, col: 24, offset: 30139},
									expr: &litMatcher{
										pos:        position{line: 870, col: 25, offset: 30140},
										val:        "\\",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 870, col: 29, offset: 30144},
									val:        "*",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 870, col: 33, offset: 30148},
									expr: &litMatcher{
										pos:        position{line: 870, col: 34, offset: 30149},
										val:        "*",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 870, col: 38, offset: 30153},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 870, col: 48, offset: 30163},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 870, col: 77, offset: 30192},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 872, col: 5, offset: 30373},
						run: (*parser).callonSingleQuoteBoldText12,
						expr: &seqExpr{
							pos: position{line: 872, col: 5, offset: 30373},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 872, col: 5, offset: 30373},
									expr: &litMatcher{
										pos:        position{line: 872, col: 6, offset: 30374},
										val:        "\\\\",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 872, col: 11, offset: 30379},
									val:        "*",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 872, col: 15, offset: 30383},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 872, col: 25, offset: 30393},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 872, col: 25, offset: 30393},
												val:        "*",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 872, col: 29, offset: 30397},
												name: "SingleQuoteBoldTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 872, col: 58, offset: 30426},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElements",
			pos:  position{line: 876, col: 1, offset: 30625},
			expr: &seqExpr{
				pos: position{line: 876, col: 32, offset: 30656},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 876, col: 32, offset: 30656},
						expr: &ruleRefExpr{
							pos:  position{line: 876, col: 33, offset: 30657},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 876, col: 36, offset: 30660},
						name: "SingleQuoteBoldTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 876, col: 63, offset: 30687},
						expr: &seqExpr{
							pos: position{line: 876, col: 64, offset: 30688},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 876, col: 64, offset: 30688},
									expr: &seqExpr{
										pos: position{line: 876, col: 66, offset: 30690},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 876, col: 66, offset: 30690},
												val:        "*",
												ignoreCase: false,
											},
											&notExpr{
												pos: position{line: 876, col: 70, offset: 30694},
												expr: &ruleRefExpr{
													pos:  position{line: 876, col: 71, offset: 30695},
													name: "Alphanum",
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 876, col: 81, offset: 30705},
									expr: &ruleRefExpr{
										pos:  position{line: 876, col: 81, offset: 30705},
										name: "WS",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 876, col: 85, offset: 30709},
									name: "SingleQuoteBoldTextElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElement",
			pos:  position{line: 878, col: 1, offset: 30740},
			expr: &actionExpr{
				pos: position{line: 878, col: 31, offset: 30770},
				run: (*parser).callonSingleQuoteBoldTextElement1,
				expr: &seqExpr{
					pos: position{line: 878, col: 31, offset: 30770},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 878, col: 31, offset: 30770},
							expr: &ruleRefExpr{
								pos:  position{line: 878, col: 32, offset: 30771},
								name: "Newline",
							},
						},
						&labeledExpr{
							pos:   position{line: 878, col: 40, offset: 30779},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 878, col: 49, offset: 30788},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 878, col: 49, offset: 30788},
										name: "DoubleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 879, col: 11, offset: 30818},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 880, col: 11, offset: 30840},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 881, col: 11, offset: 30864},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 882, col: 11, offset: 30888},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 883, col: 11, offset: 30914},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 884, col: 11, offset: 30937},
										name: "QuotedLink",
									},
									&ruleRefExpr{
										pos:  position{line: 885, col: 11, offset: 30959},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 886, col: 11, offset: 30982},
										name: "DocumentAttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 887, col: 11, offset: 31022},
										name: "NonSingleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 888, col: 11, offset: 31055},
										name: "Parenthesis",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonSingleQuoteBoldText",
			pos:  position{line: 892, col: 1, offset: 31200},
			expr: &actionExpr{
				pos: position{line: 892, col: 27, offset: 31226},
				run: (*parser).callonNonSingleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 892, col: 27, offset: 31226},
					exprs: []interface{}{
						&anyMatcher{
							line: 892, col: 28, offset: 31227,
						},
						&zeroOrMoreExpr{
							pos: position{line: 892, col: 31, offset: 31230},
							expr: &seqExpr{
								pos: position{line: 892, col: 32, offset: 31231},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 892, col: 32, offset: 31231},
										expr: &litMatcher{
											pos:        position{line: 892, col: 33, offset: 31232},
											val:        "*",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 892, col: 37, offset: 31236},
										expr: &ruleRefExpr{
											pos:  position{line: 892, col: 38, offset: 31237},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 892, col: 41, offset: 31240},
										expr: &litMatcher{
											pos:        position{line: 892, col: 42, offset: 31241},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 892, col: 46, offset: 31245},
										expr: &litMatcher{
											pos:        position{line: 892, col: 47, offset: 31246},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 892, col: 51, offset: 31250},
										expr: &ruleRefExpr{
											pos:  position{line: 892, col: 52, offset: 31251},
											name: "Newline",
										},
									},
									&notExpr{
										pos: position{line: 892, col: 60, offset: 31259},
										expr: &ruleRefExpr{
											pos:  position{line: 892, col: 61, offset: 31260},
											name: "Parenthesis",
										},
									},
									&anyMatcher{
										line: 892, col: 73, offset: 31272,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedBoldText",
			pos:  position{line: 896, col: 1, offset: 31332},
			expr: &choiceExpr{
				pos: position{line: 897, col: 5, offset: 31356},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 897, col: 5, offset: 31356},
						run: (*parser).callonEscapedBoldText2,
						expr: &seqExpr{
							pos: position{line: 897, col: 5, offset: 31356},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 897, col: 5, offset: 31356},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 897, col: 18, offset: 31369},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 897, col: 40, offset: 31391},
									val:        "**",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 897, col: 45, offset: 31396},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 897, col: 55, offset: 31406},
										name: "DoubleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 897, col: 84, offset: 31435},
									val:        "**",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 899, col: 9, offset: 31592},
						run: (*parser).callonEscapedBoldText10,
						expr: &seqExpr{
							pos: position{line: 899, col: 9, offset: 31592},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 899, col: 9, offset: 31592},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 899, col: 22, offset: 31605},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 899, col: 44, offset: 31627},
									val:        "**",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 899, col: 49, offset: 31632},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 899, col: 59, offset: 31642},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 899, col: 88, offset: 31671},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 902, col: 9, offset: 31871},
						run: (*parser).callonEscapedBoldText18,
						expr: &seqExpr{
							pos: position{line: 902, col: 9, offset: 31871},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 902, col: 9, offset: 31871},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 902, col: 22, offset: 31884},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 902, col: 44, offset: 31906},
									val:        "*",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 902, col: 48, offset: 31910},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 902, col: 58, offset: 31920},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 902, col: 87, offset: 31949},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ItalicText",
			pos:  position{line: 910, col: 1, offset: 32157},
			expr: &choiceExpr{
				pos: position{line: 910, col: 15, offset: 32171},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 910, col: 15, offset: 32171},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 910, col: 39, offset: 32195},
						name: "SingleQuoteItalicText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicText",
			pos:  position{line: 912, col: 1, offset: 32218},
			expr: &actionExpr{
				pos: position{line: 912, col: 26, offset: 32243},
				run: (*parser).callonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 912, col: 26, offset: 32243},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 912, col: 26, offset: 32243},
							expr: &litMatcher{
								pos:        position{line: 912, col: 27, offset: 32244},
								val:        "\\\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 912, col: 32, offset: 32249},
							val:        "__",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 912, col: 37, offset: 32254},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 912, col: 47, offset: 32264},
								name: "DoubleQuoteItalicTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 912, col: 78, offset: 32295},
							val:        "__",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElements",
			pos:  position{line: 916, col: 1, offset: 32422},
			expr: &seqExpr{
				pos: position{line: 916, col: 34, offset: 32455},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 916, col: 34, offset: 32455},
						name: "DoubleQuoteItalicTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 916, col: 63, offset: 32484},
						expr: &seqExpr{
							pos: position{line: 916, col: 64, offset: 32485},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 916, col: 64, offset: 32485},
									expr: &litMatcher{
										pos:        position{line: 916, col: 66, offset: 32487},
										val:        "__",
										ignoreCase: false,
									},
								},
								&choiceExpr{
									pos: position{line: 916, col: 73, offset: 32494},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 916, col: 73, offset: 32494},
											name: "WS",
										},
										&ruleRefExpr{
											pos:  position{line: 916, col: 78, offset: 32499},
											name: "DoubleQuoteItalicTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElement",
			pos:  position{line: 918, col: 1, offset: 32566},
			expr: &actionExpr{
				pos: position{line: 918, col: 33, offset: 32598},
				run: (*parser).callonDoubleQuoteItalicTextElement1,
				expr: &seqExpr{
					pos: position{line: 918, col: 33, offset: 32598},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 918, col: 33, offset: 32598},
							expr: &ruleRefExpr{
								pos:  position{line: 918, col: 34, offset: 32599},
								name: "Newline",
							},
						},
						&labeledExpr{
							pos:   position{line: 918, col: 42, offset: 32607},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 918, col: 51, offset: 32616},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 918, col: 51, offset: 32616},
										name: "SingleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 919, col: 11, offset: 32649},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 920, col: 11, offset: 32669},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 921, col: 11, offset: 32693},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 922, col: 11, offset: 32717},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 923, col: 11, offset: 32743},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 924, col: 11, offset: 32766},
										name: "QuotedLink",
									},
									&ruleRefExpr{
										pos:  position{line: 925, col: 11, offset: 32788},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 926, col: 11, offset: 32811},
										name: "NonDoubleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 927, col: 11, offset: 32846},
										name: "Parenthesis",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonDoubleQuoteItalicText",
			pos:  position{line: 931, col: 1, offset: 32991},
			expr: &actionExpr{
				pos: position{line: 931, col: 29, offset: 33019},
				run: (*parser).callonNonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 931, col: 29, offset: 33019},
					exprs: []interface{}{
						&anyMatcher{
							line: 931, col: 30, offset: 33020,
						},
						&zeroOrMoreExpr{
							pos: position{line: 931, col: 33, offset: 33023},
							expr: &seqExpr{
								pos: position{line: 931, col: 34, offset: 33024},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 931, col: 34, offset: 33024},
										expr: &litMatcher{
											pos:        position{line: 931, col: 35, offset: 33025},
											val:        "__",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 931, col: 40, offset: 33030},
										expr: &litMatcher{
											pos:        position{line: 931, col: 41, offset: 33031},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 931, col: 45, offset: 33035},
										expr: &litMatcher{
											pos:        position{line: 931, col: 46, offset: 33036},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 931, col: 50, offset: 33040},
										expr: &ruleRefExpr{
											pos:  position{line: 931, col: 51, offset: 33041},
											name: "Newline",
										},
									},
									&notExpr{
										pos: position{line: 931, col: 59, offset: 33049},
										expr: &ruleRefExpr{
											pos:  position{line: 931, col: 60, offset: 33050},
											name: "Parenthesis",
										},
									},
									&anyMatcher{
										line: 931, col: 72, offset: 33062,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicText",
			pos:  position{line: 935, col: 1, offset: 33122},
			expr: &choiceExpr{
				pos: position{line: 935, col: 26, offset: 33147},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 935, col: 26, offset: 33147},
						run: (*parser).callonSingleQuoteItalicText2,
						expr: &seqExpr{
							pos: position{line: 935, col: 26, offset: 33147},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 935, col: 26, offset: 33147},
									expr: &litMatcher{
										pos:        position{line: 935, col: 27, offset: 33148},
										val:        "\\",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 935, col: 31, offset: 33152},
									val:        "_",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 935, col: 35, offset: 33156},
									expr: &litMatcher{
										pos:        position{line: 935, col: 36, offset: 33157},
										val:        "_",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 935, col: 40, offset: 33161},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 935, col: 50, offset: 33171},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 935, col: 81, offset: 33202},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 937, col: 5, offset: 33385},
						run: (*parser).callonSingleQuoteItalicText12,
						expr: &seqExpr{
							pos: position{line: 937, col: 5, offset: 33385},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 937, col: 5, offset: 33385},
									expr: &litMatcher{
										pos:        position{line: 937, col: 6, offset: 33386},
										val:        "\\\\",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 937, col: 11, offset: 33391},
									val:        "_",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 937, col: 15, offset: 33395},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 937, col: 25, offset: 33405},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 937, col: 25, offset: 33405},
												val:        "_",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 937, col: 29, offset: 33409},
												name: "SingleQuoteItalicTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 937, col: 60, offset: 33440},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElements",
			pos:  position{line: 941, col: 1, offset: 33643},
			expr: &seqExpr{
				pos: position{line: 941, col: 34, offset: 33676},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 941, col: 34, offset: 33676},
						expr: &ruleRefExpr{
							pos:  position{line: 941, col: 35, offset: 33677},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 941, col: 38, offset: 33680},
						name: "SingleQuoteItalicTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 941, col: 67, offset: 33709},
						expr: &seqExpr{
							pos: position{line: 941, col: 68, offset: 33710},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 941, col: 68, offset: 33710},
									expr: &seqExpr{
										pos: position{line: 941, col: 70, offset: 33712},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 941, col: 70, offset: 33712},
												val:        "_",
												ignoreCase: false,
											},
											&notExpr{
												pos: position{line: 941, col: 74, offset: 33716},
												expr: &ruleRefExpr{
													pos:  position{line: 941, col: 75, offset: 33717},
													name: "Alphanum",
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 941, col: 85, offset: 33727},
									expr: &ruleRefExpr{
										pos:  position{line: 941, col: 85, offset: 33727},
										name: "WS",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 941, col: 89, offset: 33731},
									name: "SingleQuoteItalicTextElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElement",
			pos:  position{line: 943, col: 1, offset: 33763},
			expr: &actionExpr{
				pos: position{line: 943, col: 33, offset: 33795},
				run: (*parser).callonSingleQuoteItalicTextElement1,
				expr: &seqExpr{
					pos: position{line: 943, col: 33, offset: 33795},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 943, col: 33, offset: 33795},
							expr: &ruleRefExpr{
								pos:  position{line: 943, col: 34, offset: 33796},
								name: "Newline",
							},
						},
						&labeledExpr{
							pos:   position{line: 943, col: 42, offset: 33804},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 943, col: 51, offset: 33813},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 943, col: 51, offset: 33813},
										name: "DoubleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 944, col: 11, offset: 33845},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 945, col: 11, offset: 33865},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 946, col: 11, offset: 33889},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 947, col: 11, offset: 33913},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 948, col: 11, offset: 33939},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 949, col: 11, offset: 33962},
										name: "QuotedLink",
									},
									&ruleRefExpr{
										pos:  position{line: 950, col: 11, offset: 33984},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 951, col: 11, offset: 34007},
										name: "NonSingleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 952, col: 11, offset: 34042},
										name: "Parenthesis",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonSingleQuoteItalicText",
			pos:  position{line: 956, col: 1, offset: 34187},
			expr: &actionExpr{
				pos: position{line: 956, col: 29, offset: 34215},
				run: (*parser).callonNonSingleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 956, col: 29, offset: 34215},
					exprs: []interface{}{
						&anyMatcher{
							line: 956, col: 30, offset: 34216,
						},
						&zeroOrMoreExpr{
							pos: position{line: 956, col: 33, offset: 34219},
							expr: &seqExpr{
								pos: position{line: 956, col: 34, offset: 34220},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 956, col: 34, offset: 34220},
										expr: &litMatcher{
											pos:        position{line: 956, col: 35, offset: 34221},
											val:        "_",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 956, col: 39, offset: 34225},
										expr: &ruleRefExpr{
											pos:  position{line: 956, col: 40, offset: 34226},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 956, col: 43, offset: 34229},
										expr: &litMatcher{
											pos:        position{line: 956, col: 44, offset: 34230},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 956, col: 48, offset: 34234},
										expr: &litMatcher{
											pos:        position{line: 956, col: 49, offset: 34235},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 956, col: 53, offset: 34239},
										expr: &ruleRefExpr{
											pos:  position{line: 956, col: 54, offset: 34240},
											name: "Newline",
										},
									},
									&notExpr{
										pos: position{line: 956, col: 62, offset: 34248},
										expr: &ruleRefExpr{
											pos:  position{line: 956, col: 63, offset: 34249},
											name: "Parenthesis",
										},
									},
									&anyMatcher{
										line: 956, col: 75, offset: 34261,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedItalicText",
			pos:  position{line: 960, col: 1, offset: 34321},
			expr: &choiceExpr{
				pos: position{line: 961, col: 5, offset: 34347},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 961, col: 5, offset: 34347},
						run: (*parser).callonEscapedItalicText2,
						expr: &seqExpr{
							pos: position{line: 961, col: 5, offset: 34347},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 961, col: 5, offset: 34347},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 961, col: 18, offset: 34360},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 961, col: 40, offset: 34382},
									val:        "__",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 961, col: 45, offset: 34387},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 961, col: 55, offset: 34397},
										name: "DoubleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 961, col: 86, offset: 34428},
									val:        "__",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 963, col: 9, offset: 34585},
						run: (*parser).callonEscapedItalicText10,
						expr: &seqExpr{
							pos: position{line: 963, col: 9, offset: 34585},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 963, col: 9, offset: 34585},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 963, col: 22, offset: 34598},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 963, col: 44, offset: 34620},
									val:        "__",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 963, col: 49, offset: 34625},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 963, col: 59, offset: 34635},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 963, col: 90, offset: 34666},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 966, col: 9, offset: 34866},
						run: (*parser).callonEscapedItalicText18,
						expr: &seqExpr{
							pos: position{line: 966, col: 9, offset: 34866},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 966, col: 9, offset: 34866},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 966, col: 22, offset: 34879},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 966, col: 44, offset: 34901},
									val:        "_",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 966, col: 48, offset: 34905},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 966, col: 58, offset: 34915},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 966, col: 89, offset: 34946},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MonospaceText",
			pos:  position{line: 973, col: 1, offset: 35156},
			expr: &choiceExpr{
				pos: position{line: 973, col: 18, offset: 35173},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 973, col: 18, offset: 35173},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 973, col: 45, offset: 35200},
						name: "SingleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceText",
			pos:  position{line: 975, col: 1, offset: 35226},
			expr: &actionExpr{
				pos: position{line: 975, col: 29, offset: 35254},
				run: (*parser).callonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 975, col: 29, offset: 35254},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 975, col: 29, offset: 35254},
							expr: &litMatcher{
								pos:        position{line: 975, col: 30, offset: 35255},
								val:        "\\\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 975, col: 35, offset: 35260},
							val:        "``",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 975, col: 40, offset: 35265},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 975, col: 50, offset: 35275},
								name: "DoubleQuoteMonospaceTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 975, col: 84, offset: 35309},
							val:        "``",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElements",
			pos:  position{line: 979, col: 1, offset: 35439},
			expr: &seqExpr{
				pos: position{line: 979, col: 37, offset: 35475},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 979, col: 37, offset: 35475},
						name: "DoubleQuoteMonospaceTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 979, col: 69, offset: 35507},
						expr: &seqExpr{
							pos: position{line: 979, col: 70, offset: 35508},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 979, col: 70, offset: 35508},
									expr: &litMatcher{
										pos:        position{line: 979, col: 72, offset: 35510},
										val:        "``",
										ignoreCase: false,
									},
								},
								&choiceExpr{
									pos: position{line: 979, col: 79, offset: 35517},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 979, col: 79, offset: 35517},
											name: "WS",
										},
										&ruleRefExpr{
											pos:  position{line: 979, col: 84, offset: 35522},
											name: "DoubleQuoteMonospaceTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElement",
			pos:  position{line: 981, col: 1, offset: 35591},
			expr: &actionExpr{
				pos: position{line: 981, col: 36, offset: 35626},
				run: (*parser).callonDoubleQuoteMonospaceTextElement1,
				expr: &seqExpr{
					pos: position{line: 981, col: 36, offset: 35626},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 981, col: 36, offset: 35626},
							expr: &ruleRefExpr{
								pos:  position{line: 981, col: 37, offset: 35627},
								name: "Newline",
							},
						},
						&labeledExpr{
							pos:   position{line: 981, col: 45, offset: 35635},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 981, col: 54, offset: 35644},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 981, col: 54, offset: 35644},
										name: "SingleQuoteMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 982, col: 11, offset: 35680},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 983, col: 11, offset: 35699},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 984, col: 11, offset: 35721},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 985, col: 11, offset: 35745},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 986, col: 11, offset: 35771},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 987, col: 11, offset: 35794},
										name: "QuotedLink",
									},
									&ruleRefExpr{
										pos:  position{line: 988, col: 11, offset: 35816},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 989, col: 11, offset: 35839},
										name: "NonDoubleQuoteMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 990, col: 11, offset: 35877},
										name: "Parenthesis",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonDoubleQuoteMonospaceText",
			pos:  position{line: 994, col: 1, offset: 36022},
			expr: &actionExpr{
				pos: position{line: 994, col: 32, offset: 36053},
				run: (*parser).callonNonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 994, col: 32, offset: 36053},
					exprs: []interface{}{
						&anyMatcher{
							line: 994, col: 33, offset: 36054,
						},
						&zeroOrMoreExpr{
							pos: position{line: 994, col: 36, offset: 36057},
							expr: &seqExpr{
								pos: position{line: 994, col: 37, offset: 36058},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 994, col: 37, offset: 36058},
										expr: &litMatcher{
											pos:        position{line: 994, col: 38, offset: 36059},
											val:        "``",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 994, col: 43, offset: 36064},
										expr: &ruleRefExpr{
											pos:  position{line: 994, col: 44, offset: 36065},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 994, col: 47, offset: 36068},
										expr: &litMatcher{
											pos:        position{line: 994, col: 48, offset: 36069},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 994, col: 52, offset: 36073},
										expr: &litMatcher{
											pos:        position{line: 994, col: 53, offset: 36074},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 994, col: 57, offset: 36078},
										expr: &ruleRefExpr{
											pos:  position{line: 994, col: 58, offset: 36079},
											name: "Newline",
										},
									},
									&notExpr{
										pos: position{line: 994, col: 66, offset: 36087},
										expr: &ruleRefExpr{
											pos:  position{line: 994, col: 67, offset: 36088},
											name: "Parenthesis",
										},
									},
									&anyMatcher{
										line: 994, col: 79, offset: 36100,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceText",
			pos:  position{line: 998, col: 1, offset: 36160},
			expr: &choiceExpr{
				pos: position{line: 998, col: 29, offset: 36188},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 998, col: 29, offset: 36188},
						run: (*parser).callonSingleQuoteMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 998, col: 29, offset: 36188},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 998, col: 29, offset: 36188},
									expr: &litMatcher{
										pos:        position{line: 998, col: 30, offset: 36189},
										val:        "\\",
										ignoreCase: false,
									},
								},
								&notExpr{
									pos: position{line: 998, col: 34, offset: 36193},
									expr: &litMatcher{
										pos:        position{line: 998, col: 35, offset: 36194},
										val:        "``",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 998, col: 40, offset: 36199},
									val:        "`",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 998, col: 44, offset: 36203},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 998, col: 54, offset: 36213},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 998, col: 88, offset: 36247},
									val:        "`",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1000, col: 5, offset: 36433},
						run: (*parser).callonSingleQuoteMonospaceText12,
						expr: &seqExpr{
							pos: position{line: 1000, col: 5, offset: 36433},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1000, col: 5, offset: 36433},
									expr: &litMatcher{
										pos:        position{line: 1000, col: 6, offset: 36434},
										val:        "\\\\",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 1000, col: 11, offset: 36439},
									val:        "`",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1000, col: 15, offset: 36443},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1000, col: 25, offset: 36453},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1000, col: 25, offset: 36453},
												val:        "`",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 1000, col: 29, offset: 36457},
												name: "SingleQuoteMonospaceTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1000, col: 63, offset: 36491},
									val:        "`",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElements",
			pos:  position{line: 1004, col: 1, offset: 36700},
			expr: &seqExpr{
				pos: position{line: 1004, col: 37, offset: 36736},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1004, col: 37, offset: 36736},
						expr: &ruleRefExpr{
							pos:  position{line: 1004, col: 38, offset: 36737},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1004, col: 41, offset: 36740},
						name: "SingleQuoteMonospaceTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1004, col: 73, offset: 36772},
						expr: &seqExpr{
							pos: position{line: 1004, col: 74, offset: 36773},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1004, col: 74, offset: 36773},
									expr: &seqExpr{
										pos: position{line: 1004, col: 76, offset: 36775},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1004, col: 76, offset: 36775},
												val:        "`",
												ignoreCase: false,
											},
											&notExpr{
												pos: position{line: 1004, col: 80, offset: 36779},
												expr: &ruleRefExpr{
													pos:  position{line: 1004, col: 81, offset: 36780},
													name: "Alphanum",
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1004, col: 91, offset: 36790},
									expr: &ruleRefExpr{
										pos:  position{line: 1004, col: 91, offset: 36790},
										name: "WS",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1004, col: 95, offset: 36794},
									name: "SingleQuoteMonospaceTextElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElement",
			pos:  position{line: 1006, col: 1, offset: 36829},
			expr: &actionExpr{
				pos: position{line: 1006, col: 37, offset: 36865},
				run: (*parser).callonSingleQuoteMonospaceTextElement1,
				expr: &labeledExpr{
					pos:   position{line: 1006, col: 37, offset: 36865},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1006, col: 46, offset: 36874},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1006, col: 46, offset: 36874},
								name: "Newline",
							},
							&ruleRefExpr{
								pos:  position{line: 1007, col: 11, offset: 36912},
								name: "DoubleQuoteMonospaceText",
							},
							&ruleRefExpr{
								pos:  position{line: 1008, col: 11, offset: 36948},
								name: "BoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 1009, col: 11, offset: 36968},
								name: "ItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 1010, col: 11, offset: 36989},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1011, col: 11, offset: 37013},
								name: "SuperscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1012, col: 11, offset: 37039},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 1013, col: 11, offset: 37062},
								name: "QuotedLink",
							},
							&ruleRefExpr{
								pos:  position{line: 1014, col: 11, offset: 37084},
								name: "Passthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 1015, col: 11, offset: 37107},
								name: "NonSingleQuoteMonospaceText",
							},
							&ruleRefExpr{
								pos:  position{line: 1016, col: 11, offset: 37145},
								name: "Parenthesis",
							},
						},
					},
				},
			},
		},
		{
			name: "NonSingleQuoteMonospaceText",
			pos:  position{line: 1020, col: 1, offset: 37290},
			expr: &actionExpr{
				pos: position{line: 1020, col: 32, offset: 37321},
				run: (*parser).callonNonSingleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1020, col: 32, offset: 37321},
					exprs: []interface{}{
						&anyMatcher{
							line: 1020, col: 33, offset: 37322,
						},
						&zeroOrMoreExpr{
							pos: position{line: 1020, col: 36, offset: 37325},
							expr: &seqExpr{
								pos: position{line: 1020, col: 37, offset: 37326},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1020, col: 37, offset: 37326},
										expr: &ruleRefExpr{
											pos:  position{line: 1020, col: 38, offset: 37327},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 1020, col: 41, offset: 37330},
										expr: &litMatcher{
											pos:        position{line: 1020, col: 42, offset: 37331},
											val:        "`",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1020, col: 46, offset: 37335},
										expr: &litMatcher{
											pos:        position{line: 1020, col: 47, offset: 37336},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1020, col: 51, offset: 37340},
										expr: &litMatcher{
											pos:        position{line: 1020, col: 52, offset: 37341},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1020, col: 56, offset: 37345},
										expr: &ruleRefExpr{
											pos:  position{line: 1020, col: 57, offset: 37346},
											name: "Newline",
										},
									},
									&notExpr{
										pos: position{line: 1020, col: 65, offset: 37354},
										expr: &ruleRefExpr{
											pos:  position{line: 1020, col: 66, offset: 37355},
											name: "Parenthesis",
										},
									},
									&anyMatcher{
										line: 1020, col: 78, offset: 37367,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMonospaceText",
			pos:  position{line: 1024, col: 1, offset: 37448},
			expr: &choiceExpr{
				pos: position{line: 1025, col: 5, offset: 37477},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1025, col: 5, offset: 37477},
						run: (*parser).callonEscapedMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1025, col: 5, offset: 37477},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1025, col: 5, offset: 37477},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1025, col: 18, offset: 37490},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1025, col: 40, offset: 37512},
									val:        "``",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1025, col: 45, offset: 37517},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1025, col: 55, offset: 37527},
										name: "DoubleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1025, col: 89, offset: 37561},
									val:        "``",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1027, col: 9, offset: 37718},
						run: (*parser).callonEscapedMonospaceText10,
						expr: &seqExpr{
							pos: position{line: 1027, col: 9, offset: 37718},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1027, col: 9, offset: 37718},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1027, col: 22, offset: 37731},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1027, col: 44, offset: 37753},
									val:        "``",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1027, col: 49, offset: 37758},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1027, col: 59, offset: 37768},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1027, col: 93, offset: 37802},
									val:        "`",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1030, col: 9, offset: 38002},
						run: (*parser).callonEscapedMonospaceText18,
						expr: &seqExpr{
							pos: position{line: 1030, col: 9, offset: 38002},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1030, col: 9, offset: 38002},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1030, col: 22, offset: 38015},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1030, col: 44, offset: 38037},
									val:        "`",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1030, col: 48, offset: 38041},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1030, col: 58, offset: 38051},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1030, col: 92, offset: 38085},
									val:        "`",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptText",
			pos:  position{line: 1034, col: 1, offset: 38235},
			expr: &actionExpr{
				pos: position{line: 1034, col: 18, offset: 38252},
				run: (*parser).callonSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1034, col: 18, offset: 38252},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1034, col: 18, offset: 38252},
							expr: &litMatcher{
								pos:        position{line: 1034, col: 19, offset: 38253},
								val:        "\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 1034, col: 23, offset: 38257},
							val:        "~",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1034, col: 27, offset: 38261},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1034, col: 36, offset: 38270},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1034, col: 58, offset: 38292},
							val:        "~",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SubscriptTextElement",
			pos:  position{line: 1038, col: 1, offset: 38381},
			expr: &choiceExpr{
				pos: position{line: 1038, col: 25, offset: 38405},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1038, col: 25, offset: 38405},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1038, col: 38, offset: 38418},
						name: "NonSubscriptText",
					},
				},
			},
		},
		{
			name: "NonSubscriptText",
			pos:  position{line: 1040, col: 1, offset: 38437},
			expr: &actionExpr{
				pos: position{line: 1040, col: 21, offset: 38457},
				run: (*parser).callonNonSubscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1040, col: 21, offset: 38457},
					expr: &seqExpr{
						pos: position{line: 1040, col: 22, offset: 38458},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1040, col: 22, offset: 38458},
								expr: &ruleRefExpr{
									pos:  position{line: 1040, col: 23, offset: 38459},
									name: "Newline",
								},
							},
							&notExpr{
								pos: position{line: 1040, col: 31, offset: 38467},
								expr: &ruleRefExpr{
									pos:  position{line: 1040, col: 32, offset: 38468},
									name: "WS",
								},
							},
							&notExpr{
								pos: position{line: 1040, col: 35, offset: 38471},
								expr: &litMatcher{
									pos:        position{line: 1040, col: 36, offset: 38472},
									val:        "~",
									ignoreCase: false,
								},
							},
							&anyMatcher{
								line: 1040, col: 40, offset: 38476,
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedSubscriptText",
			pos:  position{line: 1044, col: 1, offset: 38509},
			expr: &actionExpr{
				pos: position{line: 1044, col: 25, offset: 38533},
				run: (*parser).callonEscapedSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1044, col: 25, offset: 38533},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1044, col: 25, offset: 38533},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1044, col: 38, offset: 38546},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1044, col: 60, offset: 38568},
							val:        "~",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1044, col: 64, offset: 38572},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1044, col: 73, offset: 38581},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1044, col: 95, offset: 38603},
							val:        "~",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SuperscriptText",
			pos:  position{line: 1048, col: 1, offset: 38732},
			expr: &actionExpr{
				pos: position{line: 1048, col: 20, offset: 38751},
				run: (*parser).callonSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1048, col: 20, offset: 38751},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1048, col: 20, offset: 38751},
							expr: &litMatcher{
								pos:        position{line: 1048, col: 21, offset: 38752},
								val:        "\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 1048, col: 25, offset: 38756},
							val:        "^",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1048, col: 29, offset: 38760},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1048, col: 38, offset: 38769},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1048, col: 62, offset: 38793},
							val:        "^",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SuperscriptTextElement",
			pos:  position{line: 1052, col: 1, offset: 38884},
			expr: &choiceExpr{
				pos: position{line: 1052, col: 27, offset: 38910},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1052, col: 27, offset: 38910},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1052, col: 40, offset: 38923},
						name: "NonSuperscriptText",
					},
				},
			},
		},
		{
			name: "NonSuperscriptText",
			pos:  position{line: 1054, col: 1, offset: 38944},
			expr: &actionExpr{
				pos: position{line: 1054, col: 23, offset: 38966},
				run: (*parser).callonNonSuperscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1054, col: 23, offset: 38966},
					expr: &seqExpr{
						pos: position{line: 1054, col: 24, offset: 38967},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1054, col: 24, offset: 38967},
								expr: &ruleRefExpr{
									pos:  position{line: 1054, col: 25, offset: 38968},
									name: "Newline",
								},
							},
							&notExpr{
								pos: position{line: 1054, col: 33, offset: 38976},
								expr: &ruleRefExpr{
									pos:  position{line: 1054, col: 34, offset: 38977},
									name: "WS",
								},
							},
							&notExpr{
								pos: position{line: 1054, col: 37, offset: 38980},
								expr: &litMatcher{
									pos:        position{line: 1054, col: 38, offset: 38981},
									val:        "^",
									ignoreCase: false,
								},
							},
							&anyMatcher{
								line: 1054, col: 42, offset: 38985,
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedSuperscriptText",
			pos:  position{line: 1058, col: 1, offset: 39018},
			expr: &actionExpr{
				pos: position{line: 1058, col: 27, offset: 39044},
				run: (*parser).callonEscapedSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1058, col: 27, offset: 39044},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1058, col: 27, offset: 39044},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1058, col: 40, offset: 39057},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1058, col: 62, offset: 39079},
							val:        "^",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1058, col: 66, offset: 39083},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1058, col: 75, offset: 39092},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1058, col: 99, offset: 39116},
							val:        "^",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Passthrough",
			pos:  position{line: 1065, col: 1, offset: 39352},
			expr: &choiceExpr{
				pos: position{line: 1065, col: 16, offset: 39367},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1065, col: 16, offset: 39367},
						name: "TriplePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1065, col: 40, offset: 39391},
						name: "SinglePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1065, col: 64, offset: 39415},
						name: "PassthroughMacro",
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughPrefix",
			pos:  position{line: 1067, col: 1, offset: 39433},
			expr: &litMatcher{
				pos:        position{line: 1067, col: 32, offset: 39464},
				val:        "+",
				ignoreCase: false,
			},
		},
		{
			name: "SinglePlusPassthrough",
			pos:  position{line: 1069, col: 1, offset: 39469},
			expr: &actionExpr{
				pos: position{line: 1069, col: 26, offset: 39494},
				run: (*parser).callonSinglePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1069, col: 26, offset: 39494},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1069, col: 26, offset: 39494},
							name: "SinglePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1069, col: 54, offset: 39522},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1069, col: 63, offset: 39531},
								name: "SinglePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1069, col: 93, offset: 39561},
							name: "SinglePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1069, col: 121, offset: 39589},
							expr: &ruleRefExpr{
								pos:  position{line: 1069, col: 122, offset: 39590},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughContent",
			pos:  position{line: 1073, col: 1, offset: 39689},
			expr: &choiceExpr{
				pos: position{line: 1073, col: 33, offset: 39721},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1073, col: 34, offset: 39722},
						run: (*parser).callonSinglePlusPassthroughContent2,
						expr: &seqExpr{
							pos: position{line: 1073, col: 34, offset: 39722},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1073, col: 35, offset: 39723},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1073, col: 35, offset: 39723},
											expr: &ruleRefExpr{
												pos:  position{line: 1073, col: 36, offset: 39724},
												name: "SinglePlusPassthroughPrefix",
											},
										},
										&notExpr{
											pos: position{line: 1073, col: 64, offset: 39752},
											expr: &ruleRefExpr{
												pos:  position{line: 1073, col: 65, offset: 39753},
												name: "WS",
											},
										},
										&notExpr{
											pos: position{line: 1073, col: 68, offset: 39756},
											expr: &ruleRefExpr{
												pos:  position{line: 1073, col: 69, offset: 39757},
												name: "Newline",
											},
										},
										&anyMatcher{
											line: 1073, col: 77, offset: 39765,
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1073, col: 80, offset: 39768},
									expr: &seqExpr{
										pos: position{line: 1073, col: 81, offset: 39769},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1073, col: 81, offset: 39769},
												expr: &seqExpr{
													pos: position{line: 1073, col: 83, offset: 39771},
													exprs: []interface{}{
														&oneOrMoreExpr{
															pos: position{line: 1073, col: 83, offset: 39771},
															expr: &ruleRefExpr{
																pos:  position{line: 1073, col: 83, offset: 39771},
																name: "WS",
															},
														},
														&ruleRefExpr{
															pos:  position{line: 1073, col: 87, offset: 39775},
															name: "SinglePlusPassthroughPrefix",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 1073, col: 116, offset: 39804},
												expr: &ruleRefExpr{
													pos:  position{line: 1073, col: 117, offset: 39805},
													name: "SinglePlusPassthroughPrefix",
												},
											},
											&notExpr{
												pos: position{line: 1073, col: 145, offset: 39833},
												expr: &ruleRefExpr{
													pos:  position{line: 1073, col: 146, offset: 39834},
													name: "Newline",
												},
											},
											&anyMatcher{
												line: 1073, col: 154, offset: 39842,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1075, col: 7, offset: 39984},
						run: (*parser).callonSinglePlusPassthroughContent24,
						expr: &seqExpr{
							pos: position{line: 1075, col: 8, offset: 39985},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1075, col: 8, offset: 39985},
									expr: &ruleRefExpr{
										pos:  position{line: 1075, col: 9, offset: 39986},
										name: "WS",
									},
								},
								&notExpr{
									pos: position{line: 1075, col: 12, offset: 39989},
									expr: &ruleRefExpr{
										pos:  position{line: 1075, col: 13, offset: 39990},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 1075, col: 21, offset: 39998},
									expr: &ruleRefExpr{
										pos:  position{line: 1075, col: 22, offset: 39999},
										name: "SinglePlusPassthroughPrefix",
									},
								},
								&anyMatcher{
									line: 1075, col: 50, offset: 40027,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughPrefix",
			pos:  position{line: 1079, col: 1, offset: 40109},
			expr: &litMatcher{
				pos:        position{line: 1079, col: 32, offset: 40140},
				val:        "+++",
				ignoreCase: false,
			},
		},
		{
			name: "TriplePlusPassthrough",
			pos:  position{line: 1081, col: 1, offset: 40147},
			expr: &actionExpr{
				pos: position{line: 1081, col: 26, offset: 40172},
				run: (*parser).callonTriplePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1081, col: 26, offset: 40172},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1081, col: 26, offset: 40172},
							name: "TriplePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1081, col: 54, offset: 40200},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1081, col: 63, offset: 40209},
								name: "TriplePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1081, col: 93, offset: 40239},
							name: "TriplePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1081, col: 121, offset: 40267},
							expr: &ruleRefExpr{
								pos:  position{line: 1081, col: 122, offset: 40268},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughContent",
			pos:  position{line: 1085, col: 1, offset: 40367},
			expr: &choiceExpr{
				pos: position{line: 1085, col: 33, offset: 40399},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1085, col: 34, offset: 40400},
						run: (*parser).callonTriplePlusPassthroughContent2,
						expr: &zeroOrMoreExpr{
							pos: position{line: 1085, col: 34, offset: 40400},
							expr: &seqExpr{
								pos: position{line: 1085, col: 35, offset: 40401},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1085, col: 35, offset: 40401},
										expr: &ruleRefExpr{
											pos:  position{line: 1085, col: 36, offset: 40402},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1085, col: 64, offset: 40430,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1087, col: 7, offset: 40595},
						run: (*parser).callonTriplePlusPassthroughContent8,
						expr: &zeroOrOneExpr{
							pos: position{line: 1087, col: 7, offset: 40595},
							expr: &seqExpr{
								pos: position{line: 1087, col: 8, offset: 40596},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1087, col: 8, offset: 40596},
										expr: &ruleRefExpr{
											pos:  position{line: 1087, col: 9, offset: 40597},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 1087, col: 12, offset: 40600},
										expr: &ruleRefExpr{
											pos:  position{line: 1087, col: 13, offset: 40601},
											name: "Newline",
										},
									},
									&notExpr{
										pos: position{line: 1087, col: 21, offset: 40609},
										expr: &ruleRefExpr{
											pos:  position{line: 1087, col: 22, offset: 40610},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1087, col: 50, offset: 40638,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacro",
			pos:  position{line: 1091, col: 1, offset: 40721},
			expr: &choiceExpr{
				pos: position{line: 1091, col: 21, offset: 40741},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1091, col: 21, offset: 40741},
						run: (*parser).callonPassthroughMacro2,
						expr: &seqExpr{
							pos: position{line: 1091, col: 21, offset: 40741},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1091, col: 21, offset: 40741},
									val:        "pass:[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1091, col: 30, offset: 40750},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1091, col: 38, offset: 40758},
										expr: &ruleRefExpr{
											pos:  position{line: 1091, col: 39, offset: 40759},
											name: "PassthroughMacroCharacter",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1091, col: 67, offset: 40787},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1093, col: 5, offset: 40877},
						run: (*parser).callonPassthroughMacro9,
						expr: &seqExpr{
							pos: position{line: 1093, col: 5, offset: 40877},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1093, col: 5, offset: 40877},
									val:        "pass:q[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1093, col: 15, offset: 40887},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1093, col: 23, offset: 40895},
										expr: &choiceExpr{
											pos: position{line: 1093, col: 24, offset: 40896},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1093, col: 24, offset: 40896},
													name: "QuotedText",
												},
												&ruleRefExpr{
													pos:  position{line: 1093, col: 37, offset: 40909},
													name: "PassthroughMacroCharacter",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1093, col: 65, offset: 40937},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacroCharacter",
			pos:  position{line: 1097, col: 1, offset: 41027},
			expr: &choiceExpr{
				pos: position{line: 1097, col: 31, offset: 41057},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1097, col: 31, offset: 41057},
						name: "Alphanums",
					},
					&ruleRefExpr{
						pos:  position{line: 1097, col: 43, offset: 41069},
						name: "Spaces",
					},
					&actionExpr{
						pos: position{line: 1097, col: 52, offset: 41078},
						run: (*parser).callonPassthroughMacroCharacter4,
						expr: &seqExpr{
							pos: position{line: 1097, col: 53, offset: 41079},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1097, col: 53, offset: 41079},
									expr: &litMatcher{
										pos:        position{line: 1097, col: 54, offset: 41080},
										val:        "]",
										ignoreCase: false,
									},
								},
								&anyMatcher{
									line: 1097, col: 58, offset: 41084,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReference",
			pos:  position{line: 1104, col: 1, offset: 41254},
			expr: &choiceExpr{
				pos: position{line: 1104, col: 19, offset: 41272},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1104, col: 19, offset: 41272},
						name: "InternalCrossReference",
					},
					&ruleRefExpr{
						pos:  position{line: 1104, col: 44, offset: 41297},
						name: "ExternalCrossReference",
					},
				},
			},
		},
		{
			name: "InternalCrossReference",
			pos:  position{line: 1106, col: 1, offset: 41322},
			expr: &choiceExpr{
				pos: position{line: 1106, col: 27, offset: 41348},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1106, col: 27, offset: 41348},
						run: (*parser).callonInternalCrossReference2,
						expr: &seqExpr{
							pos: position{line: 1106, col: 27, offset: 41348},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1106, col: 27, offset: 41348},
									val:        "<<",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1106, col: 32, offset: 41353},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1106, col: 36, offset: 41357},
										name: "ID",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1106, col: 40, offset: 41361},
									expr: &ruleRefExpr{
										pos:  position{line: 1106, col: 40, offset: 41361},
										name: "WS",
									},
								},
								&litMatcher{
									pos:        position{line: 1106, col: 44, offset: 41365},
									val:        ",",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1106, col: 48, offset: 41369},
									label: "label",
									expr: &ruleRefExpr{
										pos:  position{line: 1106, col: 55, offset: 41376},
										name: "CrossReferenceLabel",
									},
								},
								&litMatcher{
									pos:        position{line: 1106, col: 76, offset: 41397},
									val:        ">>",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1108, col: 5, offset: 41480},
						run: (*parser).callonInternalCrossReference13,
						expr: &seqExpr{
							pos: position{line: 1108, col: 5, offset: 41480},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1108, col: 5, offset: 41480},
									val:        "<<",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1108, col: 10, offset: 41485},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1108, col: 14, offset: 41489},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 1108, col: 18, offset: 41493},
									val:        ">>",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalCrossReference",
			pos:  position{line: 1112, col: 1, offset: 41565},
			expr: &actionExpr{
				pos: position{line: 1112, col: 27, offset: 41591},
				run: (*parser).callonExternalCrossReference1,
				expr: &seqExpr{
					pos: position{line: 1112, col: 27, offset: 41591},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1112, col: 27, offset: 41591},
							val:        "xref:",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1112, col: 35, offset: 41599},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1112, col: 40, offset: 41604},
								name: "FileLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 1112, col: 54, offset: 41618},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1112, col: 72, offset: 41636},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReferenceLabel",
			pos:  position{line: 1116, col: 1, offset: 41766},
			expr: &actionExpr{
				pos: position{line: 1116, col: 24, offset: 41789},
				run: (*parser).callonCrossReferenceLabel1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1116, col: 24, offset: 41789},
					expr: &choiceExpr{
						pos: position{line: 1116, col: 25, offset: 41790},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1116, col: 25, offset: 41790},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 1116, col: 37, offset: 41802},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 1116, col: 47, offset: 41812},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1116, col: 47, offset: 41812},
										expr: &litMatcher{
											pos:        position{line: 1116, col: 48, offset: 41813},
											val:        ">>",
											ignoreCase: false,
										},
									},
									&anyMatcher{
										line: 1116, col: 54, offset: 41819,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Link",
			pos:  position{line: 1123, col: 1, offset: 41961},
			expr: &choiceExpr{
				pos: position{line: 1123, col: 9, offset: 41969},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1123, col: 9, offset: 41969},
						name: "RelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1123, col: 24, offset: 41984},
						name: "ExternalLink",
					},
				},
			},
		},
		{
			name: "RelativeLink",
			pos:  position{line: 1126, col: 1, offset: 42065},
			expr: &actionExpr{
				pos: position{line: 1126, col: 17, offset: 42081},
				run: (*parser).callonRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1126, col: 17, offset: 42081},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1126, col: 17, offset: 42081},
							val:        "link:",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1126, col: 25, offset: 42089},
							label: "url",
							expr: &choiceExpr{
								pos: position{line: 1126, col: 30, offset: 42094},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1126, col: 30, offset: 42094},
										name: "Location",
									},
									&ruleRefExpr{
										pos:  position{line: 1126, col: 41, offset: 42105},
										name: "FileLocation",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1126, col: 55, offset: 42119},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1126, col: 73, offset: 42137},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalLink",
			pos:  position{line: 1130, col: 1, offset: 42255},
			expr: &actionExpr{
				pos: position{line: 1130, col: 17, offset: 42271},
				run: (*parser).callonExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1130, col: 17, offset: 42271},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1130, col: 17, offset: 42271},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1130, col: 22, offset: 42276},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1130, col: 32, offset: 42286},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1130, col: 49, offset: 42303},
								expr: &ruleRefExpr{
									pos:  position{line: 1130, col: 50, offset: 42304},
									name: "LinkAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LinkAttributes",
			pos:  position{line: 1134, col: 1, offset: 42397},
			expr: &choiceExpr{
				pos: position{line: 1134, col: 19, offset: 42415},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1134, col: 19, offset: 42415},
						name: "TextOnlyLinkAttributes",
					},
					&ruleRefExpr{
						pos:  position{line: 1134, col: 44, offset: 42440},
						name: "TextAndMoreLinkAttributes",
					},
				},
			},
		},
		{
			name: "TextOnlyLinkAttributes",
			pos:  position{line: 1136, col: 1, offset: 42467},
			expr: &actionExpr{
				pos: position{line: 1136, col: 27, offset: 42493},
				run: (*parser).callonTextOnlyLinkAttributes1,
				expr: &seqExpr{
					pos: position{line: 1136, col: 27, offset: 42493},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1136, col: 27, offset: 42493},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1136, col: 31, offset: 42497},
							label: "text",
							expr: &zeroOrOneExpr{
								pos: position{line: 1136, col: 36, offset: 42502},
								expr: &ruleRefExpr{
									pos:  position{line: 1136, col: 37, offset: 42503},
									name: "LinkTextWithCommaAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1136, col: 66, offset: 42532},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "LinkTextWithCommaAttribute",
			pos:  position{line: 1140, col: 1, offset: 42594},
			expr: &choiceExpr{
				pos: position{line: 1142, col: 5, offset: 42666},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1142, col: 5, offset: 42666},
						run: (*parser).callonLinkTextWithCommaAttribute2,
						expr: &seqExpr{
							pos: position{line: 1142, col: 5, offset: 42666},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1142, col: 5, offset: 42666},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1142, col: 10, offset: 42671},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 1142, col: 19, offset: 42680},
										expr: &seqExpr{
											pos: position{line: 1142, col: 20, offset: 42681},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1142, col: 20, offset: 42681},
													expr: &litMatcher{
														pos:        position{line: 1142, col: 21, offset: 42682},
														val:        "=",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 1142, col: 25, offset: 42686},
													expr: &litMatcher{
														pos:        position{line: 1142, col: 26, offset: 42687},
														val:        "]",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 1142, col: 30, offset: 42691},
													expr: &litMatcher{
														pos:        position{line: 1142, col: 31, offset: 42692},
														val:        "\"",
														ignoreCase: false,
													},
												},
												&choiceExpr{
													pos: position{line: 1142, col: 37, offset: 42698},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1142, col: 37, offset: 42698},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1142, col: 50, offset: 42711},
															name: "SimpleWord",
														},
														&ruleRefExpr{
															pos:  position{line: 1142, col: 63, offset: 42724},
															name: "Spaces",
														},
														&actionExpr{
															pos: position{line: 1142, col: 73, offset: 42734},
															run: (*parser).callonLinkTextWithCommaAttribute18,
															expr: &seqExpr{
																pos: position{line: 1142, col: 74, offset: 42735},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1142, col: 74, offset: 42735},
																		expr: &ruleRefExpr{
																			pos:  position{line: 1142, col: 75, offset: 42736},
																			name: "WS",
																		},
																	},
																	&anyMatcher{
																		line: 1142, col: 78, offset: 42739,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1144, col: 11, offset: 42808},
									val:        "\"",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 1144, col: 16, offset: 42813},
									expr: &ruleRefExpr{
										pos:  position{line: 1144, col: 16, offset: 42813},
										name: "Spaces",
									},
								},
								&andExpr{
									pos: position{line: 1144, col: 24, offset: 42821},
									expr: &notExpr{
										pos: position{line: 1144, col: 26, offset: 42823},
										expr: &litMatcher{
											pos:        position{line: 1144, col: 27, offset: 42824},
											val:        "=",
											ignoreCase: false,
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1148, col: 5, offset: 42949},
						run: (*parser).callonLinkTextWithCommaAttribute29,
						expr: &seqExpr{
							pos: position{line: 1148, col: 5, offset: 42949},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1148, col: 5, offset: 42949},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 1148, col: 14, offset: 42958},
										expr: &seqExpr{
											pos: position{line: 1148, col: 15, offset: 42959},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1148, col: 15, offset: 42959},
													expr: &litMatcher{
														pos:        position{line: 1148, col: 16, offset: 42960},
														val:        "=",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 1148, col: 20, offset: 42964},
													expr: &litMatcher{
														pos:        position{line: 1148, col: 21, offset: 42965},
														val:        "]",
														ignoreCase: false,
													},
												},
												&choiceExpr{
													pos: position{line: 1148, col: 26, offset: 42970},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1148, col: 26, offset: 42970},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1148, col: 39, offset: 42983},
															name: "SimpleWord",
														},
														&ruleRefExpr{
															pos:  position{line: 1148, col: 52, offset: 42996},
															name: "Spaces",
														},
														&actionExpr{
															pos: position{line: 1148, col: 62, offset: 43006},
															run: (*parser).callonLinkTextWithCommaAttribute42,
															expr: &seqExpr{
																pos: position{line: 1148, col: 63, offset: 43007},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1148, col: 63, offset: 43007},
																		expr: &ruleRefExpr{
																			pos:  position{line: 1148, col: 64, offset: 43008},
																			name: "WS",
																		},
																	},
																	&anyMatcher{
																		line: 1148, col: 67, offset: 43011,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&andExpr{
									pos: position{line: 1150, col: 11, offset: 43080},
									expr: &notExpr{
										pos: position{line: 1150, col: 13, offset: 43082},
										expr: &litMatcher{
											pos:        position{line: 1150, col: 14, offset: 43083},
											val:        "=",
											ignoreCase: false,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TextAndMoreLinkAttributes",
			pos:  position{line: 1155, col: 1, offset: 43163},
			expr: &actionExpr{
				pos: position{line: 1155, col: 30, offset: 43192},
				run: (*parser).callonTextAndMoreLinkAttributes1,
				expr: &seqExpr{
					pos: position{line: 1155, col: 30, offset: 43192},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1155, col: 30, offset: 43192},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1155, col: 34, offset: 43196},
							label: "text",
							expr: &zeroOrOneExpr{
								pos: position{line: 1155, col: 39, offset: 43201},
								expr: &ruleRefExpr{
									pos:  position{line: 1155, col: 40, offset: 43202},
									name: "LinkTextAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1155, col: 60, offset: 43222},
							expr: &litMatcher{
								pos:        position{line: 1155, col: 60, offset: 43222},
								val:        ",",
								ignoreCase: false,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1155, col: 65, offset: 43227},
							expr: &ruleRefExpr{
								pos:  position{line: 1155, col: 65, offset: 43227},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 1155, col: 69, offset: 43231},
							label: "otherattrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1155, col: 80, offset: 43242},
								expr: &ruleRefExpr{
									pos:  position{line: 1155, col: 81, offset: 43243},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1155, col: 100, offset: 43262},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "LinkTextAttribute",
			pos:  position{line: 1159, col: 1, offset: 43347},
			expr: &choiceExpr{
				pos: position{line: 1161, col: 5, offset: 43410},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1161, col: 5, offset: 43410},
						run: (*parser).callonLinkTextAttribute2,
						expr: &seqExpr{
							pos: position{line: 1161, col: 5, offset: 43410},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1161, col: 5, offset: 43410},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1161, col: 10, offset: 43415},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 1161, col: 19, offset: 43424},
										expr: &seqExpr{
											pos: position{line: 1161, col: 20, offset: 43425},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1161, col: 20, offset: 43425},
													expr: &litMatcher{
														pos:        position{line: 1161, col: 21, offset: 43426},
														val:        "=",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 1161, col: 25, offset: 43430},
													expr: &litMatcher{
														pos:        position{line: 1161, col: 26, offset: 43431},
														val:        "]",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 1161, col: 30, offset: 43435},
													expr: &litMatcher{
														pos:        position{line: 1161, col: 31, offset: 43436},
														val:        "\"",
														ignoreCase: false,
													},
												},
												&choiceExpr{
													pos: position{line: 1161, col: 37, offset: 43442},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1161, col: 37, offset: 43442},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1161, col: 50, offset: 43455},
															name: "SimpleWord",
														},
														&ruleRefExpr{
															pos:  position{line: 1161, col: 63, offset: 43468},
															name: "Spaces",
														},
														&actionExpr{
															pos: position{line: 1161, col: 73, offset: 43478},
															run: (*parser).callonLinkTextAttribute18,
															expr: &seqExpr{
																pos: position{line: 1161, col: 74, offset: 43479},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1161, col: 74, offset: 43479},
																		expr: &ruleRefExpr{
																			pos:  position{line: 1161, col: 75, offset: 43480},
																			name: "QuotedTextPrefix",
																		},
																	},
																	&anyMatcher{
																		line: 1161, col: 92, offset: 43497,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1163, col: 11, offset: 43566},
									val:        "\"",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 1163, col: 16, offset: 43571},
									expr: &ruleRefExpr{
										pos:  position{line: 1163, col: 16, offset: 43571},
										name: "Spaces",
									},
								},
								&andExpr{
									pos: position{line: 1163, col: 24, offset: 43579},
									expr: &notExpr{
										pos: position{line: 1163, col: 26, offset: 43581},
										expr: &litMatcher{
											pos:        position{line: 1163, col: 27, offset: 43582},
											val:        "=",
											ignoreCase: false,
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1167, col: 5, offset: 43707},
						run: (*parser).callonLinkTextAttribute29,
						expr: &seqExpr{
							pos: position{line: 1167, col: 5, offset: 43707},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1167, col: 5, offset: 43707},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 1167, col: 14, offset: 43716},
										expr: &seqExpr{
											pos: position{line: 1167, col: 15, offset: 43717},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1167, col: 15, offset: 43717},
													expr: &litMatcher{
														pos:        position{line: 1167, col: 16, offset: 43718},
														val:        "=",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 1167, col: 20, offset: 43722},
													expr: &litMatcher{
														pos:        position{line: 1167, col: 21, offset: 43723},
														val:        ",",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 1167, col: 25, offset: 43727},
													expr: &litMatcher{
														pos:        position{line: 1167, col: 26, offset: 43728},
														val:        "]",
														ignoreCase: false,
													},
												},
												&choiceExpr{
													pos: position{line: 1167, col: 31, offset: 43733},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1167, col: 31, offset: 43733},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1167, col: 44, offset: 43746},
															name: "SimpleWord",
														},
														&ruleRefExpr{
															pos:  position{line: 1167, col: 57, offset: 43759},
															name: "Spaces",
														},
														&actionExpr{
															pos: position{line: 1167, col: 67, offset: 43769},
															run: (*parser).callonLinkTextAttribute44,
															expr: &seqExpr{
																pos: position{line: 1167, col: 68, offset: 43770},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1167, col: 68, offset: 43770},
																		expr: &ruleRefExpr{
																			pos:  position{line: 1167, col: 69, offset: 43771},
																			name: "QuotedTextPrefix",
																		},
																	},
																	&anyMatcher{
																		line: 1167, col: 86, offset: 43788,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&andExpr{
									pos: position{line: 1169, col: 11, offset: 43857},
									expr: &notExpr{
										pos: position{line: 1169, col: 13, offset: 43859},
										expr: &litMatcher{
											pos:        position{line: 1169, col: 14, offset: 43860},
											val:        "=",
											ignoreCase: false,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineLinks",
			pos:  position{line: 1174, col: 1, offset: 44010},
			expr: &actionExpr{
				pos: position{line: 1175, col: 5, offset: 44030},
				run: (*parser).callonInlineLinks1,
				expr: &seqExpr{
					pos: position{line: 1175, col: 5, offset: 44030},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1175, col: 5, offset: 44030},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1175, col: 14, offset: 44039},
								expr: &choiceExpr{
									pos: position{line: 1175, col: 15, offset: 44040},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1175, col: 15, offset: 44040},
											name: "SimpleWord",
										},
										&ruleRefExpr{
											pos:  position{line: 1176, col: 11, offset: 44061},
											name: "Spaces",
										},
										&ruleRefExpr{
											pos:  position{line: 1177, col: 11, offset: 44079},
											name: "ResolvedLink",
										},
										&ruleRefExpr{
											pos:  position{line: 1178, col: 11, offset: 44103},
											name: "OtherWord",
										},
										&ruleRefExpr{
											pos:  position{line: 1179, col: 11, offset: 44123},
											name: "Parenthesis",
										},
										&ruleRefExpr{
											pos:  position{line: 1180, col: 11, offset: 44145},
											name: "Newline",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1180, col: 21, offset: 44155},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "ResolvedLink",
			pos:  position{line: 1184, col: 1, offset: 44225},
			expr: &choiceExpr{
				pos: position{line: 1184, col: 17, offset: 44241},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1184, col: 17, offset: 44241},
						name: "ResolvedRelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1184, col: 40, offset: 44264},
						name: "ResolvedExternalLink",
					},
				},
			},
		},
		{
			name: "ResolvedRelativeLink",
			pos:  position{line: 1187, col: 1, offset: 44400},
			expr: &actionExpr{
				pos: position{line: 1187, col: 25, offset: 44424},
				run: (*parser).callonResolvedRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1187, col: 25, offset: 44424},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1187, col: 25, offset: 44424},
							val:        "link:",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1187, col: 33, offset: 44432},
							label: "url",
							expr: &choiceExpr{
								pos: position{line: 1187, col: 38, offset: 44437},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1187, col: 38, offset: 44437},
										name: "ResolvedLocation",
									},
									&ruleRefExpr{
										pos:  position{line: 1187, col: 57, offset: 44456},
										name: "ResolvedFileLocation",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1187, col: 79, offset: 44478},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1187, col: 97, offset: 44496},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ResolvedExternalLink",
			pos:  position{line: 1191, col: 1, offset: 44614},
			expr: &actionExpr{
				pos: position{line: 1191, col: 25, offset: 44638},
				run: (*parser).callonResolvedExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1191, col: 25, offset: 44638},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1191, col: 25, offset: 44638},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1191, col: 30, offset: 44643},
								name: "ResolvedLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 1191, col: 48, offset: 44661},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1191, col: 65, offset: 44678},
								expr: &ruleRefExpr{
									pos:  position{line: 1191, col: 66, offset: 44679},
									name: "LinkAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedLink",
			pos:  position{line: 1195, col: 1, offset: 44772},
			expr: &choiceExpr{
				pos: position{line: 1195, col: 15, offset: 44786},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1195, col: 15, offset: 44786},
						name: "RelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1195, col: 30, offset: 44801},
						name: "ExternalQuotedLink",
					},
				},
			},
		},
		{
			name: "ExternalQuotedLink",
			pos:  position{line: 1197, col: 1, offset: 44821},
			expr: &actionExpr{
				pos: position{line: 1197, col: 23, offset: 44843},
				run: (*parser).callonExternalQuotedLink1,
				expr: &seqExpr{
					pos: position{line: 1197, col: 23, offset: 44843},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1197, col: 23, offset: 44843},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1197, col: 28, offset: 44848},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1197, col: 38, offset: 44858},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1197, col: 56, offset: 44876},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ImageBlock",
			pos:  position{line: 1204, col: 1, offset: 45211},
			expr: &actionExpr{
				pos: position{line: 1204, col: 15, offset: 45225},
				run: (*parser).callonImageBlock1,
				expr: &seqExpr{
					pos: position{line: 1204, col: 15, offset: 45225},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1204, col: 15, offset: 45225},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1204, col: 26, offset: 45236},
								expr: &ruleRefExpr{
									pos:  position{line: 1204, col: 27, offset: 45237},
									name: "ElementAttributes",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1204, col: 47, offset: 45257},
							val:        "image::",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1204, col: 57, offset: 45267},
							label: "path",
							expr: &choiceExpr{
								pos: position{line: 1204, col: 63, offset: 45273},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1204, col: 63, offset: 45273},
										name: "Location",
									},
									&ruleRefExpr{
										pos:  position{line: 1204, col: 74, offset: 45284},
										name: "FileLocation",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1204, col: 88, offset: 45298},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1204, col: 106, offset: 45316},
								name: "ImageAttributes",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1204, col: 123, offset: 45333},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "InlineImage",
			pos:  position{line: 1208, col: 1, offset: 45453},
			expr: &actionExpr{
				pos: position{line: 1208, col: 16, offset: 45468},
				run: (*parser).callonInlineImage1,
				expr: &seqExpr{
					pos: position{line: 1208, col: 16, offset: 45468},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1208, col: 16, offset: 45468},
							val:        "image:",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 1208, col: 25, offset: 45477},
							expr: &litMatcher{
								pos:        position{line: 1208, col: 26, offset: 45478},
								val:        ":",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 1208, col: 30, offset: 45482},
							label: "path",
							expr: &choiceExpr{
								pos: position{line: 1208, col: 36, offset: 45488},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1208, col: 36, offset: 45488},
										name: "Location",
									},
									&ruleRefExpr{
										pos:  position{line: 1208, col: 47, offset: 45499},
										name: "FileLocation",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1208, col: 61, offset: 45513},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1208, col: 79, offset: 45531},
								name: "ImageAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ImageAttributes",
			pos:  position{line: 1212, col: 1, offset: 45652},
			expr: &actionExpr{
				pos: position{line: 1212, col: 20, offset: 45671},
				run: (*parser).callonImageAttributes1,
				expr: &seqExpr{
					pos: position{line: 1212, col: 20, offset: 45671},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1212, col: 20, offset: 45671},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1212, col: 24, offset: 45675},
							label: "alt",
							expr: &zeroOrOneExpr{
								pos: position{line: 1212, col: 28, offset: 45679},
								expr: &ruleRefExpr{
									pos:  position{line: 1212, col: 29, offset: 45680},
									name: "StandaloneAttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1212, col: 56, offset: 45707},
							expr: &litMatcher{
								pos:        position{line: 1212, col: 56, offset: 45707},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 1212, col: 61, offset: 45712},
							label: "width",
							expr: &zeroOrOneExpr{
								pos: position{line: 1212, col: 67, offset: 45718},
								expr: &ruleRefExpr{
									pos:  position{line: 1212, col: 68, offset: 45719},
									name: "StandaloneAttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1212, col: 95, offset: 45746},
							expr: &litMatcher{
								pos:        position{line: 1212, col: 95, offset: 45746},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 1212, col: 100, offset: 45751},
							label: "height",
							expr: &zeroOrOneExpr{
								pos: position{line: 1212, col: 107, offset: 45758},
								expr: &ruleRefExpr{
									pos:  position{line: 1212, col: 108, offset: 45759},
									name: "StandaloneAttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1212, col: 135, offset: 45786},
							expr: &litMatcher{
								pos:        position{line: 1212, col: 135, offset: 45786},
								val:        ",",
								ignoreCase: false,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1212, col: 140, offset: 45791},
							expr: &ruleRefExpr{
								pos:  position{line: 1212, col: 140, offset: 45791},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 1212, col: 144, offset: 45795},
							label: "otherattrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1212, col: 155, offset: 45806},
								expr: &ruleRefExpr{
									pos:  position{line: 1212, col: 156, offset: 45807},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1212, col: 175, offset: 45826},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "InlineFootnote",
			pos:  position{line: 1219, col: 1, offset: 46116},
			expr: &choiceExpr{
				pos: position{line: 1219, col: 19, offset: 46134},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1219, col: 19, offset: 46134},
						run: (*parser).callonInlineFootnote2,
						expr: &seqExpr{
							pos: position{line: 1219, col: 19, offset: 46134},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1219, col: 19, offset: 46134},
									val:        "footnote:[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1219, col: 32, offset: 46147},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1219, col: 41, offset: 46156},
										name: "FootnoteContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1219, col: 58, offset: 46173},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1221, col: 5, offset: 46241},
						run: (*parser).callonInlineFootnote8,
						expr: &seqExpr{
							pos: position{line: 1221, col: 5, offset: 46241},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1221, col: 5, offset: 46241},
									val:        "footnoteref:[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1221, col: 21, offset: 46257},
									label: "ref",
									expr: &ruleRefExpr{
										pos:  position{line: 1221, col: 26, offset: 46262},
										name: "FootnoteRef",
									},
								},
								&litMatcher{
									pos:        position{line: 1221, col: 39, offset: 46275},
									val:        ",",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1221, col: 43, offset: 46279},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1221, col: 52, offset: 46288},
										name: "FootnoteContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1221, col: 69, offset: 46305},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1223, col: 5, offset: 46383},
						run: (*parser).callonInlineFootnote17,
						expr: &seqExpr{
							pos: position{line: 1223, col: 5, offset: 46383},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1223, col: 5, offset: 46383},
									val:        "footnoteref:[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1223, col: 21, offset: 46399},
									label: "ref",
									expr: &ruleRefExpr{
										pos:  position{line: 1223, col: 26, offset: 46404},
										name: "FootnoteRef",
									},
								},
								&litMatcher{
									pos:        position{line: 1223, col: 39, offset: 46417},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FootnoteRef",
			pos:  position{line: 1227, col: 1, offset: 46525},
			expr: &actionExpr{
				pos: position{line: 1227, col: 16, offset: 46540},
				run: (*parser).callonFootnoteRef1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1227, col: 16, offset: 46540},
					expr: &choiceExpr{
						pos: position{line: 1227, col: 17, offset: 46541},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1227, col: 17, offset: 46541},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 1227, col: 29, offset: 46553},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 1227, col: 39, offset: 46563},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1227, col: 39, offset: 46563},
										expr: &litMatcher{
											pos:        position{line: 1227, col: 40, offset: 46564},
											val:        ",",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1227, col: 44, offset: 46568},
										expr: &litMatcher{
											pos:        position{line: 1227, col: 45, offset: 46569},
											val:        "]",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1227, col: 49, offset: 46573},
										expr: &ruleRefExpr{
											pos:  position{line: 1227, col: 50, offset: 46574},
											name: "EOL",
										},
									},
									&anyMatcher{
										line: 1227, col: 55, offset: 46579,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FootnoteContent",
			pos:  position{line: 1231, col: 1, offset: 46664},
			expr: &actionExpr{
				pos: position{line: 1231, col: 20, offset: 46683},
				run: (*parser).callonFootnoteContent1,
				expr: &labeledExpr{
					pos:   position{line: 1231, col: 20, offset: 46683},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1231, col: 29, offset: 46692},
						expr: &seqExpr{
							pos: position{line: 1231, col: 30, offset: 46693},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1231, col: 30, offset: 46693},
									expr: &litMatcher{
										pos:        position{line: 1231, col: 31, offset: 46694},
										val:        "]",
										ignoreCase: false,
									},
								},
								&notExpr{
									pos: position{line: 1231, col: 35, offset: 46698},
									expr: &ruleRefExpr{
										pos:  position{line: 1231, col: 36, offset: 46699},
										name: "EOL",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1231, col: 40, offset: 46703},
									expr: &ruleRefExpr{
										pos:  position{line: 1231, col: 40, offset: 46703},
										name: "WS",
									},
								},
								&notExpr{
									pos: position{line: 1231, col: 44, offset: 46707},
									expr: &ruleRefExpr{
										pos:  position{line: 1231, col: 45, offset: 46708},
										name: "InlineElementID",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1231, col: 61, offset: 46724},
									name: "InlineElement",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1231, col: 75, offset: 46738},
									expr: &ruleRefExpr{
										pos:  position{line: 1231, col: 75, offset: 46738},
										name: "WS",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DelimitedBlock",
			pos:  position{line: 1238, col: 1, offset: 47052},
			expr: &actionExpr{
				pos: position{line: 1238, col: 19, offset: 47070},
				run: (*parser).callonDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 1238, col: 19, offset: 47070},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1238, col: 19, offset: 47070},
							expr: &ruleRefExpr{
								pos:  position{line: 1238, col: 20, offset: 47071},
								name: "Alphanum",
							},
						},
						&labeledExpr{
							pos:   position{line: 1239, col: 5, offset: 47100},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 1239, col: 12, offset: 47107},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1239, col: 12, offset: 47107},
										name: "FencedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1240, col: 11, offset: 47130},
										name: "ListingBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1241, col: 11, offset: 47154},
										name: "ExampleBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1242, col: 11, offset: 47178},
										name: "VerseBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1243, col: 11, offset: 47200},
										name: "QuoteBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1244, col: 11, offset: 47222},
										name: "SidebarBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1245, col: 11, offset: 47245},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 1246, col: 11, offset: 47273},
										name: "Table",
									},
									&ruleRefExpr{
										pos:  position{line: 1247, col: 11, offset: 47289},
										name: "CommentBlock",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockDelimiter",
			pos:  position{line: 1251, col: 1, offset: 47330},
			expr: &choiceExpr{
				pos: position{line: 1251, col: 19, offset: 47348},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1251, col: 19, offset: 47348},
						name: "LiteralBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1252, col: 19, offset: 47389},
						name: "FencedBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1253, col: 19, offset: 47429},
						name: "ListingBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1254, col: 19, offset: 47470},
						name: "ExampleBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1255, col: 19, offset: 47511},
						name: "CommentBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1256, col: 19, offset: 47552},
						name: "QuoteBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1257, col: 19, offset: 47590},
						name: "SidebarBlockDelimiter",
					},
				},
			},
		},
		{
			name: "FencedBlockDelimiter",
			pos:  position{line: 1263, col: 1, offset: 47809},
			expr: &seqExpr{
				pos: position{line: 1263, col: 25, offset: 47833},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1263, col: 25, offset: 47833},
						val:        "```",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1263, col: 31, offset: 47839},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "FencedBlock",
			pos:  position{line: 1265, col: 1, offset: 47845},
			expr: &actionExpr{
				pos: position{line: 1265, col: 16, offset: 47860},
				run: (*parser).callonFencedBlock1,
				expr: &seqExpr{
					pos: position{line: 1265, col: 16, offset: 47860},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1265, col: 16, offset: 47860},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1265, col: 27, offset: 47871},
								expr: &ruleRefExpr{
									pos:  position{line: 1265, col: 28, offset: 47872},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1265, col: 48, offset: 47892},
							name: "FencedBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1265, col: 69, offset: 47913},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1265, col: 77, offset: 47921},
								expr: &ruleRefExpr{
									pos:  position{line: 1265, col: 78, offset: 47922},
									name: "FencedBlockContent",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1265, col: 100, offset: 47944},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1265, col: 100, offset: 47944},
									name: "FencedBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1265, col: 123, offset: 47967},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FencedBlockContent",
			pos:  position{line: 1269, col: 1, offset: 48075},
			expr: &choiceExpr{
				pos: position{line: 1269, col: 23, offset: 48097},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1269, col: 23, offset: 48097},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 1269, col: 35, offset: 48109},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 1269, col: 51, offset: 48125},
						name: "ListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 1269, col: 62, offset: 48136},
						name: "FencedBlockParagraph",
					},
				},
			},
		},
		{
			name: "FencedBlockParagraph",
			pos:  position{line: 1272, col: 1, offset: 48176},
			expr: &actionExpr{
				pos: position{line: 1272, col: 25, offset: 48200},
				run: (*parser).callonFencedBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1272, col: 25, offset: 48200},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1272, col: 31, offset: 48206},
						expr: &ruleRefExpr{
							pos:  position{line: 1272, col: 32, offset: 48207},
							name: "FencedBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "FencedBlockParagraphLine",
			pos:  position{line: 1276, col: 1, offset: 48320},
			expr: &actionExpr{
				pos: position{line: 1276, col: 29, offset: 48348},
				run: (*parser).callonFencedBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1276, col: 29, offset: 48348},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1276, col: 29, offset: 48348},
							expr: &ruleRefExpr{
								pos:  position{line: 1276, col: 30, offset: 48349},
								name: "FencedBlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 1276, col: 51, offset: 48370},
							expr: &ruleRefExpr{
								pos:  position{line: 1276, col: 52, offset: 48371},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1276, col: 62, offset: 48381},
							label: "line",
							expr: &ruleRefExpr{
								pos:  position{line: 1276, col: 68, offset: 48387},
								name: "InlineElements",
							},
						},
					},
				},
			},
		},
		{
			name: "ListingBlockDelimiter",
			pos:  position{line: 1283, col: 1, offset: 48625},
			expr: &seqExpr{
				pos: position{line: 1283, col: 26, offset: 48650},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1283, col: 26, offset: 48650},
						val:        "----",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1283, col: 33, offset: 48657},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "ListingBlock",
			pos:  position{line: 1285, col: 1, offset: 48663},
			expr: &actionExpr{
				pos: position{line: 1285, col: 17, offset: 48679},
				run: (*parser).callonListingBlock1,
				expr: &seqExpr{
					pos: position{line: 1285, col: 17, offset: 48679},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1285, col: 17, offset: 48679},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1285, col: 28, offset: 48690},
								expr: &ruleRefExpr{
									pos:  position{line: 1285, col: 29, offset: 48691},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1285, col: 49, offset: 48711},
							name: "ListingBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1285, col: 71, offset: 48733},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1285, col: 79, offset: 48741},
								expr: &ruleRefExpr{
									pos:  position{line: 1285, col: 80, offset: 48742},
									name: "ListingBlockElement",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1285, col: 103, offset: 48765},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1285, col: 103, offset: 48765},
									name: "ListingBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1285, col: 127, offset: 48789},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListingBlockElement",
			pos:  position{line: 1289, col: 1, offset: 48898},
			expr: &choiceExpr{
				pos: position{line: 1289, col: 24, offset: 48921},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1289, col: 24, offset: 48921},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 1289, col: 40, offset: 48937},
						name: "ListingBlockParagraph",
					},
					&ruleRefExpr{
						pos:  position{line: 1289, col: 64, offset: 48961},
						name: "BlankLine",
					},
				},
			},
		},
		{
			name: "ListingBlockParagraph",
			pos:  position{line: 1291, col: 1, offset: 48972},
			expr: &actionExpr{
				pos: position{line: 1291, col: 26, offset: 48997},
				run: (*parser).callonListingBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1291, col: 26, offset: 48997},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1291, col: 32, offset: 49003},
						expr: &ruleRefExpr{
							pos:  position{line: 1291, col: 33, offset: 49004},
							name: "ListingBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "ListingBlockParagraphLine",
			pos:  position{line: 1295, col: 1, offset: 49123},
			expr: &actionExpr{
				pos: position{line: 1295, col: 30, offset: 49152},
				run: (*parser).callonListingBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1295, col: 30, offset: 49152},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1295, col: 30, offset: 49152},
							expr: &ruleRefExpr{
								pos:  position{line: 1295, col: 31, offset: 49153},
								name: "ListingBlockDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1295, col: 53, offset: 49175},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1295, col: 59, offset: 49181},
								run: (*parser).callonListingBlockParagraphLine6,
								expr: &seqExpr{
									pos: position{line: 1295, col: 59, offset: 49181},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1295, col: 59, offset: 49181},
											expr: &ruleRefExpr{
												pos:  position{line: 1295, col: 60, offset: 49182},
												name: "EOF",
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 1295, col: 64, offset: 49186},
											expr: &choiceExpr{
												pos: position{line: 1295, col: 65, offset: 49187},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 1295, col: 65, offset: 49187},
														name: "Alphanums",
													},
													&ruleRefExpr{
														pos:  position{line: 1295, col: 77, offset: 49199},
														name: "Spaces",
													},
													&seqExpr{
														pos: position{line: 1295, col: 87, offset: 49209},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 1295, col: 87, offset: 49209},
																expr: &ruleRefExpr{
																	pos:  position{line: 1295, col: 88, offset: 49210},
																	name: "EOL",
																},
															},
															&anyMatcher{
																line: 1295, col: 92, offset: 49214,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1295, col: 128, offset: 49250},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockDelimiter",
			pos:  position{line: 1302, col: 1, offset: 49576},
			expr: &seqExpr{
				pos: position{line: 1302, col: 26, offset: 49601},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1302, col: 26, offset: 49601},
						val:        "====",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1302, col: 33, offset: 49608},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "ExampleBlock",
			pos:  position{line: 1304, col: 1, offset: 49614},
			expr: &actionExpr{
				pos: position{line: 1304, col: 17, offset: 49630},
				run: (*parser).callonExampleBlock1,
				expr: &seqExpr{
					pos: position{line: 1304, col: 17, offset: 49630},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1304, col: 17, offset: 49630},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1304, col: 28, offset: 49641},
								expr: &ruleRefExpr{
									pos:  position{line: 1304, col: 29, offset: 49642},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1304, col: 49, offset: 49662},
							name: "ExampleBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1304, col: 71, offset: 49684},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1304, col: 79, offset: 49692},
								expr: &choiceExpr{
									pos: position{line: 1304, col: 80, offset: 49693},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1304, col: 80, offset: 49693},
											name: "BlankLine",
										},
										&ruleRefExpr{
											pos:  position{line: 1304, col: 92, offset: 49705},
											name: "FileInclusion",
										},
										&ruleRefExpr{
											pos:  position{line: 1304, col: 108, offset: 49721},
											name: "ListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1304, col: 119, offset: 49732},
											name: "ExampleBlockParagraph",
										},
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1304, col: 145, offset: 49758},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1304, col: 145, offset: 49758},
									name: "ExampleBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1304, col: 169, offset: 49782},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockParagraph",
			pos:  position{line: 1309, col: 1, offset: 49909},
			expr: &actionExpr{
				pos: position{line: 1309, col: 26, offset: 49934},
				run: (*parser).callonExampleBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1309, col: 26, offset: 49934},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1309, col: 32, offset: 49940},
						expr: &ruleRefExpr{
							pos:  position{line: 1309, col: 33, offset: 49941},
							name: "ExampleBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockParagraphLine",
			pos:  position{line: 1313, col: 1, offset: 50055},
			expr: &actionExpr{
				pos: position{line: 1313, col: 30, offset: 50084},
				run: (*parser).callonExampleBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1313, col: 30, offset: 50084},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1313, col: 30, offset: 50084},
							expr: &ruleRefExpr{
								pos:  position{line: 1313, col: 31, offset: 50085},
								name: "ExampleBlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 1313, col: 53, offset: 50107},
							expr: &ruleRefExpr{
								pos:  position{line: 1313, col: 54, offset: 50108},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1313, col: 64, offset: 50118},
							label: "line",
							expr: &ruleRefExpr{
								pos:  position{line: 1313, col: 70, offset: 50124},
								name: "InlineElements",
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockDelimiter",
			pos:  position{line: 1320, col: 1, offset: 50360},
			expr: &seqExpr{
				pos: position{line: 1320, col: 24, offset: 50383},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1320, col: 24, offset: 50383},
						val:        "____",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1320, col: 31, offset: 50390},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "QuoteBlock",
			pos:  position{line: 1322, col: 1, offset: 50421},
			expr: &actionExpr{
				pos: position{line: 1322, col: 15, offset: 50435},
				run: (*parser).callonQuoteBlock1,
				expr: &seqExpr{
					pos: position{line: 1322, col: 15, offset: 50435},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1322, col: 15, offset: 50435},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1322, col: 26, offset: 50446},
								expr: &ruleRefExpr{
									pos:  position{line: 1322, col: 27, offset: 50447},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1322, col: 47, offset: 50467},
							name: "QuoteBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1322, col: 67, offset: 50487},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1322, col: 75, offset: 50495},
								expr: &ruleRefExpr{
									pos:  position{line: 1322, col: 76, offset: 50496},
									name: "QuoteBlockElement",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1322, col: 97, offset: 50517},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1322, col: 97, offset: 50517},
									name: "QuoteBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1322, col: 119, offset: 50539},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockElement",
			pos:  position{line: 1326, col: 1, offset: 50646},
			expr: &actionExpr{
				pos: position{line: 1327, col: 5, offset: 50672},
				run: (*parser).callonQuoteBlockElement1,
				expr: &seqExpr{
					pos: position{line: 1327, col: 5, offset: 50672},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1327, col: 5, offset: 50672},
							expr: &ruleRefExpr{
								pos:  position{line: 1327, col: 6, offset: 50673},
								name: "QuoteBlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 1327, col: 26, offset: 50693},
							expr: &ruleRefExpr{
								pos:  position{line: 1327, col: 27, offset: 50694},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1327, col: 31, offset: 50698},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1327, col: 40, offset: 50707},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1327, col: 40, offset: 50707},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 1328, col: 15, offset: 50732},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 1329, col: 15, offset: 50760},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1330, col: 15, offset: 50786},
										name: "ListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 1331, col: 15, offset: 50809},
										name: "FencedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1332, col: 15, offset: 50835},
										name: "ListingBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1333, col: 15, offset: 50862},
										name: "ExampleBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1334, col: 15, offset: 50889},
										name: "CommentBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1335, col: 15, offset: 50916},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 1336, col: 15, offset: 50948},
										name: "QuoteBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1337, col: 15, offset: 50974},
										name: "SidebarBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1338, col: 15, offset: 51001},
										name: "Table",
									},
									&ruleRefExpr{
										pos:  position{line: 1339, col: 15, offset: 51022},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1340, col: 15, offset: 51050},
										name: "DocumentAttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 1341, col: 15, offset: 51094},
										name: "DocumentAttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 1342, col: 15, offset: 51132},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1343, col: 15, offset: 51173},
										name: "QuoteBlockParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockParagraph",
			pos:  position{line: 1347, col: 1, offset: 51232},
			expr: &actionExpr{
				pos: position{line: 1347, col: 24, offset: 51255},
				run: (*parser).callonQuoteBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1347, col: 24, offset: 51255},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1347, col: 30, offset: 51261},
						expr: &ruleRefExpr{
							pos:  position{line: 1347, col: 31, offset: 51262},
							name: "InlineElements",
						},
					},
				},
			},
		},
		{
			name: "VerseBlock",
			pos:  position{line: 1356, col: 1, offset: 51608},
			expr: &actionExpr{
				pos: position{line: 1356, col: 15, offset: 51622},
				run: (*parser).callonVerseBlock1,
				expr: &seqExpr{
					pos: position{line: 1356, col: 15, offset: 51622},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1356, col: 15, offset: 51622},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1356, col: 27, offset: 51634},
								name: "ElementAttributes",
							},
						},
						&andCodeExpr{
							pos: position{line: 1357, col: 5, offset: 51658},
							run: (*parser).callonVerseBlock5,
						},
						&ruleRefExpr{
							pos:  position{line: 1361, col: 5, offset: 51844},
							name: "QuoteBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1361, col: 25, offset: 51864},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1361, col: 33, offset: 51872},
								expr: &ruleRefExpr{
									pos:  position{line: 1361, col: 34, offset: 51873},
									name: "VerseBlockElement",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1361, col: 55, offset: 51894},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1361, col: 55, offset: 51894},
									name: "QuoteBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1361, col: 77, offset: 51916},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockElement",
			pos:  position{line: 1365, col: 1, offset: 52031},
			expr: &choiceExpr{
				pos: position{line: 1365, col: 22, offset: 52052},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1365, col: 22, offset: 52052},
						name: "VerseFileInclude",
					},
					&ruleRefExpr{
						pos:  position{line: 1365, col: 41, offset: 52071},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 1365, col: 53, offset: 52083},
						name: "VerseBlockParagraph",
					},
				},
			},
		},
		{
			name: "VerseFileInclude",
			pos:  position{line: 1367, col: 1, offset: 52104},
			expr: &actionExpr{
				pos: position{line: 1367, col: 21, offset: 52124},
				run: (*parser).callonVerseFileInclude1,
				expr: &seqExpr{
					pos: position{line: 1367, col: 21, offset: 52124},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1367, col: 21, offset: 52124},
							expr: &ruleRefExpr{
								pos:  position{line: 1367, col: 22, offset: 52125},
								name: "QuoteBlockDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1367, col: 42, offset: 52145},
							label: "include",
							expr: &ruleRefExpr{
								pos:  position{line: 1367, col: 51, offset: 52154},
								name: "FileInclusion",
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraph",
			pos:  position{line: 1372, col: 1, offset: 52216},
			expr: &actionExpr{
				pos: position{line: 1372, col: 24, offset: 52239},
				run: (*parser).callonVerseBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1372, col: 24, offset: 52239},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1372, col: 30, offset: 52245},
						expr: &ruleRefExpr{
							pos:  position{line: 1372, col: 31, offset: 52246},
							name: "VerseBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraphLine",
			pos:  position{line: 1376, col: 1, offset: 52336},
			expr: &actionExpr{
				pos: position{line: 1376, col: 28, offset: 52363},
				run: (*parser).callonVerseBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1376, col: 28, offset: 52363},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1376, col: 28, offset: 52363},
							expr: &ruleRefExpr{
								pos:  position{line: 1376, col: 29, offset: 52364},
								name: "QuoteBlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 1376, col: 49, offset: 52384},
							expr: &ruleRefExpr{
								pos:  position{line: 1376, col: 50, offset: 52385},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1376, col: 60, offset: 52395},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1376, col: 66, offset: 52401},
								run: (*parser).callonVerseBlockParagraphLine8,
								expr: &seqExpr{
									pos: position{line: 1376, col: 66, offset: 52401},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 1376, col: 66, offset: 52401},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 1376, col: 75, offset: 52410},
												expr: &ruleRefExpr{
													pos:  position{line: 1376, col: 76, offset: 52411},
													name: "VerseBlockParagraphLineElement",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1376, col: 109, offset: 52444},
											name: "EOL",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraphLineElement",
			pos:  position{line: 1382, col: 1, offset: 52540},
			expr: &actionExpr{
				pos: position{line: 1382, col: 35, offset: 52574},
				run: (*parser).callonVerseBlockParagraphLineElement1,
				expr: &seqExpr{
					pos: position{line: 1382, col: 35, offset: 52574},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1382, col: 35, offset: 52574},
							expr: &ruleRefExpr{
								pos:  position{line: 1382, col: 36, offset: 52575},
								name: "EOL",
							},
						},
						&notExpr{
							pos: position{line: 1382, col: 40, offset: 52579},
							expr: &ruleRefExpr{
								pos:  position{line: 1382, col: 41, offset: 52580},
								name: "LineBreak",
							},
						},
						&labeledExpr{
							pos:   position{line: 1383, col: 5, offset: 52595},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1383, col: 14, offset: 52604},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1383, col: 14, offset: 52604},
										name: "Spaces",
									},
									&ruleRefExpr{
										pos:  position{line: 1384, col: 11, offset: 52622},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 1385, col: 11, offset: 52645},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 1386, col: 11, offset: 52661},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 1387, col: 11, offset: 52684},
										name: "InlineFootnote",
									},
									&ruleRefExpr{
										pos:  position{line: 1388, col: 11, offset: 52710},
										name: "QuotedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1389, col: 11, offset: 52732},
										name: "CrossReference",
									},
									&ruleRefExpr{
										pos:  position{line: 1390, col: 11, offset: 52758},
										name: "InlineUserMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 1391, col: 11, offset: 52785},
										name: "DocumentAttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 1392, col: 11, offset: 52826},
										name: "InlineElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 1393, col: 11, offset: 52853},
										name: "OtherWord",
									},
									&ruleRefExpr{
										pos:  position{line: 1394, col: 11, offset: 52873},
										name: "Parenthesis",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockDelimiter",
			pos:  position{line: 1401, col: 1, offset: 53105},
			expr: &seqExpr{
				pos: position{line: 1401, col: 26, offset: 53130},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1401, col: 26, offset: 53130},
						val:        "****",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1401, col: 33, offset: 53137},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "SidebarBlock",
			pos:  position{line: 1403, col: 1, offset: 53143},
			expr: &actionExpr{
				pos: position{line: 1403, col: 17, offset: 53159},
				run: (*parser).callonSidebarBlock1,
				expr: &seqExpr{
					pos: position{line: 1403, col: 17, offset: 53159},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1403, col: 17, offset: 53159},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1403, col: 28, offset: 53170},
								expr: &ruleRefExpr{
									pos:  position{line: 1403, col: 29, offset: 53171},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1403, col: 49, offset: 53191},
							name: "SidebarBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1403, col: 71, offset: 53213},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1403, col: 79, offset: 53221},
								expr: &ruleRefExpr{
									pos:  position{line: 1403, col: 80, offset: 53222},
									name: "SidebarBlockContent",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1403, col: 104, offset: 53246},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1403, col: 104, offset: 53246},
									name: "SidebarBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1403, col: 128, offset: 53270},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockContent",
			pos:  position{line: 1407, col: 1, offset: 53379},
			expr: &choiceExpr{
				pos: position{line: 1407, col: 24, offset: 53402},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1407, col: 24, offset: 53402},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 1407, col: 36, offset: 53414},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 1407, col: 52, offset: 53430},
						name: "ListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 1407, col: 63, offset: 53441},
						name: "NonSidebarBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 1407, col: 81, offset: 53459},
						name: "SidebarBlockParagraph",
					},
				},
			},
		},
		{
			name: "NonSidebarBlock",
			pos:  position{line: 1409, col: 1, offset: 53482},
			expr: &actionExpr{
				pos: position{line: 1409, col: 20, offset: 53501},
				run: (*parser).callonNonSidebarBlock1,
				expr: &seqExpr{
					pos: position{line: 1409, col: 20, offset: 53501},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1409, col: 20, offset: 53501},
							expr: &ruleRefExpr{
								pos:  position{line: 1409, col: 21, offset: 53502},
								name: "SidebarBlock",
							},
						},
						&labeledExpr{
							pos:   position{line: 1409, col: 34, offset: 53515},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1409, col: 43, offset: 53524},
								name: "DelimitedBlock",
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockParagraph",
			pos:  position{line: 1414, col: 1, offset: 53587},
			expr: &actionExpr{
				pos: position{line: 1414, col: 26, offset: 53612},
				run: (*parser).callonSidebarBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1414, col: 26, offset: 53612},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1414, col: 32, offset: 53618},
						expr: &ruleRefExpr{
							pos:  position{line: 1414, col: 33, offset: 53619},
							name: "SidebarBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockParagraphLine",
			pos:  position{line: 1418, col: 1, offset: 53733},
			expr: &actionExpr{
				pos: position{line: 1418, col: 30, offset: 53762},
				run: (*parser).callonSidebarBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1418, col: 30, offset: 53762},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1418, col: 30, offset: 53762},
							expr: &ruleRefExpr{
								pos:  position{line: 1418, col: 31, offset: 53763},
								name: "SidebarBlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 1418, col: 53, offset: 53785},
							expr: &ruleRefExpr{
								pos:  position{line: 1418, col: 54, offset: 53786},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1418, col: 64, offset: 53796},
							label: "line",
							expr: &ruleRefExpr{
								pos:  position{line: 1418, col: 70, offset: 53802},
								name: "InlineElements",
							},
						},
					},
				},
			},
		},
		{
			name: "Table",
			pos:  position{line: 1426, col: 1, offset: 54033},
			expr: &actionExpr{
				pos: position{line: 1426, col: 10, offset: 54042},
				run: (*parser).callonTable1,
				expr: &seqExpr{
					pos: position{line: 1426, col: 10, offset: 54042},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1426, col: 10, offset: 54042},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1426, col: 21, offset: 54053},
								expr: &ruleRefExpr{
									pos:  position{line: 1426, col: 22, offset: 54054},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1426, col: 42, offset: 54074},
							name: "TableDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1427, col: 5, offset: 54093},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 1427, col: 12, offset: 54100},
								expr: &ruleRefExpr{
									pos:  position{line: 1427, col: 13, offset: 54101},
									name: "TableLineHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1428, col: 5, offset: 54123},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1428, col: 11, offset: 54129},
								expr: &ruleRefExpr{
									pos:  position{line: 1428, col: 12, offset: 54130},
									name: "TableLine",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1429, col: 6, offset: 54147},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1429, col: 6, offset: 54147},
									name: "TableDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1429, col: 23, offset: 54164},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TableCellSeparator",
			pos:  position{line: 1433, col: 1, offset: 54279},
			expr: &seqExpr{
				pos: position{line: 1433, col: 23, offset: 54301},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1433, col: 23, offset: 54301},
						val:        "|",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1433, col: 27, offset: 54305},
						expr: &ruleRefExpr{
							pos:  position{line: 1433, col: 27, offset: 54305},
							name: "WS",
						},
					},
				},
			},
		},
		{
			name: "TableDelimiter",
			pos:  position{line: 1435, col: 1, offset: 54310},
			expr: &seqExpr{
				pos: position{line: 1435, col: 19, offset: 54328},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1435, col: 19, offset: 54328},
						val:        "|===",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1435, col: 26, offset: 54335},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "TableLineHeader",
			pos:  position{line: 1438, col: 1, offset: 54404},
			expr: &actionExpr{
				pos: position{line: 1438, col: 20, offset: 54423},
				run: (*parser).callonTableLineHeader1,
				expr: &seqExpr{
					pos: position{line: 1438, col: 20, offset: 54423},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1438, col: 20, offset: 54423},
							expr: &ruleRefExpr{
								pos:  position{line: 1438, col: 21, offset: 54424},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1438, col: 36, offset: 54439},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1438, col: 42, offset: 54445},
								expr: &ruleRefExpr{
									pos:  position{line: 1438, col: 43, offset: 54446},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1438, col: 55, offset: 54458},
							name: "EOL",
						},
						&ruleRefExpr{
							pos:  position{line: 1438, col: 59, offset: 54462},
							name: "BlankLine",
						},
					},
				},
			},
		},
		{
			name: "TableLine",
			pos:  position{line: 1442, col: 1, offset: 54530},
			expr: &actionExpr{
				pos: position{line: 1442, col: 14, offset: 54543},
				run: (*parser).callonTableLine1,
				expr: &seqExpr{
					pos: position{line: 1442, col: 14, offset: 54543},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1442, col: 14, offset: 54543},
							expr: &ruleRefExpr{
								pos:  position{line: 1442, col: 15, offset: 54544},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1442, col: 30, offset: 54559},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1442, col: 36, offset: 54565},
								expr: &ruleRefExpr{
									pos:  position{line: 1442, col: 37, offset: 54566},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1442, col: 49, offset: 54578},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1442, col: 53, offset: 54582},
							expr: &ruleRefExpr{
								pos:  position{line: 1442, col: 53, offset: 54582},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "TableCell",
			pos:  position{line: 1446, col: 1, offset: 54651},
			expr: &actionExpr{
				pos: position{line: 1446, col: 14, offset: 54664},
				run: (*parser).callonTableCell1,
				expr: &seqExpr{
					pos: position{line: 1446, col: 14, offset: 54664},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1446, col: 14, offset: 54664},
							name: "TableCellSeparator",
						},
						&labeledExpr{
							pos:   position{line: 1446, col: 33, offset: 54683},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1446, col: 42, offset: 54692},
								expr: &seqExpr{
									pos: position{line: 1446, col: 43, offset: 54693},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1446, col: 43, offset: 54693},
											expr: &ruleRefExpr{
												pos:  position{line: 1446, col: 44, offset: 54694},
												name: "TableCellSeparator",
											},
										},
										&notExpr{
											pos: position{line: 1446, col: 63, offset: 54713},
											expr: &ruleRefExpr{
												pos:  position{line: 1446, col: 64, offset: 54714},
												name: "EOL",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 1446, col: 68, offset: 54718},
											expr: &ruleRefExpr{
												pos:  position{line: 1446, col: 68, offset: 54718},
												name: "WS",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1446, col: 72, offset: 54722},
											name: "InlineElement",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1446, col: 86, offset: 54736},
											expr: &ruleRefExpr{
												pos:  position{line: 1446, col: 86, offset: 54736},
												name: "WS",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CommentBlockDelimiter",
			pos:  position{line: 1453, col: 1, offset: 54982},
			expr: &litMatcher{
				pos:        position{line: 1453, col: 26, offset: 55007},
				val:        "////",
				ignoreCase: false,
			},
		},
		{
			name: "CommentBlock",
			pos:  position{line: 1455, col: 1, offset: 55015},
			expr: &actionExpr{
				pos: position{line: 1455, col: 17, offset: 55031},
				run: (*parser).callonCommentBlock1,
				expr: &seqExpr{
					pos: position{line: 1455, col: 17, offset: 55031},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1455, col: 17, offset: 55031},
							name: "CommentBlockDelimiter",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1455, col: 39, offset: 55053},
							expr: &ruleRefExpr{
								pos:  position{line: 1455, col: 39, offset: 55053},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1455, col: 43, offset: 55057},
							name: "Newline",
						},
						&labeledExpr{
							pos:   position{line: 1455, col: 51, offset: 55065},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1455, col: 59, offset: 55073},
								expr: &ruleRefExpr{
									pos:  position{line: 1455, col: 60, offset: 55074},
									name: "CommentBlockLine",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1455, col: 81, offset: 55095},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 1455, col: 82, offset: 55096},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1455, col: 82, offset: 55096},
											name: "CommentBlockDelimiter",
										},
										&ruleRefExpr{
											pos:  position{line: 1455, col: 104, offset: 55118},
											name: "EOLS",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1455, col: 112, offset: 55126},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CommentBlockLine",
			pos:  position{line: 1459, col: 1, offset: 55232},
			expr: &actionExpr{
				pos: position{line: 1459, col: 21, offset: 55252},
				run: (*parser).callonCommentBlockLine1,
				expr: &seqExpr{
					pos: position{line: 1459, col: 21, offset: 55252},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 1459, col: 21, offset: 55252},
							expr: &choiceExpr{
								pos: position{line: 1459, col: 22, offset: 55253},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1459, col: 22, offset: 55253},
										name: "Alphanums",
									},
									&ruleRefExpr{
										pos:  position{line: 1459, col: 34, offset: 55265},
										name: "Spaces",
									},
									&seqExpr{
										pos: position{line: 1459, col: 44, offset: 55275},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1459, col: 44, offset: 55275},
												expr: &ruleRefExpr{
													pos:  position{line: 1459, col: 45, offset: 55276},
													name: "CommentBlockDelimiter",
												},
											},
											&notExpr{
												pos: position{line: 1459, col: 67, offset: 55298},
												expr: &ruleRefExpr{
													pos:  position{line: 1459, col: 68, offset: 55299},
													name: "EOL",
												},
											},
											&anyMatcher{
												line: 1459, col: 72, offset: 55303,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1459, col: 77, offset: 55308},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1463, col: 1, offset: 55348},
			expr: &actionExpr{
				pos: position{line: 1463, col: 22, offset: 55369},
				run: (*parser).callonSingleLineComment1,
				expr: &seqExpr{
					pos: position{line: 1463, col: 22, offset: 55369},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1463, col: 22, offset: 55369},
							expr: &ruleRefExpr{
								pos:  position{line: 1463, col: 23, offset: 55370},
								name: "CommentBlockDelimiter",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1463, col: 45, offset: 55392},
							expr: &ruleRefExpr{
								pos:  position{line: 1463, col: 45, offset: 55392},
								name: "WS",
							},
						},
						&litMatcher{
							pos:        position{line: 1463, col: 49, offset: 55396},
							val:        "//",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1463, col: 54, offset: 55401},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1463, col: 63, offset: 55410},
								name: "SingleLineCommentContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1463, col: 89, offset: 55436},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SingleLineCommentContent",
			pos:  position{line: 1467, col: 1, offset: 55501},
			expr: &actionExpr{
				pos: position{line: 1467, col: 29, offset: 55529},
				run: (*parser).callonSingleLineCommentContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1467, col: 29, offset: 55529},
					expr: &choiceExpr{
						pos: position{line: 1467, col: 30, offset: 55530},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1467, col: 30, offset: 55530},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 1467, col: 42, offset: 55542},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 1467, col: 52, offset: 55552},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1467, col: 52, offset: 55552},
										expr: &ruleRefExpr{
											pos:  position{line: 1467, col: 53, offset: 55553},
											name: "EOL",
										},
									},
									&anyMatcher{
										line: 1467, col: 58, offset: 55558,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralBlock",
			pos:  position{line: 1475, col: 1, offset: 55867},
			expr: &choiceExpr{
				pos: position{line: 1475, col: 17, offset: 55883},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1475, col: 17, offset: 55883},
						name: "ParagraphWithLiteralAttribute",
					},
					&ruleRefExpr{
						pos:  position{line: 1475, col: 49, offset: 55915},
						name: "ParagraphWithHeadingSpaces",
					},
					&ruleRefExpr{
						pos:  position{line: 1475, col: 78, offset: 55944},
						name: "ParagraphWithLiteralBlockDelimiter",
					},
				},
			},
		},
		{
			name: "LiteralBlockDelimiter",
			pos:  position{line: 1477, col: 1, offset: 55980},
			expr: &litMatcher{
				pos:        position{line: 1477, col: 26, offset: 56005},
				val:        "....",
				ignoreCase: false,
			},
		},
		{
			name: "ParagraphWithHeadingSpaces",
			pos:  position{line: 1480, col: 1, offset: 56077},
			expr: &actionExpr{
				pos: position{line: 1480, col: 31, offset: 56107},
				run: (*parser).callonParagraphWithHeadingSpaces1,
				expr: &seqExpr{
					pos: position{line: 1480, col: 31, offset: 56107},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1480, col: 31, offset: 56107},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1480, col: 42, offset: 56118},
								expr: &ruleRefExpr{
									pos:  position{line: 1480, col: 43, offset: 56119},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1480, col: 63, offset: 56139},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1480, col: 70, offset: 56146},
								name: "ParagraphWithHeadingSpacesLines",
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithHeadingSpacesLines",
			pos:  position{line: 1485, col: 1, offset: 56376},
			expr: &actionExpr{
				pos: position{line: 1486, col: 5, offset: 56416},
				run: (*parser).callonParagraphWithHeadingSpacesLines1,
				expr: &seqExpr{
					pos: position{line: 1486, col: 5, offset: 56416},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1486, col: 5, offset: 56416},
							label: "firstLine",
							expr: &actionExpr{
								pos: position{line: 1486, col: 16, offset: 56427},
								run: (*parser).callonParagraphWithHeadingSpacesLines4,
								expr: &seqExpr{
									pos: position{line: 1486, col: 16, offset: 56427},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1486, col: 16, offset: 56427},
											name: "WS",
										},
										&oneOrMoreExpr{
											pos: position{line: 1486, col: 19, offset: 56430},
											expr: &choiceExpr{
												pos: position{line: 1486, col: 20, offset: 56431},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 1486, col: 20, offset: 56431},
														name: "Alphanums",
													},
													&ruleRefExpr{
														pos:  position{line: 1486, col: 32, offset: 56443},
														name: "Spaces",
													},
													&actionExpr{
														pos: position{line: 1486, col: 41, offset: 56452},
														run: (*parser).callonParagraphWithHeadingSpacesLines11,
														expr: &seqExpr{
															pos: position{line: 1486, col: 42, offset: 56453},
															exprs: []interface{}{
																&notExpr{
																	pos: position{line: 1486, col: 42, offset: 56453},
																	expr: &ruleRefExpr{
																		pos:  position{line: 1486, col: 43, offset: 56454},
																		name: "EOL",
																	},
																},
																&anyMatcher{
																	line: 1486, col: 48, offset: 56459,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1490, col: 8, offset: 56550},
							name: "EOL",
						},
						&labeledExpr{
							pos:   position{line: 1491, col: 5, offset: 56613},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1491, col: 16, offset: 56624},
								expr: &actionExpr{
									pos: position{line: 1492, col: 9, offset: 56634},
									run: (*parser).callonParagraphWithHeadingSpacesLines19,
									expr: &seqExpr{
										pos: position{line: 1492, col: 9, offset: 56634},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1492, col: 9, offset: 56634},
												expr: &ruleRefExpr{
													pos:  position{line: 1492, col: 10, offset: 56635},
													name: "BlankLine",
												},
											},
											&labeledExpr{
												pos:   position{line: 1493, col: 9, offset: 56654},
												label: "otherLine",
												expr: &actionExpr{
													pos: position{line: 1493, col: 20, offset: 56665},
													run: (*parser).callonParagraphWithHeadingSpacesLines24,
													expr: &oneOrMoreExpr{
														pos: position{line: 1493, col: 20, offset: 56665},
														expr: &choiceExpr{
															pos: position{line: 1493, col: 21, offset: 56666},
															alternatives: []interface{}{
																&ruleRefExpr{
																	pos:  position{line: 1493, col: 21, offset: 56666},
																	name: "Alphanums",
																},
																&ruleRefExpr{
																	pos:  position{line: 1493, col: 33, offset: 56678},
																	name: "Spaces",
																},
																&seqExpr{
																	pos: position{line: 1493, col: 43, offset: 56688},
																	exprs: []interface{}{
																		&notExpr{
																			pos: position{line: 1493, col: 43, offset: 56688},
																			expr: &ruleRefExpr{
																				pos:  position{line: 1493, col: 44, offset: 56689},
																				name: "EOL",
																			},
																		},
																		&anyMatcher{
																			line: 1493, col: 49, offset: 56694,
																		},
																	},
																},
															},
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 1495, col: 12, offset: 56751},
												name: "EOL",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiter",
			pos:  position{line: 1502, col: 1, offset: 56981},
			expr: &actionExpr{
				pos: position{line: 1502, col: 39, offset: 57019},
				run: (*parser).callonParagraphWithLiteralBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1502, col: 39, offset: 57019},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1502, col: 39, offset: 57019},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1502, col: 50, offset: 57030},
								expr: &ruleRefExpr{
									pos:  position{line: 1502, col: 51, offset: 57031},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1503, col: 9, offset: 57059},
							name: "LiteralBlockDelimiter",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1503, col: 31, offset: 57081},
							expr: &ruleRefExpr{
								pos:  position{line: 1503, col: 31, offset: 57081},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1503, col: 35, offset: 57085},
							name: "Newline",
						},
						&labeledExpr{
							pos:   position{line: 1503, col: 43, offset: 57093},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1503, col: 50, offset: 57100},
								name: "ParagraphWithLiteralBlockDelimiterLines",
							},
						},
						&choiceExpr{
							pos: position{line: 1503, col: 92, offset: 57142},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 1503, col: 93, offset: 57143},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1503, col: 93, offset: 57143},
											name: "LiteralBlockDelimiter",
										},
										&ruleRefExpr{
											pos:  position{line: 1503, col: 115, offset: 57165},
											name: "EOLS",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1503, col: 123, offset: 57173},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLines",
			pos:  position{line: 1508, col: 1, offset: 57332},
			expr: &actionExpr{
				pos: position{line: 1508, col: 44, offset: 57375},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLines1,
				expr: &labeledExpr{
					pos:   position{line: 1508, col: 44, offset: 57375},
					label: "lines",
					expr: &zeroOrMoreExpr{
						pos: position{line: 1508, col: 50, offset: 57381},
						expr: &ruleRefExpr{
							pos:  position{line: 1508, col: 51, offset: 57382},
							name: "ParagraphWithLiteralBlockDelimiterLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLine",
			pos:  position{line: 1512, col: 1, offset: 57466},
			expr: &actionExpr{
				pos: position{line: 1513, col: 5, offset: 57521},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLine1,
				expr: &seqExpr{
					pos: position{line: 1513, col: 5, offset: 57521},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1513, col: 5, offset: 57521},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1513, col: 11, offset: 57527},
								run: (*parser).callonParagraphWithLiteralBlockDelimiterLine4,
								expr: &zeroOrMoreExpr{
									pos: position{line: 1513, col: 11, offset: 57527},
									expr: &choiceExpr{
										pos: position{line: 1513, col: 12, offset: 57528},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1513, col: 12, offset: 57528},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 1513, col: 24, offset: 57540},
												name: "Spaces",
											},
											&seqExpr{
												pos: position{line: 1513, col: 34, offset: 57550},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 1513, col: 34, offset: 57550},
														expr: &ruleRefExpr{
															pos:  position{line: 1513, col: 35, offset: 57551},
															name: "LiteralBlockDelimiter",
														},
													},
													&notExpr{
														pos: position{line: 1513, col: 57, offset: 57573},
														expr: &ruleRefExpr{
															pos:  position{line: 1513, col: 58, offset: 57574},
															name: "EOL",
														},
													},
													&anyMatcher{
														line: 1513, col: 62, offset: 57578,
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1515, col: 8, offset: 57627},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttribute",
			pos:  position{line: 1520, col: 1, offset: 57753},
			expr: &actionExpr{
				pos: position{line: 1521, col: 5, offset: 57791},
				run: (*parser).callonParagraphWithLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 1521, col: 5, offset: 57791},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1521, col: 5, offset: 57791},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1521, col: 16, offset: 57802},
								expr: &ruleRefExpr{
									pos:  position{line: 1521, col: 17, offset: 57803},
									name: "ElementAttributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1522, col: 5, offset: 57827},
							run: (*parser).callonParagraphWithLiteralAttribute6,
						},
						&labeledExpr{
							pos:   position{line: 1529, col: 5, offset: 58041},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1529, col: 12, offset: 58048},
								name: "ParagraphWithLiteralAttributeLines",
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralKind",
			pos:  position{line: 1533, col: 1, offset: 58198},
			expr: &actionExpr{
				pos: position{line: 1533, col: 16, offset: 58213},
				run: (*parser).callonLiteralKind1,
				expr: &litMatcher{
					pos:        position{line: 1533, col: 16, offset: 58213},
					val:        "literal",
					ignoreCase: false,
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttributeLines",
			pos:  position{line: 1538, col: 1, offset: 58296},
			expr: &actionExpr{
				pos: position{line: 1538, col: 39, offset: 58334},
				run: (*parser).callonParagraphWithLiteralAttributeLines1,
				expr: &labeledExpr{
					pos:   position{line: 1538, col: 39, offset: 58334},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1538, col: 45, offset: 58340},
						expr: &ruleRefExpr{
							pos:  position{line: 1538, col: 46, offset: 58341},
							name: "ParagraphWithLiteralAttributeLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttributeLine",
			pos:  position{line: 1542, col: 1, offset: 58421},
			expr: &actionExpr{
				pos: position{line: 1542, col: 38, offset: 58458},
				run: (*parser).callonParagraphWithLiteralAttributeLine1,
				expr: &seqExpr{
					pos: position{line: 1542, col: 38, offset: 58458},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1542, col: 38, offset: 58458},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1542, col: 44, offset: 58464},
								run: (*parser).callonParagraphWithLiteralAttributeLine4,
								expr: &seqExpr{
									pos: position{line: 1542, col: 44, offset: 58464},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1542, col: 44, offset: 58464},
											expr: &ruleRefExpr{
												pos:  position{line: 1542, col: 46, offset: 58466},
												name: "BlankLine",
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 1542, col: 57, offset: 58477},
											expr: &choiceExpr{
												pos: position{line: 1542, col: 58, offset: 58478},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 1542, col: 58, offset: 58478},
														name: "Alphanums",
													},
													&ruleRefExpr{
														pos:  position{line: 1542, col: 70, offset: 58490},
														name: "Spaces",
													},
													&seqExpr{
														pos: position{line: 1542, col: 80, offset: 58500},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 1542, col: 80, offset: 58500},
																expr: &ruleRefExpr{
																	pos:  position{line: 1542, col: 81, offset: 58501},
																	name: "EOL",
																},
															},
															&anyMatcher{
																line: 1542, col: 86, offset: 58506,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1544, col: 4, offset: 58547},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ConceleadIndexTerm",
			pos:  position{line: 1551, col: 1, offset: 58721},
			expr: &actionExpr{
				pos: position{line: 1551, col: 23, offset: 58743},
				run: (*parser).callonConceleadIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 1551, col: 23, offset: 58743},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1551, col: 23, offset: 58743},
							val:        "(((",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1551, col: 29, offset: 58749},
							label: "term1",
							expr: &ruleRefExpr{
								pos:  position{line: 1551, col: 35, offset: 58755},
								name: "Alphanums",
							},
						},
						&labeledExpr{
							pos:   position{line: 1551, col: 45, offset: 58765},
							label: "term2",
							expr: &zeroOrOneExpr{
								pos: position{line: 1551, col: 51, offset: 58771},
								expr: &actionExpr{
									pos: position{line: 1551, col: 52, offset: 58772},
									run: (*parser).callonConceleadIndexTerm8,
									expr: &seqExpr{
										pos: position{line: 1551, col: 52, offset: 58772},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 1551, col: 52, offset: 58772},
												expr: &ruleRefExpr{
													pos:  position{line: 1551, col: 52, offset: 58772},
													name: "WS",
												},
											},
											&litMatcher{
												pos:        position{line: 1551, col: 56, offset: 58776},
												val:        ",",
												ignoreCase: false,
											},
											&zeroOrMoreExpr{
												pos: position{line: 1551, col: 60, offset: 58780},
												expr: &ruleRefExpr{
													pos:  position{line: 1551, col: 60, offset: 58780},
													name: "WS",
												},
											},
											&labeledExpr{
												pos:   position{line: 1551, col: 64, offset: 58784},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 1551, col: 72, offset: 58792},
													name: "Alphanums",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1553, col: 9, offset: 58840},
							label: "term3",
							expr: &zeroOrOneExpr{
								pos: position{line: 1553, col: 15, offset: 58846},
								expr: &actionExpr{
									pos: position{line: 1553, col: 16, offset: 58847},
									run: (*parser).callonConceleadIndexTerm19,
									expr: &seqExpr{
										pos: position{line: 1553, col: 16, offset: 58847},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 1553, col: 16, offset: 58847},
												expr: &ruleRefExpr{
													pos:  position{line: 1553, col: 16, offset: 58847},
													name: "WS",
												},
											},
											&litMatcher{
												pos:        position{line: 1553, col: 20, offset: 58851},
												val:        ",",
												ignoreCase: false,
											},
											&zeroOrMoreExpr{
												pos: position{line: 1553, col: 24, offset: 58855},
												expr: &ruleRefExpr{
													pos:  position{line: 1553, col: 24, offset: 58855},
													name: "WS",
												},
											},
											&labeledExpr{
												pos:   position{line: 1553, col: 28, offset: 58859},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 1553, col: 36, offset: 58867},
													name: "Alphanums",
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1555, col: 9, offset: 58915},
							val:        ")))",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "BlankLine",
			pos:  position{line: 1562, col: 1, offset: 59099},
			expr: &actionExpr{
				pos: position{line: 1562, col: 14, offset: 59112},
				run: (*parser).callonBlankLine1,
				expr: &seqExpr{
					pos: position{line: 1562, col: 14, offset: 59112},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1562, col: 14, offset: 59112},
							expr: &ruleRefExpr{
								pos:  position{line: 1562, col: 15, offset: 59113},
								name: "EOF",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1562, col: 19, offset: 59117},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "Alphanum",
			pos:  position{line: 1569, col: 1, offset: 59265},
			expr: &charClassMatcher{
				pos:        position{line: 1569, col: 13, offset: 59277},
				val:        "[\\pL0-9]",
				ranges:     []rune{'0', '9'},
				classes:    []*unicode.RangeTable{rangeTable("L")},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Parenthesis",
			pos:  position{line: 1571, col: 1, offset: 59287},
			expr: &choiceExpr{
				pos: position{line: 1571, col: 16, offset: 59302},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1571, col: 16, offset: 59302},
						val:        "(",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1571, col: 22, offset: 59308},
						val:        ")",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1571, col: 28, offset: 59314},
						val:        "[",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1571, col: 34, offset: 59320},
						val:        "]",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1571, col: 40, offset: 59326},
						val:        "{",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1571, col: 46, offset: 59332},
						val:        "}",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "Alphanums",
			pos:  position{line: 1573, col: 1, offset: 59338},
			expr: &actionExpr{
				pos: position{line: 1573, col: 14, offset: 59351},
				run: (*parser).callonAlphanums1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1573, col: 14, offset: 59351},
					expr: &charClassMatcher{
						pos:        position{line: 1573, col: 14, offset: 59351},
						val:        "[\\pL0-9]",
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Dot",
			pos:  position{line: 1577, col: 1, offset: 59397},
			expr: &litMatcher{
				pos:        position{line: 1577, col: 8, offset: 59404},
				val:        ".",
				ignoreCase: false,
			},
		},
		{
			name: "SimpleWord",
			pos:  position{line: 1579, col: 1, offset: 59409},
			expr: &actionExpr{
				pos: position{line: 1579, col: 15, offset: 59423},
				run: (*parser).callonSimpleWord1,
				expr: &seqExpr{
					pos: position{line: 1579, col: 15, offset: 59423},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1579, col: 15, offset: 59423},
							name: "Alphanums",
						},
						&andExpr{
							pos: position{line: 1579, col: 25, offset: 59433},
							expr: &choiceExpr{
								pos: position{line: 1579, col: 27, offset: 59435},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1579, col: 27, offset: 59435},
										name: "WS",
									},
									&ruleRefExpr{
										pos:  position{line: 1579, col: 32, offset: 59440},
										name: "EOL",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OtherWord",
			pos:  position{line: 1584, col: 1, offset: 59705},
			expr: &actionExpr{
				pos: position{line: 1584, col: 14, offset: 59718},
				run: (*parser).callonOtherWord1,
				expr: &choiceExpr{
					pos: position{line: 1584, col: 15, offset: 59719},
					alternatives: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1584, col: 15, offset: 59719},
							name: "Alphanums",
						},
						&ruleRefExpr{
							pos:  position{line: 1584, col: 27, offset: 59731},
							name: "QuotedTextPrefix",
						},
						&oneOrMoreExpr{
							pos: position{line: 1584, col: 46, offset: 59750},
							expr: &actionExpr{
								pos: position{line: 1584, col: 47, offset: 59751},
								run: (*parser).callonOtherWord6,
								expr: &seqExpr{
									pos: position{line: 1584, col: 47, offset: 59751},
									exprs: []interface{}{
										&seqExpr{
											pos: position{line: 1584, col: 48, offset: 59752},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1584, col: 48, offset: 59752},
													expr: &ruleRefExpr{
														pos:  position{line: 1584, col: 49, offset: 59753},
														name: "Newline",
													},
												},
												&notExpr{
													pos: position{line: 1584, col: 57, offset: 59761},
													expr: &ruleRefExpr{
														pos:  position{line: 1584, col: 58, offset: 59762},
														name: "WS",
													},
												},
												&notExpr{
													pos: position{line: 1584, col: 61, offset: 59765},
													expr: &ruleRefExpr{
														pos:  position{line: 1584, col: 62, offset: 59766},
														name: "Dot",
													},
												},
												&notExpr{
													pos: position{line: 1584, col: 66, offset: 59770},
													expr: &ruleRefExpr{
														pos:  position{line: 1584, col: 67, offset: 59771},
														name: "QuotedTextPrefix",
													},
												},
												&notExpr{
													pos: position{line: 1584, col: 84, offset: 59788},
													expr: &ruleRefExpr{
														pos:  position{line: 1584, col: 85, offset: 59789},
														name: "LabeledListItemSeparator",
													},
												},
												&notExpr{
													pos: position{line: 1584, col: 110, offset: 59814},
													expr: &ruleRefExpr{
														pos:  position{line: 1584, col: 111, offset: 59815},
														name: "Parenthesis",
													},
												},
												&anyMatcher{
													line: 1584, col: 123, offset: 59827,
												},
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 1584, col: 126, offset: 59830},
											expr: &ruleRefExpr{
												pos:  position{line: 1584, col: 126, offset: 59830},
												name: "Dot",
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1586, col: 7, offset: 59939},
							expr: &litMatcher{
								pos:        position{line: 1586, col: 7, offset: 59939},
								val:        ".",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "Spaces",
			pos:  position{line: 1590, col: 1, offset: 60120},
			expr: &oneOrMoreExpr{
				pos: position{line: 1590, col: 11, offset: 60130},
				expr: &ruleRefExpr{
					pos:  position{line: 1590, col: 11, offset: 60130},
					name: "WS",
				},
			},
		},
		{
			name: "FileLocation",
			pos:  position{line: 1592, col: 1, offset: 60136},
			expr: &actionExpr{
				pos: position{line: 1592, col: 17, offset: 60152},
				run: (*parser).callonFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 1592, col: 17, offset: 60152},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1592, col: 26, offset: 60161},
						expr: &choiceExpr{
							pos: position{line: 1592, col: 27, offset: 60162},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1592, col: 27, offset: 60162},
									name: "FILENAME",
								},
								&ruleRefExpr{
									pos:  position{line: 1592, col: 38, offset: 60173},
									name: "DocumentAttributeSubstitution",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ResolvedFileLocation",
			pos:  position{line: 1596, col: 1, offset: 60265},
			expr: &actionExpr{
				pos: position{line: 1596, col: 25, offset: 60289},
				run: (*parser).callonResolvedFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 1596, col: 25, offset: 60289},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1596, col: 34, offset: 60298},
						expr: &seqExpr{
							pos: position{line: 1596, col: 35, offset: 60299},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1596, col: 35, offset: 60299},
									expr: &ruleRefExpr{
										pos:  position{line: 1596, col: 36, offset: 60300},
										name: "EOL",
									},
								},
								&notExpr{
									pos: position{line: 1596, col: 40, offset: 60304},
									expr: &ruleRefExpr{
										pos:  position{line: 1596, col: 41, offset: 60305},
										name: "WS",
									},
								},
								&notExpr{
									pos: position{line: 1596, col: 44, offset: 60308},
									expr: &litMatcher{
										pos:        position{line: 1596, col: 45, offset: 60309},
										val:        "[",
										ignoreCase: false,
									},
								},
								&anyMatcher{
									line: 1596, col: 49, offset: 60313,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Location",
			pos:  position{line: 1600, col: 1, offset: 60377},
			expr: &actionExpr{
				pos: position{line: 1600, col: 13, offset: 60389},
				run: (*parser).callonLocation1,
				expr: &labeledExpr{
					pos:   position{line: 1600, col: 13, offset: 60389},
					label: "elements",
					expr: &seqExpr{
						pos: position{line: 1600, col: 23, offset: 60399},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1600, col: 23, offset: 60399},
								name: "URL_SCHEME",
							},
							&oneOrMoreExpr{
								pos: position{line: 1600, col: 34, offset: 60410},
								expr: &choiceExpr{
									pos: position{line: 1600, col: 35, offset: 60411},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1600, col: 35, offset: 60411},
											name: "FILENAME",
										},
										&ruleRefExpr{
											pos:  position{line: 1600, col: 46, offset: 60422},
											name: "DocumentAttributeSubstitution",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FILENAME",
			pos:  position{line: 1604, col: 1, offset: 60515},
			expr: &oneOrMoreExpr{
				pos: position{line: 1604, col: 13, offset: 60527},
				expr: &choiceExpr{
					pos: position{line: 1604, col: 14, offset: 60528},
					alternatives: []interface{}{
						&charClassMatcher{
							pos:        position{line: 1604, col: 14, offset: 60528},
							val:        "[ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789~:/?#@!$&;=()*+,_%]",
							chars:      []rune{'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '~', ':', '/', '?', '#', '@', '!', '$', '&', ';', '=', '(', ')', '*', '+', ',', '_', '%'},
							ignoreCase: false,
							inverted:   false,
						},
						&litMatcher{
							pos:        position{line: 1604, col: 99, offset: 60613},
							val:        "-",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1604, col: 105, offset: 60619},
							val:        ".",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "ResolvedLocation",
			pos:  position{line: 1606, col: 1, offset: 60740},
			expr: &actionExpr{
				pos: position{line: 1606, col: 21, offset: 60760},
				run: (*parser).callonResolvedLocation1,
				expr: &labeledExpr{
					pos:   position{line: 1606, col: 21, offset: 60760},
					label: "elements",
					expr: &seqExpr{
						pos: position{line: 1606, col: 31, offset: 60770},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1606, col: 31, offset: 60770},
								name: "URL_SCHEME",
							},
							&ruleRefExpr{
								pos:  position{line: 1606, col: 42, offset: 60781},
								name: "RESOLVED_FILENAME",
							},
						},
					},
				},
			},
		},
		{
			name: "RESOLVED_FILENAME",
			pos:  position{line: 1610, col: 1, offset: 60860},
			expr: &oneOrMoreExpr{
				pos: position{line: 1610, col: 22, offset: 60881},
				expr: &choiceExpr{
					pos: position{line: 1610, col: 23, offset: 60882},
					alternatives: []interface{}{
						&charClassMatcher{
							pos:        position{line: 1610, col: 23, offset: 60882},
							val:        "[ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789~:/?#@!$&;=()*+_,%{}]",
							chars:      []rune{'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '~', ':', '/', '?', '#', '@', '!', '$', '&', ';', '=', '(', ')', '*', '+', '_', ',', '%', '{', '}'},
							ignoreCase: false,
							inverted:   false,
						},
						&litMatcher{
							pos:        position{line: 1610, col: 110, offset: 60969},
							val:        "-",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1610, col: 116, offset: 60975},
							val:        ".",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "URL",
			pos:  position{line: 1612, col: 1, offset: 61024},
			expr: &actionExpr{
				pos: position{line: 1612, col: 8, offset: 61031},
				run: (*parser).callonURL1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1612, col: 8, offset: 61031},
					expr: &choiceExpr{
						pos: position{line: 1612, col: 9, offset: 61032},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1612, col: 9, offset: 61032},
								name: "Alphanums",
							},
							&seqExpr{
								pos: position{line: 1612, col: 22, offset: 61045},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1612, col: 22, offset: 61045},
										expr: &ruleRefExpr{
											pos:  position{line: 1612, col: 23, offset: 61046},
											name: "Newline",
										},
									},
									&notExpr{
										pos: position{line: 1612, col: 31, offset: 61054},
										expr: &ruleRefExpr{
											pos:  position{line: 1612, col: 32, offset: 61055},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 1612, col: 35, offset: 61058},
										expr: &litMatcher{
											pos:        position{line: 1612, col: 36, offset: 61059},
											val:        "[",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1612, col: 40, offset: 61063},
										expr: &litMatcher{
											pos:        position{line: 1612, col: 41, offset: 61064},
											val:        "]",
											ignoreCase: false,
										},
									},
									&anyMatcher{
										line: 1612, col: 46, offset: 61069,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "URL_SCHEME",
			pos:  position{line: 1616, col: 1, offset: 61110},
			expr: &choiceExpr{
				pos: position{line: 1616, col: 15, offset: 61124},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1616, col: 15, offset: 61124},
						val:        "http://",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1616, col: 27, offset: 61136},
						val:        "https://",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1616, col: 40, offset: 61149},
						val:        "ftp://",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1616, col: 51, offset: 61160},
						val:        "irc://",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1616, col: 62, offset: 61171},
						val:        "mailto:",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "ID",
			pos:  position{line: 1618, col: 1, offset: 61182},
			expr: &actionExpr{
				pos: position{line: 1618, col: 7, offset: 61188},
				run: (*parser).callonID1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1618, col: 7, offset: 61188},
					expr: &choiceExpr{
						pos: position{line: 1618, col: 8, offset: 61189},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1618, col: 8, offset: 61189},
								name: "Alphanums",
							},
							&seqExpr{
								pos: position{line: 1618, col: 21, offset: 61202},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1618, col: 21, offset: 61202},
										expr: &ruleRefExpr{
											pos:  position{line: 1618, col: 22, offset: 61203},
											name: "Newline",
										},
									},
									&notExpr{
										pos: position{line: 1618, col: 30, offset: 61211},
										expr: &ruleRefExpr{
											pos:  position{line: 1618, col: 31, offset: 61212},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 1618, col: 34, offset: 61215},
										expr: &litMatcher{
											pos:        position{line: 1618, col: 35, offset: 61216},
											val:        "[",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1618, col: 39, offset: 61220},
										expr: &litMatcher{
											pos:        position{line: 1618, col: 40, offset: 61221},
											val:        "]",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1618, col: 44, offset: 61225},
										expr: &litMatcher{
											pos:        position{line: 1618, col: 45, offset: 61226},
											val:        "<<",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1618, col: 50, offset: 61231},
										expr: &litMatcher{
											pos:        position{line: 1618, col: 51, offset: 61232},
											val:        ">>",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1618, col: 56, offset: 61237},
										expr: &litMatcher{
											pos:        position{line: 1618, col: 57, offset: 61238},
											val:        ",",
											ignoreCase: false,
										},
									},
									&anyMatcher{
										line: 1618, col: 62, offset: 61243,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DIGIT",
			pos:  position{line: 1622, col: 1, offset: 61284},
			expr: &actionExpr{
				pos: position{line: 1622, col: 10, offset: 61293},
				run: (*parser).callonDIGIT1,
				expr: &charClassMatcher{
					pos:        position{line: 1622, col: 10, offset: 61293},
					val:        "[0-9]",
					ranges:     []rune{'0', '9'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "NUMBER",
			pos:  position{line: 1626, col: 1, offset: 61335},
			expr: &actionExpr{
				pos: position{line: 1626, col: 11, offset: 61345},
				run: (*parser).callonNUMBER1,
				expr: &seqExpr{
					pos: position{line: 1626, col: 11, offset: 61345},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1626, col: 11, offset: 61345},
							expr: &litMatcher{
								pos:        position{line: 1626, col: 11, offset: 61345},
								val:        "-",
								ignoreCase: false,
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1626, col: 16, offset: 61350},
							expr: &ruleRefExpr{
								pos:  position{line: 1626, col: 16, offset: 61350},
								name: "DIGIT",
							},
						},
					},
				},
			},
		},
		{
			name: "WS",
			pos:  position{line: 1630, col: 1, offset: 61402},
			expr: &choiceExpr{
				pos: position{line: 1630, col: 7, offset: 61408},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1630, col: 7, offset: 61408},
						val:        " ",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1630, col: 13, offset: 61414},
						run: (*parser).callonWS3,
						expr: &litMatcher{
							pos:        position{line: 1630, col: 13, offset: 61414},
							val:        "\t",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Newline",
			pos:  position{line: 1634, col: 1, offset: 61455},
			expr: &choiceExpr{
				pos: position{line: 1634, col: 12, offset: 61466},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1634, col: 12, offset: 61466},
						val:        "\r\n",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1634, col: 21, offset: 61475},
						val:        "\r",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1634, col: 28, offset: 61482},
						val:        "\n",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 1636, col: 1, offset: 61488},
			expr: &notExpr{
				pos: position{line: 1636, col: 8, offset: 61495},
				expr: &anyMatcher{
					line: 1636, col: 9, offset: 61496,
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 1638, col: 1, offset: 61499},
			expr: &choiceExpr{
				pos: position{line: 1638, col: 8, offset: 61506},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1638, col: 8, offset: 61506},
						name: "Newline",
					},
					&ruleRefExpr{
						pos:  position{line: 1638, col: 18, offset: 61516},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "EOLS",
			pos:  position{line: 1640, col: 1, offset: 61521},
			expr: &seqExpr{
				pos: position{line: 1640, col: 9, offset: 61529},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1640, col: 9, offset: 61529},
						expr: &ruleRefExpr{
							pos:  position{line: 1640, col: 9, offset: 61529},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1640, col: 13, offset: 61533},
						name: "EOL",
					},
				},
			},
		},
	},
}

func (c *current) onAsciidocDocument1(frontmatter, blocks interface{}) (interface{}, error) {
	return types.NewDraftDocument(frontmatter, blocks.([]interface{}))
}

func (p *parser) callonAsciidocDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsciidocDocument1(stack["frontmatter"], stack["blocks"])
}

func (c *current) onAsciidocDocumentWithinDelimitedBlock1(frontmatter, blocks interface{}) (interface{}, error) {
	return types.NewDraftDocument(frontmatter, blocks.([]interface{}))
}

func (p *parser) callonAsciidocDocumentWithinDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsciidocDocumentWithinDelimitedBlock1(stack["frontmatter"], stack["blocks"])
}

func (c *current) onTextDocument1(blocks interface{}) (interface{}, error) {
	return types.NewDraftDocument(nil, blocks.([]interface{}))
}

func (p *parser) callonTextDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextDocument1(stack["blocks"])
}

func (c *current) onAsciidocDocumentBlocks1(header, others interface{}) (interface{}, error) {
	if header != nil && others != nil {
		return append([]interface{}{header}, others.([]interface{})...), nil
	} else if others != nil {
		return others.([]interface{}), nil
	}
	return []interface{}{}, nil
}

func (p *parser) callonAsciidocDocumentBlocks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsciidocDocumentBlocks1(stack["header"], stack["others"])
}

func (c *current) onDocumentBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDocumentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock1(stack["block"])
}

func (c *current) onDocumentBlockWithinDelimitedBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDocumentBlockWithinDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlockWithinDelimitedBlock1(stack["block"])
}

func (c *current) onTextDocumentBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonTextDocumentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextDocumentBlock1(stack["block"])
}

func (c *current) onYamlFrontMatter1(content interface{}) (interface{}, error) {
	return types.NewYamlFrontMatter(content.(string))
}

func (p *parser) callonYamlFrontMatter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatter1(stack["content"])
}

func (c *current) onYamlFrontMatterContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonYamlFrontMatterContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatterContent1()
}

func (c *current) onDocumentHeader1(title, id, authors, revision interface{}) (interface{}, error) {
	return types.NewDocumentHeader(title.([]interface{}), authors, revision)
}

func (p *parser) callonDocumentHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader1(stack["title"], stack["id"], stack["authors"], stack["revision"])
}

func (c *current) onDocumentAuthorsInlineForm1(authors interface{}) (interface{}, error) {
	return types.NewDocumentAuthors(authors.([]interface{}))
}

func (p *parser) callonDocumentAuthorsInlineForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsInlineForm1(stack["authors"])
}

func (c *current) onDocumentAuthorsAttributeForm1(author interface{}) (interface{}, error) {
	return []types.DocumentAuthor{author.(types.DocumentAuthor)}, nil
}

func (p *parser) callonDocumentAuthorsAttributeForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsAttributeForm1(stack["author"])
}

func (c *current) onDocumentAuthor1(fullname, email interface{}) (interface{}, error) {
	return types.NewDocumentAuthor(fullname, email)
}

func (p *parser) callonDocumentAuthor1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthor1(stack["fullname"], stack["email"])
}

func (c *current) onDocumentAuthorName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorName1()
}

func (c *current) onDocumentAuthorEmail5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorEmail5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail5()
}

func (c *current) onDocumentAuthorEmail1(email interface{}) (interface{}, error) {
	return email, nil
}

func (p *parser) callonDocumentAuthorEmail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail1(stack["email"])
}

func (c *current) onDocumentRevision9(revnumber, revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(revnumber, revdate, revremark)

}

func (p *parser) callonDocumentRevision9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision9(stack["revnumber"], stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision23(revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(nil, revdate, revremark)

}

func (p *parser) callonDocumentRevision23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision23(stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision1(revision interface{}) (interface{}, error) {
	return revision, nil
}

func (p *parser) callonDocumentRevision1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision1(stack["revision"])
}

func (c *current) onDocumentRevisionNumber2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber2()
}

func (c *current) onDocumentRevisionNumber18() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber18()
}

func (c *current) onDocumentRevisionDate1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionDate1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionDate1()
}

func (c *current) onDocumentRevisionRemark1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionRemark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionRemark1()
}

func (c *current) onDocumentAttributeDeclaration9(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonDocumentAttributeDeclaration9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeDeclaration9(stack["value"])
}

func (c *current) onDocumentAttributeDeclaration1(name, value interface{}) (interface{}, error) {
	return types.NewDocumentAttributeDeclaration(name.(string), value)
}

func (p *parser) callonDocumentAttributeDeclaration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeDeclaration1(stack["name"], stack["value"])
}

func (c *current) onDocumentAttributeName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAttributeName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeName1()
}

func (c *current) onDocumentAttributeValue1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeValue1()
}

func (c *current) onDocumentAttributeReset2(name interface{}) (interface{}, error) {
	return types.NewDocumentAttributeReset(name.(string))
}

func (p *parser) callonDocumentAttributeReset2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeReset2(stack["name"])
}

func (c *current) onDocumentAttributeReset9(name interface{}) (interface{}, error) {
	return types.NewDocumentAttributeReset(name.(string))
}

func (p *parser) callonDocumentAttributeReset9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeReset9(stack["name"])
}

func (c *current) onDocumentAttributeSubstitution1(name interface{}) (interface{}, error) {
	return types.NewDocumentAttributeSubstitution(name.(string))
}

func (p *parser) callonDocumentAttributeSubstitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeSubstitution1(stack["name"])
}

func (c *current) onElementAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewElementAttributes(attrs.([]interface{})), nil
}

func (p *parser) callonElementAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributes1(stack["attrs"])
}

func (c *current) onElementAttribute1(attr interface{}) (interface{}, error) {
	return attr, nil // avoid returning something like `[]interface{}{attr, EOL}`
}

func (p *parser) callonElementAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttribute1(stack["attr"])
}

func (c *current) onElementID2(id interface{}) (interface{}, error) {
	return types.NewElementID(id.(string))
}

func (p *parser) callonElementID2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementID2(stack["id"])
}

func (c *current) onElementID9(id interface{}) (interface{}, error) {
	return types.NewElementID(id.(string))
}

func (p *parser) callonElementID9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementID9(stack["id"])
}

func (c *current) onInlineElementID1(id interface{}) (interface{}, error) {
	// no EOL here since there can be multiple InlineElementID on the same line
	return types.NewInlineElementID(id.(string))
}

func (p *parser) callonInlineElementID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementID1(stack["id"])
}

func (c *current) onElementTitle5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonElementTitle5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitle5()
}

func (c *current) onElementTitle1(title interface{}) (interface{}, error) {
	return types.NewElementTitle(title.(string))
}

func (p *parser) callonElementTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitle1(stack["title"])
}

func (c *current) onElementRole5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonElementRole5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementRole5()
}

func (c *current) onElementRole1(role interface{}) (interface{}, error) {
	return types.NewElementRole(role.(string))
}

func (p *parser) callonElementRole1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementRole1(stack["role"])
}

func (c *current) onLiteralAttribute1() (interface{}, error) {
	return types.NewLiteralAttribute()
}

func (p *parser) callonLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralAttribute1()
}

func (c *current) onAdmonitionMarkerAttribute1(k interface{}) (interface{}, error) {
	return types.NewAdmonitionAttribute(k.(types.AdmonitionKind))
}

func (p *parser) callonAdmonitionMarkerAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionMarkerAttribute1(stack["k"])
}

func (c *current) onSourceAttributes6(attr interface{}) (interface{}, error) {
	return attr, nil
}

func (p *parser) callonSourceAttributes6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes6(stack["attr"])
}

func (c *current) onSourceAttributes14(attr interface{}) (interface{}, error) {
	return attr, nil
}

func (p *parser) callonSourceAttributes14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes14(stack["attr"])
}

func (c *current) onSourceAttributes1(language, others interface{}) (interface{}, error) {
	return types.NewSourceAttributes(language, others.([]interface{})...)
}

func (p *parser) callonSourceAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes1(stack["language"], stack["others"])
}

func (c *current) onAttributeGroup1(attributes interface{}) (interface{}, error) {
	return types.NewAttributeGroup(attributes.([]interface{}))
}

func (p *parser) callonAttributeGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeGroup1(stack["attributes"])
}

func (c *current) onGenericAttribute2(key, value interface{}) (interface{}, error) {
	// value is (optionally) set
	return types.NewGenericAttribute(key.(string), value)

}

func (p *parser) callonGenericAttribute2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttribute2(stack["key"], stack["value"])
}

func (c *current) onGenericAttribute14(key interface{}) (interface{}, error) {
	// value is not set
	return types.NewGenericAttribute(key.(string), nil)

}

func (p *parser) callonGenericAttribute14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttribute14(stack["key"])
}

func (c *current) onAttributeKey1(key interface{}) (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeKey1(stack["key"])
}

func (c *current) onAttributeValue1(value interface{}) (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue1(stack["value"])
}

func (c *current) onStandaloneAttributeValue1(value interface{}) (interface{}, error) {
	// standalone attribute value cannot be followed by a `=`, otherwise it causes troubles for standalone values (eg: in images)
	return string(c.text), nil
}

func (p *parser) callonStandaloneAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStandaloneAttributeValue1(stack["value"])
}

func (c *current) onHorizontalLayout1() (interface{}, error) {
	return types.ElementAttributes{"layout": "horizontal"}, nil
}

func (p *parser) callonHorizontalLayout1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHorizontalLayout1()
}

func (c *current) onQuoteAttributes1(author, title interface{}) (interface{}, error) {
	return types.NewQuoteAttributes("quote", author, title)
}

func (p *parser) callonQuoteAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttributes1(stack["author"], stack["title"])
}

func (c *current) onVerseAttributes1(author, title interface{}) (interface{}, error) {
	return types.NewQuoteAttributes("verse", author.(string), title.(string))
}

func (p *parser) callonVerseAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseAttributes1(stack["author"], stack["title"])
}

func (c *current) onQuoteAttribute1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttribute1()
}

func (c *current) onInlineAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewInlineAttributes(attrs.([]interface{}))
}

func (p *parser) callonInlineAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAttributes1(stack["attrs"])
}

func (c *current) onSection7() (interface{}, error) {

	// `=` is level 0, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonSection7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection7()
}

func (c *current) onSection10(attributes, level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonSection10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection10(stack["attributes"], stack["level"])
}

func (c *current) onSection1(attributes, level, title, id interface{}) (interface{}, error) {
	return types.NewSection(level.(int), title.([]interface{}), id.([]interface{}), attributes)
}

func (p *parser) callonSection1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection1(stack["attributes"], stack["level"], stack["title"], stack["id"])
}

func (c *current) onTitleElements1(elements interface{}) (interface{}, error) {
	// absorbs heading and trailing spaces
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonTitleElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElements1(stack["elements"])
}

func (c *current) onTitleElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonTitleElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElement1(stack["element"])
}

func (c *current) onUserMacroBlock1(name, value, attrs interface{}) (interface{}, error) {
	return types.NewUserMacroBlock(name.(string), value.(string), attrs.(types.ElementAttributes), string(c.text))
}

func (p *parser) callonUserMacroBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onInlineUserMacro1(name, value, attrs interface{}) (interface{}, error) {
	return types.NewInlineUserMacro(name.(string), value.(string), attrs.(types.ElementAttributes), string(c.text))
}

func (p *parser) callonInlineUserMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onUserMacroName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUserMacroName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroName1()
}

func (c *current) onUserMacroValue1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUserMacroValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroValue1()
}

func (c *current) onUserMacroAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewInlineAttributes(attrs.([]interface{}))
}

func (p *parser) callonUserMacroAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroAttributes1(stack["attrs"])
}

func (c *current) onFileInclusion4(path, inlineAttributes interface{}) (interface{}, error) {

	return types.NewFileInclusion(path.(types.Location), inlineAttributes.(types.ElementAttributes), string(c.text))

}

func (p *parser) callonFileInclusion4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion4(stack["path"], stack["inlineAttributes"])
}

func (c *current) onFileInclusion1(incl interface{}) (interface{}, error) {
	return incl.(types.FileInclusion), nil
}

func (p *parser) callonFileInclusion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion1(stack["incl"])
}

func (c *current) onFileIncludeAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewInlineAttributes(attrs.([]interface{}))
}

func (p *parser) callonFileIncludeAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileIncludeAttributes1(stack["attrs"])
}

func (c *current) onLineRangesAttribute1(lines interface{}) (interface{}, error) {

	return types.NewLineRangesAttribute(lines)
}

func (p *parser) callonLineRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttribute1(stack["lines"])
}

func (c *current) onLineRangesAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonLineRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleLineRanges9(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleLineRanges9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges9(stack["other"])
}

func (c *current) onMultipleLineRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultipleQuotedLineRanges10(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleQuotedLineRanges10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges10(stack["other"])
}

func (c *current) onMultipleQuotedLineRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleQuotedLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultiLineRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineRange1(stack["start"], stack["end"])
}

func (c *current) onMultiLineQuotedRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineQuotedRange1(stack["start"], stack["end"])
}

func (c *current) onSingleLineRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineRange1(stack["singleline"])
}

func (c *current) onSingleLineQuotedRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineQuotedRange1(stack["singleline"])
}

func (c *current) onUndefinedLineRange1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUndefinedLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUndefinedLineRange1()
}

func (c *current) onTagRangesAttribute1(tags interface{}) (interface{}, error) {
	//TODO: check if 'tags'/'tag' is allowed for both single and multiple values
	return types.NewTagRangesAttribute(tags.([]interface{}))
}

func (p *parser) callonTagRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttribute1(stack["tags"])
}

func (c *current) onTagRangesAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonTagRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleTagRanges7(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleTagRanges7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges7(stack["other"])
}

func (c *current) onMultipleTagRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleTagRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges1(stack["first"], stack["others"])
}

func (c *current) onTagRange2(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), true)
}

func (p *parser) callonTagRange2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange2(stack["tag"])
}

func (c *current) onTagRange7(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), false)
}

func (p *parser) callonTagRange7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange7(stack["tag"])
}

func (c *current) onTagWildcard4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagWildcard4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard4()
}

func (c *current) onTagWildcard7(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagWildcard7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard7(stack["stars"])
}

func (c *current) onTagWildcard1(stars interface{}) (interface{}, error) {
	return stars, nil
}

func (p *parser) callonTagWildcard1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard1(stack["stars"])
}

func (c *current) onIncludedFileLine8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine8()
}

func (c *current) onIncludedFileLine1(content interface{}) (interface{}, error) {
	return types.NewIncludedFileLine(content.([]interface{}))
}

func (p *parser) callonIncludedFileLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine1(stack["content"])
}

func (c *current) onIncludedFileStartTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileStartTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag5()
}

func (c *current) onIncludedFileStartTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileStartTag(tag.(string))
}

func (p *parser) callonIncludedFileStartTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag1(stack["tag"])
}

func (c *current) onIncludedFileEndTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileEndTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag5()
}

func (c *current) onIncludedFileEndTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileEndTag(tag.(string))
}

func (p *parser) callonIncludedFileEndTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag1(stack["tag"])
}

func (c *current) onListParagraph2(comment interface{}) (interface{}, error) {
	return comment, nil

}

func (p *parser) callonListParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph2(stack["comment"])
}

func (c *current) onListParagraph5(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), nil)

}

func (p *parser) callonListParagraph5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph5(stack["lines"])
}

func (c *current) onListParagraphLine24(elements, linebreak interface{}) (interface{}, error) {
	// absorbs heading and trailing spaces
	return types.NewInlineElements(append(elements.([]interface{}), linebreak))

}

func (p *parser) callonListParagraphLine24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine24(stack["elements"], stack["linebreak"])
}

func (c *current) onListParagraphLine1(line interface{}) (interface{}, error) {

	return line, nil

}

func (p *parser) callonListParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine1(stack["line"])
}

func (c *current) onContinuedListItemElement1(blanklines, element interface{}) (interface{}, error) {
	return types.NewContinuedListItemElement(-len(blanklines.([]interface{})), element) // offset is negative
}

func (p *parser) callonContinuedListItemElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemElement1(stack["blanklines"], stack["element"])
}

func (c *current) onOrderedListItem1(attributes, prefix, content interface{}) (interface{}, error) {
	return types.NewOrderedListItem(prefix.(types.OrderedListItemPrefix), content.([]interface{}), attributes)
}

func (p *parser) callonOrderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItem1(stack["attributes"], stack["prefix"], stack["content"])
}

func (c *current) onOrderedListItemPrefix10() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonOrderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix10()
}

func (c *current) onOrderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonOrderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix13(stack["depth"])
}

func (c *current) onOrderedListItemPrefix7(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListItemPrefix(types.Arabic, 1)
	case 2:
		return types.NewOrderedListItemPrefix(types.LowerAlpha, 2)
	case 3:
		return types.NewOrderedListItemPrefix(types.LowerRoman, 3)
	case 4:
		return types.NewOrderedListItemPrefix(types.UpperAlpha, 4)
	default:
		return types.NewOrderedListItemPrefix(types.UpperRoman, 5)
	}

}

func (p *parser) callonOrderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix7(stack["depth"])
}

func (c *current) onOrderedListItemPrefix14() (interface{}, error) {
	// numbering style: "1."
	return types.NewOrderedListItemPrefix(types.Arabic, 1)

}

func (p *parser) callonOrderedListItemPrefix14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix14()
}

func (c *current) onOrderedListItemPrefix19() (interface{}, error) {
	// numbering style: "a."
	return types.NewOrderedListItemPrefix(types.LowerAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix19()
}

func (c *current) onOrderedListItemPrefix23() (interface{}, error) {
	// numbering style: "A."
	return types.NewOrderedListItemPrefix(types.UpperAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix23()
}

func (c *current) onOrderedListItemPrefix27() (interface{}, error) {
	// numbering style: "i)"
	return types.NewOrderedListItemPrefix(types.LowerRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix27()
}

func (c *current) onOrderedListItemPrefix32() (interface{}, error) {
	// numbering style: "I)"
	return types.NewOrderedListItemPrefix(types.UpperRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix32()
}

func (c *current) onOrderedListItemPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonOrderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix1(stack["prefix"])
}

func (c *current) onOrderedListItemContent1(elements interface{}) (interface{}, error) {
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonOrderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemContent1(stack["elements"])
}

func (c *current) onUnorderedListItem1(attributes, prefix, checkstyle, content interface{}) (interface{}, error) {
	return types.NewUnorderedListItem(prefix.(types.UnorderedListItemPrefix), checkstyle, content.([]interface{}), attributes)
}

func (p *parser) callonUnorderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItem1(stack["attributes"], stack["prefix"], stack["checkstyle"], stack["content"])
}

func (c *current) onUnorderedListItemPrefix10() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonUnorderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix10()
}

func (c *current) onUnorderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonUnorderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix13(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix7(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListItemPrefix(types.OneAsterisk, 1)
	case 2:
		return types.NewUnorderedListItemPrefix(types.TwoAsterisks, 2)
	case 3:
		return types.NewUnorderedListItemPrefix(types.ThreeAsterisks, 3)
	case 4:
		return types.NewUnorderedListItemPrefix(types.FourAsterisks, 4)
	default:
		return types.NewUnorderedListItemPrefix(types.FiveAsterisks, 5)
	}

}

func (p *parser) callonUnorderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix7(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix15() (interface{}, error) {
	return types.NewUnorderedListItemPrefix(types.Dash, 1)

}

func (p *parser) callonUnorderedListItemPrefix15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix15()
}

func (c *current) onUnorderedListItemPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonUnorderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix1(stack["prefix"])
}

func (c *current) onUnorderedListItemCheckStyle7() (interface{}, error) {
	return types.Unchecked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle7()
}

func (c *current) onUnorderedListItemCheckStyle9() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle9()
}

func (c *current) onUnorderedListItemCheckStyle11() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle11()
}

func (c *current) onUnorderedListItemCheckStyle1(style interface{}) (interface{}, error) {
	return style, nil

}

func (p *parser) callonUnorderedListItemCheckStyle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle1(stack["style"])
}

func (c *current) onUnorderedListItemContent1(elements interface{}) (interface{}, error) {
	// Another list or a literal paragraph immediately following a list item will be implicitly included in the list item
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonUnorderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemContent1(stack["elements"])
}

func (c *current) onLabeledListItem1(attributes, term, separator, description interface{}) (interface{}, error) {
	return types.NewLabeledListItem(len(separator.(string))-1, term.([]interface{}), description, attributes)
}

func (p *parser) callonLabeledListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItem1(stack["attributes"], stack["term"], stack["separator"], stack["description"])
}

func (c *current) onSimpleLabeledListItemTerm3() (interface{}, error) {
	return types.NewStringElement(strings.TrimSpace(string(c.text)))
}

func (p *parser) callonSimpleLabeledListItemTerm3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleLabeledListItemTerm3()
}

func (c *current) onSimpleLabeledListItemTerm1(content interface{}) (interface{}, error) {
	return types.NewInlineElements(content)
}

func (p *parser) callonSimpleLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleLabeledListItemTerm1(stack["content"])
}

func (c *current) onLabeledListItemTerm1(elements interface{}) (interface{}, error) {
	// absorbs heading and trailing spaces
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTerm1(stack["elements"])
}

func (c *current) onLabeledListItemTermElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonLabeledListItemTermElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTermElement1(stack["element"])
}

func (c *current) onLabeledListItemSeparator4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonLabeledListItemSeparator4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator4()
}

func (c *current) onLabeledListItemSeparator7(separator interface{}) (bool, error) {

	// use a predicate to make sure that only `::` to `::::` are allowed
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonLabeledListItemSeparator7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator7(stack["separator"])
}

func (c *current) onLabeledListItemSeparator1(separator interface{}) (interface{}, error) {
	return separator, nil
}

func (p *parser) callonLabeledListItemSeparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator1(stack["separator"])
}

func (c *current) onLabeledListItemDescription1(elements interface{}) (interface{}, error) {

	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemDescription1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemDescription1(stack["elements"])
}

func (c *current) onAdmonitionKind2() (interface{}, error) {
	return types.Tip, nil

}

func (p *parser) callonAdmonitionKind2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind2()
}

func (c *current) onAdmonitionKind4() (interface{}, error) {
	return types.Note, nil

}

func (p *parser) callonAdmonitionKind4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind4()
}

func (c *current) onAdmonitionKind6() (interface{}, error) {
	return types.Important, nil

}

func (p *parser) callonAdmonitionKind6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind6()
}

func (c *current) onAdmonitionKind8() (interface{}, error) {
	return types.Warning, nil

}

func (p *parser) callonAdmonitionKind8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind8()
}

func (c *current) onAdmonitionKind10() (interface{}, error) {
	return types.Caution, nil
}

func (p *parser) callonAdmonitionKind10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind10()
}

func (c *current) onParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onParagraph13(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)
}

func (p *parser) callonParagraph13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph13(stack["attributes"], stack["lines"])
}

func (c *current) onSimpleParagraph6(attributes interface{}) (bool, error) {
	// skip if the '[literal]' attribute was set on this paragraph
	if attrs, ok := attributes.(types.ElementAttributes); ok {
		kind, found := attrs[types.AttrKind]
		return !found || kind != types.Literal, nil
	}
	return true, nil

}

func (p *parser) callonSimpleParagraph6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleParagraph6(stack["attributes"])
}

func (c *current) onSimpleParagraph1(attributes, firstLine, otherLines interface{}) (interface{}, error) {

	return types.NewParagraph(append([]interface{}{firstLine}, otherLines.([]interface{})...), attributes)
}

func (p *parser) callonSimpleParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleParagraph1(stack["attributes"], stack["firstLine"], stack["otherLines"])
}

func (c *current) onParagraphLines1(firstLine, otherLines interface{}) (interface{}, error) {
	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonParagraphLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onFirstParagraphLine1(elements, linebreak interface{}) (interface{}, error) {

	return types.NewInlineElements(append(elements.([]interface{}), linebreak))
}

func (p *parser) callonFirstParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstParagraphLine1(stack["elements"], stack["linebreak"])
}

func (c *current) onOtherParagraphLine1(elements interface{}) (interface{}, error) {
	return elements, nil
}

func (p *parser) callonOtherParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherParagraphLine1(stack["elements"])
}

func (c *current) onVerseParagraph7(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.ElementAttributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Verse, nil
	}
	return false, nil

}

func (p *parser) callonVerseParagraph7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph7(stack["attributes"])
}

func (c *current) onVerseParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonVerseParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onVerseParagraph19(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.ElementAttributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Verse, nil
	}
	return false, nil

}

func (p *parser) callonVerseParagraph19() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph19(stack["attributes"])
}

func (c *current) onVerseParagraph14(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)

}

func (p *parser) callonVerseParagraph14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph14(stack["attributes"], stack["lines"])
}

func (c *current) onInlineElements9(comment interface{}) (interface{}, error) {
	return types.NewInlineElements([]interface{}{comment})

}

func (p *parser) callonInlineElements9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements9(stack["comment"])
}

func (c *current) onInlineElements12(elements, linebreak interface{}) (interface{}, error) {

	return types.NewInlineElements(append(elements.([]interface{}), linebreak))

}

func (p *parser) callonInlineElements12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements12(stack["elements"], stack["linebreak"])
}

func (c *current) onInlineElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonInlineElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements1(stack["elements"])
}

func (c *current) onInlineElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonInlineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement1(stack["element"])
}

func (c *current) onInlineElementsWithoutSubtitution1(elements, linebreak interface{}) (interface{}, error) {

	return types.NewInlineElements(append(elements.([]interface{}), linebreak))
}

func (p *parser) callonInlineElementsWithoutSubtitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementsWithoutSubtitution1(stack["elements"], stack["linebreak"])
}

func (c *current) onInlineElementWithoutSubtitution1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonInlineElementWithoutSubtitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementWithoutSubtitution1(stack["element"])
}

func (c *current) onVerbatimParagraph8(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonVerbatimParagraph8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimParagraph8(stack["line"])
}

func (c *current) onVerbatimParagraph1(attributes, lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), attributes)
}

func (p *parser) callonVerbatimParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimParagraph1(stack["attributes"], stack["lines"])
}

func (c *current) onVerbatimParagraphLine1(elements, linebreak interface{}) (interface{}, error) {

	return types.NewInlineElements(append(elements.([]interface{}), linebreak))
}

func (p *parser) callonVerbatimParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimParagraphLine1(stack["elements"], stack["linebreak"])
}

func (c *current) onVerbatimParagraphLineElement1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonVerbatimParagraphLineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimParagraphLineElement1()
}

func (c *current) onLineBreak1() (interface{}, error) {
	return types.NewLineBreak()
}

func (p *parser) callonLineBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineBreak1()
}

func (c *current) onQuotedText1(text interface{}) (interface{}, error) {
	// if a '^' or '~' is alone (ie, badly formatted superscript or subscript, then accept it as-is)
	return text, nil
}

func (p *parser) callonQuotedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedText1(stack["text"])
}

func (c *current) onSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	// rule used withn `words` to detect superscript or subscript portions, eg in math formulae.
	return string(c.text), nil
}

func (p *parser) callonSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptOrSuperscriptPrefix3()
}

func (c *current) onOneOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonOneOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOneOrMoreBackslashes1()
}

func (c *current) onTwoOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonTwoOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTwoOrMoreBackslashes1()
}

func (c *current) onDoubleQuoteBoldText1(elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Bold, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldText1(stack["elements"])
}

func (c *current) onDoubleQuoteBoldTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonDoubleQuoteBoldTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement1(stack["element"])
}

func (c *current) onNonDoubleQuoteBoldText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonDoubleQuoteBoldText1()
}

func (c *current) onSingleQuoteBoldText2(elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '**' to emphazise a portion of a word)
	return types.NewQuotedText(types.Bold, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText2(stack["elements"])
}

func (c *current) onSingleQuoteBoldText12(elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation.
	return types.NewQuotedText(types.Bold, elements.([]interface{})) // include the second heading `*` as a regular StringElement in the bold content
}

func (p *parser) callonSingleQuoteBoldText12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText12(stack["elements"])
}

func (c *current) onSingleQuoteBoldTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonSingleQuoteBoldTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement1(stack["element"])
}

func (c *current) onNonSingleQuoteBoldText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonSingleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSingleQuoteBoldText1()
}

func (c *current) onEscapedBoldText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "**", elements.([]interface{}))

}

func (p *parser) callonEscapedBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation
	result := append([]interface{}{"*"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "*", result)

}

func (p *parser) callonEscapedBoldText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "*", elements.([]interface{}))
}

func (p *parser) callonEscapedBoldText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicText1(elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Italic, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicText1(stack["elements"])
}

func (c *current) onDoubleQuoteItalicTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonDoubleQuoteItalicTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement1(stack["element"])
}

func (c *current) onNonDoubleQuoteItalicText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonDoubleQuoteItalicText1()
}

func (c *current) onSingleQuoteItalicText2(elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '__' to emphazise a portion of a word)
	return types.NewQuotedText(types.Italic, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText2(stack["elements"])
}

func (c *current) onSingleQuoteItalicText12(elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation.
	return types.NewQuotedText(types.Italic, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content
}

func (p *parser) callonSingleQuoteItalicText12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText12(stack["elements"])
}

func (c *current) onSingleQuoteItalicTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonSingleQuoteItalicTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement1(stack["element"])
}

func (c *current) onNonSingleQuoteItalicText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonSingleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSingleQuoteItalicText1()
}

func (c *current) onEscapedItalicText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "__", elements.([]interface{}))

}

func (p *parser) callonEscapedItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation
	result := append([]interface{}{"_"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "_", result)

}

func (p *parser) callonEscapedItalicText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "_", elements.([]interface{}))
}

func (p *parser) callonEscapedItalicText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceText1(elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Monospace, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceText1(stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonDoubleQuoteMonospaceTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement1(stack["element"])
}

func (c *current) onNonDoubleQuoteMonospaceText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonDoubleQuoteMonospaceText1()
}

func (c *current) onSingleQuoteMonospaceText2(elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs "``" to emphazise a portion of a word)
	return types.NewQuotedText(types.Monospace, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText2(stack["elements"])
}

func (c *current) onSingleQuoteMonospaceText12(elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation.
	return types.NewQuotedText(types.Monospace, elements.([]interface{})) // include the second heading "`" as a regular StringElement in the monospace content
}

func (p *parser) callonSingleQuoteMonospaceText12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText12(stack["elements"])
}

func (c *current) onSingleQuoteMonospaceTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonSingleQuoteMonospaceTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement1(stack["element"])
}

func (c *current) onNonSingleQuoteMonospaceText1() (interface{}, error) {
	// break at multiline
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonSingleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSingleQuoteMonospaceText1()
}

func (c *current) onEscapedMonospaceText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "``", elements.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation
	result := append([]interface{}{"`"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "`", result)

}

func (p *parser) callonEscapedMonospaceText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "`", elements.([]interface{}))
}

func (p *parser) callonEscapedMonospaceText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText18(stack["backslashes"], stack["elements"])
}

func (c *current) onSubscriptText1(element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Subscript, element)
}

func (p *parser) callonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptText1(stack["element"])
}

func (c *current) onNonSubscriptText1() (interface{}, error) {

	return c.text, nil
}

func (p *parser) callonNonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSubscriptText1()
}

func (c *current) onEscapedSubscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "~", element)
}

func (p *parser) callonEscapedSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSuperscriptText1(element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Superscript, element)
}

func (p *parser) callonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptText1(stack["element"])
}

func (c *current) onNonSuperscriptText1() (interface{}, error) {

	return c.text, nil
}

func (p *parser) callonNonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSuperscriptText1()
}

func (c *current) onEscapedSuperscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "^", element)
}

func (p *parser) callonEscapedSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSinglePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewPassthrough(types.SinglePlusPassthrough, []interface{}{content})
}

func (p *parser) callonSinglePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthrough1(stack["content"])
}

func (c *current) onSinglePlusPassthroughContent2() (interface{}, error) {
	// no space in the first or last position of the content, but allowed elsewhere
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent2()
}

func (c *current) onSinglePlusPassthroughContent24() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent24()
}

func (c *current) onTriplePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewPassthrough(types.TriplePlusPassthrough, []interface{}{content})
}

func (p *parser) callonTriplePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthrough1(stack["content"])
}

func (c *current) onTriplePlusPassthroughContent2() (interface{}, error) {
	// spaces and newlines are also allowed in the first or last position of the content and elsewhere too
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent2()
}

func (c *current) onTriplePlusPassthroughContent8() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent8()
}

func (c *current) onPassthroughMacro2(content interface{}) (interface{}, error) {
	return types.NewPassthrough(types.PassthroughMacro, []interface{}{content})
}

func (p *parser) callonPassthroughMacro2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro2(stack["content"])
}

func (c *current) onPassthroughMacro9(content interface{}) (interface{}, error) {
	return types.NewPassthrough(types.PassthroughMacro, content.([]interface{}))
}

func (p *parser) callonPassthroughMacro9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro9(stack["content"])
}

func (c *current) onPassthroughMacroCharacter4() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonPassthroughMacroCharacter4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacroCharacter4()
}

func (c *current) onInternalCrossReference2(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id.(string), label.(string))
}

func (p *parser) callonInternalCrossReference2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference2(stack["id"], stack["label"])
}

func (c *current) onInternalCrossReference13(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id.(string), nil)
}

func (p *parser) callonInternalCrossReference13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference13(stack["id"])
}

func (c *current) onExternalCrossReference1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewExternalCrossReference(url.(types.Location), inlineAttributes.(types.ElementAttributes))
}

func (p *parser) callonExternalCrossReference1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onCrossReferenceLabel1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonCrossReferenceLabel1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReferenceLabel1()
}

func (c *current) onRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.ElementAttributes))
}

func (p *parser) callonRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onTextOnlyLinkAttributes1(text interface{}) (interface{}, error) {
	return types.NewInlineLinkAttributes(text, nil)
}

func (p *parser) callonTextOnlyLinkAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextOnlyLinkAttributes1(stack["text"])
}

func (c *current) onLinkTextWithCommaAttribute18() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLinkTextWithCommaAttribute18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextWithCommaAttribute18()
}

func (c *current) onLinkTextWithCommaAttribute2(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonLinkTextWithCommaAttribute2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextWithCommaAttribute2(stack["elements"])
}

func (c *current) onLinkTextWithCommaAttribute42() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLinkTextWithCommaAttribute42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextWithCommaAttribute42()
}

func (c *current) onLinkTextWithCommaAttribute29(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonLinkTextWithCommaAttribute29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextWithCommaAttribute29(stack["elements"])
}

func (c *current) onTextAndMoreLinkAttributes1(text, otherattrs interface{}) (interface{}, error) {
	return types.NewInlineLinkAttributes(text, otherattrs.([]interface{}))
}

func (p *parser) callonTextAndMoreLinkAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextAndMoreLinkAttributes1(stack["text"], stack["otherattrs"])
}

func (c *current) onLinkTextAttribute18() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLinkTextAttribute18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextAttribute18()
}

func (c *current) onLinkTextAttribute2(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonLinkTextAttribute2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextAttribute2(stack["elements"])
}

func (c *current) onLinkTextAttribute44() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLinkTextAttribute44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextAttribute44()
}

func (c *current) onLinkTextAttribute29(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonLinkTextAttribute29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextAttribute29(stack["elements"])
}

func (c *current) onInlineLinks1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonInlineLinks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineLinks1(stack["elements"])
}

func (c *current) onResolvedRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.ElementAttributes))
}

func (p *parser) callonResolvedRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onResolvedExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonResolvedExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onExternalQuotedLink1(url, inlineAttributes interface{}) (interface{}, error) {
	// here attributes are required, so we can safely use the `_` and `*` characters in the URL without messing with the bold or italic markers.
	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonExternalQuotedLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalQuotedLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onImageBlock1(attributes, path, inlineAttributes interface{}) (interface{}, error) {
	return types.NewImageBlock(path.(types.Location), inlineAttributes.(types.ElementAttributes), attributes)
}

func (p *parser) callonImageBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock1(stack["attributes"], stack["path"], stack["inlineAttributes"])
}

func (c *current) onInlineImage1(path, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineImage(path.(types.Location), inlineAttributes.(types.ElementAttributes))
}

func (p *parser) callonInlineImage1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage1(stack["path"], stack["inlineAttributes"])
}

func (c *current) onImageAttributes1(alt, width, height, otherattrs interface{}) (interface{}, error) {
	return types.NewImageAttributes(alt, width, height, otherattrs.([]interface{}))
}

func (p *parser) callonImageAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAttributes1(stack["alt"], stack["width"], stack["height"], stack["otherattrs"])
}

func (c *current) onInlineFootnote2(content interface{}) (interface{}, error) {
	return types.NewFootnote("", content.([]interface{}))
}

func (p *parser) callonInlineFootnote2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote2(stack["content"])
}

func (c *current) onInlineFootnote8(ref, content interface{}) (interface{}, error) {
	return types.NewFootnote(ref.(string), content.([]interface{}))
}

func (p *parser) callonInlineFootnote8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote8(stack["ref"], stack["content"])
}

func (c *current) onInlineFootnote17(ref interface{}) (interface{}, error) {
	return types.NewFootnote(ref.(string), []interface{}{}) // foot note referring to another note
}

func (p *parser) callonInlineFootnote17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote17(stack["ref"])
}

func (c *current) onFootnoteRef1() (interface{}, error) {
	// footnote ID not may span multiple lines
	return string(c.text), nil
}

func (p *parser) callonFootnoteRef1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteRef1()
}

func (c *current) onFootnoteContent1(elements interface{}) (interface{}, error) {
	// footnote content may span multiple lines
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonFootnoteContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteContent1(stack["elements"])
}

func (c *current) onDelimitedBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock1(stack["block"])
}

func (c *current) onFencedBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Fenced, content.([]interface{}), types.None, attributes)
}

func (p *parser) callonFencedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlock1(stack["attributes"], stack["content"])
}

func (c *current) onFencedBlockParagraph1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), types.ElementAttributes{})
}

func (p *parser) callonFencedBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockParagraph1(stack["lines"])
}

func (c *current) onFencedBlockParagraphLine1(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonFencedBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockParagraphLine1(stack["line"])
}

func (c *current) onListingBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Listing, content.([]interface{}), types.None, attributes)
}

func (p *parser) callonListingBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlock1(stack["attributes"], stack["content"])
}

func (c *current) onListingBlockParagraph1(lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), nil) // no attributes supported
}

func (p *parser) callonListingBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockParagraph1(stack["lines"])
}

func (c *current) onListingBlockParagraphLine6() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonListingBlockParagraphLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockParagraphLine6()
}

func (c *current) onListingBlockParagraphLine1(line interface{}) (interface{}, error) {
	// skip EOL in line content, and stop when quote block delimiter is encountered
	return types.NewInlineElements(line)
}

func (p *parser) callonListingBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockParagraphLine1(stack["line"])
}

func (c *current) onExampleBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Example, content.([]interface{}), types.None, attributes)
}

func (p *parser) callonExampleBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlock1(stack["attributes"], stack["content"])
}

func (c *current) onExampleBlockParagraph1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), types.ElementAttributes{})
}

func (p *parser) callonExampleBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockParagraph1(stack["lines"])
}

func (c *current) onExampleBlockParagraphLine1(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonExampleBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockParagraphLine1(stack["line"])
}

func (c *current) onQuoteBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Quote, content.([]interface{}), types.None, attributes)
}

func (p *parser) callonQuoteBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlock1(stack["attributes"], stack["content"])
}

func (c *current) onQuoteBlockElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonQuoteBlockElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockElement1(stack["element"])
}

func (c *current) onQuoteBlockParagraph1(lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), types.ElementAttributes{})
}

func (p *parser) callonQuoteBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockParagraph1(stack["lines"])
}

func (c *current) onVerseBlock5(attributes interface{}) (bool, error) {

	kind := attributes.(types.ElementAttributes).GetAsString("kind") // once we got the attributes, check that `[verse]`  was set
	return kind == "verse", nil

}

func (p *parser) callonVerseBlock5() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlock5(stack["attributes"])
}

func (c *current) onVerseBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Verse, content.([]interface{}), types.None, attributes)

}

func (p *parser) callonVerseBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlock1(stack["attributes"], stack["content"])
}

func (c *current) onVerseFileInclude1(include interface{}) (interface{}, error) {
	return include, nil
}

func (p *parser) callonVerseFileInclude1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseFileInclude1(stack["include"])
}

func (c *current) onVerseBlockParagraph1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), nil)
}

func (p *parser) callonVerseBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraph1(stack["lines"])
}

func (c *current) onVerseBlockParagraphLine8(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonVerseBlockParagraphLine8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraphLine8(stack["elements"])
}

func (c *current) onVerseBlockParagraphLine1(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonVerseBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraphLine1(stack["line"])
}

func (c *current) onVerseBlockParagraphLineElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonVerseBlockParagraphLineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraphLineElement1(stack["element"])
}

func (c *current) onSidebarBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Sidebar, content.([]interface{}), types.None, attributes)
}

func (p *parser) callonSidebarBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlock1(stack["attributes"], stack["content"])
}

func (c *current) onNonSidebarBlock1(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonNonSidebarBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSidebarBlock1(stack["content"])
}

func (c *current) onSidebarBlockParagraph1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), types.ElementAttributes{})
}

func (p *parser) callonSidebarBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockParagraph1(stack["lines"])
}

func (c *current) onSidebarBlockParagraphLine1(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonSidebarBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockParagraphLine1(stack["line"])
}

func (c *current) onTable1(attributes, header, lines interface{}) (interface{}, error) {
	// end delimiter or end of file
	return types.NewTable(header, lines.([]interface{}), attributes)
}

func (p *parser) callonTable1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTable1(stack["attributes"], stack["header"], stack["lines"])
}

func (c *current) onTableLineHeader1(cells interface{}) (interface{}, error) {
	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLineHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLineHeader1(stack["cells"])
}

func (c *current) onTableLine1(cells interface{}) (interface{}, error) {
	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLine1(stack["cells"])
}

func (c *current) onTableCell1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonTableCell1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCell1(stack["elements"])
}

func (c *current) onCommentBlock1(content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Comment, content.([]interface{}), types.Verbatim, nil)
}

func (p *parser) callonCommentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlock1(stack["content"])
}

func (c *current) onCommentBlockLine1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonCommentBlockLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlockLine1()
}

func (c *current) onSingleLineComment1(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))
}

func (p *parser) callonSingleLineComment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineComment1(stack["content"])
}

func (c *current) onSingleLineCommentContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleLineCommentContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineCommentContent1()
}

func (c *current) onParagraphWithHeadingSpaces1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithSpacesOnFirstLine, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithHeadingSpaces1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpaces1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithHeadingSpacesLines11() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines11()
}

func (c *current) onParagraphWithHeadingSpacesLines4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines4()
}

func (c *current) onParagraphWithHeadingSpacesLines24() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines24()
}

func (c *current) onParagraphWithHeadingSpacesLines19(otherLine interface{}) (interface{}, error) {
	return otherLine, nil // do not include the trailing 'EOL'

}

func (p *parser) callonParagraphWithHeadingSpacesLines19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines19(stack["otherLine"])
}

func (c *current) onParagraphWithHeadingSpacesLines1(firstLine, otherLines interface{}) (interface{}, error) {

	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonParagraphWithHeadingSpacesLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiter1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithDelimiter, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithLiteralBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiter1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLines1(lines interface{}) (interface{}, error) {
	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine4()
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine1(line interface{}) (interface{}, error) {

	return line, nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine1(stack["line"])
}

func (c *current) onParagraphWithLiteralAttribute6(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.ElementAttributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Literal, nil
	}
	return false, nil

}

func (p *parser) callonParagraphWithLiteralAttribute6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute6(stack["attributes"])
}

func (c *current) onParagraphWithLiteralAttribute1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithAttribute, lines.([]interface{}), attributes)

}

func (p *parser) callonParagraphWithLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute1(stack["attributes"], stack["lines"])
}

func (c *current) onLiteralKind1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLiteralKind1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralKind1()
}

func (c *current) onParagraphWithLiteralAttributeLines1(lines interface{}) (interface{}, error) {

	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralAttributeLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralAttributeLine4() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonParagraphWithLiteralAttributeLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLine4()
}

func (c *current) onParagraphWithLiteralAttributeLine1(line interface{}) (interface{}, error) {
	return line, nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralAttributeLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLine1(stack["line"])
}

func (c *current) onConceleadIndexTerm8(content interface{}) (interface{}, error) {
	return content, nil

}

func (p *parser) callonConceleadIndexTerm8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConceleadIndexTerm8(stack["content"])
}

func (c *current) onConceleadIndexTerm19(content interface{}) (interface{}, error) {
	return content, nil

}

func (p *parser) callonConceleadIndexTerm19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConceleadIndexTerm19(stack["content"])
}

func (c *current) onConceleadIndexTerm1(term1, term2, term3 interface{}) (interface{}, error) {
	return types.NewConceleadIndexTerm(term1, term2, term3)

}

func (p *parser) callonConceleadIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConceleadIndexTerm1(stack["term1"], stack["term2"], stack["term3"])
}

func (c *current) onBlankLine1() (interface{}, error) {
	return types.NewBlankLine()
}

func (p *parser) callonBlankLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlankLine1()
}

func (c *current) onAlphanums1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAlphanums1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAlphanums1()
}

func (c *current) onSimpleWord1() (interface{}, error) {
	// very straightforward content: alphanums followed by spaces but not the "+" signs because it needs a heading space to become a LineBreak element
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSimpleWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleWord1()
}

func (c *current) onOtherWord6() (interface{}, error) {
	// TODO: remove check on parenthesis and dot?
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonOtherWord6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherWord6()
}

func (c *current) onOtherWord1() (interface{}, error) {
	// word cannot contain parenthesis. Dots and ellipsis are treated as independent words (but will be combined afterwards)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonOtherWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherWord1()
}

func (c *current) onFileLocation1(elements interface{}) (interface{}, error) {
	return types.NewLocation(elements.([]interface{}))
}

func (p *parser) callonFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation1(stack["elements"])
}

func (c *current) onResolvedFileLocation1(elements interface{}) (interface{}, error) {
	return types.NewLocation(elements.([]interface{}))
}

func (p *parser) callonResolvedFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedFileLocation1(stack["elements"])
}

func (c *current) onLocation1(elements interface{}) (interface{}, error) {
	return types.NewLocation(elements.([]interface{}))
}

func (p *parser) callonLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocation1(stack["elements"])
}

func (c *current) onResolvedLocation1(elements interface{}) (interface{}, error) {
	return types.NewLocation(elements.([]interface{}))
}

func (p *parser) callonResolvedLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedLocation1(stack["elements"])
}

func (c *current) onURL1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonURL1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURL1()
}

func (c *current) onID1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onID1()
}

func (c *current) onDIGIT1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDIGIT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDIGIT1()
}

func (c *current) onNUMBER1() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonNUMBER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNUMBER1()
}

func (c *current) onWS3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonWS3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWS3()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			return val, ok
		}
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	ignoreCase := ""
	if lit.ignoreCase {
		ignoreCase = "i"
	}
	val := string(strconv.AppendQuote([]byte{}, lit.val)) + ignoreCase // wrap 'lit.val' with double quotes
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, val)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, val)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}
