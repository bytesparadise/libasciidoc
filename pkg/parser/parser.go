// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/bytesparadise/libasciidoc/pkg/types"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "PreflightDocument",
			pos:  position{line: 17, col: 1, offset: 290},
			expr: &actionExpr{
				pos: position{line: 17, col: 22, offset: 311},
				run: (*parser).callonPreflightDocument1,
				expr: &seqExpr{
					pos: position{line: 17, col: 22, offset: 311},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 17, col: 22, offset: 311},
							label: "frontmatter",
							expr: &zeroOrOneExpr{
								pos: position{line: 17, col: 35, offset: 324},
								expr: &ruleRefExpr{
									pos:  position{line: 17, col: 35, offset: 324},
									name: "FrontMatter",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 17, col: 49, offset: 338},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 17, col: 57, offset: 346},
								name: "DocumentBlocks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 17, col: 73, offset: 362},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "PreflightDocumentWithinDelimitedBlock",
			pos:  position{line: 21, col: 1, offset: 446},
			expr: &actionExpr{
				pos: position{line: 21, col: 42, offset: 487},
				run: (*parser).callonPreflightDocumentWithinDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 21, col: 42, offset: 487},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 21, col: 42, offset: 487},
							label: "frontmatter",
							expr: &zeroOrOneExpr{
								pos: position{line: 21, col: 55, offset: 500},
								expr: &ruleRefExpr{
									pos:  position{line: 21, col: 55, offset: 500},
									name: "FrontMatter",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 21, col: 69, offset: 514},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 21, col: 77, offset: 522},
								name: "DocumentBlocksWithinDelimitedBlock",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 21, col: 113, offset: 558},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "DocumentBlocks",
			pos:  position{line: 28, col: 1, offset: 753},
			expr: &actionExpr{
				pos: position{line: 28, col: 19, offset: 771},
				run: (*parser).callonDocumentBlocks1,
				expr: &seqExpr{
					pos: position{line: 28, col: 19, offset: 771},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 28, col: 19, offset: 771},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 28, col: 27, offset: 779},
								expr: &ruleRefExpr{
									pos:  position{line: 28, col: 27, offset: 779},
									name: "DocumentHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 28, col: 44, offset: 796},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 28, col: 52, offset: 804},
								expr: &ruleRefExpr{
									pos:  position{line: 28, col: 52, offset: 804},
									name: "DocumentBlock",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentBlock",
			pos:  position{line: 37, col: 1, offset: 1053},
			expr: &actionExpr{
				pos: position{line: 37, col: 18, offset: 1070},
				run: (*parser).callonDocumentBlock1,
				expr: &seqExpr{
					pos: position{line: 37, col: 18, offset: 1070},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 37, col: 18, offset: 1070},
							expr: &ruleRefExpr{
								pos:  position{line: 37, col: 19, offset: 1071},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 38, col: 5, offset: 1080},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 38, col: 12, offset: 1087},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 38, col: 12, offset: 1087},
										name: "SimpleParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 39, col: 11, offset: 1113},
										name: "Section",
									},
									&ruleRefExpr{
										pos:  position{line: 40, col: 11, offset: 1132},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 41, col: 11, offset: 1157},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 42, col: 11, offset: 1181},
										name: "VerseParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 43, col: 11, offset: 1235},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 44, col: 11, offset: 1257},
										name: "ListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 45, col: 11, offset: 1276},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 46, col: 11, offset: 1327},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 47, col: 11, offset: 1351},
										name: "DocumentAttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 48, col: 11, offset: 1391},
										name: "DocumentAttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 49, col: 11, offset: 1425},
										name: "TableOfContentsMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 50, col: 11, offset: 1456},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 51, col: 11, offset: 1481},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentBlocksWithinDelimitedBlock",
			pos:  position{line: 55, col: 1, offset: 1519},
			expr: &labeledExpr{
				pos:   position{line: 55, col: 39, offset: 1557},
				label: "blocks",
				expr: &zeroOrMoreExpr{
					pos: position{line: 55, col: 46, offset: 1564},
					expr: &ruleRefExpr{
						pos:  position{line: 55, col: 47, offset: 1565},
						name: "DocumentBlockWithinDelimitedBlock",
					},
				},
			},
		},
		{
			name: "DocumentBlockWithinDelimitedBlock",
			pos:  position{line: 57, col: 1, offset: 1602},
			expr: &actionExpr{
				pos: position{line: 57, col: 38, offset: 1639},
				run: (*parser).callonDocumentBlockWithinDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 57, col: 38, offset: 1639},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 57, col: 38, offset: 1639},
							expr: &ruleRefExpr{
								pos:  position{line: 57, col: 39, offset: 1640},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 58, col: 5, offset: 1649},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 58, col: 12, offset: 1656},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 58, col: 12, offset: 1656},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 59, col: 11, offset: 1681},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 60, col: 11, offset: 1705},
										name: "VerseParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 61, col: 11, offset: 1730},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 62, col: 11, offset: 1752},
										name: "ListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 63, col: 11, offset: 1771},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 64, col: 11, offset: 1822},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 65, col: 11, offset: 1846},
										name: "DocumentAttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 66, col: 11, offset: 1886},
										name: "DocumentAttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 67, col: 11, offset: 1920},
										name: "TableOfContentsMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 68, col: 11, offset: 1951},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 69, col: 11, offset: 1976},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FrontMatter",
			pos:  position{line: 76, col: 1, offset: 2122},
			expr: &ruleRefExpr{
				pos:  position{line: 76, col: 16, offset: 2137},
				name: "YamlFrontMatter",
			},
		},
		{
			name: "YamlFrontMatter",
			pos:  position{line: 78, col: 1, offset: 2155},
			expr: &actionExpr{
				pos: position{line: 78, col: 20, offset: 2174},
				run: (*parser).callonYamlFrontMatter1,
				expr: &seqExpr{
					pos: position{line: 78, col: 20, offset: 2174},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 78, col: 20, offset: 2174},
							name: "YamlFrontMatterToken",
						},
						&labeledExpr{
							pos:   position{line: 78, col: 41, offset: 2195},
							label: "content",
							expr: &zeroOrOneExpr{
								pos: position{line: 78, col: 49, offset: 2203},
								expr: &ruleRefExpr{
									pos:  position{line: 78, col: 50, offset: 2204},
									name: "YamlFrontMatterContent",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 78, col: 75, offset: 2229},
							name: "YamlFrontMatterToken",
						},
					},
				},
			},
		},
		{
			name: "YamlFrontMatterToken",
			pos:  position{line: 82, col: 1, offset: 2309},
			expr: &seqExpr{
				pos: position{line: 82, col: 26, offset: 2334},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 82, col: 26, offset: 2334},
						val:        "---",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 82, col: 32, offset: 2340},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "YamlFrontMatterContent",
			pos:  position{line: 84, col: 1, offset: 2346},
			expr: &actionExpr{
				pos: position{line: 84, col: 27, offset: 2372},
				run: (*parser).callonYamlFrontMatterContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 84, col: 27, offset: 2372},
					expr: &oneOrMoreExpr{
						pos: position{line: 84, col: 28, offset: 2373},
						expr: &seqExpr{
							pos: position{line: 84, col: 29, offset: 2374},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 84, col: 29, offset: 2374},
									expr: &ruleRefExpr{
										pos:  position{line: 84, col: 30, offset: 2375},
										name: "YamlFrontMatterToken",
									},
								},
								&anyMatcher{
									line: 84, col: 51, offset: 2396,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentHeader",
			pos:  position{line: 91, col: 1, offset: 2562},
			expr: &actionExpr{
				pos: position{line: 91, col: 19, offset: 2580},
				run: (*parser).callonDocumentHeader1,
				expr: &seqExpr{
					pos: position{line: 91, col: 19, offset: 2580},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 91, col: 19, offset: 2580},
							val:        "=",
							ignoreCase: false,
						},
						&oneOrMoreExpr{
							pos: position{line: 91, col: 23, offset: 2584},
							expr: &ruleRefExpr{
								pos:  position{line: 91, col: 23, offset: 2584},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 91, col: 27, offset: 2588},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 91, col: 34, offset: 2595},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 91, col: 49, offset: 2610},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 91, col: 53, offset: 2614},
								expr: &ruleRefExpr{
									pos:  position{line: 91, col: 53, offset: 2614},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 91, col: 71, offset: 2632},
							name: "EOL",
						},
						&labeledExpr{
							pos:   position{line: 92, col: 9, offset: 2644},
							label: "authors",
							expr: &zeroOrOneExpr{
								pos: position{line: 92, col: 18, offset: 2653},
								expr: &ruleRefExpr{
									pos:  position{line: 92, col: 18, offset: 2653},
									name: "DocumentAuthors",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 93, col: 9, offset: 2680},
							label: "revision",
							expr: &zeroOrOneExpr{
								pos: position{line: 93, col: 19, offset: 2690},
								expr: &ruleRefExpr{
									pos:  position{line: 93, col: 19, offset: 2690},
									name: "DocumentRevision",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthors",
			pos:  position{line: 98, col: 1, offset: 2799},
			expr: &choiceExpr{
				pos: position{line: 98, col: 20, offset: 2818},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 98, col: 20, offset: 2818},
						name: "DocumentAuthorsInlineForm",
					},
					&ruleRefExpr{
						pos:  position{line: 98, col: 48, offset: 2846},
						name: "DocumentAuthorsAttributeForm",
					},
				},
			},
		},
		{
			name: "DocumentAuthorsInlineForm",
			pos:  position{line: 100, col: 1, offset: 2876},
			expr: &actionExpr{
				pos: position{line: 100, col: 30, offset: 2905},
				run: (*parser).callonDocumentAuthorsInlineForm1,
				expr: &seqExpr{
					pos: position{line: 100, col: 30, offset: 2905},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 100, col: 30, offset: 2905},
							expr: &ruleRefExpr{
								pos:  position{line: 100, col: 30, offset: 2905},
								name: "WS",
							},
						},
						&notExpr{
							pos: position{line: 100, col: 34, offset: 2909},
							expr: &litMatcher{
								pos:        position{line: 100, col: 35, offset: 2910},
								val:        ":",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 100, col: 39, offset: 2914},
							label: "authors",
							expr: &oneOrMoreExpr{
								pos: position{line: 100, col: 48, offset: 2923},
								expr: &ruleRefExpr{
									pos:  position{line: 100, col: 48, offset: 2923},
									name: "DocumentAuthor",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 100, col: 65, offset: 2940},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorsAttributeForm",
			pos:  position{line: 104, col: 1, offset: 3010},
			expr: &actionExpr{
				pos: position{line: 104, col: 33, offset: 3042},
				run: (*parser).callonDocumentAuthorsAttributeForm1,
				expr: &seqExpr{
					pos: position{line: 104, col: 33, offset: 3042},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 104, col: 33, offset: 3042},
							expr: &ruleRefExpr{
								pos:  position{line: 104, col: 33, offset: 3042},
								name: "WS",
							},
						},
						&litMatcher{
							pos:        position{line: 104, col: 37, offset: 3046},
							val:        ":author:",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 104, col: 48, offset: 3057},
							label: "author",
							expr: &ruleRefExpr{
								pos:  position{line: 104, col: 56, offset: 3065},
								name: "DocumentAuthor",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 104, col: 72, offset: 3081},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthor",
			pos:  position{line: 108, col: 1, offset: 3160},
			expr: &actionExpr{
				pos: position{line: 108, col: 19, offset: 3178},
				run: (*parser).callonDocumentAuthor1,
				expr: &seqExpr{
					pos: position{line: 108, col: 19, offset: 3178},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 108, col: 19, offset: 3178},
							expr: &ruleRefExpr{
								pos:  position{line: 108, col: 19, offset: 3178},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 108, col: 23, offset: 3182},
							label: "fullname",
							expr: &ruleRefExpr{
								pos:  position{line: 108, col: 33, offset: 3192},
								name: "DocumentAuthorName",
							},
						},
						&labeledExpr{
							pos:   position{line: 108, col: 53, offset: 3212},
							label: "email",
							expr: &zeroOrOneExpr{
								pos: position{line: 108, col: 59, offset: 3218},
								expr: &ruleRefExpr{
									pos:  position{line: 108, col: 60, offset: 3219},
									name: "DocumentAuthorEmail",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 108, col: 82, offset: 3241},
							expr: &ruleRefExpr{
								pos:  position{line: 108, col: 82, offset: 3241},
								name: "WS",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 108, col: 86, offset: 3245},
							expr: &litMatcher{
								pos:        position{line: 108, col: 86, offset: 3245},
								val:        ";",
								ignoreCase: false,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 108, col: 91, offset: 3250},
							expr: &ruleRefExpr{
								pos:  position{line: 108, col: 91, offset: 3250},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorName",
			pos:  position{line: 113, col: 1, offset: 3392},
			expr: &actionExpr{
				pos: position{line: 113, col: 23, offset: 3414},
				run: (*parser).callonDocumentAuthorName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 113, col: 23, offset: 3414},
					expr: &choiceExpr{
						pos: position{line: 113, col: 24, offset: 3415},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 113, col: 24, offset: 3415},
								name: "Alphanums",
							},
							&seqExpr{
								pos: position{line: 113, col: 37, offset: 3428},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 113, col: 37, offset: 3428},
										expr: &litMatcher{
											pos:        position{line: 113, col: 38, offset: 3429},
											val:        "<",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 113, col: 42, offset: 3433},
										expr: &litMatcher{
											pos:        position{line: 113, col: 43, offset: 3434},
											val:        ";",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 113, col: 47, offset: 3438},
										expr: &ruleRefExpr{
											pos:  position{line: 113, col: 48, offset: 3439},
											name: "NEWLINE",
										},
									},
									&anyMatcher{
										line: 113, col: 56, offset: 3447,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorEmail",
			pos:  position{line: 117, col: 1, offset: 3488},
			expr: &actionExpr{
				pos: position{line: 117, col: 24, offset: 3511},
				run: (*parser).callonDocumentAuthorEmail1,
				expr: &seqExpr{
					pos: position{line: 117, col: 24, offset: 3511},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 117, col: 24, offset: 3511},
							val:        "<",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 117, col: 28, offset: 3515},
							label: "email",
							expr: &actionExpr{
								pos: position{line: 117, col: 35, offset: 3522},
								run: (*parser).callonDocumentAuthorEmail5,
								expr: &oneOrMoreExpr{
									pos: position{line: 117, col: 35, offset: 3522},
									expr: &choiceExpr{
										pos: position{line: 117, col: 36, offset: 3523},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 117, col: 36, offset: 3523},
												name: "Alphanums",
											},
											&seqExpr{
												pos: position{line: 117, col: 49, offset: 3536},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 117, col: 49, offset: 3536},
														expr: &litMatcher{
															pos:        position{line: 117, col: 50, offset: 3537},
															val:        ">",
															ignoreCase: false,
														},
													},
													&notExpr{
														pos: position{line: 117, col: 54, offset: 3541},
														expr: &ruleRefExpr{
															pos:  position{line: 117, col: 55, offset: 3542},
															name: "EOL",
														},
													},
													&anyMatcher{
														line: 117, col: 60, offset: 3547,
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 119, col: 4, offset: 3588},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "DocumentRevision",
			pos:  position{line: 125, col: 1, offset: 3749},
			expr: &actionExpr{
				pos: position{line: 125, col: 21, offset: 3769},
				run: (*parser).callonDocumentRevision1,
				expr: &seqExpr{
					pos: position{line: 125, col: 21, offset: 3769},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 125, col: 21, offset: 3769},
							expr: &ruleRefExpr{
								pos:  position{line: 125, col: 21, offset: 3769},
								name: "WS",
							},
						},
						&notExpr{
							pos: position{line: 125, col: 25, offset: 3773},
							expr: &litMatcher{
								pos:        position{line: 125, col: 26, offset: 3774},
								val:        ":",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 125, col: 30, offset: 3778},
							label: "revision",
							expr: &choiceExpr{
								pos: position{line: 126, col: 9, offset: 3797},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 126, col: 10, offset: 3798},
										run: (*parser).callonDocumentRevision9,
										expr: &seqExpr{
											pos: position{line: 126, col: 10, offset: 3798},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 126, col: 10, offset: 3798},
													label: "revnumber",
													expr: &ruleRefExpr{
														pos:  position{line: 126, col: 21, offset: 3809},
														name: "DocumentRevisionNumber",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 126, col: 45, offset: 3833},
													expr: &litMatcher{
														pos:        position{line: 126, col: 45, offset: 3833},
														val:        ",",
														ignoreCase: false,
													},
												},
												&labeledExpr{
													pos:   position{line: 126, col: 50, offset: 3838},
													label: "revdate",
													expr: &zeroOrOneExpr{
														pos: position{line: 126, col: 58, offset: 3846},
														expr: &ruleRefExpr{
															pos:  position{line: 126, col: 59, offset: 3847},
															name: "DocumentRevisionDate",
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 126, col: 82, offset: 3870},
													expr: &litMatcher{
														pos:        position{line: 126, col: 82, offset: 3870},
														val:        ":",
														ignoreCase: false,
													},
												},
												&labeledExpr{
													pos:   position{line: 126, col: 87, offset: 3875},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 126, col: 97, offset: 3885},
														expr: &ruleRefExpr{
															pos:  position{line: 126, col: 98, offset: 3886},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 128, col: 15, offset: 4003},
										run: (*parser).callonDocumentRevision23,
										expr: &seqExpr{
											pos: position{line: 128, col: 15, offset: 4003},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 128, col: 15, offset: 4003},
													label: "revdate",
													expr: &ruleRefExpr{
														pos:  position{line: 128, col: 24, offset: 4012},
														name: "DocumentRevisionDate",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 128, col: 46, offset: 4034},
													expr: &litMatcher{
														pos:        position{line: 128, col: 46, offset: 4034},
														val:        ":",
														ignoreCase: false,
													},
												},
												&labeledExpr{
													pos:   position{line: 128, col: 51, offset: 4039},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 128, col: 61, offset: 4049},
														expr: &ruleRefExpr{
															pos:  position{line: 128, col: 62, offset: 4050},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 130, col: 13, offset: 4159},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionNumber",
			pos:  position{line: 135, col: 1, offset: 4289},
			expr: &choiceExpr{
				pos: position{line: 135, col: 27, offset: 4315},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 135, col: 27, offset: 4315},
						run: (*parser).callonDocumentRevisionNumber2,
						expr: &seqExpr{
							pos: position{line: 135, col: 27, offset: 4315},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 135, col: 27, offset: 4315},
									val:        "v",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 135, col: 32, offset: 4320},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 135, col: 39, offset: 4327},
									expr: &choiceExpr{
										pos: position{line: 135, col: 40, offset: 4328},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 135, col: 40, offset: 4328},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 135, col: 52, offset: 4340},
												name: "Spaces",
											},
											&seqExpr{
												pos: position{line: 135, col: 62, offset: 4350},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 135, col: 62, offset: 4350},
														expr: &ruleRefExpr{
															pos:  position{line: 135, col: 63, offset: 4351},
															name: "EOL",
														},
													},
													&notExpr{
														pos: position{line: 135, col: 67, offset: 4355},
														expr: &litMatcher{
															pos:        position{line: 135, col: 68, offset: 4356},
															val:        ",",
															ignoreCase: false,
														},
													},
													&notExpr{
														pos: position{line: 135, col: 72, offset: 4360},
														expr: &litMatcher{
															pos:        position{line: 135, col: 73, offset: 4361},
															val:        ":",
															ignoreCase: false,
														},
													},
													&anyMatcher{
														line: 135, col: 78, offset: 4366,
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 137, col: 5, offset: 4408},
						run: (*parser).callonDocumentRevisionNumber18,
						expr: &seqExpr{
							pos: position{line: 137, col: 5, offset: 4408},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 137, col: 5, offset: 4408},
									expr: &litMatcher{
										pos:        position{line: 137, col: 5, offset: 4408},
										val:        "v",
										ignoreCase: true,
									},
								},
								&ruleRefExpr{
									pos:  position{line: 137, col: 11, offset: 4414},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 137, col: 18, offset: 4421},
									expr: &choiceExpr{
										pos: position{line: 137, col: 19, offset: 4422},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 137, col: 19, offset: 4422},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 137, col: 31, offset: 4434},
												name: "Spaces",
											},
											&seqExpr{
												pos: position{line: 137, col: 41, offset: 4444},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 137, col: 41, offset: 4444},
														expr: &ruleRefExpr{
															pos:  position{line: 137, col: 42, offset: 4445},
															name: "EOL",
														},
													},
													&notExpr{
														pos: position{line: 137, col: 46, offset: 4449},
														expr: &litMatcher{
															pos:        position{line: 137, col: 47, offset: 4450},
															val:        ",",
															ignoreCase: false,
														},
													},
													&notExpr{
														pos: position{line: 137, col: 51, offset: 4454},
														expr: &litMatcher{
															pos:        position{line: 137, col: 52, offset: 4455},
															val:        ":",
															ignoreCase: false,
														},
													},
													&anyMatcher{
														line: 137, col: 57, offset: 4460,
													},
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 137, col: 62, offset: 4465},
									expr: &ruleRefExpr{
										pos:  position{line: 137, col: 62, offset: 4465},
										name: "WS",
									},
								},
								&andExpr{
									pos: position{line: 137, col: 66, offset: 4469},
									expr: &litMatcher{
										pos:        position{line: 137, col: 67, offset: 4470},
										val:        ",",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionDate",
			pos:  position{line: 141, col: 1, offset: 4510},
			expr: &actionExpr{
				pos: position{line: 141, col: 25, offset: 4534},
				run: (*parser).callonDocumentRevisionDate1,
				expr: &oneOrMoreExpr{
					pos: position{line: 141, col: 25, offset: 4534},
					expr: &choiceExpr{
						pos: position{line: 141, col: 26, offset: 4535},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 141, col: 26, offset: 4535},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 141, col: 38, offset: 4547},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 141, col: 48, offset: 4557},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 141, col: 48, offset: 4557},
										expr: &ruleRefExpr{
											pos:  position{line: 141, col: 49, offset: 4558},
											name: "EOL",
										},
									},
									&notExpr{
										pos: position{line: 141, col: 53, offset: 4562},
										expr: &litMatcher{
											pos:        position{line: 141, col: 54, offset: 4563},
											val:        ":",
											ignoreCase: false,
										},
									},
									&anyMatcher{
										line: 141, col: 59, offset: 4568,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionRemark",
			pos:  position{line: 145, col: 1, offset: 4609},
			expr: &actionExpr{
				pos: position{line: 145, col: 27, offset: 4635},
				run: (*parser).callonDocumentRevisionRemark1,
				expr: &oneOrMoreExpr{
					pos: position{line: 145, col: 27, offset: 4635},
					expr: &choiceExpr{
						pos: position{line: 145, col: 28, offset: 4636},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 145, col: 28, offset: 4636},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 145, col: 40, offset: 4648},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 145, col: 50, offset: 4658},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 145, col: 50, offset: 4658},
										expr: &ruleRefExpr{
											pos:  position{line: 145, col: 51, offset: 4659},
											name: "EOL",
										},
									},
									&anyMatcher{
										line: 145, col: 56, offset: 4664,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeDeclaration",
			pos:  position{line: 152, col: 1, offset: 4820},
			expr: &actionExpr{
				pos: position{line: 152, col: 33, offset: 4852},
				run: (*parser).callonDocumentAttributeDeclaration1,
				expr: &seqExpr{
					pos: position{line: 152, col: 33, offset: 4852},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 152, col: 33, offset: 4852},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 152, col: 37, offset: 4856},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 152, col: 43, offset: 4862},
								name: "DocumentAttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 152, col: 66, offset: 4885},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 152, col: 70, offset: 4889},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 152, col: 76, offset: 4895},
								expr: &actionExpr{
									pos: position{line: 152, col: 77, offset: 4896},
									run: (*parser).callonDocumentAttributeDeclaration9,
									expr: &seqExpr{
										pos: position{line: 152, col: 78, offset: 4897},
										exprs: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 152, col: 78, offset: 4897},
												expr: &ruleRefExpr{
													pos:  position{line: 152, col: 78, offset: 4897},
													name: "WS",
												},
											},
											&labeledExpr{
												pos:   position{line: 152, col: 82, offset: 4901},
												label: "value",
												expr: &ruleRefExpr{
													pos:  position{line: 152, col: 89, offset: 4908},
													name: "DocumentAttributeValue",
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 152, col: 138, offset: 4957},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeName",
			pos:  position{line: 159, col: 1, offset: 5206},
			expr: &actionExpr{
				pos: position{line: 159, col: 26, offset: 5231},
				run: (*parser).callonDocumentAttributeName1,
				expr: &seqExpr{
					pos: position{line: 159, col: 26, offset: 5231},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 159, col: 27, offset: 5232},
							alternatives: []interface{}{
								&charClassMatcher{
									pos:        position{line: 159, col: 27, offset: 5232},
									val:        "[A-Z]",
									ranges:     []rune{'A', 'Z'},
									ignoreCase: false,
									inverted:   false,
								},
								&charClassMatcher{
									pos:        position{line: 159, col: 35, offset: 5240},
									val:        "[a-z]",
									ranges:     []rune{'a', 'z'},
									ignoreCase: false,
									inverted:   false,
								},
								&charClassMatcher{
									pos:        position{line: 159, col: 43, offset: 5248},
									val:        "[0-9]",
									ranges:     []rune{'0', '9'},
									ignoreCase: false,
									inverted:   false,
								},
								&litMatcher{
									pos:        position{line: 159, col: 51, offset: 5256},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 159, col: 56, offset: 5261},
							expr: &choiceExpr{
								pos: position{line: 159, col: 57, offset: 5262},
								alternatives: []interface{}{
									&charClassMatcher{
										pos:        position{line: 159, col: 57, offset: 5262},
										val:        "[A-Z]",
										ranges:     []rune{'A', 'Z'},
										ignoreCase: false,
										inverted:   false,
									},
									&charClassMatcher{
										pos:        position{line: 159, col: 65, offset: 5270},
										val:        "[a-z]",
										ranges:     []rune{'a', 'z'},
										ignoreCase: false,
										inverted:   false,
									},
									&charClassMatcher{
										pos:        position{line: 159, col: 73, offset: 5278},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
									&litMatcher{
										pos:        position{line: 159, col: 81, offset: 5286},
										val:        "-",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeValue",
			pos:  position{line: 163, col: 1, offset: 5328},
			expr: &actionExpr{
				pos: position{line: 163, col: 27, offset: 5354},
				run: (*parser).callonDocumentAttributeValue1,
				expr: &oneOrMoreExpr{
					pos: position{line: 163, col: 27, offset: 5354},
					expr: &seqExpr{
						pos: position{line: 163, col: 28, offset: 5355},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 163, col: 28, offset: 5355},
								expr: &ruleRefExpr{
									pos:  position{line: 163, col: 29, offset: 5356},
									name: "NEWLINE",
								},
							},
							&anyMatcher{
								line: 163, col: 37, offset: 5364,
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeReset",
			pos:  position{line: 167, col: 1, offset: 5404},
			expr: &choiceExpr{
				pos: position{line: 167, col: 27, offset: 5430},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 167, col: 27, offset: 5430},
						run: (*parser).callonDocumentAttributeReset2,
						expr: &seqExpr{
							pos: position{line: 167, col: 27, offset: 5430},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 167, col: 27, offset: 5430},
									val:        ":!",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 167, col: 32, offset: 5435},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 167, col: 38, offset: 5441},
										name: "DocumentAttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 167, col: 61, offset: 5464},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 167, col: 65, offset: 5468},
									name: "EOLS",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 169, col: 5, offset: 5537},
						run: (*parser).callonDocumentAttributeReset9,
						expr: &seqExpr{
							pos: position{line: 169, col: 5, offset: 5537},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 169, col: 5, offset: 5537},
									val:        ":",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 169, col: 9, offset: 5541},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 169, col: 15, offset: 5547},
										name: "DocumentAttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 169, col: 38, offset: 5570},
									val:        "!:",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 169, col: 43, offset: 5575},
									name: "EOLS",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeSubstitution",
			pos:  position{line: 173, col: 1, offset: 5643},
			expr: &actionExpr{
				pos: position{line: 173, col: 34, offset: 5676},
				run: (*parser).callonDocumentAttributeSubstitution1,
				expr: &seqExpr{
					pos: position{line: 173, col: 34, offset: 5676},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 173, col: 34, offset: 5676},
							val:        "{",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 173, col: 38, offset: 5680},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 173, col: 44, offset: 5686},
								name: "DocumentAttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 173, col: 67, offset: 5709},
							val:        "}",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "ElementAttributes",
			pos:  position{line: 180, col: 1, offset: 5897},
			expr: &actionExpr{
				pos: position{line: 180, col: 22, offset: 5918},
				run: (*parser).callonElementAttributes1,
				expr: &labeledExpr{
					pos:   position{line: 180, col: 22, offset: 5918},
					label: "attrs",
					expr: &oneOrMoreExpr{
						pos: position{line: 180, col: 28, offset: 5924},
						expr: &ruleRefExpr{
							pos:  position{line: 180, col: 29, offset: 5925},
							name: "ElementAttribute",
						},
					},
				},
			},
		},
		{
			name: "ElementAttribute",
			pos:  position{line: 184, col: 1, offset: 6015},
			expr: &actionExpr{
				pos: position{line: 184, col: 21, offset: 6035},
				run: (*parser).callonElementAttribute1,
				expr: &seqExpr{
					pos: position{line: 184, col: 21, offset: 6035},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 184, col: 21, offset: 6035},
							expr: &choiceExpr{
								pos: position{line: 184, col: 23, offset: 6037},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 184, col: 23, offset: 6037},
										val:        "[",
										ignoreCase: false,
									},
									&litMatcher{
										pos:        position{line: 184, col: 29, offset: 6043},
										val:        ".",
										ignoreCase: false,
									},
									&litMatcher{
										pos:        position{line: 184, col: 35, offset: 6049},
										val:        "#",
										ignoreCase: false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 185, col: 5, offset: 6125},
							label: "attr",
							expr: &choiceExpr{
								pos: position{line: 185, col: 11, offset: 6131},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 185, col: 11, offset: 6131},
										name: "ElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 186, col: 9, offset: 6152},
										name: "ElementTitle",
									},
									&ruleRefExpr{
										pos:  position{line: 187, col: 9, offset: 6176},
										name: "ElementRole",
									},
									&ruleRefExpr{
										pos:  position{line: 188, col: 9, offset: 6199},
										name: "LiteralAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 189, col: 9, offset: 6227},
										name: "SourceAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 190, col: 9, offset: 6255},
										name: "QuoteAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 191, col: 9, offset: 6282},
										name: "VerseAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 192, col: 9, offset: 6309},
										name: "AdmonitionMarkerAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 193, col: 9, offset: 6346},
										name: "HorizontalLayout",
									},
									&ruleRefExpr{
										pos:  position{line: 194, col: 9, offset: 6374},
										name: "AttributeGroup",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MasqueradeAttribute",
			pos:  position{line: 199, col: 1, offset: 6557},
			expr: &choiceExpr{
				pos: position{line: 199, col: 24, offset: 6580},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 199, col: 24, offset: 6580},
						name: "QuoteAttributes",
					},
					&ruleRefExpr{
						pos:  position{line: 199, col: 42, offset: 6598},
						name: "VerseAttributes",
					},
				},
			},
		},
		{
			name: "ElementID",
			pos:  position{line: 201, col: 1, offset: 6615},
			expr: &choiceExpr{
				pos: position{line: 201, col: 14, offset: 6628},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 201, col: 14, offset: 6628},
						run: (*parser).callonElementID2,
						expr: &seqExpr{
							pos: position{line: 201, col: 14, offset: 6628},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 201, col: 14, offset: 6628},
									val:        "[[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 201, col: 19, offset: 6633},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 201, col: 23, offset: 6637},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 201, col: 27, offset: 6641},
									val:        "]]",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 201, col: 32, offset: 6646},
									name: "EOLS",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 203, col: 5, offset: 6700},
						run: (*parser).callonElementID9,
						expr: &seqExpr{
							pos: position{line: 203, col: 5, offset: 6700},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 203, col: 5, offset: 6700},
									val:        "[#",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 203, col: 10, offset: 6705},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 203, col: 14, offset: 6709},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 203, col: 18, offset: 6713},
									val:        "]",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 203, col: 23, offset: 6718},
									name: "EOLS",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElementID",
			pos:  position{line: 207, col: 1, offset: 6771},
			expr: &actionExpr{
				pos: position{line: 207, col: 20, offset: 6790},
				run: (*parser).callonInlineElementID1,
				expr: &seqExpr{
					pos: position{line: 207, col: 20, offset: 6790},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 207, col: 20, offset: 6790},
							val:        "[[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 207, col: 25, offset: 6795},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 207, col: 29, offset: 6799},
								name: "ID",
							},
						},
						&litMatcher{
							pos:        position{line: 207, col: 33, offset: 6803},
							val:        "]]",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 207, col: 38, offset: 6808},
							expr: &ruleRefExpr{
								pos:  position{line: 207, col: 38, offset: 6808},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "ElementTitle",
			pos:  position{line: 213, col: 1, offset: 7082},
			expr: &actionExpr{
				pos: position{line: 213, col: 17, offset: 7098},
				run: (*parser).callonElementTitle1,
				expr: &seqExpr{
					pos: position{line: 213, col: 17, offset: 7098},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 213, col: 17, offset: 7098},
							val:        ".",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 213, col: 21, offset: 7102},
							label: "title",
							expr: &actionExpr{
								pos: position{line: 213, col: 28, offset: 7109},
								run: (*parser).callonElementTitle5,
								expr: &seqExpr{
									pos: position{line: 213, col: 28, offset: 7109},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 213, col: 28, offset: 7109},
											name: "Alphanums",
										},
										&zeroOrMoreExpr{
											pos: position{line: 213, col: 38, offset: 7119},
											expr: &choiceExpr{
												pos: position{line: 213, col: 39, offset: 7120},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 213, col: 39, offset: 7120},
														name: "Alphanums",
													},
													&ruleRefExpr{
														pos:  position{line: 213, col: 51, offset: 7132},
														name: "Spaces",
													},
													&seqExpr{
														pos: position{line: 213, col: 61, offset: 7142},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 213, col: 61, offset: 7142},
																expr: &ruleRefExpr{
																	pos:  position{line: 213, col: 62, offset: 7143},
																	name: "NEWLINE",
																},
															},
															&anyMatcher{
																line: 213, col: 70, offset: 7151,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 215, col: 4, offset: 7192},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ElementRole",
			pos:  position{line: 221, col: 1, offset: 7344},
			expr: &actionExpr{
				pos: position{line: 221, col: 16, offset: 7359},
				run: (*parser).callonElementRole1,
				expr: &seqExpr{
					pos: position{line: 221, col: 16, offset: 7359},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 221, col: 16, offset: 7359},
							val:        "[.",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 221, col: 21, offset: 7364},
							label: "role",
							expr: &actionExpr{
								pos: position{line: 221, col: 27, offset: 7370},
								run: (*parser).callonElementRole5,
								expr: &seqExpr{
									pos: position{line: 221, col: 27, offset: 7370},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 221, col: 27, offset: 7370},
											name: "Alphanums",
										},
										&zeroOrMoreExpr{
											pos: position{line: 221, col: 37, offset: 7380},
											expr: &choiceExpr{
												pos: position{line: 221, col: 38, offset: 7381},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 221, col: 38, offset: 7381},
														name: "Alphanums",
													},
													&ruleRefExpr{
														pos:  position{line: 221, col: 50, offset: 7393},
														name: "Spaces",
													},
													&seqExpr{
														pos: position{line: 221, col: 60, offset: 7403},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 221, col: 60, offset: 7403},
																expr: &ruleRefExpr{
																	pos:  position{line: 221, col: 61, offset: 7404},
																	name: "NEWLINE",
																},
															},
															&notExpr{
																pos: position{line: 221, col: 69, offset: 7412},
																expr: &litMatcher{
																	pos:        position{line: 221, col: 70, offset: 7413},
																	val:        "]",
																	ignoreCase: false,
																},
															},
															&anyMatcher{
																line: 221, col: 74, offset: 7417,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 223, col: 4, offset: 7458},
							val:        "]",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 223, col: 8, offset: 7462},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "LiteralAttribute",
			pos:  position{line: 227, col: 1, offset: 7519},
			expr: &actionExpr{
				pos: position{line: 227, col: 21, offset: 7539},
				run: (*parser).callonLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 227, col: 21, offset: 7539},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 227, col: 21, offset: 7539},
							val:        "[literal]",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 227, col: 33, offset: 7551},
							expr: &ruleRefExpr{
								pos:  position{line: 227, col: 33, offset: 7551},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 227, col: 37, offset: 7555},
							name: "NEWLINE",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionMarkerAttribute",
			pos:  position{line: 232, col: 1, offset: 7687},
			expr: &actionExpr{
				pos: position{line: 232, col: 30, offset: 7716},
				run: (*parser).callonAdmonitionMarkerAttribute1,
				expr: &seqExpr{
					pos: position{line: 232, col: 30, offset: 7716},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 232, col: 30, offset: 7716},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 232, col: 34, offset: 7720},
							label: "k",
							expr: &ruleRefExpr{
								pos:  position{line: 232, col: 37, offset: 7723},
								name: "AdmonitionKind",
							},
						},
						&litMatcher{
							pos:        position{line: 232, col: 53, offset: 7739},
							val:        "]",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 232, col: 57, offset: 7743},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "SourceAttributes",
			pos:  position{line: 237, col: 1, offset: 7899},
			expr: &actionExpr{
				pos: position{line: 237, col: 21, offset: 7919},
				run: (*parser).callonSourceAttributes1,
				expr: &seqExpr{
					pos: position{line: 237, col: 21, offset: 7919},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 237, col: 21, offset: 7919},
							val:        "[source",
							ignoreCase: false,
						},
						&zeroOrOneExpr{
							pos: position{line: 237, col: 31, offset: 7929},
							expr: &litMatcher{
								pos:        position{line: 237, col: 31, offset: 7929},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 237, col: 36, offset: 7934},
							label: "language",
							expr: &zeroOrOneExpr{
								pos: position{line: 237, col: 45, offset: 7943},
								expr: &actionExpr{
									pos: position{line: 237, col: 46, offset: 7944},
									run: (*parser).callonSourceAttributes8,
									expr: &oneOrMoreExpr{
										pos: position{line: 237, col: 46, offset: 7944},
										expr: &choiceExpr{
											pos: position{line: 237, col: 47, offset: 7945},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 237, col: 47, offset: 7945},
													name: "Alphanums",
												},
												&ruleRefExpr{
													pos:  position{line: 237, col: 59, offset: 7957},
													name: "Spaces",
												},
												&seqExpr{
													pos: position{line: 237, col: 69, offset: 7967},
													exprs: []interface{}{
														&notExpr{
															pos: position{line: 237, col: 69, offset: 7967},
															expr: &ruleRefExpr{
																pos:  position{line: 237, col: 70, offset: 7968},
																name: "NEWLINE",
															},
														},
														&notExpr{
															pos: position{line: 237, col: 78, offset: 7976},
															expr: &litMatcher{
																pos:        position{line: 237, col: 79, offset: 7977},
																val:        "]",
																ignoreCase: false,
															},
														},
														&anyMatcher{
															line: 237, col: 83, offset: 7981,
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 239, col: 9, offset: 8031},
							val:        "]",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 239, col: 13, offset: 8035},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "AttributeGroup",
			pos:  position{line: 244, col: 1, offset: 8160},
			expr: &actionExpr{
				pos: position{line: 244, col: 19, offset: 8178},
				run: (*parser).callonAttributeGroup1,
				expr: &seqExpr{
					pos: position{line: 244, col: 19, offset: 8178},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 244, col: 19, offset: 8178},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 244, col: 23, offset: 8182},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 244, col: 34, offset: 8193},
								expr: &ruleRefExpr{
									pos:  position{line: 244, col: 35, offset: 8194},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 244, col: 54, offset: 8213},
							val:        "]",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 244, col: 58, offset: 8217},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "GenericAttribute",
			pos:  position{line: 248, col: 1, offset: 8290},
			expr: &choiceExpr{
				pos: position{line: 249, col: 5, offset: 8315},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 249, col: 5, offset: 8315},
						run: (*parser).callonGenericAttribute2,
						expr: &seqExpr{
							pos: position{line: 249, col: 5, offset: 8315},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 249, col: 5, offset: 8315},
									label: "key",
									expr: &ruleRefExpr{
										pos:  position{line: 249, col: 10, offset: 8320},
										name: "AttributeKey",
									},
								},
								&litMatcher{
									pos:        position{line: 249, col: 24, offset: 8334},
									val:        "=",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 249, col: 28, offset: 8338},
									label: "value",
									expr: &zeroOrOneExpr{
										pos: position{line: 249, col: 34, offset: 8344},
										expr: &ruleRefExpr{
											pos:  position{line: 249, col: 35, offset: 8345},
											name: "AttributeValue",
										},
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 249, col: 52, offset: 8362},
									expr: &litMatcher{
										pos:        position{line: 249, col: 52, offset: 8362},
										val:        ",",
										ignoreCase: false,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 249, col: 57, offset: 8367},
									expr: &ruleRefExpr{
										pos:  position{line: 249, col: 57, offset: 8367},
										name: "WS",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 251, col: 9, offset: 8472},
						run: (*parser).callonGenericAttribute14,
						expr: &seqExpr{
							pos: position{line: 251, col: 9, offset: 8472},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 251, col: 9, offset: 8472},
									label: "key",
									expr: &ruleRefExpr{
										pos:  position{line: 251, col: 14, offset: 8477},
										name: "AttributeKey",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 251, col: 28, offset: 8491},
									expr: &litMatcher{
										pos:        position{line: 251, col: 28, offset: 8491},
										val:        ",",
										ignoreCase: false,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 251, col: 33, offset: 8496},
									expr: &ruleRefExpr{
										pos:  position{line: 251, col: 33, offset: 8496},
										name: "WS",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeKey",
			pos:  position{line: 255, col: 1, offset: 8589},
			expr: &actionExpr{
				pos: position{line: 255, col: 17, offset: 8605},
				run: (*parser).callonAttributeKey1,
				expr: &seqExpr{
					pos: position{line: 255, col: 17, offset: 8605},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 255, col: 17, offset: 8605},
							expr: &litMatcher{
								pos:        position{line: 255, col: 18, offset: 8606},
								val:        "quote",
								ignoreCase: false,
							},
						},
						&notExpr{
							pos: position{line: 255, col: 26, offset: 8614},
							expr: &litMatcher{
								pos:        position{line: 255, col: 27, offset: 8615},
								val:        "verse",
								ignoreCase: false,
							},
						},
						&notExpr{
							pos: position{line: 255, col: 35, offset: 8623},
							expr: &litMatcher{
								pos:        position{line: 255, col: 36, offset: 8624},
								val:        "literal",
								ignoreCase: false,
							},
						},
						&notExpr{
							pos: position{line: 255, col: 46, offset: 8634},
							expr: &ruleRefExpr{
								pos:  position{line: 255, col: 47, offset: 8635},
								name: "Spaces",
							},
						},
						&labeledExpr{
							pos:   position{line: 255, col: 54, offset: 8642},
							label: "key",
							expr: &oneOrMoreExpr{
								pos: position{line: 255, col: 58, offset: 8646},
								expr: &choiceExpr{
									pos: position{line: 255, col: 59, offset: 8647},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 255, col: 59, offset: 8647},
											name: "Alphanums",
										},
										&ruleRefExpr{
											pos:  position{line: 255, col: 71, offset: 8659},
											name: "OtherAttributeChar",
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 255, col: 92, offset: 8680},
							expr: &ruleRefExpr{
								pos:  position{line: 255, col: 92, offset: 8680},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeValue",
			pos:  position{line: 259, col: 1, offset: 8720},
			expr: &actionExpr{
				pos: position{line: 259, col: 19, offset: 8738},
				run: (*parser).callonAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 259, col: 19, offset: 8738},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 259, col: 19, offset: 8738},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 259, col: 25, offset: 8744},
								expr: &choiceExpr{
									pos: position{line: 259, col: 26, offset: 8745},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 259, col: 26, offset: 8745},
											name: "Alphanums",
										},
										&ruleRefExpr{
											pos:  position{line: 259, col: 38, offset: 8757},
											name: "Spaces",
										},
										&ruleRefExpr{
											pos:  position{line: 259, col: 47, offset: 8766},
											name: "OtherAttributeChar",
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 259, col: 68, offset: 8787},
							expr: &litMatcher{
								pos:        position{line: 259, col: 69, offset: 8788},
								val:        "=",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "OtherAttributeChar",
			pos:  position{line: 263, col: 1, offset: 8943},
			expr: &seqExpr{
				pos: position{line: 263, col: 24, offset: 8966},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 263, col: 24, offset: 8966},
						expr: &litMatcher{
							pos:        position{line: 263, col: 25, offset: 8967},
							val:        "=",
							ignoreCase: false,
						},
					},
					&notExpr{
						pos: position{line: 263, col: 29, offset: 8971},
						expr: &litMatcher{
							pos:        position{line: 263, col: 30, offset: 8972},
							val:        ",",
							ignoreCase: false,
						},
					},
					&notExpr{
						pos: position{line: 263, col: 34, offset: 8976},
						expr: &litMatcher{
							pos:        position{line: 263, col: 35, offset: 8977},
							val:        "]",
							ignoreCase: false,
						},
					},
					&anyMatcher{
						line: 263, col: 39, offset: 8981,
					},
				},
			},
		},
		{
			name: "HorizontalLayout",
			pos:  position{line: 265, col: 1, offset: 8985},
			expr: &actionExpr{
				pos: position{line: 265, col: 21, offset: 9005},
				run: (*parser).callonHorizontalLayout1,
				expr: &seqExpr{
					pos: position{line: 265, col: 21, offset: 9005},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 265, col: 21, offset: 9005},
							val:        "[horizontal]",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 265, col: 36, offset: 9020},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "QuoteAttributes",
			pos:  position{line: 269, col: 1, offset: 9094},
			expr: &actionExpr{
				pos: position{line: 269, col: 20, offset: 9113},
				run: (*parser).callonQuoteAttributes1,
				expr: &seqExpr{
					pos: position{line: 269, col: 20, offset: 9113},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 269, col: 20, offset: 9113},
							val:        "[quote",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 269, col: 29, offset: 9122},
							expr: &ruleRefExpr{
								pos:  position{line: 269, col: 29, offset: 9122},
								name: "WS",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 269, col: 33, offset: 9126},
							expr: &litMatcher{
								pos:        position{line: 269, col: 33, offset: 9126},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 269, col: 38, offset: 9131},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 269, col: 45, offset: 9138},
								expr: &ruleRefExpr{
									pos:  position{line: 269, col: 46, offset: 9139},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 269, col: 63, offset: 9156},
							expr: &litMatcher{
								pos:        position{line: 269, col: 63, offset: 9156},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 269, col: 68, offset: 9161},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 269, col: 74, offset: 9167},
								expr: &ruleRefExpr{
									pos:  position{line: 269, col: 75, offset: 9168},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 269, col: 92, offset: 9185},
							val:        "]",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 269, col: 96, offset: 9189},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "VerseAttributes",
			pos:  position{line: 273, col: 1, offset: 9259},
			expr: &actionExpr{
				pos: position{line: 273, col: 20, offset: 9278},
				run: (*parser).callonVerseAttributes1,
				expr: &seqExpr{
					pos: position{line: 273, col: 20, offset: 9278},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 273, col: 20, offset: 9278},
							val:        "[verse",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 273, col: 29, offset: 9287},
							expr: &ruleRefExpr{
								pos:  position{line: 273, col: 29, offset: 9287},
								name: "WS",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 273, col: 33, offset: 9291},
							expr: &litMatcher{
								pos:        position{line: 273, col: 33, offset: 9291},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 273, col: 38, offset: 9296},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 273, col: 45, offset: 9303},
								expr: &ruleRefExpr{
									pos:  position{line: 273, col: 46, offset: 9304},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 273, col: 63, offset: 9321},
							expr: &litMatcher{
								pos:        position{line: 273, col: 63, offset: 9321},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 273, col: 68, offset: 9326},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 273, col: 74, offset: 9332},
								expr: &ruleRefExpr{
									pos:  position{line: 273, col: 75, offset: 9333},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 273, col: 92, offset: 9350},
							val:        "]",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 273, col: 96, offset: 9354},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "QuoteAttribute",
			pos:  position{line: 277, col: 1, offset: 9442},
			expr: &actionExpr{
				pos: position{line: 277, col: 19, offset: 9460},
				run: (*parser).callonQuoteAttribute1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 277, col: 19, offset: 9460},
					expr: &choiceExpr{
						pos: position{line: 277, col: 20, offset: 9461},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 277, col: 20, offset: 9461},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 277, col: 32, offset: 9473},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 277, col: 42, offset: 9483},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 277, col: 42, offset: 9483},
										expr: &litMatcher{
											pos:        position{line: 277, col: 43, offset: 9484},
											val:        ",",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 277, col: 47, offset: 9488},
										expr: &litMatcher{
											pos:        position{line: 277, col: 48, offset: 9489},
											val:        "]",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 277, col: 52, offset: 9493},
										expr: &ruleRefExpr{
											pos:  position{line: 277, col: 53, offset: 9494},
											name: "EOL",
										},
									},
									&anyMatcher{
										line: 277, col: 57, offset: 9498,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineAttributes",
			pos:  position{line: 281, col: 1, offset: 9539},
			expr: &actionExpr{
				pos: position{line: 281, col: 21, offset: 9559},
				run: (*parser).callonInlineAttributes1,
				expr: &seqExpr{
					pos: position{line: 281, col: 21, offset: 9559},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 281, col: 21, offset: 9559},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 281, col: 25, offset: 9563},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 281, col: 31, offset: 9569},
								expr: &ruleRefExpr{
									pos:  position{line: 281, col: 32, offset: 9570},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 281, col: 51, offset: 9589},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Section",
			pos:  position{line: 288, col: 1, offset: 9763},
			expr: &actionExpr{
				pos: position{line: 288, col: 12, offset: 9774},
				run: (*parser).callonSection1,
				expr: &seqExpr{
					pos: position{line: 288, col: 12, offset: 9774},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 288, col: 12, offset: 9774},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 288, col: 23, offset: 9785},
								expr: &ruleRefExpr{
									pos:  position{line: 288, col: 24, offset: 9786},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 289, col: 5, offset: 9810},
							label: "level",
							expr: &actionExpr{
								pos: position{line: 289, col: 12, offset: 9817},
								run: (*parser).callonSection7,
								expr: &oneOrMoreExpr{
									pos: position{line: 289, col: 12, offset: 9817},
									expr: &litMatcher{
										pos:        position{line: 289, col: 13, offset: 9818},
										val:        "=",
										ignoreCase: false,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 293, col: 5, offset: 9909},
							run: (*parser).callonSection10,
						},
						&oneOrMoreExpr{
							pos: position{line: 297, col: 5, offset: 10061},
							expr: &ruleRefExpr{
								pos:  position{line: 297, col: 5, offset: 10061},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 297, col: 9, offset: 10065},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 297, col: 16, offset: 10072},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 297, col: 31, offset: 10087},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 297, col: 35, offset: 10091},
								expr: &ruleRefExpr{
									pos:  position{line: 297, col: 35, offset: 10091},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 297, col: 53, offset: 10109},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "TitleElements",
			pos:  position{line: 302, col: 1, offset: 10223},
			expr: &actionExpr{
				pos: position{line: 302, col: 18, offset: 10240},
				run: (*parser).callonTitleElements1,
				expr: &labeledExpr{
					pos:   position{line: 302, col: 18, offset: 10240},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 302, col: 27, offset: 10249},
						expr: &seqExpr{
							pos: position{line: 302, col: 28, offset: 10250},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 302, col: 28, offset: 10250},
									expr: &ruleRefExpr{
										pos:  position{line: 302, col: 29, offset: 10251},
										name: "NEWLINE",
									},
								},
								&notExpr{
									pos: position{line: 302, col: 37, offset: 10259},
									expr: &ruleRefExpr{
										pos:  position{line: 302, col: 38, offset: 10260},
										name: "InlineElementID",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 302, col: 54, offset: 10276},
									name: "TitleElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TitleElement",
			pos:  position{line: 306, col: 1, offset: 10397},
			expr: &actionExpr{
				pos: position{line: 306, col: 17, offset: 10413},
				run: (*parser).callonTitleElement1,
				expr: &labeledExpr{
					pos:   position{line: 306, col: 17, offset: 10413},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 306, col: 26, offset: 10422},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 306, col: 26, offset: 10422},
								name: "SimpleWord",
							},
							&ruleRefExpr{
								pos:  position{line: 307, col: 11, offset: 10443},
								name: "Spaces",
							},
							&ruleRefExpr{
								pos:  position{line: 308, col: 11, offset: 10461},
								name: "CrossReference",
							},
							&ruleRefExpr{
								pos:  position{line: 309, col: 11, offset: 10486},
								name: "Passthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 310, col: 11, offset: 10508},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 311, col: 11, offset: 10531},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 312, col: 11, offset: 10546},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 313, col: 11, offset: 10571},
								name: "QuotedText",
							},
							&ruleRefExpr{
								pos:  position{line: 314, col: 11, offset: 10592},
								name: "DocumentAttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 315, col: 11, offset: 10632},
								name: "LineBreak",
							},
							&ruleRefExpr{
								pos:  position{line: 316, col: 11, offset: 10652},
								name: "OtherWord",
							},
						},
					},
				},
			},
		},
		{
			name: "TableOfContentsMacro",
			pos:  position{line: 323, col: 1, offset: 10805},
			expr: &seqExpr{
				pos: position{line: 323, col: 25, offset: 10829},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 323, col: 25, offset: 10829},
						val:        "toc::[]",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 323, col: 35, offset: 10839},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "UserMacroBlock",
			pos:  position{line: 328, col: 1, offset: 10950},
			expr: &actionExpr{
				pos: position{line: 328, col: 19, offset: 10968},
				run: (*parser).callonUserMacroBlock1,
				expr: &seqExpr{
					pos: position{line: 328, col: 19, offset: 10968},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 328, col: 19, offset: 10968},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 328, col: 25, offset: 10974},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 328, col: 40, offset: 10989},
							val:        "::",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 328, col: 45, offset: 10994},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 328, col: 52, offset: 11001},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 328, col: 68, offset: 11017},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 328, col: 75, offset: 11024},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineUserMacro",
			pos:  position{line: 332, col: 1, offset: 11165},
			expr: &actionExpr{
				pos: position{line: 332, col: 20, offset: 11184},
				run: (*parser).callonInlineUserMacro1,
				expr: &seqExpr{
					pos: position{line: 332, col: 20, offset: 11184},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 332, col: 20, offset: 11184},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 332, col: 26, offset: 11190},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 332, col: 41, offset: 11205},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 332, col: 45, offset: 11209},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 332, col: 52, offset: 11216},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 332, col: 68, offset: 11232},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 332, col: 75, offset: 11239},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroName",
			pos:  position{line: 336, col: 1, offset: 11381},
			expr: &actionExpr{
				pos: position{line: 336, col: 18, offset: 11398},
				run: (*parser).callonUserMacroName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 336, col: 18, offset: 11398},
					expr: &choiceExpr{
						pos: position{line: 336, col: 19, offset: 11399},
						alternatives: []interface{}{
							&charClassMatcher{
								pos:        position{line: 336, col: 19, offset: 11399},
								val:        "[a-zA-Z0-9]",
								ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
							&litMatcher{
								pos:        position{line: 336, col: 33, offset: 11413},
								val:        "_",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 336, col: 39, offset: 11419},
								val:        "-",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroValue",
			pos:  position{line: 340, col: 1, offset: 11461},
			expr: &actionExpr{
				pos: position{line: 340, col: 19, offset: 11479},
				run: (*parser).callonUserMacroValue1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 340, col: 19, offset: 11479},
					expr: &choiceExpr{
						pos: position{line: 340, col: 20, offset: 11480},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 340, col: 20, offset: 11480},
								name: "Alphanums",
							},
							&seqExpr{
								pos: position{line: 340, col: 33, offset: 11493},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 340, col: 33, offset: 11493},
										expr: &ruleRefExpr{
											pos:  position{line: 340, col: 34, offset: 11494},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 340, col: 37, offset: 11497},
										expr: &litMatcher{
											pos:        position{line: 340, col: 38, offset: 11498},
											val:        ":",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 340, col: 42, offset: 11502},
										expr: &litMatcher{
											pos:        position{line: 340, col: 43, offset: 11503},
											val:        "[",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 340, col: 47, offset: 11507},
										expr: &ruleRefExpr{
											pos:  position{line: 340, col: 48, offset: 11508},
											name: "EOL",
										},
									},
									&anyMatcher{
										line: 340, col: 52, offset: 11512,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroAttributes",
			pos:  position{line: 344, col: 1, offset: 11553},
			expr: &actionExpr{
				pos: position{line: 344, col: 24, offset: 11576},
				run: (*parser).callonUserMacroAttributes1,
				expr: &seqExpr{
					pos: position{line: 344, col: 24, offset: 11576},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 344, col: 24, offset: 11576},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 344, col: 28, offset: 11580},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 344, col: 34, offset: 11586},
								expr: &ruleRefExpr{
									pos:  position{line: 344, col: 35, offset: 11587},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 344, col: 54, offset: 11606},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FileInclusion",
			pos:  position{line: 351, col: 1, offset: 11786},
			expr: &actionExpr{
				pos: position{line: 351, col: 18, offset: 11803},
				run: (*parser).callonFileInclusion1,
				expr: &seqExpr{
					pos: position{line: 351, col: 18, offset: 11803},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 351, col: 18, offset: 11803},
							label: "incl",
							expr: &actionExpr{
								pos: position{line: 351, col: 24, offset: 11809},
								run: (*parser).callonFileInclusion4,
								expr: &seqExpr{
									pos: position{line: 351, col: 24, offset: 11809},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 351, col: 24, offset: 11809},
											val:        "include::",
											ignoreCase: false,
										},
										&labeledExpr{
											pos:   position{line: 351, col: 36, offset: 11821},
											label: "path",
											expr: &ruleRefExpr{
												pos:  position{line: 351, col: 42, offset: 11827},
												name: "FileLocation",
											},
										},
										&labeledExpr{
											pos:   position{line: 351, col: 56, offset: 11841},
											label: "inlineAttributes",
											expr: &ruleRefExpr{
												pos:  position{line: 351, col: 74, offset: 11859},
												name: "FileIncludeAttributes",
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 353, col: 8, offset: 12013},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "FileIncludeAttributes",
			pos:  position{line: 357, col: 1, offset: 12066},
			expr: &actionExpr{
				pos: position{line: 357, col: 26, offset: 12091},
				run: (*parser).callonFileIncludeAttributes1,
				expr: &seqExpr{
					pos: position{line: 357, col: 26, offset: 12091},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 357, col: 26, offset: 12091},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 357, col: 30, offset: 12095},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 357, col: 36, offset: 12101},
								expr: &choiceExpr{
									pos: position{line: 357, col: 37, offset: 12102},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 357, col: 37, offset: 12102},
											name: "LineRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 357, col: 59, offset: 12124},
											name: "TagRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 357, col: 80, offset: 12145},
											name: "GenericAttribute",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 357, col: 99, offset: 12164},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttribute",
			pos:  position{line: 361, col: 1, offset: 12234},
			expr: &actionExpr{
				pos: position{line: 361, col: 24, offset: 12257},
				run: (*parser).callonLineRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 361, col: 24, offset: 12257},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 361, col: 24, offset: 12257},
							val:        "lines=",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 361, col: 33, offset: 12266},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 361, col: 40, offset: 12273},
								name: "LineRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 361, col: 66, offset: 12299},
							expr: &litMatcher{
								pos:        position{line: 361, col: 66, offset: 12299},
								val:        ",",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttributeValue",
			pos:  position{line: 365, col: 1, offset: 12358},
			expr: &actionExpr{
				pos: position{line: 365, col: 29, offset: 12386},
				run: (*parser).callonLineRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 365, col: 29, offset: 12386},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 365, col: 29, offset: 12386},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 365, col: 36, offset: 12393},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 365, col: 36, offset: 12393},
										name: "MultipleLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 366, col: 11, offset: 12510},
										name: "MultipleQuotedLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 367, col: 11, offset: 12546},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 368, col: 11, offset: 12572},
										name: "MultiLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 369, col: 11, offset: 12604},
										name: "SingleLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 370, col: 11, offset: 12636},
										name: "SingleLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 371, col: 11, offset: 12663},
										name: "UndefinedLineRange",
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 371, col: 31, offset: 12683},
							expr: &ruleRefExpr{
								pos:  position{line: 371, col: 31, offset: 12683},
								name: "WS",
							},
						},
						&choiceExpr{
							pos: position{line: 371, col: 36, offset: 12688},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 371, col: 36, offset: 12688},
									expr: &litMatcher{
										pos:        position{line: 371, col: 37, offset: 12689},
										val:        ",",
										ignoreCase: false,
									},
								},
								&andExpr{
									pos: position{line: 371, col: 43, offset: 12695},
									expr: &litMatcher{
										pos:        position{line: 371, col: 44, offset: 12696},
										val:        "]",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleLineRanges",
			pos:  position{line: 375, col: 1, offset: 12728},
			expr: &actionExpr{
				pos: position{line: 375, col: 23, offset: 12750},
				run: (*parser).callonMultipleLineRanges1,
				expr: &seqExpr{
					pos: position{line: 375, col: 23, offset: 12750},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 375, col: 23, offset: 12750},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 375, col: 30, offset: 12757},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 375, col: 30, offset: 12757},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 375, col: 47, offset: 12774},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 376, col: 5, offset: 12796},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 376, col: 12, offset: 12803},
								expr: &actionExpr{
									pos: position{line: 376, col: 13, offset: 12804},
									run: (*parser).callonMultipleLineRanges9,
									expr: &seqExpr{
										pos: position{line: 376, col: 13, offset: 12804},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 376, col: 13, offset: 12804},
												val:        ";",
												ignoreCase: false,
											},
											&labeledExpr{
												pos:   position{line: 376, col: 17, offset: 12808},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 376, col: 24, offset: 12815},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 376, col: 24, offset: 12815},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 376, col: 41, offset: 12832},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleQuotedLineRanges",
			pos:  position{line: 382, col: 1, offset: 12970},
			expr: &actionExpr{
				pos: position{line: 382, col: 29, offset: 12998},
				run: (*parser).callonMultipleQuotedLineRanges1,
				expr: &seqExpr{
					pos: position{line: 382, col: 29, offset: 12998},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 382, col: 29, offset: 12998},
							val:        "\"",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 382, col: 34, offset: 13003},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 382, col: 41, offset: 13010},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 382, col: 41, offset: 13010},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 382, col: 58, offset: 13027},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 383, col: 5, offset: 13049},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 383, col: 12, offset: 13056},
								expr: &actionExpr{
									pos: position{line: 383, col: 13, offset: 13057},
									run: (*parser).callonMultipleQuotedLineRanges10,
									expr: &seqExpr{
										pos: position{line: 383, col: 13, offset: 13057},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 383, col: 13, offset: 13057},
												val:        ",",
												ignoreCase: false,
											},
											&labeledExpr{
												pos:   position{line: 383, col: 17, offset: 13061},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 383, col: 24, offset: 13068},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 383, col: 24, offset: 13068},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 383, col: 41, offset: 13085},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 385, col: 9, offset: 13138},
							val:        "\"",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "MultiLineRange",
			pos:  position{line: 389, col: 1, offset: 13228},
			expr: &actionExpr{
				pos: position{line: 389, col: 19, offset: 13246},
				run: (*parser).callonMultiLineRange1,
				expr: &seqExpr{
					pos: position{line: 389, col: 19, offset: 13246},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 389, col: 19, offset: 13246},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 389, col: 26, offset: 13253},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 389, col: 34, offset: 13261},
							val:        "..",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 389, col: 39, offset: 13266},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 389, col: 44, offset: 13271},
								name: "NUMBER",
							},
						},
					},
				},
			},
		},
		{
			name: "MultiLineQuotedRange",
			pos:  position{line: 393, col: 1, offset: 13359},
			expr: &actionExpr{
				pos: position{line: 393, col: 25, offset: 13383},
				run: (*parser).callonMultiLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 393, col: 25, offset: 13383},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 393, col: 25, offset: 13383},
							val:        "\"",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 393, col: 30, offset: 13388},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 393, col: 37, offset: 13395},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 393, col: 45, offset: 13403},
							val:        "..",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 393, col: 50, offset: 13408},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 393, col: 55, offset: 13413},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 393, col: 63, offset: 13421},
							val:        "\"",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SingleLineRange",
			pos:  position{line: 397, col: 1, offset: 13506},
			expr: &actionExpr{
				pos: position{line: 397, col: 20, offset: 13525},
				run: (*parser).callonSingleLineRange1,
				expr: &labeledExpr{
					pos:   position{line: 397, col: 20, offset: 13525},
					label: "singleline",
					expr: &ruleRefExpr{
						pos:  position{line: 397, col: 32, offset: 13537},
						name: "NUMBER",
					},
				},
			},
		},
		{
			name: "SingleLineQuotedRange",
			pos:  position{line: 401, col: 1, offset: 13632},
			expr: &actionExpr{
				pos: position{line: 401, col: 26, offset: 13657},
				run: (*parser).callonSingleLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 401, col: 26, offset: 13657},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 401, col: 26, offset: 13657},
							val:        "\"",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 401, col: 31, offset: 13662},
							label: "singleline",
							expr: &ruleRefExpr{
								pos:  position{line: 401, col: 43, offset: 13674},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 401, col: 51, offset: 13682},
							val:        "\"",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "UndefinedLineRange",
			pos:  position{line: 405, col: 1, offset: 13774},
			expr: &actionExpr{
				pos: position{line: 405, col: 23, offset: 13796},
				run: (*parser).callonUndefinedLineRange1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 405, col: 23, offset: 13796},
					expr: &seqExpr{
						pos: position{line: 405, col: 24, offset: 13797},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 405, col: 24, offset: 13797},
								expr: &litMatcher{
									pos:        position{line: 405, col: 25, offset: 13798},
									val:        "]",
									ignoreCase: false,
								},
							},
							&notExpr{
								pos: position{line: 405, col: 29, offset: 13802},
								expr: &litMatcher{
									pos:        position{line: 405, col: 30, offset: 13803},
									val:        ",",
									ignoreCase: false,
								},
							},
							&notExpr{
								pos: position{line: 405, col: 34, offset: 13807},
								expr: &ruleRefExpr{
									pos:  position{line: 405, col: 35, offset: 13808},
									name: "WS",
								},
							},
							&anyMatcher{
								line: 405, col: 38, offset: 13811,
							},
						},
					},
				},
			},
		},
		{
			name: "TagRangesAttribute",
			pos:  position{line: 409, col: 1, offset: 13851},
			expr: &actionExpr{
				pos: position{line: 409, col: 23, offset: 13873},
				run: (*parser).callonTagRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 409, col: 23, offset: 13873},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 409, col: 24, offset: 13874},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 409, col: 24, offset: 13874},
									val:        "tags=",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 409, col: 34, offset: 13884},
									val:        "tag=",
									ignoreCase: false,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 409, col: 42, offset: 13892},
							label: "tags",
							expr: &ruleRefExpr{
								pos:  position{line: 409, col: 48, offset: 13898},
								name: "TagRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 409, col: 73, offset: 13923},
							expr: &litMatcher{
								pos:        position{line: 409, col: 73, offset: 13923},
								val:        ",",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "TagRangesAttributeValue",
			pos:  position{line: 413, col: 1, offset: 14072},
			expr: &actionExpr{
				pos: position{line: 413, col: 28, offset: 14099},
				run: (*parser).callonTagRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 413, col: 28, offset: 14099},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 413, col: 28, offset: 14099},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 413, col: 35, offset: 14106},
								name: "MultipleTagRanges",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 413, col: 54, offset: 14125},
							expr: &ruleRefExpr{
								pos:  position{line: 413, col: 54, offset: 14125},
								name: "WS",
							},
						},
						&choiceExpr{
							pos: position{line: 413, col: 59, offset: 14130},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 413, col: 59, offset: 14130},
									expr: &litMatcher{
										pos:        position{line: 413, col: 60, offset: 14131},
										val:        ",",
										ignoreCase: false,
									},
								},
								&andExpr{
									pos: position{line: 413, col: 66, offset: 14137},
									expr: &litMatcher{
										pos:        position{line: 413, col: 67, offset: 14138},
										val:        "]",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleTagRanges",
			pos:  position{line: 417, col: 1, offset: 14170},
			expr: &actionExpr{
				pos: position{line: 417, col: 22, offset: 14191},
				run: (*parser).callonMultipleTagRanges1,
				expr: &seqExpr{
					pos: position{line: 417, col: 22, offset: 14191},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 417, col: 22, offset: 14191},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 417, col: 29, offset: 14198},
								name: "TagRange",
							},
						},
						&labeledExpr{
							pos:   position{line: 418, col: 5, offset: 14212},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 418, col: 12, offset: 14219},
								expr: &actionExpr{
									pos: position{line: 418, col: 13, offset: 14220},
									run: (*parser).callonMultipleTagRanges7,
									expr: &seqExpr{
										pos: position{line: 418, col: 13, offset: 14220},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 418, col: 13, offset: 14220},
												val:        ";",
												ignoreCase: false,
											},
											&labeledExpr{
												pos:   position{line: 418, col: 17, offset: 14224},
												label: "other",
												expr: &ruleRefExpr{
													pos:  position{line: 418, col: 24, offset: 14231},
													name: "TagRange",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagRange",
			pos:  position{line: 424, col: 1, offset: 14362},
			expr: &choiceExpr{
				pos: position{line: 424, col: 13, offset: 14374},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 424, col: 13, offset: 14374},
						run: (*parser).callonTagRange2,
						expr: &labeledExpr{
							pos:   position{line: 424, col: 13, offset: 14374},
							label: "tag",
							expr: &choiceExpr{
								pos: position{line: 424, col: 18, offset: 14379},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 424, col: 18, offset: 14379},
										name: "Alphanums",
									},
									&ruleRefExpr{
										pos:  position{line: 424, col: 30, offset: 14391},
										name: "TagWildcard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 426, col: 5, offset: 14459},
						run: (*parser).callonTagRange7,
						expr: &seqExpr{
							pos: position{line: 426, col: 5, offset: 14459},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 426, col: 5, offset: 14459},
									val:        "!",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 426, col: 9, offset: 14463},
									label: "tag",
									expr: &choiceExpr{
										pos: position{line: 426, col: 14, offset: 14468},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 426, col: 14, offset: 14468},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 426, col: 26, offset: 14480},
												name: "TagWildcard",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagWildcard",
			pos:  position{line: 430, col: 1, offset: 14548},
			expr: &actionExpr{
				pos: position{line: 430, col: 16, offset: 14563},
				run: (*parser).callonTagWildcard1,
				expr: &seqExpr{
					pos: position{line: 430, col: 16, offset: 14563},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 430, col: 16, offset: 14563},
							label: "stars",
							expr: &actionExpr{
								pos: position{line: 430, col: 23, offset: 14570},
								run: (*parser).callonTagWildcard4,
								expr: &oneOrMoreExpr{
									pos: position{line: 430, col: 23, offset: 14570},
									expr: &litMatcher{
										pos:        position{line: 430, col: 24, offset: 14571},
										val:        "*",
										ignoreCase: false,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 433, col: 5, offset: 14625},
							run: (*parser).callonTagWildcard7,
						},
					},
				},
			},
		},
		{
			name: "IncludedFileLine",
			pos:  position{line: 443, col: 1, offset: 14919},
			expr: &actionExpr{
				pos: position{line: 443, col: 21, offset: 14939},
				run: (*parser).callonIncludedFileLine1,
				expr: &seqExpr{
					pos: position{line: 443, col: 21, offset: 14939},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 443, col: 21, offset: 14939},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 443, col: 29, offset: 14947},
								expr: &choiceExpr{
									pos: position{line: 443, col: 30, offset: 14948},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 443, col: 30, offset: 14948},
											name: "IncludedFileStartTag",
										},
										&ruleRefExpr{
											pos:  position{line: 443, col: 53, offset: 14971},
											name: "IncludedFileEndTag",
										},
										&actionExpr{
											pos: position{line: 443, col: 74, offset: 14992},
											run: (*parser).callonIncludedFileLine8,
											expr: &anyMatcher{
												line: 443, col: 74, offset: 14992,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 443, col: 107, offset: 15025},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileStartTag",
			pos:  position{line: 447, col: 1, offset: 15096},
			expr: &actionExpr{
				pos: position{line: 447, col: 25, offset: 15120},
				run: (*parser).callonIncludedFileStartTag1,
				expr: &seqExpr{
					pos: position{line: 447, col: 25, offset: 15120},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 447, col: 25, offset: 15120},
							val:        "tag::",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 447, col: 33, offset: 15128},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 447, col: 38, offset: 15133},
								run: (*parser).callonIncludedFileStartTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 447, col: 38, offset: 15133},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 447, col: 78, offset: 15173},
							val:        "[]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IncludedFileEndTag",
			pos:  position{line: 451, col: 1, offset: 15238},
			expr: &actionExpr{
				pos: position{line: 451, col: 23, offset: 15260},
				run: (*parser).callonIncludedFileEndTag1,
				expr: &seqExpr{
					pos: position{line: 451, col: 23, offset: 15260},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 451, col: 23, offset: 15260},
							val:        "end::",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 451, col: 31, offset: 15268},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 451, col: 36, offset: 15273},
								run: (*parser).callonIncludedFileEndTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 451, col: 36, offset: 15273},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 451, col: 76, offset: 15313},
							val:        "[]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "ListItems",
			pos:  position{line: 458, col: 1, offset: 15477},
			expr: &oneOrMoreExpr{
				pos: position{line: 458, col: 14, offset: 15490},
				expr: &ruleRefExpr{
					pos:  position{line: 458, col: 14, offset: 15490},
					name: "ListItem",
				},
			},
		},
		{
			name: "ListItem",
			pos:  position{line: 460, col: 1, offset: 15501},
			expr: &choiceExpr{
				pos: position{line: 460, col: 13, offset: 15513},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 460, col: 13, offset: 15513},
						name: "OrderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 460, col: 31, offset: 15531},
						name: "UnorderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 460, col: 51, offset: 15551},
						name: "LabeledListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 460, col: 69, offset: 15569},
						name: "ContinuedListItemElement",
					},
				},
			},
		},
		{
			name: "ListParagraph",
			pos:  position{line: 462, col: 1, offset: 15595},
			expr: &choiceExpr{
				pos: position{line: 462, col: 18, offset: 15612},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 462, col: 18, offset: 15612},
						run: (*parser).callonListParagraph2,
						expr: &labeledExpr{
							pos:   position{line: 462, col: 18, offset: 15612},
							label: "comment",
							expr: &ruleRefExpr{
								pos:  position{line: 462, col: 27, offset: 15621},
								name: "SingleLineComment",
							},
						},
					},
					&actionExpr{
						pos: position{line: 464, col: 9, offset: 15678},
						run: (*parser).callonListParagraph5,
						expr: &labeledExpr{
							pos:   position{line: 464, col: 9, offset: 15678},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 464, col: 15, offset: 15684},
								expr: &ruleRefExpr{
									pos:  position{line: 464, col: 16, offset: 15685},
									name: "ListParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListParagraphLine",
			pos:  position{line: 468, col: 1, offset: 15777},
			expr: &actionExpr{
				pos: position{line: 468, col: 22, offset: 15798},
				run: (*parser).callonListParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 468, col: 22, offset: 15798},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 468, col: 22, offset: 15798},
							expr: &ruleRefExpr{
								pos:  position{line: 468, col: 23, offset: 15799},
								name: "EOF",
							},
						},
						&notExpr{
							pos: position{line: 469, col: 5, offset: 15807},
							expr: &ruleRefExpr{
								pos:  position{line: 469, col: 6, offset: 15808},
								name: "BlankLine",
							},
						},
						&notExpr{
							pos: position{line: 470, col: 5, offset: 15823},
							expr: &ruleRefExpr{
								pos:  position{line: 470, col: 6, offset: 15824},
								name: "SingleLineComment",
							},
						},
						&notExpr{
							pos: position{line: 471, col: 5, offset: 15846},
							expr: &ruleRefExpr{
								pos:  position{line: 471, col: 6, offset: 15847},
								name: "OrderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 472, col: 5, offset: 15873},
							expr: &ruleRefExpr{
								pos:  position{line: 472, col: 6, offset: 15874},
								name: "UnorderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 473, col: 5, offset: 15902},
							expr: &seqExpr{
								pos: position{line: 473, col: 7, offset: 15904},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 473, col: 7, offset: 15904},
										name: "LabeledListItemTerm",
									},
									&ruleRefExpr{
										pos:  position{line: 473, col: 27, offset: 15924},
										name: "LabeledListItemSeparator",
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 474, col: 5, offset: 15955},
							expr: &ruleRefExpr{
								pos:  position{line: 474, col: 6, offset: 15956},
								name: "ListItemContinuation",
							},
						},
						&notExpr{
							pos: position{line: 475, col: 5, offset: 15981},
							expr: &ruleRefExpr{
								pos:  position{line: 475, col: 6, offset: 15982},
								name: "ElementAttribute",
							},
						},
						&notExpr{
							pos: position{line: 476, col: 5, offset: 16003},
							expr: &ruleRefExpr{
								pos:  position{line: 476, col: 6, offset: 16004},
								name: "BlockDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 477, col: 5, offset: 16023},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 478, col: 9, offset: 16038},
								run: (*parser).callonListParagraphLine24,
								expr: &seqExpr{
									pos: position{line: 478, col: 9, offset: 16038},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 478, col: 9, offset: 16038},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 478, col: 18, offset: 16047},
												expr: &ruleRefExpr{
													pos:  position{line: 478, col: 19, offset: 16048},
													name: "InlineElement",
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 478, col: 35, offset: 16064},
											label: "linebreak",
											expr: &zeroOrOneExpr{
												pos: position{line: 478, col: 45, offset: 16074},
												expr: &ruleRefExpr{
													pos:  position{line: 478, col: 46, offset: 16075},
													name: "LineBreak",
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 480, col: 12, offset: 16227},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ListItemContinuation",
			pos:  position{line: 484, col: 1, offset: 16274},
			expr: &seqExpr{
				pos: position{line: 484, col: 25, offset: 16298},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 484, col: 25, offset: 16298},
						val:        "+",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 484, col: 29, offset: 16302},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "ContinuedListItemElement",
			pos:  position{line: 486, col: 1, offset: 16309},
			expr: &actionExpr{
				pos: position{line: 486, col: 29, offset: 16337},
				run: (*parser).callonContinuedListItemElement1,
				expr: &seqExpr{
					pos: position{line: 486, col: 29, offset: 16337},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 486, col: 29, offset: 16337},
							label: "blanklines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 486, col: 41, offset: 16349},
								expr: &ruleRefExpr{
									pos:  position{line: 486, col: 41, offset: 16349},
									name: "BlankLine",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 486, col: 53, offset: 16361},
							name: "ListItemContinuation",
						},
						&labeledExpr{
							pos:   position{line: 486, col: 74, offset: 16382},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 486, col: 82, offset: 16390},
								name: "DocumentBlock",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItem",
			pos:  position{line: 493, col: 1, offset: 16632},
			expr: &actionExpr{
				pos: position{line: 493, col: 20, offset: 16651},
				run: (*parser).callonOrderedListItem1,
				expr: &seqExpr{
					pos: position{line: 493, col: 20, offset: 16651},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 493, col: 20, offset: 16651},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 493, col: 31, offset: 16662},
								expr: &ruleRefExpr{
									pos:  position{line: 493, col: 32, offset: 16663},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 493, col: 52, offset: 16683},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 493, col: 60, offset: 16691},
								name: "OrderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 493, col: 83, offset: 16714},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 493, col: 92, offset: 16723},
								name: "OrderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemPrefix",
			pos:  position{line: 497, col: 1, offset: 16863},
			expr: &actionExpr{
				pos: position{line: 498, col: 5, offset: 16893},
				run: (*parser).callonOrderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 498, col: 5, offset: 16893},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 498, col: 5, offset: 16893},
							expr: &ruleRefExpr{
								pos:  position{line: 498, col: 5, offset: 16893},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 498, col: 9, offset: 16897},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 500, col: 9, offset: 16960},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 500, col: 9, offset: 16960},
										run: (*parser).callonOrderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 500, col: 9, offset: 16960},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 500, col: 9, offset: 16960},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 500, col: 16, offset: 16967},
														run: (*parser).callonOrderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 500, col: 16, offset: 16967},
															expr: &litMatcher{
																pos:        position{line: 500, col: 17, offset: 16968},
																val:        ".",
																ignoreCase: false,
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 504, col: 9, offset: 17068},
													run: (*parser).callonOrderedListItemPrefix13,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 523, col: 11, offset: 17785},
										run: (*parser).callonOrderedListItemPrefix14,
										expr: &seqExpr{
											pos: position{line: 523, col: 11, offset: 17785},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 523, col: 11, offset: 17785},
													expr: &charClassMatcher{
														pos:        position{line: 523, col: 12, offset: 17786},
														val:        "[0-9]",
														ranges:     []rune{'0', '9'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 523, col: 20, offset: 17794},
													val:        ".",
													ignoreCase: false,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 525, col: 13, offset: 17905},
										run: (*parser).callonOrderedListItemPrefix19,
										expr: &seqExpr{
											pos: position{line: 525, col: 13, offset: 17905},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 525, col: 14, offset: 17906},
													val:        "[a-z]",
													ranges:     []rune{'a', 'z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 525, col: 21, offset: 17913},
													val:        ".",
													ignoreCase: false,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 527, col: 13, offset: 18027},
										run: (*parser).callonOrderedListItemPrefix23,
										expr: &seqExpr{
											pos: position{line: 527, col: 13, offset: 18027},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 527, col: 14, offset: 18028},
													val:        "[A-Z]",
													ranges:     []rune{'A', 'Z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 527, col: 21, offset: 18035},
													val:        ".",
													ignoreCase: false,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 529, col: 13, offset: 18149},
										run: (*parser).callonOrderedListItemPrefix27,
										expr: &seqExpr{
											pos: position{line: 529, col: 13, offset: 18149},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 529, col: 13, offset: 18149},
													expr: &charClassMatcher{
														pos:        position{line: 529, col: 14, offset: 18150},
														val:        "[a-z]",
														ranges:     []rune{'a', 'z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 529, col: 22, offset: 18158},
													val:        ")",
													ignoreCase: false,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 531, col: 13, offset: 18272},
										run: (*parser).callonOrderedListItemPrefix32,
										expr: &seqExpr{
											pos: position{line: 531, col: 13, offset: 18272},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 531, col: 13, offset: 18272},
													expr: &charClassMatcher{
														pos:        position{line: 531, col: 14, offset: 18273},
														val:        "[A-Z]",
														ranges:     []rune{'A', 'Z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 531, col: 22, offset: 18281},
													val:        ")",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 533, col: 12, offset: 18394},
							expr: &ruleRefExpr{
								pos:  position{line: 533, col: 12, offset: 18394},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemContent",
			pos:  position{line: 537, col: 1, offset: 18426},
			expr: &actionExpr{
				pos: position{line: 537, col: 27, offset: 18452},
				run: (*parser).callonOrderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 537, col: 27, offset: 18452},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 537, col: 37, offset: 18462},
						expr: &ruleRefExpr{
							pos:  position{line: 537, col: 37, offset: 18462},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItem",
			pos:  position{line: 544, col: 1, offset: 18662},
			expr: &actionExpr{
				pos: position{line: 544, col: 22, offset: 18683},
				run: (*parser).callonUnorderedListItem1,
				expr: &seqExpr{
					pos: position{line: 544, col: 22, offset: 18683},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 544, col: 22, offset: 18683},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 544, col: 33, offset: 18694},
								expr: &ruleRefExpr{
									pos:  position{line: 544, col: 34, offset: 18695},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 544, col: 54, offset: 18715},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 544, col: 62, offset: 18723},
								name: "UnorderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 544, col: 87, offset: 18748},
							label: "checkstyle",
							expr: &zeroOrOneExpr{
								pos: position{line: 544, col: 98, offset: 18759},
								expr: &ruleRefExpr{
									pos:  position{line: 544, col: 99, offset: 18760},
									name: "UnorderedListItemCheckStyle",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 544, col: 129, offset: 18790},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 544, col: 138, offset: 18799},
								name: "UnorderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemPrefix",
			pos:  position{line: 548, col: 1, offset: 18957},
			expr: &actionExpr{
				pos: position{line: 549, col: 5, offset: 18989},
				run: (*parser).callonUnorderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 549, col: 5, offset: 18989},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 549, col: 5, offset: 18989},
							expr: &ruleRefExpr{
								pos:  position{line: 549, col: 5, offset: 18989},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 549, col: 9, offset: 18993},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 549, col: 17, offset: 19001},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 551, col: 9, offset: 19058},
										run: (*parser).callonUnorderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 551, col: 9, offset: 19058},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 551, col: 9, offset: 19058},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 551, col: 16, offset: 19065},
														run: (*parser).callonUnorderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 551, col: 16, offset: 19065},
															expr: &litMatcher{
																pos:        position{line: 551, col: 17, offset: 19066},
																val:        "*",
																ignoreCase: false,
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 555, col: 9, offset: 19166},
													run: (*parser).callonUnorderedListItemPrefix13,
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 572, col: 14, offset: 19873},
										label: "depth",
										expr: &actionExpr{
											pos: position{line: 572, col: 21, offset: 19880},
											run: (*parser).callonUnorderedListItemPrefix15,
											expr: &litMatcher{
												pos:        position{line: 572, col: 22, offset: 19881},
												val:        "-",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 574, col: 13, offset: 19967},
							expr: &ruleRefExpr{
								pos:  position{line: 574, col: 13, offset: 19967},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemCheckStyle",
			pos:  position{line: 578, col: 1, offset: 20000},
			expr: &actionExpr{
				pos: position{line: 578, col: 32, offset: 20031},
				run: (*parser).callonUnorderedListItemCheckStyle1,
				expr: &seqExpr{
					pos: position{line: 578, col: 32, offset: 20031},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 578, col: 32, offset: 20031},
							expr: &litMatcher{
								pos:        position{line: 578, col: 33, offset: 20032},
								val:        "[",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 578, col: 37, offset: 20036},
							label: "style",
							expr: &choiceExpr{
								pos: position{line: 579, col: 7, offset: 20050},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 579, col: 7, offset: 20050},
										run: (*parser).callonUnorderedListItemCheckStyle7,
										expr: &litMatcher{
											pos:        position{line: 579, col: 7, offset: 20050},
											val:        "[ ]",
											ignoreCase: false,
										},
									},
									&actionExpr{
										pos: position{line: 580, col: 7, offset: 20095},
										run: (*parser).callonUnorderedListItemCheckStyle9,
										expr: &litMatcher{
											pos:        position{line: 580, col: 7, offset: 20095},
											val:        "[*]",
											ignoreCase: false,
										},
									},
									&actionExpr{
										pos: position{line: 581, col: 7, offset: 20138},
										run: (*parser).callonUnorderedListItemCheckStyle11,
										expr: &litMatcher{
											pos:        position{line: 581, col: 7, offset: 20138},
											val:        "[x]",
											ignoreCase: false,
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 582, col: 7, offset: 20180},
							expr: &ruleRefExpr{
								pos:  position{line: 582, col: 7, offset: 20180},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemContent",
			pos:  position{line: 586, col: 1, offset: 20219},
			expr: &actionExpr{
				pos: position{line: 586, col: 29, offset: 20247},
				run: (*parser).callonUnorderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 586, col: 29, offset: 20247},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 586, col: 39, offset: 20257},
						expr: &ruleRefExpr{
							pos:  position{line: 586, col: 39, offset: 20257},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "LabeledListItem",
			pos:  position{line: 593, col: 1, offset: 20573},
			expr: &actionExpr{
				pos: position{line: 593, col: 20, offset: 20592},
				run: (*parser).callonLabeledListItem1,
				expr: &seqExpr{
					pos: position{line: 593, col: 20, offset: 20592},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 593, col: 20, offset: 20592},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 593, col: 31, offset: 20603},
								expr: &ruleRefExpr{
									pos:  position{line: 593, col: 32, offset: 20604},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 593, col: 52, offset: 20624},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 593, col: 58, offset: 20630},
								name: "LabeledListItemTerm",
							},
						},
						&labeledExpr{
							pos:   position{line: 593, col: 79, offset: 20651},
							label: "separator",
							expr: &ruleRefExpr{
								pos:  position{line: 593, col: 90, offset: 20662},
								name: "LabeledListItemSeparator",
							},
						},
						&labeledExpr{
							pos:   position{line: 593, col: 116, offset: 20688},
							label: "description",
							expr: &zeroOrOneExpr{
								pos: position{line: 593, col: 128, offset: 20700},
								expr: &ruleRefExpr{
									pos:  position{line: 593, col: 129, offset: 20701},
									name: "LabeledListItemDescription",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTerm",
			pos:  position{line: 597, col: 1, offset: 20840},
			expr: &actionExpr{
				pos: position{line: 597, col: 24, offset: 20863},
				run: (*parser).callonLabeledListItemTerm1,
				expr: &oneOrMoreExpr{
					pos: position{line: 597, col: 24, offset: 20863},
					expr: &choiceExpr{
						pos: position{line: 597, col: 25, offset: 20864},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 597, col: 25, offset: 20864},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 597, col: 37, offset: 20876},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 597, col: 47, offset: 20886},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 597, col: 47, offset: 20886},
										expr: &ruleRefExpr{
											pos:  position{line: 597, col: 48, offset: 20887},
											name: "NEWLINE",
										},
									},
									&notExpr{
										pos: position{line: 597, col: 56, offset: 20895},
										expr: &litMatcher{
											pos:        position{line: 597, col: 57, offset: 20896},
											val:        "::",
											ignoreCase: false,
										},
									},
									&anyMatcher{
										line: 597, col: 62, offset: 20901,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemSeparator",
			pos:  position{line: 601, col: 1, offset: 20943},
			expr: &actionExpr{
				pos: position{line: 602, col: 5, offset: 20976},
				run: (*parser).callonLabeledListItemSeparator1,
				expr: &seqExpr{
					pos: position{line: 602, col: 5, offset: 20976},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 602, col: 5, offset: 20976},
							label: "separator",
							expr: &actionExpr{
								pos: position{line: 602, col: 16, offset: 20987},
								run: (*parser).callonLabeledListItemSeparator4,
								expr: &oneOrMoreExpr{
									pos: position{line: 602, col: 16, offset: 20987},
									expr: &litMatcher{
										pos:        position{line: 602, col: 17, offset: 20988},
										val:        ":",
										ignoreCase: false,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 605, col: 5, offset: 21046},
							run: (*parser).callonLabeledListItemSeparator7,
						},
						&choiceExpr{
							pos: position{line: 609, col: 6, offset: 21222},
							alternatives: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 609, col: 6, offset: 21222},
									expr: &choiceExpr{
										pos: position{line: 609, col: 7, offset: 21223},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 609, col: 7, offset: 21223},
												name: "WS",
											},
											&ruleRefExpr{
												pos:  position{line: 609, col: 12, offset: 21228},
												name: "NEWLINE",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 609, col: 24, offset: 21240},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemDescription",
			pos:  position{line: 613, col: 1, offset: 21280},
			expr: &actionExpr{
				pos: position{line: 613, col: 31, offset: 21310},
				run: (*parser).callonLabeledListItemDescription1,
				expr: &labeledExpr{
					pos:   position{line: 613, col: 31, offset: 21310},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 613, col: 40, offset: 21319},
						expr: &ruleRefExpr{
							pos:  position{line: 613, col: 41, offset: 21320},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionKind",
			pos:  position{line: 620, col: 1, offset: 21511},
			expr: &choiceExpr{
				pos: position{line: 620, col: 19, offset: 21529},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 620, col: 19, offset: 21529},
						run: (*parser).callonAdmonitionKind2,
						expr: &litMatcher{
							pos:        position{line: 620, col: 19, offset: 21529},
							val:        "TIP",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 622, col: 9, offset: 21575},
						run: (*parser).callonAdmonitionKind4,
						expr: &litMatcher{
							pos:        position{line: 622, col: 9, offset: 21575},
							val:        "NOTE",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 624, col: 9, offset: 21623},
						run: (*parser).callonAdmonitionKind6,
						expr: &litMatcher{
							pos:        position{line: 624, col: 9, offset: 21623},
							val:        "IMPORTANT",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 626, col: 9, offset: 21681},
						run: (*parser).callonAdmonitionKind8,
						expr: &litMatcher{
							pos:        position{line: 626, col: 9, offset: 21681},
							val:        "WARNING",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 628, col: 9, offset: 21735},
						run: (*parser).callonAdmonitionKind10,
						expr: &litMatcher{
							pos:        position{line: 628, col: 9, offset: 21735},
							val:        "CAUTION",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Paragraph",
			pos:  position{line: 637, col: 1, offset: 22042},
			expr: &choiceExpr{
				pos: position{line: 639, col: 5, offset: 22089},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 639, col: 5, offset: 22089},
						run: (*parser).callonParagraph2,
						expr: &seqExpr{
							pos: position{line: 639, col: 5, offset: 22089},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 639, col: 5, offset: 22089},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 639, col: 16, offset: 22100},
										expr: &ruleRefExpr{
											pos:  position{line: 639, col: 17, offset: 22101},
											name: "ElementAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 639, col: 37, offset: 22121},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 639, col: 40, offset: 22124},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 639, col: 56, offset: 22140},
									val:        ": ",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 639, col: 61, offset: 22145},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 639, col: 67, offset: 22151},
										expr: &ruleRefExpr{
											pos:  position{line: 639, col: 68, offset: 22152},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 643, col: 5, offset: 22344},
						run: (*parser).callonParagraph13,
						expr: &seqExpr{
							pos: position{line: 643, col: 5, offset: 22344},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 643, col: 5, offset: 22344},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 643, col: 16, offset: 22355},
										expr: &ruleRefExpr{
											pos:  position{line: 643, col: 17, offset: 22356},
											name: "ElementAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 643, col: 37, offset: 22376},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 643, col: 43, offset: 22382},
										expr: &ruleRefExpr{
											pos:  position{line: 643, col: 44, offset: 22383},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SimpleParagraph",
			pos:  position{line: 648, col: 1, offset: 22548},
			expr: &actionExpr{
				pos: position{line: 648, col: 20, offset: 22567},
				run: (*parser).callonSimpleParagraph1,
				expr: &seqExpr{
					pos: position{line: 648, col: 20, offset: 22567},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 648, col: 20, offset: 22567},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 648, col: 31, offset: 22578},
								expr: &ruleRefExpr{
									pos:  position{line: 648, col: 32, offset: 22579},
									name: "ElementAttributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 649, col: 5, offset: 22604},
							run: (*parser).callonSimpleParagraph6,
						},
						&labeledExpr{
							pos:   position{line: 657, col: 5, offset: 22895},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 657, col: 16, offset: 22906},
								name: "FirstParagraphLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 658, col: 5, offset: 22929},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 658, col: 16, offset: 22940},
								expr: &ruleRefExpr{
									pos:  position{line: 658, col: 17, offset: 22941},
									name: "OtherParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphLines",
			pos:  position{line: 662, col: 1, offset: 23075},
			expr: &actionExpr{
				pos: position{line: 662, col: 19, offset: 23093},
				run: (*parser).callonParagraphLines1,
				expr: &seqExpr{
					pos: position{line: 662, col: 19, offset: 23093},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 662, col: 19, offset: 23093},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 662, col: 30, offset: 23104},
								name: "FirstParagraphLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 662, col: 50, offset: 23124},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 662, col: 61, offset: 23135},
								expr: &ruleRefExpr{
									pos:  position{line: 662, col: 62, offset: 23136},
									name: "OtherParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FirstParagraphLine",
			pos:  position{line: 666, col: 1, offset: 23242},
			expr: &actionExpr{
				pos: position{line: 666, col: 23, offset: 23264},
				run: (*parser).callonFirstParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 666, col: 23, offset: 23264},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 666, col: 23, offset: 23264},
							expr: &seqExpr{
								pos: position{line: 666, col: 25, offset: 23266},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 666, col: 25, offset: 23266},
										name: "LabeledListItemTerm",
									},
									&ruleRefExpr{
										pos:  position{line: 666, col: 45, offset: 23286},
										name: "LabeledListItemSeparator",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 667, col: 5, offset: 23316},
							label: "elements",
							expr: &seqExpr{
								pos: position{line: 667, col: 15, offset: 23326},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 667, col: 15, offset: 23326},
										name: "SimpleWord",
									},
									&zeroOrMoreExpr{
										pos: position{line: 667, col: 26, offset: 23337},
										expr: &ruleRefExpr{
											pos:  position{line: 667, col: 26, offset: 23337},
											name: "InlineElement",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 667, col: 42, offset: 23353},
							label: "linebreak",
							expr: &zeroOrOneExpr{
								pos: position{line: 667, col: 52, offset: 23363},
								expr: &ruleRefExpr{
									pos:  position{line: 667, col: 53, offset: 23364},
									name: "LineBreak",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 667, col: 65, offset: 23376},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "OtherParagraphLine",
			pos:  position{line: 671, col: 1, offset: 23466},
			expr: &actionExpr{
				pos: position{line: 671, col: 23, offset: 23488},
				run: (*parser).callonOtherParagraphLine1,
				expr: &labeledExpr{
					pos:   position{line: 671, col: 23, offset: 23488},
					label: "elements",
					expr: &ruleRefExpr{
						pos:  position{line: 671, col: 33, offset: 23498},
						name: "InlineElements",
					},
				},
			},
		},
		{
			name: "VerseParagraph",
			pos:  position{line: 675, col: 1, offset: 23544},
			expr: &choiceExpr{
				pos: position{line: 677, col: 5, offset: 23596},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 677, col: 5, offset: 23596},
						run: (*parser).callonVerseParagraph2,
						expr: &seqExpr{
							pos: position{line: 677, col: 5, offset: 23596},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 677, col: 5, offset: 23596},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 677, col: 16, offset: 23607},
										expr: &ruleRefExpr{
											pos:  position{line: 677, col: 17, offset: 23608},
											name: "ElementAttributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 678, col: 5, offset: 23632},
									run: (*parser).callonVerseParagraph7,
								},
								&labeledExpr{
									pos:   position{line: 685, col: 5, offset: 23844},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 685, col: 8, offset: 23847},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 685, col: 24, offset: 23863},
									val:        ": ",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 685, col: 29, offset: 23868},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 685, col: 35, offset: 23874},
										expr: &ruleRefExpr{
											pos:  position{line: 685, col: 36, offset: 23875},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 689, col: 5, offset: 24067},
						run: (*parser).callonVerseParagraph14,
						expr: &seqExpr{
							pos: position{line: 689, col: 5, offset: 24067},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 689, col: 5, offset: 24067},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 689, col: 16, offset: 24078},
										expr: &ruleRefExpr{
											pos:  position{line: 689, col: 17, offset: 24079},
											name: "ElementAttributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 690, col: 5, offset: 24103},
									run: (*parser).callonVerseParagraph19,
								},
								&labeledExpr{
									pos:   position{line: 697, col: 5, offset: 24315},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 697, col: 11, offset: 24321},
										expr: &ruleRefExpr{
											pos:  position{line: 697, col: 12, offset: 24322},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElements",
			pos:  position{line: 701, col: 1, offset: 24423},
			expr: &actionExpr{
				pos: position{line: 701, col: 19, offset: 24441},
				run: (*parser).callonInlineElements1,
				expr: &seqExpr{
					pos: position{line: 701, col: 19, offset: 24441},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 701, col: 19, offset: 24441},
							expr: &ruleRefExpr{
								pos:  position{line: 701, col: 20, offset: 24442},
								name: "EOF",
							},
						},
						&notExpr{
							pos: position{line: 701, col: 24, offset: 24446},
							expr: &ruleRefExpr{
								pos:  position{line: 701, col: 25, offset: 24447},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 702, col: 5, offset: 24461},
							label: "elements",
							expr: &choiceExpr{
								pos: position{line: 702, col: 15, offset: 24471},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 702, col: 15, offset: 24471},
										run: (*parser).callonInlineElements9,
										expr: &labeledExpr{
											pos:   position{line: 702, col: 15, offset: 24471},
											label: "comment",
											expr: &ruleRefExpr{
												pos:  position{line: 702, col: 24, offset: 24480},
												name: "SingleLineComment",
											},
										},
									},
									&actionExpr{
										pos: position{line: 704, col: 9, offset: 24572},
										run: (*parser).callonInlineElements12,
										expr: &seqExpr{
											pos: position{line: 704, col: 9, offset: 24572},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 704, col: 9, offset: 24572},
													expr: &ruleRefExpr{
														pos:  position{line: 704, col: 10, offset: 24573},
														name: "BlockDelimiter",
													},
												},
												&labeledExpr{
													pos:   position{line: 704, col: 25, offset: 24588},
													label: "elements",
													expr: &oneOrMoreExpr{
														pos: position{line: 704, col: 34, offset: 24597},
														expr: &ruleRefExpr{
															pos:  position{line: 704, col: 35, offset: 24598},
															name: "InlineElement",
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 704, col: 51, offset: 24614},
													label: "linebreak",
													expr: &zeroOrOneExpr{
														pos: position{line: 704, col: 61, offset: 24624},
														expr: &ruleRefExpr{
															pos:  position{line: 704, col: 62, offset: 24625},
															name: "LineBreak",
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 704, col: 74, offset: 24637},
													name: "EOL",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElement",
			pos:  position{line: 710, col: 1, offset: 24773},
			expr: &actionExpr{
				pos: position{line: 710, col: 18, offset: 24790},
				run: (*parser).callonInlineElement1,
				expr: &seqExpr{
					pos: position{line: 710, col: 18, offset: 24790},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 710, col: 18, offset: 24790},
							expr: &ruleRefExpr{
								pos:  position{line: 710, col: 19, offset: 24791},
								name: "EOL",
							},
						},
						&notExpr{
							pos: position{line: 710, col: 23, offset: 24795},
							expr: &ruleRefExpr{
								pos:  position{line: 710, col: 24, offset: 24796},
								name: "LineBreak",
							},
						},
						&labeledExpr{
							pos:   position{line: 711, col: 5, offset: 24811},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 711, col: 14, offset: 24820},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 711, col: 14, offset: 24820},
										name: "SimpleWord",
									},
									&ruleRefExpr{
										pos:  position{line: 712, col: 11, offset: 24841},
										name: "Spaces",
									},
									&ruleRefExpr{
										pos:  position{line: 713, col: 11, offset: 24859},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 714, col: 11, offset: 24882},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 715, col: 11, offset: 24898},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 716, col: 11, offset: 24921},
										name: "InlineFootnote",
									},
									&ruleRefExpr{
										pos:  position{line: 717, col: 11, offset: 24947},
										name: "InlineUserMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 718, col: 11, offset: 24974},
										name: "QuotedText",
									},
									&ruleRefExpr{
										pos:  position{line: 719, col: 11, offset: 24996},
										name: "CrossReference",
									},
									&ruleRefExpr{
										pos:  position{line: 720, col: 11, offset: 25022},
										name: "DocumentAttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 721, col: 11, offset: 25063},
										name: "InlineElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 722, col: 11, offset: 25090},
										name: "OtherWord",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElementsWithoutSubtitution",
			pos:  position{line: 729, col: 1, offset: 25350},
			expr: &actionExpr{
				pos: position{line: 729, col: 37, offset: 25386},
				run: (*parser).callonInlineElementsWithoutSubtitution1,
				expr: &seqExpr{
					pos: position{line: 729, col: 37, offset: 25386},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 729, col: 37, offset: 25386},
							expr: &ruleRefExpr{
								pos:  position{line: 729, col: 38, offset: 25387},
								name: "BlankLine",
							},
						},
						&notExpr{
							pos: position{line: 729, col: 48, offset: 25397},
							expr: &ruleRefExpr{
								pos:  position{line: 729, col: 49, offset: 25398},
								name: "BlockDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 729, col: 64, offset: 25413},
							label: "elements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 729, col: 73, offset: 25422},
								expr: &ruleRefExpr{
									pos:  position{line: 729, col: 74, offset: 25423},
									name: "InlineElementWithoutSubtitution",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 729, col: 108, offset: 25457},
							label: "linebreak",
							expr: &zeroOrOneExpr{
								pos: position{line: 729, col: 118, offset: 25467},
								expr: &ruleRefExpr{
									pos:  position{line: 729, col: 119, offset: 25468},
									name: "LineBreak",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 729, col: 131, offset: 25480},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "InlineElementWithoutSubtitution",
			pos:  position{line: 733, col: 1, offset: 25571},
			expr: &actionExpr{
				pos: position{line: 733, col: 36, offset: 25606},
				run: (*parser).callonInlineElementWithoutSubtitution1,
				expr: &seqExpr{
					pos: position{line: 733, col: 36, offset: 25606},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 733, col: 36, offset: 25606},
							expr: &ruleRefExpr{
								pos:  position{line: 733, col: 37, offset: 25607},
								name: "EOL",
							},
						},
						&notExpr{
							pos: position{line: 733, col: 41, offset: 25611},
							expr: &ruleRefExpr{
								pos:  position{line: 733, col: 42, offset: 25612},
								name: "LineBreak",
							},
						},
						&labeledExpr{
							pos:   position{line: 734, col: 5, offset: 25627},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 734, col: 14, offset: 25636},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 734, col: 14, offset: 25636},
										name: "SimpleWord",
									},
									&ruleRefExpr{
										pos:  position{line: 735, col: 11, offset: 25657},
										name: "Spaces",
									},
									&ruleRefExpr{
										pos:  position{line: 736, col: 11, offset: 25675},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 737, col: 11, offset: 25698},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 738, col: 11, offset: 25714},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 739, col: 11, offset: 25737},
										name: "QuotedText",
									},
									&ruleRefExpr{
										pos:  position{line: 740, col: 11, offset: 25759},
										name: "CrossReference",
									},
									&ruleRefExpr{
										pos:  position{line: 741, col: 11, offset: 25785},
										name: "InlineElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 742, col: 11, offset: 25811},
										name: "OtherWord",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerbatimBlock",
			pos:  position{line: 747, col: 1, offset: 25945},
			expr: &actionExpr{
				pos: position{line: 747, col: 18, offset: 25962},
				run: (*parser).callonVerbatimBlock1,
				expr: &seqExpr{
					pos: position{line: 747, col: 18, offset: 25962},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 747, col: 18, offset: 25962},
							label: "elements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 747, col: 27, offset: 25971},
								expr: &choiceExpr{
									pos: position{line: 747, col: 28, offset: 25972},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 747, col: 28, offset: 25972},
											name: "BlankLine",
										},
										&ruleRefExpr{
											pos:  position{line: 747, col: 40, offset: 25984},
											name: "FileInclusion",
										},
										&ruleRefExpr{
											pos:  position{line: 747, col: 56, offset: 26000},
											name: "VerbatimParagraph",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 747, col: 76, offset: 26020},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "VerbatimParagraph",
			pos:  position{line: 751, col: 1, offset: 26054},
			expr: &actionExpr{
				pos: position{line: 751, col: 22, offset: 26075},
				run: (*parser).callonVerbatimParagraph1,
				expr: &seqExpr{
					pos: position{line: 751, col: 22, offset: 26075},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 751, col: 22, offset: 26075},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 751, col: 33, offset: 26086},
								expr: &ruleRefExpr{
									pos:  position{line: 751, col: 34, offset: 26087},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 751, col: 54, offset: 26107},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 751, col: 60, offset: 26113},
								expr: &actionExpr{
									pos: position{line: 751, col: 61, offset: 26114},
									run: (*parser).callonVerbatimParagraph8,
									expr: &seqExpr{
										pos: position{line: 751, col: 61, offset: 26114},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 751, col: 61, offset: 26114},
												expr: &ruleRefExpr{
													pos:  position{line: 751, col: 62, offset: 26115},
													name: "EOF",
												},
											},
											&labeledExpr{
												pos:   position{line: 751, col: 66, offset: 26119},
												label: "line",
												expr: &ruleRefExpr{
													pos:  position{line: 751, col: 72, offset: 26125},
													name: "VerbatimParagraphLine",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerbatimParagraphLine",
			pos:  position{line: 757, col: 1, offset: 26245},
			expr: &actionExpr{
				pos: position{line: 757, col: 26, offset: 26270},
				run: (*parser).callonVerbatimParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 757, col: 26, offset: 26270},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 757, col: 26, offset: 26270},
							expr: &ruleRefExpr{
								pos:  position{line: 757, col: 27, offset: 26271},
								name: "BlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 757, col: 42, offset: 26286},
							expr: &ruleRefExpr{
								pos:  position{line: 757, col: 43, offset: 26287},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 757, col: 53, offset: 26297},
							label: "elements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 757, col: 62, offset: 26306},
								expr: &ruleRefExpr{
									pos:  position{line: 757, col: 63, offset: 26307},
									name: "VerbatimParagraphLineElement",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 757, col: 94, offset: 26338},
							label: "linebreak",
							expr: &zeroOrOneExpr{
								pos: position{line: 757, col: 104, offset: 26348},
								expr: &ruleRefExpr{
									pos:  position{line: 757, col: 105, offset: 26349},
									name: "LineBreak",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 757, col: 117, offset: 26361},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "VerbatimParagraphLineElement",
			pos:  position{line: 761, col: 1, offset: 26452},
			expr: &actionExpr{
				pos: position{line: 761, col: 33, offset: 26484},
				run: (*parser).callonVerbatimParagraphLineElement1,
				expr: &oneOrMoreExpr{
					pos: position{line: 761, col: 33, offset: 26484},
					expr: &seqExpr{
						pos: position{line: 761, col: 34, offset: 26485},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 761, col: 34, offset: 26485},
								expr: &ruleRefExpr{
									pos:  position{line: 761, col: 35, offset: 26486},
									name: "EOL",
								},
							},
							&notExpr{
								pos: position{line: 761, col: 39, offset: 26490},
								expr: &ruleRefExpr{
									pos:  position{line: 761, col: 40, offset: 26491},
									name: "LineBreak",
								},
							},
							&anyMatcher{
								line: 761, col: 50, offset: 26501,
							},
						},
					},
				},
			},
		},
		{
			name: "LineBreak",
			pos:  position{line: 768, col: 1, offset: 26725},
			expr: &actionExpr{
				pos: position{line: 768, col: 14, offset: 26738},
				run: (*parser).callonLineBreak1,
				expr: &seqExpr{
					pos: position{line: 768, col: 14, offset: 26738},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 768, col: 14, offset: 26738},
							name: "WS",
						},
						&litMatcher{
							pos:        position{line: 768, col: 17, offset: 26741},
							val:        "+",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 768, col: 21, offset: 26745},
							expr: &ruleRefExpr{
								pos:  position{line: 768, col: 21, offset: 26745},
								name: "WS",
							},
						},
						&andExpr{
							pos: position{line: 768, col: 25, offset: 26749},
							expr: &ruleRefExpr{
								pos:  position{line: 768, col: 26, offset: 26750},
								name: "EOL",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedText",
			pos:  position{line: 775, col: 1, offset: 27034},
			expr: &actionExpr{
				pos: position{line: 775, col: 15, offset: 27048},
				run: (*parser).callonQuotedText1,
				expr: &seqExpr{
					pos: position{line: 775, col: 15, offset: 27048},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 775, col: 15, offset: 27048},
							expr: &ruleRefExpr{
								pos:  position{line: 775, col: 16, offset: 27049},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 775, col: 19, offset: 27052},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 775, col: 25, offset: 27058},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 775, col: 25, offset: 27058},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 776, col: 15, offset: 27082},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 777, col: 15, offset: 27108},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 778, col: 15, offset: 27137},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 779, col: 15, offset: 27166},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 780, col: 15, offset: 27197},
										name: "EscapedBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 781, col: 15, offset: 27228},
										name: "EscapedItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 782, col: 15, offset: 27261},
										name: "EscapedMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 783, col: 15, offset: 27297},
										name: "EscapedSubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 784, col: 15, offset: 27333},
										name: "EscapedSuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 785, col: 15, offset: 27370},
										name: "SubscriptOrSuperscriptPrefix",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextPrefix",
			pos:  position{line: 789, col: 1, offset: 27524},
			expr: &choiceExpr{
				pos: position{line: 789, col: 21, offset: 27544},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 789, col: 21, offset: 27544},
						val:        "**",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 789, col: 28, offset: 27551},
						val:        "*",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 789, col: 34, offset: 27557},
						val:        "__",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 789, col: 41, offset: 27564},
						val:        "_",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 789, col: 47, offset: 27570},
						val:        "``",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 789, col: 54, offset: 27577},
						val:        "`",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 789, col: 60, offset: 27583},
						val:        "^",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 789, col: 66, offset: 27589},
						val:        "~",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "SubscriptOrSuperscriptPrefix",
			pos:  position{line: 791, col: 1, offset: 27594},
			expr: &choiceExpr{
				pos: position{line: 791, col: 33, offset: 27626},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 791, col: 33, offset: 27626},
						val:        "^",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 791, col: 39, offset: 27632},
						run: (*parser).callonSubscriptOrSuperscriptPrefix3,
						expr: &litMatcher{
							pos:        position{line: 791, col: 39, offset: 27632},
							val:        "~",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "OneOrMoreBackslashes",
			pos:  position{line: 795, col: 1, offset: 27765},
			expr: &actionExpr{
				pos: position{line: 795, col: 25, offset: 27789},
				run: (*parser).callonOneOrMoreBackslashes1,
				expr: &oneOrMoreExpr{
					pos: position{line: 795, col: 25, offset: 27789},
					expr: &litMatcher{
						pos:        position{line: 795, col: 25, offset: 27789},
						val:        "\\",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "TwoOrMoreBackslashes",
			pos:  position{line: 799, col: 1, offset: 27830},
			expr: &actionExpr{
				pos: position{line: 799, col: 25, offset: 27854},
				run: (*parser).callonTwoOrMoreBackslashes1,
				expr: &seqExpr{
					pos: position{line: 799, col: 25, offset: 27854},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 799, col: 25, offset: 27854},
							val:        "\\\\",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 799, col: 30, offset: 27859},
							expr: &litMatcher{
								pos:        position{line: 799, col: 30, offset: 27859},
								val:        "\\",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "BoldText",
			pos:  position{line: 807, col: 1, offset: 27956},
			expr: &choiceExpr{
				pos: position{line: 807, col: 13, offset: 27968},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 807, col: 13, offset: 27968},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 807, col: 35, offset: 27990},
						name: "SingleQuoteBoldText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldText",
			pos:  position{line: 809, col: 1, offset: 28011},
			expr: &actionExpr{
				pos: position{line: 809, col: 24, offset: 28034},
				run: (*parser).callonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 809, col: 24, offset: 28034},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 809, col: 24, offset: 28034},
							expr: &litMatcher{
								pos:        position{line: 809, col: 25, offset: 28035},
								val:        "\\\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 809, col: 30, offset: 28040},
							val:        "**",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 809, col: 35, offset: 28045},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 809, col: 44, offset: 28054},
								name: "DoubleQuoteBoldTextContent",
							},
						},
						&litMatcher{
							pos:        position{line: 809, col: 72, offset: 28082},
							val:        "**",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextContent",
			pos:  position{line: 813, col: 1, offset: 28207},
			expr: &seqExpr{
				pos: position{line: 813, col: 31, offset: 28237},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 813, col: 31, offset: 28237},
						name: "DoubleQuoteBoldTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 813, col: 58, offset: 28264},
						expr: &actionExpr{
							pos: position{line: 813, col: 59, offset: 28265},
							run: (*parser).callonDoubleQuoteBoldTextContent4,
							expr: &seqExpr{
								pos: position{line: 813, col: 59, offset: 28265},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 813, col: 59, offset: 28265},
										expr: &litMatcher{
											pos:        position{line: 813, col: 61, offset: 28267},
											val:        "**",
											ignoreCase: false,
										},
									},
									&labeledExpr{
										pos:   position{line: 813, col: 67, offset: 28273},
										label: "element",
										expr: &choiceExpr{
											pos: position{line: 813, col: 76, offset: 28282},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 813, col: 76, offset: 28282},
													name: "WS",
												},
												&ruleRefExpr{
													pos:  position{line: 813, col: 81, offset: 28287},
													name: "DoubleQuoteBoldTextElement",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElement",
			pos:  position{line: 817, col: 1, offset: 28379},
			expr: &actionExpr{
				pos: position{line: 817, col: 31, offset: 28409},
				run: (*parser).callonDoubleQuoteBoldTextElement1,
				expr: &seqExpr{
					pos: position{line: 817, col: 31, offset: 28409},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 817, col: 31, offset: 28409},
							expr: &ruleRefExpr{
								pos:  position{line: 817, col: 32, offset: 28410},
								name: "NEWLINE",
							},
						},
						&labeledExpr{
							pos:   position{line: 817, col: 40, offset: 28418},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 817, col: 49, offset: 28427},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 817, col: 49, offset: 28427},
										name: "SingleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 818, col: 11, offset: 28458},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 819, col: 11, offset: 28480},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 820, col: 11, offset: 28504},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 821, col: 11, offset: 28528},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 822, col: 11, offset: 28554},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 823, col: 11, offset: 28577},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 824, col: 11, offset: 28593},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 825, col: 11, offset: 28616},
										name: "NonDoubleQuoteBoldText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonDoubleQuoteBoldText",
			pos:  position{line: 829, col: 1, offset: 28772},
			expr: &actionExpr{
				pos: position{line: 829, col: 27, offset: 28798},
				run: (*parser).callonNonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 829, col: 27, offset: 28798},
					exprs: []interface{}{
						&anyMatcher{
							line: 829, col: 28, offset: 28799,
						},
						&zeroOrMoreExpr{
							pos: position{line: 829, col: 31, offset: 28802},
							expr: &seqExpr{
								pos: position{line: 829, col: 32, offset: 28803},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 829, col: 32, offset: 28803},
										expr: &litMatcher{
											pos:        position{line: 829, col: 33, offset: 28804},
											val:        "**",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 829, col: 38, offset: 28809},
										expr: &ruleRefExpr{
											pos:  position{line: 829, col: 39, offset: 28810},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 829, col: 42, offset: 28813},
										expr: &litMatcher{
											pos:        position{line: 829, col: 43, offset: 28814},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 829, col: 47, offset: 28818},
										expr: &litMatcher{
											pos:        position{line: 829, col: 48, offset: 28819},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 829, col: 52, offset: 28823},
										expr: &ruleRefExpr{
											pos:  position{line: 829, col: 53, offset: 28824},
											name: "NEWLINE",
										},
									},
									&anyMatcher{
										line: 829, col: 61, offset: 28832,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldText",
			pos:  position{line: 833, col: 1, offset: 28892},
			expr: &choiceExpr{
				pos: position{line: 833, col: 24, offset: 28915},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 833, col: 24, offset: 28915},
						run: (*parser).callonSingleQuoteBoldText2,
						expr: &seqExpr{
							pos: position{line: 833, col: 24, offset: 28915},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 833, col: 24, offset: 28915},
									expr: &litMatcher{
										pos:        position{line: 833, col: 25, offset: 28916},
										val:        "\\",
										ignoreCase: false,
									},
								},
								&notExpr{
									pos: position{line: 833, col: 29, offset: 28920},
									expr: &litMatcher{
										pos:        position{line: 833, col: 30, offset: 28921},
										val:        "**",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 833, col: 35, offset: 28926},
									val:        "*",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 833, col: 39, offset: 28930},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 833, col: 48, offset: 28939},
										name: "SingleQuoteBoldTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 833, col: 76, offset: 28967},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 835, col: 5, offset: 29147},
						run: (*parser).callonSingleQuoteBoldText12,
						expr: &seqExpr{
							pos: position{line: 835, col: 5, offset: 29147},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 835, col: 5, offset: 29147},
									expr: &litMatcher{
										pos:        position{line: 835, col: 6, offset: 29148},
										val:        "\\\\",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 835, col: 11, offset: 29153},
									val:        "**",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 835, col: 16, offset: 29158},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 835, col: 25, offset: 29167},
										name: "SingleQuoteBoldTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 835, col: 53, offset: 29195},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextContent",
			pos:  position{line: 839, col: 1, offset: 29453},
			expr: &seqExpr{
				pos: position{line: 839, col: 31, offset: 29483},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 839, col: 31, offset: 29483},
						expr: &ruleRefExpr{
							pos:  position{line: 839, col: 32, offset: 29484},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 839, col: 35, offset: 29487},
						name: "SingleQuoteBoldTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 839, col: 62, offset: 29514},
						expr: &actionExpr{
							pos: position{line: 839, col: 63, offset: 29515},
							run: (*parser).callonSingleQuoteBoldTextContent6,
							expr: &seqExpr{
								pos: position{line: 839, col: 63, offset: 29515},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 839, col: 63, offset: 29515},
										expr: &seqExpr{
											pos: position{line: 839, col: 65, offset: 29517},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 839, col: 65, offset: 29517},
													val:        "*",
													ignoreCase: false,
												},
												&notExpr{
													pos: position{line: 839, col: 69, offset: 29521},
													expr: &ruleRefExpr{
														pos:  position{line: 839, col: 70, offset: 29522},
														name: "Alphanum",
													},
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 839, col: 80, offset: 29532},
										label: "spaces",
										expr: &zeroOrMoreExpr{
											pos: position{line: 839, col: 88, offset: 29540},
											expr: &ruleRefExpr{
												pos:  position{line: 839, col: 88, offset: 29540},
												name: "WS",
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 839, col: 93, offset: 29545},
										label: "element",
										expr: &ruleRefExpr{
											pos:  position{line: 839, col: 102, offset: 29554},
											name: "SingleQuoteBoldTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElement",
			pos:  position{line: 843, col: 1, offset: 29645},
			expr: &actionExpr{
				pos: position{line: 843, col: 31, offset: 29675},
				run: (*parser).callonSingleQuoteBoldTextElement1,
				expr: &seqExpr{
					pos: position{line: 843, col: 31, offset: 29675},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 843, col: 31, offset: 29675},
							expr: &ruleRefExpr{
								pos:  position{line: 843, col: 32, offset: 29676},
								name: "NEWLINE",
							},
						},
						&labeledExpr{
							pos:   position{line: 843, col: 40, offset: 29684},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 843, col: 49, offset: 29693},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 843, col: 49, offset: 29693},
										name: "DoubleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 844, col: 11, offset: 29723},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 845, col: 11, offset: 29745},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 846, col: 11, offset: 29769},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 847, col: 11, offset: 29793},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 848, col: 11, offset: 29819},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 849, col: 11, offset: 29842},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 850, col: 11, offset: 29858},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 851, col: 11, offset: 29881},
										name: "NonSingleQuoteBoldText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonSingleQuoteBoldText",
			pos:  position{line: 855, col: 1, offset: 30037},
			expr: &actionExpr{
				pos: position{line: 855, col: 27, offset: 30063},
				run: (*parser).callonNonSingleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 855, col: 27, offset: 30063},
					exprs: []interface{}{
						&anyMatcher{
							line: 855, col: 28, offset: 30064,
						},
						&zeroOrMoreExpr{
							pos: position{line: 855, col: 31, offset: 30067},
							expr: &seqExpr{
								pos: position{line: 855, col: 32, offset: 30068},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 855, col: 32, offset: 30068},
										expr: &litMatcher{
											pos:        position{line: 855, col: 33, offset: 30069},
											val:        "*",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 855, col: 37, offset: 30073},
										expr: &ruleRefExpr{
											pos:  position{line: 855, col: 38, offset: 30074},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 855, col: 41, offset: 30077},
										expr: &litMatcher{
											pos:        position{line: 855, col: 42, offset: 30078},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 855, col: 46, offset: 30082},
										expr: &litMatcher{
											pos:        position{line: 855, col: 47, offset: 30083},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 855, col: 51, offset: 30087},
										expr: &ruleRefExpr{
											pos:  position{line: 855, col: 52, offset: 30088},
											name: "NEWLINE",
										},
									},
									&anyMatcher{
										line: 855, col: 60, offset: 30096,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedBoldText",
			pos:  position{line: 859, col: 1, offset: 30156},
			expr: &choiceExpr{
				pos: position{line: 860, col: 5, offset: 30180},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 860, col: 5, offset: 30180},
						run: (*parser).callonEscapedBoldText2,
						expr: &seqExpr{
							pos: position{line: 860, col: 5, offset: 30180},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 860, col: 5, offset: 30180},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 860, col: 18, offset: 30193},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 860, col: 40, offset: 30215},
									val:        "**",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 860, col: 45, offset: 30220},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 860, col: 54, offset: 30229},
										name: "DoubleQuoteBoldTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 860, col: 82, offset: 30257},
									val:        "**",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 862, col: 9, offset: 30413},
						run: (*parser).callonEscapedBoldText10,
						expr: &seqExpr{
							pos: position{line: 862, col: 9, offset: 30413},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 862, col: 9, offset: 30413},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 862, col: 22, offset: 30426},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 862, col: 44, offset: 30448},
									val:        "**",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 862, col: 49, offset: 30453},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 862, col: 58, offset: 30462},
										name: "SingleQuoteBoldTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 862, col: 86, offset: 30490},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 865, col: 9, offset: 30689},
						run: (*parser).callonEscapedBoldText18,
						expr: &seqExpr{
							pos: position{line: 865, col: 9, offset: 30689},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 865, col: 9, offset: 30689},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 865, col: 22, offset: 30702},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 865, col: 44, offset: 30724},
									val:        "*",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 865, col: 48, offset: 30728},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 865, col: 57, offset: 30737},
										name: "SingleQuoteBoldTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 865, col: 85, offset: 30765},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ItalicText",
			pos:  position{line: 873, col: 1, offset: 30972},
			expr: &choiceExpr{
				pos: position{line: 873, col: 15, offset: 30986},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 873, col: 15, offset: 30986},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 873, col: 39, offset: 31010},
						name: "SingleQuoteItalicText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicText",
			pos:  position{line: 875, col: 1, offset: 31033},
			expr: &actionExpr{
				pos: position{line: 875, col: 26, offset: 31058},
				run: (*parser).callonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 875, col: 26, offset: 31058},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 875, col: 26, offset: 31058},
							expr: &litMatcher{
								pos:        position{line: 875, col: 27, offset: 31059},
								val:        "\\\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 875, col: 32, offset: 31064},
							val:        "__",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 875, col: 37, offset: 31069},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 875, col: 46, offset: 31078},
								name: "DoubleQuoteItalicTextContent",
							},
						},
						&litMatcher{
							pos:        position{line: 875, col: 76, offset: 31108},
							val:        "__",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextContent",
			pos:  position{line: 879, col: 1, offset: 31234},
			expr: &seqExpr{
				pos: position{line: 879, col: 33, offset: 31266},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 879, col: 33, offset: 31266},
						name: "DoubleQuoteItalicTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 879, col: 62, offset: 31295},
						expr: &actionExpr{
							pos: position{line: 879, col: 63, offset: 31296},
							run: (*parser).callonDoubleQuoteItalicTextContent4,
							expr: &seqExpr{
								pos: position{line: 879, col: 63, offset: 31296},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 879, col: 63, offset: 31296},
										expr: &litMatcher{
											pos:        position{line: 879, col: 65, offset: 31298},
											val:        "__",
											ignoreCase: false,
										},
									},
									&labeledExpr{
										pos:   position{line: 879, col: 71, offset: 31304},
										label: "element",
										expr: &choiceExpr{
											pos: position{line: 879, col: 80, offset: 31313},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 879, col: 80, offset: 31313},
													name: "WS",
												},
												&ruleRefExpr{
													pos:  position{line: 879, col: 85, offset: 31318},
													name: "DoubleQuoteItalicTextElement",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElement",
			pos:  position{line: 883, col: 1, offset: 31412},
			expr: &actionExpr{
				pos: position{line: 883, col: 33, offset: 31444},
				run: (*parser).callonDoubleQuoteItalicTextElement1,
				expr: &seqExpr{
					pos: position{line: 883, col: 33, offset: 31444},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 883, col: 33, offset: 31444},
							expr: &ruleRefExpr{
								pos:  position{line: 883, col: 34, offset: 31445},
								name: "NEWLINE",
							},
						},
						&labeledExpr{
							pos:   position{line: 883, col: 42, offset: 31453},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 883, col: 51, offset: 31462},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 883, col: 51, offset: 31462},
										name: "SingleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 884, col: 11, offset: 31495},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 885, col: 11, offset: 31515},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 886, col: 11, offset: 31539},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 887, col: 11, offset: 31563},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 888, col: 11, offset: 31589},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 889, col: 11, offset: 31612},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 890, col: 11, offset: 31628},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 891, col: 11, offset: 31651},
										name: "NonDoubleQuoteItalicText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonDoubleQuoteItalicText",
			pos:  position{line: 895, col: 1, offset: 31809},
			expr: &actionExpr{
				pos: position{line: 895, col: 29, offset: 31837},
				run: (*parser).callonNonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 895, col: 29, offset: 31837},
					exprs: []interface{}{
						&anyMatcher{
							line: 895, col: 30, offset: 31838,
						},
						&zeroOrMoreExpr{
							pos: position{line: 895, col: 33, offset: 31841},
							expr: &seqExpr{
								pos: position{line: 895, col: 34, offset: 31842},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 895, col: 34, offset: 31842},
										expr: &litMatcher{
											pos:        position{line: 895, col: 35, offset: 31843},
											val:        "__",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 895, col: 40, offset: 31848},
										expr: &litMatcher{
											pos:        position{line: 895, col: 41, offset: 31849},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 895, col: 45, offset: 31853},
										expr: &litMatcher{
											pos:        position{line: 895, col: 46, offset: 31854},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 895, col: 50, offset: 31858},
										expr: &ruleRefExpr{
											pos:  position{line: 895, col: 51, offset: 31859},
											name: "NEWLINE",
										},
									},
									&anyMatcher{
										line: 895, col: 59, offset: 31867,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicText",
			pos:  position{line: 899, col: 1, offset: 31927},
			expr: &choiceExpr{
				pos: position{line: 899, col: 26, offset: 31952},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 899, col: 26, offset: 31952},
						run: (*parser).callonSingleQuoteItalicText2,
						expr: &seqExpr{
							pos: position{line: 899, col: 26, offset: 31952},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 899, col: 26, offset: 31952},
									expr: &litMatcher{
										pos:        position{line: 899, col: 27, offset: 31953},
										val:        "\\",
										ignoreCase: false,
									},
								},
								&notExpr{
									pos: position{line: 899, col: 31, offset: 31957},
									expr: &litMatcher{
										pos:        position{line: 899, col: 32, offset: 31958},
										val:        "__",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 899, col: 37, offset: 31963},
									val:        "_",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 899, col: 41, offset: 31967},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 899, col: 50, offset: 31976},
										name: "SingleQuoteItalicTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 899, col: 80, offset: 32006},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 901, col: 5, offset: 32188},
						run: (*parser).callonSingleQuoteItalicText12,
						expr: &seqExpr{
							pos: position{line: 901, col: 5, offset: 32188},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 901, col: 5, offset: 32188},
									expr: &litMatcher{
										pos:        position{line: 901, col: 6, offset: 32189},
										val:        "\\\\",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 901, col: 11, offset: 32194},
									val:        "__",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 901, col: 16, offset: 32199},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 901, col: 25, offset: 32208},
										name: "SingleQuoteItalicTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 901, col: 55, offset: 32238},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextContent",
			pos:  position{line: 905, col: 1, offset: 32500},
			expr: &seqExpr{
				pos: position{line: 905, col: 33, offset: 32532},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 905, col: 33, offset: 32532},
						expr: &ruleRefExpr{
							pos:  position{line: 905, col: 34, offset: 32533},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 905, col: 37, offset: 32536},
						name: "SingleQuoteItalicTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 905, col: 66, offset: 32565},
						expr: &actionExpr{
							pos: position{line: 905, col: 67, offset: 32566},
							run: (*parser).callonSingleQuoteItalicTextContent6,
							expr: &seqExpr{
								pos: position{line: 905, col: 67, offset: 32566},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 905, col: 67, offset: 32566},
										expr: &seqExpr{
											pos: position{line: 905, col: 69, offset: 32568},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 905, col: 69, offset: 32568},
													val:        "_",
													ignoreCase: false,
												},
												&notExpr{
													pos: position{line: 905, col: 73, offset: 32572},
													expr: &ruleRefExpr{
														pos:  position{line: 905, col: 74, offset: 32573},
														name: "Alphanum",
													},
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 905, col: 84, offset: 32583},
										label: "spaces",
										expr: &zeroOrMoreExpr{
											pos: position{line: 905, col: 92, offset: 32591},
											expr: &ruleRefExpr{
												pos:  position{line: 905, col: 92, offset: 32591},
												name: "WS",
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 905, col: 97, offset: 32596},
										label: "element",
										expr: &ruleRefExpr{
											pos:  position{line: 905, col: 106, offset: 32605},
											name: "SingleQuoteItalicTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElement",
			pos:  position{line: 909, col: 1, offset: 32698},
			expr: &actionExpr{
				pos: position{line: 909, col: 33, offset: 32730},
				run: (*parser).callonSingleQuoteItalicTextElement1,
				expr: &seqExpr{
					pos: position{line: 909, col: 33, offset: 32730},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 909, col: 33, offset: 32730},
							expr: &ruleRefExpr{
								pos:  position{line: 909, col: 34, offset: 32731},
								name: "NEWLINE",
							},
						},
						&labeledExpr{
							pos:   position{line: 909, col: 42, offset: 32739},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 909, col: 51, offset: 32748},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 909, col: 51, offset: 32748},
										name: "DoubleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 910, col: 11, offset: 32780},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 911, col: 11, offset: 32800},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 912, col: 11, offset: 32824},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 913, col: 11, offset: 32848},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 914, col: 11, offset: 32874},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 915, col: 11, offset: 32897},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 916, col: 11, offset: 32913},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 917, col: 11, offset: 32936},
										name: "NonSingleQuoteItalicText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonSingleQuoteItalicText",
			pos:  position{line: 921, col: 1, offset: 33094},
			expr: &actionExpr{
				pos: position{line: 921, col: 29, offset: 33122},
				run: (*parser).callonNonSingleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 921, col: 29, offset: 33122},
					exprs: []interface{}{
						&anyMatcher{
							line: 921, col: 30, offset: 33123,
						},
						&zeroOrMoreExpr{
							pos: position{line: 921, col: 33, offset: 33126},
							expr: &seqExpr{
								pos: position{line: 921, col: 34, offset: 33127},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 921, col: 34, offset: 33127},
										expr: &litMatcher{
											pos:        position{line: 921, col: 35, offset: 33128},
											val:        "_",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 921, col: 39, offset: 33132},
										expr: &ruleRefExpr{
											pos:  position{line: 921, col: 40, offset: 33133},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 921, col: 43, offset: 33136},
										expr: &litMatcher{
											pos:        position{line: 921, col: 44, offset: 33137},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 921, col: 48, offset: 33141},
										expr: &litMatcher{
											pos:        position{line: 921, col: 49, offset: 33142},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 921, col: 53, offset: 33146},
										expr: &ruleRefExpr{
											pos:  position{line: 921, col: 54, offset: 33147},
											name: "NEWLINE",
										},
									},
									&anyMatcher{
										line: 921, col: 62, offset: 33155,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedItalicText",
			pos:  position{line: 925, col: 1, offset: 33215},
			expr: &choiceExpr{
				pos: position{line: 926, col: 5, offset: 33241},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 926, col: 5, offset: 33241},
						run: (*parser).callonEscapedItalicText2,
						expr: &seqExpr{
							pos: position{line: 926, col: 5, offset: 33241},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 926, col: 5, offset: 33241},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 926, col: 18, offset: 33254},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 926, col: 40, offset: 33276},
									val:        "__",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 926, col: 45, offset: 33281},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 926, col: 54, offset: 33290},
										name: "DoubleQuoteItalicTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 926, col: 84, offset: 33320},
									val:        "__",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 928, col: 9, offset: 33476},
						run: (*parser).callonEscapedItalicText10,
						expr: &seqExpr{
							pos: position{line: 928, col: 9, offset: 33476},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 928, col: 9, offset: 33476},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 928, col: 22, offset: 33489},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 928, col: 44, offset: 33511},
									val:        "__",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 928, col: 49, offset: 33516},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 928, col: 58, offset: 33525},
										name: "SingleQuoteItalicTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 928, col: 88, offset: 33555},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 931, col: 9, offset: 33754},
						run: (*parser).callonEscapedItalicText18,
						expr: &seqExpr{
							pos: position{line: 931, col: 9, offset: 33754},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 931, col: 9, offset: 33754},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 931, col: 22, offset: 33767},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 931, col: 44, offset: 33789},
									val:        "_",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 931, col: 48, offset: 33793},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 931, col: 57, offset: 33802},
										name: "SingleQuoteItalicTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 931, col: 87, offset: 33832},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MonospaceText",
			pos:  position{line: 938, col: 1, offset: 34041},
			expr: &choiceExpr{
				pos: position{line: 938, col: 18, offset: 34058},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 938, col: 18, offset: 34058},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 938, col: 45, offset: 34085},
						name: "SingleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceText",
			pos:  position{line: 940, col: 1, offset: 34111},
			expr: &actionExpr{
				pos: position{line: 940, col: 29, offset: 34139},
				run: (*parser).callonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 940, col: 29, offset: 34139},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 940, col: 29, offset: 34139},
							expr: &litMatcher{
								pos:        position{line: 940, col: 30, offset: 34140},
								val:        "\\\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 940, col: 35, offset: 34145},
							val:        "``",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 940, col: 40, offset: 34150},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 940, col: 49, offset: 34159},
								name: "DoubleQuoteMonospaceTextContent",
							},
						},
						&litMatcher{
							pos:        position{line: 940, col: 82, offset: 34192},
							val:        "``",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextContent",
			pos:  position{line: 944, col: 1, offset: 34321},
			expr: &seqExpr{
				pos: position{line: 944, col: 36, offset: 34356},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 944, col: 36, offset: 34356},
						name: "DoubleQuoteMonospaceTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 944, col: 68, offset: 34388},
						expr: &actionExpr{
							pos: position{line: 944, col: 69, offset: 34389},
							run: (*parser).callonDoubleQuoteMonospaceTextContent4,
							expr: &seqExpr{
								pos: position{line: 944, col: 69, offset: 34389},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 944, col: 69, offset: 34389},
										expr: &litMatcher{
											pos:        position{line: 944, col: 71, offset: 34391},
											val:        "``",
											ignoreCase: false,
										},
									},
									&labeledExpr{
										pos:   position{line: 944, col: 77, offset: 34397},
										label: "element",
										expr: &choiceExpr{
											pos: position{line: 944, col: 86, offset: 34406},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 944, col: 86, offset: 34406},
													name: "WS",
												},
												&ruleRefExpr{
													pos:  position{line: 944, col: 91, offset: 34411},
													name: "DoubleQuoteMonospaceTextElement",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElement",
			pos:  position{line: 948, col: 1, offset: 34508},
			expr: &actionExpr{
				pos: position{line: 948, col: 36, offset: 34543},
				run: (*parser).callonDoubleQuoteMonospaceTextElement1,
				expr: &seqExpr{
					pos: position{line: 948, col: 36, offset: 34543},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 948, col: 36, offset: 34543},
							expr: &ruleRefExpr{
								pos:  position{line: 948, col: 37, offset: 34544},
								name: "NEWLINE",
							},
						},
						&labeledExpr{
							pos:   position{line: 948, col: 45, offset: 34552},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 948, col: 54, offset: 34561},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 948, col: 54, offset: 34561},
										name: "SingleQuoteMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 949, col: 11, offset: 34597},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 950, col: 11, offset: 34616},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 951, col: 11, offset: 34638},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 952, col: 11, offset: 34662},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 953, col: 11, offset: 34688},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 954, col: 11, offset: 34711},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 955, col: 11, offset: 34727},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 956, col: 11, offset: 34750},
										name: "NonDoubleQuoteMonospaceText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonDoubleQuoteMonospaceText",
			pos:  position{line: 960, col: 1, offset: 34911},
			expr: &actionExpr{
				pos: position{line: 960, col: 32, offset: 34942},
				run: (*parser).callonNonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 960, col: 32, offset: 34942},
					exprs: []interface{}{
						&anyMatcher{
							line: 960, col: 33, offset: 34943,
						},
						&zeroOrMoreExpr{
							pos: position{line: 960, col: 36, offset: 34946},
							expr: &seqExpr{
								pos: position{line: 960, col: 37, offset: 34947},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 960, col: 37, offset: 34947},
										expr: &litMatcher{
											pos:        position{line: 960, col: 38, offset: 34948},
											val:        "``",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 960, col: 43, offset: 34953},
										expr: &ruleRefExpr{
											pos:  position{line: 960, col: 44, offset: 34954},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 960, col: 47, offset: 34957},
										expr: &litMatcher{
											pos:        position{line: 960, col: 48, offset: 34958},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 960, col: 52, offset: 34962},
										expr: &litMatcher{
											pos:        position{line: 960, col: 53, offset: 34963},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 960, col: 57, offset: 34967},
										expr: &ruleRefExpr{
											pos:  position{line: 960, col: 58, offset: 34968},
											name: "NEWLINE",
										},
									},
									&anyMatcher{
										line: 960, col: 66, offset: 34976,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceText",
			pos:  position{line: 964, col: 1, offset: 35036},
			expr: &choiceExpr{
				pos: position{line: 964, col: 29, offset: 35064},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 964, col: 29, offset: 35064},
						run: (*parser).callonSingleQuoteMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 964, col: 29, offset: 35064},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 964, col: 29, offset: 35064},
									expr: &litMatcher{
										pos:        position{line: 964, col: 30, offset: 35065},
										val:        "\\",
										ignoreCase: false,
									},
								},
								&notExpr{
									pos: position{line: 964, col: 34, offset: 35069},
									expr: &litMatcher{
										pos:        position{line: 964, col: 35, offset: 35070},
										val:        "``",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 964, col: 40, offset: 35075},
									val:        "`",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 964, col: 44, offset: 35079},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 964, col: 53, offset: 35088},
										name: "SingleQuoteMonospaceTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 964, col: 86, offset: 35121},
									val:        "`",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 966, col: 5, offset: 35306},
						run: (*parser).callonSingleQuoteMonospaceText12,
						expr: &seqExpr{
							pos: position{line: 966, col: 5, offset: 35306},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 966, col: 5, offset: 35306},
									expr: &litMatcher{
										pos:        position{line: 966, col: 6, offset: 35307},
										val:        "\\\\",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 966, col: 11, offset: 35312},
									val:        "``",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 966, col: 16, offset: 35317},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 966, col: 25, offset: 35326},
										name: "SingleQuoteMonospaceTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 966, col: 58, offset: 35359},
									val:        "`",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextContent",
			pos:  position{line: 970, col: 1, offset: 35627},
			expr: &seqExpr{
				pos: position{line: 970, col: 36, offset: 35662},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 970, col: 36, offset: 35662},
						expr: &ruleRefExpr{
							pos:  position{line: 970, col: 37, offset: 35663},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 970, col: 40, offset: 35666},
						name: "SingleQuoteMonospaceTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 970, col: 72, offset: 35698},
						expr: &actionExpr{
							pos: position{line: 970, col: 73, offset: 35699},
							run: (*parser).callonSingleQuoteMonospaceTextContent6,
							expr: &seqExpr{
								pos: position{line: 970, col: 73, offset: 35699},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 970, col: 73, offset: 35699},
										expr: &seqExpr{
											pos: position{line: 970, col: 75, offset: 35701},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 970, col: 75, offset: 35701},
													val:        "`",
													ignoreCase: false,
												},
												&notExpr{
													pos: position{line: 970, col: 79, offset: 35705},
													expr: &ruleRefExpr{
														pos:  position{line: 970, col: 80, offset: 35706},
														name: "Alphanum",
													},
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 970, col: 90, offset: 35716},
										label: "spaces",
										expr: &zeroOrMoreExpr{
											pos: position{line: 970, col: 98, offset: 35724},
											expr: &ruleRefExpr{
												pos:  position{line: 970, col: 98, offset: 35724},
												name: "WS",
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 970, col: 103, offset: 35729},
										label: "element",
										expr: &ruleRefExpr{
											pos:  position{line: 970, col: 112, offset: 35738},
											name: "SingleQuoteMonospaceTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElement",
			pos:  position{line: 974, col: 1, offset: 35834},
			expr: &actionExpr{
				pos: position{line: 974, col: 37, offset: 35870},
				run: (*parser).callonSingleQuoteMonospaceTextElement1,
				expr: &labeledExpr{
					pos:   position{line: 974, col: 37, offset: 35870},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 974, col: 46, offset: 35879},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 974, col: 46, offset: 35879},
								name: "NEWLINE",
							},
							&ruleRefExpr{
								pos:  position{line: 975, col: 11, offset: 35917},
								name: "DoubleQuoteMonospaceText",
							},
							&ruleRefExpr{
								pos:  position{line: 976, col: 11, offset: 35953},
								name: "BoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 977, col: 11, offset: 35973},
								name: "ItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 978, col: 11, offset: 35994},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 979, col: 11, offset: 36018},
								name: "SuperscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 980, col: 11, offset: 36044},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 981, col: 11, offset: 36067},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 982, col: 11, offset: 36083},
								name: "Passthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 983, col: 11, offset: 36106},
								name: "NonSingleQuoteMonospaceText",
							},
						},
					},
				},
			},
		},
		{
			name: "NonSingleQuoteMonospaceText",
			pos:  position{line: 987, col: 1, offset: 36267},
			expr: &actionExpr{
				pos: position{line: 987, col: 32, offset: 36298},
				run: (*parser).callonNonSingleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 987, col: 32, offset: 36298},
					exprs: []interface{}{
						&anyMatcher{
							line: 987, col: 33, offset: 36299,
						},
						&zeroOrMoreExpr{
							pos: position{line: 987, col: 36, offset: 36302},
							expr: &seqExpr{
								pos: position{line: 987, col: 37, offset: 36303},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 987, col: 37, offset: 36303},
										expr: &ruleRefExpr{
											pos:  position{line: 987, col: 38, offset: 36304},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 987, col: 41, offset: 36307},
										expr: &litMatcher{
											pos:        position{line: 987, col: 42, offset: 36308},
											val:        "`",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 987, col: 46, offset: 36312},
										expr: &litMatcher{
											pos:        position{line: 987, col: 47, offset: 36313},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 987, col: 51, offset: 36317},
										expr: &litMatcher{
											pos:        position{line: 987, col: 52, offset: 36318},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 987, col: 56, offset: 36322},
										expr: &ruleRefExpr{
											pos:  position{line: 987, col: 57, offset: 36323},
											name: "NEWLINE",
										},
									},
									&anyMatcher{
										line: 987, col: 65, offset: 36331,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMonospaceText",
			pos:  position{line: 991, col: 1, offset: 36412},
			expr: &choiceExpr{
				pos: position{line: 992, col: 5, offset: 36441},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 992, col: 5, offset: 36441},
						run: (*parser).callonEscapedMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 992, col: 5, offset: 36441},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 992, col: 5, offset: 36441},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 992, col: 18, offset: 36454},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 992, col: 40, offset: 36476},
									val:        "``",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 992, col: 45, offset: 36481},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 992, col: 54, offset: 36490},
										name: "DoubleQuoteMonospaceTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 992, col: 87, offset: 36523},
									val:        "``",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 994, col: 9, offset: 36679},
						run: (*parser).callonEscapedMonospaceText10,
						expr: &seqExpr{
							pos: position{line: 994, col: 9, offset: 36679},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 994, col: 9, offset: 36679},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 994, col: 22, offset: 36692},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 994, col: 44, offset: 36714},
									val:        "``",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 994, col: 49, offset: 36719},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 994, col: 58, offset: 36728},
										name: "SingleQuoteMonospaceTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 994, col: 91, offset: 36761},
									val:        "`",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 997, col: 9, offset: 36960},
						run: (*parser).callonEscapedMonospaceText18,
						expr: &seqExpr{
							pos: position{line: 997, col: 9, offset: 36960},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 997, col: 9, offset: 36960},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 997, col: 22, offset: 36973},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 997, col: 44, offset: 36995},
									val:        "`",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 997, col: 48, offset: 36999},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 997, col: 57, offset: 37008},
										name: "SingleQuoteMonospaceTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 997, col: 90, offset: 37041},
									val:        "`",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptText",
			pos:  position{line: 1001, col: 1, offset: 37190},
			expr: &actionExpr{
				pos: position{line: 1001, col: 18, offset: 37207},
				run: (*parser).callonSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1001, col: 18, offset: 37207},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1001, col: 18, offset: 37207},
							expr: &litMatcher{
								pos:        position{line: 1001, col: 19, offset: 37208},
								val:        "\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 1001, col: 23, offset: 37212},
							val:        "~",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1001, col: 27, offset: 37216},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1001, col: 36, offset: 37225},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1001, col: 58, offset: 37247},
							val:        "~",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SubscriptTextElement",
			pos:  position{line: 1005, col: 1, offset: 37336},
			expr: &choiceExpr{
				pos: position{line: 1005, col: 25, offset: 37360},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1005, col: 25, offset: 37360},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1005, col: 38, offset: 37373},
						name: "NonSubscriptText",
					},
				},
			},
		},
		{
			name: "NonSubscriptText",
			pos:  position{line: 1007, col: 1, offset: 37392},
			expr: &actionExpr{
				pos: position{line: 1007, col: 21, offset: 37412},
				run: (*parser).callonNonSubscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1007, col: 21, offset: 37412},
					expr: &seqExpr{
						pos: position{line: 1007, col: 22, offset: 37413},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1007, col: 22, offset: 37413},
								expr: &ruleRefExpr{
									pos:  position{line: 1007, col: 23, offset: 37414},
									name: "NEWLINE",
								},
							},
							&notExpr{
								pos: position{line: 1007, col: 31, offset: 37422},
								expr: &ruleRefExpr{
									pos:  position{line: 1007, col: 32, offset: 37423},
									name: "WS",
								},
							},
							&notExpr{
								pos: position{line: 1007, col: 35, offset: 37426},
								expr: &litMatcher{
									pos:        position{line: 1007, col: 36, offset: 37427},
									val:        "~",
									ignoreCase: false,
								},
							},
							&anyMatcher{
								line: 1007, col: 40, offset: 37431,
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedSubscriptText",
			pos:  position{line: 1011, col: 1, offset: 37464},
			expr: &actionExpr{
				pos: position{line: 1011, col: 25, offset: 37488},
				run: (*parser).callonEscapedSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1011, col: 25, offset: 37488},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1011, col: 25, offset: 37488},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1011, col: 38, offset: 37501},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1011, col: 60, offset: 37523},
							val:        "~",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1011, col: 64, offset: 37527},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1011, col: 73, offset: 37536},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1011, col: 95, offset: 37558},
							val:        "~",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SuperscriptText",
			pos:  position{line: 1015, col: 1, offset: 37687},
			expr: &actionExpr{
				pos: position{line: 1015, col: 20, offset: 37706},
				run: (*parser).callonSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1015, col: 20, offset: 37706},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1015, col: 20, offset: 37706},
							expr: &litMatcher{
								pos:        position{line: 1015, col: 21, offset: 37707},
								val:        "\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 1015, col: 25, offset: 37711},
							val:        "^",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1015, col: 29, offset: 37715},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1015, col: 38, offset: 37724},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1015, col: 62, offset: 37748},
							val:        "^",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SuperscriptTextElement",
			pos:  position{line: 1019, col: 1, offset: 37839},
			expr: &choiceExpr{
				pos: position{line: 1019, col: 27, offset: 37865},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1019, col: 27, offset: 37865},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1019, col: 40, offset: 37878},
						name: "NonSuperscriptText",
					},
				},
			},
		},
		{
			name: "NonSuperscriptText",
			pos:  position{line: 1021, col: 1, offset: 37899},
			expr: &actionExpr{
				pos: position{line: 1021, col: 23, offset: 37921},
				run: (*parser).callonNonSuperscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1021, col: 23, offset: 37921},
					expr: &seqExpr{
						pos: position{line: 1021, col: 24, offset: 37922},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1021, col: 24, offset: 37922},
								expr: &ruleRefExpr{
									pos:  position{line: 1021, col: 25, offset: 37923},
									name: "NEWLINE",
								},
							},
							&notExpr{
								pos: position{line: 1021, col: 33, offset: 37931},
								expr: &ruleRefExpr{
									pos:  position{line: 1021, col: 34, offset: 37932},
									name: "WS",
								},
							},
							&notExpr{
								pos: position{line: 1021, col: 37, offset: 37935},
								expr: &litMatcher{
									pos:        position{line: 1021, col: 38, offset: 37936},
									val:        "^",
									ignoreCase: false,
								},
							},
							&anyMatcher{
								line: 1021, col: 42, offset: 37940,
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedSuperscriptText",
			pos:  position{line: 1025, col: 1, offset: 37973},
			expr: &actionExpr{
				pos: position{line: 1025, col: 27, offset: 37999},
				run: (*parser).callonEscapedSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1025, col: 27, offset: 37999},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1025, col: 27, offset: 37999},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1025, col: 40, offset: 38012},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1025, col: 62, offset: 38034},
							val:        "^",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1025, col: 66, offset: 38038},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1025, col: 75, offset: 38047},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1025, col: 99, offset: 38071},
							val:        "^",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Passthrough",
			pos:  position{line: 1032, col: 1, offset: 38307},
			expr: &choiceExpr{
				pos: position{line: 1032, col: 16, offset: 38322},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1032, col: 16, offset: 38322},
						name: "TriplePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1032, col: 40, offset: 38346},
						name: "SinglePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1032, col: 64, offset: 38370},
						name: "PassthroughMacro",
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughPrefix",
			pos:  position{line: 1034, col: 1, offset: 38388},
			expr: &litMatcher{
				pos:        position{line: 1034, col: 32, offset: 38419},
				val:        "+",
				ignoreCase: false,
			},
		},
		{
			name: "SinglePlusPassthrough",
			pos:  position{line: 1036, col: 1, offset: 38424},
			expr: &actionExpr{
				pos: position{line: 1036, col: 26, offset: 38449},
				run: (*parser).callonSinglePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1036, col: 26, offset: 38449},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1036, col: 26, offset: 38449},
							name: "SinglePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1036, col: 54, offset: 38477},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1036, col: 63, offset: 38486},
								name: "SinglePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1036, col: 93, offset: 38516},
							name: "SinglePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1036, col: 121, offset: 38544},
							expr: &ruleRefExpr{
								pos:  position{line: 1036, col: 122, offset: 38545},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughContent",
			pos:  position{line: 1040, col: 1, offset: 38644},
			expr: &choiceExpr{
				pos: position{line: 1040, col: 33, offset: 38676},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1040, col: 34, offset: 38677},
						run: (*parser).callonSinglePlusPassthroughContent2,
						expr: &seqExpr{
							pos: position{line: 1040, col: 34, offset: 38677},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1040, col: 35, offset: 38678},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1040, col: 35, offset: 38678},
											expr: &ruleRefExpr{
												pos:  position{line: 1040, col: 36, offset: 38679},
												name: "SinglePlusPassthroughPrefix",
											},
										},
										&notExpr{
											pos: position{line: 1040, col: 64, offset: 38707},
											expr: &ruleRefExpr{
												pos:  position{line: 1040, col: 65, offset: 38708},
												name: "WS",
											},
										},
										&notExpr{
											pos: position{line: 1040, col: 68, offset: 38711},
											expr: &ruleRefExpr{
												pos:  position{line: 1040, col: 69, offset: 38712},
												name: "NEWLINE",
											},
										},
										&anyMatcher{
											line: 1040, col: 77, offset: 38720,
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1040, col: 80, offset: 38723},
									expr: &seqExpr{
										pos: position{line: 1040, col: 81, offset: 38724},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1040, col: 81, offset: 38724},
												expr: &seqExpr{
													pos: position{line: 1040, col: 83, offset: 38726},
													exprs: []interface{}{
														&oneOrMoreExpr{
															pos: position{line: 1040, col: 83, offset: 38726},
															expr: &ruleRefExpr{
																pos:  position{line: 1040, col: 83, offset: 38726},
																name: "WS",
															},
														},
														&ruleRefExpr{
															pos:  position{line: 1040, col: 87, offset: 38730},
															name: "SinglePlusPassthroughPrefix",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 1040, col: 116, offset: 38759},
												expr: &ruleRefExpr{
													pos:  position{line: 1040, col: 117, offset: 38760},
													name: "SinglePlusPassthroughPrefix",
												},
											},
											&notExpr{
												pos: position{line: 1040, col: 145, offset: 38788},
												expr: &ruleRefExpr{
													pos:  position{line: 1040, col: 146, offset: 38789},
													name: "NEWLINE",
												},
											},
											&anyMatcher{
												line: 1040, col: 154, offset: 38797,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1042, col: 7, offset: 38939},
						run: (*parser).callonSinglePlusPassthroughContent24,
						expr: &seqExpr{
							pos: position{line: 1042, col: 8, offset: 38940},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1042, col: 8, offset: 38940},
									expr: &ruleRefExpr{
										pos:  position{line: 1042, col: 9, offset: 38941},
										name: "WS",
									},
								},
								&notExpr{
									pos: position{line: 1042, col: 12, offset: 38944},
									expr: &ruleRefExpr{
										pos:  position{line: 1042, col: 13, offset: 38945},
										name: "NEWLINE",
									},
								},
								&notExpr{
									pos: position{line: 1042, col: 21, offset: 38953},
									expr: &ruleRefExpr{
										pos:  position{line: 1042, col: 22, offset: 38954},
										name: "SinglePlusPassthroughPrefix",
									},
								},
								&anyMatcher{
									line: 1042, col: 50, offset: 38982,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughPrefix",
			pos:  position{line: 1046, col: 1, offset: 39064},
			expr: &litMatcher{
				pos:        position{line: 1046, col: 32, offset: 39095},
				val:        "+++",
				ignoreCase: false,
			},
		},
		{
			name: "TriplePlusPassthrough",
			pos:  position{line: 1048, col: 1, offset: 39102},
			expr: &actionExpr{
				pos: position{line: 1048, col: 26, offset: 39127},
				run: (*parser).callonTriplePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1048, col: 26, offset: 39127},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1048, col: 26, offset: 39127},
							name: "TriplePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1048, col: 54, offset: 39155},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1048, col: 63, offset: 39164},
								name: "TriplePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1048, col: 93, offset: 39194},
							name: "TriplePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1048, col: 121, offset: 39222},
							expr: &ruleRefExpr{
								pos:  position{line: 1048, col: 122, offset: 39223},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughContent",
			pos:  position{line: 1052, col: 1, offset: 39322},
			expr: &choiceExpr{
				pos: position{line: 1052, col: 33, offset: 39354},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1052, col: 34, offset: 39355},
						run: (*parser).callonTriplePlusPassthroughContent2,
						expr: &zeroOrMoreExpr{
							pos: position{line: 1052, col: 34, offset: 39355},
							expr: &seqExpr{
								pos: position{line: 1052, col: 35, offset: 39356},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1052, col: 35, offset: 39356},
										expr: &ruleRefExpr{
											pos:  position{line: 1052, col: 36, offset: 39357},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1052, col: 64, offset: 39385,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1054, col: 7, offset: 39550},
						run: (*parser).callonTriplePlusPassthroughContent8,
						expr: &zeroOrOneExpr{
							pos: position{line: 1054, col: 7, offset: 39550},
							expr: &seqExpr{
								pos: position{line: 1054, col: 8, offset: 39551},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1054, col: 8, offset: 39551},
										expr: &ruleRefExpr{
											pos:  position{line: 1054, col: 9, offset: 39552},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 1054, col: 12, offset: 39555},
										expr: &ruleRefExpr{
											pos:  position{line: 1054, col: 13, offset: 39556},
											name: "NEWLINE",
										},
									},
									&notExpr{
										pos: position{line: 1054, col: 21, offset: 39564},
										expr: &ruleRefExpr{
											pos:  position{line: 1054, col: 22, offset: 39565},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1054, col: 50, offset: 39593,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacro",
			pos:  position{line: 1058, col: 1, offset: 39676},
			expr: &choiceExpr{
				pos: position{line: 1058, col: 21, offset: 39696},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1058, col: 21, offset: 39696},
						run: (*parser).callonPassthroughMacro2,
						expr: &seqExpr{
							pos: position{line: 1058, col: 21, offset: 39696},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1058, col: 21, offset: 39696},
									val:        "pass:[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1058, col: 30, offset: 39705},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1058, col: 38, offset: 39713},
										expr: &ruleRefExpr{
											pos:  position{line: 1058, col: 39, offset: 39714},
											name: "PassthroughMacroCharacter",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1058, col: 67, offset: 39742},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1060, col: 5, offset: 39832},
						run: (*parser).callonPassthroughMacro9,
						expr: &seqExpr{
							pos: position{line: 1060, col: 5, offset: 39832},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1060, col: 5, offset: 39832},
									val:        "pass:q[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1060, col: 15, offset: 39842},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1060, col: 23, offset: 39850},
										expr: &choiceExpr{
											pos: position{line: 1060, col: 24, offset: 39851},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1060, col: 24, offset: 39851},
													name: "QuotedText",
												},
												&ruleRefExpr{
													pos:  position{line: 1060, col: 37, offset: 39864},
													name: "PassthroughMacroCharacter",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1060, col: 65, offset: 39892},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacroCharacter",
			pos:  position{line: 1064, col: 1, offset: 39982},
			expr: &choiceExpr{
				pos: position{line: 1064, col: 31, offset: 40012},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1064, col: 31, offset: 40012},
						name: "Alphanums",
					},
					&ruleRefExpr{
						pos:  position{line: 1064, col: 43, offset: 40024},
						name: "Spaces",
					},
					&actionExpr{
						pos: position{line: 1064, col: 52, offset: 40033},
						run: (*parser).callonPassthroughMacroCharacter4,
						expr: &seqExpr{
							pos: position{line: 1064, col: 53, offset: 40034},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1064, col: 53, offset: 40034},
									expr: &litMatcher{
										pos:        position{line: 1064, col: 54, offset: 40035},
										val:        "]",
										ignoreCase: false,
									},
								},
								&anyMatcher{
									line: 1064, col: 58, offset: 40039,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReference",
			pos:  position{line: 1071, col: 1, offset: 40209},
			expr: &choiceExpr{
				pos: position{line: 1071, col: 19, offset: 40227},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1071, col: 19, offset: 40227},
						run: (*parser).callonCrossReference2,
						expr: &seqExpr{
							pos: position{line: 1071, col: 19, offset: 40227},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1071, col: 19, offset: 40227},
									val:        "<<",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1071, col: 24, offset: 40232},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1071, col: 28, offset: 40236},
										name: "ID",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1071, col: 32, offset: 40240},
									expr: &ruleRefExpr{
										pos:  position{line: 1071, col: 32, offset: 40240},
										name: "WS",
									},
								},
								&litMatcher{
									pos:        position{line: 1071, col: 36, offset: 40244},
									val:        ",",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1071, col: 40, offset: 40248},
									label: "label",
									expr: &ruleRefExpr{
										pos:  position{line: 1071, col: 47, offset: 40255},
										name: "CrossReferenceLabel",
									},
								},
								&litMatcher{
									pos:        position{line: 1071, col: 68, offset: 40276},
									val:        ">>",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1073, col: 5, offset: 40351},
						run: (*parser).callonCrossReference13,
						expr: &seqExpr{
							pos: position{line: 1073, col: 5, offset: 40351},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1073, col: 5, offset: 40351},
									val:        "<<",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1073, col: 10, offset: 40356},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1073, col: 14, offset: 40360},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 1073, col: 18, offset: 40364},
									val:        ">>",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReferenceLabel",
			pos:  position{line: 1077, col: 1, offset: 40427},
			expr: &actionExpr{
				pos: position{line: 1077, col: 24, offset: 40450},
				run: (*parser).callonCrossReferenceLabel1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1077, col: 24, offset: 40450},
					expr: &choiceExpr{
						pos: position{line: 1077, col: 25, offset: 40451},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1077, col: 25, offset: 40451},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 1077, col: 37, offset: 40463},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 1077, col: 47, offset: 40473},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1077, col: 47, offset: 40473},
										expr: &litMatcher{
											pos:        position{line: 1077, col: 48, offset: 40474},
											val:        ">>",
											ignoreCase: false,
										},
									},
									&anyMatcher{
										line: 1077, col: 54, offset: 40480,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Link",
			pos:  position{line: 1084, col: 1, offset: 40622},
			expr: &actionExpr{
				pos: position{line: 1084, col: 9, offset: 40630},
				run: (*parser).callonLink1,
				expr: &labeledExpr{
					pos:   position{line: 1084, col: 9, offset: 40630},
					label: "link",
					expr: &choiceExpr{
						pos: position{line: 1084, col: 15, offset: 40636},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1084, col: 15, offset: 40636},
								name: "RelativeLink",
							},
							&ruleRefExpr{
								pos:  position{line: 1084, col: 30, offset: 40651},
								name: "ExternalLink",
							},
						},
					},
				},
			},
		},
		{
			name: "RelativeLink",
			pos:  position{line: 1089, col: 1, offset: 40758},
			expr: &actionExpr{
				pos: position{line: 1089, col: 17, offset: 40774},
				run: (*parser).callonRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1089, col: 17, offset: 40774},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1089, col: 17, offset: 40774},
							val:        "link:",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1089, col: 25, offset: 40782},
							label: "url",
							expr: &choiceExpr{
								pos: position{line: 1089, col: 30, offset: 40787},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1089, col: 30, offset: 40787},
										name: "Location",
									},
									&ruleRefExpr{
										pos:  position{line: 1089, col: 41, offset: 40798},
										name: "FileLocation",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1089, col: 55, offset: 40812},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1089, col: 73, offset: 40830},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalLink",
			pos:  position{line: 1093, col: 1, offset: 40948},
			expr: &actionExpr{
				pos: position{line: 1093, col: 17, offset: 40964},
				run: (*parser).callonExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1093, col: 17, offset: 40964},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1093, col: 17, offset: 40964},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1093, col: 22, offset: 40969},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1093, col: 32, offset: 40979},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1093, col: 49, offset: 40996},
								expr: &ruleRefExpr{
									pos:  position{line: 1093, col: 50, offset: 40997},
									name: "LinkAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LinkAttributes",
			pos:  position{line: 1097, col: 1, offset: 41090},
			expr: &choiceExpr{
				pos: position{line: 1097, col: 19, offset: 41108},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1097, col: 19, offset: 41108},
						name: "TextOnlyLinkAttributes",
					},
					&ruleRefExpr{
						pos:  position{line: 1097, col: 44, offset: 41133},
						name: "TextAndMoreLinkAttributes",
					},
				},
			},
		},
		{
			name: "TextOnlyLinkAttributes",
			pos:  position{line: 1099, col: 1, offset: 41160},
			expr: &actionExpr{
				pos: position{line: 1099, col: 27, offset: 41186},
				run: (*parser).callonTextOnlyLinkAttributes1,
				expr: &seqExpr{
					pos: position{line: 1099, col: 27, offset: 41186},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1099, col: 27, offset: 41186},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1099, col: 31, offset: 41190},
							label: "text",
							expr: &zeroOrOneExpr{
								pos: position{line: 1099, col: 36, offset: 41195},
								expr: &ruleRefExpr{
									pos:  position{line: 1099, col: 37, offset: 41196},
									name: "LinkTextWithCommaAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1099, col: 66, offset: 41225},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "LinkTextWithCommaAttribute",
			pos:  position{line: 1103, col: 1, offset: 41287},
			expr: &choiceExpr{
				pos: position{line: 1105, col: 5, offset: 41359},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1105, col: 5, offset: 41359},
						run: (*parser).callonLinkTextWithCommaAttribute2,
						expr: &seqExpr{
							pos: position{line: 1105, col: 5, offset: 41359},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1105, col: 5, offset: 41359},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1105, col: 10, offset: 41364},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 1105, col: 19, offset: 41373},
										expr: &seqExpr{
											pos: position{line: 1105, col: 20, offset: 41374},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1105, col: 20, offset: 41374},
													expr: &litMatcher{
														pos:        position{line: 1105, col: 21, offset: 41375},
														val:        "=",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 1105, col: 25, offset: 41379},
													expr: &litMatcher{
														pos:        position{line: 1105, col: 26, offset: 41380},
														val:        "]",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 1105, col: 30, offset: 41384},
													expr: &litMatcher{
														pos:        position{line: 1105, col: 31, offset: 41385},
														val:        "\"",
														ignoreCase: false,
													},
												},
												&choiceExpr{
													pos: position{line: 1105, col: 37, offset: 41391},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1105, col: 37, offset: 41391},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1105, col: 50, offset: 41404},
															name: "SimpleWord",
														},
														&ruleRefExpr{
															pos:  position{line: 1105, col: 63, offset: 41417},
															name: "Spaces",
														},
														&actionExpr{
															pos: position{line: 1105, col: 73, offset: 41427},
															run: (*parser).callonLinkTextWithCommaAttribute18,
															expr: &seqExpr{
																pos: position{line: 1105, col: 74, offset: 41428},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1105, col: 74, offset: 41428},
																		expr: &ruleRefExpr{
																			pos:  position{line: 1105, col: 75, offset: 41429},
																			name: "QuotedTextPrefix",
																		},
																	},
																	&anyMatcher{
																		line: 1105, col: 92, offset: 41446,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1107, col: 11, offset: 41515},
									val:        "\"",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 1107, col: 16, offset: 41520},
									expr: &ruleRefExpr{
										pos:  position{line: 1107, col: 16, offset: 41520},
										name: "Spaces",
									},
								},
								&andExpr{
									pos: position{line: 1107, col: 24, offset: 41528},
									expr: &notExpr{
										pos: position{line: 1107, col: 26, offset: 41530},
										expr: &litMatcher{
											pos:        position{line: 1107, col: 27, offset: 41531},
											val:        "=",
											ignoreCase: false,
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1111, col: 5, offset: 41656},
						run: (*parser).callonLinkTextWithCommaAttribute29,
						expr: &seqExpr{
							pos: position{line: 1111, col: 5, offset: 41656},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1111, col: 5, offset: 41656},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 1111, col: 14, offset: 41665},
										expr: &seqExpr{
											pos: position{line: 1111, col: 15, offset: 41666},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1111, col: 15, offset: 41666},
													expr: &litMatcher{
														pos:        position{line: 1111, col: 16, offset: 41667},
														val:        "=",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 1111, col: 20, offset: 41671},
													expr: &litMatcher{
														pos:        position{line: 1111, col: 21, offset: 41672},
														val:        "]",
														ignoreCase: false,
													},
												},
												&choiceExpr{
													pos: position{line: 1111, col: 26, offset: 41677},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1111, col: 26, offset: 41677},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1111, col: 39, offset: 41690},
															name: "SimpleWord",
														},
														&ruleRefExpr{
															pos:  position{line: 1111, col: 52, offset: 41703},
															name: "Spaces",
														},
														&actionExpr{
															pos: position{line: 1111, col: 62, offset: 41713},
															run: (*parser).callonLinkTextWithCommaAttribute42,
															expr: &seqExpr{
																pos: position{line: 1111, col: 63, offset: 41714},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1111, col: 63, offset: 41714},
																		expr: &ruleRefExpr{
																			pos:  position{line: 1111, col: 64, offset: 41715},
																			name: "QuotedTextPrefix",
																		},
																	},
																	&anyMatcher{
																		line: 1111, col: 81, offset: 41732,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&andExpr{
									pos: position{line: 1113, col: 11, offset: 41801},
									expr: &notExpr{
										pos: position{line: 1113, col: 13, offset: 41803},
										expr: &litMatcher{
											pos:        position{line: 1113, col: 14, offset: 41804},
											val:        "=",
											ignoreCase: false,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TextAndMoreLinkAttributes",
			pos:  position{line: 1118, col: 1, offset: 41884},
			expr: &actionExpr{
				pos: position{line: 1118, col: 30, offset: 41913},
				run: (*parser).callonTextAndMoreLinkAttributes1,
				expr: &seqExpr{
					pos: position{line: 1118, col: 30, offset: 41913},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1118, col: 30, offset: 41913},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1118, col: 34, offset: 41917},
							label: "text",
							expr: &zeroOrOneExpr{
								pos: position{line: 1118, col: 39, offset: 41922},
								expr: &ruleRefExpr{
									pos:  position{line: 1118, col: 40, offset: 41923},
									name: "LinkTextAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1118, col: 60, offset: 41943},
							expr: &litMatcher{
								pos:        position{line: 1118, col: 60, offset: 41943},
								val:        ",",
								ignoreCase: false,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1118, col: 65, offset: 41948},
							expr: &ruleRefExpr{
								pos:  position{line: 1118, col: 65, offset: 41948},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 1118, col: 69, offset: 41952},
							label: "otherattrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1118, col: 80, offset: 41963},
								expr: &ruleRefExpr{
									pos:  position{line: 1118, col: 81, offset: 41964},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1118, col: 100, offset: 41983},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "LinkTextAttribute",
			pos:  position{line: 1122, col: 1, offset: 42068},
			expr: &choiceExpr{
				pos: position{line: 1124, col: 5, offset: 42131},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1124, col: 5, offset: 42131},
						run: (*parser).callonLinkTextAttribute2,
						expr: &seqExpr{
							pos: position{line: 1124, col: 5, offset: 42131},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1124, col: 5, offset: 42131},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1124, col: 10, offset: 42136},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 1124, col: 19, offset: 42145},
										expr: &seqExpr{
											pos: position{line: 1124, col: 20, offset: 42146},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1124, col: 20, offset: 42146},
													expr: &litMatcher{
														pos:        position{line: 1124, col: 21, offset: 42147},
														val:        "=",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 1124, col: 25, offset: 42151},
													expr: &litMatcher{
														pos:        position{line: 1124, col: 26, offset: 42152},
														val:        "]",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 1124, col: 30, offset: 42156},
													expr: &litMatcher{
														pos:        position{line: 1124, col: 31, offset: 42157},
														val:        "\"",
														ignoreCase: false,
													},
												},
												&choiceExpr{
													pos: position{line: 1124, col: 37, offset: 42163},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1124, col: 37, offset: 42163},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1124, col: 50, offset: 42176},
															name: "SimpleWord",
														},
														&ruleRefExpr{
															pos:  position{line: 1124, col: 63, offset: 42189},
															name: "Spaces",
														},
														&actionExpr{
															pos: position{line: 1124, col: 73, offset: 42199},
															run: (*parser).callonLinkTextAttribute18,
															expr: &seqExpr{
																pos: position{line: 1124, col: 74, offset: 42200},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1124, col: 74, offset: 42200},
																		expr: &ruleRefExpr{
																			pos:  position{line: 1124, col: 75, offset: 42201},
																			name: "QuotedTextPrefix",
																		},
																	},
																	&anyMatcher{
																		line: 1124, col: 92, offset: 42218,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1126, col: 11, offset: 42287},
									val:        "\"",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 1126, col: 16, offset: 42292},
									expr: &ruleRefExpr{
										pos:  position{line: 1126, col: 16, offset: 42292},
										name: "Spaces",
									},
								},
								&andExpr{
									pos: position{line: 1126, col: 24, offset: 42300},
									expr: &notExpr{
										pos: position{line: 1126, col: 26, offset: 42302},
										expr: &litMatcher{
											pos:        position{line: 1126, col: 27, offset: 42303},
											val:        "=",
											ignoreCase: false,
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1130, col: 5, offset: 42428},
						run: (*parser).callonLinkTextAttribute29,
						expr: &seqExpr{
							pos: position{line: 1130, col: 5, offset: 42428},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1130, col: 5, offset: 42428},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 1130, col: 14, offset: 42437},
										expr: &seqExpr{
											pos: position{line: 1130, col: 15, offset: 42438},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1130, col: 15, offset: 42438},
													expr: &litMatcher{
														pos:        position{line: 1130, col: 16, offset: 42439},
														val:        "=",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 1130, col: 20, offset: 42443},
													expr: &litMatcher{
														pos:        position{line: 1130, col: 21, offset: 42444},
														val:        ",",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 1130, col: 25, offset: 42448},
													expr: &litMatcher{
														pos:        position{line: 1130, col: 26, offset: 42449},
														val:        "]",
														ignoreCase: false,
													},
												},
												&choiceExpr{
													pos: position{line: 1130, col: 31, offset: 42454},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1130, col: 31, offset: 42454},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1130, col: 44, offset: 42467},
															name: "SimpleWord",
														},
														&ruleRefExpr{
															pos:  position{line: 1130, col: 57, offset: 42480},
															name: "Spaces",
														},
														&actionExpr{
															pos: position{line: 1130, col: 67, offset: 42490},
															run: (*parser).callonLinkTextAttribute44,
															expr: &seqExpr{
																pos: position{line: 1130, col: 68, offset: 42491},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1130, col: 68, offset: 42491},
																		expr: &ruleRefExpr{
																			pos:  position{line: 1130, col: 69, offset: 42492},
																			name: "QuotedTextPrefix",
																		},
																	},
																	&anyMatcher{
																		line: 1130, col: 86, offset: 42509,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&andExpr{
									pos: position{line: 1132, col: 11, offset: 42578},
									expr: &notExpr{
										pos: position{line: 1132, col: 13, offset: 42580},
										expr: &litMatcher{
											pos:        position{line: 1132, col: 14, offset: 42581},
											val:        "=",
											ignoreCase: false,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageBlock",
			pos:  position{line: 1139, col: 1, offset: 42762},
			expr: &actionExpr{
				pos: position{line: 1139, col: 15, offset: 42776},
				run: (*parser).callonImageBlock1,
				expr: &seqExpr{
					pos: position{line: 1139, col: 15, offset: 42776},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1139, col: 15, offset: 42776},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1139, col: 26, offset: 42787},
								expr: &ruleRefExpr{
									pos:  position{line: 1139, col: 27, offset: 42788},
									name: "ElementAttributes",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1139, col: 47, offset: 42808},
							val:        "image::",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1139, col: 57, offset: 42818},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1139, col: 63, offset: 42824},
								name: "URL",
							},
						},
						&labeledExpr{
							pos:   position{line: 1139, col: 68, offset: 42829},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1139, col: 86, offset: 42847},
								name: "ImageAttributes",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1139, col: 103, offset: 42864},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "InlineImage",
			pos:  position{line: 1143, col: 1, offset: 42976},
			expr: &actionExpr{
				pos: position{line: 1143, col: 16, offset: 42991},
				run: (*parser).callonInlineImage1,
				expr: &seqExpr{
					pos: position{line: 1143, col: 16, offset: 42991},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1143, col: 16, offset: 42991},
							val:        "image:",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 1143, col: 25, offset: 43000},
							expr: &litMatcher{
								pos:        position{line: 1143, col: 26, offset: 43001},
								val:        ":",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 1143, col: 30, offset: 43005},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1143, col: 36, offset: 43011},
								name: "URL",
							},
						},
						&labeledExpr{
							pos:   position{line: 1143, col: 41, offset: 43016},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1143, col: 59, offset: 43034},
								name: "ImageAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ImageAttributes",
			pos:  position{line: 1147, col: 1, offset: 43147},
			expr: &actionExpr{
				pos: position{line: 1147, col: 20, offset: 43166},
				run: (*parser).callonImageAttributes1,
				expr: &seqExpr{
					pos: position{line: 1147, col: 20, offset: 43166},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1147, col: 20, offset: 43166},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1147, col: 24, offset: 43170},
							label: "alt",
							expr: &zeroOrOneExpr{
								pos: position{line: 1147, col: 28, offset: 43174},
								expr: &ruleRefExpr{
									pos:  position{line: 1147, col: 29, offset: 43175},
									name: "AttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1147, col: 46, offset: 43192},
							expr: &litMatcher{
								pos:        position{line: 1147, col: 46, offset: 43192},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 1147, col: 51, offset: 43197},
							label: "width",
							expr: &zeroOrOneExpr{
								pos: position{line: 1147, col: 57, offset: 43203},
								expr: &ruleRefExpr{
									pos:  position{line: 1147, col: 58, offset: 43204},
									name: "AttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1147, col: 75, offset: 43221},
							expr: &litMatcher{
								pos:        position{line: 1147, col: 75, offset: 43221},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 1147, col: 80, offset: 43226},
							label: "height",
							expr: &zeroOrOneExpr{
								pos: position{line: 1147, col: 87, offset: 43233},
								expr: &ruleRefExpr{
									pos:  position{line: 1147, col: 88, offset: 43234},
									name: "AttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1147, col: 105, offset: 43251},
							expr: &litMatcher{
								pos:        position{line: 1147, col: 105, offset: 43251},
								val:        ",",
								ignoreCase: false,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1147, col: 110, offset: 43256},
							expr: &ruleRefExpr{
								pos:  position{line: 1147, col: 110, offset: 43256},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 1147, col: 114, offset: 43260},
							label: "otherattrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1147, col: 125, offset: 43271},
								expr: &ruleRefExpr{
									pos:  position{line: 1147, col: 126, offset: 43272},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1147, col: 145, offset: 43291},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "InlineFootnote",
			pos:  position{line: 1154, col: 1, offset: 43581},
			expr: &choiceExpr{
				pos: position{line: 1154, col: 19, offset: 43599},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1154, col: 19, offset: 43599},
						run: (*parser).callonInlineFootnote2,
						expr: &seqExpr{
							pos: position{line: 1154, col: 19, offset: 43599},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1154, col: 19, offset: 43599},
									val:        "footnote:[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1154, col: 32, offset: 43612},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1154, col: 41, offset: 43621},
										name: "FootnoteContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1154, col: 58, offset: 43638},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1156, col: 5, offset: 43713},
						run: (*parser).callonInlineFootnote8,
						expr: &seqExpr{
							pos: position{line: 1156, col: 5, offset: 43713},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1156, col: 5, offset: 43713},
									val:        "footnoteref:[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1156, col: 21, offset: 43729},
									label: "ref",
									expr: &ruleRefExpr{
										pos:  position{line: 1156, col: 26, offset: 43734},
										name: "FootnoteRef",
									},
								},
								&litMatcher{
									pos:        position{line: 1156, col: 39, offset: 43747},
									val:        ",",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1156, col: 43, offset: 43751},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1156, col: 52, offset: 43760},
										name: "FootnoteContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1156, col: 69, offset: 43777},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1158, col: 5, offset: 43862},
						run: (*parser).callonInlineFootnote17,
						expr: &seqExpr{
							pos: position{line: 1158, col: 5, offset: 43862},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1158, col: 5, offset: 43862},
									val:        "footnoteref:[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1158, col: 21, offset: 43878},
									label: "ref",
									expr: &ruleRefExpr{
										pos:  position{line: 1158, col: 26, offset: 43883},
										name: "FootnoteRef",
									},
								},
								&litMatcher{
									pos:        position{line: 1158, col: 39, offset: 43896},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FootnoteRef",
			pos:  position{line: 1162, col: 1, offset: 44011},
			expr: &actionExpr{
				pos: position{line: 1162, col: 16, offset: 44026},
				run: (*parser).callonFootnoteRef1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1162, col: 16, offset: 44026},
					expr: &choiceExpr{
						pos: position{line: 1162, col: 17, offset: 44027},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1162, col: 17, offset: 44027},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 1162, col: 29, offset: 44039},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 1162, col: 39, offset: 44049},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1162, col: 39, offset: 44049},
										expr: &litMatcher{
											pos:        position{line: 1162, col: 40, offset: 44050},
											val:        ",",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1162, col: 44, offset: 44054},
										expr: &litMatcher{
											pos:        position{line: 1162, col: 45, offset: 44055},
											val:        "]",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1162, col: 49, offset: 44059},
										expr: &ruleRefExpr{
											pos:  position{line: 1162, col: 50, offset: 44060},
											name: "EOL",
										},
									},
									&anyMatcher{
										line: 1162, col: 55, offset: 44065,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FootnoteContent",
			pos:  position{line: 1166, col: 1, offset: 44150},
			expr: &actionExpr{
				pos: position{line: 1166, col: 20, offset: 44169},
				run: (*parser).callonFootnoteContent1,
				expr: &labeledExpr{
					pos:   position{line: 1166, col: 20, offset: 44169},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1166, col: 29, offset: 44178},
						expr: &seqExpr{
							pos: position{line: 1166, col: 30, offset: 44179},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1166, col: 30, offset: 44179},
									expr: &litMatcher{
										pos:        position{line: 1166, col: 31, offset: 44180},
										val:        "]",
										ignoreCase: false,
									},
								},
								&notExpr{
									pos: position{line: 1166, col: 35, offset: 44184},
									expr: &ruleRefExpr{
										pos:  position{line: 1166, col: 36, offset: 44185},
										name: "EOL",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1166, col: 40, offset: 44189},
									expr: &ruleRefExpr{
										pos:  position{line: 1166, col: 40, offset: 44189},
										name: "WS",
									},
								},
								&notExpr{
									pos: position{line: 1166, col: 44, offset: 44193},
									expr: &ruleRefExpr{
										pos:  position{line: 1166, col: 45, offset: 44194},
										name: "InlineElementID",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1166, col: 61, offset: 44210},
									name: "InlineElement",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1166, col: 75, offset: 44224},
									expr: &ruleRefExpr{
										pos:  position{line: 1166, col: 75, offset: 44224},
										name: "WS",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DelimitedBlock",
			pos:  position{line: 1173, col: 1, offset: 44538},
			expr: &actionExpr{
				pos: position{line: 1173, col: 19, offset: 44556},
				run: (*parser).callonDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 1173, col: 19, offset: 44556},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1173, col: 19, offset: 44556},
							expr: &ruleRefExpr{
								pos:  position{line: 1173, col: 20, offset: 44557},
								name: "Alphanum",
							},
						},
						&labeledExpr{
							pos:   position{line: 1174, col: 5, offset: 44586},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 1174, col: 12, offset: 44593},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1174, col: 12, offset: 44593},
										name: "FencedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1175, col: 11, offset: 44616},
										name: "ListingBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1176, col: 11, offset: 44640},
										name: "ExampleBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1177, col: 11, offset: 44664},
										name: "VerseBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1178, col: 11, offset: 44686},
										name: "QuoteBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1179, col: 11, offset: 44708},
										name: "SidebarBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1180, col: 11, offset: 44731},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 1181, col: 11, offset: 44759},
										name: "Table",
									},
									&ruleRefExpr{
										pos:  position{line: 1182, col: 11, offset: 44775},
										name: "CommentBlock",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockDelimiter",
			pos:  position{line: 1186, col: 1, offset: 44816},
			expr: &choiceExpr{
				pos: position{line: 1186, col: 19, offset: 44834},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1186, col: 19, offset: 44834},
						name: "LiteralBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1187, col: 19, offset: 44875},
						name: "FencedBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1188, col: 19, offset: 44915},
						name: "ListingBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1189, col: 19, offset: 44956},
						name: "ExampleBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1190, col: 19, offset: 44997},
						name: "CommentBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1191, col: 19, offset: 45038},
						name: "QuoteBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1192, col: 19, offset: 45076},
						name: "SidebarBlockDelimiter",
					},
				},
			},
		},
		{
			name: "FencedBlockDelimiter",
			pos:  position{line: 1198, col: 1, offset: 45295},
			expr: &seqExpr{
				pos: position{line: 1198, col: 25, offset: 45319},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1198, col: 25, offset: 45319},
						val:        "```",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1198, col: 31, offset: 45325},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "FencedBlock",
			pos:  position{line: 1200, col: 1, offset: 45331},
			expr: &actionExpr{
				pos: position{line: 1200, col: 16, offset: 45346},
				run: (*parser).callonFencedBlock1,
				expr: &seqExpr{
					pos: position{line: 1200, col: 16, offset: 45346},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1200, col: 16, offset: 45346},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1200, col: 27, offset: 45357},
								expr: &ruleRefExpr{
									pos:  position{line: 1200, col: 28, offset: 45358},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1200, col: 48, offset: 45378},
							name: "FencedBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1200, col: 69, offset: 45399},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1200, col: 77, offset: 45407},
								expr: &ruleRefExpr{
									pos:  position{line: 1200, col: 78, offset: 45408},
									name: "FencedBlockContent",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1200, col: 100, offset: 45430},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1200, col: 100, offset: 45430},
									name: "FencedBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1200, col: 123, offset: 45453},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FencedBlockContent",
			pos:  position{line: 1204, col: 1, offset: 45561},
			expr: &choiceExpr{
				pos: position{line: 1204, col: 23, offset: 45583},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1204, col: 23, offset: 45583},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 1204, col: 35, offset: 45595},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 1204, col: 51, offset: 45611},
						name: "ListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 1204, col: 62, offset: 45622},
						name: "FencedBlockParagraph",
					},
				},
			},
		},
		{
			name: "FencedBlockParagraph",
			pos:  position{line: 1207, col: 1, offset: 45662},
			expr: &actionExpr{
				pos: position{line: 1207, col: 25, offset: 45686},
				run: (*parser).callonFencedBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1207, col: 25, offset: 45686},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1207, col: 31, offset: 45692},
						expr: &ruleRefExpr{
							pos:  position{line: 1207, col: 32, offset: 45693},
							name: "FencedBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "FencedBlockParagraphLine",
			pos:  position{line: 1211, col: 1, offset: 45806},
			expr: &actionExpr{
				pos: position{line: 1211, col: 29, offset: 45834},
				run: (*parser).callonFencedBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1211, col: 29, offset: 45834},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1211, col: 29, offset: 45834},
							expr: &ruleRefExpr{
								pos:  position{line: 1211, col: 30, offset: 45835},
								name: "FencedBlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 1211, col: 51, offset: 45856},
							expr: &ruleRefExpr{
								pos:  position{line: 1211, col: 52, offset: 45857},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1211, col: 62, offset: 45867},
							label: "line",
							expr: &ruleRefExpr{
								pos:  position{line: 1211, col: 68, offset: 45873},
								name: "InlineElements",
							},
						},
					},
				},
			},
		},
		{
			name: "ListingBlockDelimiter",
			pos:  position{line: 1218, col: 1, offset: 46111},
			expr: &seqExpr{
				pos: position{line: 1218, col: 26, offset: 46136},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1218, col: 26, offset: 46136},
						val:        "----",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1218, col: 33, offset: 46143},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "ListingBlock",
			pos:  position{line: 1221, col: 1, offset: 46184},
			expr: &actionExpr{
				pos: position{line: 1221, col: 17, offset: 46200},
				run: (*parser).callonListingBlock1,
				expr: &seqExpr{
					pos: position{line: 1221, col: 17, offset: 46200},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1221, col: 17, offset: 46200},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1221, col: 28, offset: 46211},
								expr: &ruleRefExpr{
									pos:  position{line: 1221, col: 29, offset: 46212},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1221, col: 49, offset: 46232},
							name: "ListingBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1221, col: 71, offset: 46254},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1221, col: 79, offset: 46262},
								expr: &ruleRefExpr{
									pos:  position{line: 1221, col: 80, offset: 46263},
									name: "ListingBlockElement",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1221, col: 103, offset: 46286},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1221, col: 103, offset: 46286},
									name: "ListingBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1221, col: 127, offset: 46310},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListingBlockElement",
			pos:  position{line: 1225, col: 1, offset: 46419},
			expr: &choiceExpr{
				pos: position{line: 1225, col: 24, offset: 46442},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1225, col: 24, offset: 46442},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 1225, col: 40, offset: 46458},
						name: "ListingBlockParagraph",
					},
				},
			},
		},
		{
			name: "ListingBlockParagraph",
			pos:  position{line: 1227, col: 1, offset: 46481},
			expr: &actionExpr{
				pos: position{line: 1227, col: 26, offset: 46506},
				run: (*parser).callonListingBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1227, col: 26, offset: 46506},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1227, col: 32, offset: 46512},
						expr: &ruleRefExpr{
							pos:  position{line: 1227, col: 33, offset: 46513},
							name: "ListingBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "ListingBlockParagraphLine",
			pos:  position{line: 1231, col: 1, offset: 46632},
			expr: &actionExpr{
				pos: position{line: 1231, col: 30, offset: 46661},
				run: (*parser).callonListingBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1231, col: 30, offset: 46661},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1231, col: 30, offset: 46661},
							expr: &ruleRefExpr{
								pos:  position{line: 1231, col: 31, offset: 46662},
								name: "ListingBlockDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1231, col: 53, offset: 46684},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1231, col: 59, offset: 46690},
								run: (*parser).callonListingBlockParagraphLine6,
								expr: &seqExpr{
									pos: position{line: 1231, col: 59, offset: 46690},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1231, col: 59, offset: 46690},
											expr: &ruleRefExpr{
												pos:  position{line: 1231, col: 60, offset: 46691},
												name: "EOF",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 1231, col: 64, offset: 46695},
											expr: &choiceExpr{
												pos: position{line: 1231, col: 65, offset: 46696},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 1231, col: 65, offset: 46696},
														name: "Alphanums",
													},
													&ruleRefExpr{
														pos:  position{line: 1231, col: 77, offset: 46708},
														name: "Spaces",
													},
													&seqExpr{
														pos: position{line: 1231, col: 87, offset: 46718},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 1231, col: 87, offset: 46718},
																expr: &ruleRefExpr{
																	pos:  position{line: 1231, col: 88, offset: 46719},
																	name: "EOL",
																},
															},
															&anyMatcher{
																line: 1231, col: 92, offset: 46723,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1231, col: 128, offset: 46759},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockDelimiter",
			pos:  position{line: 1238, col: 1, offset: 47085},
			expr: &seqExpr{
				pos: position{line: 1238, col: 26, offset: 47110},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1238, col: 26, offset: 47110},
						val:        "====",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1238, col: 33, offset: 47117},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "ExampleBlock",
			pos:  position{line: 1240, col: 1, offset: 47123},
			expr: &actionExpr{
				pos: position{line: 1240, col: 17, offset: 47139},
				run: (*parser).callonExampleBlock1,
				expr: &seqExpr{
					pos: position{line: 1240, col: 17, offset: 47139},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1240, col: 17, offset: 47139},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1240, col: 28, offset: 47150},
								expr: &ruleRefExpr{
									pos:  position{line: 1240, col: 29, offset: 47151},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1240, col: 49, offset: 47171},
							name: "ExampleBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1240, col: 71, offset: 47193},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1240, col: 79, offset: 47201},
								expr: &choiceExpr{
									pos: position{line: 1240, col: 80, offset: 47202},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1240, col: 80, offset: 47202},
											name: "BlankLine",
										},
										&ruleRefExpr{
											pos:  position{line: 1240, col: 92, offset: 47214},
											name: "FileInclusion",
										},
										&ruleRefExpr{
											pos:  position{line: 1240, col: 108, offset: 47230},
											name: "ListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1240, col: 119, offset: 47241},
											name: "ExampleBlockParagraph",
										},
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1240, col: 145, offset: 47267},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1240, col: 145, offset: 47267},
									name: "ExampleBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1240, col: 169, offset: 47291},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockParagraph",
			pos:  position{line: 1245, col: 1, offset: 47418},
			expr: &actionExpr{
				pos: position{line: 1245, col: 26, offset: 47443},
				run: (*parser).callonExampleBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1245, col: 26, offset: 47443},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1245, col: 32, offset: 47449},
						expr: &ruleRefExpr{
							pos:  position{line: 1245, col: 33, offset: 47450},
							name: "ExampleBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockParagraphLine",
			pos:  position{line: 1249, col: 1, offset: 47564},
			expr: &actionExpr{
				pos: position{line: 1249, col: 30, offset: 47593},
				run: (*parser).callonExampleBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1249, col: 30, offset: 47593},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1249, col: 30, offset: 47593},
							expr: &ruleRefExpr{
								pos:  position{line: 1249, col: 31, offset: 47594},
								name: "ExampleBlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 1249, col: 53, offset: 47616},
							expr: &ruleRefExpr{
								pos:  position{line: 1249, col: 54, offset: 47617},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1249, col: 64, offset: 47627},
							label: "line",
							expr: &ruleRefExpr{
								pos:  position{line: 1249, col: 70, offset: 47633},
								name: "InlineElements",
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockDelimiter",
			pos:  position{line: 1256, col: 1, offset: 47869},
			expr: &seqExpr{
				pos: position{line: 1256, col: 24, offset: 47892},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1256, col: 24, offset: 47892},
						val:        "____",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1256, col: 31, offset: 47899},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "QuoteBlock",
			pos:  position{line: 1258, col: 1, offset: 47930},
			expr: &actionExpr{
				pos: position{line: 1258, col: 15, offset: 47944},
				run: (*parser).callonQuoteBlock1,
				expr: &seqExpr{
					pos: position{line: 1258, col: 15, offset: 47944},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1258, col: 15, offset: 47944},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1258, col: 26, offset: 47955},
								expr: &ruleRefExpr{
									pos:  position{line: 1258, col: 27, offset: 47956},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1258, col: 47, offset: 47976},
							name: "QuoteBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1258, col: 67, offset: 47996},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1258, col: 75, offset: 48004},
								expr: &ruleRefExpr{
									pos:  position{line: 1258, col: 76, offset: 48005},
									name: "QuoteBlockElement",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1258, col: 97, offset: 48026},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1258, col: 97, offset: 48026},
									name: "QuoteBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1258, col: 119, offset: 48048},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockElement",
			pos:  position{line: 1262, col: 1, offset: 48155},
			expr: &actionExpr{
				pos: position{line: 1263, col: 5, offset: 48181},
				run: (*parser).callonQuoteBlockElement1,
				expr: &seqExpr{
					pos: position{line: 1263, col: 5, offset: 48181},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1263, col: 5, offset: 48181},
							expr: &ruleRefExpr{
								pos:  position{line: 1263, col: 6, offset: 48182},
								name: "QuoteBlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 1263, col: 26, offset: 48202},
							expr: &ruleRefExpr{
								pos:  position{line: 1263, col: 27, offset: 48203},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1263, col: 31, offset: 48207},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1263, col: 40, offset: 48216},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1263, col: 40, offset: 48216},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 1264, col: 15, offset: 48241},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 1265, col: 15, offset: 48269},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1266, col: 15, offset: 48295},
										name: "ListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 1267, col: 15, offset: 48318},
										name: "FencedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1268, col: 15, offset: 48344},
										name: "ListingBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1269, col: 15, offset: 48371},
										name: "ExampleBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1270, col: 15, offset: 48398},
										name: "CommentBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1271, col: 15, offset: 48425},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 1272, col: 15, offset: 48457},
										name: "QuoteBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1273, col: 15, offset: 48483},
										name: "SidebarBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1274, col: 15, offset: 48510},
										name: "Table",
									},
									&ruleRefExpr{
										pos:  position{line: 1275, col: 15, offset: 48531},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1276, col: 15, offset: 48559},
										name: "DocumentAttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 1277, col: 15, offset: 48603},
										name: "DocumentAttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 1278, col: 15, offset: 48641},
										name: "TableOfContentsMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 1279, col: 15, offset: 48676},
										name: "QuoteBlockParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockParagraph",
			pos:  position{line: 1283, col: 1, offset: 48735},
			expr: &actionExpr{
				pos: position{line: 1283, col: 24, offset: 48758},
				run: (*parser).callonQuoteBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1283, col: 24, offset: 48758},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1283, col: 30, offset: 48764},
						expr: &ruleRefExpr{
							pos:  position{line: 1283, col: 31, offset: 48765},
							name: "InlineElements",
						},
					},
				},
			},
		},
		{
			name: "VerseBlock",
			pos:  position{line: 1292, col: 1, offset: 49111},
			expr: &actionExpr{
				pos: position{line: 1292, col: 15, offset: 49125},
				run: (*parser).callonVerseBlock1,
				expr: &seqExpr{
					pos: position{line: 1292, col: 15, offset: 49125},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1292, col: 15, offset: 49125},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1292, col: 27, offset: 49137},
								name: "ElementAttributes",
							},
						},
						&andCodeExpr{
							pos: position{line: 1293, col: 5, offset: 49161},
							run: (*parser).callonVerseBlock5,
						},
						&ruleRefExpr{
							pos:  position{line: 1297, col: 5, offset: 49347},
							name: "QuoteBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1297, col: 25, offset: 49367},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1297, col: 33, offset: 49375},
								expr: &ruleRefExpr{
									pos:  position{line: 1297, col: 34, offset: 49376},
									name: "VerseBlockElement",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1297, col: 55, offset: 49397},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1297, col: 55, offset: 49397},
									name: "QuoteBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1297, col: 77, offset: 49419},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockElement",
			pos:  position{line: 1301, col: 1, offset: 49534},
			expr: &choiceExpr{
				pos: position{line: 1301, col: 22, offset: 49555},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1301, col: 22, offset: 49555},
						name: "VerseFileInclude",
					},
					&ruleRefExpr{
						pos:  position{line: 1301, col: 41, offset: 49574},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 1301, col: 53, offset: 49586},
						name: "VerseBlockParagraph",
					},
				},
			},
		},
		{
			name: "VerseFileInclude",
			pos:  position{line: 1303, col: 1, offset: 49607},
			expr: &actionExpr{
				pos: position{line: 1303, col: 21, offset: 49627},
				run: (*parser).callonVerseFileInclude1,
				expr: &seqExpr{
					pos: position{line: 1303, col: 21, offset: 49627},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1303, col: 21, offset: 49627},
							expr: &ruleRefExpr{
								pos:  position{line: 1303, col: 22, offset: 49628},
								name: "QuoteBlockDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1303, col: 42, offset: 49648},
							label: "include",
							expr: &ruleRefExpr{
								pos:  position{line: 1303, col: 51, offset: 49657},
								name: "FileInclusion",
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraph",
			pos:  position{line: 1308, col: 1, offset: 49719},
			expr: &actionExpr{
				pos: position{line: 1308, col: 24, offset: 49742},
				run: (*parser).callonVerseBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1308, col: 24, offset: 49742},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1308, col: 30, offset: 49748},
						expr: &ruleRefExpr{
							pos:  position{line: 1308, col: 31, offset: 49749},
							name: "VerseBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraphLine",
			pos:  position{line: 1312, col: 1, offset: 49839},
			expr: &actionExpr{
				pos: position{line: 1312, col: 28, offset: 49866},
				run: (*parser).callonVerseBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1312, col: 28, offset: 49866},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1312, col: 28, offset: 49866},
							expr: &ruleRefExpr{
								pos:  position{line: 1312, col: 29, offset: 49867},
								name: "QuoteBlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 1312, col: 49, offset: 49887},
							expr: &ruleRefExpr{
								pos:  position{line: 1312, col: 50, offset: 49888},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1312, col: 60, offset: 49898},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1312, col: 66, offset: 49904},
								run: (*parser).callonVerseBlockParagraphLine8,
								expr: &seqExpr{
									pos: position{line: 1312, col: 66, offset: 49904},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 1312, col: 66, offset: 49904},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 1312, col: 75, offset: 49913},
												expr: &ruleRefExpr{
													pos:  position{line: 1312, col: 76, offset: 49914},
													name: "VerseBlockParagraphLineElement",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1312, col: 109, offset: 49947},
											name: "EOL",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraphLineElement",
			pos:  position{line: 1318, col: 1, offset: 50043},
			expr: &actionExpr{
				pos: position{line: 1318, col: 35, offset: 50077},
				run: (*parser).callonVerseBlockParagraphLineElement1,
				expr: &seqExpr{
					pos: position{line: 1318, col: 35, offset: 50077},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1318, col: 35, offset: 50077},
							expr: &ruleRefExpr{
								pos:  position{line: 1318, col: 36, offset: 50078},
								name: "EOL",
							},
						},
						&notExpr{
							pos: position{line: 1318, col: 40, offset: 50082},
							expr: &ruleRefExpr{
								pos:  position{line: 1318, col: 41, offset: 50083},
								name: "LineBreak",
							},
						},
						&labeledExpr{
							pos:   position{line: 1319, col: 5, offset: 50098},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1319, col: 14, offset: 50107},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1319, col: 14, offset: 50107},
										name: "Spaces",
									},
									&ruleRefExpr{
										pos:  position{line: 1320, col: 11, offset: 50125},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 1321, col: 11, offset: 50148},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 1322, col: 11, offset: 50164},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 1323, col: 11, offset: 50187},
										name: "InlineFootnote",
									},
									&ruleRefExpr{
										pos:  position{line: 1324, col: 11, offset: 50213},
										name: "InlineUserMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 1325, col: 11, offset: 50240},
										name: "QuotedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1326, col: 11, offset: 50262},
										name: "CrossReference",
									},
									&ruleRefExpr{
										pos:  position{line: 1327, col: 11, offset: 50288},
										name: "DocumentAttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 1328, col: 11, offset: 50329},
										name: "InlineElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 1329, col: 11, offset: 50356},
										name: "OtherWord",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockDelimiter",
			pos:  position{line: 1336, col: 1, offset: 50586},
			expr: &seqExpr{
				pos: position{line: 1336, col: 26, offset: 50611},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1336, col: 26, offset: 50611},
						val:        "****",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1336, col: 33, offset: 50618},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "SidebarBlock",
			pos:  position{line: 1338, col: 1, offset: 50624},
			expr: &actionExpr{
				pos: position{line: 1338, col: 17, offset: 50640},
				run: (*parser).callonSidebarBlock1,
				expr: &seqExpr{
					pos: position{line: 1338, col: 17, offset: 50640},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1338, col: 17, offset: 50640},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1338, col: 28, offset: 50651},
								expr: &ruleRefExpr{
									pos:  position{line: 1338, col: 29, offset: 50652},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1338, col: 49, offset: 50672},
							name: "SidebarBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1338, col: 71, offset: 50694},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1338, col: 79, offset: 50702},
								expr: &ruleRefExpr{
									pos:  position{line: 1338, col: 80, offset: 50703},
									name: "SidebarBlockContent",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1338, col: 104, offset: 50727},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1338, col: 104, offset: 50727},
									name: "SidebarBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1338, col: 128, offset: 50751},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockContent",
			pos:  position{line: 1342, col: 1, offset: 50860},
			expr: &choiceExpr{
				pos: position{line: 1342, col: 24, offset: 50883},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1342, col: 24, offset: 50883},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 1342, col: 36, offset: 50895},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 1342, col: 52, offset: 50911},
						name: "ListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 1342, col: 63, offset: 50922},
						name: "NonSidebarBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 1342, col: 81, offset: 50940},
						name: "SidebarBlockParagraph",
					},
				},
			},
		},
		{
			name: "NonSidebarBlock",
			pos:  position{line: 1344, col: 1, offset: 50963},
			expr: &actionExpr{
				pos: position{line: 1344, col: 20, offset: 50982},
				run: (*parser).callonNonSidebarBlock1,
				expr: &seqExpr{
					pos: position{line: 1344, col: 20, offset: 50982},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1344, col: 20, offset: 50982},
							expr: &ruleRefExpr{
								pos:  position{line: 1344, col: 21, offset: 50983},
								name: "SidebarBlock",
							},
						},
						&labeledExpr{
							pos:   position{line: 1344, col: 34, offset: 50996},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1344, col: 43, offset: 51005},
								name: "DelimitedBlock",
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockParagraph",
			pos:  position{line: 1349, col: 1, offset: 51068},
			expr: &actionExpr{
				pos: position{line: 1349, col: 26, offset: 51093},
				run: (*parser).callonSidebarBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1349, col: 26, offset: 51093},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1349, col: 32, offset: 51099},
						expr: &ruleRefExpr{
							pos:  position{line: 1349, col: 33, offset: 51100},
							name: "SidebarBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockParagraphLine",
			pos:  position{line: 1353, col: 1, offset: 51214},
			expr: &actionExpr{
				pos: position{line: 1353, col: 30, offset: 51243},
				run: (*parser).callonSidebarBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1353, col: 30, offset: 51243},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1353, col: 30, offset: 51243},
							expr: &ruleRefExpr{
								pos:  position{line: 1353, col: 31, offset: 51244},
								name: "SidebarBlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 1353, col: 53, offset: 51266},
							expr: &ruleRefExpr{
								pos:  position{line: 1353, col: 54, offset: 51267},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1353, col: 64, offset: 51277},
							label: "line",
							expr: &ruleRefExpr{
								pos:  position{line: 1353, col: 70, offset: 51283},
								name: "InlineElements",
							},
						},
					},
				},
			},
		},
		{
			name: "Table",
			pos:  position{line: 1361, col: 1, offset: 51514},
			expr: &actionExpr{
				pos: position{line: 1361, col: 10, offset: 51523},
				run: (*parser).callonTable1,
				expr: &seqExpr{
					pos: position{line: 1361, col: 10, offset: 51523},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1361, col: 10, offset: 51523},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1361, col: 21, offset: 51534},
								expr: &ruleRefExpr{
									pos:  position{line: 1361, col: 22, offset: 51535},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1361, col: 42, offset: 51555},
							name: "TableDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1362, col: 5, offset: 51574},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 1362, col: 12, offset: 51581},
								expr: &ruleRefExpr{
									pos:  position{line: 1362, col: 13, offset: 51582},
									name: "TableLineHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1363, col: 5, offset: 51604},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1363, col: 11, offset: 51610},
								expr: &ruleRefExpr{
									pos:  position{line: 1363, col: 12, offset: 51611},
									name: "TableLine",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1364, col: 6, offset: 51628},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1364, col: 6, offset: 51628},
									name: "TableDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1364, col: 23, offset: 51645},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TableCellSeparator",
			pos:  position{line: 1368, col: 1, offset: 51760},
			expr: &seqExpr{
				pos: position{line: 1368, col: 23, offset: 51782},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1368, col: 23, offset: 51782},
						val:        "|",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1368, col: 27, offset: 51786},
						expr: &ruleRefExpr{
							pos:  position{line: 1368, col: 27, offset: 51786},
							name: "WS",
						},
					},
				},
			},
		},
		{
			name: "TableDelimiter",
			pos:  position{line: 1370, col: 1, offset: 51791},
			expr: &seqExpr{
				pos: position{line: 1370, col: 19, offset: 51809},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1370, col: 19, offset: 51809},
						val:        "|===",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1370, col: 26, offset: 51816},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "TableLineHeader",
			pos:  position{line: 1373, col: 1, offset: 51885},
			expr: &actionExpr{
				pos: position{line: 1373, col: 20, offset: 51904},
				run: (*parser).callonTableLineHeader1,
				expr: &seqExpr{
					pos: position{line: 1373, col: 20, offset: 51904},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1373, col: 20, offset: 51904},
							expr: &ruleRefExpr{
								pos:  position{line: 1373, col: 21, offset: 51905},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1373, col: 36, offset: 51920},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1373, col: 42, offset: 51926},
								expr: &ruleRefExpr{
									pos:  position{line: 1373, col: 43, offset: 51927},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1373, col: 55, offset: 51939},
							name: "EOL",
						},
						&ruleRefExpr{
							pos:  position{line: 1373, col: 59, offset: 51943},
							name: "BlankLine",
						},
					},
				},
			},
		},
		{
			name: "TableLine",
			pos:  position{line: 1377, col: 1, offset: 52011},
			expr: &actionExpr{
				pos: position{line: 1377, col: 14, offset: 52024},
				run: (*parser).callonTableLine1,
				expr: &seqExpr{
					pos: position{line: 1377, col: 14, offset: 52024},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1377, col: 14, offset: 52024},
							expr: &ruleRefExpr{
								pos:  position{line: 1377, col: 15, offset: 52025},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1377, col: 30, offset: 52040},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1377, col: 36, offset: 52046},
								expr: &ruleRefExpr{
									pos:  position{line: 1377, col: 37, offset: 52047},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1377, col: 49, offset: 52059},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1377, col: 53, offset: 52063},
							expr: &ruleRefExpr{
								pos:  position{line: 1377, col: 53, offset: 52063},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "TableCell",
			pos:  position{line: 1381, col: 1, offset: 52132},
			expr: &actionExpr{
				pos: position{line: 1381, col: 14, offset: 52145},
				run: (*parser).callonTableCell1,
				expr: &seqExpr{
					pos: position{line: 1381, col: 14, offset: 52145},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1381, col: 14, offset: 52145},
							name: "TableCellSeparator",
						},
						&labeledExpr{
							pos:   position{line: 1381, col: 33, offset: 52164},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1381, col: 42, offset: 52173},
								expr: &seqExpr{
									pos: position{line: 1381, col: 43, offset: 52174},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1381, col: 43, offset: 52174},
											expr: &ruleRefExpr{
												pos:  position{line: 1381, col: 44, offset: 52175},
												name: "TableCellSeparator",
											},
										},
										&notExpr{
											pos: position{line: 1381, col: 63, offset: 52194},
											expr: &ruleRefExpr{
												pos:  position{line: 1381, col: 64, offset: 52195},
												name: "EOL",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 1381, col: 68, offset: 52199},
											expr: &ruleRefExpr{
												pos:  position{line: 1381, col: 68, offset: 52199},
												name: "WS",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1381, col: 72, offset: 52203},
											name: "InlineElement",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1381, col: 86, offset: 52217},
											expr: &ruleRefExpr{
												pos:  position{line: 1381, col: 86, offset: 52217},
												name: "WS",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CommentBlockDelimiter",
			pos:  position{line: 1388, col: 1, offset: 52463},
			expr: &litMatcher{
				pos:        position{line: 1388, col: 26, offset: 52488},
				val:        "////",
				ignoreCase: false,
			},
		},
		{
			name: "CommentBlock",
			pos:  position{line: 1390, col: 1, offset: 52496},
			expr: &actionExpr{
				pos: position{line: 1390, col: 17, offset: 52512},
				run: (*parser).callonCommentBlock1,
				expr: &seqExpr{
					pos: position{line: 1390, col: 17, offset: 52512},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1390, col: 17, offset: 52512},
							name: "CommentBlockDelimiter",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1390, col: 39, offset: 52534},
							expr: &ruleRefExpr{
								pos:  position{line: 1390, col: 39, offset: 52534},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1390, col: 43, offset: 52538},
							name: "NEWLINE",
						},
						&labeledExpr{
							pos:   position{line: 1390, col: 51, offset: 52546},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1390, col: 59, offset: 52554},
								expr: &ruleRefExpr{
									pos:  position{line: 1390, col: 60, offset: 52555},
									name: "CommentBlockLine",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1390, col: 81, offset: 52576},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 1390, col: 82, offset: 52577},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1390, col: 82, offset: 52577},
											name: "CommentBlockDelimiter",
										},
										&ruleRefExpr{
											pos:  position{line: 1390, col: 104, offset: 52599},
											name: "EOLS",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1390, col: 112, offset: 52607},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CommentBlockLine",
			pos:  position{line: 1394, col: 1, offset: 52713},
			expr: &actionExpr{
				pos: position{line: 1394, col: 21, offset: 52733},
				run: (*parser).callonCommentBlockLine1,
				expr: &seqExpr{
					pos: position{line: 1394, col: 21, offset: 52733},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 1394, col: 21, offset: 52733},
							expr: &choiceExpr{
								pos: position{line: 1394, col: 22, offset: 52734},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1394, col: 22, offset: 52734},
										name: "Alphanums",
									},
									&ruleRefExpr{
										pos:  position{line: 1394, col: 34, offset: 52746},
										name: "Spaces",
									},
									&seqExpr{
										pos: position{line: 1394, col: 44, offset: 52756},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1394, col: 44, offset: 52756},
												expr: &ruleRefExpr{
													pos:  position{line: 1394, col: 45, offset: 52757},
													name: "CommentBlockDelimiter",
												},
											},
											&notExpr{
												pos: position{line: 1394, col: 67, offset: 52779},
												expr: &ruleRefExpr{
													pos:  position{line: 1394, col: 68, offset: 52780},
													name: "EOL",
												},
											},
											&anyMatcher{
												line: 1394, col: 73, offset: 52785,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1394, col: 78, offset: 52790},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1398, col: 1, offset: 52830},
			expr: &actionExpr{
				pos: position{line: 1398, col: 22, offset: 52851},
				run: (*parser).callonSingleLineComment1,
				expr: &seqExpr{
					pos: position{line: 1398, col: 22, offset: 52851},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1398, col: 22, offset: 52851},
							expr: &ruleRefExpr{
								pos:  position{line: 1398, col: 23, offset: 52852},
								name: "CommentBlockDelimiter",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1398, col: 45, offset: 52874},
							expr: &ruleRefExpr{
								pos:  position{line: 1398, col: 45, offset: 52874},
								name: "WS",
							},
						},
						&litMatcher{
							pos:        position{line: 1398, col: 49, offset: 52878},
							val:        "//",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1398, col: 54, offset: 52883},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1398, col: 63, offset: 52892},
								name: "SingleLineCommentContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1398, col: 89, offset: 52918},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SingleLineCommentContent",
			pos:  position{line: 1402, col: 1, offset: 52983},
			expr: &actionExpr{
				pos: position{line: 1402, col: 29, offset: 53011},
				run: (*parser).callonSingleLineCommentContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1402, col: 29, offset: 53011},
					expr: &choiceExpr{
						pos: position{line: 1402, col: 30, offset: 53012},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1402, col: 30, offset: 53012},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 1402, col: 42, offset: 53024},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 1402, col: 52, offset: 53034},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1402, col: 52, offset: 53034},
										expr: &ruleRefExpr{
											pos:  position{line: 1402, col: 53, offset: 53035},
											name: "EOL",
										},
									},
									&anyMatcher{
										line: 1402, col: 58, offset: 53040,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralBlock",
			pos:  position{line: 1410, col: 1, offset: 53349},
			expr: &choiceExpr{
				pos: position{line: 1410, col: 17, offset: 53365},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1410, col: 17, offset: 53365},
						name: "ParagraphWithLiteralAttribute",
					},
					&ruleRefExpr{
						pos:  position{line: 1410, col: 49, offset: 53397},
						name: "ParagraphWithHeadingSpaces",
					},
					&ruleRefExpr{
						pos:  position{line: 1410, col: 78, offset: 53426},
						name: "ParagraphWithLiteralBlockDelimiter",
					},
				},
			},
		},
		{
			name: "LiteralBlockDelimiter",
			pos:  position{line: 1412, col: 1, offset: 53462},
			expr: &litMatcher{
				pos:        position{line: 1412, col: 26, offset: 53487},
				val:        "....",
				ignoreCase: false,
			},
		},
		{
			name: "ParagraphWithHeadingSpaces",
			pos:  position{line: 1415, col: 1, offset: 53559},
			expr: &actionExpr{
				pos: position{line: 1415, col: 31, offset: 53589},
				run: (*parser).callonParagraphWithHeadingSpaces1,
				expr: &seqExpr{
					pos: position{line: 1415, col: 31, offset: 53589},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1415, col: 31, offset: 53589},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1415, col: 42, offset: 53600},
								expr: &ruleRefExpr{
									pos:  position{line: 1415, col: 43, offset: 53601},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1415, col: 63, offset: 53621},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1415, col: 70, offset: 53628},
								name: "ParagraphWithHeadingSpacesLines",
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithHeadingSpacesLines",
			pos:  position{line: 1420, col: 1, offset: 53858},
			expr: &actionExpr{
				pos: position{line: 1421, col: 5, offset: 53898},
				run: (*parser).callonParagraphWithHeadingSpacesLines1,
				expr: &seqExpr{
					pos: position{line: 1421, col: 5, offset: 53898},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1421, col: 5, offset: 53898},
							label: "firstLine",
							expr: &actionExpr{
								pos: position{line: 1421, col: 16, offset: 53909},
								run: (*parser).callonParagraphWithHeadingSpacesLines4,
								expr: &seqExpr{
									pos: position{line: 1421, col: 16, offset: 53909},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1421, col: 16, offset: 53909},
											name: "WS",
										},
										&oneOrMoreExpr{
											pos: position{line: 1421, col: 19, offset: 53912},
											expr: &choiceExpr{
												pos: position{line: 1421, col: 20, offset: 53913},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 1421, col: 20, offset: 53913},
														name: "Alphanums",
													},
													&ruleRefExpr{
														pos:  position{line: 1421, col: 32, offset: 53925},
														name: "Spaces",
													},
													&actionExpr{
														pos: position{line: 1421, col: 41, offset: 53934},
														run: (*parser).callonParagraphWithHeadingSpacesLines11,
														expr: &seqExpr{
															pos: position{line: 1421, col: 42, offset: 53935},
															exprs: []interface{}{
																&notExpr{
																	pos: position{line: 1421, col: 42, offset: 53935},
																	expr: &ruleRefExpr{
																		pos:  position{line: 1421, col: 43, offset: 53936},
																		name: "EOL",
																	},
																},
																&anyMatcher{
																	line: 1421, col: 48, offset: 53941,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1425, col: 8, offset: 54032},
							name: "EOL",
						},
						&labeledExpr{
							pos:   position{line: 1426, col: 5, offset: 54095},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1426, col: 16, offset: 54106},
								expr: &actionExpr{
									pos: position{line: 1427, col: 9, offset: 54116},
									run: (*parser).callonParagraphWithHeadingSpacesLines19,
									expr: &seqExpr{
										pos: position{line: 1427, col: 9, offset: 54116},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1427, col: 9, offset: 54116},
												expr: &ruleRefExpr{
													pos:  position{line: 1427, col: 10, offset: 54117},
													name: "BlankLine",
												},
											},
											&labeledExpr{
												pos:   position{line: 1428, col: 9, offset: 54136},
												label: "otherLine",
												expr: &actionExpr{
													pos: position{line: 1428, col: 20, offset: 54147},
													run: (*parser).callonParagraphWithHeadingSpacesLines24,
													expr: &oneOrMoreExpr{
														pos: position{line: 1428, col: 20, offset: 54147},
														expr: &choiceExpr{
															pos: position{line: 1428, col: 21, offset: 54148},
															alternatives: []interface{}{
																&ruleRefExpr{
																	pos:  position{line: 1428, col: 21, offset: 54148},
																	name: "Alphanums",
																},
																&ruleRefExpr{
																	pos:  position{line: 1428, col: 33, offset: 54160},
																	name: "Spaces",
																},
																&seqExpr{
																	pos: position{line: 1428, col: 43, offset: 54170},
																	exprs: []interface{}{
																		&notExpr{
																			pos: position{line: 1428, col: 43, offset: 54170},
																			expr: &ruleRefExpr{
																				pos:  position{line: 1428, col: 44, offset: 54171},
																				name: "EOL",
																			},
																		},
																		&anyMatcher{
																			line: 1428, col: 49, offset: 54176,
																		},
																	},
																},
															},
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 1430, col: 12, offset: 54233},
												name: "EOL",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiter",
			pos:  position{line: 1437, col: 1, offset: 54463},
			expr: &actionExpr{
				pos: position{line: 1437, col: 39, offset: 54501},
				run: (*parser).callonParagraphWithLiteralBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1437, col: 39, offset: 54501},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1437, col: 39, offset: 54501},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1437, col: 50, offset: 54512},
								expr: &ruleRefExpr{
									pos:  position{line: 1437, col: 51, offset: 54513},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1438, col: 9, offset: 54541},
							name: "LiteralBlockDelimiter",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1438, col: 31, offset: 54563},
							expr: &ruleRefExpr{
								pos:  position{line: 1438, col: 31, offset: 54563},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1438, col: 35, offset: 54567},
							name: "NEWLINE",
						},
						&labeledExpr{
							pos:   position{line: 1438, col: 43, offset: 54575},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1438, col: 50, offset: 54582},
								name: "ParagraphWithLiteralBlockDelimiterLines",
							},
						},
						&choiceExpr{
							pos: position{line: 1438, col: 92, offset: 54624},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 1438, col: 93, offset: 54625},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1438, col: 93, offset: 54625},
											name: "LiteralBlockDelimiter",
										},
										&ruleRefExpr{
											pos:  position{line: 1438, col: 115, offset: 54647},
											name: "EOLS",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1438, col: 123, offset: 54655},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLines",
			pos:  position{line: 1443, col: 1, offset: 54814},
			expr: &actionExpr{
				pos: position{line: 1443, col: 44, offset: 54857},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLines1,
				expr: &labeledExpr{
					pos:   position{line: 1443, col: 44, offset: 54857},
					label: "lines",
					expr: &zeroOrMoreExpr{
						pos: position{line: 1443, col: 50, offset: 54863},
						expr: &ruleRefExpr{
							pos:  position{line: 1443, col: 51, offset: 54864},
							name: "ParagraphWithLiteralBlockDelimiterLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLine",
			pos:  position{line: 1447, col: 1, offset: 54948},
			expr: &actionExpr{
				pos: position{line: 1448, col: 5, offset: 55003},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLine1,
				expr: &seqExpr{
					pos: position{line: 1448, col: 5, offset: 55003},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1448, col: 5, offset: 55003},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1448, col: 11, offset: 55009},
								run: (*parser).callonParagraphWithLiteralBlockDelimiterLine4,
								expr: &zeroOrMoreExpr{
									pos: position{line: 1448, col: 11, offset: 55009},
									expr: &choiceExpr{
										pos: position{line: 1448, col: 12, offset: 55010},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1448, col: 12, offset: 55010},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 1448, col: 24, offset: 55022},
												name: "Spaces",
											},
											&seqExpr{
												pos: position{line: 1448, col: 34, offset: 55032},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 1448, col: 34, offset: 55032},
														expr: &ruleRefExpr{
															pos:  position{line: 1448, col: 35, offset: 55033},
															name: "LiteralBlockDelimiter",
														},
													},
													&notExpr{
														pos: position{line: 1448, col: 57, offset: 55055},
														expr: &ruleRefExpr{
															pos:  position{line: 1448, col: 58, offset: 55056},
															name: "EOL",
														},
													},
													&anyMatcher{
														line: 1448, col: 62, offset: 55060,
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1450, col: 8, offset: 55109},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttribute",
			pos:  position{line: 1455, col: 1, offset: 55235},
			expr: &actionExpr{
				pos: position{line: 1456, col: 5, offset: 55273},
				run: (*parser).callonParagraphWithLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 1456, col: 5, offset: 55273},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1456, col: 5, offset: 55273},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1456, col: 16, offset: 55284},
								expr: &ruleRefExpr{
									pos:  position{line: 1456, col: 17, offset: 55285},
									name: "ElementAttributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1457, col: 5, offset: 55309},
							run: (*parser).callonParagraphWithLiteralAttribute6,
						},
						&labeledExpr{
							pos:   position{line: 1464, col: 5, offset: 55523},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1464, col: 12, offset: 55530},
								name: "ParagraphWithLiteralAttributeLines",
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralKind",
			pos:  position{line: 1468, col: 1, offset: 55680},
			expr: &actionExpr{
				pos: position{line: 1468, col: 16, offset: 55695},
				run: (*parser).callonLiteralKind1,
				expr: &litMatcher{
					pos:        position{line: 1468, col: 16, offset: 55695},
					val:        "literal",
					ignoreCase: false,
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttributeLines",
			pos:  position{line: 1473, col: 1, offset: 55778},
			expr: &actionExpr{
				pos: position{line: 1473, col: 39, offset: 55816},
				run: (*parser).callonParagraphWithLiteralAttributeLines1,
				expr: &labeledExpr{
					pos:   position{line: 1473, col: 39, offset: 55816},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1473, col: 45, offset: 55822},
						expr: &ruleRefExpr{
							pos:  position{line: 1473, col: 46, offset: 55823},
							name: "ParagraphWithLiteralAttributeLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttributeLine",
			pos:  position{line: 1477, col: 1, offset: 55903},
			expr: &actionExpr{
				pos: position{line: 1477, col: 38, offset: 55940},
				run: (*parser).callonParagraphWithLiteralAttributeLine1,
				expr: &seqExpr{
					pos: position{line: 1477, col: 38, offset: 55940},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1477, col: 38, offset: 55940},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1477, col: 44, offset: 55946},
								run: (*parser).callonParagraphWithLiteralAttributeLine4,
								expr: &seqExpr{
									pos: position{line: 1477, col: 44, offset: 55946},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1477, col: 44, offset: 55946},
											expr: &ruleRefExpr{
												pos:  position{line: 1477, col: 46, offset: 55948},
												name: "BlankLine",
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 1477, col: 57, offset: 55959},
											expr: &choiceExpr{
												pos: position{line: 1477, col: 58, offset: 55960},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 1477, col: 58, offset: 55960},
														name: "Alphanums",
													},
													&ruleRefExpr{
														pos:  position{line: 1477, col: 70, offset: 55972},
														name: "Spaces",
													},
													&seqExpr{
														pos: position{line: 1477, col: 80, offset: 55982},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 1477, col: 80, offset: 55982},
																expr: &ruleRefExpr{
																	pos:  position{line: 1477, col: 81, offset: 55983},
																	name: "EOL",
																},
															},
															&anyMatcher{
																line: 1477, col: 86, offset: 55988,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1479, col: 4, offset: 56029},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "BlankLine",
			pos:  position{line: 1486, col: 1, offset: 56201},
			expr: &actionExpr{
				pos: position{line: 1486, col: 14, offset: 56214},
				run: (*parser).callonBlankLine1,
				expr: &seqExpr{
					pos: position{line: 1486, col: 14, offset: 56214},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1486, col: 14, offset: 56214},
							expr: &ruleRefExpr{
								pos:  position{line: 1486, col: 15, offset: 56215},
								name: "EOF",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1486, col: 19, offset: 56219},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "Alphanum",
			pos:  position{line: 1493, col: 1, offset: 56367},
			expr: &charClassMatcher{
				pos:        position{line: 1493, col: 13, offset: 56379},
				val:        "[\\pL0-9]",
				ranges:     []rune{'0', '9'},
				classes:    []*unicode.RangeTable{rangeTable("L")},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Parenthesis",
			pos:  position{line: 1495, col: 1, offset: 56389},
			expr: &choiceExpr{
				pos: position{line: 1495, col: 16, offset: 56404},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1495, col: 16, offset: 56404},
						val:        "(",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1495, col: 22, offset: 56410},
						val:        ")",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1495, col: 28, offset: 56416},
						val:        "[",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1495, col: 34, offset: 56422},
						val:        "]",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "Alphanums",
			pos:  position{line: 1497, col: 1, offset: 56427},
			expr: &actionExpr{
				pos: position{line: 1497, col: 14, offset: 56440},
				run: (*parser).callonAlphanums1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1497, col: 14, offset: 56440},
					expr: &charClassMatcher{
						pos:        position{line: 1497, col: 14, offset: 56440},
						val:        "[\\pL0-9]",
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Dot",
			pos:  position{line: 1501, col: 1, offset: 56486},
			expr: &litMatcher{
				pos:        position{line: 1501, col: 8, offset: 56493},
				val:        ".",
				ignoreCase: false,
			},
		},
		{
			name: "SimpleWord",
			pos:  position{line: 1503, col: 1, offset: 56498},
			expr: &actionExpr{
				pos: position{line: 1503, col: 15, offset: 56512},
				run: (*parser).callonSimpleWord1,
				expr: &seqExpr{
					pos: position{line: 1503, col: 15, offset: 56512},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1503, col: 15, offset: 56512},
							name: "Alphanums",
						},
						&andExpr{
							pos: position{line: 1503, col: 25, offset: 56522},
							expr: &choiceExpr{
								pos: position{line: 1503, col: 27, offset: 56524},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1503, col: 27, offset: 56524},
										name: "WS",
									},
									&ruleRefExpr{
										pos:  position{line: 1503, col: 32, offset: 56529},
										name: "EOL",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OtherWord",
			pos:  position{line: 1508, col: 1, offset: 56794},
			expr: &actionExpr{
				pos: position{line: 1508, col: 14, offset: 56807},
				run: (*parser).callonOtherWord1,
				expr: &choiceExpr{
					pos: position{line: 1508, col: 15, offset: 56808},
					alternatives: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1508, col: 15, offset: 56808},
							name: "Alphanums",
						},
						&ruleRefExpr{
							pos:  position{line: 1508, col: 27, offset: 56820},
							name: "QuotedTextPrefix",
						},
						&ruleRefExpr{
							pos:  position{line: 1508, col: 46, offset: 56839},
							name: "Parenthesis",
						},
						&oneOrMoreExpr{
							pos: position{line: 1508, col: 60, offset: 56853},
							expr: &actionExpr{
								pos: position{line: 1508, col: 61, offset: 56854},
								run: (*parser).callonOtherWord7,
								expr: &seqExpr{
									pos: position{line: 1508, col: 61, offset: 56854},
									exprs: []interface{}{
										&seqExpr{
											pos: position{line: 1508, col: 62, offset: 56855},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1508, col: 62, offset: 56855},
													expr: &ruleRefExpr{
														pos:  position{line: 1508, col: 63, offset: 56856},
														name: "NEWLINE",
													},
												},
												&notExpr{
													pos: position{line: 1508, col: 71, offset: 56864},
													expr: &ruleRefExpr{
														pos:  position{line: 1508, col: 72, offset: 56865},
														name: "WS",
													},
												},
												&notExpr{
													pos: position{line: 1508, col: 75, offset: 56868},
													expr: &ruleRefExpr{
														pos:  position{line: 1508, col: 76, offset: 56869},
														name: "Dot",
													},
												},
												&notExpr{
													pos: position{line: 1508, col: 80, offset: 56873},
													expr: &ruleRefExpr{
														pos:  position{line: 1508, col: 81, offset: 56874},
														name: "QuotedTextPrefix",
													},
												},
												&anyMatcher{
													line: 1508, col: 98, offset: 56891,
												},
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 1508, col: 101, offset: 56894},
											expr: &ruleRefExpr{
												pos:  position{line: 1508, col: 101, offset: 56894},
												name: "Dot",
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1510, col: 7, offset: 57003},
							expr: &litMatcher{
								pos:        position{line: 1510, col: 7, offset: 57003},
								val:        ".",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "Spaces",
			pos:  position{line: 1514, col: 1, offset: 57184},
			expr: &oneOrMoreExpr{
				pos: position{line: 1514, col: 11, offset: 57194},
				expr: &ruleRefExpr{
					pos:  position{line: 1514, col: 11, offset: 57194},
					name: "WS",
				},
			},
		},
		{
			name: "FileLocation",
			pos:  position{line: 1516, col: 1, offset: 57200},
			expr: &actionExpr{
				pos: position{line: 1516, col: 17, offset: 57216},
				run: (*parser).callonFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 1516, col: 17, offset: 57216},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1516, col: 26, offset: 57225},
						expr: &choiceExpr{
							pos: position{line: 1516, col: 27, offset: 57226},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1516, col: 27, offset: 57226},
									name: "FILENAME",
								},
								&ruleRefExpr{
									pos:  position{line: 1516, col: 38, offset: 57237},
									name: "DocumentAttributeSubstitution",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Location",
			pos:  position{line: 1520, col: 1, offset: 57329},
			expr: &actionExpr{
				pos: position{line: 1520, col: 13, offset: 57341},
				run: (*parser).callonLocation1,
				expr: &labeledExpr{
					pos:   position{line: 1520, col: 13, offset: 57341},
					label: "elements",
					expr: &seqExpr{
						pos: position{line: 1520, col: 23, offset: 57351},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1520, col: 23, offset: 57351},
								name: "URL_SCHEME",
							},
							&oneOrMoreExpr{
								pos: position{line: 1520, col: 34, offset: 57362},
								expr: &choiceExpr{
									pos: position{line: 1520, col: 35, offset: 57363},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1520, col: 35, offset: 57363},
											name: "FILENAME",
										},
										&ruleRefExpr{
											pos:  position{line: 1520, col: 46, offset: 57374},
											name: "DocumentAttributeSubstitution",
										},
										&seqExpr{
											pos: position{line: 1520, col: 78, offset: 57406},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1520, col: 78, offset: 57406},
													expr: &ruleRefExpr{
														pos:  position{line: 1520, col: 79, offset: 57407},
														name: "EOL",
													},
												},
												&notExpr{
													pos: position{line: 1520, col: 83, offset: 57411},
													expr: &litMatcher{
														pos:        position{line: 1520, col: 84, offset: 57412},
														val:        "[",
														ignoreCase: false,
													},
												},
												&anyMatcher{
													line: 1520, col: 88, offset: 57416,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FILENAME",
			pos:  position{line: 1524, col: 1, offset: 57481},
			expr: &oneOrMoreExpr{
				pos: position{line: 1524, col: 13, offset: 57493},
				expr: &choiceExpr{
					pos: position{line: 1524, col: 14, offset: 57494},
					alternatives: []interface{}{
						&charClassMatcher{
							pos:        position{line: 1524, col: 14, offset: 57494},
							val:        "[ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789~:/?#@!$&;=()*+,_%]",
							chars:      []rune{'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '~', ':', '/', '?', '#', '@', '!', '$', '&', ';', '=', '(', ')', '*', '+', ',', '_', '%'},
							ignoreCase: false,
							inverted:   false,
						},
						&litMatcher{
							pos:        position{line: 1524, col: 99, offset: 57579},
							val:        "-",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1524, col: 105, offset: 57585},
							val:        ".",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "URL",
			pos:  position{line: 1526, col: 1, offset: 57626},
			expr: &actionExpr{
				pos: position{line: 1526, col: 8, offset: 57633},
				run: (*parser).callonURL1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1526, col: 8, offset: 57633},
					expr: &choiceExpr{
						pos: position{line: 1526, col: 9, offset: 57634},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1526, col: 9, offset: 57634},
								name: "Alphanums",
							},
							&seqExpr{
								pos: position{line: 1526, col: 22, offset: 57647},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1526, col: 22, offset: 57647},
										expr: &ruleRefExpr{
											pos:  position{line: 1526, col: 23, offset: 57648},
											name: "NEWLINE",
										},
									},
									&notExpr{
										pos: position{line: 1526, col: 31, offset: 57656},
										expr: &ruleRefExpr{
											pos:  position{line: 1526, col: 32, offset: 57657},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 1526, col: 35, offset: 57660},
										expr: &litMatcher{
											pos:        position{line: 1526, col: 36, offset: 57661},
											val:        "[",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1526, col: 40, offset: 57665},
										expr: &litMatcher{
											pos:        position{line: 1526, col: 41, offset: 57666},
											val:        "]",
											ignoreCase: false,
										},
									},
									&anyMatcher{
										line: 1526, col: 46, offset: 57671,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "URL_SCHEME",
			pos:  position{line: 1530, col: 1, offset: 57712},
			expr: &choiceExpr{
				pos: position{line: 1530, col: 15, offset: 57726},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1530, col: 15, offset: 57726},
						val:        "http://",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1530, col: 27, offset: 57738},
						val:        "https://",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1530, col: 40, offset: 57751},
						val:        "ftp://",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1530, col: 51, offset: 57762},
						val:        "irc://",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1530, col: 62, offset: 57773},
						val:        "mailto:",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "ID",
			pos:  position{line: 1532, col: 1, offset: 57784},
			expr: &actionExpr{
				pos: position{line: 1532, col: 7, offset: 57790},
				run: (*parser).callonID1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1532, col: 7, offset: 57790},
					expr: &choiceExpr{
						pos: position{line: 1532, col: 8, offset: 57791},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1532, col: 8, offset: 57791},
								name: "Alphanums",
							},
							&seqExpr{
								pos: position{line: 1532, col: 21, offset: 57804},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1532, col: 21, offset: 57804},
										expr: &ruleRefExpr{
											pos:  position{line: 1532, col: 22, offset: 57805},
											name: "NEWLINE",
										},
									},
									&notExpr{
										pos: position{line: 1532, col: 30, offset: 57813},
										expr: &ruleRefExpr{
											pos:  position{line: 1532, col: 31, offset: 57814},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 1532, col: 34, offset: 57817},
										expr: &litMatcher{
											pos:        position{line: 1532, col: 35, offset: 57818},
											val:        "[",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1532, col: 39, offset: 57822},
										expr: &litMatcher{
											pos:        position{line: 1532, col: 40, offset: 57823},
											val:        "]",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1532, col: 44, offset: 57827},
										expr: &litMatcher{
											pos:        position{line: 1532, col: 45, offset: 57828},
											val:        "<<",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1532, col: 50, offset: 57833},
										expr: &litMatcher{
											pos:        position{line: 1532, col: 51, offset: 57834},
											val:        ">>",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1532, col: 56, offset: 57839},
										expr: &litMatcher{
											pos:        position{line: 1532, col: 57, offset: 57840},
											val:        ",",
											ignoreCase: false,
										},
									},
									&anyMatcher{
										line: 1532, col: 62, offset: 57845,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DIGIT",
			pos:  position{line: 1536, col: 1, offset: 57886},
			expr: &actionExpr{
				pos: position{line: 1536, col: 10, offset: 57895},
				run: (*parser).callonDIGIT1,
				expr: &charClassMatcher{
					pos:        position{line: 1536, col: 10, offset: 57895},
					val:        "[0-9]",
					ranges:     []rune{'0', '9'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "NUMBER",
			pos:  position{line: 1540, col: 1, offset: 57937},
			expr: &actionExpr{
				pos: position{line: 1540, col: 11, offset: 57947},
				run: (*parser).callonNUMBER1,
				expr: &seqExpr{
					pos: position{line: 1540, col: 11, offset: 57947},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1540, col: 11, offset: 57947},
							expr: &litMatcher{
								pos:        position{line: 1540, col: 11, offset: 57947},
								val:        "-",
								ignoreCase: false,
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1540, col: 16, offset: 57952},
							expr: &ruleRefExpr{
								pos:  position{line: 1540, col: 16, offset: 57952},
								name: "DIGIT",
							},
						},
					},
				},
			},
		},
		{
			name: "WS",
			pos:  position{line: 1544, col: 1, offset: 58004},
			expr: &choiceExpr{
				pos: position{line: 1544, col: 7, offset: 58010},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1544, col: 7, offset: 58010},
						val:        " ",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1544, col: 13, offset: 58016},
						run: (*parser).callonWS3,
						expr: &litMatcher{
							pos:        position{line: 1544, col: 13, offset: 58016},
							val:        "\t",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NEWLINE",
			pos:  position{line: 1548, col: 1, offset: 58057},
			expr: &choiceExpr{
				pos: position{line: 1548, col: 12, offset: 58068},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1548, col: 12, offset: 58068},
						val:        "\r\n",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1548, col: 21, offset: 58077},
						val:        "\r",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1548, col: 28, offset: 58084},
						val:        "\n",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 1550, col: 1, offset: 58090},
			expr: &notExpr{
				pos: position{line: 1550, col: 8, offset: 58097},
				expr: &anyMatcher{
					line: 1550, col: 9, offset: 58098,
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 1552, col: 1, offset: 58101},
			expr: &choiceExpr{
				pos: position{line: 1552, col: 8, offset: 58108},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1552, col: 8, offset: 58108},
						name: "NEWLINE",
					},
					&ruleRefExpr{
						pos:  position{line: 1552, col: 18, offset: 58118},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "EOLS",
			pos:  position{line: 1554, col: 1, offset: 58123},
			expr: &seqExpr{
				pos: position{line: 1554, col: 9, offset: 58131},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1554, col: 9, offset: 58131},
						expr: &ruleRefExpr{
							pos:  position{line: 1554, col: 9, offset: 58131},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1554, col: 13, offset: 58135},
						name: "EOL",
					},
				},
			},
		},
	},
}

func (c *current) onPreflightDocument1(frontmatter, blocks interface{}) (interface{}, error) {
	return types.NewPreflightDocument(frontmatter, blocks.([]interface{}))
}

func (p *parser) callonPreflightDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPreflightDocument1(stack["frontmatter"], stack["blocks"])
}

func (c *current) onPreflightDocumentWithinDelimitedBlock1(frontmatter, blocks interface{}) (interface{}, error) {
	return types.NewPreflightDocument(frontmatter, blocks.([]interface{}))
}

func (p *parser) callonPreflightDocumentWithinDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPreflightDocumentWithinDelimitedBlock1(stack["frontmatter"], stack["blocks"])
}

func (c *current) onDocumentBlocks1(header, others interface{}) (interface{}, error) {
	if header != nil && others != nil {
		return append([]interface{}{header}, others.([]interface{})...), nil
	} else if others != nil {
		return others.([]interface{}), nil
	}
	return []interface{}{}, nil
}

func (p *parser) callonDocumentBlocks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlocks1(stack["header"], stack["others"])
}

func (c *current) onDocumentBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDocumentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock1(stack["block"])
}

func (c *current) onDocumentBlockWithinDelimitedBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDocumentBlockWithinDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlockWithinDelimitedBlock1(stack["block"])
}

func (c *current) onYamlFrontMatter1(content interface{}) (interface{}, error) {
	return types.NewYamlFrontMatter(content.(string))
}

func (p *parser) callonYamlFrontMatter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatter1(stack["content"])
}

func (c *current) onYamlFrontMatterContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonYamlFrontMatterContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatterContent1()
}

func (c *current) onDocumentHeader1(title, id, authors, revision interface{}) (interface{}, error) {
	return types.NewDocumentHeader(title.(types.InlineElements), authors, revision)
}

func (p *parser) callonDocumentHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader1(stack["title"], stack["id"], stack["authors"], stack["revision"])
}

func (c *current) onDocumentAuthorsInlineForm1(authors interface{}) (interface{}, error) {
	return types.NewDocumentAuthors(authors.([]interface{}))
}

func (p *parser) callonDocumentAuthorsInlineForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsInlineForm1(stack["authors"])
}

func (c *current) onDocumentAuthorsAttributeForm1(author interface{}) (interface{}, error) {
	return []types.DocumentAuthor{author.(types.DocumentAuthor)}, nil
}

func (p *parser) callonDocumentAuthorsAttributeForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsAttributeForm1(stack["author"])
}

func (c *current) onDocumentAuthor1(fullname, email interface{}) (interface{}, error) {
	return types.NewDocumentAuthor(fullname, email)
}

func (p *parser) callonDocumentAuthor1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthor1(stack["fullname"], stack["email"])
}

func (c *current) onDocumentAuthorName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorName1()
}

func (c *current) onDocumentAuthorEmail5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorEmail5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail5()
}

func (c *current) onDocumentAuthorEmail1(email interface{}) (interface{}, error) {
	return email, nil
}

func (p *parser) callonDocumentAuthorEmail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail1(stack["email"])
}

func (c *current) onDocumentRevision9(revnumber, revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(revnumber, revdate, revremark)

}

func (p *parser) callonDocumentRevision9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision9(stack["revnumber"], stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision23(revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(nil, revdate, revremark)

}

func (p *parser) callonDocumentRevision23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision23(stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision1(revision interface{}) (interface{}, error) {
	return revision, nil
}

func (p *parser) callonDocumentRevision1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision1(stack["revision"])
}

func (c *current) onDocumentRevisionNumber2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber2()
}

func (c *current) onDocumentRevisionNumber18() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber18()
}

func (c *current) onDocumentRevisionDate1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionDate1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionDate1()
}

func (c *current) onDocumentRevisionRemark1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionRemark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionRemark1()
}

func (c *current) onDocumentAttributeDeclaration9(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonDocumentAttributeDeclaration9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeDeclaration9(stack["value"])
}

func (c *current) onDocumentAttributeDeclaration1(name, value interface{}) (interface{}, error) {
	return types.NewDocumentAttributeDeclaration(name.(string), value)
}

func (p *parser) callonDocumentAttributeDeclaration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeDeclaration1(stack["name"], stack["value"])
}

func (c *current) onDocumentAttributeName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAttributeName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeName1()
}

func (c *current) onDocumentAttributeValue1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeValue1()
}

func (c *current) onDocumentAttributeReset2(name interface{}) (interface{}, error) {
	return types.NewDocumentAttributeReset(name.(string))
}

func (p *parser) callonDocumentAttributeReset2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeReset2(stack["name"])
}

func (c *current) onDocumentAttributeReset9(name interface{}) (interface{}, error) {
	return types.NewDocumentAttributeReset(name.(string))
}

func (p *parser) callonDocumentAttributeReset9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeReset9(stack["name"])
}

func (c *current) onDocumentAttributeSubstitution1(name interface{}) (interface{}, error) {
	return types.NewDocumentAttributeSubstitution(name.(string))
}

func (p *parser) callonDocumentAttributeSubstitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeSubstitution1(stack["name"])
}

func (c *current) onElementAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewElementAttributes(attrs.([]interface{})), nil
}

func (p *parser) callonElementAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributes1(stack["attrs"])
}

func (c *current) onElementAttribute1(attr interface{}) (interface{}, error) {
	return attr, nil // avoid returning something like `[]interface{}{attr, EOL}`
}

func (p *parser) callonElementAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttribute1(stack["attr"])
}

func (c *current) onElementID2(id interface{}) (interface{}, error) {
	return types.NewElementID(id.(string))
}

func (p *parser) callonElementID2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementID2(stack["id"])
}

func (c *current) onElementID9(id interface{}) (interface{}, error) {
	return types.NewElementID(id.(string))
}

func (p *parser) callonElementID9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementID9(stack["id"])
}

func (c *current) onInlineElementID1(id interface{}) (interface{}, error) {
	// no EOL here since there can be multiple InlineElementID on the same line
	return types.NewInlineElementID(id.(string))
}

func (p *parser) callonInlineElementID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementID1(stack["id"])
}

func (c *current) onElementTitle5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonElementTitle5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitle5()
}

func (c *current) onElementTitle1(title interface{}) (interface{}, error) {
	return types.NewElementTitle(title.(string))
}

func (p *parser) callonElementTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitle1(stack["title"])
}

func (c *current) onElementRole5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonElementRole5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementRole5()
}

func (c *current) onElementRole1(role interface{}) (interface{}, error) {
	return types.NewElementRole(role.(string))
}

func (p *parser) callonElementRole1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementRole1(stack["role"])
}

func (c *current) onLiteralAttribute1() (interface{}, error) {
	return types.NewLiteralAttribute()
}

func (p *parser) callonLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralAttribute1()
}

func (c *current) onAdmonitionMarkerAttribute1(k interface{}) (interface{}, error) {
	return types.NewAdmonitionAttribute(k.(types.AdmonitionKind))
}

func (p *parser) callonAdmonitionMarkerAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionMarkerAttribute1(stack["k"])
}

func (c *current) onSourceAttributes8() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSourceAttributes8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes8()
}

func (c *current) onSourceAttributes1(language interface{}) (interface{}, error) {
	return types.NewSourceAttributes(language)
}

func (p *parser) callonSourceAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes1(stack["language"])
}

func (c *current) onAttributeGroup1(attributes interface{}) (interface{}, error) {
	return types.NewAttributeGroup(attributes.([]interface{}))
}

func (p *parser) callonAttributeGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeGroup1(stack["attributes"])
}

func (c *current) onGenericAttribute2(key, value interface{}) (interface{}, error) {
	// value is (optionally) set
	return types.NewGenericAttribute(key.(string), value)

}

func (p *parser) callonGenericAttribute2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttribute2(stack["key"], stack["value"])
}

func (c *current) onGenericAttribute14(key interface{}) (interface{}, error) {
	// value is not set
	return types.NewGenericAttribute(key.(string), nil)

}

func (p *parser) callonGenericAttribute14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttribute14(stack["key"])
}

func (c *current) onAttributeKey1(key interface{}) (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeKey1(stack["key"])
}

func (c *current) onAttributeValue1(value interface{}) (interface{}, error) {
	// attribute value cannot be followed by a `=`, otherwise it causes troubles for standalone values (eg: in images)
	return string(c.text), nil
}

func (p *parser) callonAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue1(stack["value"])
}

func (c *current) onHorizontalLayout1() (interface{}, error) {
	return types.ElementAttributes{"layout": "horizontal"}, nil
}

func (p *parser) callonHorizontalLayout1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHorizontalLayout1()
}

func (c *current) onQuoteAttributes1(author, title interface{}) (interface{}, error) {
	return types.NewQuoteAttributes("quote", author, title)
}

func (p *parser) callonQuoteAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttributes1(stack["author"], stack["title"])
}

func (c *current) onVerseAttributes1(author, title interface{}) (interface{}, error) {
	return types.NewQuoteAttributes("verse", author.(string), title.(string))
}

func (p *parser) callonVerseAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseAttributes1(stack["author"], stack["title"])
}

func (c *current) onQuoteAttribute1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttribute1()
}

func (c *current) onInlineAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewInlineAttributes(attrs.([]interface{}))
}

func (p *parser) callonInlineAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAttributes1(stack["attrs"])
}

func (c *current) onSection7() (interface{}, error) {

	// `=` is level 0, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonSection7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection7()
}

func (c *current) onSection10(attributes, level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonSection10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection10(stack["attributes"], stack["level"])
}

func (c *current) onSection1(attributes, level, title, id interface{}) (interface{}, error) {
	return types.NewSection(level.(int), title.(types.InlineElements), id.([]interface{}), attributes)
}

func (p *parser) callonSection1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection1(stack["attributes"], stack["level"], stack["title"], stack["id"])
}

func (c *current) onTitleElements1(elements interface{}) (interface{}, error) {
	// absorbs heading and trailing spaces
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonTitleElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElements1(stack["elements"])
}

func (c *current) onTitleElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonTitleElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElement1(stack["element"])
}

func (c *current) onUserMacroBlock1(name, value, attrs interface{}) (interface{}, error) {
	return types.NewUserMacroBlock(name.(string), value.(string), attrs.(types.ElementAttributes), string(c.text))
}

func (p *parser) callonUserMacroBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onInlineUserMacro1(name, value, attrs interface{}) (interface{}, error) {
	return types.NewInlineUserMacro(name.(string), value.(string), attrs.(types.ElementAttributes), string(c.text))
}

func (p *parser) callonInlineUserMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onUserMacroName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUserMacroName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroName1()
}

func (c *current) onUserMacroValue1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUserMacroValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroValue1()
}

func (c *current) onUserMacroAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewInlineAttributes(attrs.([]interface{}))
}

func (p *parser) callonUserMacroAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroAttributes1(stack["attrs"])
}

func (c *current) onFileInclusion4(path, inlineAttributes interface{}) (interface{}, error) {

	return types.NewFileInclusion(path.(types.Location), inlineAttributes.(types.ElementAttributes), string(c.text))

}

func (p *parser) callonFileInclusion4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion4(stack["path"], stack["inlineAttributes"])
}

func (c *current) onFileInclusion1(incl interface{}) (interface{}, error) {
	return incl.(types.FileInclusion), nil
}

func (p *parser) callonFileInclusion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion1(stack["incl"])
}

func (c *current) onFileIncludeAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewInlineAttributes(attrs.([]interface{}))
}

func (p *parser) callonFileIncludeAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileIncludeAttributes1(stack["attrs"])
}

func (c *current) onLineRangesAttribute1(lines interface{}) (interface{}, error) {

	return types.NewLineRangesAttribute(lines)
}

func (p *parser) callonLineRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttribute1(stack["lines"])
}

func (c *current) onLineRangesAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonLineRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleLineRanges9(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleLineRanges9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges9(stack["other"])
}

func (c *current) onMultipleLineRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultipleQuotedLineRanges10(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleQuotedLineRanges10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges10(stack["other"])
}

func (c *current) onMultipleQuotedLineRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleQuotedLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultiLineRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineRange1(stack["start"], stack["end"])
}

func (c *current) onMultiLineQuotedRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineQuotedRange1(stack["start"], stack["end"])
}

func (c *current) onSingleLineRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineRange1(stack["singleline"])
}

func (c *current) onSingleLineQuotedRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineQuotedRange1(stack["singleline"])
}

func (c *current) onUndefinedLineRange1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUndefinedLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUndefinedLineRange1()
}

func (c *current) onTagRangesAttribute1(tags interface{}) (interface{}, error) {
	//TODO: check if 'tags'/'tag' is allowed for both single and multiple values
	return types.NewTagRangesAttribute(tags.([]interface{}))
}

func (p *parser) callonTagRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttribute1(stack["tags"])
}

func (c *current) onTagRangesAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonTagRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleTagRanges7(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleTagRanges7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges7(stack["other"])
}

func (c *current) onMultipleTagRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleTagRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges1(stack["first"], stack["others"])
}

func (c *current) onTagRange2(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), true)
}

func (p *parser) callonTagRange2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange2(stack["tag"])
}

func (c *current) onTagRange7(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), false)
}

func (p *parser) callonTagRange7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange7(stack["tag"])
}

func (c *current) onTagWildcard4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagWildcard4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard4()
}

func (c *current) onTagWildcard7(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagWildcard7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard7(stack["stars"])
}

func (c *current) onTagWildcard1(stars interface{}) (interface{}, error) {
	return stars, nil
}

func (p *parser) callonTagWildcard1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard1(stack["stars"])
}

func (c *current) onIncludedFileLine8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine8()
}

func (c *current) onIncludedFileLine1(content interface{}) (interface{}, error) {
	return types.NewIncludedFileLine(content.([]interface{}))
}

func (p *parser) callonIncludedFileLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine1(stack["content"])
}

func (c *current) onIncludedFileStartTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileStartTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag5()
}

func (c *current) onIncludedFileStartTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileStartTag(tag.(string))
}

func (p *parser) callonIncludedFileStartTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag1(stack["tag"])
}

func (c *current) onIncludedFileEndTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileEndTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag5()
}

func (c *current) onIncludedFileEndTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileEndTag(tag.(string))
}

func (p *parser) callonIncludedFileEndTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag1(stack["tag"])
}

func (c *current) onListParagraph2(comment interface{}) (interface{}, error) {
	return comment, nil

}

func (p *parser) callonListParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph2(stack["comment"])
}

func (c *current) onListParagraph5(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), nil)

}

func (p *parser) callonListParagraph5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph5(stack["lines"])
}

func (c *current) onListParagraphLine24(elements, linebreak interface{}) (interface{}, error) {
	// absorbs heading and trailing spaces
	return types.NewInlineElements(append(elements.([]interface{}), linebreak))

}

func (p *parser) callonListParagraphLine24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine24(stack["elements"], stack["linebreak"])
}

func (c *current) onListParagraphLine1(line interface{}) (interface{}, error) {

	return line, nil

}

func (p *parser) callonListParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine1(stack["line"])
}

func (c *current) onContinuedListItemElement1(blanklines, element interface{}) (interface{}, error) {
	return types.NewContinuedListItemElement(-len(blanklines.([]interface{})), element) // offset is negative
}

func (p *parser) callonContinuedListItemElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemElement1(stack["blanklines"], stack["element"])
}

func (c *current) onOrderedListItem1(attributes, prefix, content interface{}) (interface{}, error) {
	return types.NewOrderedListItem(prefix.(types.OrderedListItemPrefix), content.([]interface{}), attributes)
}

func (p *parser) callonOrderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItem1(stack["attributes"], stack["prefix"], stack["content"])
}

func (c *current) onOrderedListItemPrefix10() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonOrderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix10()
}

func (c *current) onOrderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonOrderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix13(stack["depth"])
}

func (c *current) onOrderedListItemPrefix7(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListItemPrefix(types.Arabic, 1)
	case 2:
		return types.NewOrderedListItemPrefix(types.LowerAlpha, 2)
	case 3:
		return types.NewOrderedListItemPrefix(types.LowerRoman, 3)
	case 4:
		return types.NewOrderedListItemPrefix(types.UpperAlpha, 4)
	default:
		return types.NewOrderedListItemPrefix(types.UpperRoman, 5)
	}

}

func (p *parser) callonOrderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix7(stack["depth"])
}

func (c *current) onOrderedListItemPrefix14() (interface{}, error) {
	// numbering style: "1."
	return types.NewOrderedListItemPrefix(types.Arabic, 1)

}

func (p *parser) callonOrderedListItemPrefix14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix14()
}

func (c *current) onOrderedListItemPrefix19() (interface{}, error) {
	// numbering style: "a."
	return types.NewOrderedListItemPrefix(types.LowerAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix19()
}

func (c *current) onOrderedListItemPrefix23() (interface{}, error) {
	// numbering style: "A."
	return types.NewOrderedListItemPrefix(types.UpperAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix23()
}

func (c *current) onOrderedListItemPrefix27() (interface{}, error) {
	// numbering style: "i)"
	return types.NewOrderedListItemPrefix(types.LowerRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix27()
}

func (c *current) onOrderedListItemPrefix32() (interface{}, error) {
	// numbering style: "I)"
	return types.NewOrderedListItemPrefix(types.UpperRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix32()
}

func (c *current) onOrderedListItemPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonOrderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix1(stack["prefix"])
}

func (c *current) onOrderedListItemContent1(elements interface{}) (interface{}, error) {
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonOrderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemContent1(stack["elements"])
}

func (c *current) onUnorderedListItem1(attributes, prefix, checkstyle, content interface{}) (interface{}, error) {
	return types.NewUnorderedListItem(prefix.(types.UnorderedListItemPrefix), checkstyle, content.([]interface{}), attributes)
}

func (p *parser) callonUnorderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItem1(stack["attributes"], stack["prefix"], stack["checkstyle"], stack["content"])
}

func (c *current) onUnorderedListItemPrefix10() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonUnorderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix10()
}

func (c *current) onUnorderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonUnorderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix13(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix7(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListItemPrefix(types.OneAsterisk, 1)
	case 2:
		return types.NewUnorderedListItemPrefix(types.TwoAsterisks, 2)
	case 3:
		return types.NewUnorderedListItemPrefix(types.ThreeAsterisks, 3)
	case 4:
		return types.NewUnorderedListItemPrefix(types.FourAsterisks, 4)
	default:
		return types.NewUnorderedListItemPrefix(types.FiveAsterisks, 5)
	}

}

func (p *parser) callonUnorderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix7(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix15() (interface{}, error) {
	return types.NewUnorderedListItemPrefix(types.Dash, 1)

}

func (p *parser) callonUnorderedListItemPrefix15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix15()
}

func (c *current) onUnorderedListItemPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonUnorderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix1(stack["prefix"])
}

func (c *current) onUnorderedListItemCheckStyle7() (interface{}, error) {
	return types.Unchecked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle7()
}

func (c *current) onUnorderedListItemCheckStyle9() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle9()
}

func (c *current) onUnorderedListItemCheckStyle11() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle11()
}

func (c *current) onUnorderedListItemCheckStyle1(style interface{}) (interface{}, error) {
	return style, nil

}

func (p *parser) callonUnorderedListItemCheckStyle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle1(stack["style"])
}

func (c *current) onUnorderedListItemContent1(elements interface{}) (interface{}, error) {
	// Another list or a literal paragraph immediately following a list item will be implicitly included in the list item
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonUnorderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemContent1(stack["elements"])
}

func (c *current) onLabeledListItem1(attributes, term, separator, description interface{}) (interface{}, error) {
	return types.NewLabeledListItem(len(separator.(string))-1, term.(string), description, attributes)
}

func (p *parser) callonLabeledListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItem1(stack["attributes"], stack["term"], stack["separator"], stack["description"])
}

func (c *current) onLabeledListItemTerm1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTerm1()
}

func (c *current) onLabeledListItemSeparator4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonLabeledListItemSeparator4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator4()
}

func (c *current) onLabeledListItemSeparator7(separator interface{}) (bool, error) {

	// use a predicate to make sure that only `::` to `::::` are allowed
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonLabeledListItemSeparator7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator7(stack["separator"])
}

func (c *current) onLabeledListItemSeparator1(separator interface{}) (interface{}, error) {
	return separator, nil
}

func (p *parser) callonLabeledListItemSeparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator1(stack["separator"])
}

func (c *current) onLabeledListItemDescription1(elements interface{}) (interface{}, error) {

	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemDescription1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemDescription1(stack["elements"])
}

func (c *current) onAdmonitionKind2() (interface{}, error) {
	return types.Tip, nil

}

func (p *parser) callonAdmonitionKind2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind2()
}

func (c *current) onAdmonitionKind4() (interface{}, error) {
	return types.Note, nil

}

func (p *parser) callonAdmonitionKind4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind4()
}

func (c *current) onAdmonitionKind6() (interface{}, error) {
	return types.Important, nil

}

func (p *parser) callonAdmonitionKind6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind6()
}

func (c *current) onAdmonitionKind8() (interface{}, error) {
	return types.Warning, nil

}

func (p *parser) callonAdmonitionKind8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind8()
}

func (c *current) onAdmonitionKind10() (interface{}, error) {
	return types.Caution, nil
}

func (p *parser) callonAdmonitionKind10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind10()
}

func (c *current) onParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onParagraph13(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)
}

func (p *parser) callonParagraph13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph13(stack["attributes"], stack["lines"])
}

func (c *current) onSimpleParagraph6(attributes interface{}) (bool, error) {
	// skip if the '[literal]' attribute was set on this paragraph
	if attrs, ok := attributes.(types.ElementAttributes); ok {
		kind, found := attrs[types.AttrKind]
		return !found || kind != types.Literal, nil
	}
	return true, nil

}

func (p *parser) callonSimpleParagraph6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleParagraph6(stack["attributes"])
}

func (c *current) onSimpleParagraph1(attributes, firstLine, otherLines interface{}) (interface{}, error) {

	return types.NewParagraph(append([]interface{}{firstLine}, otherLines.([]interface{})...), attributes)
}

func (p *parser) callonSimpleParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleParagraph1(stack["attributes"], stack["firstLine"], stack["otherLines"])
}

func (c *current) onParagraphLines1(firstLine, otherLines interface{}) (interface{}, error) {
	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonParagraphLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onFirstParagraphLine1(elements, linebreak interface{}) (interface{}, error) {

	return types.NewInlineElements(append(elements.([]interface{}), linebreak))
}

func (p *parser) callonFirstParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstParagraphLine1(stack["elements"], stack["linebreak"])
}

func (c *current) onOtherParagraphLine1(elements interface{}) (interface{}, error) {
	return elements, nil
}

func (p *parser) callonOtherParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherParagraphLine1(stack["elements"])
}

func (c *current) onVerseParagraph7(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.ElementAttributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Verse, nil
	}
	return false, nil

}

func (p *parser) callonVerseParagraph7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph7(stack["attributes"])
}

func (c *current) onVerseParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonVerseParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onVerseParagraph19(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.ElementAttributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Verse, nil
	}
	return false, nil

}

func (p *parser) callonVerseParagraph19() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph19(stack["attributes"])
}

func (c *current) onVerseParagraph14(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)

}

func (p *parser) callonVerseParagraph14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph14(stack["attributes"], stack["lines"])
}

func (c *current) onInlineElements9(comment interface{}) (interface{}, error) {
	return types.NewInlineElements([]interface{}{comment})

}

func (p *parser) callonInlineElements9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements9(stack["comment"])
}

func (c *current) onInlineElements12(elements, linebreak interface{}) (interface{}, error) {

	return types.NewInlineElements(append(elements.([]interface{}), linebreak))

}

func (p *parser) callonInlineElements12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements12(stack["elements"], stack["linebreak"])
}

func (c *current) onInlineElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonInlineElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements1(stack["elements"])
}

func (c *current) onInlineElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonInlineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement1(stack["element"])
}

func (c *current) onInlineElementsWithoutSubtitution1(elements, linebreak interface{}) (interface{}, error) {

	return types.NewInlineElements(append(elements.([]interface{}), linebreak))
}

func (p *parser) callonInlineElementsWithoutSubtitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementsWithoutSubtitution1(stack["elements"], stack["linebreak"])
}

func (c *current) onInlineElementWithoutSubtitution1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonInlineElementWithoutSubtitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementWithoutSubtitution1(stack["element"])
}

func (c *current) onVerbatimBlock1(elements interface{}) (interface{}, error) {
	return elements, nil
}

func (p *parser) callonVerbatimBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimBlock1(stack["elements"])
}

func (c *current) onVerbatimParagraph8(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonVerbatimParagraph8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimParagraph8(stack["line"])
}

func (c *current) onVerbatimParagraph1(attributes, lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), attributes)
}

func (p *parser) callonVerbatimParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimParagraph1(stack["attributes"], stack["lines"])
}

func (c *current) onVerbatimParagraphLine1(elements, linebreak interface{}) (interface{}, error) {

	return types.NewInlineElements(append(elements.([]interface{}), linebreak))
}

func (p *parser) callonVerbatimParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimParagraphLine1(stack["elements"], stack["linebreak"])
}

func (c *current) onVerbatimParagraphLineElement1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonVerbatimParagraphLineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimParagraphLineElement1()
}

func (c *current) onLineBreak1() (interface{}, error) {
	return types.NewLineBreak()
}

func (p *parser) callonLineBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineBreak1()
}

func (c *current) onQuotedText1(text interface{}) (interface{}, error) {
	// if a '^' or '~' is alone (ie, badly formatted superscript or subscript, then accept it as-is)
	return text, nil
}

func (p *parser) callonQuotedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedText1(stack["text"])
}

func (c *current) onSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	// rule used withn `words` to detect superscript or subscript portions, eg in math formulae.
	return string(c.text), nil
}

func (p *parser) callonSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptOrSuperscriptPrefix3()
}

func (c *current) onOneOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonOneOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOneOrMoreBackslashes1()
}

func (c *current) onTwoOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonTwoOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTwoOrMoreBackslashes1()
}

func (c *current) onDoubleQuoteBoldText1(content interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Bold, content.([]interface{}))
}

func (p *parser) callonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldText1(stack["content"])
}

func (c *current) onDoubleQuoteBoldTextContent4(element interface{}) (interface{}, error) {
	// may start and end with spaces
	return element, nil
}

func (p *parser) callonDoubleQuoteBoldTextContent4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextContent4(stack["element"])
}

func (c *current) onDoubleQuoteBoldTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonDoubleQuoteBoldTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement1(stack["element"])
}

func (c *current) onNonDoubleQuoteBoldText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonDoubleQuoteBoldText1()
}

func (c *current) onSingleQuoteBoldText2(content interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '**' to emphazise a portion of a word)
	return types.NewQuotedText(types.Bold, content.([]interface{}))
}

func (p *parser) callonSingleQuoteBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText2(stack["content"])
}

func (c *current) onSingleQuoteBoldText12(content interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation.
	return types.NewQuotedText(types.Bold, append([]interface{}{types.StringElement{Content: "*"}}, content.([]interface{})...)) // include the second heading `*` as a regular StringElement in the bold content
}

func (p *parser) callonSingleQuoteBoldText12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText12(stack["content"])
}

func (c *current) onSingleQuoteBoldTextContent6(spaces, element interface{}) (interface{}, error) {
	return append(spaces.([]interface{}), element), nil
}

func (p *parser) callonSingleQuoteBoldTextContent6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextContent6(stack["spaces"], stack["element"])
}

func (c *current) onSingleQuoteBoldTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonSingleQuoteBoldTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement1(stack["element"])
}

func (c *current) onNonSingleQuoteBoldText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonSingleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSingleQuoteBoldText1()
}

func (c *current) onEscapedBoldText2(backslashes, content interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "**", content.([]interface{}))

}

func (p *parser) callonEscapedBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText2(stack["backslashes"], stack["content"])
}

func (c *current) onEscapedBoldText10(backslashes, content interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation
	result := append([]interface{}{"*"}, content.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "*", result)

}

func (p *parser) callonEscapedBoldText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText10(stack["backslashes"], stack["content"])
}

func (c *current) onEscapedBoldText18(backslashes, content interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "*", content.([]interface{}))
}

func (p *parser) callonEscapedBoldText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText18(stack["backslashes"], stack["content"])
}

func (c *current) onDoubleQuoteItalicText1(content interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Italic, content.([]interface{}))
}

func (p *parser) callonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicText1(stack["content"])
}

func (c *current) onDoubleQuoteItalicTextContent4(element interface{}) (interface{}, error) {
	// may start and end with spaces
	return element, nil
}

func (p *parser) callonDoubleQuoteItalicTextContent4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextContent4(stack["element"])
}

func (c *current) onDoubleQuoteItalicTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonDoubleQuoteItalicTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement1(stack["element"])
}

func (c *current) onNonDoubleQuoteItalicText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonDoubleQuoteItalicText1()
}

func (c *current) onSingleQuoteItalicText2(content interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '__' to emphazise a portion of a word)
	return types.NewQuotedText(types.Italic, content.([]interface{}))
}

func (p *parser) callonSingleQuoteItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText2(stack["content"])
}

func (c *current) onSingleQuoteItalicText12(content interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation.
	return types.NewQuotedText(types.Italic, append([]interface{}{types.StringElement{Content: "_"}}, content.([]interface{})...)) // include the second heading `_` as a regular StringElement in the italic content
}

func (p *parser) callonSingleQuoteItalicText12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText12(stack["content"])
}

func (c *current) onSingleQuoteItalicTextContent6(spaces, element interface{}) (interface{}, error) {
	return append(spaces.([]interface{}), element), nil
}

func (p *parser) callonSingleQuoteItalicTextContent6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextContent6(stack["spaces"], stack["element"])
}

func (c *current) onSingleQuoteItalicTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonSingleQuoteItalicTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement1(stack["element"])
}

func (c *current) onNonSingleQuoteItalicText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonSingleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSingleQuoteItalicText1()
}

func (c *current) onEscapedItalicText2(backslashes, content interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "__", content.([]interface{}))

}

func (p *parser) callonEscapedItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText2(stack["backslashes"], stack["content"])
}

func (c *current) onEscapedItalicText10(backslashes, content interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation
	result := append([]interface{}{"_"}, content.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "_", result)

}

func (p *parser) callonEscapedItalicText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText10(stack["backslashes"], stack["content"])
}

func (c *current) onEscapedItalicText18(backslashes, content interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "_", content.([]interface{}))
}

func (p *parser) callonEscapedItalicText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText18(stack["backslashes"], stack["content"])
}

func (c *current) onDoubleQuoteMonospaceText1(content interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Monospace, content.([]interface{}))
}

func (p *parser) callonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceText1(stack["content"])
}

func (c *current) onDoubleQuoteMonospaceTextContent4(element interface{}) (interface{}, error) {
	// may start and end with spaces
	return element, nil
}

func (p *parser) callonDoubleQuoteMonospaceTextContent4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextContent4(stack["element"])
}

func (c *current) onDoubleQuoteMonospaceTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonDoubleQuoteMonospaceTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement1(stack["element"])
}

func (c *current) onNonDoubleQuoteMonospaceText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonDoubleQuoteMonospaceText1()
}

func (c *current) onSingleQuoteMonospaceText2(content interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs "``" to emphazise a portion of a word)
	return types.NewQuotedText(types.Monospace, content.([]interface{}))
}

func (p *parser) callonSingleQuoteMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText2(stack["content"])
}

func (c *current) onSingleQuoteMonospaceText12(content interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation.
	return types.NewQuotedText(types.Monospace, append([]interface{}{types.StringElement{Content: "`"}}, content.([]interface{})...)) // include the second heading "`" as a regular StringElement in the monospace content
}

func (p *parser) callonSingleQuoteMonospaceText12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText12(stack["content"])
}

func (c *current) onSingleQuoteMonospaceTextContent6(spaces, element interface{}) (interface{}, error) {
	return append(spaces.([]interface{}), element), nil
}

func (p *parser) callonSingleQuoteMonospaceTextContent6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextContent6(stack["spaces"], stack["element"])
}

func (c *current) onSingleQuoteMonospaceTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonSingleQuoteMonospaceTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement1(stack["element"])
}

func (c *current) onNonSingleQuoteMonospaceText1() (interface{}, error) {
	// break at multiline
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonSingleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSingleQuoteMonospaceText1()
}

func (c *current) onEscapedMonospaceText2(backslashes, content interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "``", content.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText2(stack["backslashes"], stack["content"])
}

func (c *current) onEscapedMonospaceText10(backslashes, content interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation
	result := append([]interface{}{"`"}, content.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "`", result)

}

func (p *parser) callonEscapedMonospaceText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText10(stack["backslashes"], stack["content"])
}

func (c *current) onEscapedMonospaceText18(backslashes, content interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "`", content.([]interface{}))
}

func (p *parser) callonEscapedMonospaceText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText18(stack["backslashes"], stack["content"])
}

func (c *current) onSubscriptText1(content interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Subscript, content)
}

func (p *parser) callonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptText1(stack["content"])
}

func (c *current) onNonSubscriptText1() (interface{}, error) {

	return c.text, nil
}

func (p *parser) callonNonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSubscriptText1()
}

func (c *current) onEscapedSubscriptText1(backslashes, content interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "~", content)
}

func (p *parser) callonEscapedSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscriptText1(stack["backslashes"], stack["content"])
}

func (c *current) onSuperscriptText1(content interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Superscript, content)
}

func (p *parser) callonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptText1(stack["content"])
}

func (c *current) onNonSuperscriptText1() (interface{}, error) {

	return c.text, nil
}

func (p *parser) callonNonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSuperscriptText1()
}

func (c *current) onEscapedSuperscriptText1(backslashes, content interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "^", content)
}

func (p *parser) callonEscapedSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscriptText1(stack["backslashes"], stack["content"])
}

func (c *current) onSinglePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewPassthrough(types.SinglePlusPassthrough, []interface{}{content})
}

func (p *parser) callonSinglePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthrough1(stack["content"])
}

func (c *current) onSinglePlusPassthroughContent2() (interface{}, error) {
	// no space in the first or last position of the content, but allowed elsewhere
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent2()
}

func (c *current) onSinglePlusPassthroughContent24() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent24()
}

func (c *current) onTriplePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewPassthrough(types.TriplePlusPassthrough, []interface{}{content})
}

func (p *parser) callonTriplePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthrough1(stack["content"])
}

func (c *current) onTriplePlusPassthroughContent2() (interface{}, error) {
	// spaces and newlines are also allowed in the first or last position of the content and elsewhere too
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent2()
}

func (c *current) onTriplePlusPassthroughContent8() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent8()
}

func (c *current) onPassthroughMacro2(content interface{}) (interface{}, error) {
	return types.NewPassthrough(types.PassthroughMacro, []interface{}{content})
}

func (p *parser) callonPassthroughMacro2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro2(stack["content"])
}

func (c *current) onPassthroughMacro9(content interface{}) (interface{}, error) {
	return types.NewPassthrough(types.PassthroughMacro, content.([]interface{}))
}

func (p *parser) callonPassthroughMacro9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro9(stack["content"])
}

func (c *current) onPassthroughMacroCharacter4() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonPassthroughMacroCharacter4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacroCharacter4()
}

func (c *current) onCrossReference2(id, label interface{}) (interface{}, error) {
	return types.NewCrossReference(id.(string), label.(string))
}

func (p *parser) callonCrossReference2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference2(stack["id"], stack["label"])
}

func (c *current) onCrossReference13(id interface{}) (interface{}, error) {
	return types.NewCrossReference(id.(string), nil)
}

func (p *parser) callonCrossReference13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference13(stack["id"])
}

func (c *current) onCrossReferenceLabel1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonCrossReferenceLabel1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReferenceLabel1()
}

func (c *current) onLink1(link interface{}) (interface{}, error) {
	return link, nil
}

func (p *parser) callonLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink1(stack["link"])
}

func (c *current) onRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.ElementAttributes))
}

func (p *parser) callonRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onTextOnlyLinkAttributes1(text interface{}) (interface{}, error) {
	return types.NewInlineLinkAttributes(text, nil)
}

func (p *parser) callonTextOnlyLinkAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextOnlyLinkAttributes1(stack["text"])
}

func (c *current) onLinkTextWithCommaAttribute18() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLinkTextWithCommaAttribute18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextWithCommaAttribute18()
}

func (c *current) onLinkTextWithCommaAttribute2(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonLinkTextWithCommaAttribute2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextWithCommaAttribute2(stack["elements"])
}

func (c *current) onLinkTextWithCommaAttribute42() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLinkTextWithCommaAttribute42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextWithCommaAttribute42()
}

func (c *current) onLinkTextWithCommaAttribute29(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonLinkTextWithCommaAttribute29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextWithCommaAttribute29(stack["elements"])
}

func (c *current) onTextAndMoreLinkAttributes1(text, otherattrs interface{}) (interface{}, error) {
	return types.NewInlineLinkAttributes(text, otherattrs.([]interface{}))
}

func (p *parser) callonTextAndMoreLinkAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextAndMoreLinkAttributes1(stack["text"], stack["otherattrs"])
}

func (c *current) onLinkTextAttribute18() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLinkTextAttribute18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextAttribute18()
}

func (c *current) onLinkTextAttribute2(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonLinkTextAttribute2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextAttribute2(stack["elements"])
}

func (c *current) onLinkTextAttribute44() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLinkTextAttribute44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextAttribute44()
}

func (c *current) onLinkTextAttribute29(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonLinkTextAttribute29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextAttribute29(stack["elements"])
}

func (c *current) onImageBlock1(attributes, path, inlineAttributes interface{}) (interface{}, error) {
	return types.NewImageBlock(path.(string), inlineAttributes.(types.ElementAttributes), attributes)
}

func (p *parser) callonImageBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock1(stack["attributes"], stack["path"], stack["inlineAttributes"])
}

func (c *current) onInlineImage1(path, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineImage(path.(string), inlineAttributes.(types.ElementAttributes))
}

func (p *parser) callonInlineImage1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage1(stack["path"], stack["inlineAttributes"])
}

func (c *current) onImageAttributes1(alt, width, height, otherattrs interface{}) (interface{}, error) {
	return types.NewImageAttributes(alt, width, height, otherattrs.([]interface{}))
}

func (p *parser) callonImageAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAttributes1(stack["alt"], stack["width"], stack["height"], stack["otherattrs"])
}

func (c *current) onInlineFootnote2(content interface{}) (interface{}, error) {
	return types.NewFootnote("", content.(types.InlineElements))
}

func (p *parser) callonInlineFootnote2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote2(stack["content"])
}

func (c *current) onInlineFootnote8(ref, content interface{}) (interface{}, error) {
	return types.NewFootnote(ref.(string), content.(types.InlineElements))
}

func (p *parser) callonInlineFootnote8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote8(stack["ref"], stack["content"])
}

func (c *current) onInlineFootnote17(ref interface{}) (interface{}, error) {
	return types.NewFootnote(ref.(string), types.InlineElements{}) // foot note referring to another note
}

func (p *parser) callonInlineFootnote17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote17(stack["ref"])
}

func (c *current) onFootnoteRef1() (interface{}, error) {
	// footnote ID not may span multiple lines
	return string(c.text), nil
}

func (p *parser) callonFootnoteRef1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteRef1()
}

func (c *current) onFootnoteContent1(elements interface{}) (interface{}, error) {
	// footnote content may span multiple lines
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonFootnoteContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteContent1(stack["elements"])
}

func (c *current) onDelimitedBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock1(stack["block"])
}

func (c *current) onFencedBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Fenced, content.([]interface{}), types.None, attributes)
}

func (p *parser) callonFencedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlock1(stack["attributes"], stack["content"])
}

func (c *current) onFencedBlockParagraph1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), types.ElementAttributes{})
}

func (p *parser) callonFencedBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockParagraph1(stack["lines"])
}

func (c *current) onFencedBlockParagraphLine1(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonFencedBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockParagraphLine1(stack["line"])
}

func (c *current) onListingBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Listing, content.([]interface{}), types.None, attributes)
}

func (p *parser) callonListingBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlock1(stack["attributes"], stack["content"])
}

func (c *current) onListingBlockParagraph1(lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), nil) // no attributes supported
}

func (p *parser) callonListingBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockParagraph1(stack["lines"])
}

func (c *current) onListingBlockParagraphLine6() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonListingBlockParagraphLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockParagraphLine6()
}

func (c *current) onListingBlockParagraphLine1(line interface{}) (interface{}, error) {
	// skip EOL in line content, and stop when quote block delimiter is encountered
	return types.NewInlineElements(line)
}

func (p *parser) callonListingBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockParagraphLine1(stack["line"])
}

func (c *current) onExampleBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Example, content.([]interface{}), types.None, attributes)
}

func (p *parser) callonExampleBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlock1(stack["attributes"], stack["content"])
}

func (c *current) onExampleBlockParagraph1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), types.ElementAttributes{})
}

func (p *parser) callonExampleBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockParagraph1(stack["lines"])
}

func (c *current) onExampleBlockParagraphLine1(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonExampleBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockParagraphLine1(stack["line"])
}

func (c *current) onQuoteBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Quote, content.([]interface{}), types.None, attributes)
}

func (p *parser) callonQuoteBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlock1(stack["attributes"], stack["content"])
}

func (c *current) onQuoteBlockElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonQuoteBlockElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockElement1(stack["element"])
}

func (c *current) onQuoteBlockParagraph1(lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), types.ElementAttributes{})
}

func (p *parser) callonQuoteBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockParagraph1(stack["lines"])
}

func (c *current) onVerseBlock5(attributes interface{}) (bool, error) {

	kind := attributes.(types.ElementAttributes).GetAsString("kind") // once we got the attributes, check that `[verse]`  was set
	return kind == "verse", nil

}

func (p *parser) callonVerseBlock5() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlock5(stack["attributes"])
}

func (c *current) onVerseBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Verse, content.([]interface{}), types.None, attributes)

}

func (p *parser) callonVerseBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlock1(stack["attributes"], stack["content"])
}

func (c *current) onVerseFileInclude1(include interface{}) (interface{}, error) {
	return include, nil
}

func (p *parser) callonVerseFileInclude1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseFileInclude1(stack["include"])
}

func (c *current) onVerseBlockParagraph1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), nil)
}

func (p *parser) callonVerseBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraph1(stack["lines"])
}

func (c *current) onVerseBlockParagraphLine8(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonVerseBlockParagraphLine8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraphLine8(stack["elements"])
}

func (c *current) onVerseBlockParagraphLine1(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonVerseBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraphLine1(stack["line"])
}

func (c *current) onVerseBlockParagraphLineElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonVerseBlockParagraphLineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraphLineElement1(stack["element"])
}

func (c *current) onSidebarBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Sidebar, content.([]interface{}), types.None, attributes)
}

func (p *parser) callonSidebarBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlock1(stack["attributes"], stack["content"])
}

func (c *current) onNonSidebarBlock1(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonNonSidebarBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSidebarBlock1(stack["content"])
}

func (c *current) onSidebarBlockParagraph1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), types.ElementAttributes{})
}

func (p *parser) callonSidebarBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockParagraph1(stack["lines"])
}

func (c *current) onSidebarBlockParagraphLine1(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonSidebarBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockParagraphLine1(stack["line"])
}

func (c *current) onTable1(attributes, header, lines interface{}) (interface{}, error) {
	// end delimiter or end of file
	return types.NewTable(header, lines.([]interface{}), attributes)
}

func (p *parser) callonTable1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTable1(stack["attributes"], stack["header"], stack["lines"])
}

func (c *current) onTableLineHeader1(cells interface{}) (interface{}, error) {
	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLineHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLineHeader1(stack["cells"])
}

func (c *current) onTableLine1(cells interface{}) (interface{}, error) {
	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLine1(stack["cells"])
}

func (c *current) onTableCell1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonTableCell1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCell1(stack["elements"])
}

func (c *current) onCommentBlock1(content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Comment, content.([]interface{}), types.Verbatim, nil)
}

func (p *parser) callonCommentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlock1(stack["content"])
}

func (c *current) onCommentBlockLine1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonCommentBlockLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlockLine1()
}

func (c *current) onSingleLineComment1(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))
}

func (p *parser) callonSingleLineComment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineComment1(stack["content"])
}

func (c *current) onSingleLineCommentContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleLineCommentContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineCommentContent1()
}

func (c *current) onParagraphWithHeadingSpaces1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithSpacesOnFirstLine, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithHeadingSpaces1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpaces1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithHeadingSpacesLines11() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines11()
}

func (c *current) onParagraphWithHeadingSpacesLines4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines4()
}

func (c *current) onParagraphWithHeadingSpacesLines24() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines24()
}

func (c *current) onParagraphWithHeadingSpacesLines19(otherLine interface{}) (interface{}, error) {
	return otherLine, nil // do not include the trailing 'EOL'

}

func (p *parser) callonParagraphWithHeadingSpacesLines19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines19(stack["otherLine"])
}

func (c *current) onParagraphWithHeadingSpacesLines1(firstLine, otherLines interface{}) (interface{}, error) {

	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonParagraphWithHeadingSpacesLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiter1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithDelimiter, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithLiteralBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiter1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLines1(lines interface{}) (interface{}, error) {
	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine4()
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine1(line interface{}) (interface{}, error) {

	return line, nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine1(stack["line"])
}

func (c *current) onParagraphWithLiteralAttribute6(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.ElementAttributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Literal, nil
	}
	return false, nil

}

func (p *parser) callonParagraphWithLiteralAttribute6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute6(stack["attributes"])
}

func (c *current) onParagraphWithLiteralAttribute1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithAttribute, lines.([]interface{}), attributes)

}

func (p *parser) callonParagraphWithLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute1(stack["attributes"], stack["lines"])
}

func (c *current) onLiteralKind1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLiteralKind1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralKind1()
}

func (c *current) onParagraphWithLiteralAttributeLines1(lines interface{}) (interface{}, error) {

	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralAttributeLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralAttributeLine4() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonParagraphWithLiteralAttributeLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLine4()
}

func (c *current) onParagraphWithLiteralAttributeLine1(line interface{}) (interface{}, error) {
	return line, nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralAttributeLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLine1(stack["line"])
}

func (c *current) onBlankLine1() (interface{}, error) {
	return types.NewBlankLine()
}

func (p *parser) callonBlankLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlankLine1()
}

func (c *current) onAlphanums1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAlphanums1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAlphanums1()
}

func (c *current) onSimpleWord1() (interface{}, error) {
	// very straightforward content: alphanums followed by spaces but not the "+" signs because it needs a heading space to become a LineBreak element
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSimpleWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleWord1()
}

func (c *current) onOtherWord7() (interface{}, error) {
	// TODO: remove check on parenthesis and dot?
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonOtherWord7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherWord7()
}

func (c *current) onOtherWord1() (interface{}, error) {
	// word cannot contain parenthesis. Dots and ellipsis are treated as independent words (but will be combined afterwards)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonOtherWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherWord1()
}

func (c *current) onFileLocation1(elements interface{}) (interface{}, error) {
	return types.NewLocation(elements.([]interface{}))
}

func (p *parser) callonFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation1(stack["elements"])
}

func (c *current) onLocation1(elements interface{}) (interface{}, error) {
	return types.NewLocation(elements.([]interface{}))
}

func (p *parser) callonLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocation1(stack["elements"])
}

func (c *current) onURL1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonURL1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURL1()
}

func (c *current) onID1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onID1()
}

func (c *current) onDIGIT1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDIGIT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDIGIT1()
}

func (c *current) onNUMBER1() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonNUMBER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNUMBER1()
}

func (c *current) onWS3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonWS3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWS3()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			return val, ok
		}
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	ignoreCase := ""
	if lit.ignoreCase {
		ignoreCase = "i"
	}
	val := string(strconv.AppendQuote([]byte{}, lit.val)) + ignoreCase // wrap 'lit.val' with double quotes
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, val)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, val)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}
