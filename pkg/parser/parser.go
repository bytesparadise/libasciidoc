// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/bytesparadise/libasciidoc/pkg/types"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "AsciidocDocument",
			pos:  position{line: 17, col: 1, offset: 319},
			expr: &actionExpr{
				pos: position{line: 17, col: 21, offset: 339},
				run: (*parser).callonAsciidocDocument1,
				expr: &seqExpr{
					pos: position{line: 17, col: 21, offset: 339},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 17, col: 21, offset: 339},
							label: "frontmatter",
							expr: &zeroOrOneExpr{
								pos: position{line: 17, col: 34, offset: 352},
								expr: &ruleRefExpr{
									pos:  position{line: 17, col: 34, offset: 352},
									name: "FrontMatter",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 17, col: 48, offset: 366},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 17, col: 56, offset: 374},
								name: "AsciidocDocumentBlocks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 17, col: 80, offset: 398},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "AsciidocDocumentWithinDelimitedBlock",
			pos:  position{line: 21, col: 1, offset: 478},
			expr: &actionExpr{
				pos: position{line: 21, col: 41, offset: 518},
				run: (*parser).callonAsciidocDocumentWithinDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 21, col: 41, offset: 518},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 21, col: 41, offset: 518},
							label: "frontmatter",
							expr: &zeroOrOneExpr{
								pos: position{line: 21, col: 54, offset: 531},
								expr: &ruleRefExpr{
									pos:  position{line: 21, col: 54, offset: 531},
									name: "FrontMatter",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 21, col: 68, offset: 545},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 21, col: 76, offset: 553},
								name: "AsciidocDocumentBlocksWithinDelimitedBlock",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 21, col: 120, offset: 597},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "TextDocument",
			pos:  position{line: 25, col: 1, offset: 677},
			expr: &actionExpr{
				pos: position{line: 25, col: 17, offset: 693},
				run: (*parser).callonTextDocument1,
				expr: &seqExpr{
					pos: position{line: 25, col: 17, offset: 693},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 25, col: 17, offset: 693},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 25, col: 25, offset: 701},
								name: "TextDocumentBlocks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 25, col: 45, offset: 721},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "AsciidocDocumentBlocks",
			pos:  position{line: 32, col: 1, offset: 904},
			expr: &actionExpr{
				pos: position{line: 32, col: 27, offset: 930},
				run: (*parser).callonAsciidocDocumentBlocks1,
				expr: &seqExpr{
					pos: position{line: 32, col: 27, offset: 930},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 32, col: 27, offset: 930},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 32, col: 35, offset: 938},
								expr: &ruleRefExpr{
									pos:  position{line: 32, col: 35, offset: 938},
									name: "DocumentHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 32, col: 52, offset: 955},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 32, col: 60, offset: 963},
								expr: &ruleRefExpr{
									pos:  position{line: 32, col: 60, offset: 963},
									name: "DocumentBlock",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentBlock",
			pos:  position{line: 41, col: 1, offset: 1212},
			expr: &actionExpr{
				pos: position{line: 41, col: 18, offset: 1229},
				run: (*parser).callonDocumentBlock1,
				expr: &seqExpr{
					pos: position{line: 41, col: 18, offset: 1229},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 41, col: 18, offset: 1229},
							expr: &ruleRefExpr{
								pos:  position{line: 41, col: 19, offset: 1230},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 42, col: 5, offset: 1239},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 42, col: 12, offset: 1246},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 42, col: 12, offset: 1246},
										name: "SimpleParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 43, col: 11, offset: 1272},
										name: "Section",
									},
									&ruleRefExpr{
										pos:  position{line: 44, col: 11, offset: 1291},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 45, col: 11, offset: 1316},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 46, col: 11, offset: 1340},
										name: "VerseParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 47, col: 11, offset: 1394},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 48, col: 11, offset: 1416},
										name: "ListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 49, col: 11, offset: 1435},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 50, col: 11, offset: 1486},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 51, col: 11, offset: 1510},
										name: "DocumentAttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 52, col: 11, offset: 1550},
										name: "DocumentAttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 53, col: 11, offset: 1584},
										name: "TableOfContentsMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 54, col: 11, offset: 1615},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 55, col: 11, offset: 1640},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AsciidocDocumentBlocksWithinDelimitedBlock",
			pos:  position{line: 59, col: 1, offset: 1678},
			expr: &labeledExpr{
				pos:   position{line: 59, col: 47, offset: 1724},
				label: "blocks",
				expr: &zeroOrMoreExpr{
					pos: position{line: 59, col: 54, offset: 1731},
					expr: &ruleRefExpr{
						pos:  position{line: 59, col: 55, offset: 1732},
						name: "DocumentBlockWithinDelimitedBlock",
					},
				},
			},
		},
		{
			name: "DocumentBlockWithinDelimitedBlock",
			pos:  position{line: 61, col: 1, offset: 1769},
			expr: &actionExpr{
				pos: position{line: 61, col: 38, offset: 1806},
				run: (*parser).callonDocumentBlockWithinDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 61, col: 38, offset: 1806},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 61, col: 38, offset: 1806},
							expr: &ruleRefExpr{
								pos:  position{line: 61, col: 39, offset: 1807},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 62, col: 5, offset: 1816},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 62, col: 12, offset: 1823},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 62, col: 12, offset: 1823},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 63, col: 11, offset: 1848},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 64, col: 11, offset: 1872},
										name: "VerseParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 65, col: 11, offset: 1897},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 66, col: 11, offset: 1919},
										name: "ListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 67, col: 11, offset: 1938},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 68, col: 11, offset: 1989},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 69, col: 11, offset: 2013},
										name: "DocumentAttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 70, col: 11, offset: 2053},
										name: "DocumentAttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 71, col: 11, offset: 2087},
										name: "TableOfContentsMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 72, col: 11, offset: 2118},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 73, col: 11, offset: 2143},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TextDocumentBlocks",
			pos:  position{line: 77, col: 1, offset: 2181},
			expr: &labeledExpr{
				pos:   position{line: 77, col: 23, offset: 2203},
				label: "blocks",
				expr: &zeroOrMoreExpr{
					pos: position{line: 77, col: 30, offset: 2210},
					expr: &ruleRefExpr{
						pos:  position{line: 77, col: 31, offset: 2211},
						name: "TextDocumentBlock",
					},
				},
			},
		},
		{
			name: "TextDocumentBlock",
			pos:  position{line: 79, col: 1, offset: 2232},
			expr: &actionExpr{
				pos: position{line: 79, col: 22, offset: 2253},
				run: (*parser).callonTextDocumentBlock1,
				expr: &seqExpr{
					pos: position{line: 79, col: 22, offset: 2253},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 79, col: 22, offset: 2253},
							expr: &ruleRefExpr{
								pos:  position{line: 79, col: 23, offset: 2254},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 80, col: 5, offset: 2263},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 80, col: 12, offset: 2270},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 80, col: 12, offset: 2270},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 80, col: 24, offset: 2282},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FrontMatter",
			pos:  position{line: 87, col: 1, offset: 2428},
			expr: &ruleRefExpr{
				pos:  position{line: 87, col: 16, offset: 2443},
				name: "YamlFrontMatter",
			},
		},
		{
			name: "YamlFrontMatter",
			pos:  position{line: 89, col: 1, offset: 2461},
			expr: &actionExpr{
				pos: position{line: 89, col: 20, offset: 2480},
				run: (*parser).callonYamlFrontMatter1,
				expr: &seqExpr{
					pos: position{line: 89, col: 20, offset: 2480},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 89, col: 20, offset: 2480},
							name: "YamlFrontMatterToken",
						},
						&labeledExpr{
							pos:   position{line: 89, col: 41, offset: 2501},
							label: "content",
							expr: &zeroOrOneExpr{
								pos: position{line: 89, col: 49, offset: 2509},
								expr: &ruleRefExpr{
									pos:  position{line: 89, col: 50, offset: 2510},
									name: "YamlFrontMatterContent",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 89, col: 75, offset: 2535},
							name: "YamlFrontMatterToken",
						},
					},
				},
			},
		},
		{
			name: "YamlFrontMatterToken",
			pos:  position{line: 93, col: 1, offset: 2615},
			expr: &seqExpr{
				pos: position{line: 93, col: 26, offset: 2640},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 93, col: 26, offset: 2640},
						val:        "---",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 93, col: 32, offset: 2646},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "YamlFrontMatterContent",
			pos:  position{line: 95, col: 1, offset: 2652},
			expr: &actionExpr{
				pos: position{line: 95, col: 27, offset: 2678},
				run: (*parser).callonYamlFrontMatterContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 95, col: 27, offset: 2678},
					expr: &oneOrMoreExpr{
						pos: position{line: 95, col: 28, offset: 2679},
						expr: &seqExpr{
							pos: position{line: 95, col: 29, offset: 2680},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 95, col: 29, offset: 2680},
									expr: &ruleRefExpr{
										pos:  position{line: 95, col: 30, offset: 2681},
										name: "YamlFrontMatterToken",
									},
								},
								&anyMatcher{
									line: 95, col: 51, offset: 2702,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentHeader",
			pos:  position{line: 102, col: 1, offset: 2868},
			expr: &actionExpr{
				pos: position{line: 102, col: 19, offset: 2886},
				run: (*parser).callonDocumentHeader1,
				expr: &seqExpr{
					pos: position{line: 102, col: 19, offset: 2886},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 102, col: 19, offset: 2886},
							val:        "=",
							ignoreCase: false,
						},
						&oneOrMoreExpr{
							pos: position{line: 102, col: 23, offset: 2890},
							expr: &ruleRefExpr{
								pos:  position{line: 102, col: 23, offset: 2890},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 102, col: 27, offset: 2894},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 102, col: 34, offset: 2901},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 102, col: 49, offset: 2916},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 102, col: 53, offset: 2920},
								expr: &ruleRefExpr{
									pos:  position{line: 102, col: 53, offset: 2920},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 102, col: 71, offset: 2938},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 103, col: 9, offset: 2950},
							expr: &choiceExpr{
								pos: position{line: 103, col: 10, offset: 2951},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 103, col: 10, offset: 2951},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 103, col: 30, offset: 2971},
										name: "CommentBlock",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 104, col: 9, offset: 2994},
							label: "authors",
							expr: &zeroOrOneExpr{
								pos: position{line: 104, col: 18, offset: 3003},
								expr: &ruleRefExpr{
									pos:  position{line: 104, col: 18, offset: 3003},
									name: "DocumentAuthors",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 105, col: 9, offset: 3030},
							expr: &choiceExpr{
								pos: position{line: 105, col: 10, offset: 3031},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 105, col: 10, offset: 3031},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 105, col: 30, offset: 3051},
										name: "CommentBlock",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 106, col: 9, offset: 3074},
							label: "revision",
							expr: &zeroOrOneExpr{
								pos: position{line: 106, col: 19, offset: 3084},
								expr: &ruleRefExpr{
									pos:  position{line: 106, col: 19, offset: 3084},
									name: "DocumentRevision",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthors",
			pos:  position{line: 110, col: 1, offset: 3185},
			expr: &choiceExpr{
				pos: position{line: 110, col: 20, offset: 3204},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 110, col: 20, offset: 3204},
						name: "DocumentAuthorsInlineForm",
					},
					&ruleRefExpr{
						pos:  position{line: 110, col: 48, offset: 3232},
						name: "DocumentAuthorsAttributeForm",
					},
				},
			},
		},
		{
			name: "DocumentAuthorsInlineForm",
			pos:  position{line: 112, col: 1, offset: 3262},
			expr: &actionExpr{
				pos: position{line: 112, col: 30, offset: 3291},
				run: (*parser).callonDocumentAuthorsInlineForm1,
				expr: &seqExpr{
					pos: position{line: 112, col: 30, offset: 3291},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 112, col: 30, offset: 3291},
							expr: &ruleRefExpr{
								pos:  position{line: 112, col: 30, offset: 3291},
								name: "WS",
							},
						},
						&notExpr{
							pos: position{line: 112, col: 34, offset: 3295},
							expr: &litMatcher{
								pos:        position{line: 112, col: 35, offset: 3296},
								val:        ":",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 112, col: 39, offset: 3300},
							label: "authors",
							expr: &oneOrMoreExpr{
								pos: position{line: 112, col: 48, offset: 3309},
								expr: &ruleRefExpr{
									pos:  position{line: 112, col: 48, offset: 3309},
									name: "DocumentAuthor",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 112, col: 65, offset: 3326},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorsAttributeForm",
			pos:  position{line: 116, col: 1, offset: 3396},
			expr: &actionExpr{
				pos: position{line: 116, col: 33, offset: 3428},
				run: (*parser).callonDocumentAuthorsAttributeForm1,
				expr: &seqExpr{
					pos: position{line: 116, col: 33, offset: 3428},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 116, col: 33, offset: 3428},
							expr: &ruleRefExpr{
								pos:  position{line: 116, col: 33, offset: 3428},
								name: "WS",
							},
						},
						&litMatcher{
							pos:        position{line: 116, col: 37, offset: 3432},
							val:        ":author:",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 116, col: 48, offset: 3443},
							label: "author",
							expr: &ruleRefExpr{
								pos:  position{line: 116, col: 56, offset: 3451},
								name: "DocumentAuthor",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 116, col: 72, offset: 3467},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthor",
			pos:  position{line: 120, col: 1, offset: 3546},
			expr: &actionExpr{
				pos: position{line: 120, col: 19, offset: 3564},
				run: (*parser).callonDocumentAuthor1,
				expr: &seqExpr{
					pos: position{line: 120, col: 19, offset: 3564},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 120, col: 19, offset: 3564},
							expr: &ruleRefExpr{
								pos:  position{line: 120, col: 19, offset: 3564},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 120, col: 23, offset: 3568},
							label: "fullname",
							expr: &ruleRefExpr{
								pos:  position{line: 120, col: 33, offset: 3578},
								name: "DocumentAuthorName",
							},
						},
						&labeledExpr{
							pos:   position{line: 120, col: 53, offset: 3598},
							label: "email",
							expr: &zeroOrOneExpr{
								pos: position{line: 120, col: 59, offset: 3604},
								expr: &ruleRefExpr{
									pos:  position{line: 120, col: 60, offset: 3605},
									name: "DocumentAuthorEmail",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 120, col: 82, offset: 3627},
							expr: &ruleRefExpr{
								pos:  position{line: 120, col: 82, offset: 3627},
								name: "WS",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 120, col: 86, offset: 3631},
							expr: &litMatcher{
								pos:        position{line: 120, col: 86, offset: 3631},
								val:        ";",
								ignoreCase: false,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 120, col: 91, offset: 3636},
							expr: &ruleRefExpr{
								pos:  position{line: 120, col: 91, offset: 3636},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorName",
			pos:  position{line: 125, col: 1, offset: 3778},
			expr: &actionExpr{
				pos: position{line: 125, col: 23, offset: 3800},
				run: (*parser).callonDocumentAuthorName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 125, col: 23, offset: 3800},
					expr: &choiceExpr{
						pos: position{line: 125, col: 24, offset: 3801},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 125, col: 24, offset: 3801},
								name: "Alphanums",
							},
							&seqExpr{
								pos: position{line: 125, col: 37, offset: 3814},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 125, col: 37, offset: 3814},
										expr: &litMatcher{
											pos:        position{line: 125, col: 38, offset: 3815},
											val:        "<",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 125, col: 42, offset: 3819},
										expr: &litMatcher{
											pos:        position{line: 125, col: 43, offset: 3820},
											val:        ";",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 125, col: 47, offset: 3824},
										expr: &ruleRefExpr{
											pos:  position{line: 125, col: 48, offset: 3825},
											name: "NEWLINE",
										},
									},
									&anyMatcher{
										line: 125, col: 56, offset: 3833,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorEmail",
			pos:  position{line: 129, col: 1, offset: 3874},
			expr: &actionExpr{
				pos: position{line: 129, col: 24, offset: 3897},
				run: (*parser).callonDocumentAuthorEmail1,
				expr: &seqExpr{
					pos: position{line: 129, col: 24, offset: 3897},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 129, col: 24, offset: 3897},
							val:        "<",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 129, col: 28, offset: 3901},
							label: "email",
							expr: &actionExpr{
								pos: position{line: 129, col: 35, offset: 3908},
								run: (*parser).callonDocumentAuthorEmail5,
								expr: &oneOrMoreExpr{
									pos: position{line: 129, col: 35, offset: 3908},
									expr: &choiceExpr{
										pos: position{line: 129, col: 36, offset: 3909},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 129, col: 36, offset: 3909},
												name: "Alphanums",
											},
											&seqExpr{
												pos: position{line: 129, col: 49, offset: 3922},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 129, col: 49, offset: 3922},
														expr: &litMatcher{
															pos:        position{line: 129, col: 50, offset: 3923},
															val:        ">",
															ignoreCase: false,
														},
													},
													&notExpr{
														pos: position{line: 129, col: 54, offset: 3927},
														expr: &ruleRefExpr{
															pos:  position{line: 129, col: 55, offset: 3928},
															name: "EOL",
														},
													},
													&anyMatcher{
														line: 129, col: 60, offset: 3933,
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 131, col: 4, offset: 3974},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "DocumentRevision",
			pos:  position{line: 137, col: 1, offset: 4135},
			expr: &actionExpr{
				pos: position{line: 137, col: 21, offset: 4155},
				run: (*parser).callonDocumentRevision1,
				expr: &seqExpr{
					pos: position{line: 137, col: 21, offset: 4155},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 137, col: 21, offset: 4155},
							expr: &ruleRefExpr{
								pos:  position{line: 137, col: 21, offset: 4155},
								name: "WS",
							},
						},
						&notExpr{
							pos: position{line: 137, col: 25, offset: 4159},
							expr: &litMatcher{
								pos:        position{line: 137, col: 26, offset: 4160},
								val:        ":",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 137, col: 30, offset: 4164},
							label: "revision",
							expr: &choiceExpr{
								pos: position{line: 138, col: 9, offset: 4183},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 138, col: 10, offset: 4184},
										run: (*parser).callonDocumentRevision9,
										expr: &seqExpr{
											pos: position{line: 138, col: 10, offset: 4184},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 138, col: 10, offset: 4184},
													label: "revnumber",
													expr: &ruleRefExpr{
														pos:  position{line: 138, col: 21, offset: 4195},
														name: "DocumentRevisionNumber",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 138, col: 45, offset: 4219},
													expr: &litMatcher{
														pos:        position{line: 138, col: 45, offset: 4219},
														val:        ",",
														ignoreCase: false,
													},
												},
												&labeledExpr{
													pos:   position{line: 138, col: 50, offset: 4224},
													label: "revdate",
													expr: &zeroOrOneExpr{
														pos: position{line: 138, col: 58, offset: 4232},
														expr: &ruleRefExpr{
															pos:  position{line: 138, col: 59, offset: 4233},
															name: "DocumentRevisionDate",
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 138, col: 82, offset: 4256},
													expr: &litMatcher{
														pos:        position{line: 138, col: 82, offset: 4256},
														val:        ":",
														ignoreCase: false,
													},
												},
												&labeledExpr{
													pos:   position{line: 138, col: 87, offset: 4261},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 138, col: 97, offset: 4271},
														expr: &ruleRefExpr{
															pos:  position{line: 138, col: 98, offset: 4272},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 140, col: 15, offset: 4389},
										run: (*parser).callonDocumentRevision23,
										expr: &seqExpr{
											pos: position{line: 140, col: 15, offset: 4389},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 140, col: 15, offset: 4389},
													label: "revdate",
													expr: &ruleRefExpr{
														pos:  position{line: 140, col: 24, offset: 4398},
														name: "DocumentRevisionDate",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 140, col: 46, offset: 4420},
													expr: &litMatcher{
														pos:        position{line: 140, col: 46, offset: 4420},
														val:        ":",
														ignoreCase: false,
													},
												},
												&labeledExpr{
													pos:   position{line: 140, col: 51, offset: 4425},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 140, col: 61, offset: 4435},
														expr: &ruleRefExpr{
															pos:  position{line: 140, col: 62, offset: 4436},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 142, col: 13, offset: 4545},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionNumber",
			pos:  position{line: 147, col: 1, offset: 4675},
			expr: &choiceExpr{
				pos: position{line: 147, col: 27, offset: 4701},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 147, col: 27, offset: 4701},
						run: (*parser).callonDocumentRevisionNumber2,
						expr: &seqExpr{
							pos: position{line: 147, col: 27, offset: 4701},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 147, col: 27, offset: 4701},
									val:        "v",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 147, col: 32, offset: 4706},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 147, col: 39, offset: 4713},
									expr: &choiceExpr{
										pos: position{line: 147, col: 40, offset: 4714},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 147, col: 40, offset: 4714},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 147, col: 52, offset: 4726},
												name: "Spaces",
											},
											&seqExpr{
												pos: position{line: 147, col: 62, offset: 4736},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 147, col: 62, offset: 4736},
														expr: &ruleRefExpr{
															pos:  position{line: 147, col: 63, offset: 4737},
															name: "EOL",
														},
													},
													&notExpr{
														pos: position{line: 147, col: 67, offset: 4741},
														expr: &litMatcher{
															pos:        position{line: 147, col: 68, offset: 4742},
															val:        ",",
															ignoreCase: false,
														},
													},
													&notExpr{
														pos: position{line: 147, col: 72, offset: 4746},
														expr: &litMatcher{
															pos:        position{line: 147, col: 73, offset: 4747},
															val:        ":",
															ignoreCase: false,
														},
													},
													&anyMatcher{
														line: 147, col: 78, offset: 4752,
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 149, col: 5, offset: 4794},
						run: (*parser).callonDocumentRevisionNumber18,
						expr: &seqExpr{
							pos: position{line: 149, col: 5, offset: 4794},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 149, col: 5, offset: 4794},
									expr: &litMatcher{
										pos:        position{line: 149, col: 5, offset: 4794},
										val:        "v",
										ignoreCase: true,
									},
								},
								&ruleRefExpr{
									pos:  position{line: 149, col: 11, offset: 4800},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 149, col: 18, offset: 4807},
									expr: &choiceExpr{
										pos: position{line: 149, col: 19, offset: 4808},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 149, col: 19, offset: 4808},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 149, col: 31, offset: 4820},
												name: "Spaces",
											},
											&seqExpr{
												pos: position{line: 149, col: 41, offset: 4830},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 149, col: 41, offset: 4830},
														expr: &ruleRefExpr{
															pos:  position{line: 149, col: 42, offset: 4831},
															name: "EOL",
														},
													},
													&notExpr{
														pos: position{line: 149, col: 46, offset: 4835},
														expr: &litMatcher{
															pos:        position{line: 149, col: 47, offset: 4836},
															val:        ",",
															ignoreCase: false,
														},
													},
													&notExpr{
														pos: position{line: 149, col: 51, offset: 4840},
														expr: &litMatcher{
															pos:        position{line: 149, col: 52, offset: 4841},
															val:        ":",
															ignoreCase: false,
														},
													},
													&anyMatcher{
														line: 149, col: 57, offset: 4846,
													},
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 149, col: 62, offset: 4851},
									expr: &ruleRefExpr{
										pos:  position{line: 149, col: 62, offset: 4851},
										name: "WS",
									},
								},
								&andExpr{
									pos: position{line: 149, col: 66, offset: 4855},
									expr: &litMatcher{
										pos:        position{line: 149, col: 67, offset: 4856},
										val:        ",",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionDate",
			pos:  position{line: 153, col: 1, offset: 4896},
			expr: &actionExpr{
				pos: position{line: 153, col: 25, offset: 4920},
				run: (*parser).callonDocumentRevisionDate1,
				expr: &oneOrMoreExpr{
					pos: position{line: 153, col: 25, offset: 4920},
					expr: &choiceExpr{
						pos: position{line: 153, col: 26, offset: 4921},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 153, col: 26, offset: 4921},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 153, col: 38, offset: 4933},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 153, col: 48, offset: 4943},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 153, col: 48, offset: 4943},
										expr: &ruleRefExpr{
											pos:  position{line: 153, col: 49, offset: 4944},
											name: "EOL",
										},
									},
									&notExpr{
										pos: position{line: 153, col: 53, offset: 4948},
										expr: &litMatcher{
											pos:        position{line: 153, col: 54, offset: 4949},
											val:        ":",
											ignoreCase: false,
										},
									},
									&anyMatcher{
										line: 153, col: 59, offset: 4954,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionRemark",
			pos:  position{line: 157, col: 1, offset: 4995},
			expr: &actionExpr{
				pos: position{line: 157, col: 27, offset: 5021},
				run: (*parser).callonDocumentRevisionRemark1,
				expr: &oneOrMoreExpr{
					pos: position{line: 157, col: 27, offset: 5021},
					expr: &choiceExpr{
						pos: position{line: 157, col: 28, offset: 5022},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 157, col: 28, offset: 5022},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 157, col: 40, offset: 5034},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 157, col: 50, offset: 5044},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 157, col: 50, offset: 5044},
										expr: &ruleRefExpr{
											pos:  position{line: 157, col: 51, offset: 5045},
											name: "EOL",
										},
									},
									&anyMatcher{
										line: 157, col: 56, offset: 5050,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeDeclaration",
			pos:  position{line: 164, col: 1, offset: 5206},
			expr: &actionExpr{
				pos: position{line: 164, col: 33, offset: 5238},
				run: (*parser).callonDocumentAttributeDeclaration1,
				expr: &seqExpr{
					pos: position{line: 164, col: 33, offset: 5238},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 164, col: 33, offset: 5238},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 164, col: 37, offset: 5242},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 164, col: 43, offset: 5248},
								name: "DocumentAttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 164, col: 66, offset: 5271},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 164, col: 70, offset: 5275},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 164, col: 76, offset: 5281},
								expr: &actionExpr{
									pos: position{line: 164, col: 77, offset: 5282},
									run: (*parser).callonDocumentAttributeDeclaration9,
									expr: &seqExpr{
										pos: position{line: 164, col: 78, offset: 5283},
										exprs: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 164, col: 78, offset: 5283},
												expr: &ruleRefExpr{
													pos:  position{line: 164, col: 78, offset: 5283},
													name: "WS",
												},
											},
											&labeledExpr{
												pos:   position{line: 164, col: 82, offset: 5287},
												label: "value",
												expr: &ruleRefExpr{
													pos:  position{line: 164, col: 89, offset: 5294},
													name: "DocumentAttributeValue",
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 164, col: 138, offset: 5343},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeName",
			pos:  position{line: 171, col: 1, offset: 5592},
			expr: &actionExpr{
				pos: position{line: 171, col: 26, offset: 5617},
				run: (*parser).callonDocumentAttributeName1,
				expr: &seqExpr{
					pos: position{line: 171, col: 26, offset: 5617},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 171, col: 27, offset: 5618},
							alternatives: []interface{}{
								&charClassMatcher{
									pos:        position{line: 171, col: 27, offset: 5618},
									val:        "[A-Z]",
									ranges:     []rune{'A', 'Z'},
									ignoreCase: false,
									inverted:   false,
								},
								&charClassMatcher{
									pos:        position{line: 171, col: 35, offset: 5626},
									val:        "[a-z]",
									ranges:     []rune{'a', 'z'},
									ignoreCase: false,
									inverted:   false,
								},
								&charClassMatcher{
									pos:        position{line: 171, col: 43, offset: 5634},
									val:        "[0-9]",
									ranges:     []rune{'0', '9'},
									ignoreCase: false,
									inverted:   false,
								},
								&litMatcher{
									pos:        position{line: 171, col: 51, offset: 5642},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 171, col: 56, offset: 5647},
							expr: &choiceExpr{
								pos: position{line: 171, col: 57, offset: 5648},
								alternatives: []interface{}{
									&charClassMatcher{
										pos:        position{line: 171, col: 57, offset: 5648},
										val:        "[A-Z]",
										ranges:     []rune{'A', 'Z'},
										ignoreCase: false,
										inverted:   false,
									},
									&charClassMatcher{
										pos:        position{line: 171, col: 65, offset: 5656},
										val:        "[a-z]",
										ranges:     []rune{'a', 'z'},
										ignoreCase: false,
										inverted:   false,
									},
									&charClassMatcher{
										pos:        position{line: 171, col: 73, offset: 5664},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
									&litMatcher{
										pos:        position{line: 171, col: 81, offset: 5672},
										val:        "-",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeValue",
			pos:  position{line: 175, col: 1, offset: 5714},
			expr: &actionExpr{
				pos: position{line: 175, col: 27, offset: 5740},
				run: (*parser).callonDocumentAttributeValue1,
				expr: &oneOrMoreExpr{
					pos: position{line: 175, col: 27, offset: 5740},
					expr: &seqExpr{
						pos: position{line: 175, col: 28, offset: 5741},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 175, col: 28, offset: 5741},
								expr: &ruleRefExpr{
									pos:  position{line: 175, col: 29, offset: 5742},
									name: "NEWLINE",
								},
							},
							&anyMatcher{
								line: 175, col: 37, offset: 5750,
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeReset",
			pos:  position{line: 179, col: 1, offset: 5790},
			expr: &choiceExpr{
				pos: position{line: 179, col: 27, offset: 5816},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 179, col: 27, offset: 5816},
						run: (*parser).callonDocumentAttributeReset2,
						expr: &seqExpr{
							pos: position{line: 179, col: 27, offset: 5816},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 179, col: 27, offset: 5816},
									val:        ":!",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 179, col: 32, offset: 5821},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 179, col: 38, offset: 5827},
										name: "DocumentAttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 179, col: 61, offset: 5850},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 179, col: 65, offset: 5854},
									name: "EOLS",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 181, col: 5, offset: 5923},
						run: (*parser).callonDocumentAttributeReset9,
						expr: &seqExpr{
							pos: position{line: 181, col: 5, offset: 5923},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 181, col: 5, offset: 5923},
									val:        ":",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 181, col: 9, offset: 5927},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 181, col: 15, offset: 5933},
										name: "DocumentAttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 181, col: 38, offset: 5956},
									val:        "!:",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 181, col: 43, offset: 5961},
									name: "EOLS",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeSubstitution",
			pos:  position{line: 185, col: 1, offset: 6029},
			expr: &actionExpr{
				pos: position{line: 185, col: 34, offset: 6062},
				run: (*parser).callonDocumentAttributeSubstitution1,
				expr: &seqExpr{
					pos: position{line: 185, col: 34, offset: 6062},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 185, col: 34, offset: 6062},
							val:        "{",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 185, col: 38, offset: 6066},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 185, col: 44, offset: 6072},
								name: "DocumentAttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 185, col: 67, offset: 6095},
							val:        "}",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "ElementAttributes",
			pos:  position{line: 192, col: 1, offset: 6283},
			expr: &actionExpr{
				pos: position{line: 192, col: 22, offset: 6304},
				run: (*parser).callonElementAttributes1,
				expr: &labeledExpr{
					pos:   position{line: 192, col: 22, offset: 6304},
					label: "attrs",
					expr: &oneOrMoreExpr{
						pos: position{line: 192, col: 28, offset: 6310},
						expr: &ruleRefExpr{
							pos:  position{line: 192, col: 29, offset: 6311},
							name: "ElementAttribute",
						},
					},
				},
			},
		},
		{
			name: "ElementAttribute",
			pos:  position{line: 196, col: 1, offset: 6401},
			expr: &actionExpr{
				pos: position{line: 196, col: 21, offset: 6421},
				run: (*parser).callonElementAttribute1,
				expr: &seqExpr{
					pos: position{line: 196, col: 21, offset: 6421},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 196, col: 21, offset: 6421},
							expr: &choiceExpr{
								pos: position{line: 196, col: 23, offset: 6423},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 196, col: 23, offset: 6423},
										val:        "[",
										ignoreCase: false,
									},
									&litMatcher{
										pos:        position{line: 196, col: 29, offset: 6429},
										val:        ".",
										ignoreCase: false,
									},
									&litMatcher{
										pos:        position{line: 196, col: 35, offset: 6435},
										val:        "#",
										ignoreCase: false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 197, col: 5, offset: 6511},
							label: "attr",
							expr: &choiceExpr{
								pos: position{line: 197, col: 11, offset: 6517},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 197, col: 11, offset: 6517},
										name: "ElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 198, col: 9, offset: 6538},
										name: "ElementTitle",
									},
									&ruleRefExpr{
										pos:  position{line: 199, col: 9, offset: 6562},
										name: "ElementRole",
									},
									&ruleRefExpr{
										pos:  position{line: 200, col: 9, offset: 6585},
										name: "LiteralAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 201, col: 9, offset: 6613},
										name: "SourceAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 202, col: 9, offset: 6641},
										name: "QuoteAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 203, col: 9, offset: 6668},
										name: "VerseAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 204, col: 9, offset: 6695},
										name: "AdmonitionMarkerAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 205, col: 9, offset: 6732},
										name: "HorizontalLayout",
									},
									&ruleRefExpr{
										pos:  position{line: 206, col: 9, offset: 6760},
										name: "AttributeGroup",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MasqueradeAttribute",
			pos:  position{line: 211, col: 1, offset: 6943},
			expr: &choiceExpr{
				pos: position{line: 211, col: 24, offset: 6966},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 211, col: 24, offset: 6966},
						name: "QuoteAttributes",
					},
					&ruleRefExpr{
						pos:  position{line: 211, col: 42, offset: 6984},
						name: "VerseAttributes",
					},
				},
			},
		},
		{
			name: "ElementID",
			pos:  position{line: 213, col: 1, offset: 7001},
			expr: &choiceExpr{
				pos: position{line: 213, col: 14, offset: 7014},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 213, col: 14, offset: 7014},
						run: (*parser).callonElementID2,
						expr: &seqExpr{
							pos: position{line: 213, col: 14, offset: 7014},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 213, col: 14, offset: 7014},
									val:        "[[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 213, col: 19, offset: 7019},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 213, col: 23, offset: 7023},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 213, col: 27, offset: 7027},
									val:        "]]",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 213, col: 32, offset: 7032},
									name: "EOLS",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 215, col: 5, offset: 7086},
						run: (*parser).callonElementID9,
						expr: &seqExpr{
							pos: position{line: 215, col: 5, offset: 7086},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 215, col: 5, offset: 7086},
									val:        "[#",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 215, col: 10, offset: 7091},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 215, col: 14, offset: 7095},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 215, col: 18, offset: 7099},
									val:        "]",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 215, col: 23, offset: 7104},
									name: "EOLS",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElementID",
			pos:  position{line: 219, col: 1, offset: 7157},
			expr: &actionExpr{
				pos: position{line: 219, col: 20, offset: 7176},
				run: (*parser).callonInlineElementID1,
				expr: &seqExpr{
					pos: position{line: 219, col: 20, offset: 7176},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 219, col: 20, offset: 7176},
							val:        "[[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 219, col: 25, offset: 7181},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 219, col: 29, offset: 7185},
								name: "ID",
							},
						},
						&litMatcher{
							pos:        position{line: 219, col: 33, offset: 7189},
							val:        "]]",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 219, col: 38, offset: 7194},
							expr: &ruleRefExpr{
								pos:  position{line: 219, col: 38, offset: 7194},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "ElementTitle",
			pos:  position{line: 225, col: 1, offset: 7468},
			expr: &actionExpr{
				pos: position{line: 225, col: 17, offset: 7484},
				run: (*parser).callonElementTitle1,
				expr: &seqExpr{
					pos: position{line: 225, col: 17, offset: 7484},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 225, col: 17, offset: 7484},
							val:        ".",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 225, col: 21, offset: 7488},
							label: "title",
							expr: &actionExpr{
								pos: position{line: 225, col: 28, offset: 7495},
								run: (*parser).callonElementTitle5,
								expr: &seqExpr{
									pos: position{line: 225, col: 28, offset: 7495},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 225, col: 28, offset: 7495},
											name: "Alphanums",
										},
										&zeroOrMoreExpr{
											pos: position{line: 225, col: 38, offset: 7505},
											expr: &choiceExpr{
												pos: position{line: 225, col: 39, offset: 7506},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 225, col: 39, offset: 7506},
														name: "Alphanums",
													},
													&ruleRefExpr{
														pos:  position{line: 225, col: 51, offset: 7518},
														name: "Spaces",
													},
													&seqExpr{
														pos: position{line: 225, col: 61, offset: 7528},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 225, col: 61, offset: 7528},
																expr: &ruleRefExpr{
																	pos:  position{line: 225, col: 62, offset: 7529},
																	name: "NEWLINE",
																},
															},
															&anyMatcher{
																line: 225, col: 70, offset: 7537,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 227, col: 4, offset: 7578},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ElementRole",
			pos:  position{line: 233, col: 1, offset: 7730},
			expr: &actionExpr{
				pos: position{line: 233, col: 16, offset: 7745},
				run: (*parser).callonElementRole1,
				expr: &seqExpr{
					pos: position{line: 233, col: 16, offset: 7745},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 233, col: 16, offset: 7745},
							val:        "[.",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 233, col: 21, offset: 7750},
							label: "role",
							expr: &actionExpr{
								pos: position{line: 233, col: 27, offset: 7756},
								run: (*parser).callonElementRole5,
								expr: &seqExpr{
									pos: position{line: 233, col: 27, offset: 7756},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 233, col: 27, offset: 7756},
											name: "Alphanums",
										},
										&zeroOrMoreExpr{
											pos: position{line: 233, col: 37, offset: 7766},
											expr: &choiceExpr{
												pos: position{line: 233, col: 38, offset: 7767},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 233, col: 38, offset: 7767},
														name: "Alphanums",
													},
													&ruleRefExpr{
														pos:  position{line: 233, col: 50, offset: 7779},
														name: "Spaces",
													},
													&seqExpr{
														pos: position{line: 233, col: 60, offset: 7789},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 233, col: 60, offset: 7789},
																expr: &ruleRefExpr{
																	pos:  position{line: 233, col: 61, offset: 7790},
																	name: "NEWLINE",
																},
															},
															&notExpr{
																pos: position{line: 233, col: 69, offset: 7798},
																expr: &litMatcher{
																	pos:        position{line: 233, col: 70, offset: 7799},
																	val:        "]",
																	ignoreCase: false,
																},
															},
															&anyMatcher{
																line: 233, col: 74, offset: 7803,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 235, col: 4, offset: 7844},
							val:        "]",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 235, col: 8, offset: 7848},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "LiteralAttribute",
			pos:  position{line: 239, col: 1, offset: 7905},
			expr: &actionExpr{
				pos: position{line: 239, col: 21, offset: 7925},
				run: (*parser).callonLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 239, col: 21, offset: 7925},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 239, col: 21, offset: 7925},
							val:        "[literal]",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 239, col: 33, offset: 7937},
							expr: &ruleRefExpr{
								pos:  position{line: 239, col: 33, offset: 7937},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 239, col: 37, offset: 7941},
							name: "NEWLINE",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionMarkerAttribute",
			pos:  position{line: 244, col: 1, offset: 8073},
			expr: &actionExpr{
				pos: position{line: 244, col: 30, offset: 8102},
				run: (*parser).callonAdmonitionMarkerAttribute1,
				expr: &seqExpr{
					pos: position{line: 244, col: 30, offset: 8102},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 244, col: 30, offset: 8102},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 244, col: 34, offset: 8106},
							label: "k",
							expr: &ruleRefExpr{
								pos:  position{line: 244, col: 37, offset: 8109},
								name: "AdmonitionKind",
							},
						},
						&litMatcher{
							pos:        position{line: 244, col: 53, offset: 8125},
							val:        "]",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 244, col: 57, offset: 8129},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "SourceAttributes",
			pos:  position{line: 249, col: 1, offset: 8285},
			expr: &actionExpr{
				pos: position{line: 249, col: 21, offset: 8305},
				run: (*parser).callonSourceAttributes1,
				expr: &seqExpr{
					pos: position{line: 249, col: 21, offset: 8305},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 249, col: 21, offset: 8305},
							val:        "[source",
							ignoreCase: false,
						},
						&zeroOrOneExpr{
							pos: position{line: 249, col: 31, offset: 8315},
							expr: &litMatcher{
								pos:        position{line: 249, col: 31, offset: 8315},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 249, col: 36, offset: 8320},
							label: "language",
							expr: &zeroOrOneExpr{
								pos: position{line: 249, col: 45, offset: 8329},
								expr: &actionExpr{
									pos: position{line: 249, col: 46, offset: 8330},
									run: (*parser).callonSourceAttributes8,
									expr: &oneOrMoreExpr{
										pos: position{line: 249, col: 46, offset: 8330},
										expr: &choiceExpr{
											pos: position{line: 249, col: 47, offset: 8331},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 249, col: 47, offset: 8331},
													name: "Alphanums",
												},
												&ruleRefExpr{
													pos:  position{line: 249, col: 59, offset: 8343},
													name: "Spaces",
												},
												&seqExpr{
													pos: position{line: 249, col: 69, offset: 8353},
													exprs: []interface{}{
														&notExpr{
															pos: position{line: 249, col: 69, offset: 8353},
															expr: &ruleRefExpr{
																pos:  position{line: 249, col: 70, offset: 8354},
																name: "NEWLINE",
															},
														},
														&notExpr{
															pos: position{line: 249, col: 78, offset: 8362},
															expr: &litMatcher{
																pos:        position{line: 249, col: 79, offset: 8363},
																val:        "]",
																ignoreCase: false,
															},
														},
														&anyMatcher{
															line: 249, col: 83, offset: 8367,
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 251, col: 9, offset: 8417},
							val:        "]",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 251, col: 13, offset: 8421},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "AttributeGroup",
			pos:  position{line: 256, col: 1, offset: 8546},
			expr: &actionExpr{
				pos: position{line: 256, col: 19, offset: 8564},
				run: (*parser).callonAttributeGroup1,
				expr: &seqExpr{
					pos: position{line: 256, col: 19, offset: 8564},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 256, col: 19, offset: 8564},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 256, col: 23, offset: 8568},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 256, col: 34, offset: 8579},
								expr: &ruleRefExpr{
									pos:  position{line: 256, col: 35, offset: 8580},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 256, col: 54, offset: 8599},
							val:        "]",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 256, col: 58, offset: 8603},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "GenericAttribute",
			pos:  position{line: 260, col: 1, offset: 8676},
			expr: &choiceExpr{
				pos: position{line: 261, col: 5, offset: 8701},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 261, col: 5, offset: 8701},
						run: (*parser).callonGenericAttribute2,
						expr: &seqExpr{
							pos: position{line: 261, col: 5, offset: 8701},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 261, col: 5, offset: 8701},
									label: "key",
									expr: &ruleRefExpr{
										pos:  position{line: 261, col: 10, offset: 8706},
										name: "AttributeKey",
									},
								},
								&litMatcher{
									pos:        position{line: 261, col: 24, offset: 8720},
									val:        "=",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 261, col: 28, offset: 8724},
									label: "value",
									expr: &zeroOrOneExpr{
										pos: position{line: 261, col: 34, offset: 8730},
										expr: &ruleRefExpr{
											pos:  position{line: 261, col: 35, offset: 8731},
											name: "AttributeValue",
										},
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 261, col: 52, offset: 8748},
									expr: &litMatcher{
										pos:        position{line: 261, col: 52, offset: 8748},
										val:        ",",
										ignoreCase: false,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 261, col: 57, offset: 8753},
									expr: &ruleRefExpr{
										pos:  position{line: 261, col: 57, offset: 8753},
										name: "WS",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 263, col: 9, offset: 8858},
						run: (*parser).callonGenericAttribute14,
						expr: &seqExpr{
							pos: position{line: 263, col: 9, offset: 8858},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 263, col: 9, offset: 8858},
									label: "key",
									expr: &ruleRefExpr{
										pos:  position{line: 263, col: 14, offset: 8863},
										name: "AttributeKey",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 263, col: 28, offset: 8877},
									expr: &litMatcher{
										pos:        position{line: 263, col: 28, offset: 8877},
										val:        ",",
										ignoreCase: false,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 263, col: 33, offset: 8882},
									expr: &ruleRefExpr{
										pos:  position{line: 263, col: 33, offset: 8882},
										name: "WS",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeKey",
			pos:  position{line: 267, col: 1, offset: 8975},
			expr: &actionExpr{
				pos: position{line: 267, col: 17, offset: 8991},
				run: (*parser).callonAttributeKey1,
				expr: &seqExpr{
					pos: position{line: 267, col: 17, offset: 8991},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 267, col: 17, offset: 8991},
							expr: &litMatcher{
								pos:        position{line: 267, col: 18, offset: 8992},
								val:        "quote",
								ignoreCase: false,
							},
						},
						&notExpr{
							pos: position{line: 267, col: 26, offset: 9000},
							expr: &litMatcher{
								pos:        position{line: 267, col: 27, offset: 9001},
								val:        "verse",
								ignoreCase: false,
							},
						},
						&notExpr{
							pos: position{line: 267, col: 35, offset: 9009},
							expr: &litMatcher{
								pos:        position{line: 267, col: 36, offset: 9010},
								val:        "literal",
								ignoreCase: false,
							},
						},
						&notExpr{
							pos: position{line: 267, col: 46, offset: 9020},
							expr: &ruleRefExpr{
								pos:  position{line: 267, col: 47, offset: 9021},
								name: "Spaces",
							},
						},
						&labeledExpr{
							pos:   position{line: 267, col: 54, offset: 9028},
							label: "key",
							expr: &oneOrMoreExpr{
								pos: position{line: 267, col: 58, offset: 9032},
								expr: &choiceExpr{
									pos: position{line: 267, col: 59, offset: 9033},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 267, col: 59, offset: 9033},
											name: "Alphanums",
										},
										&ruleRefExpr{
											pos:  position{line: 267, col: 71, offset: 9045},
											name: "OtherAttributeChar",
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 267, col: 92, offset: 9066},
							expr: &ruleRefExpr{
								pos:  position{line: 267, col: 92, offset: 9066},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeValue",
			pos:  position{line: 271, col: 1, offset: 9106},
			expr: &actionExpr{
				pos: position{line: 271, col: 19, offset: 9124},
				run: (*parser).callonAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 271, col: 19, offset: 9124},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 271, col: 19, offset: 9124},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 271, col: 25, offset: 9130},
								expr: &choiceExpr{
									pos: position{line: 271, col: 26, offset: 9131},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 271, col: 26, offset: 9131},
											name: "Alphanums",
										},
										&ruleRefExpr{
											pos:  position{line: 271, col: 38, offset: 9143},
											name: "Spaces",
										},
										&ruleRefExpr{
											pos:  position{line: 271, col: 47, offset: 9152},
											name: "OtherAttributeChar",
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 271, col: 68, offset: 9173},
							expr: &litMatcher{
								pos:        position{line: 271, col: 69, offset: 9174},
								val:        "=",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "OtherAttributeChar",
			pos:  position{line: 275, col: 1, offset: 9329},
			expr: &seqExpr{
				pos: position{line: 275, col: 24, offset: 9352},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 275, col: 24, offset: 9352},
						expr: &litMatcher{
							pos:        position{line: 275, col: 25, offset: 9353},
							val:        "=",
							ignoreCase: false,
						},
					},
					&notExpr{
						pos: position{line: 275, col: 29, offset: 9357},
						expr: &litMatcher{
							pos:        position{line: 275, col: 30, offset: 9358},
							val:        ",",
							ignoreCase: false,
						},
					},
					&notExpr{
						pos: position{line: 275, col: 34, offset: 9362},
						expr: &litMatcher{
							pos:        position{line: 275, col: 35, offset: 9363},
							val:        "]",
							ignoreCase: false,
						},
					},
					&anyMatcher{
						line: 275, col: 39, offset: 9367,
					},
				},
			},
		},
		{
			name: "HorizontalLayout",
			pos:  position{line: 277, col: 1, offset: 9371},
			expr: &actionExpr{
				pos: position{line: 277, col: 21, offset: 9391},
				run: (*parser).callonHorizontalLayout1,
				expr: &seqExpr{
					pos: position{line: 277, col: 21, offset: 9391},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 277, col: 21, offset: 9391},
							val:        "[horizontal]",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 277, col: 36, offset: 9406},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "QuoteAttributes",
			pos:  position{line: 281, col: 1, offset: 9480},
			expr: &actionExpr{
				pos: position{line: 281, col: 20, offset: 9499},
				run: (*parser).callonQuoteAttributes1,
				expr: &seqExpr{
					pos: position{line: 281, col: 20, offset: 9499},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 281, col: 20, offset: 9499},
							val:        "[quote",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 281, col: 29, offset: 9508},
							expr: &ruleRefExpr{
								pos:  position{line: 281, col: 29, offset: 9508},
								name: "WS",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 281, col: 33, offset: 9512},
							expr: &litMatcher{
								pos:        position{line: 281, col: 33, offset: 9512},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 281, col: 38, offset: 9517},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 281, col: 45, offset: 9524},
								expr: &ruleRefExpr{
									pos:  position{line: 281, col: 46, offset: 9525},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 281, col: 63, offset: 9542},
							expr: &litMatcher{
								pos:        position{line: 281, col: 63, offset: 9542},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 281, col: 68, offset: 9547},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 281, col: 74, offset: 9553},
								expr: &ruleRefExpr{
									pos:  position{line: 281, col: 75, offset: 9554},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 281, col: 92, offset: 9571},
							val:        "]",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 281, col: 96, offset: 9575},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "VerseAttributes",
			pos:  position{line: 285, col: 1, offset: 9645},
			expr: &actionExpr{
				pos: position{line: 285, col: 20, offset: 9664},
				run: (*parser).callonVerseAttributes1,
				expr: &seqExpr{
					pos: position{line: 285, col: 20, offset: 9664},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 285, col: 20, offset: 9664},
							val:        "[verse",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 285, col: 29, offset: 9673},
							expr: &ruleRefExpr{
								pos:  position{line: 285, col: 29, offset: 9673},
								name: "WS",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 285, col: 33, offset: 9677},
							expr: &litMatcher{
								pos:        position{line: 285, col: 33, offset: 9677},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 285, col: 38, offset: 9682},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 285, col: 45, offset: 9689},
								expr: &ruleRefExpr{
									pos:  position{line: 285, col: 46, offset: 9690},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 285, col: 63, offset: 9707},
							expr: &litMatcher{
								pos:        position{line: 285, col: 63, offset: 9707},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 285, col: 68, offset: 9712},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 285, col: 74, offset: 9718},
								expr: &ruleRefExpr{
									pos:  position{line: 285, col: 75, offset: 9719},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 285, col: 92, offset: 9736},
							val:        "]",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 285, col: 96, offset: 9740},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "QuoteAttribute",
			pos:  position{line: 289, col: 1, offset: 9828},
			expr: &actionExpr{
				pos: position{line: 289, col: 19, offset: 9846},
				run: (*parser).callonQuoteAttribute1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 289, col: 19, offset: 9846},
					expr: &choiceExpr{
						pos: position{line: 289, col: 20, offset: 9847},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 289, col: 20, offset: 9847},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 289, col: 32, offset: 9859},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 289, col: 42, offset: 9869},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 289, col: 42, offset: 9869},
										expr: &litMatcher{
											pos:        position{line: 289, col: 43, offset: 9870},
											val:        ",",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 289, col: 47, offset: 9874},
										expr: &litMatcher{
											pos:        position{line: 289, col: 48, offset: 9875},
											val:        "]",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 289, col: 52, offset: 9879},
										expr: &ruleRefExpr{
											pos:  position{line: 289, col: 53, offset: 9880},
											name: "EOL",
										},
									},
									&anyMatcher{
										line: 289, col: 57, offset: 9884,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineAttributes",
			pos:  position{line: 293, col: 1, offset: 9925},
			expr: &actionExpr{
				pos: position{line: 293, col: 21, offset: 9945},
				run: (*parser).callonInlineAttributes1,
				expr: &seqExpr{
					pos: position{line: 293, col: 21, offset: 9945},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 293, col: 21, offset: 9945},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 293, col: 25, offset: 9949},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 293, col: 31, offset: 9955},
								expr: &ruleRefExpr{
									pos:  position{line: 293, col: 32, offset: 9956},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 293, col: 51, offset: 9975},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Section",
			pos:  position{line: 300, col: 1, offset: 10149},
			expr: &actionExpr{
				pos: position{line: 300, col: 12, offset: 10160},
				run: (*parser).callonSection1,
				expr: &seqExpr{
					pos: position{line: 300, col: 12, offset: 10160},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 300, col: 12, offset: 10160},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 300, col: 23, offset: 10171},
								expr: &ruleRefExpr{
									pos:  position{line: 300, col: 24, offset: 10172},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 301, col: 5, offset: 10196},
							label: "level",
							expr: &actionExpr{
								pos: position{line: 301, col: 12, offset: 10203},
								run: (*parser).callonSection7,
								expr: &oneOrMoreExpr{
									pos: position{line: 301, col: 12, offset: 10203},
									expr: &litMatcher{
										pos:        position{line: 301, col: 13, offset: 10204},
										val:        "=",
										ignoreCase: false,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 305, col: 5, offset: 10295},
							run: (*parser).callonSection10,
						},
						&oneOrMoreExpr{
							pos: position{line: 309, col: 5, offset: 10447},
							expr: &ruleRefExpr{
								pos:  position{line: 309, col: 5, offset: 10447},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 309, col: 9, offset: 10451},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 309, col: 16, offset: 10458},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 309, col: 31, offset: 10473},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 309, col: 35, offset: 10477},
								expr: &ruleRefExpr{
									pos:  position{line: 309, col: 35, offset: 10477},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 309, col: 53, offset: 10495},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "TitleElements",
			pos:  position{line: 313, col: 1, offset: 10601},
			expr: &actionExpr{
				pos: position{line: 313, col: 18, offset: 10618},
				run: (*parser).callonTitleElements1,
				expr: &labeledExpr{
					pos:   position{line: 313, col: 18, offset: 10618},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 313, col: 27, offset: 10627},
						expr: &seqExpr{
							pos: position{line: 313, col: 28, offset: 10628},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 313, col: 28, offset: 10628},
									expr: &ruleRefExpr{
										pos:  position{line: 313, col: 29, offset: 10629},
										name: "NEWLINE",
									},
								},
								&notExpr{
									pos: position{line: 313, col: 37, offset: 10637},
									expr: &ruleRefExpr{
										pos:  position{line: 313, col: 38, offset: 10638},
										name: "InlineElementID",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 313, col: 54, offset: 10654},
									name: "TitleElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TitleElement",
			pos:  position{line: 317, col: 1, offset: 10775},
			expr: &actionExpr{
				pos: position{line: 317, col: 17, offset: 10791},
				run: (*parser).callonTitleElement1,
				expr: &labeledExpr{
					pos:   position{line: 317, col: 17, offset: 10791},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 317, col: 26, offset: 10800},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 317, col: 26, offset: 10800},
								name: "SimpleWord",
							},
							&ruleRefExpr{
								pos:  position{line: 318, col: 11, offset: 10821},
								name: "Spaces",
							},
							&ruleRefExpr{
								pos:  position{line: 319, col: 11, offset: 10839},
								name: "CrossReference",
							},
							&ruleRefExpr{
								pos:  position{line: 320, col: 11, offset: 10864},
								name: "Passthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 321, col: 11, offset: 10886},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 322, col: 11, offset: 10909},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 323, col: 11, offset: 10924},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 324, col: 11, offset: 10949},
								name: "QuotedText",
							},
							&ruleRefExpr{
								pos:  position{line: 325, col: 11, offset: 10970},
								name: "DocumentAttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 326, col: 11, offset: 11010},
								name: "LineBreak",
							},
							&ruleRefExpr{
								pos:  position{line: 327, col: 11, offset: 11030},
								name: "OtherWord",
							},
							&ruleRefExpr{
								pos:  position{line: 328, col: 11, offset: 11050},
								name: "Parenthesis",
							},
						},
					},
				},
			},
		},
		{
			name: "TableOfContentsMacro",
			pos:  position{line: 335, col: 1, offset: 11205},
			expr: &seqExpr{
				pos: position{line: 335, col: 25, offset: 11229},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 335, col: 25, offset: 11229},
						val:        "toc::[]",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 335, col: 35, offset: 11239},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "UserMacroBlock",
			pos:  position{line: 340, col: 1, offset: 11350},
			expr: &actionExpr{
				pos: position{line: 340, col: 19, offset: 11368},
				run: (*parser).callonUserMacroBlock1,
				expr: &seqExpr{
					pos: position{line: 340, col: 19, offset: 11368},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 340, col: 19, offset: 11368},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 340, col: 25, offset: 11374},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 340, col: 40, offset: 11389},
							val:        "::",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 340, col: 45, offset: 11394},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 340, col: 52, offset: 11401},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 340, col: 68, offset: 11417},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 340, col: 75, offset: 11424},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineUserMacro",
			pos:  position{line: 344, col: 1, offset: 11565},
			expr: &actionExpr{
				pos: position{line: 344, col: 20, offset: 11584},
				run: (*parser).callonInlineUserMacro1,
				expr: &seqExpr{
					pos: position{line: 344, col: 20, offset: 11584},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 344, col: 20, offset: 11584},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 344, col: 26, offset: 11590},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 344, col: 41, offset: 11605},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 344, col: 45, offset: 11609},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 344, col: 52, offset: 11616},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 344, col: 68, offset: 11632},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 344, col: 75, offset: 11639},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroName",
			pos:  position{line: 348, col: 1, offset: 11781},
			expr: &actionExpr{
				pos: position{line: 348, col: 18, offset: 11798},
				run: (*parser).callonUserMacroName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 348, col: 18, offset: 11798},
					expr: &choiceExpr{
						pos: position{line: 348, col: 19, offset: 11799},
						alternatives: []interface{}{
							&charClassMatcher{
								pos:        position{line: 348, col: 19, offset: 11799},
								val:        "[a-zA-Z0-9]",
								ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
							&litMatcher{
								pos:        position{line: 348, col: 33, offset: 11813},
								val:        "_",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 348, col: 39, offset: 11819},
								val:        "-",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroValue",
			pos:  position{line: 352, col: 1, offset: 11861},
			expr: &actionExpr{
				pos: position{line: 352, col: 19, offset: 11879},
				run: (*parser).callonUserMacroValue1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 352, col: 19, offset: 11879},
					expr: &choiceExpr{
						pos: position{line: 352, col: 20, offset: 11880},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 352, col: 20, offset: 11880},
								name: "Alphanums",
							},
							&seqExpr{
								pos: position{line: 352, col: 33, offset: 11893},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 352, col: 33, offset: 11893},
										expr: &ruleRefExpr{
											pos:  position{line: 352, col: 34, offset: 11894},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 352, col: 37, offset: 11897},
										expr: &litMatcher{
											pos:        position{line: 352, col: 38, offset: 11898},
											val:        ":",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 352, col: 42, offset: 11902},
										expr: &litMatcher{
											pos:        position{line: 352, col: 43, offset: 11903},
											val:        "[",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 352, col: 47, offset: 11907},
										expr: &ruleRefExpr{
											pos:  position{line: 352, col: 48, offset: 11908},
											name: "EOL",
										},
									},
									&anyMatcher{
										line: 352, col: 52, offset: 11912,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroAttributes",
			pos:  position{line: 356, col: 1, offset: 11953},
			expr: &actionExpr{
				pos: position{line: 356, col: 24, offset: 11976},
				run: (*parser).callonUserMacroAttributes1,
				expr: &seqExpr{
					pos: position{line: 356, col: 24, offset: 11976},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 356, col: 24, offset: 11976},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 356, col: 28, offset: 11980},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 356, col: 34, offset: 11986},
								expr: &ruleRefExpr{
									pos:  position{line: 356, col: 35, offset: 11987},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 356, col: 54, offset: 12006},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FileInclusion",
			pos:  position{line: 363, col: 1, offset: 12186},
			expr: &actionExpr{
				pos: position{line: 363, col: 18, offset: 12203},
				run: (*parser).callonFileInclusion1,
				expr: &seqExpr{
					pos: position{line: 363, col: 18, offset: 12203},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 363, col: 18, offset: 12203},
							label: "incl",
							expr: &actionExpr{
								pos: position{line: 363, col: 24, offset: 12209},
								run: (*parser).callonFileInclusion4,
								expr: &seqExpr{
									pos: position{line: 363, col: 24, offset: 12209},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 363, col: 24, offset: 12209},
											val:        "include::",
											ignoreCase: false,
										},
										&labeledExpr{
											pos:   position{line: 363, col: 36, offset: 12221},
											label: "path",
											expr: &ruleRefExpr{
												pos:  position{line: 363, col: 42, offset: 12227},
												name: "FileLocation",
											},
										},
										&labeledExpr{
											pos:   position{line: 363, col: 56, offset: 12241},
											label: "inlineAttributes",
											expr: &ruleRefExpr{
												pos:  position{line: 363, col: 74, offset: 12259},
												name: "FileIncludeAttributes",
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 365, col: 8, offset: 12413},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "FileIncludeAttributes",
			pos:  position{line: 369, col: 1, offset: 12466},
			expr: &actionExpr{
				pos: position{line: 369, col: 26, offset: 12491},
				run: (*parser).callonFileIncludeAttributes1,
				expr: &seqExpr{
					pos: position{line: 369, col: 26, offset: 12491},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 369, col: 26, offset: 12491},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 369, col: 30, offset: 12495},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 369, col: 36, offset: 12501},
								expr: &choiceExpr{
									pos: position{line: 369, col: 37, offset: 12502},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 369, col: 37, offset: 12502},
											name: "LineRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 369, col: 59, offset: 12524},
											name: "TagRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 369, col: 80, offset: 12545},
											name: "GenericAttribute",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 369, col: 99, offset: 12564},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttribute",
			pos:  position{line: 373, col: 1, offset: 12634},
			expr: &actionExpr{
				pos: position{line: 373, col: 24, offset: 12657},
				run: (*parser).callonLineRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 373, col: 24, offset: 12657},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 373, col: 24, offset: 12657},
							val:        "lines=",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 373, col: 33, offset: 12666},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 373, col: 40, offset: 12673},
								name: "LineRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 373, col: 66, offset: 12699},
							expr: &litMatcher{
								pos:        position{line: 373, col: 66, offset: 12699},
								val:        ",",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttributeValue",
			pos:  position{line: 377, col: 1, offset: 12758},
			expr: &actionExpr{
				pos: position{line: 377, col: 29, offset: 12786},
				run: (*parser).callonLineRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 377, col: 29, offset: 12786},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 377, col: 29, offset: 12786},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 377, col: 36, offset: 12793},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 377, col: 36, offset: 12793},
										name: "MultipleLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 378, col: 11, offset: 12910},
										name: "MultipleQuotedLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 379, col: 11, offset: 12946},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 380, col: 11, offset: 12972},
										name: "MultiLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 381, col: 11, offset: 13004},
										name: "SingleLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 382, col: 11, offset: 13036},
										name: "SingleLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 383, col: 11, offset: 13063},
										name: "UndefinedLineRange",
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 383, col: 31, offset: 13083},
							expr: &ruleRefExpr{
								pos:  position{line: 383, col: 31, offset: 13083},
								name: "WS",
							},
						},
						&choiceExpr{
							pos: position{line: 383, col: 36, offset: 13088},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 383, col: 36, offset: 13088},
									expr: &litMatcher{
										pos:        position{line: 383, col: 37, offset: 13089},
										val:        ",",
										ignoreCase: false,
									},
								},
								&andExpr{
									pos: position{line: 383, col: 43, offset: 13095},
									expr: &litMatcher{
										pos:        position{line: 383, col: 44, offset: 13096},
										val:        "]",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleLineRanges",
			pos:  position{line: 387, col: 1, offset: 13128},
			expr: &actionExpr{
				pos: position{line: 387, col: 23, offset: 13150},
				run: (*parser).callonMultipleLineRanges1,
				expr: &seqExpr{
					pos: position{line: 387, col: 23, offset: 13150},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 387, col: 23, offset: 13150},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 387, col: 30, offset: 13157},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 387, col: 30, offset: 13157},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 387, col: 47, offset: 13174},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 388, col: 5, offset: 13196},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 388, col: 12, offset: 13203},
								expr: &actionExpr{
									pos: position{line: 388, col: 13, offset: 13204},
									run: (*parser).callonMultipleLineRanges9,
									expr: &seqExpr{
										pos: position{line: 388, col: 13, offset: 13204},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 388, col: 13, offset: 13204},
												val:        ";",
												ignoreCase: false,
											},
											&labeledExpr{
												pos:   position{line: 388, col: 17, offset: 13208},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 388, col: 24, offset: 13215},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 388, col: 24, offset: 13215},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 388, col: 41, offset: 13232},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleQuotedLineRanges",
			pos:  position{line: 394, col: 1, offset: 13370},
			expr: &actionExpr{
				pos: position{line: 394, col: 29, offset: 13398},
				run: (*parser).callonMultipleQuotedLineRanges1,
				expr: &seqExpr{
					pos: position{line: 394, col: 29, offset: 13398},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 394, col: 29, offset: 13398},
							val:        "\"",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 394, col: 34, offset: 13403},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 394, col: 41, offset: 13410},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 394, col: 41, offset: 13410},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 394, col: 58, offset: 13427},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 395, col: 5, offset: 13449},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 395, col: 12, offset: 13456},
								expr: &actionExpr{
									pos: position{line: 395, col: 13, offset: 13457},
									run: (*parser).callonMultipleQuotedLineRanges10,
									expr: &seqExpr{
										pos: position{line: 395, col: 13, offset: 13457},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 395, col: 13, offset: 13457},
												val:        ",",
												ignoreCase: false,
											},
											&labeledExpr{
												pos:   position{line: 395, col: 17, offset: 13461},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 395, col: 24, offset: 13468},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 395, col: 24, offset: 13468},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 395, col: 41, offset: 13485},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 397, col: 9, offset: 13538},
							val:        "\"",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "MultiLineRange",
			pos:  position{line: 401, col: 1, offset: 13628},
			expr: &actionExpr{
				pos: position{line: 401, col: 19, offset: 13646},
				run: (*parser).callonMultiLineRange1,
				expr: &seqExpr{
					pos: position{line: 401, col: 19, offset: 13646},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 401, col: 19, offset: 13646},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 401, col: 26, offset: 13653},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 401, col: 34, offset: 13661},
							val:        "..",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 401, col: 39, offset: 13666},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 401, col: 44, offset: 13671},
								name: "NUMBER",
							},
						},
					},
				},
			},
		},
		{
			name: "MultiLineQuotedRange",
			pos:  position{line: 405, col: 1, offset: 13759},
			expr: &actionExpr{
				pos: position{line: 405, col: 25, offset: 13783},
				run: (*parser).callonMultiLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 405, col: 25, offset: 13783},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 405, col: 25, offset: 13783},
							val:        "\"",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 405, col: 30, offset: 13788},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 405, col: 37, offset: 13795},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 405, col: 45, offset: 13803},
							val:        "..",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 405, col: 50, offset: 13808},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 405, col: 55, offset: 13813},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 405, col: 63, offset: 13821},
							val:        "\"",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SingleLineRange",
			pos:  position{line: 409, col: 1, offset: 13906},
			expr: &actionExpr{
				pos: position{line: 409, col: 20, offset: 13925},
				run: (*parser).callonSingleLineRange1,
				expr: &labeledExpr{
					pos:   position{line: 409, col: 20, offset: 13925},
					label: "singleline",
					expr: &ruleRefExpr{
						pos:  position{line: 409, col: 32, offset: 13937},
						name: "NUMBER",
					},
				},
			},
		},
		{
			name: "SingleLineQuotedRange",
			pos:  position{line: 413, col: 1, offset: 14032},
			expr: &actionExpr{
				pos: position{line: 413, col: 26, offset: 14057},
				run: (*parser).callonSingleLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 413, col: 26, offset: 14057},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 413, col: 26, offset: 14057},
							val:        "\"",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 413, col: 31, offset: 14062},
							label: "singleline",
							expr: &ruleRefExpr{
								pos:  position{line: 413, col: 43, offset: 14074},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 413, col: 51, offset: 14082},
							val:        "\"",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "UndefinedLineRange",
			pos:  position{line: 417, col: 1, offset: 14174},
			expr: &actionExpr{
				pos: position{line: 417, col: 23, offset: 14196},
				run: (*parser).callonUndefinedLineRange1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 417, col: 23, offset: 14196},
					expr: &seqExpr{
						pos: position{line: 417, col: 24, offset: 14197},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 417, col: 24, offset: 14197},
								expr: &litMatcher{
									pos:        position{line: 417, col: 25, offset: 14198},
									val:        "]",
									ignoreCase: false,
								},
							},
							&notExpr{
								pos: position{line: 417, col: 29, offset: 14202},
								expr: &litMatcher{
									pos:        position{line: 417, col: 30, offset: 14203},
									val:        ",",
									ignoreCase: false,
								},
							},
							&notExpr{
								pos: position{line: 417, col: 34, offset: 14207},
								expr: &ruleRefExpr{
									pos:  position{line: 417, col: 35, offset: 14208},
									name: "WS",
								},
							},
							&anyMatcher{
								line: 417, col: 38, offset: 14211,
							},
						},
					},
				},
			},
		},
		{
			name: "TagRangesAttribute",
			pos:  position{line: 421, col: 1, offset: 14251},
			expr: &actionExpr{
				pos: position{line: 421, col: 23, offset: 14273},
				run: (*parser).callonTagRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 421, col: 23, offset: 14273},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 421, col: 24, offset: 14274},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 421, col: 24, offset: 14274},
									val:        "tags=",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 421, col: 34, offset: 14284},
									val:        "tag=",
									ignoreCase: false,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 421, col: 42, offset: 14292},
							label: "tags",
							expr: &ruleRefExpr{
								pos:  position{line: 421, col: 48, offset: 14298},
								name: "TagRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 421, col: 73, offset: 14323},
							expr: &litMatcher{
								pos:        position{line: 421, col: 73, offset: 14323},
								val:        ",",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "TagRangesAttributeValue",
			pos:  position{line: 425, col: 1, offset: 14472},
			expr: &actionExpr{
				pos: position{line: 425, col: 28, offset: 14499},
				run: (*parser).callonTagRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 425, col: 28, offset: 14499},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 425, col: 28, offset: 14499},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 425, col: 35, offset: 14506},
								name: "MultipleTagRanges",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 425, col: 54, offset: 14525},
							expr: &ruleRefExpr{
								pos:  position{line: 425, col: 54, offset: 14525},
								name: "WS",
							},
						},
						&choiceExpr{
							pos: position{line: 425, col: 59, offset: 14530},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 425, col: 59, offset: 14530},
									expr: &litMatcher{
										pos:        position{line: 425, col: 60, offset: 14531},
										val:        ",",
										ignoreCase: false,
									},
								},
								&andExpr{
									pos: position{line: 425, col: 66, offset: 14537},
									expr: &litMatcher{
										pos:        position{line: 425, col: 67, offset: 14538},
										val:        "]",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleTagRanges",
			pos:  position{line: 429, col: 1, offset: 14570},
			expr: &actionExpr{
				pos: position{line: 429, col: 22, offset: 14591},
				run: (*parser).callonMultipleTagRanges1,
				expr: &seqExpr{
					pos: position{line: 429, col: 22, offset: 14591},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 429, col: 22, offset: 14591},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 429, col: 29, offset: 14598},
								name: "TagRange",
							},
						},
						&labeledExpr{
							pos:   position{line: 430, col: 5, offset: 14612},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 430, col: 12, offset: 14619},
								expr: &actionExpr{
									pos: position{line: 430, col: 13, offset: 14620},
									run: (*parser).callonMultipleTagRanges7,
									expr: &seqExpr{
										pos: position{line: 430, col: 13, offset: 14620},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 430, col: 13, offset: 14620},
												val:        ";",
												ignoreCase: false,
											},
											&labeledExpr{
												pos:   position{line: 430, col: 17, offset: 14624},
												label: "other",
												expr: &ruleRefExpr{
													pos:  position{line: 430, col: 24, offset: 14631},
													name: "TagRange",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagRange",
			pos:  position{line: 436, col: 1, offset: 14762},
			expr: &choiceExpr{
				pos: position{line: 436, col: 13, offset: 14774},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 436, col: 13, offset: 14774},
						run: (*parser).callonTagRange2,
						expr: &labeledExpr{
							pos:   position{line: 436, col: 13, offset: 14774},
							label: "tag",
							expr: &choiceExpr{
								pos: position{line: 436, col: 18, offset: 14779},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 436, col: 18, offset: 14779},
										name: "Alphanums",
									},
									&ruleRefExpr{
										pos:  position{line: 436, col: 30, offset: 14791},
										name: "TagWildcard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 438, col: 5, offset: 14859},
						run: (*parser).callonTagRange7,
						expr: &seqExpr{
							pos: position{line: 438, col: 5, offset: 14859},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 438, col: 5, offset: 14859},
									val:        "!",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 438, col: 9, offset: 14863},
									label: "tag",
									expr: &choiceExpr{
										pos: position{line: 438, col: 14, offset: 14868},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 438, col: 14, offset: 14868},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 438, col: 26, offset: 14880},
												name: "TagWildcard",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagWildcard",
			pos:  position{line: 442, col: 1, offset: 14948},
			expr: &actionExpr{
				pos: position{line: 442, col: 16, offset: 14963},
				run: (*parser).callonTagWildcard1,
				expr: &seqExpr{
					pos: position{line: 442, col: 16, offset: 14963},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 442, col: 16, offset: 14963},
							label: "stars",
							expr: &actionExpr{
								pos: position{line: 442, col: 23, offset: 14970},
								run: (*parser).callonTagWildcard4,
								expr: &oneOrMoreExpr{
									pos: position{line: 442, col: 23, offset: 14970},
									expr: &litMatcher{
										pos:        position{line: 442, col: 24, offset: 14971},
										val:        "*",
										ignoreCase: false,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 445, col: 5, offset: 15025},
							run: (*parser).callonTagWildcard7,
						},
					},
				},
			},
		},
		{
			name: "IncludedFileLine",
			pos:  position{line: 455, col: 1, offset: 15319},
			expr: &actionExpr{
				pos: position{line: 455, col: 21, offset: 15339},
				run: (*parser).callonIncludedFileLine1,
				expr: &seqExpr{
					pos: position{line: 455, col: 21, offset: 15339},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 455, col: 21, offset: 15339},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 455, col: 29, offset: 15347},
								expr: &choiceExpr{
									pos: position{line: 455, col: 30, offset: 15348},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 455, col: 30, offset: 15348},
											name: "IncludedFileStartTag",
										},
										&ruleRefExpr{
											pos:  position{line: 455, col: 53, offset: 15371},
											name: "IncludedFileEndTag",
										},
										&actionExpr{
											pos: position{line: 455, col: 74, offset: 15392},
											run: (*parser).callonIncludedFileLine8,
											expr: &anyMatcher{
												line: 455, col: 74, offset: 15392,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 455, col: 107, offset: 15425},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileStartTag",
			pos:  position{line: 459, col: 1, offset: 15496},
			expr: &actionExpr{
				pos: position{line: 459, col: 25, offset: 15520},
				run: (*parser).callonIncludedFileStartTag1,
				expr: &seqExpr{
					pos: position{line: 459, col: 25, offset: 15520},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 459, col: 25, offset: 15520},
							val:        "tag::",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 459, col: 33, offset: 15528},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 459, col: 38, offset: 15533},
								run: (*parser).callonIncludedFileStartTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 459, col: 38, offset: 15533},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 459, col: 78, offset: 15573},
							val:        "[]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IncludedFileEndTag",
			pos:  position{line: 463, col: 1, offset: 15638},
			expr: &actionExpr{
				pos: position{line: 463, col: 23, offset: 15660},
				run: (*parser).callonIncludedFileEndTag1,
				expr: &seqExpr{
					pos: position{line: 463, col: 23, offset: 15660},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 463, col: 23, offset: 15660},
							val:        "end::",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 463, col: 31, offset: 15668},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 463, col: 36, offset: 15673},
								run: (*parser).callonIncludedFileEndTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 463, col: 36, offset: 15673},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 463, col: 76, offset: 15713},
							val:        "[]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "ListItems",
			pos:  position{line: 470, col: 1, offset: 15877},
			expr: &oneOrMoreExpr{
				pos: position{line: 470, col: 14, offset: 15890},
				expr: &ruleRefExpr{
					pos:  position{line: 470, col: 14, offset: 15890},
					name: "ListItem",
				},
			},
		},
		{
			name: "ListItem",
			pos:  position{line: 472, col: 1, offset: 15901},
			expr: &choiceExpr{
				pos: position{line: 472, col: 13, offset: 15913},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 472, col: 13, offset: 15913},
						name: "OrderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 472, col: 31, offset: 15931},
						name: "UnorderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 472, col: 51, offset: 15951},
						name: "LabeledListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 472, col: 69, offset: 15969},
						name: "ContinuedListItemElement",
					},
				},
			},
		},
		{
			name: "ListParagraph",
			pos:  position{line: 474, col: 1, offset: 15995},
			expr: &choiceExpr{
				pos: position{line: 474, col: 18, offset: 16012},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 474, col: 18, offset: 16012},
						run: (*parser).callonListParagraph2,
						expr: &labeledExpr{
							pos:   position{line: 474, col: 18, offset: 16012},
							label: "comment",
							expr: &ruleRefExpr{
								pos:  position{line: 474, col: 27, offset: 16021},
								name: "SingleLineComment",
							},
						},
					},
					&actionExpr{
						pos: position{line: 476, col: 9, offset: 16078},
						run: (*parser).callonListParagraph5,
						expr: &labeledExpr{
							pos:   position{line: 476, col: 9, offset: 16078},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 476, col: 15, offset: 16084},
								expr: &ruleRefExpr{
									pos:  position{line: 476, col: 16, offset: 16085},
									name: "ListParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListParagraphLine",
			pos:  position{line: 480, col: 1, offset: 16177},
			expr: &actionExpr{
				pos: position{line: 480, col: 22, offset: 16198},
				run: (*parser).callonListParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 480, col: 22, offset: 16198},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 480, col: 22, offset: 16198},
							expr: &ruleRefExpr{
								pos:  position{line: 480, col: 23, offset: 16199},
								name: "EOF",
							},
						},
						&notExpr{
							pos: position{line: 481, col: 5, offset: 16207},
							expr: &ruleRefExpr{
								pos:  position{line: 481, col: 6, offset: 16208},
								name: "BlankLine",
							},
						},
						&notExpr{
							pos: position{line: 482, col: 5, offset: 16223},
							expr: &ruleRefExpr{
								pos:  position{line: 482, col: 6, offset: 16224},
								name: "SingleLineComment",
							},
						},
						&notExpr{
							pos: position{line: 483, col: 5, offset: 16246},
							expr: &ruleRefExpr{
								pos:  position{line: 483, col: 6, offset: 16247},
								name: "OrderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 484, col: 5, offset: 16273},
							expr: &ruleRefExpr{
								pos:  position{line: 484, col: 6, offset: 16274},
								name: "UnorderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 485, col: 5, offset: 16302},
							expr: &seqExpr{
								pos: position{line: 485, col: 7, offset: 16304},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 485, col: 7, offset: 16304},
										name: "SimpleLabeledListItemTerm",
									},
									&ruleRefExpr{
										pos:  position{line: 485, col: 33, offset: 16330},
										name: "LabeledListItemSeparator",
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 486, col: 5, offset: 16361},
							expr: &ruleRefExpr{
								pos:  position{line: 486, col: 6, offset: 16362},
								name: "ListItemContinuation",
							},
						},
						&notExpr{
							pos: position{line: 487, col: 5, offset: 16387},
							expr: &ruleRefExpr{
								pos:  position{line: 487, col: 6, offset: 16388},
								name: "ElementAttribute",
							},
						},
						&notExpr{
							pos: position{line: 488, col: 5, offset: 16409},
							expr: &ruleRefExpr{
								pos:  position{line: 488, col: 6, offset: 16410},
								name: "BlockDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 489, col: 5, offset: 16429},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 490, col: 9, offset: 16444},
								run: (*parser).callonListParagraphLine24,
								expr: &seqExpr{
									pos: position{line: 490, col: 9, offset: 16444},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 490, col: 9, offset: 16444},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 490, col: 18, offset: 16453},
												expr: &ruleRefExpr{
													pos:  position{line: 490, col: 19, offset: 16454},
													name: "InlineElement",
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 490, col: 35, offset: 16470},
											label: "linebreak",
											expr: &zeroOrOneExpr{
												pos: position{line: 490, col: 45, offset: 16480},
												expr: &ruleRefExpr{
													pos:  position{line: 490, col: 46, offset: 16481},
													name: "LineBreak",
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 492, col: 12, offset: 16633},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ListItemContinuation",
			pos:  position{line: 496, col: 1, offset: 16680},
			expr: &seqExpr{
				pos: position{line: 496, col: 25, offset: 16704},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 496, col: 25, offset: 16704},
						val:        "+",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 496, col: 29, offset: 16708},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "ContinuedListItemElement",
			pos:  position{line: 498, col: 1, offset: 16715},
			expr: &actionExpr{
				pos: position{line: 498, col: 29, offset: 16743},
				run: (*parser).callonContinuedListItemElement1,
				expr: &seqExpr{
					pos: position{line: 498, col: 29, offset: 16743},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 498, col: 29, offset: 16743},
							label: "blanklines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 498, col: 41, offset: 16755},
								expr: &ruleRefExpr{
									pos:  position{line: 498, col: 41, offset: 16755},
									name: "BlankLine",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 498, col: 53, offset: 16767},
							name: "ListItemContinuation",
						},
						&labeledExpr{
							pos:   position{line: 498, col: 74, offset: 16788},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 498, col: 82, offset: 16796},
								name: "DocumentBlock",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItem",
			pos:  position{line: 505, col: 1, offset: 17038},
			expr: &actionExpr{
				pos: position{line: 505, col: 20, offset: 17057},
				run: (*parser).callonOrderedListItem1,
				expr: &seqExpr{
					pos: position{line: 505, col: 20, offset: 17057},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 505, col: 20, offset: 17057},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 505, col: 31, offset: 17068},
								expr: &ruleRefExpr{
									pos:  position{line: 505, col: 32, offset: 17069},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 505, col: 52, offset: 17089},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 505, col: 60, offset: 17097},
								name: "OrderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 505, col: 83, offset: 17120},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 505, col: 92, offset: 17129},
								name: "OrderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemPrefix",
			pos:  position{line: 509, col: 1, offset: 17269},
			expr: &actionExpr{
				pos: position{line: 510, col: 5, offset: 17299},
				run: (*parser).callonOrderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 510, col: 5, offset: 17299},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 510, col: 5, offset: 17299},
							expr: &ruleRefExpr{
								pos:  position{line: 510, col: 5, offset: 17299},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 510, col: 9, offset: 17303},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 512, col: 9, offset: 17366},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 512, col: 9, offset: 17366},
										run: (*parser).callonOrderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 512, col: 9, offset: 17366},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 512, col: 9, offset: 17366},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 512, col: 16, offset: 17373},
														run: (*parser).callonOrderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 512, col: 16, offset: 17373},
															expr: &litMatcher{
																pos:        position{line: 512, col: 17, offset: 17374},
																val:        ".",
																ignoreCase: false,
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 516, col: 9, offset: 17474},
													run: (*parser).callonOrderedListItemPrefix13,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 535, col: 11, offset: 18191},
										run: (*parser).callonOrderedListItemPrefix14,
										expr: &seqExpr{
											pos: position{line: 535, col: 11, offset: 18191},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 535, col: 11, offset: 18191},
													expr: &charClassMatcher{
														pos:        position{line: 535, col: 12, offset: 18192},
														val:        "[0-9]",
														ranges:     []rune{'0', '9'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 535, col: 20, offset: 18200},
													val:        ".",
													ignoreCase: false,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 537, col: 13, offset: 18311},
										run: (*parser).callonOrderedListItemPrefix19,
										expr: &seqExpr{
											pos: position{line: 537, col: 13, offset: 18311},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 537, col: 14, offset: 18312},
													val:        "[a-z]",
													ranges:     []rune{'a', 'z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 537, col: 21, offset: 18319},
													val:        ".",
													ignoreCase: false,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 539, col: 13, offset: 18433},
										run: (*parser).callonOrderedListItemPrefix23,
										expr: &seqExpr{
											pos: position{line: 539, col: 13, offset: 18433},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 539, col: 14, offset: 18434},
													val:        "[A-Z]",
													ranges:     []rune{'A', 'Z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 539, col: 21, offset: 18441},
													val:        ".",
													ignoreCase: false,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 541, col: 13, offset: 18555},
										run: (*parser).callonOrderedListItemPrefix27,
										expr: &seqExpr{
											pos: position{line: 541, col: 13, offset: 18555},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 541, col: 13, offset: 18555},
													expr: &charClassMatcher{
														pos:        position{line: 541, col: 14, offset: 18556},
														val:        "[a-z]",
														ranges:     []rune{'a', 'z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 541, col: 22, offset: 18564},
													val:        ")",
													ignoreCase: false,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 543, col: 13, offset: 18678},
										run: (*parser).callonOrderedListItemPrefix32,
										expr: &seqExpr{
											pos: position{line: 543, col: 13, offset: 18678},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 543, col: 13, offset: 18678},
													expr: &charClassMatcher{
														pos:        position{line: 543, col: 14, offset: 18679},
														val:        "[A-Z]",
														ranges:     []rune{'A', 'Z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 543, col: 22, offset: 18687},
													val:        ")",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 545, col: 12, offset: 18800},
							expr: &ruleRefExpr{
								pos:  position{line: 545, col: 12, offset: 18800},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemContent",
			pos:  position{line: 549, col: 1, offset: 18832},
			expr: &actionExpr{
				pos: position{line: 549, col: 27, offset: 18858},
				run: (*parser).callonOrderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 549, col: 27, offset: 18858},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 549, col: 37, offset: 18868},
						expr: &ruleRefExpr{
							pos:  position{line: 549, col: 37, offset: 18868},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItem",
			pos:  position{line: 556, col: 1, offset: 19068},
			expr: &actionExpr{
				pos: position{line: 556, col: 22, offset: 19089},
				run: (*parser).callonUnorderedListItem1,
				expr: &seqExpr{
					pos: position{line: 556, col: 22, offset: 19089},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 556, col: 22, offset: 19089},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 556, col: 33, offset: 19100},
								expr: &ruleRefExpr{
									pos:  position{line: 556, col: 34, offset: 19101},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 556, col: 54, offset: 19121},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 556, col: 62, offset: 19129},
								name: "UnorderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 556, col: 87, offset: 19154},
							label: "checkstyle",
							expr: &zeroOrOneExpr{
								pos: position{line: 556, col: 98, offset: 19165},
								expr: &ruleRefExpr{
									pos:  position{line: 556, col: 99, offset: 19166},
									name: "UnorderedListItemCheckStyle",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 556, col: 129, offset: 19196},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 556, col: 138, offset: 19205},
								name: "UnorderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemPrefix",
			pos:  position{line: 560, col: 1, offset: 19363},
			expr: &actionExpr{
				pos: position{line: 561, col: 5, offset: 19395},
				run: (*parser).callonUnorderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 561, col: 5, offset: 19395},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 561, col: 5, offset: 19395},
							expr: &ruleRefExpr{
								pos:  position{line: 561, col: 5, offset: 19395},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 561, col: 9, offset: 19399},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 561, col: 17, offset: 19407},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 563, col: 9, offset: 19464},
										run: (*parser).callonUnorderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 563, col: 9, offset: 19464},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 563, col: 9, offset: 19464},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 563, col: 16, offset: 19471},
														run: (*parser).callonUnorderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 563, col: 16, offset: 19471},
															expr: &litMatcher{
																pos:        position{line: 563, col: 17, offset: 19472},
																val:        "*",
																ignoreCase: false,
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 567, col: 9, offset: 19572},
													run: (*parser).callonUnorderedListItemPrefix13,
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 584, col: 14, offset: 20279},
										label: "depth",
										expr: &actionExpr{
											pos: position{line: 584, col: 21, offset: 20286},
											run: (*parser).callonUnorderedListItemPrefix15,
											expr: &litMatcher{
												pos:        position{line: 584, col: 22, offset: 20287},
												val:        "-",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 586, col: 13, offset: 20373},
							expr: &ruleRefExpr{
								pos:  position{line: 586, col: 13, offset: 20373},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemCheckStyle",
			pos:  position{line: 590, col: 1, offset: 20406},
			expr: &actionExpr{
				pos: position{line: 590, col: 32, offset: 20437},
				run: (*parser).callonUnorderedListItemCheckStyle1,
				expr: &seqExpr{
					pos: position{line: 590, col: 32, offset: 20437},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 590, col: 32, offset: 20437},
							expr: &litMatcher{
								pos:        position{line: 590, col: 33, offset: 20438},
								val:        "[",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 590, col: 37, offset: 20442},
							label: "style",
							expr: &choiceExpr{
								pos: position{line: 591, col: 7, offset: 20456},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 591, col: 7, offset: 20456},
										run: (*parser).callonUnorderedListItemCheckStyle7,
										expr: &litMatcher{
											pos:        position{line: 591, col: 7, offset: 20456},
											val:        "[ ]",
											ignoreCase: false,
										},
									},
									&actionExpr{
										pos: position{line: 592, col: 7, offset: 20501},
										run: (*parser).callonUnorderedListItemCheckStyle9,
										expr: &litMatcher{
											pos:        position{line: 592, col: 7, offset: 20501},
											val:        "[*]",
											ignoreCase: false,
										},
									},
									&actionExpr{
										pos: position{line: 593, col: 7, offset: 20544},
										run: (*parser).callonUnorderedListItemCheckStyle11,
										expr: &litMatcher{
											pos:        position{line: 593, col: 7, offset: 20544},
											val:        "[x]",
											ignoreCase: false,
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 594, col: 7, offset: 20586},
							expr: &ruleRefExpr{
								pos:  position{line: 594, col: 7, offset: 20586},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemContent",
			pos:  position{line: 598, col: 1, offset: 20625},
			expr: &actionExpr{
				pos: position{line: 598, col: 29, offset: 20653},
				run: (*parser).callonUnorderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 598, col: 29, offset: 20653},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 598, col: 39, offset: 20663},
						expr: &ruleRefExpr{
							pos:  position{line: 598, col: 39, offset: 20663},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "LabeledListItem",
			pos:  position{line: 605, col: 1, offset: 20979},
			expr: &actionExpr{
				pos: position{line: 605, col: 20, offset: 20998},
				run: (*parser).callonLabeledListItem1,
				expr: &seqExpr{
					pos: position{line: 605, col: 20, offset: 20998},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 605, col: 20, offset: 20998},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 605, col: 31, offset: 21009},
								expr: &ruleRefExpr{
									pos:  position{line: 605, col: 32, offset: 21010},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 605, col: 52, offset: 21030},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 605, col: 58, offset: 21036},
								name: "SimpleLabeledListItemTerm",
							},
						},
						&labeledExpr{
							pos:   position{line: 605, col: 85, offset: 21063},
							label: "separator",
							expr: &ruleRefExpr{
								pos:  position{line: 605, col: 96, offset: 21074},
								name: "LabeledListItemSeparator",
							},
						},
						&labeledExpr{
							pos:   position{line: 605, col: 122, offset: 21100},
							label: "description",
							expr: &zeroOrOneExpr{
								pos: position{line: 605, col: 134, offset: 21112},
								expr: &ruleRefExpr{
									pos:  position{line: 605, col: 135, offset: 21113},
									name: "LabeledListItemDescription",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SimpleLabeledListItemTerm",
			pos:  position{line: 609, col: 1, offset: 21259},
			expr: &actionExpr{
				pos: position{line: 609, col: 30, offset: 21288},
				run: (*parser).callonSimpleLabeledListItemTerm1,
				expr: &labeledExpr{
					pos:   position{line: 609, col: 30, offset: 21288},
					label: "content",
					expr: &actionExpr{
						pos: position{line: 609, col: 39, offset: 21297},
						run: (*parser).callonSimpleLabeledListItemTerm3,
						expr: &oneOrMoreExpr{
							pos: position{line: 609, col: 39, offset: 21297},
							expr: &choiceExpr{
								pos: position{line: 609, col: 40, offset: 21298},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 609, col: 40, offset: 21298},
										name: "Alphanums",
									},
									&ruleRefExpr{
										pos:  position{line: 609, col: 52, offset: 21310},
										name: "Spaces",
									},
									&seqExpr{
										pos: position{line: 609, col: 62, offset: 21320},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 609, col: 62, offset: 21320},
												expr: &ruleRefExpr{
													pos:  position{line: 609, col: 63, offset: 21321},
													name: "NEWLINE",
												},
											},
											&notExpr{
												pos: position{line: 609, col: 71, offset: 21329},
												expr: &ruleRefExpr{
													pos:  position{line: 609, col: 72, offset: 21330},
													name: "LabeledListItemSeparator",
												},
											},
											&anyMatcher{
												line: 609, col: 97, offset: 21355,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTerm",
			pos:  position{line: 615, col: 1, offset: 21484},
			expr: &actionExpr{
				pos: position{line: 615, col: 24, offset: 21507},
				run: (*parser).callonLabeledListItemTerm1,
				expr: &labeledExpr{
					pos:   position{line: 615, col: 24, offset: 21507},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 615, col: 33, offset: 21516},
						expr: &seqExpr{
							pos: position{line: 615, col: 34, offset: 21517},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 615, col: 34, offset: 21517},
									expr: &ruleRefExpr{
										pos:  position{line: 615, col: 35, offset: 21518},
										name: "NEWLINE",
									},
								},
								&notExpr{
									pos: position{line: 615, col: 43, offset: 21526},
									expr: &ruleRefExpr{
										pos:  position{line: 615, col: 44, offset: 21527},
										name: "LabeledListItemSeparator",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 615, col: 69, offset: 21552},
									name: "LabeledListItemTermElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTermElement",
			pos:  position{line: 619, col: 1, offset: 21687},
			expr: &actionExpr{
				pos: position{line: 619, col: 31, offset: 21717},
				run: (*parser).callonLabeledListItemTermElement1,
				expr: &labeledExpr{
					pos:   position{line: 619, col: 31, offset: 21717},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 619, col: 40, offset: 21726},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 619, col: 40, offset: 21726},
								name: "SimpleWord",
							},
							&ruleRefExpr{
								pos:  position{line: 620, col: 11, offset: 21747},
								name: "Spaces",
							},
							&ruleRefExpr{
								pos:  position{line: 621, col: 11, offset: 21765},
								name: "CrossReference",
							},
							&ruleRefExpr{
								pos:  position{line: 622, col: 11, offset: 21790},
								name: "Passthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 623, col: 11, offset: 21812},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 624, col: 11, offset: 21835},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 625, col: 11, offset: 21850},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 626, col: 11, offset: 21875},
								name: "QuotedText",
							},
							&ruleRefExpr{
								pos:  position{line: 627, col: 11, offset: 21896},
								name: "DocumentAttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 628, col: 11, offset: 21936},
								name: "LineBreak",
							},
							&ruleRefExpr{
								pos:  position{line: 629, col: 11, offset: 21956},
								name: "OtherWord",
							},
							&ruleRefExpr{
								pos:  position{line: 630, col: 11, offset: 21976},
								name: "Parenthesis",
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemSeparator",
			pos:  position{line: 634, col: 1, offset: 22018},
			expr: &actionExpr{
				pos: position{line: 635, col: 5, offset: 22051},
				run: (*parser).callonLabeledListItemSeparator1,
				expr: &seqExpr{
					pos: position{line: 635, col: 5, offset: 22051},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 635, col: 5, offset: 22051},
							label: "separator",
							expr: &actionExpr{
								pos: position{line: 635, col: 16, offset: 22062},
								run: (*parser).callonLabeledListItemSeparator4,
								expr: &oneOrMoreExpr{
									pos: position{line: 635, col: 16, offset: 22062},
									expr: &litMatcher{
										pos:        position{line: 635, col: 17, offset: 22063},
										val:        ":",
										ignoreCase: false,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 638, col: 5, offset: 22121},
							run: (*parser).callonLabeledListItemSeparator7,
						},
						&choiceExpr{
							pos: position{line: 642, col: 6, offset: 22297},
							alternatives: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 642, col: 6, offset: 22297},
									expr: &choiceExpr{
										pos: position{line: 642, col: 7, offset: 22298},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 642, col: 7, offset: 22298},
												name: "WS",
											},
											&ruleRefExpr{
												pos:  position{line: 642, col: 12, offset: 22303},
												name: "NEWLINE",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 642, col: 24, offset: 22315},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemDescription",
			pos:  position{line: 646, col: 1, offset: 22355},
			expr: &actionExpr{
				pos: position{line: 646, col: 31, offset: 22385},
				run: (*parser).callonLabeledListItemDescription1,
				expr: &labeledExpr{
					pos:   position{line: 646, col: 31, offset: 22385},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 646, col: 40, offset: 22394},
						expr: &ruleRefExpr{
							pos:  position{line: 646, col: 41, offset: 22395},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionKind",
			pos:  position{line: 653, col: 1, offset: 22586},
			expr: &choiceExpr{
				pos: position{line: 653, col: 19, offset: 22604},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 653, col: 19, offset: 22604},
						run: (*parser).callonAdmonitionKind2,
						expr: &litMatcher{
							pos:        position{line: 653, col: 19, offset: 22604},
							val:        "TIP",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 655, col: 9, offset: 22650},
						run: (*parser).callonAdmonitionKind4,
						expr: &litMatcher{
							pos:        position{line: 655, col: 9, offset: 22650},
							val:        "NOTE",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 657, col: 9, offset: 22698},
						run: (*parser).callonAdmonitionKind6,
						expr: &litMatcher{
							pos:        position{line: 657, col: 9, offset: 22698},
							val:        "IMPORTANT",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 659, col: 9, offset: 22756},
						run: (*parser).callonAdmonitionKind8,
						expr: &litMatcher{
							pos:        position{line: 659, col: 9, offset: 22756},
							val:        "WARNING",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 661, col: 9, offset: 22810},
						run: (*parser).callonAdmonitionKind10,
						expr: &litMatcher{
							pos:        position{line: 661, col: 9, offset: 22810},
							val:        "CAUTION",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Paragraph",
			pos:  position{line: 670, col: 1, offset: 23117},
			expr: &choiceExpr{
				pos: position{line: 672, col: 5, offset: 23164},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 672, col: 5, offset: 23164},
						run: (*parser).callonParagraph2,
						expr: &seqExpr{
							pos: position{line: 672, col: 5, offset: 23164},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 672, col: 5, offset: 23164},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 672, col: 16, offset: 23175},
										expr: &ruleRefExpr{
											pos:  position{line: 672, col: 17, offset: 23176},
											name: "ElementAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 672, col: 37, offset: 23196},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 672, col: 40, offset: 23199},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 672, col: 56, offset: 23215},
									val:        ": ",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 672, col: 61, offset: 23220},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 672, col: 67, offset: 23226},
										expr: &ruleRefExpr{
											pos:  position{line: 672, col: 68, offset: 23227},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 676, col: 5, offset: 23419},
						run: (*parser).callonParagraph13,
						expr: &seqExpr{
							pos: position{line: 676, col: 5, offset: 23419},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 676, col: 5, offset: 23419},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 676, col: 16, offset: 23430},
										expr: &ruleRefExpr{
											pos:  position{line: 676, col: 17, offset: 23431},
											name: "ElementAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 676, col: 37, offset: 23451},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 676, col: 43, offset: 23457},
										expr: &ruleRefExpr{
											pos:  position{line: 676, col: 44, offset: 23458},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SimpleParagraph",
			pos:  position{line: 681, col: 1, offset: 23623},
			expr: &actionExpr{
				pos: position{line: 681, col: 20, offset: 23642},
				run: (*parser).callonSimpleParagraph1,
				expr: &seqExpr{
					pos: position{line: 681, col: 20, offset: 23642},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 681, col: 20, offset: 23642},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 681, col: 31, offset: 23653},
								expr: &ruleRefExpr{
									pos:  position{line: 681, col: 32, offset: 23654},
									name: "ElementAttributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 682, col: 5, offset: 23679},
							run: (*parser).callonSimpleParagraph6,
						},
						&labeledExpr{
							pos:   position{line: 690, col: 5, offset: 23970},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 690, col: 16, offset: 23981},
								name: "FirstParagraphLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 691, col: 5, offset: 24004},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 691, col: 16, offset: 24015},
								expr: &ruleRefExpr{
									pos:  position{line: 691, col: 17, offset: 24016},
									name: "OtherParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphLines",
			pos:  position{line: 695, col: 1, offset: 24150},
			expr: &actionExpr{
				pos: position{line: 695, col: 19, offset: 24168},
				run: (*parser).callonParagraphLines1,
				expr: &seqExpr{
					pos: position{line: 695, col: 19, offset: 24168},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 695, col: 19, offset: 24168},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 695, col: 30, offset: 24179},
								name: "FirstParagraphLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 695, col: 50, offset: 24199},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 695, col: 61, offset: 24210},
								expr: &ruleRefExpr{
									pos:  position{line: 695, col: 62, offset: 24211},
									name: "OtherParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FirstParagraphLine",
			pos:  position{line: 699, col: 1, offset: 24317},
			expr: &actionExpr{
				pos: position{line: 699, col: 23, offset: 24339},
				run: (*parser).callonFirstParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 699, col: 23, offset: 24339},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 699, col: 23, offset: 24339},
							expr: &seqExpr{
								pos: position{line: 699, col: 25, offset: 24341},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 699, col: 25, offset: 24341},
										name: "SimpleLabeledListItemTerm",
									},
									&ruleRefExpr{
										pos:  position{line: 699, col: 51, offset: 24367},
										name: "LabeledListItemSeparator",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 700, col: 5, offset: 24397},
							label: "elements",
							expr: &seqExpr{
								pos: position{line: 700, col: 15, offset: 24407},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 700, col: 15, offset: 24407},
										name: "SimpleWord",
									},
									&zeroOrMoreExpr{
										pos: position{line: 700, col: 26, offset: 24418},
										expr: &ruleRefExpr{
											pos:  position{line: 700, col: 26, offset: 24418},
											name: "InlineElement",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 700, col: 42, offset: 24434},
							label: "linebreak",
							expr: &zeroOrOneExpr{
								pos: position{line: 700, col: 52, offset: 24444},
								expr: &ruleRefExpr{
									pos:  position{line: 700, col: 53, offset: 24445},
									name: "LineBreak",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 700, col: 65, offset: 24457},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "OtherParagraphLine",
			pos:  position{line: 704, col: 1, offset: 24547},
			expr: &actionExpr{
				pos: position{line: 704, col: 23, offset: 24569},
				run: (*parser).callonOtherParagraphLine1,
				expr: &labeledExpr{
					pos:   position{line: 704, col: 23, offset: 24569},
					label: "elements",
					expr: &ruleRefExpr{
						pos:  position{line: 704, col: 33, offset: 24579},
						name: "InlineElements",
					},
				},
			},
		},
		{
			name: "VerseParagraph",
			pos:  position{line: 708, col: 1, offset: 24625},
			expr: &choiceExpr{
				pos: position{line: 710, col: 5, offset: 24677},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 710, col: 5, offset: 24677},
						run: (*parser).callonVerseParagraph2,
						expr: &seqExpr{
							pos: position{line: 710, col: 5, offset: 24677},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 710, col: 5, offset: 24677},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 710, col: 16, offset: 24688},
										expr: &ruleRefExpr{
											pos:  position{line: 710, col: 17, offset: 24689},
											name: "ElementAttributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 711, col: 5, offset: 24713},
									run: (*parser).callonVerseParagraph7,
								},
								&labeledExpr{
									pos:   position{line: 718, col: 5, offset: 24925},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 718, col: 8, offset: 24928},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 718, col: 24, offset: 24944},
									val:        ": ",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 718, col: 29, offset: 24949},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 718, col: 35, offset: 24955},
										expr: &ruleRefExpr{
											pos:  position{line: 718, col: 36, offset: 24956},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 722, col: 5, offset: 25148},
						run: (*parser).callonVerseParagraph14,
						expr: &seqExpr{
							pos: position{line: 722, col: 5, offset: 25148},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 722, col: 5, offset: 25148},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 722, col: 16, offset: 25159},
										expr: &ruleRefExpr{
											pos:  position{line: 722, col: 17, offset: 25160},
											name: "ElementAttributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 723, col: 5, offset: 25184},
									run: (*parser).callonVerseParagraph19,
								},
								&labeledExpr{
									pos:   position{line: 730, col: 5, offset: 25396},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 730, col: 11, offset: 25402},
										expr: &ruleRefExpr{
											pos:  position{line: 730, col: 12, offset: 25403},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElements",
			pos:  position{line: 734, col: 1, offset: 25504},
			expr: &actionExpr{
				pos: position{line: 734, col: 19, offset: 25522},
				run: (*parser).callonInlineElements1,
				expr: &seqExpr{
					pos: position{line: 734, col: 19, offset: 25522},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 734, col: 19, offset: 25522},
							expr: &ruleRefExpr{
								pos:  position{line: 734, col: 20, offset: 25523},
								name: "EOF",
							},
						},
						&notExpr{
							pos: position{line: 734, col: 24, offset: 25527},
							expr: &ruleRefExpr{
								pos:  position{line: 734, col: 25, offset: 25528},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 735, col: 5, offset: 25542},
							label: "elements",
							expr: &choiceExpr{
								pos: position{line: 735, col: 15, offset: 25552},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 735, col: 15, offset: 25552},
										run: (*parser).callonInlineElements9,
										expr: &labeledExpr{
											pos:   position{line: 735, col: 15, offset: 25552},
											label: "comment",
											expr: &ruleRefExpr{
												pos:  position{line: 735, col: 24, offset: 25561},
												name: "SingleLineComment",
											},
										},
									},
									&actionExpr{
										pos: position{line: 737, col: 9, offset: 25653},
										run: (*parser).callonInlineElements12,
										expr: &seqExpr{
											pos: position{line: 737, col: 9, offset: 25653},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 737, col: 9, offset: 25653},
													expr: &ruleRefExpr{
														pos:  position{line: 737, col: 10, offset: 25654},
														name: "BlockDelimiter",
													},
												},
												&labeledExpr{
													pos:   position{line: 737, col: 25, offset: 25669},
													label: "elements",
													expr: &oneOrMoreExpr{
														pos: position{line: 737, col: 34, offset: 25678},
														expr: &ruleRefExpr{
															pos:  position{line: 737, col: 35, offset: 25679},
															name: "InlineElement",
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 737, col: 51, offset: 25695},
													label: "linebreak",
													expr: &zeroOrOneExpr{
														pos: position{line: 737, col: 61, offset: 25705},
														expr: &ruleRefExpr{
															pos:  position{line: 737, col: 62, offset: 25706},
															name: "LineBreak",
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 737, col: 74, offset: 25718},
													name: "EOL",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElement",
			pos:  position{line: 743, col: 1, offset: 25854},
			expr: &actionExpr{
				pos: position{line: 743, col: 18, offset: 25871},
				run: (*parser).callonInlineElement1,
				expr: &seqExpr{
					pos: position{line: 743, col: 18, offset: 25871},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 743, col: 18, offset: 25871},
							expr: &ruleRefExpr{
								pos:  position{line: 743, col: 19, offset: 25872},
								name: "EOL",
							},
						},
						&notExpr{
							pos: position{line: 743, col: 23, offset: 25876},
							expr: &ruleRefExpr{
								pos:  position{line: 743, col: 24, offset: 25877},
								name: "LineBreak",
							},
						},
						&labeledExpr{
							pos:   position{line: 744, col: 5, offset: 25892},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 744, col: 14, offset: 25901},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 744, col: 14, offset: 25901},
										name: "SimpleWord",
									},
									&ruleRefExpr{
										pos:  position{line: 745, col: 11, offset: 25922},
										name: "Spaces",
									},
									&ruleRefExpr{
										pos:  position{line: 746, col: 11, offset: 25940},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 747, col: 11, offset: 25963},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 748, col: 11, offset: 25979},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 749, col: 11, offset: 26002},
										name: "InlineFootnote",
									},
									&ruleRefExpr{
										pos:  position{line: 750, col: 11, offset: 26028},
										name: "QuotedText",
									},
									&ruleRefExpr{
										pos:  position{line: 751, col: 11, offset: 26050},
										name: "CrossReference",
									},
									&ruleRefExpr{
										pos:  position{line: 752, col: 11, offset: 26076},
										name: "InlineUserMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 753, col: 11, offset: 26103},
										name: "DocumentAttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 754, col: 11, offset: 26144},
										name: "InlineElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 755, col: 11, offset: 26171},
										name: "OtherWord",
									},
									&ruleRefExpr{
										pos:  position{line: 756, col: 11, offset: 26191},
										name: "ConceleadIndexTerm",
									},
									&ruleRefExpr{
										pos:  position{line: 757, col: 11, offset: 26220},
										name: "Parenthesis",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElementsWithoutSubtitution",
			pos:  position{line: 765, col: 1, offset: 26483},
			expr: &actionExpr{
				pos: position{line: 765, col: 37, offset: 26519},
				run: (*parser).callonInlineElementsWithoutSubtitution1,
				expr: &seqExpr{
					pos: position{line: 765, col: 37, offset: 26519},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 765, col: 37, offset: 26519},
							expr: &ruleRefExpr{
								pos:  position{line: 765, col: 38, offset: 26520},
								name: "BlankLine",
							},
						},
						&notExpr{
							pos: position{line: 765, col: 48, offset: 26530},
							expr: &ruleRefExpr{
								pos:  position{line: 765, col: 49, offset: 26531},
								name: "BlockDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 765, col: 64, offset: 26546},
							label: "elements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 765, col: 73, offset: 26555},
								expr: &ruleRefExpr{
									pos:  position{line: 765, col: 74, offset: 26556},
									name: "InlineElementWithoutSubtitution",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 765, col: 108, offset: 26590},
							label: "linebreak",
							expr: &zeroOrOneExpr{
								pos: position{line: 765, col: 118, offset: 26600},
								expr: &ruleRefExpr{
									pos:  position{line: 765, col: 119, offset: 26601},
									name: "LineBreak",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 765, col: 131, offset: 26613},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "InlineElementWithoutSubtitution",
			pos:  position{line: 769, col: 1, offset: 26704},
			expr: &actionExpr{
				pos: position{line: 769, col: 36, offset: 26739},
				run: (*parser).callonInlineElementWithoutSubtitution1,
				expr: &seqExpr{
					pos: position{line: 769, col: 36, offset: 26739},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 769, col: 36, offset: 26739},
							expr: &ruleRefExpr{
								pos:  position{line: 769, col: 37, offset: 26740},
								name: "EOL",
							},
						},
						&notExpr{
							pos: position{line: 769, col: 41, offset: 26744},
							expr: &ruleRefExpr{
								pos:  position{line: 769, col: 42, offset: 26745},
								name: "LineBreak",
							},
						},
						&labeledExpr{
							pos:   position{line: 770, col: 5, offset: 26760},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 770, col: 14, offset: 26769},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 770, col: 14, offset: 26769},
										name: "SimpleWord",
									},
									&ruleRefExpr{
										pos:  position{line: 771, col: 11, offset: 26790},
										name: "Spaces",
									},
									&ruleRefExpr{
										pos:  position{line: 772, col: 11, offset: 26808},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 773, col: 11, offset: 26831},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 774, col: 11, offset: 26847},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 775, col: 11, offset: 26870},
										name: "QuotedText",
									},
									&ruleRefExpr{
										pos:  position{line: 776, col: 11, offset: 26892},
										name: "CrossReference",
									},
									&ruleRefExpr{
										pos:  position{line: 777, col: 11, offset: 26918},
										name: "InlineElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 778, col: 11, offset: 26944},
										name: "OtherWord",
									},
									&ruleRefExpr{
										pos:  position{line: 779, col: 11, offset: 26964},
										name: "Parenthesis",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerbatimParagraph",
			pos:  position{line: 783, col: 1, offset: 27006},
			expr: &actionExpr{
				pos: position{line: 783, col: 22, offset: 27027},
				run: (*parser).callonVerbatimParagraph1,
				expr: &seqExpr{
					pos: position{line: 783, col: 22, offset: 27027},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 783, col: 22, offset: 27027},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 783, col: 33, offset: 27038},
								expr: &ruleRefExpr{
									pos:  position{line: 783, col: 34, offset: 27039},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 783, col: 54, offset: 27059},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 783, col: 60, offset: 27065},
								expr: &actionExpr{
									pos: position{line: 783, col: 61, offset: 27066},
									run: (*parser).callonVerbatimParagraph8,
									expr: &seqExpr{
										pos: position{line: 783, col: 61, offset: 27066},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 783, col: 61, offset: 27066},
												expr: &ruleRefExpr{
													pos:  position{line: 783, col: 62, offset: 27067},
													name: "EOF",
												},
											},
											&labeledExpr{
												pos:   position{line: 783, col: 66, offset: 27071},
												label: "line",
												expr: &ruleRefExpr{
													pos:  position{line: 783, col: 72, offset: 27077},
													name: "VerbatimParagraphLine",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerbatimParagraphLine",
			pos:  position{line: 789, col: 1, offset: 27197},
			expr: &actionExpr{
				pos: position{line: 789, col: 26, offset: 27222},
				run: (*parser).callonVerbatimParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 789, col: 26, offset: 27222},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 789, col: 26, offset: 27222},
							expr: &ruleRefExpr{
								pos:  position{line: 789, col: 27, offset: 27223},
								name: "BlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 789, col: 42, offset: 27238},
							expr: &ruleRefExpr{
								pos:  position{line: 789, col: 43, offset: 27239},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 789, col: 53, offset: 27249},
							label: "elements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 789, col: 62, offset: 27258},
								expr: &ruleRefExpr{
									pos:  position{line: 789, col: 63, offset: 27259},
									name: "VerbatimParagraphLineElement",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 789, col: 94, offset: 27290},
							label: "linebreak",
							expr: &zeroOrOneExpr{
								pos: position{line: 789, col: 104, offset: 27300},
								expr: &ruleRefExpr{
									pos:  position{line: 789, col: 105, offset: 27301},
									name: "LineBreak",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 789, col: 117, offset: 27313},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "VerbatimParagraphLineElement",
			pos:  position{line: 793, col: 1, offset: 27404},
			expr: &actionExpr{
				pos: position{line: 793, col: 33, offset: 27436},
				run: (*parser).callonVerbatimParagraphLineElement1,
				expr: &oneOrMoreExpr{
					pos: position{line: 793, col: 33, offset: 27436},
					expr: &seqExpr{
						pos: position{line: 793, col: 34, offset: 27437},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 793, col: 34, offset: 27437},
								expr: &ruleRefExpr{
									pos:  position{line: 793, col: 35, offset: 27438},
									name: "EOL",
								},
							},
							&notExpr{
								pos: position{line: 793, col: 39, offset: 27442},
								expr: &ruleRefExpr{
									pos:  position{line: 793, col: 40, offset: 27443},
									name: "LineBreak",
								},
							},
							&anyMatcher{
								line: 793, col: 50, offset: 27453,
							},
						},
					},
				},
			},
		},
		{
			name: "LineBreak",
			pos:  position{line: 800, col: 1, offset: 27677},
			expr: &actionExpr{
				pos: position{line: 800, col: 14, offset: 27690},
				run: (*parser).callonLineBreak1,
				expr: &seqExpr{
					pos: position{line: 800, col: 14, offset: 27690},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 800, col: 14, offset: 27690},
							name: "WS",
						},
						&litMatcher{
							pos:        position{line: 800, col: 17, offset: 27693},
							val:        "+",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 800, col: 21, offset: 27697},
							expr: &ruleRefExpr{
								pos:  position{line: 800, col: 21, offset: 27697},
								name: "WS",
							},
						},
						&andExpr{
							pos: position{line: 800, col: 25, offset: 27701},
							expr: &ruleRefExpr{
								pos:  position{line: 800, col: 26, offset: 27702},
								name: "EOL",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedText",
			pos:  position{line: 807, col: 1, offset: 27986},
			expr: &actionExpr{
				pos: position{line: 807, col: 15, offset: 28000},
				run: (*parser).callonQuotedText1,
				expr: &seqExpr{
					pos: position{line: 807, col: 15, offset: 28000},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 807, col: 15, offset: 28000},
							expr: &ruleRefExpr{
								pos:  position{line: 807, col: 16, offset: 28001},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 807, col: 19, offset: 28004},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 807, col: 25, offset: 28010},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 807, col: 25, offset: 28010},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 808, col: 15, offset: 28034},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 809, col: 15, offset: 28060},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 810, col: 15, offset: 28089},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 811, col: 15, offset: 28118},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 812, col: 15, offset: 28149},
										name: "EscapedBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 813, col: 15, offset: 28180},
										name: "EscapedItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 814, col: 15, offset: 28213},
										name: "EscapedMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 815, col: 15, offset: 28249},
										name: "EscapedSubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 816, col: 15, offset: 28285},
										name: "EscapedSuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 817, col: 15, offset: 28322},
										name: "SubscriptOrSuperscriptPrefix",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextPrefix",
			pos:  position{line: 821, col: 1, offset: 28476},
			expr: &choiceExpr{
				pos: position{line: 821, col: 21, offset: 28496},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 821, col: 21, offset: 28496},
						val:        "**",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 821, col: 28, offset: 28503},
						val:        "*",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 821, col: 34, offset: 28509},
						val:        "__",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 821, col: 41, offset: 28516},
						val:        "_",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 821, col: 47, offset: 28522},
						val:        "``",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 821, col: 54, offset: 28529},
						val:        "`",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 821, col: 60, offset: 28535},
						val:        "^",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 821, col: 66, offset: 28541},
						val:        "~",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "SubscriptOrSuperscriptPrefix",
			pos:  position{line: 823, col: 1, offset: 28546},
			expr: &choiceExpr{
				pos: position{line: 823, col: 33, offset: 28578},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 823, col: 33, offset: 28578},
						val:        "^",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 823, col: 39, offset: 28584},
						run: (*parser).callonSubscriptOrSuperscriptPrefix3,
						expr: &litMatcher{
							pos:        position{line: 823, col: 39, offset: 28584},
							val:        "~",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "OneOrMoreBackslashes",
			pos:  position{line: 827, col: 1, offset: 28717},
			expr: &actionExpr{
				pos: position{line: 827, col: 25, offset: 28741},
				run: (*parser).callonOneOrMoreBackslashes1,
				expr: &oneOrMoreExpr{
					pos: position{line: 827, col: 25, offset: 28741},
					expr: &litMatcher{
						pos:        position{line: 827, col: 25, offset: 28741},
						val:        "\\",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "TwoOrMoreBackslashes",
			pos:  position{line: 831, col: 1, offset: 28782},
			expr: &actionExpr{
				pos: position{line: 831, col: 25, offset: 28806},
				run: (*parser).callonTwoOrMoreBackslashes1,
				expr: &seqExpr{
					pos: position{line: 831, col: 25, offset: 28806},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 831, col: 25, offset: 28806},
							val:        "\\\\",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 831, col: 30, offset: 28811},
							expr: &litMatcher{
								pos:        position{line: 831, col: 30, offset: 28811},
								val:        "\\",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "BoldText",
			pos:  position{line: 839, col: 1, offset: 28908},
			expr: &choiceExpr{
				pos: position{line: 839, col: 13, offset: 28920},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 839, col: 13, offset: 28920},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 839, col: 35, offset: 28942},
						name: "SingleQuoteBoldText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldText",
			pos:  position{line: 841, col: 1, offset: 28963},
			expr: &actionExpr{
				pos: position{line: 841, col: 24, offset: 28986},
				run: (*parser).callonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 841, col: 24, offset: 28986},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 841, col: 24, offset: 28986},
							expr: &litMatcher{
								pos:        position{line: 841, col: 25, offset: 28987},
								val:        "\\\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 841, col: 30, offset: 28992},
							val:        "**",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 841, col: 35, offset: 28997},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 841, col: 45, offset: 29007},
								name: "DoubleQuoteBoldTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 841, col: 74, offset: 29036},
							val:        "**",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElements",
			pos:  position{line: 845, col: 1, offset: 29162},
			expr: &seqExpr{
				pos: position{line: 845, col: 32, offset: 29193},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 845, col: 32, offset: 29193},
						name: "DoubleQuoteBoldTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 845, col: 59, offset: 29220},
						expr: &seqExpr{
							pos: position{line: 845, col: 60, offset: 29221},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 845, col: 60, offset: 29221},
									expr: &litMatcher{
										pos:        position{line: 845, col: 62, offset: 29223},
										val:        "**",
										ignoreCase: false,
									},
								},
								&choiceExpr{
									pos: position{line: 845, col: 69, offset: 29230},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 845, col: 69, offset: 29230},
											name: "WS",
										},
										&ruleRefExpr{
											pos:  position{line: 845, col: 74, offset: 29235},
											name: "DoubleQuoteBoldTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElement",
			pos:  position{line: 847, col: 1, offset: 29300},
			expr: &actionExpr{
				pos: position{line: 847, col: 31, offset: 29330},
				run: (*parser).callonDoubleQuoteBoldTextElement1,
				expr: &seqExpr{
					pos: position{line: 847, col: 31, offset: 29330},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 847, col: 31, offset: 29330},
							expr: &ruleRefExpr{
								pos:  position{line: 847, col: 32, offset: 29331},
								name: "NEWLINE",
							},
						},
						&labeledExpr{
							pos:   position{line: 847, col: 40, offset: 29339},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 847, col: 49, offset: 29348},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 847, col: 49, offset: 29348},
										name: "SingleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 848, col: 11, offset: 29379},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 849, col: 11, offset: 29401},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 850, col: 11, offset: 29425},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 851, col: 11, offset: 29449},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 852, col: 11, offset: 29475},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 853, col: 11, offset: 29498},
										name: "QuotedLink",
									},
									&ruleRefExpr{
										pos:  position{line: 854, col: 11, offset: 29520},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 855, col: 11, offset: 29543},
										name: "DocumentAttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 856, col: 11, offset: 29583},
										name: "NonDoubleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 857, col: 11, offset: 29616},
										name: "Parenthesis",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonDoubleQuoteBoldText",
			pos:  position{line: 861, col: 1, offset: 29761},
			expr: &actionExpr{
				pos: position{line: 861, col: 27, offset: 29787},
				run: (*parser).callonNonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 861, col: 27, offset: 29787},
					exprs: []interface{}{
						&anyMatcher{
							line: 861, col: 28, offset: 29788,
						},
						&zeroOrMoreExpr{
							pos: position{line: 861, col: 31, offset: 29791},
							expr: &seqExpr{
								pos: position{line: 861, col: 32, offset: 29792},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 861, col: 32, offset: 29792},
										expr: &litMatcher{
											pos:        position{line: 861, col: 33, offset: 29793},
											val:        "**",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 861, col: 38, offset: 29798},
										expr: &ruleRefExpr{
											pos:  position{line: 861, col: 39, offset: 29799},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 861, col: 42, offset: 29802},
										expr: &litMatcher{
											pos:        position{line: 861, col: 43, offset: 29803},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 861, col: 47, offset: 29807},
										expr: &litMatcher{
											pos:        position{line: 861, col: 48, offset: 29808},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 861, col: 52, offset: 29812},
										expr: &ruleRefExpr{
											pos:  position{line: 861, col: 53, offset: 29813},
											name: "NEWLINE",
										},
									},
									&notExpr{
										pos: position{line: 861, col: 61, offset: 29821},
										expr: &ruleRefExpr{
											pos:  position{line: 861, col: 62, offset: 29822},
											name: "Parenthesis",
										},
									},
									&anyMatcher{
										line: 861, col: 74, offset: 29834,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldText",
			pos:  position{line: 865, col: 1, offset: 29894},
			expr: &choiceExpr{
				pos: position{line: 865, col: 24, offset: 29917},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 865, col: 24, offset: 29917},
						run: (*parser).callonSingleQuoteBoldText2,
						expr: &seqExpr{
							pos: position{line: 865, col: 24, offset: 29917},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 865, col: 24, offset: 29917},
									expr: &litMatcher{
										pos:        position{line: 865, col: 25, offset: 29918},
										val:        "\\",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 865, col: 29, offset: 29922},
									val:        "*",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 865, col: 33, offset: 29926},
									expr: &litMatcher{
										pos:        position{line: 865, col: 34, offset: 29927},
										val:        "*",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 865, col: 38, offset: 29931},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 865, col: 48, offset: 29941},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 865, col: 77, offset: 29970},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 867, col: 5, offset: 30151},
						run: (*parser).callonSingleQuoteBoldText12,
						expr: &seqExpr{
							pos: position{line: 867, col: 5, offset: 30151},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 867, col: 5, offset: 30151},
									expr: &litMatcher{
										pos:        position{line: 867, col: 6, offset: 30152},
										val:        "\\\\",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 867, col: 11, offset: 30157},
									val:        "*",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 867, col: 15, offset: 30161},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 867, col: 25, offset: 30171},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 867, col: 25, offset: 30171},
												val:        "*",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 867, col: 29, offset: 30175},
												name: "SingleQuoteBoldTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 867, col: 58, offset: 30204},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElements",
			pos:  position{line: 871, col: 1, offset: 30403},
			expr: &seqExpr{
				pos: position{line: 871, col: 32, offset: 30434},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 871, col: 32, offset: 30434},
						expr: &ruleRefExpr{
							pos:  position{line: 871, col: 33, offset: 30435},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 871, col: 36, offset: 30438},
						name: "SingleQuoteBoldTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 871, col: 63, offset: 30465},
						expr: &seqExpr{
							pos: position{line: 871, col: 64, offset: 30466},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 871, col: 64, offset: 30466},
									expr: &seqExpr{
										pos: position{line: 871, col: 66, offset: 30468},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 871, col: 66, offset: 30468},
												val:        "*",
												ignoreCase: false,
											},
											&notExpr{
												pos: position{line: 871, col: 70, offset: 30472},
												expr: &ruleRefExpr{
													pos:  position{line: 871, col: 71, offset: 30473},
													name: "Alphanum",
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 871, col: 81, offset: 30483},
									expr: &ruleRefExpr{
										pos:  position{line: 871, col: 81, offset: 30483},
										name: "WS",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 871, col: 85, offset: 30487},
									name: "SingleQuoteBoldTextElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElement",
			pos:  position{line: 873, col: 1, offset: 30518},
			expr: &actionExpr{
				pos: position{line: 873, col: 31, offset: 30548},
				run: (*parser).callonSingleQuoteBoldTextElement1,
				expr: &seqExpr{
					pos: position{line: 873, col: 31, offset: 30548},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 873, col: 31, offset: 30548},
							expr: &ruleRefExpr{
								pos:  position{line: 873, col: 32, offset: 30549},
								name: "NEWLINE",
							},
						},
						&labeledExpr{
							pos:   position{line: 873, col: 40, offset: 30557},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 873, col: 49, offset: 30566},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 873, col: 49, offset: 30566},
										name: "DoubleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 874, col: 11, offset: 30596},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 875, col: 11, offset: 30618},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 876, col: 11, offset: 30642},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 877, col: 11, offset: 30666},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 878, col: 11, offset: 30692},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 879, col: 11, offset: 30715},
										name: "QuotedLink",
									},
									&ruleRefExpr{
										pos:  position{line: 880, col: 11, offset: 30737},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 881, col: 11, offset: 30760},
										name: "DocumentAttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 882, col: 11, offset: 30800},
										name: "NonSingleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 883, col: 11, offset: 30833},
										name: "Parenthesis",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonSingleQuoteBoldText",
			pos:  position{line: 887, col: 1, offset: 30978},
			expr: &actionExpr{
				pos: position{line: 887, col: 27, offset: 31004},
				run: (*parser).callonNonSingleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 887, col: 27, offset: 31004},
					exprs: []interface{}{
						&anyMatcher{
							line: 887, col: 28, offset: 31005,
						},
						&zeroOrMoreExpr{
							pos: position{line: 887, col: 31, offset: 31008},
							expr: &seqExpr{
								pos: position{line: 887, col: 32, offset: 31009},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 887, col: 32, offset: 31009},
										expr: &litMatcher{
											pos:        position{line: 887, col: 33, offset: 31010},
											val:        "*",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 887, col: 37, offset: 31014},
										expr: &ruleRefExpr{
											pos:  position{line: 887, col: 38, offset: 31015},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 887, col: 41, offset: 31018},
										expr: &litMatcher{
											pos:        position{line: 887, col: 42, offset: 31019},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 887, col: 46, offset: 31023},
										expr: &litMatcher{
											pos:        position{line: 887, col: 47, offset: 31024},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 887, col: 51, offset: 31028},
										expr: &ruleRefExpr{
											pos:  position{line: 887, col: 52, offset: 31029},
											name: "NEWLINE",
										},
									},
									&notExpr{
										pos: position{line: 887, col: 60, offset: 31037},
										expr: &ruleRefExpr{
											pos:  position{line: 887, col: 61, offset: 31038},
											name: "Parenthesis",
										},
									},
									&anyMatcher{
										line: 887, col: 73, offset: 31050,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedBoldText",
			pos:  position{line: 891, col: 1, offset: 31110},
			expr: &choiceExpr{
				pos: position{line: 892, col: 5, offset: 31134},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 892, col: 5, offset: 31134},
						run: (*parser).callonEscapedBoldText2,
						expr: &seqExpr{
							pos: position{line: 892, col: 5, offset: 31134},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 892, col: 5, offset: 31134},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 892, col: 18, offset: 31147},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 892, col: 40, offset: 31169},
									val:        "**",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 892, col: 45, offset: 31174},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 892, col: 55, offset: 31184},
										name: "DoubleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 892, col: 84, offset: 31213},
									val:        "**",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 894, col: 9, offset: 31370},
						run: (*parser).callonEscapedBoldText10,
						expr: &seqExpr{
							pos: position{line: 894, col: 9, offset: 31370},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 894, col: 9, offset: 31370},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 894, col: 22, offset: 31383},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 894, col: 44, offset: 31405},
									val:        "**",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 894, col: 49, offset: 31410},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 894, col: 59, offset: 31420},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 894, col: 88, offset: 31449},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 897, col: 9, offset: 31649},
						run: (*parser).callonEscapedBoldText18,
						expr: &seqExpr{
							pos: position{line: 897, col: 9, offset: 31649},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 897, col: 9, offset: 31649},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 897, col: 22, offset: 31662},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 897, col: 44, offset: 31684},
									val:        "*",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 897, col: 48, offset: 31688},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 897, col: 58, offset: 31698},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 897, col: 87, offset: 31727},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ItalicText",
			pos:  position{line: 905, col: 1, offset: 31935},
			expr: &choiceExpr{
				pos: position{line: 905, col: 15, offset: 31949},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 905, col: 15, offset: 31949},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 905, col: 39, offset: 31973},
						name: "SingleQuoteItalicText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicText",
			pos:  position{line: 907, col: 1, offset: 31996},
			expr: &actionExpr{
				pos: position{line: 907, col: 26, offset: 32021},
				run: (*parser).callonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 907, col: 26, offset: 32021},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 907, col: 26, offset: 32021},
							expr: &litMatcher{
								pos:        position{line: 907, col: 27, offset: 32022},
								val:        "\\\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 907, col: 32, offset: 32027},
							val:        "__",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 907, col: 37, offset: 32032},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 907, col: 47, offset: 32042},
								name: "DoubleQuoteItalicTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 907, col: 78, offset: 32073},
							val:        "__",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElements",
			pos:  position{line: 911, col: 1, offset: 32200},
			expr: &seqExpr{
				pos: position{line: 911, col: 34, offset: 32233},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 911, col: 34, offset: 32233},
						name: "DoubleQuoteItalicTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 911, col: 63, offset: 32262},
						expr: &seqExpr{
							pos: position{line: 911, col: 64, offset: 32263},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 911, col: 64, offset: 32263},
									expr: &litMatcher{
										pos:        position{line: 911, col: 66, offset: 32265},
										val:        "__",
										ignoreCase: false,
									},
								},
								&choiceExpr{
									pos: position{line: 911, col: 73, offset: 32272},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 911, col: 73, offset: 32272},
											name: "WS",
										},
										&ruleRefExpr{
											pos:  position{line: 911, col: 78, offset: 32277},
											name: "DoubleQuoteItalicTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElement",
			pos:  position{line: 913, col: 1, offset: 32344},
			expr: &actionExpr{
				pos: position{line: 913, col: 33, offset: 32376},
				run: (*parser).callonDoubleQuoteItalicTextElement1,
				expr: &seqExpr{
					pos: position{line: 913, col: 33, offset: 32376},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 913, col: 33, offset: 32376},
							expr: &ruleRefExpr{
								pos:  position{line: 913, col: 34, offset: 32377},
								name: "NEWLINE",
							},
						},
						&labeledExpr{
							pos:   position{line: 913, col: 42, offset: 32385},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 913, col: 51, offset: 32394},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 913, col: 51, offset: 32394},
										name: "SingleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 914, col: 11, offset: 32427},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 915, col: 11, offset: 32447},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 916, col: 11, offset: 32471},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 917, col: 11, offset: 32495},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 918, col: 11, offset: 32521},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 919, col: 11, offset: 32544},
										name: "QuotedLink",
									},
									&ruleRefExpr{
										pos:  position{line: 920, col: 11, offset: 32566},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 921, col: 11, offset: 32589},
										name: "NonDoubleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 922, col: 11, offset: 32624},
										name: "Parenthesis",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonDoubleQuoteItalicText",
			pos:  position{line: 926, col: 1, offset: 32769},
			expr: &actionExpr{
				pos: position{line: 926, col: 29, offset: 32797},
				run: (*parser).callonNonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 926, col: 29, offset: 32797},
					exprs: []interface{}{
						&anyMatcher{
							line: 926, col: 30, offset: 32798,
						},
						&zeroOrMoreExpr{
							pos: position{line: 926, col: 33, offset: 32801},
							expr: &seqExpr{
								pos: position{line: 926, col: 34, offset: 32802},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 926, col: 34, offset: 32802},
										expr: &litMatcher{
											pos:        position{line: 926, col: 35, offset: 32803},
											val:        "__",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 926, col: 40, offset: 32808},
										expr: &litMatcher{
											pos:        position{line: 926, col: 41, offset: 32809},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 926, col: 45, offset: 32813},
										expr: &litMatcher{
											pos:        position{line: 926, col: 46, offset: 32814},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 926, col: 50, offset: 32818},
										expr: &ruleRefExpr{
											pos:  position{line: 926, col: 51, offset: 32819},
											name: "NEWLINE",
										},
									},
									&notExpr{
										pos: position{line: 926, col: 59, offset: 32827},
										expr: &ruleRefExpr{
											pos:  position{line: 926, col: 60, offset: 32828},
											name: "Parenthesis",
										},
									},
									&anyMatcher{
										line: 926, col: 72, offset: 32840,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicText",
			pos:  position{line: 930, col: 1, offset: 32900},
			expr: &choiceExpr{
				pos: position{line: 930, col: 26, offset: 32925},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 930, col: 26, offset: 32925},
						run: (*parser).callonSingleQuoteItalicText2,
						expr: &seqExpr{
							pos: position{line: 930, col: 26, offset: 32925},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 930, col: 26, offset: 32925},
									expr: &litMatcher{
										pos:        position{line: 930, col: 27, offset: 32926},
										val:        "\\",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 930, col: 31, offset: 32930},
									val:        "_",
									ignoreCase: false,
								},
								&notExpr{
									pos: position{line: 930, col: 35, offset: 32934},
									expr: &litMatcher{
										pos:        position{line: 930, col: 36, offset: 32935},
										val:        "_",
										ignoreCase: false,
									},
								},
								&labeledExpr{
									pos:   position{line: 930, col: 40, offset: 32939},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 930, col: 50, offset: 32949},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 930, col: 81, offset: 32980},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 932, col: 5, offset: 33163},
						run: (*parser).callonSingleQuoteItalicText12,
						expr: &seqExpr{
							pos: position{line: 932, col: 5, offset: 33163},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 932, col: 5, offset: 33163},
									expr: &litMatcher{
										pos:        position{line: 932, col: 6, offset: 33164},
										val:        "\\\\",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 932, col: 11, offset: 33169},
									val:        "_",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 932, col: 15, offset: 33173},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 932, col: 25, offset: 33183},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 932, col: 25, offset: 33183},
												val:        "_",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 932, col: 29, offset: 33187},
												name: "SingleQuoteItalicTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 932, col: 60, offset: 33218},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElements",
			pos:  position{line: 936, col: 1, offset: 33421},
			expr: &seqExpr{
				pos: position{line: 936, col: 34, offset: 33454},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 936, col: 34, offset: 33454},
						expr: &ruleRefExpr{
							pos:  position{line: 936, col: 35, offset: 33455},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 936, col: 38, offset: 33458},
						name: "SingleQuoteItalicTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 936, col: 67, offset: 33487},
						expr: &seqExpr{
							pos: position{line: 936, col: 68, offset: 33488},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 936, col: 68, offset: 33488},
									expr: &seqExpr{
										pos: position{line: 936, col: 70, offset: 33490},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 936, col: 70, offset: 33490},
												val:        "_",
												ignoreCase: false,
											},
											&notExpr{
												pos: position{line: 936, col: 74, offset: 33494},
												expr: &ruleRefExpr{
													pos:  position{line: 936, col: 75, offset: 33495},
													name: "Alphanum",
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 936, col: 85, offset: 33505},
									expr: &ruleRefExpr{
										pos:  position{line: 936, col: 85, offset: 33505},
										name: "WS",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 936, col: 89, offset: 33509},
									name: "SingleQuoteItalicTextElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElement",
			pos:  position{line: 938, col: 1, offset: 33541},
			expr: &actionExpr{
				pos: position{line: 938, col: 33, offset: 33573},
				run: (*parser).callonSingleQuoteItalicTextElement1,
				expr: &seqExpr{
					pos: position{line: 938, col: 33, offset: 33573},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 938, col: 33, offset: 33573},
							expr: &ruleRefExpr{
								pos:  position{line: 938, col: 34, offset: 33574},
								name: "NEWLINE",
							},
						},
						&labeledExpr{
							pos:   position{line: 938, col: 42, offset: 33582},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 938, col: 51, offset: 33591},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 938, col: 51, offset: 33591},
										name: "DoubleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 939, col: 11, offset: 33623},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 940, col: 11, offset: 33643},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 941, col: 11, offset: 33667},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 942, col: 11, offset: 33691},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 943, col: 11, offset: 33717},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 944, col: 11, offset: 33740},
										name: "QuotedLink",
									},
									&ruleRefExpr{
										pos:  position{line: 945, col: 11, offset: 33762},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 946, col: 11, offset: 33785},
										name: "NonSingleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 947, col: 11, offset: 33820},
										name: "Parenthesis",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonSingleQuoteItalicText",
			pos:  position{line: 951, col: 1, offset: 33965},
			expr: &actionExpr{
				pos: position{line: 951, col: 29, offset: 33993},
				run: (*parser).callonNonSingleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 951, col: 29, offset: 33993},
					exprs: []interface{}{
						&anyMatcher{
							line: 951, col: 30, offset: 33994,
						},
						&zeroOrMoreExpr{
							pos: position{line: 951, col: 33, offset: 33997},
							expr: &seqExpr{
								pos: position{line: 951, col: 34, offset: 33998},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 951, col: 34, offset: 33998},
										expr: &litMatcher{
											pos:        position{line: 951, col: 35, offset: 33999},
											val:        "_",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 951, col: 39, offset: 34003},
										expr: &ruleRefExpr{
											pos:  position{line: 951, col: 40, offset: 34004},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 951, col: 43, offset: 34007},
										expr: &litMatcher{
											pos:        position{line: 951, col: 44, offset: 34008},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 951, col: 48, offset: 34012},
										expr: &litMatcher{
											pos:        position{line: 951, col: 49, offset: 34013},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 951, col: 53, offset: 34017},
										expr: &ruleRefExpr{
											pos:  position{line: 951, col: 54, offset: 34018},
											name: "NEWLINE",
										},
									},
									&notExpr{
										pos: position{line: 951, col: 62, offset: 34026},
										expr: &ruleRefExpr{
											pos:  position{line: 951, col: 63, offset: 34027},
											name: "Parenthesis",
										},
									},
									&anyMatcher{
										line: 951, col: 75, offset: 34039,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedItalicText",
			pos:  position{line: 955, col: 1, offset: 34099},
			expr: &choiceExpr{
				pos: position{line: 956, col: 5, offset: 34125},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 956, col: 5, offset: 34125},
						run: (*parser).callonEscapedItalicText2,
						expr: &seqExpr{
							pos: position{line: 956, col: 5, offset: 34125},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 956, col: 5, offset: 34125},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 956, col: 18, offset: 34138},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 956, col: 40, offset: 34160},
									val:        "__",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 956, col: 45, offset: 34165},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 956, col: 55, offset: 34175},
										name: "DoubleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 956, col: 86, offset: 34206},
									val:        "__",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 958, col: 9, offset: 34363},
						run: (*parser).callonEscapedItalicText10,
						expr: &seqExpr{
							pos: position{line: 958, col: 9, offset: 34363},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 958, col: 9, offset: 34363},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 958, col: 22, offset: 34376},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 958, col: 44, offset: 34398},
									val:        "__",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 958, col: 49, offset: 34403},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 958, col: 59, offset: 34413},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 958, col: 90, offset: 34444},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 961, col: 9, offset: 34644},
						run: (*parser).callonEscapedItalicText18,
						expr: &seqExpr{
							pos: position{line: 961, col: 9, offset: 34644},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 961, col: 9, offset: 34644},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 961, col: 22, offset: 34657},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 961, col: 44, offset: 34679},
									val:        "_",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 961, col: 48, offset: 34683},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 961, col: 58, offset: 34693},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 961, col: 89, offset: 34724},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MonospaceText",
			pos:  position{line: 968, col: 1, offset: 34934},
			expr: &choiceExpr{
				pos: position{line: 968, col: 18, offset: 34951},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 968, col: 18, offset: 34951},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 968, col: 45, offset: 34978},
						name: "SingleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceText",
			pos:  position{line: 970, col: 1, offset: 35004},
			expr: &actionExpr{
				pos: position{line: 970, col: 29, offset: 35032},
				run: (*parser).callonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 970, col: 29, offset: 35032},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 970, col: 29, offset: 35032},
							expr: &litMatcher{
								pos:        position{line: 970, col: 30, offset: 35033},
								val:        "\\\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 970, col: 35, offset: 35038},
							val:        "``",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 970, col: 40, offset: 35043},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 970, col: 50, offset: 35053},
								name: "DoubleQuoteMonospaceTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 970, col: 84, offset: 35087},
							val:        "``",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElements",
			pos:  position{line: 974, col: 1, offset: 35217},
			expr: &seqExpr{
				pos: position{line: 974, col: 37, offset: 35253},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 974, col: 37, offset: 35253},
						name: "DoubleQuoteMonospaceTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 974, col: 69, offset: 35285},
						expr: &seqExpr{
							pos: position{line: 974, col: 70, offset: 35286},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 974, col: 70, offset: 35286},
									expr: &litMatcher{
										pos:        position{line: 974, col: 72, offset: 35288},
										val:        "``",
										ignoreCase: false,
									},
								},
								&choiceExpr{
									pos: position{line: 974, col: 79, offset: 35295},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 974, col: 79, offset: 35295},
											name: "WS",
										},
										&ruleRefExpr{
											pos:  position{line: 974, col: 84, offset: 35300},
											name: "DoubleQuoteMonospaceTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElement",
			pos:  position{line: 976, col: 1, offset: 35369},
			expr: &actionExpr{
				pos: position{line: 976, col: 36, offset: 35404},
				run: (*parser).callonDoubleQuoteMonospaceTextElement1,
				expr: &seqExpr{
					pos: position{line: 976, col: 36, offset: 35404},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 976, col: 36, offset: 35404},
							expr: &ruleRefExpr{
								pos:  position{line: 976, col: 37, offset: 35405},
								name: "NEWLINE",
							},
						},
						&labeledExpr{
							pos:   position{line: 976, col: 45, offset: 35413},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 976, col: 54, offset: 35422},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 976, col: 54, offset: 35422},
										name: "SingleQuoteMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 977, col: 11, offset: 35458},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 978, col: 11, offset: 35477},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 979, col: 11, offset: 35499},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 980, col: 11, offset: 35523},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 981, col: 11, offset: 35549},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 982, col: 11, offset: 35572},
										name: "QuotedLink",
									},
									&ruleRefExpr{
										pos:  position{line: 983, col: 11, offset: 35594},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 984, col: 11, offset: 35617},
										name: "NonDoubleQuoteMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 985, col: 11, offset: 35655},
										name: "Parenthesis",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonDoubleQuoteMonospaceText",
			pos:  position{line: 989, col: 1, offset: 35800},
			expr: &actionExpr{
				pos: position{line: 989, col: 32, offset: 35831},
				run: (*parser).callonNonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 989, col: 32, offset: 35831},
					exprs: []interface{}{
						&anyMatcher{
							line: 989, col: 33, offset: 35832,
						},
						&zeroOrMoreExpr{
							pos: position{line: 989, col: 36, offset: 35835},
							expr: &seqExpr{
								pos: position{line: 989, col: 37, offset: 35836},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 989, col: 37, offset: 35836},
										expr: &litMatcher{
											pos:        position{line: 989, col: 38, offset: 35837},
											val:        "``",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 989, col: 43, offset: 35842},
										expr: &ruleRefExpr{
											pos:  position{line: 989, col: 44, offset: 35843},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 989, col: 47, offset: 35846},
										expr: &litMatcher{
											pos:        position{line: 989, col: 48, offset: 35847},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 989, col: 52, offset: 35851},
										expr: &litMatcher{
											pos:        position{line: 989, col: 53, offset: 35852},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 989, col: 57, offset: 35856},
										expr: &ruleRefExpr{
											pos:  position{line: 989, col: 58, offset: 35857},
											name: "NEWLINE",
										},
									},
									&notExpr{
										pos: position{line: 989, col: 66, offset: 35865},
										expr: &ruleRefExpr{
											pos:  position{line: 989, col: 67, offset: 35866},
											name: "Parenthesis",
										},
									},
									&anyMatcher{
										line: 989, col: 79, offset: 35878,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceText",
			pos:  position{line: 993, col: 1, offset: 35938},
			expr: &choiceExpr{
				pos: position{line: 993, col: 29, offset: 35966},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 993, col: 29, offset: 35966},
						run: (*parser).callonSingleQuoteMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 993, col: 29, offset: 35966},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 993, col: 29, offset: 35966},
									expr: &litMatcher{
										pos:        position{line: 993, col: 30, offset: 35967},
										val:        "\\",
										ignoreCase: false,
									},
								},
								&notExpr{
									pos: position{line: 993, col: 34, offset: 35971},
									expr: &litMatcher{
										pos:        position{line: 993, col: 35, offset: 35972},
										val:        "``",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 993, col: 40, offset: 35977},
									val:        "`",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 993, col: 44, offset: 35981},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 993, col: 54, offset: 35991},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 993, col: 88, offset: 36025},
									val:        "`",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 995, col: 5, offset: 36211},
						run: (*parser).callonSingleQuoteMonospaceText12,
						expr: &seqExpr{
							pos: position{line: 995, col: 5, offset: 36211},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 995, col: 5, offset: 36211},
									expr: &litMatcher{
										pos:        position{line: 995, col: 6, offset: 36212},
										val:        "\\\\",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 995, col: 11, offset: 36217},
									val:        "`",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 995, col: 15, offset: 36221},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 995, col: 25, offset: 36231},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 995, col: 25, offset: 36231},
												val:        "`",
												ignoreCase: false,
											},
											&ruleRefExpr{
												pos:  position{line: 995, col: 29, offset: 36235},
												name: "SingleQuoteMonospaceTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 995, col: 63, offset: 36269},
									val:        "`",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElements",
			pos:  position{line: 999, col: 1, offset: 36478},
			expr: &seqExpr{
				pos: position{line: 999, col: 37, offset: 36514},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 999, col: 37, offset: 36514},
						expr: &ruleRefExpr{
							pos:  position{line: 999, col: 38, offset: 36515},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 999, col: 41, offset: 36518},
						name: "SingleQuoteMonospaceTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 999, col: 73, offset: 36550},
						expr: &seqExpr{
							pos: position{line: 999, col: 74, offset: 36551},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 999, col: 74, offset: 36551},
									expr: &seqExpr{
										pos: position{line: 999, col: 76, offset: 36553},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 999, col: 76, offset: 36553},
												val:        "`",
												ignoreCase: false,
											},
											&notExpr{
												pos: position{line: 999, col: 80, offset: 36557},
												expr: &ruleRefExpr{
													pos:  position{line: 999, col: 81, offset: 36558},
													name: "Alphanum",
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 999, col: 91, offset: 36568},
									expr: &ruleRefExpr{
										pos:  position{line: 999, col: 91, offset: 36568},
										name: "WS",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 999, col: 95, offset: 36572},
									name: "SingleQuoteMonospaceTextElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElement",
			pos:  position{line: 1001, col: 1, offset: 36607},
			expr: &actionExpr{
				pos: position{line: 1001, col: 37, offset: 36643},
				run: (*parser).callonSingleQuoteMonospaceTextElement1,
				expr: &labeledExpr{
					pos:   position{line: 1001, col: 37, offset: 36643},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1001, col: 46, offset: 36652},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1001, col: 46, offset: 36652},
								name: "NEWLINE",
							},
							&ruleRefExpr{
								pos:  position{line: 1002, col: 11, offset: 36690},
								name: "DoubleQuoteMonospaceText",
							},
							&ruleRefExpr{
								pos:  position{line: 1003, col: 11, offset: 36726},
								name: "BoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 1004, col: 11, offset: 36746},
								name: "ItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 1005, col: 11, offset: 36767},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1006, col: 11, offset: 36791},
								name: "SuperscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1007, col: 11, offset: 36817},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 1008, col: 11, offset: 36840},
								name: "QuotedLink",
							},
							&ruleRefExpr{
								pos:  position{line: 1009, col: 11, offset: 36862},
								name: "Passthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 1010, col: 11, offset: 36885},
								name: "NonSingleQuoteMonospaceText",
							},
							&ruleRefExpr{
								pos:  position{line: 1011, col: 11, offset: 36923},
								name: "Parenthesis",
							},
						},
					},
				},
			},
		},
		{
			name: "NonSingleQuoteMonospaceText",
			pos:  position{line: 1015, col: 1, offset: 37068},
			expr: &actionExpr{
				pos: position{line: 1015, col: 32, offset: 37099},
				run: (*parser).callonNonSingleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1015, col: 32, offset: 37099},
					exprs: []interface{}{
						&anyMatcher{
							line: 1015, col: 33, offset: 37100,
						},
						&zeroOrMoreExpr{
							pos: position{line: 1015, col: 36, offset: 37103},
							expr: &seqExpr{
								pos: position{line: 1015, col: 37, offset: 37104},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1015, col: 37, offset: 37104},
										expr: &ruleRefExpr{
											pos:  position{line: 1015, col: 38, offset: 37105},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 1015, col: 41, offset: 37108},
										expr: &litMatcher{
											pos:        position{line: 1015, col: 42, offset: 37109},
											val:        "`",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1015, col: 46, offset: 37113},
										expr: &litMatcher{
											pos:        position{line: 1015, col: 47, offset: 37114},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1015, col: 51, offset: 37118},
										expr: &litMatcher{
											pos:        position{line: 1015, col: 52, offset: 37119},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1015, col: 56, offset: 37123},
										expr: &ruleRefExpr{
											pos:  position{line: 1015, col: 57, offset: 37124},
											name: "NEWLINE",
										},
									},
									&notExpr{
										pos: position{line: 1015, col: 65, offset: 37132},
										expr: &ruleRefExpr{
											pos:  position{line: 1015, col: 66, offset: 37133},
											name: "Parenthesis",
										},
									},
									&anyMatcher{
										line: 1015, col: 78, offset: 37145,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMonospaceText",
			pos:  position{line: 1019, col: 1, offset: 37226},
			expr: &choiceExpr{
				pos: position{line: 1020, col: 5, offset: 37255},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1020, col: 5, offset: 37255},
						run: (*parser).callonEscapedMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1020, col: 5, offset: 37255},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1020, col: 5, offset: 37255},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1020, col: 18, offset: 37268},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1020, col: 40, offset: 37290},
									val:        "``",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1020, col: 45, offset: 37295},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1020, col: 55, offset: 37305},
										name: "DoubleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1020, col: 89, offset: 37339},
									val:        "``",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1022, col: 9, offset: 37496},
						run: (*parser).callonEscapedMonospaceText10,
						expr: &seqExpr{
							pos: position{line: 1022, col: 9, offset: 37496},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1022, col: 9, offset: 37496},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1022, col: 22, offset: 37509},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1022, col: 44, offset: 37531},
									val:        "``",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1022, col: 49, offset: 37536},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1022, col: 59, offset: 37546},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1022, col: 93, offset: 37580},
									val:        "`",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1025, col: 9, offset: 37780},
						run: (*parser).callonEscapedMonospaceText18,
						expr: &seqExpr{
							pos: position{line: 1025, col: 9, offset: 37780},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1025, col: 9, offset: 37780},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1025, col: 22, offset: 37793},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1025, col: 44, offset: 37815},
									val:        "`",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1025, col: 48, offset: 37819},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1025, col: 58, offset: 37829},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1025, col: 92, offset: 37863},
									val:        "`",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptText",
			pos:  position{line: 1029, col: 1, offset: 38013},
			expr: &actionExpr{
				pos: position{line: 1029, col: 18, offset: 38030},
				run: (*parser).callonSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1029, col: 18, offset: 38030},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1029, col: 18, offset: 38030},
							expr: &litMatcher{
								pos:        position{line: 1029, col: 19, offset: 38031},
								val:        "\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 1029, col: 23, offset: 38035},
							val:        "~",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1029, col: 27, offset: 38039},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1029, col: 36, offset: 38048},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1029, col: 58, offset: 38070},
							val:        "~",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SubscriptTextElement",
			pos:  position{line: 1033, col: 1, offset: 38159},
			expr: &choiceExpr{
				pos: position{line: 1033, col: 25, offset: 38183},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1033, col: 25, offset: 38183},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1033, col: 38, offset: 38196},
						name: "NonSubscriptText",
					},
				},
			},
		},
		{
			name: "NonSubscriptText",
			pos:  position{line: 1035, col: 1, offset: 38215},
			expr: &actionExpr{
				pos: position{line: 1035, col: 21, offset: 38235},
				run: (*parser).callonNonSubscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1035, col: 21, offset: 38235},
					expr: &seqExpr{
						pos: position{line: 1035, col: 22, offset: 38236},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1035, col: 22, offset: 38236},
								expr: &ruleRefExpr{
									pos:  position{line: 1035, col: 23, offset: 38237},
									name: "NEWLINE",
								},
							},
							&notExpr{
								pos: position{line: 1035, col: 31, offset: 38245},
								expr: &ruleRefExpr{
									pos:  position{line: 1035, col: 32, offset: 38246},
									name: "WS",
								},
							},
							&notExpr{
								pos: position{line: 1035, col: 35, offset: 38249},
								expr: &litMatcher{
									pos:        position{line: 1035, col: 36, offset: 38250},
									val:        "~",
									ignoreCase: false,
								},
							},
							&anyMatcher{
								line: 1035, col: 40, offset: 38254,
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedSubscriptText",
			pos:  position{line: 1039, col: 1, offset: 38287},
			expr: &actionExpr{
				pos: position{line: 1039, col: 25, offset: 38311},
				run: (*parser).callonEscapedSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1039, col: 25, offset: 38311},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1039, col: 25, offset: 38311},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1039, col: 38, offset: 38324},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1039, col: 60, offset: 38346},
							val:        "~",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1039, col: 64, offset: 38350},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1039, col: 73, offset: 38359},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1039, col: 95, offset: 38381},
							val:        "~",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SuperscriptText",
			pos:  position{line: 1043, col: 1, offset: 38510},
			expr: &actionExpr{
				pos: position{line: 1043, col: 20, offset: 38529},
				run: (*parser).callonSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1043, col: 20, offset: 38529},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1043, col: 20, offset: 38529},
							expr: &litMatcher{
								pos:        position{line: 1043, col: 21, offset: 38530},
								val:        "\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 1043, col: 25, offset: 38534},
							val:        "^",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1043, col: 29, offset: 38538},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1043, col: 38, offset: 38547},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1043, col: 62, offset: 38571},
							val:        "^",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SuperscriptTextElement",
			pos:  position{line: 1047, col: 1, offset: 38662},
			expr: &choiceExpr{
				pos: position{line: 1047, col: 27, offset: 38688},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1047, col: 27, offset: 38688},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1047, col: 40, offset: 38701},
						name: "NonSuperscriptText",
					},
				},
			},
		},
		{
			name: "NonSuperscriptText",
			pos:  position{line: 1049, col: 1, offset: 38722},
			expr: &actionExpr{
				pos: position{line: 1049, col: 23, offset: 38744},
				run: (*parser).callonNonSuperscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1049, col: 23, offset: 38744},
					expr: &seqExpr{
						pos: position{line: 1049, col: 24, offset: 38745},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1049, col: 24, offset: 38745},
								expr: &ruleRefExpr{
									pos:  position{line: 1049, col: 25, offset: 38746},
									name: "NEWLINE",
								},
							},
							&notExpr{
								pos: position{line: 1049, col: 33, offset: 38754},
								expr: &ruleRefExpr{
									pos:  position{line: 1049, col: 34, offset: 38755},
									name: "WS",
								},
							},
							&notExpr{
								pos: position{line: 1049, col: 37, offset: 38758},
								expr: &litMatcher{
									pos:        position{line: 1049, col: 38, offset: 38759},
									val:        "^",
									ignoreCase: false,
								},
							},
							&anyMatcher{
								line: 1049, col: 42, offset: 38763,
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedSuperscriptText",
			pos:  position{line: 1053, col: 1, offset: 38796},
			expr: &actionExpr{
				pos: position{line: 1053, col: 27, offset: 38822},
				run: (*parser).callonEscapedSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1053, col: 27, offset: 38822},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1053, col: 27, offset: 38822},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1053, col: 40, offset: 38835},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1053, col: 62, offset: 38857},
							val:        "^",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1053, col: 66, offset: 38861},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1053, col: 75, offset: 38870},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1053, col: 99, offset: 38894},
							val:        "^",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Passthrough",
			pos:  position{line: 1060, col: 1, offset: 39130},
			expr: &choiceExpr{
				pos: position{line: 1060, col: 16, offset: 39145},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1060, col: 16, offset: 39145},
						name: "TriplePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1060, col: 40, offset: 39169},
						name: "SinglePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1060, col: 64, offset: 39193},
						name: "PassthroughMacro",
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughPrefix",
			pos:  position{line: 1062, col: 1, offset: 39211},
			expr: &litMatcher{
				pos:        position{line: 1062, col: 32, offset: 39242},
				val:        "+",
				ignoreCase: false,
			},
		},
		{
			name: "SinglePlusPassthrough",
			pos:  position{line: 1064, col: 1, offset: 39247},
			expr: &actionExpr{
				pos: position{line: 1064, col: 26, offset: 39272},
				run: (*parser).callonSinglePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1064, col: 26, offset: 39272},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1064, col: 26, offset: 39272},
							name: "SinglePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1064, col: 54, offset: 39300},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1064, col: 63, offset: 39309},
								name: "SinglePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1064, col: 93, offset: 39339},
							name: "SinglePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1064, col: 121, offset: 39367},
							expr: &ruleRefExpr{
								pos:  position{line: 1064, col: 122, offset: 39368},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughContent",
			pos:  position{line: 1068, col: 1, offset: 39467},
			expr: &choiceExpr{
				pos: position{line: 1068, col: 33, offset: 39499},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1068, col: 34, offset: 39500},
						run: (*parser).callonSinglePlusPassthroughContent2,
						expr: &seqExpr{
							pos: position{line: 1068, col: 34, offset: 39500},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1068, col: 35, offset: 39501},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1068, col: 35, offset: 39501},
											expr: &ruleRefExpr{
												pos:  position{line: 1068, col: 36, offset: 39502},
												name: "SinglePlusPassthroughPrefix",
											},
										},
										&notExpr{
											pos: position{line: 1068, col: 64, offset: 39530},
											expr: &ruleRefExpr{
												pos:  position{line: 1068, col: 65, offset: 39531},
												name: "WS",
											},
										},
										&notExpr{
											pos: position{line: 1068, col: 68, offset: 39534},
											expr: &ruleRefExpr{
												pos:  position{line: 1068, col: 69, offset: 39535},
												name: "NEWLINE",
											},
										},
										&anyMatcher{
											line: 1068, col: 77, offset: 39543,
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1068, col: 80, offset: 39546},
									expr: &seqExpr{
										pos: position{line: 1068, col: 81, offset: 39547},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1068, col: 81, offset: 39547},
												expr: &seqExpr{
													pos: position{line: 1068, col: 83, offset: 39549},
													exprs: []interface{}{
														&oneOrMoreExpr{
															pos: position{line: 1068, col: 83, offset: 39549},
															expr: &ruleRefExpr{
																pos:  position{line: 1068, col: 83, offset: 39549},
																name: "WS",
															},
														},
														&ruleRefExpr{
															pos:  position{line: 1068, col: 87, offset: 39553},
															name: "SinglePlusPassthroughPrefix",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 1068, col: 116, offset: 39582},
												expr: &ruleRefExpr{
													pos:  position{line: 1068, col: 117, offset: 39583},
													name: "SinglePlusPassthroughPrefix",
												},
											},
											&notExpr{
												pos: position{line: 1068, col: 145, offset: 39611},
												expr: &ruleRefExpr{
													pos:  position{line: 1068, col: 146, offset: 39612},
													name: "NEWLINE",
												},
											},
											&anyMatcher{
												line: 1068, col: 154, offset: 39620,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1070, col: 7, offset: 39762},
						run: (*parser).callonSinglePlusPassthroughContent24,
						expr: &seqExpr{
							pos: position{line: 1070, col: 8, offset: 39763},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1070, col: 8, offset: 39763},
									expr: &ruleRefExpr{
										pos:  position{line: 1070, col: 9, offset: 39764},
										name: "WS",
									},
								},
								&notExpr{
									pos: position{line: 1070, col: 12, offset: 39767},
									expr: &ruleRefExpr{
										pos:  position{line: 1070, col: 13, offset: 39768},
										name: "NEWLINE",
									},
								},
								&notExpr{
									pos: position{line: 1070, col: 21, offset: 39776},
									expr: &ruleRefExpr{
										pos:  position{line: 1070, col: 22, offset: 39777},
										name: "SinglePlusPassthroughPrefix",
									},
								},
								&anyMatcher{
									line: 1070, col: 50, offset: 39805,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughPrefix",
			pos:  position{line: 1074, col: 1, offset: 39887},
			expr: &litMatcher{
				pos:        position{line: 1074, col: 32, offset: 39918},
				val:        "+++",
				ignoreCase: false,
			},
		},
		{
			name: "TriplePlusPassthrough",
			pos:  position{line: 1076, col: 1, offset: 39925},
			expr: &actionExpr{
				pos: position{line: 1076, col: 26, offset: 39950},
				run: (*parser).callonTriplePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1076, col: 26, offset: 39950},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1076, col: 26, offset: 39950},
							name: "TriplePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1076, col: 54, offset: 39978},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1076, col: 63, offset: 39987},
								name: "TriplePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1076, col: 93, offset: 40017},
							name: "TriplePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1076, col: 121, offset: 40045},
							expr: &ruleRefExpr{
								pos:  position{line: 1076, col: 122, offset: 40046},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughContent",
			pos:  position{line: 1080, col: 1, offset: 40145},
			expr: &choiceExpr{
				pos: position{line: 1080, col: 33, offset: 40177},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1080, col: 34, offset: 40178},
						run: (*parser).callonTriplePlusPassthroughContent2,
						expr: &zeroOrMoreExpr{
							pos: position{line: 1080, col: 34, offset: 40178},
							expr: &seqExpr{
								pos: position{line: 1080, col: 35, offset: 40179},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1080, col: 35, offset: 40179},
										expr: &ruleRefExpr{
											pos:  position{line: 1080, col: 36, offset: 40180},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1080, col: 64, offset: 40208,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1082, col: 7, offset: 40373},
						run: (*parser).callonTriplePlusPassthroughContent8,
						expr: &zeroOrOneExpr{
							pos: position{line: 1082, col: 7, offset: 40373},
							expr: &seqExpr{
								pos: position{line: 1082, col: 8, offset: 40374},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1082, col: 8, offset: 40374},
										expr: &ruleRefExpr{
											pos:  position{line: 1082, col: 9, offset: 40375},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 1082, col: 12, offset: 40378},
										expr: &ruleRefExpr{
											pos:  position{line: 1082, col: 13, offset: 40379},
											name: "NEWLINE",
										},
									},
									&notExpr{
										pos: position{line: 1082, col: 21, offset: 40387},
										expr: &ruleRefExpr{
											pos:  position{line: 1082, col: 22, offset: 40388},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1082, col: 50, offset: 40416,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacro",
			pos:  position{line: 1086, col: 1, offset: 40499},
			expr: &choiceExpr{
				pos: position{line: 1086, col: 21, offset: 40519},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1086, col: 21, offset: 40519},
						run: (*parser).callonPassthroughMacro2,
						expr: &seqExpr{
							pos: position{line: 1086, col: 21, offset: 40519},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1086, col: 21, offset: 40519},
									val:        "pass:[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1086, col: 30, offset: 40528},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1086, col: 38, offset: 40536},
										expr: &ruleRefExpr{
											pos:  position{line: 1086, col: 39, offset: 40537},
											name: "PassthroughMacroCharacter",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1086, col: 67, offset: 40565},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1088, col: 5, offset: 40655},
						run: (*parser).callonPassthroughMacro9,
						expr: &seqExpr{
							pos: position{line: 1088, col: 5, offset: 40655},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1088, col: 5, offset: 40655},
									val:        "pass:q[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1088, col: 15, offset: 40665},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1088, col: 23, offset: 40673},
										expr: &choiceExpr{
											pos: position{line: 1088, col: 24, offset: 40674},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1088, col: 24, offset: 40674},
													name: "QuotedText",
												},
												&ruleRefExpr{
													pos:  position{line: 1088, col: 37, offset: 40687},
													name: "PassthroughMacroCharacter",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1088, col: 65, offset: 40715},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacroCharacter",
			pos:  position{line: 1092, col: 1, offset: 40805},
			expr: &choiceExpr{
				pos: position{line: 1092, col: 31, offset: 40835},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1092, col: 31, offset: 40835},
						name: "Alphanums",
					},
					&ruleRefExpr{
						pos:  position{line: 1092, col: 43, offset: 40847},
						name: "Spaces",
					},
					&actionExpr{
						pos: position{line: 1092, col: 52, offset: 40856},
						run: (*parser).callonPassthroughMacroCharacter4,
						expr: &seqExpr{
							pos: position{line: 1092, col: 53, offset: 40857},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1092, col: 53, offset: 40857},
									expr: &litMatcher{
										pos:        position{line: 1092, col: 54, offset: 40858},
										val:        "]",
										ignoreCase: false,
									},
								},
								&anyMatcher{
									line: 1092, col: 58, offset: 40862,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReference",
			pos:  position{line: 1099, col: 1, offset: 41032},
			expr: &choiceExpr{
				pos: position{line: 1099, col: 19, offset: 41050},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1099, col: 19, offset: 41050},
						name: "InternalCrossReference",
					},
					&ruleRefExpr{
						pos:  position{line: 1099, col: 44, offset: 41075},
						name: "ExternalCrossReference",
					},
				},
			},
		},
		{
			name: "InternalCrossReference",
			pos:  position{line: 1101, col: 1, offset: 41100},
			expr: &choiceExpr{
				pos: position{line: 1101, col: 27, offset: 41126},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1101, col: 27, offset: 41126},
						run: (*parser).callonInternalCrossReference2,
						expr: &seqExpr{
							pos: position{line: 1101, col: 27, offset: 41126},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1101, col: 27, offset: 41126},
									val:        "<<",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1101, col: 32, offset: 41131},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1101, col: 36, offset: 41135},
										name: "ID",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1101, col: 40, offset: 41139},
									expr: &ruleRefExpr{
										pos:  position{line: 1101, col: 40, offset: 41139},
										name: "WS",
									},
								},
								&litMatcher{
									pos:        position{line: 1101, col: 44, offset: 41143},
									val:        ",",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1101, col: 48, offset: 41147},
									label: "label",
									expr: &ruleRefExpr{
										pos:  position{line: 1101, col: 55, offset: 41154},
										name: "CrossReferenceLabel",
									},
								},
								&litMatcher{
									pos:        position{line: 1101, col: 76, offset: 41175},
									val:        ">>",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1103, col: 5, offset: 41258},
						run: (*parser).callonInternalCrossReference13,
						expr: &seqExpr{
							pos: position{line: 1103, col: 5, offset: 41258},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1103, col: 5, offset: 41258},
									val:        "<<",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1103, col: 10, offset: 41263},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1103, col: 14, offset: 41267},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 1103, col: 18, offset: 41271},
									val:        ">>",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalCrossReference",
			pos:  position{line: 1107, col: 1, offset: 41343},
			expr: &actionExpr{
				pos: position{line: 1107, col: 27, offset: 41369},
				run: (*parser).callonExternalCrossReference1,
				expr: &seqExpr{
					pos: position{line: 1107, col: 27, offset: 41369},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1107, col: 27, offset: 41369},
							val:        "xref:",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1107, col: 35, offset: 41377},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1107, col: 40, offset: 41382},
								name: "FileLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 1107, col: 54, offset: 41396},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1107, col: 72, offset: 41414},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReferenceLabel",
			pos:  position{line: 1111, col: 1, offset: 41544},
			expr: &actionExpr{
				pos: position{line: 1111, col: 24, offset: 41567},
				run: (*parser).callonCrossReferenceLabel1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1111, col: 24, offset: 41567},
					expr: &choiceExpr{
						pos: position{line: 1111, col: 25, offset: 41568},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1111, col: 25, offset: 41568},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 1111, col: 37, offset: 41580},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 1111, col: 47, offset: 41590},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1111, col: 47, offset: 41590},
										expr: &litMatcher{
											pos:        position{line: 1111, col: 48, offset: 41591},
											val:        ">>",
											ignoreCase: false,
										},
									},
									&anyMatcher{
										line: 1111, col: 54, offset: 41597,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Link",
			pos:  position{line: 1118, col: 1, offset: 41739},
			expr: &choiceExpr{
				pos: position{line: 1118, col: 9, offset: 41747},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1118, col: 9, offset: 41747},
						name: "RelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1118, col: 24, offset: 41762},
						name: "ExternalLink",
					},
				},
			},
		},
		{
			name: "RelativeLink",
			pos:  position{line: 1121, col: 1, offset: 41843},
			expr: &actionExpr{
				pos: position{line: 1121, col: 17, offset: 41859},
				run: (*parser).callonRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1121, col: 17, offset: 41859},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1121, col: 17, offset: 41859},
							val:        "link:",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1121, col: 25, offset: 41867},
							label: "url",
							expr: &choiceExpr{
								pos: position{line: 1121, col: 30, offset: 41872},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1121, col: 30, offset: 41872},
										name: "Location",
									},
									&ruleRefExpr{
										pos:  position{line: 1121, col: 41, offset: 41883},
										name: "FileLocation",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1121, col: 55, offset: 41897},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1121, col: 73, offset: 41915},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalLink",
			pos:  position{line: 1125, col: 1, offset: 42033},
			expr: &actionExpr{
				pos: position{line: 1125, col: 17, offset: 42049},
				run: (*parser).callonExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1125, col: 17, offset: 42049},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1125, col: 17, offset: 42049},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1125, col: 22, offset: 42054},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1125, col: 32, offset: 42064},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1125, col: 49, offset: 42081},
								expr: &ruleRefExpr{
									pos:  position{line: 1125, col: 50, offset: 42082},
									name: "LinkAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LinkAttributes",
			pos:  position{line: 1129, col: 1, offset: 42175},
			expr: &choiceExpr{
				pos: position{line: 1129, col: 19, offset: 42193},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1129, col: 19, offset: 42193},
						name: "TextOnlyLinkAttributes",
					},
					&ruleRefExpr{
						pos:  position{line: 1129, col: 44, offset: 42218},
						name: "TextAndMoreLinkAttributes",
					},
				},
			},
		},
		{
			name: "TextOnlyLinkAttributes",
			pos:  position{line: 1131, col: 1, offset: 42245},
			expr: &actionExpr{
				pos: position{line: 1131, col: 27, offset: 42271},
				run: (*parser).callonTextOnlyLinkAttributes1,
				expr: &seqExpr{
					pos: position{line: 1131, col: 27, offset: 42271},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1131, col: 27, offset: 42271},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1131, col: 31, offset: 42275},
							label: "text",
							expr: &zeroOrOneExpr{
								pos: position{line: 1131, col: 36, offset: 42280},
								expr: &ruleRefExpr{
									pos:  position{line: 1131, col: 37, offset: 42281},
									name: "LinkTextWithCommaAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1131, col: 66, offset: 42310},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "LinkTextWithCommaAttribute",
			pos:  position{line: 1135, col: 1, offset: 42372},
			expr: &choiceExpr{
				pos: position{line: 1137, col: 5, offset: 42444},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1137, col: 5, offset: 42444},
						run: (*parser).callonLinkTextWithCommaAttribute2,
						expr: &seqExpr{
							pos: position{line: 1137, col: 5, offset: 42444},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1137, col: 5, offset: 42444},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1137, col: 10, offset: 42449},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 1137, col: 19, offset: 42458},
										expr: &seqExpr{
											pos: position{line: 1137, col: 20, offset: 42459},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1137, col: 20, offset: 42459},
													expr: &litMatcher{
														pos:        position{line: 1137, col: 21, offset: 42460},
														val:        "=",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 1137, col: 25, offset: 42464},
													expr: &litMatcher{
														pos:        position{line: 1137, col: 26, offset: 42465},
														val:        "]",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 1137, col: 30, offset: 42469},
													expr: &litMatcher{
														pos:        position{line: 1137, col: 31, offset: 42470},
														val:        "\"",
														ignoreCase: false,
													},
												},
												&choiceExpr{
													pos: position{line: 1137, col: 37, offset: 42476},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1137, col: 37, offset: 42476},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1137, col: 50, offset: 42489},
															name: "SimpleWord",
														},
														&ruleRefExpr{
															pos:  position{line: 1137, col: 63, offset: 42502},
															name: "Spaces",
														},
														&actionExpr{
															pos: position{line: 1137, col: 73, offset: 42512},
															run: (*parser).callonLinkTextWithCommaAttribute18,
															expr: &seqExpr{
																pos: position{line: 1137, col: 74, offset: 42513},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1137, col: 74, offset: 42513},
																		expr: &ruleRefExpr{
																			pos:  position{line: 1137, col: 75, offset: 42514},
																			name: "WS",
																		},
																	},
																	&anyMatcher{
																		line: 1137, col: 78, offset: 42517,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1139, col: 11, offset: 42586},
									val:        "\"",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 1139, col: 16, offset: 42591},
									expr: &ruleRefExpr{
										pos:  position{line: 1139, col: 16, offset: 42591},
										name: "Spaces",
									},
								},
								&andExpr{
									pos: position{line: 1139, col: 24, offset: 42599},
									expr: &notExpr{
										pos: position{line: 1139, col: 26, offset: 42601},
										expr: &litMatcher{
											pos:        position{line: 1139, col: 27, offset: 42602},
											val:        "=",
											ignoreCase: false,
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1143, col: 5, offset: 42727},
						run: (*parser).callonLinkTextWithCommaAttribute29,
						expr: &seqExpr{
							pos: position{line: 1143, col: 5, offset: 42727},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1143, col: 5, offset: 42727},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 1143, col: 14, offset: 42736},
										expr: &seqExpr{
											pos: position{line: 1143, col: 15, offset: 42737},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1143, col: 15, offset: 42737},
													expr: &litMatcher{
														pos:        position{line: 1143, col: 16, offset: 42738},
														val:        "=",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 1143, col: 20, offset: 42742},
													expr: &litMatcher{
														pos:        position{line: 1143, col: 21, offset: 42743},
														val:        "]",
														ignoreCase: false,
													},
												},
												&choiceExpr{
													pos: position{line: 1143, col: 26, offset: 42748},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1143, col: 26, offset: 42748},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1143, col: 39, offset: 42761},
															name: "SimpleWord",
														},
														&ruleRefExpr{
															pos:  position{line: 1143, col: 52, offset: 42774},
															name: "Spaces",
														},
														&actionExpr{
															pos: position{line: 1143, col: 62, offset: 42784},
															run: (*parser).callonLinkTextWithCommaAttribute42,
															expr: &seqExpr{
																pos: position{line: 1143, col: 63, offset: 42785},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1143, col: 63, offset: 42785},
																		expr: &ruleRefExpr{
																			pos:  position{line: 1143, col: 64, offset: 42786},
																			name: "WS",
																		},
																	},
																	&anyMatcher{
																		line: 1143, col: 67, offset: 42789,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&andExpr{
									pos: position{line: 1145, col: 11, offset: 42858},
									expr: &notExpr{
										pos: position{line: 1145, col: 13, offset: 42860},
										expr: &litMatcher{
											pos:        position{line: 1145, col: 14, offset: 42861},
											val:        "=",
											ignoreCase: false,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TextAndMoreLinkAttributes",
			pos:  position{line: 1150, col: 1, offset: 42941},
			expr: &actionExpr{
				pos: position{line: 1150, col: 30, offset: 42970},
				run: (*parser).callonTextAndMoreLinkAttributes1,
				expr: &seqExpr{
					pos: position{line: 1150, col: 30, offset: 42970},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1150, col: 30, offset: 42970},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1150, col: 34, offset: 42974},
							label: "text",
							expr: &zeroOrOneExpr{
								pos: position{line: 1150, col: 39, offset: 42979},
								expr: &ruleRefExpr{
									pos:  position{line: 1150, col: 40, offset: 42980},
									name: "LinkTextAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1150, col: 60, offset: 43000},
							expr: &litMatcher{
								pos:        position{line: 1150, col: 60, offset: 43000},
								val:        ",",
								ignoreCase: false,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1150, col: 65, offset: 43005},
							expr: &ruleRefExpr{
								pos:  position{line: 1150, col: 65, offset: 43005},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 1150, col: 69, offset: 43009},
							label: "otherattrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1150, col: 80, offset: 43020},
								expr: &ruleRefExpr{
									pos:  position{line: 1150, col: 81, offset: 43021},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1150, col: 100, offset: 43040},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "LinkTextAttribute",
			pos:  position{line: 1154, col: 1, offset: 43125},
			expr: &choiceExpr{
				pos: position{line: 1156, col: 5, offset: 43188},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1156, col: 5, offset: 43188},
						run: (*parser).callonLinkTextAttribute2,
						expr: &seqExpr{
							pos: position{line: 1156, col: 5, offset: 43188},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1156, col: 5, offset: 43188},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1156, col: 10, offset: 43193},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 1156, col: 19, offset: 43202},
										expr: &seqExpr{
											pos: position{line: 1156, col: 20, offset: 43203},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1156, col: 20, offset: 43203},
													expr: &litMatcher{
														pos:        position{line: 1156, col: 21, offset: 43204},
														val:        "=",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 1156, col: 25, offset: 43208},
													expr: &litMatcher{
														pos:        position{line: 1156, col: 26, offset: 43209},
														val:        "]",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 1156, col: 30, offset: 43213},
													expr: &litMatcher{
														pos:        position{line: 1156, col: 31, offset: 43214},
														val:        "\"",
														ignoreCase: false,
													},
												},
												&choiceExpr{
													pos: position{line: 1156, col: 37, offset: 43220},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1156, col: 37, offset: 43220},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1156, col: 50, offset: 43233},
															name: "SimpleWord",
														},
														&ruleRefExpr{
															pos:  position{line: 1156, col: 63, offset: 43246},
															name: "Spaces",
														},
														&actionExpr{
															pos: position{line: 1156, col: 73, offset: 43256},
															run: (*parser).callonLinkTextAttribute18,
															expr: &seqExpr{
																pos: position{line: 1156, col: 74, offset: 43257},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1156, col: 74, offset: 43257},
																		expr: &ruleRefExpr{
																			pos:  position{line: 1156, col: 75, offset: 43258},
																			name: "QuotedTextPrefix",
																		},
																	},
																	&anyMatcher{
																		line: 1156, col: 92, offset: 43275,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1158, col: 11, offset: 43344},
									val:        "\"",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 1158, col: 16, offset: 43349},
									expr: &ruleRefExpr{
										pos:  position{line: 1158, col: 16, offset: 43349},
										name: "Spaces",
									},
								},
								&andExpr{
									pos: position{line: 1158, col: 24, offset: 43357},
									expr: &notExpr{
										pos: position{line: 1158, col: 26, offset: 43359},
										expr: &litMatcher{
											pos:        position{line: 1158, col: 27, offset: 43360},
											val:        "=",
											ignoreCase: false,
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1162, col: 5, offset: 43485},
						run: (*parser).callonLinkTextAttribute29,
						expr: &seqExpr{
							pos: position{line: 1162, col: 5, offset: 43485},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1162, col: 5, offset: 43485},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 1162, col: 14, offset: 43494},
										expr: &seqExpr{
											pos: position{line: 1162, col: 15, offset: 43495},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1162, col: 15, offset: 43495},
													expr: &litMatcher{
														pos:        position{line: 1162, col: 16, offset: 43496},
														val:        "=",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 1162, col: 20, offset: 43500},
													expr: &litMatcher{
														pos:        position{line: 1162, col: 21, offset: 43501},
														val:        ",",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 1162, col: 25, offset: 43505},
													expr: &litMatcher{
														pos:        position{line: 1162, col: 26, offset: 43506},
														val:        "]",
														ignoreCase: false,
													},
												},
												&choiceExpr{
													pos: position{line: 1162, col: 31, offset: 43511},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1162, col: 31, offset: 43511},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1162, col: 44, offset: 43524},
															name: "SimpleWord",
														},
														&ruleRefExpr{
															pos:  position{line: 1162, col: 57, offset: 43537},
															name: "Spaces",
														},
														&actionExpr{
															pos: position{line: 1162, col: 67, offset: 43547},
															run: (*parser).callonLinkTextAttribute44,
															expr: &seqExpr{
																pos: position{line: 1162, col: 68, offset: 43548},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1162, col: 68, offset: 43548},
																		expr: &ruleRefExpr{
																			pos:  position{line: 1162, col: 69, offset: 43549},
																			name: "QuotedTextPrefix",
																		},
																	},
																	&anyMatcher{
																		line: 1162, col: 86, offset: 43566,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&andExpr{
									pos: position{line: 1164, col: 11, offset: 43635},
									expr: &notExpr{
										pos: position{line: 1164, col: 13, offset: 43637},
										expr: &litMatcher{
											pos:        position{line: 1164, col: 14, offset: 43638},
											val:        "=",
											ignoreCase: false,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineLinks",
			pos:  position{line: 1169, col: 1, offset: 43788},
			expr: &actionExpr{
				pos: position{line: 1170, col: 5, offset: 43808},
				run: (*parser).callonInlineLinks1,
				expr: &seqExpr{
					pos: position{line: 1170, col: 5, offset: 43808},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1170, col: 5, offset: 43808},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1170, col: 14, offset: 43817},
								expr: &choiceExpr{
									pos: position{line: 1170, col: 15, offset: 43818},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1170, col: 15, offset: 43818},
											name: "SimpleWord",
										},
										&ruleRefExpr{
											pos:  position{line: 1171, col: 11, offset: 43839},
											name: "Spaces",
										},
										&ruleRefExpr{
											pos:  position{line: 1172, col: 11, offset: 43857},
											name: "ResolvedLink",
										},
										&ruleRefExpr{
											pos:  position{line: 1173, col: 11, offset: 43881},
											name: "OtherWord",
										},
										&ruleRefExpr{
											pos:  position{line: 1174, col: 11, offset: 43901},
											name: "Parenthesis",
										},
										&ruleRefExpr{
											pos:  position{line: 1175, col: 11, offset: 43923},
											name: "NEWLINE",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1175, col: 21, offset: 43933},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "ResolvedLink",
			pos:  position{line: 1179, col: 1, offset: 44003},
			expr: &choiceExpr{
				pos: position{line: 1179, col: 17, offset: 44019},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1179, col: 17, offset: 44019},
						name: "ResolvedRelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1179, col: 40, offset: 44042},
						name: "ResolvedExternalLink",
					},
				},
			},
		},
		{
			name: "ResolvedRelativeLink",
			pos:  position{line: 1182, col: 1, offset: 44178},
			expr: &actionExpr{
				pos: position{line: 1182, col: 25, offset: 44202},
				run: (*parser).callonResolvedRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1182, col: 25, offset: 44202},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1182, col: 25, offset: 44202},
							val:        "link:",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1182, col: 33, offset: 44210},
							label: "url",
							expr: &choiceExpr{
								pos: position{line: 1182, col: 38, offset: 44215},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1182, col: 38, offset: 44215},
										name: "ResolvedLocation",
									},
									&ruleRefExpr{
										pos:  position{line: 1182, col: 57, offset: 44234},
										name: "ResolvedFileLocation",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1182, col: 79, offset: 44256},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1182, col: 97, offset: 44274},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ResolvedExternalLink",
			pos:  position{line: 1186, col: 1, offset: 44392},
			expr: &actionExpr{
				pos: position{line: 1186, col: 25, offset: 44416},
				run: (*parser).callonResolvedExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1186, col: 25, offset: 44416},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1186, col: 25, offset: 44416},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1186, col: 30, offset: 44421},
								name: "ResolvedLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 1186, col: 48, offset: 44439},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1186, col: 65, offset: 44456},
								expr: &ruleRefExpr{
									pos:  position{line: 1186, col: 66, offset: 44457},
									name: "LinkAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedLink",
			pos:  position{line: 1190, col: 1, offset: 44550},
			expr: &choiceExpr{
				pos: position{line: 1190, col: 15, offset: 44564},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1190, col: 15, offset: 44564},
						name: "RelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1190, col: 30, offset: 44579},
						name: "ExternalQuotedLink",
					},
				},
			},
		},
		{
			name: "ExternalQuotedLink",
			pos:  position{line: 1192, col: 1, offset: 44599},
			expr: &actionExpr{
				pos: position{line: 1192, col: 23, offset: 44621},
				run: (*parser).callonExternalQuotedLink1,
				expr: &seqExpr{
					pos: position{line: 1192, col: 23, offset: 44621},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1192, col: 23, offset: 44621},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1192, col: 28, offset: 44626},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1192, col: 38, offset: 44636},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1192, col: 56, offset: 44654},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ImageBlock",
			pos:  position{line: 1199, col: 1, offset: 44989},
			expr: &actionExpr{
				pos: position{line: 1199, col: 15, offset: 45003},
				run: (*parser).callonImageBlock1,
				expr: &seqExpr{
					pos: position{line: 1199, col: 15, offset: 45003},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1199, col: 15, offset: 45003},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1199, col: 26, offset: 45014},
								expr: &ruleRefExpr{
									pos:  position{line: 1199, col: 27, offset: 45015},
									name: "ElementAttributes",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1199, col: 47, offset: 45035},
							val:        "image::",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1199, col: 57, offset: 45045},
							label: "path",
							expr: &choiceExpr{
								pos: position{line: 1199, col: 63, offset: 45051},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1199, col: 63, offset: 45051},
										name: "Location",
									},
									&ruleRefExpr{
										pos:  position{line: 1199, col: 74, offset: 45062},
										name: "FileLocation",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1199, col: 88, offset: 45076},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1199, col: 106, offset: 45094},
								name: "ImageAttributes",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1199, col: 123, offset: 45111},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "InlineImage",
			pos:  position{line: 1203, col: 1, offset: 45231},
			expr: &actionExpr{
				pos: position{line: 1203, col: 16, offset: 45246},
				run: (*parser).callonInlineImage1,
				expr: &seqExpr{
					pos: position{line: 1203, col: 16, offset: 45246},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1203, col: 16, offset: 45246},
							val:        "image:",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 1203, col: 25, offset: 45255},
							expr: &litMatcher{
								pos:        position{line: 1203, col: 26, offset: 45256},
								val:        ":",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 1203, col: 30, offset: 45260},
							label: "path",
							expr: &choiceExpr{
								pos: position{line: 1203, col: 36, offset: 45266},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1203, col: 36, offset: 45266},
										name: "Location",
									},
									&ruleRefExpr{
										pos:  position{line: 1203, col: 47, offset: 45277},
										name: "FileLocation",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1203, col: 61, offset: 45291},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1203, col: 79, offset: 45309},
								name: "ImageAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ImageAttributes",
			pos:  position{line: 1207, col: 1, offset: 45430},
			expr: &actionExpr{
				pos: position{line: 1207, col: 20, offset: 45449},
				run: (*parser).callonImageAttributes1,
				expr: &seqExpr{
					pos: position{line: 1207, col: 20, offset: 45449},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1207, col: 20, offset: 45449},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1207, col: 24, offset: 45453},
							label: "alt",
							expr: &zeroOrOneExpr{
								pos: position{line: 1207, col: 28, offset: 45457},
								expr: &ruleRefExpr{
									pos:  position{line: 1207, col: 29, offset: 45458},
									name: "AttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1207, col: 46, offset: 45475},
							expr: &litMatcher{
								pos:        position{line: 1207, col: 46, offset: 45475},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 1207, col: 51, offset: 45480},
							label: "width",
							expr: &zeroOrOneExpr{
								pos: position{line: 1207, col: 57, offset: 45486},
								expr: &ruleRefExpr{
									pos:  position{line: 1207, col: 58, offset: 45487},
									name: "AttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1207, col: 75, offset: 45504},
							expr: &litMatcher{
								pos:        position{line: 1207, col: 75, offset: 45504},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 1207, col: 80, offset: 45509},
							label: "height",
							expr: &zeroOrOneExpr{
								pos: position{line: 1207, col: 87, offset: 45516},
								expr: &ruleRefExpr{
									pos:  position{line: 1207, col: 88, offset: 45517},
									name: "AttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1207, col: 105, offset: 45534},
							expr: &litMatcher{
								pos:        position{line: 1207, col: 105, offset: 45534},
								val:        ",",
								ignoreCase: false,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1207, col: 110, offset: 45539},
							expr: &ruleRefExpr{
								pos:  position{line: 1207, col: 110, offset: 45539},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 1207, col: 114, offset: 45543},
							label: "otherattrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1207, col: 125, offset: 45554},
								expr: &ruleRefExpr{
									pos:  position{line: 1207, col: 126, offset: 45555},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1207, col: 145, offset: 45574},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "InlineFootnote",
			pos:  position{line: 1214, col: 1, offset: 45864},
			expr: &choiceExpr{
				pos: position{line: 1214, col: 19, offset: 45882},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1214, col: 19, offset: 45882},
						run: (*parser).callonInlineFootnote2,
						expr: &seqExpr{
							pos: position{line: 1214, col: 19, offset: 45882},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1214, col: 19, offset: 45882},
									val:        "footnote:[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1214, col: 32, offset: 45895},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1214, col: 41, offset: 45904},
										name: "FootnoteContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1214, col: 58, offset: 45921},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1216, col: 5, offset: 45989},
						run: (*parser).callonInlineFootnote8,
						expr: &seqExpr{
							pos: position{line: 1216, col: 5, offset: 45989},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1216, col: 5, offset: 45989},
									val:        "footnoteref:[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1216, col: 21, offset: 46005},
									label: "ref",
									expr: &ruleRefExpr{
										pos:  position{line: 1216, col: 26, offset: 46010},
										name: "FootnoteRef",
									},
								},
								&litMatcher{
									pos:        position{line: 1216, col: 39, offset: 46023},
									val:        ",",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1216, col: 43, offset: 46027},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1216, col: 52, offset: 46036},
										name: "FootnoteContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1216, col: 69, offset: 46053},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1218, col: 5, offset: 46131},
						run: (*parser).callonInlineFootnote17,
						expr: &seqExpr{
							pos: position{line: 1218, col: 5, offset: 46131},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1218, col: 5, offset: 46131},
									val:        "footnoteref:[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1218, col: 21, offset: 46147},
									label: "ref",
									expr: &ruleRefExpr{
										pos:  position{line: 1218, col: 26, offset: 46152},
										name: "FootnoteRef",
									},
								},
								&litMatcher{
									pos:        position{line: 1218, col: 39, offset: 46165},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FootnoteRef",
			pos:  position{line: 1222, col: 1, offset: 46273},
			expr: &actionExpr{
				pos: position{line: 1222, col: 16, offset: 46288},
				run: (*parser).callonFootnoteRef1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1222, col: 16, offset: 46288},
					expr: &choiceExpr{
						pos: position{line: 1222, col: 17, offset: 46289},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1222, col: 17, offset: 46289},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 1222, col: 29, offset: 46301},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 1222, col: 39, offset: 46311},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1222, col: 39, offset: 46311},
										expr: &litMatcher{
											pos:        position{line: 1222, col: 40, offset: 46312},
											val:        ",",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1222, col: 44, offset: 46316},
										expr: &litMatcher{
											pos:        position{line: 1222, col: 45, offset: 46317},
											val:        "]",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1222, col: 49, offset: 46321},
										expr: &ruleRefExpr{
											pos:  position{line: 1222, col: 50, offset: 46322},
											name: "EOL",
										},
									},
									&anyMatcher{
										line: 1222, col: 55, offset: 46327,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FootnoteContent",
			pos:  position{line: 1226, col: 1, offset: 46412},
			expr: &actionExpr{
				pos: position{line: 1226, col: 20, offset: 46431},
				run: (*parser).callonFootnoteContent1,
				expr: &labeledExpr{
					pos:   position{line: 1226, col: 20, offset: 46431},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1226, col: 29, offset: 46440},
						expr: &seqExpr{
							pos: position{line: 1226, col: 30, offset: 46441},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1226, col: 30, offset: 46441},
									expr: &litMatcher{
										pos:        position{line: 1226, col: 31, offset: 46442},
										val:        "]",
										ignoreCase: false,
									},
								},
								&notExpr{
									pos: position{line: 1226, col: 35, offset: 46446},
									expr: &ruleRefExpr{
										pos:  position{line: 1226, col: 36, offset: 46447},
										name: "EOL",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1226, col: 40, offset: 46451},
									expr: &ruleRefExpr{
										pos:  position{line: 1226, col: 40, offset: 46451},
										name: "WS",
									},
								},
								&notExpr{
									pos: position{line: 1226, col: 44, offset: 46455},
									expr: &ruleRefExpr{
										pos:  position{line: 1226, col: 45, offset: 46456},
										name: "InlineElementID",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1226, col: 61, offset: 46472},
									name: "InlineElement",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1226, col: 75, offset: 46486},
									expr: &ruleRefExpr{
										pos:  position{line: 1226, col: 75, offset: 46486},
										name: "WS",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DelimitedBlock",
			pos:  position{line: 1233, col: 1, offset: 46800},
			expr: &actionExpr{
				pos: position{line: 1233, col: 19, offset: 46818},
				run: (*parser).callonDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 1233, col: 19, offset: 46818},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1233, col: 19, offset: 46818},
							expr: &ruleRefExpr{
								pos:  position{line: 1233, col: 20, offset: 46819},
								name: "Alphanum",
							},
						},
						&labeledExpr{
							pos:   position{line: 1234, col: 5, offset: 46848},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 1234, col: 12, offset: 46855},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1234, col: 12, offset: 46855},
										name: "FencedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1235, col: 11, offset: 46878},
										name: "ListingBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1236, col: 11, offset: 46902},
										name: "ExampleBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1237, col: 11, offset: 46926},
										name: "VerseBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1238, col: 11, offset: 46948},
										name: "QuoteBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1239, col: 11, offset: 46970},
										name: "SidebarBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1240, col: 11, offset: 46993},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 1241, col: 11, offset: 47021},
										name: "Table",
									},
									&ruleRefExpr{
										pos:  position{line: 1242, col: 11, offset: 47037},
										name: "CommentBlock",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockDelimiter",
			pos:  position{line: 1246, col: 1, offset: 47078},
			expr: &choiceExpr{
				pos: position{line: 1246, col: 19, offset: 47096},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1246, col: 19, offset: 47096},
						name: "LiteralBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1247, col: 19, offset: 47137},
						name: "FencedBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1248, col: 19, offset: 47177},
						name: "ListingBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1249, col: 19, offset: 47218},
						name: "ExampleBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1250, col: 19, offset: 47259},
						name: "CommentBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1251, col: 19, offset: 47300},
						name: "QuoteBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1252, col: 19, offset: 47338},
						name: "SidebarBlockDelimiter",
					},
				},
			},
		},
		{
			name: "FencedBlockDelimiter",
			pos:  position{line: 1258, col: 1, offset: 47557},
			expr: &seqExpr{
				pos: position{line: 1258, col: 25, offset: 47581},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1258, col: 25, offset: 47581},
						val:        "```",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1258, col: 31, offset: 47587},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "FencedBlock",
			pos:  position{line: 1260, col: 1, offset: 47593},
			expr: &actionExpr{
				pos: position{line: 1260, col: 16, offset: 47608},
				run: (*parser).callonFencedBlock1,
				expr: &seqExpr{
					pos: position{line: 1260, col: 16, offset: 47608},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1260, col: 16, offset: 47608},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1260, col: 27, offset: 47619},
								expr: &ruleRefExpr{
									pos:  position{line: 1260, col: 28, offset: 47620},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1260, col: 48, offset: 47640},
							name: "FencedBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1260, col: 69, offset: 47661},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1260, col: 77, offset: 47669},
								expr: &ruleRefExpr{
									pos:  position{line: 1260, col: 78, offset: 47670},
									name: "FencedBlockContent",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1260, col: 100, offset: 47692},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1260, col: 100, offset: 47692},
									name: "FencedBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1260, col: 123, offset: 47715},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FencedBlockContent",
			pos:  position{line: 1264, col: 1, offset: 47823},
			expr: &choiceExpr{
				pos: position{line: 1264, col: 23, offset: 47845},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1264, col: 23, offset: 47845},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 1264, col: 35, offset: 47857},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 1264, col: 51, offset: 47873},
						name: "ListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 1264, col: 62, offset: 47884},
						name: "FencedBlockParagraph",
					},
				},
			},
		},
		{
			name: "FencedBlockParagraph",
			pos:  position{line: 1267, col: 1, offset: 47924},
			expr: &actionExpr{
				pos: position{line: 1267, col: 25, offset: 47948},
				run: (*parser).callonFencedBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1267, col: 25, offset: 47948},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1267, col: 31, offset: 47954},
						expr: &ruleRefExpr{
							pos:  position{line: 1267, col: 32, offset: 47955},
							name: "FencedBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "FencedBlockParagraphLine",
			pos:  position{line: 1271, col: 1, offset: 48068},
			expr: &actionExpr{
				pos: position{line: 1271, col: 29, offset: 48096},
				run: (*parser).callonFencedBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1271, col: 29, offset: 48096},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1271, col: 29, offset: 48096},
							expr: &ruleRefExpr{
								pos:  position{line: 1271, col: 30, offset: 48097},
								name: "FencedBlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 1271, col: 51, offset: 48118},
							expr: &ruleRefExpr{
								pos:  position{line: 1271, col: 52, offset: 48119},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1271, col: 62, offset: 48129},
							label: "line",
							expr: &ruleRefExpr{
								pos:  position{line: 1271, col: 68, offset: 48135},
								name: "InlineElements",
							},
						},
					},
				},
			},
		},
		{
			name: "ListingBlockDelimiter",
			pos:  position{line: 1278, col: 1, offset: 48373},
			expr: &seqExpr{
				pos: position{line: 1278, col: 26, offset: 48398},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1278, col: 26, offset: 48398},
						val:        "----",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1278, col: 33, offset: 48405},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "ListingBlock",
			pos:  position{line: 1280, col: 1, offset: 48411},
			expr: &actionExpr{
				pos: position{line: 1280, col: 17, offset: 48427},
				run: (*parser).callonListingBlock1,
				expr: &seqExpr{
					pos: position{line: 1280, col: 17, offset: 48427},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1280, col: 17, offset: 48427},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1280, col: 28, offset: 48438},
								expr: &ruleRefExpr{
									pos:  position{line: 1280, col: 29, offset: 48439},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1280, col: 49, offset: 48459},
							name: "ListingBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1280, col: 71, offset: 48481},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1280, col: 79, offset: 48489},
								expr: &ruleRefExpr{
									pos:  position{line: 1280, col: 80, offset: 48490},
									name: "ListingBlockElement",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1280, col: 103, offset: 48513},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1280, col: 103, offset: 48513},
									name: "ListingBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1280, col: 127, offset: 48537},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListingBlockElement",
			pos:  position{line: 1284, col: 1, offset: 48646},
			expr: &choiceExpr{
				pos: position{line: 1284, col: 24, offset: 48669},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1284, col: 24, offset: 48669},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 1284, col: 40, offset: 48685},
						name: "ListingBlockParagraph",
					},
					&ruleRefExpr{
						pos:  position{line: 1284, col: 64, offset: 48709},
						name: "BlankLine",
					},
				},
			},
		},
		{
			name: "ListingBlockParagraph",
			pos:  position{line: 1286, col: 1, offset: 48720},
			expr: &actionExpr{
				pos: position{line: 1286, col: 26, offset: 48745},
				run: (*parser).callonListingBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1286, col: 26, offset: 48745},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1286, col: 32, offset: 48751},
						expr: &ruleRefExpr{
							pos:  position{line: 1286, col: 33, offset: 48752},
							name: "ListingBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "ListingBlockParagraphLine",
			pos:  position{line: 1290, col: 1, offset: 48871},
			expr: &actionExpr{
				pos: position{line: 1290, col: 30, offset: 48900},
				run: (*parser).callonListingBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1290, col: 30, offset: 48900},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1290, col: 30, offset: 48900},
							expr: &ruleRefExpr{
								pos:  position{line: 1290, col: 31, offset: 48901},
								name: "ListingBlockDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1290, col: 53, offset: 48923},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1290, col: 59, offset: 48929},
								run: (*parser).callonListingBlockParagraphLine6,
								expr: &seqExpr{
									pos: position{line: 1290, col: 59, offset: 48929},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1290, col: 59, offset: 48929},
											expr: &ruleRefExpr{
												pos:  position{line: 1290, col: 60, offset: 48930},
												name: "EOF",
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 1290, col: 64, offset: 48934},
											expr: &choiceExpr{
												pos: position{line: 1290, col: 65, offset: 48935},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 1290, col: 65, offset: 48935},
														name: "Alphanums",
													},
													&ruleRefExpr{
														pos:  position{line: 1290, col: 77, offset: 48947},
														name: "Spaces",
													},
													&seqExpr{
														pos: position{line: 1290, col: 87, offset: 48957},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 1290, col: 87, offset: 48957},
																expr: &ruleRefExpr{
																	pos:  position{line: 1290, col: 88, offset: 48958},
																	name: "EOL",
																},
															},
															&anyMatcher{
																line: 1290, col: 92, offset: 48962,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1290, col: 128, offset: 48998},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockDelimiter",
			pos:  position{line: 1297, col: 1, offset: 49324},
			expr: &seqExpr{
				pos: position{line: 1297, col: 26, offset: 49349},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1297, col: 26, offset: 49349},
						val:        "====",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1297, col: 33, offset: 49356},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "ExampleBlock",
			pos:  position{line: 1299, col: 1, offset: 49362},
			expr: &actionExpr{
				pos: position{line: 1299, col: 17, offset: 49378},
				run: (*parser).callonExampleBlock1,
				expr: &seqExpr{
					pos: position{line: 1299, col: 17, offset: 49378},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1299, col: 17, offset: 49378},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1299, col: 28, offset: 49389},
								expr: &ruleRefExpr{
									pos:  position{line: 1299, col: 29, offset: 49390},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1299, col: 49, offset: 49410},
							name: "ExampleBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1299, col: 71, offset: 49432},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1299, col: 79, offset: 49440},
								expr: &choiceExpr{
									pos: position{line: 1299, col: 80, offset: 49441},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1299, col: 80, offset: 49441},
											name: "BlankLine",
										},
										&ruleRefExpr{
											pos:  position{line: 1299, col: 92, offset: 49453},
											name: "FileInclusion",
										},
										&ruleRefExpr{
											pos:  position{line: 1299, col: 108, offset: 49469},
											name: "ListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1299, col: 119, offset: 49480},
											name: "ExampleBlockParagraph",
										},
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1299, col: 145, offset: 49506},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1299, col: 145, offset: 49506},
									name: "ExampleBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1299, col: 169, offset: 49530},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockParagraph",
			pos:  position{line: 1304, col: 1, offset: 49657},
			expr: &actionExpr{
				pos: position{line: 1304, col: 26, offset: 49682},
				run: (*parser).callonExampleBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1304, col: 26, offset: 49682},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1304, col: 32, offset: 49688},
						expr: &ruleRefExpr{
							pos:  position{line: 1304, col: 33, offset: 49689},
							name: "ExampleBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockParagraphLine",
			pos:  position{line: 1308, col: 1, offset: 49803},
			expr: &actionExpr{
				pos: position{line: 1308, col: 30, offset: 49832},
				run: (*parser).callonExampleBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1308, col: 30, offset: 49832},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1308, col: 30, offset: 49832},
							expr: &ruleRefExpr{
								pos:  position{line: 1308, col: 31, offset: 49833},
								name: "ExampleBlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 1308, col: 53, offset: 49855},
							expr: &ruleRefExpr{
								pos:  position{line: 1308, col: 54, offset: 49856},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1308, col: 64, offset: 49866},
							label: "line",
							expr: &ruleRefExpr{
								pos:  position{line: 1308, col: 70, offset: 49872},
								name: "InlineElements",
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockDelimiter",
			pos:  position{line: 1315, col: 1, offset: 50108},
			expr: &seqExpr{
				pos: position{line: 1315, col: 24, offset: 50131},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1315, col: 24, offset: 50131},
						val:        "____",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1315, col: 31, offset: 50138},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "QuoteBlock",
			pos:  position{line: 1317, col: 1, offset: 50169},
			expr: &actionExpr{
				pos: position{line: 1317, col: 15, offset: 50183},
				run: (*parser).callonQuoteBlock1,
				expr: &seqExpr{
					pos: position{line: 1317, col: 15, offset: 50183},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1317, col: 15, offset: 50183},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1317, col: 26, offset: 50194},
								expr: &ruleRefExpr{
									pos:  position{line: 1317, col: 27, offset: 50195},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1317, col: 47, offset: 50215},
							name: "QuoteBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1317, col: 67, offset: 50235},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1317, col: 75, offset: 50243},
								expr: &ruleRefExpr{
									pos:  position{line: 1317, col: 76, offset: 50244},
									name: "QuoteBlockElement",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1317, col: 97, offset: 50265},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1317, col: 97, offset: 50265},
									name: "QuoteBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1317, col: 119, offset: 50287},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockElement",
			pos:  position{line: 1321, col: 1, offset: 50394},
			expr: &actionExpr{
				pos: position{line: 1322, col: 5, offset: 50420},
				run: (*parser).callonQuoteBlockElement1,
				expr: &seqExpr{
					pos: position{line: 1322, col: 5, offset: 50420},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1322, col: 5, offset: 50420},
							expr: &ruleRefExpr{
								pos:  position{line: 1322, col: 6, offset: 50421},
								name: "QuoteBlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 1322, col: 26, offset: 50441},
							expr: &ruleRefExpr{
								pos:  position{line: 1322, col: 27, offset: 50442},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1322, col: 31, offset: 50446},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1322, col: 40, offset: 50455},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1322, col: 40, offset: 50455},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 1323, col: 15, offset: 50480},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 1324, col: 15, offset: 50508},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1325, col: 15, offset: 50534},
										name: "ListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 1326, col: 15, offset: 50557},
										name: "FencedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1327, col: 15, offset: 50583},
										name: "ListingBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1328, col: 15, offset: 50610},
										name: "ExampleBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1329, col: 15, offset: 50637},
										name: "CommentBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1330, col: 15, offset: 50664},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 1331, col: 15, offset: 50696},
										name: "QuoteBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1332, col: 15, offset: 50722},
										name: "SidebarBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1333, col: 15, offset: 50749},
										name: "Table",
									},
									&ruleRefExpr{
										pos:  position{line: 1334, col: 15, offset: 50770},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1335, col: 15, offset: 50798},
										name: "DocumentAttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 1336, col: 15, offset: 50842},
										name: "DocumentAttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 1337, col: 15, offset: 50880},
										name: "TableOfContentsMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 1338, col: 15, offset: 50915},
										name: "QuoteBlockParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockParagraph",
			pos:  position{line: 1342, col: 1, offset: 50974},
			expr: &actionExpr{
				pos: position{line: 1342, col: 24, offset: 50997},
				run: (*parser).callonQuoteBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1342, col: 24, offset: 50997},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1342, col: 30, offset: 51003},
						expr: &ruleRefExpr{
							pos:  position{line: 1342, col: 31, offset: 51004},
							name: "InlineElements",
						},
					},
				},
			},
		},
		{
			name: "VerseBlock",
			pos:  position{line: 1351, col: 1, offset: 51350},
			expr: &actionExpr{
				pos: position{line: 1351, col: 15, offset: 51364},
				run: (*parser).callonVerseBlock1,
				expr: &seqExpr{
					pos: position{line: 1351, col: 15, offset: 51364},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1351, col: 15, offset: 51364},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1351, col: 27, offset: 51376},
								name: "ElementAttributes",
							},
						},
						&andCodeExpr{
							pos: position{line: 1352, col: 5, offset: 51400},
							run: (*parser).callonVerseBlock5,
						},
						&ruleRefExpr{
							pos:  position{line: 1356, col: 5, offset: 51586},
							name: "QuoteBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1356, col: 25, offset: 51606},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1356, col: 33, offset: 51614},
								expr: &ruleRefExpr{
									pos:  position{line: 1356, col: 34, offset: 51615},
									name: "VerseBlockElement",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1356, col: 55, offset: 51636},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1356, col: 55, offset: 51636},
									name: "QuoteBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1356, col: 77, offset: 51658},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockElement",
			pos:  position{line: 1360, col: 1, offset: 51773},
			expr: &choiceExpr{
				pos: position{line: 1360, col: 22, offset: 51794},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1360, col: 22, offset: 51794},
						name: "VerseFileInclude",
					},
					&ruleRefExpr{
						pos:  position{line: 1360, col: 41, offset: 51813},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 1360, col: 53, offset: 51825},
						name: "VerseBlockParagraph",
					},
				},
			},
		},
		{
			name: "VerseFileInclude",
			pos:  position{line: 1362, col: 1, offset: 51846},
			expr: &actionExpr{
				pos: position{line: 1362, col: 21, offset: 51866},
				run: (*parser).callonVerseFileInclude1,
				expr: &seqExpr{
					pos: position{line: 1362, col: 21, offset: 51866},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1362, col: 21, offset: 51866},
							expr: &ruleRefExpr{
								pos:  position{line: 1362, col: 22, offset: 51867},
								name: "QuoteBlockDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1362, col: 42, offset: 51887},
							label: "include",
							expr: &ruleRefExpr{
								pos:  position{line: 1362, col: 51, offset: 51896},
								name: "FileInclusion",
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraph",
			pos:  position{line: 1367, col: 1, offset: 51958},
			expr: &actionExpr{
				pos: position{line: 1367, col: 24, offset: 51981},
				run: (*parser).callonVerseBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1367, col: 24, offset: 51981},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1367, col: 30, offset: 51987},
						expr: &ruleRefExpr{
							pos:  position{line: 1367, col: 31, offset: 51988},
							name: "VerseBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraphLine",
			pos:  position{line: 1371, col: 1, offset: 52078},
			expr: &actionExpr{
				pos: position{line: 1371, col: 28, offset: 52105},
				run: (*parser).callonVerseBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1371, col: 28, offset: 52105},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1371, col: 28, offset: 52105},
							expr: &ruleRefExpr{
								pos:  position{line: 1371, col: 29, offset: 52106},
								name: "QuoteBlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 1371, col: 49, offset: 52126},
							expr: &ruleRefExpr{
								pos:  position{line: 1371, col: 50, offset: 52127},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1371, col: 60, offset: 52137},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1371, col: 66, offset: 52143},
								run: (*parser).callonVerseBlockParagraphLine8,
								expr: &seqExpr{
									pos: position{line: 1371, col: 66, offset: 52143},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 1371, col: 66, offset: 52143},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 1371, col: 75, offset: 52152},
												expr: &ruleRefExpr{
													pos:  position{line: 1371, col: 76, offset: 52153},
													name: "VerseBlockParagraphLineElement",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1371, col: 109, offset: 52186},
											name: "EOL",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraphLineElement",
			pos:  position{line: 1377, col: 1, offset: 52282},
			expr: &actionExpr{
				pos: position{line: 1377, col: 35, offset: 52316},
				run: (*parser).callonVerseBlockParagraphLineElement1,
				expr: &seqExpr{
					pos: position{line: 1377, col: 35, offset: 52316},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1377, col: 35, offset: 52316},
							expr: &ruleRefExpr{
								pos:  position{line: 1377, col: 36, offset: 52317},
								name: "EOL",
							},
						},
						&notExpr{
							pos: position{line: 1377, col: 40, offset: 52321},
							expr: &ruleRefExpr{
								pos:  position{line: 1377, col: 41, offset: 52322},
								name: "LineBreak",
							},
						},
						&labeledExpr{
							pos:   position{line: 1378, col: 5, offset: 52337},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1378, col: 14, offset: 52346},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1378, col: 14, offset: 52346},
										name: "Spaces",
									},
									&ruleRefExpr{
										pos:  position{line: 1379, col: 11, offset: 52364},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 1380, col: 11, offset: 52387},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 1381, col: 11, offset: 52403},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 1382, col: 11, offset: 52426},
										name: "InlineFootnote",
									},
									&ruleRefExpr{
										pos:  position{line: 1383, col: 11, offset: 52452},
										name: "QuotedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1384, col: 11, offset: 52474},
										name: "CrossReference",
									},
									&ruleRefExpr{
										pos:  position{line: 1385, col: 11, offset: 52500},
										name: "InlineUserMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 1386, col: 11, offset: 52527},
										name: "DocumentAttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 1387, col: 11, offset: 52568},
										name: "InlineElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 1388, col: 11, offset: 52595},
										name: "OtherWord",
									},
									&ruleRefExpr{
										pos:  position{line: 1389, col: 11, offset: 52615},
										name: "Parenthesis",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockDelimiter",
			pos:  position{line: 1396, col: 1, offset: 52847},
			expr: &seqExpr{
				pos: position{line: 1396, col: 26, offset: 52872},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1396, col: 26, offset: 52872},
						val:        "****",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1396, col: 33, offset: 52879},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "SidebarBlock",
			pos:  position{line: 1398, col: 1, offset: 52885},
			expr: &actionExpr{
				pos: position{line: 1398, col: 17, offset: 52901},
				run: (*parser).callonSidebarBlock1,
				expr: &seqExpr{
					pos: position{line: 1398, col: 17, offset: 52901},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1398, col: 17, offset: 52901},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1398, col: 28, offset: 52912},
								expr: &ruleRefExpr{
									pos:  position{line: 1398, col: 29, offset: 52913},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1398, col: 49, offset: 52933},
							name: "SidebarBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1398, col: 71, offset: 52955},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1398, col: 79, offset: 52963},
								expr: &ruleRefExpr{
									pos:  position{line: 1398, col: 80, offset: 52964},
									name: "SidebarBlockContent",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1398, col: 104, offset: 52988},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1398, col: 104, offset: 52988},
									name: "SidebarBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1398, col: 128, offset: 53012},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockContent",
			pos:  position{line: 1402, col: 1, offset: 53121},
			expr: &choiceExpr{
				pos: position{line: 1402, col: 24, offset: 53144},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1402, col: 24, offset: 53144},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 1402, col: 36, offset: 53156},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 1402, col: 52, offset: 53172},
						name: "ListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 1402, col: 63, offset: 53183},
						name: "NonSidebarBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 1402, col: 81, offset: 53201},
						name: "SidebarBlockParagraph",
					},
				},
			},
		},
		{
			name: "NonSidebarBlock",
			pos:  position{line: 1404, col: 1, offset: 53224},
			expr: &actionExpr{
				pos: position{line: 1404, col: 20, offset: 53243},
				run: (*parser).callonNonSidebarBlock1,
				expr: &seqExpr{
					pos: position{line: 1404, col: 20, offset: 53243},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1404, col: 20, offset: 53243},
							expr: &ruleRefExpr{
								pos:  position{line: 1404, col: 21, offset: 53244},
								name: "SidebarBlock",
							},
						},
						&labeledExpr{
							pos:   position{line: 1404, col: 34, offset: 53257},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1404, col: 43, offset: 53266},
								name: "DelimitedBlock",
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockParagraph",
			pos:  position{line: 1409, col: 1, offset: 53329},
			expr: &actionExpr{
				pos: position{line: 1409, col: 26, offset: 53354},
				run: (*parser).callonSidebarBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1409, col: 26, offset: 53354},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1409, col: 32, offset: 53360},
						expr: &ruleRefExpr{
							pos:  position{line: 1409, col: 33, offset: 53361},
							name: "SidebarBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockParagraphLine",
			pos:  position{line: 1413, col: 1, offset: 53475},
			expr: &actionExpr{
				pos: position{line: 1413, col: 30, offset: 53504},
				run: (*parser).callonSidebarBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1413, col: 30, offset: 53504},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1413, col: 30, offset: 53504},
							expr: &ruleRefExpr{
								pos:  position{line: 1413, col: 31, offset: 53505},
								name: "SidebarBlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 1413, col: 53, offset: 53527},
							expr: &ruleRefExpr{
								pos:  position{line: 1413, col: 54, offset: 53528},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1413, col: 64, offset: 53538},
							label: "line",
							expr: &ruleRefExpr{
								pos:  position{line: 1413, col: 70, offset: 53544},
								name: "InlineElements",
							},
						},
					},
				},
			},
		},
		{
			name: "Table",
			pos:  position{line: 1421, col: 1, offset: 53775},
			expr: &actionExpr{
				pos: position{line: 1421, col: 10, offset: 53784},
				run: (*parser).callonTable1,
				expr: &seqExpr{
					pos: position{line: 1421, col: 10, offset: 53784},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1421, col: 10, offset: 53784},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1421, col: 21, offset: 53795},
								expr: &ruleRefExpr{
									pos:  position{line: 1421, col: 22, offset: 53796},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1421, col: 42, offset: 53816},
							name: "TableDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1422, col: 5, offset: 53835},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 1422, col: 12, offset: 53842},
								expr: &ruleRefExpr{
									pos:  position{line: 1422, col: 13, offset: 53843},
									name: "TableLineHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1423, col: 5, offset: 53865},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1423, col: 11, offset: 53871},
								expr: &ruleRefExpr{
									pos:  position{line: 1423, col: 12, offset: 53872},
									name: "TableLine",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1424, col: 6, offset: 53889},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1424, col: 6, offset: 53889},
									name: "TableDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1424, col: 23, offset: 53906},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TableCellSeparator",
			pos:  position{line: 1428, col: 1, offset: 54021},
			expr: &seqExpr{
				pos: position{line: 1428, col: 23, offset: 54043},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1428, col: 23, offset: 54043},
						val:        "|",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1428, col: 27, offset: 54047},
						expr: &ruleRefExpr{
							pos:  position{line: 1428, col: 27, offset: 54047},
							name: "WS",
						},
					},
				},
			},
		},
		{
			name: "TableDelimiter",
			pos:  position{line: 1430, col: 1, offset: 54052},
			expr: &seqExpr{
				pos: position{line: 1430, col: 19, offset: 54070},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1430, col: 19, offset: 54070},
						val:        "|===",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1430, col: 26, offset: 54077},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "TableLineHeader",
			pos:  position{line: 1433, col: 1, offset: 54146},
			expr: &actionExpr{
				pos: position{line: 1433, col: 20, offset: 54165},
				run: (*parser).callonTableLineHeader1,
				expr: &seqExpr{
					pos: position{line: 1433, col: 20, offset: 54165},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1433, col: 20, offset: 54165},
							expr: &ruleRefExpr{
								pos:  position{line: 1433, col: 21, offset: 54166},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1433, col: 36, offset: 54181},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1433, col: 42, offset: 54187},
								expr: &ruleRefExpr{
									pos:  position{line: 1433, col: 43, offset: 54188},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1433, col: 55, offset: 54200},
							name: "EOL",
						},
						&ruleRefExpr{
							pos:  position{line: 1433, col: 59, offset: 54204},
							name: "BlankLine",
						},
					},
				},
			},
		},
		{
			name: "TableLine",
			pos:  position{line: 1437, col: 1, offset: 54272},
			expr: &actionExpr{
				pos: position{line: 1437, col: 14, offset: 54285},
				run: (*parser).callonTableLine1,
				expr: &seqExpr{
					pos: position{line: 1437, col: 14, offset: 54285},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1437, col: 14, offset: 54285},
							expr: &ruleRefExpr{
								pos:  position{line: 1437, col: 15, offset: 54286},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1437, col: 30, offset: 54301},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1437, col: 36, offset: 54307},
								expr: &ruleRefExpr{
									pos:  position{line: 1437, col: 37, offset: 54308},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1437, col: 49, offset: 54320},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1437, col: 53, offset: 54324},
							expr: &ruleRefExpr{
								pos:  position{line: 1437, col: 53, offset: 54324},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "TableCell",
			pos:  position{line: 1441, col: 1, offset: 54393},
			expr: &actionExpr{
				pos: position{line: 1441, col: 14, offset: 54406},
				run: (*parser).callonTableCell1,
				expr: &seqExpr{
					pos: position{line: 1441, col: 14, offset: 54406},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1441, col: 14, offset: 54406},
							name: "TableCellSeparator",
						},
						&labeledExpr{
							pos:   position{line: 1441, col: 33, offset: 54425},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1441, col: 42, offset: 54434},
								expr: &seqExpr{
									pos: position{line: 1441, col: 43, offset: 54435},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1441, col: 43, offset: 54435},
											expr: &ruleRefExpr{
												pos:  position{line: 1441, col: 44, offset: 54436},
												name: "TableCellSeparator",
											},
										},
										&notExpr{
											pos: position{line: 1441, col: 63, offset: 54455},
											expr: &ruleRefExpr{
												pos:  position{line: 1441, col: 64, offset: 54456},
												name: "EOL",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 1441, col: 68, offset: 54460},
											expr: &ruleRefExpr{
												pos:  position{line: 1441, col: 68, offset: 54460},
												name: "WS",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1441, col: 72, offset: 54464},
											name: "InlineElement",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1441, col: 86, offset: 54478},
											expr: &ruleRefExpr{
												pos:  position{line: 1441, col: 86, offset: 54478},
												name: "WS",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CommentBlockDelimiter",
			pos:  position{line: 1448, col: 1, offset: 54724},
			expr: &litMatcher{
				pos:        position{line: 1448, col: 26, offset: 54749},
				val:        "////",
				ignoreCase: false,
			},
		},
		{
			name: "CommentBlock",
			pos:  position{line: 1450, col: 1, offset: 54757},
			expr: &actionExpr{
				pos: position{line: 1450, col: 17, offset: 54773},
				run: (*parser).callonCommentBlock1,
				expr: &seqExpr{
					pos: position{line: 1450, col: 17, offset: 54773},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1450, col: 17, offset: 54773},
							name: "CommentBlockDelimiter",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1450, col: 39, offset: 54795},
							expr: &ruleRefExpr{
								pos:  position{line: 1450, col: 39, offset: 54795},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1450, col: 43, offset: 54799},
							name: "NEWLINE",
						},
						&labeledExpr{
							pos:   position{line: 1450, col: 51, offset: 54807},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1450, col: 59, offset: 54815},
								expr: &ruleRefExpr{
									pos:  position{line: 1450, col: 60, offset: 54816},
									name: "CommentBlockLine",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1450, col: 81, offset: 54837},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 1450, col: 82, offset: 54838},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1450, col: 82, offset: 54838},
											name: "CommentBlockDelimiter",
										},
										&ruleRefExpr{
											pos:  position{line: 1450, col: 104, offset: 54860},
											name: "EOLS",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1450, col: 112, offset: 54868},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CommentBlockLine",
			pos:  position{line: 1454, col: 1, offset: 54974},
			expr: &actionExpr{
				pos: position{line: 1454, col: 21, offset: 54994},
				run: (*parser).callonCommentBlockLine1,
				expr: &seqExpr{
					pos: position{line: 1454, col: 21, offset: 54994},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 1454, col: 21, offset: 54994},
							expr: &choiceExpr{
								pos: position{line: 1454, col: 22, offset: 54995},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1454, col: 22, offset: 54995},
										name: "Alphanums",
									},
									&ruleRefExpr{
										pos:  position{line: 1454, col: 34, offset: 55007},
										name: "Spaces",
									},
									&seqExpr{
										pos: position{line: 1454, col: 44, offset: 55017},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1454, col: 44, offset: 55017},
												expr: &ruleRefExpr{
													pos:  position{line: 1454, col: 45, offset: 55018},
													name: "CommentBlockDelimiter",
												},
											},
											&notExpr{
												pos: position{line: 1454, col: 67, offset: 55040},
												expr: &ruleRefExpr{
													pos:  position{line: 1454, col: 68, offset: 55041},
													name: "EOL",
												},
											},
											&anyMatcher{
												line: 1454, col: 72, offset: 55045,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1454, col: 77, offset: 55050},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1458, col: 1, offset: 55090},
			expr: &actionExpr{
				pos: position{line: 1458, col: 22, offset: 55111},
				run: (*parser).callonSingleLineComment1,
				expr: &seqExpr{
					pos: position{line: 1458, col: 22, offset: 55111},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1458, col: 22, offset: 55111},
							expr: &ruleRefExpr{
								pos:  position{line: 1458, col: 23, offset: 55112},
								name: "CommentBlockDelimiter",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1458, col: 45, offset: 55134},
							expr: &ruleRefExpr{
								pos:  position{line: 1458, col: 45, offset: 55134},
								name: "WS",
							},
						},
						&litMatcher{
							pos:        position{line: 1458, col: 49, offset: 55138},
							val:        "//",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1458, col: 54, offset: 55143},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1458, col: 63, offset: 55152},
								name: "SingleLineCommentContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1458, col: 89, offset: 55178},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SingleLineCommentContent",
			pos:  position{line: 1462, col: 1, offset: 55243},
			expr: &actionExpr{
				pos: position{line: 1462, col: 29, offset: 55271},
				run: (*parser).callonSingleLineCommentContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1462, col: 29, offset: 55271},
					expr: &choiceExpr{
						pos: position{line: 1462, col: 30, offset: 55272},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1462, col: 30, offset: 55272},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 1462, col: 42, offset: 55284},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 1462, col: 52, offset: 55294},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1462, col: 52, offset: 55294},
										expr: &ruleRefExpr{
											pos:  position{line: 1462, col: 53, offset: 55295},
											name: "EOL",
										},
									},
									&anyMatcher{
										line: 1462, col: 58, offset: 55300,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralBlock",
			pos:  position{line: 1470, col: 1, offset: 55609},
			expr: &choiceExpr{
				pos: position{line: 1470, col: 17, offset: 55625},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1470, col: 17, offset: 55625},
						name: "ParagraphWithLiteralAttribute",
					},
					&ruleRefExpr{
						pos:  position{line: 1470, col: 49, offset: 55657},
						name: "ParagraphWithHeadingSpaces",
					},
					&ruleRefExpr{
						pos:  position{line: 1470, col: 78, offset: 55686},
						name: "ParagraphWithLiteralBlockDelimiter",
					},
				},
			},
		},
		{
			name: "LiteralBlockDelimiter",
			pos:  position{line: 1472, col: 1, offset: 55722},
			expr: &litMatcher{
				pos:        position{line: 1472, col: 26, offset: 55747},
				val:        "....",
				ignoreCase: false,
			},
		},
		{
			name: "ParagraphWithHeadingSpaces",
			pos:  position{line: 1475, col: 1, offset: 55819},
			expr: &actionExpr{
				pos: position{line: 1475, col: 31, offset: 55849},
				run: (*parser).callonParagraphWithHeadingSpaces1,
				expr: &seqExpr{
					pos: position{line: 1475, col: 31, offset: 55849},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1475, col: 31, offset: 55849},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1475, col: 42, offset: 55860},
								expr: &ruleRefExpr{
									pos:  position{line: 1475, col: 43, offset: 55861},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1475, col: 63, offset: 55881},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1475, col: 70, offset: 55888},
								name: "ParagraphWithHeadingSpacesLines",
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithHeadingSpacesLines",
			pos:  position{line: 1480, col: 1, offset: 56118},
			expr: &actionExpr{
				pos: position{line: 1481, col: 5, offset: 56158},
				run: (*parser).callonParagraphWithHeadingSpacesLines1,
				expr: &seqExpr{
					pos: position{line: 1481, col: 5, offset: 56158},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1481, col: 5, offset: 56158},
							label: "firstLine",
							expr: &actionExpr{
								pos: position{line: 1481, col: 16, offset: 56169},
								run: (*parser).callonParagraphWithHeadingSpacesLines4,
								expr: &seqExpr{
									pos: position{line: 1481, col: 16, offset: 56169},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1481, col: 16, offset: 56169},
											name: "WS",
										},
										&oneOrMoreExpr{
											pos: position{line: 1481, col: 19, offset: 56172},
											expr: &choiceExpr{
												pos: position{line: 1481, col: 20, offset: 56173},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 1481, col: 20, offset: 56173},
														name: "Alphanums",
													},
													&ruleRefExpr{
														pos:  position{line: 1481, col: 32, offset: 56185},
														name: "Spaces",
													},
													&actionExpr{
														pos: position{line: 1481, col: 41, offset: 56194},
														run: (*parser).callonParagraphWithHeadingSpacesLines11,
														expr: &seqExpr{
															pos: position{line: 1481, col: 42, offset: 56195},
															exprs: []interface{}{
																&notExpr{
																	pos: position{line: 1481, col: 42, offset: 56195},
																	expr: &ruleRefExpr{
																		pos:  position{line: 1481, col: 43, offset: 56196},
																		name: "EOL",
																	},
																},
																&anyMatcher{
																	line: 1481, col: 48, offset: 56201,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1485, col: 8, offset: 56292},
							name: "EOL",
						},
						&labeledExpr{
							pos:   position{line: 1486, col: 5, offset: 56355},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1486, col: 16, offset: 56366},
								expr: &actionExpr{
									pos: position{line: 1487, col: 9, offset: 56376},
									run: (*parser).callonParagraphWithHeadingSpacesLines19,
									expr: &seqExpr{
										pos: position{line: 1487, col: 9, offset: 56376},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1487, col: 9, offset: 56376},
												expr: &ruleRefExpr{
													pos:  position{line: 1487, col: 10, offset: 56377},
													name: "BlankLine",
												},
											},
											&labeledExpr{
												pos:   position{line: 1488, col: 9, offset: 56396},
												label: "otherLine",
												expr: &actionExpr{
													pos: position{line: 1488, col: 20, offset: 56407},
													run: (*parser).callonParagraphWithHeadingSpacesLines24,
													expr: &oneOrMoreExpr{
														pos: position{line: 1488, col: 20, offset: 56407},
														expr: &choiceExpr{
															pos: position{line: 1488, col: 21, offset: 56408},
															alternatives: []interface{}{
																&ruleRefExpr{
																	pos:  position{line: 1488, col: 21, offset: 56408},
																	name: "Alphanums",
																},
																&ruleRefExpr{
																	pos:  position{line: 1488, col: 33, offset: 56420},
																	name: "Spaces",
																},
																&seqExpr{
																	pos: position{line: 1488, col: 43, offset: 56430},
																	exprs: []interface{}{
																		&notExpr{
																			pos: position{line: 1488, col: 43, offset: 56430},
																			expr: &ruleRefExpr{
																				pos:  position{line: 1488, col: 44, offset: 56431},
																				name: "EOL",
																			},
																		},
																		&anyMatcher{
																			line: 1488, col: 49, offset: 56436,
																		},
																	},
																},
															},
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 1490, col: 12, offset: 56493},
												name: "EOL",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiter",
			pos:  position{line: 1497, col: 1, offset: 56723},
			expr: &actionExpr{
				pos: position{line: 1497, col: 39, offset: 56761},
				run: (*parser).callonParagraphWithLiteralBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1497, col: 39, offset: 56761},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1497, col: 39, offset: 56761},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1497, col: 50, offset: 56772},
								expr: &ruleRefExpr{
									pos:  position{line: 1497, col: 51, offset: 56773},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1498, col: 9, offset: 56801},
							name: "LiteralBlockDelimiter",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1498, col: 31, offset: 56823},
							expr: &ruleRefExpr{
								pos:  position{line: 1498, col: 31, offset: 56823},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1498, col: 35, offset: 56827},
							name: "NEWLINE",
						},
						&labeledExpr{
							pos:   position{line: 1498, col: 43, offset: 56835},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1498, col: 50, offset: 56842},
								name: "ParagraphWithLiteralBlockDelimiterLines",
							},
						},
						&choiceExpr{
							pos: position{line: 1498, col: 92, offset: 56884},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 1498, col: 93, offset: 56885},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1498, col: 93, offset: 56885},
											name: "LiteralBlockDelimiter",
										},
										&ruleRefExpr{
											pos:  position{line: 1498, col: 115, offset: 56907},
											name: "EOLS",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1498, col: 123, offset: 56915},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLines",
			pos:  position{line: 1503, col: 1, offset: 57074},
			expr: &actionExpr{
				pos: position{line: 1503, col: 44, offset: 57117},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLines1,
				expr: &labeledExpr{
					pos:   position{line: 1503, col: 44, offset: 57117},
					label: "lines",
					expr: &zeroOrMoreExpr{
						pos: position{line: 1503, col: 50, offset: 57123},
						expr: &ruleRefExpr{
							pos:  position{line: 1503, col: 51, offset: 57124},
							name: "ParagraphWithLiteralBlockDelimiterLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLine",
			pos:  position{line: 1507, col: 1, offset: 57208},
			expr: &actionExpr{
				pos: position{line: 1508, col: 5, offset: 57263},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLine1,
				expr: &seqExpr{
					pos: position{line: 1508, col: 5, offset: 57263},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1508, col: 5, offset: 57263},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1508, col: 11, offset: 57269},
								run: (*parser).callonParagraphWithLiteralBlockDelimiterLine4,
								expr: &zeroOrMoreExpr{
									pos: position{line: 1508, col: 11, offset: 57269},
									expr: &choiceExpr{
										pos: position{line: 1508, col: 12, offset: 57270},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1508, col: 12, offset: 57270},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 1508, col: 24, offset: 57282},
												name: "Spaces",
											},
											&seqExpr{
												pos: position{line: 1508, col: 34, offset: 57292},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 1508, col: 34, offset: 57292},
														expr: &ruleRefExpr{
															pos:  position{line: 1508, col: 35, offset: 57293},
															name: "LiteralBlockDelimiter",
														},
													},
													&notExpr{
														pos: position{line: 1508, col: 57, offset: 57315},
														expr: &ruleRefExpr{
															pos:  position{line: 1508, col: 58, offset: 57316},
															name: "EOL",
														},
													},
													&anyMatcher{
														line: 1508, col: 62, offset: 57320,
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1510, col: 8, offset: 57369},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttribute",
			pos:  position{line: 1515, col: 1, offset: 57495},
			expr: &actionExpr{
				pos: position{line: 1516, col: 5, offset: 57533},
				run: (*parser).callonParagraphWithLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 1516, col: 5, offset: 57533},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1516, col: 5, offset: 57533},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1516, col: 16, offset: 57544},
								expr: &ruleRefExpr{
									pos:  position{line: 1516, col: 17, offset: 57545},
									name: "ElementAttributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1517, col: 5, offset: 57569},
							run: (*parser).callonParagraphWithLiteralAttribute6,
						},
						&labeledExpr{
							pos:   position{line: 1524, col: 5, offset: 57783},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1524, col: 12, offset: 57790},
								name: "ParagraphWithLiteralAttributeLines",
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralKind",
			pos:  position{line: 1528, col: 1, offset: 57940},
			expr: &actionExpr{
				pos: position{line: 1528, col: 16, offset: 57955},
				run: (*parser).callonLiteralKind1,
				expr: &litMatcher{
					pos:        position{line: 1528, col: 16, offset: 57955},
					val:        "literal",
					ignoreCase: false,
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttributeLines",
			pos:  position{line: 1533, col: 1, offset: 58038},
			expr: &actionExpr{
				pos: position{line: 1533, col: 39, offset: 58076},
				run: (*parser).callonParagraphWithLiteralAttributeLines1,
				expr: &labeledExpr{
					pos:   position{line: 1533, col: 39, offset: 58076},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1533, col: 45, offset: 58082},
						expr: &ruleRefExpr{
							pos:  position{line: 1533, col: 46, offset: 58083},
							name: "ParagraphWithLiteralAttributeLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttributeLine",
			pos:  position{line: 1537, col: 1, offset: 58163},
			expr: &actionExpr{
				pos: position{line: 1537, col: 38, offset: 58200},
				run: (*parser).callonParagraphWithLiteralAttributeLine1,
				expr: &seqExpr{
					pos: position{line: 1537, col: 38, offset: 58200},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1537, col: 38, offset: 58200},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1537, col: 44, offset: 58206},
								run: (*parser).callonParagraphWithLiteralAttributeLine4,
								expr: &seqExpr{
									pos: position{line: 1537, col: 44, offset: 58206},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1537, col: 44, offset: 58206},
											expr: &ruleRefExpr{
												pos:  position{line: 1537, col: 46, offset: 58208},
												name: "BlankLine",
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 1537, col: 57, offset: 58219},
											expr: &choiceExpr{
												pos: position{line: 1537, col: 58, offset: 58220},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 1537, col: 58, offset: 58220},
														name: "Alphanums",
													},
													&ruleRefExpr{
														pos:  position{line: 1537, col: 70, offset: 58232},
														name: "Spaces",
													},
													&seqExpr{
														pos: position{line: 1537, col: 80, offset: 58242},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 1537, col: 80, offset: 58242},
																expr: &ruleRefExpr{
																	pos:  position{line: 1537, col: 81, offset: 58243},
																	name: "EOL",
																},
															},
															&anyMatcher{
																line: 1537, col: 86, offset: 58248,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1539, col: 4, offset: 58289},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ConceleadIndexTerm",
			pos:  position{line: 1546, col: 1, offset: 58463},
			expr: &actionExpr{
				pos: position{line: 1546, col: 23, offset: 58485},
				run: (*parser).callonConceleadIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 1546, col: 23, offset: 58485},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1546, col: 23, offset: 58485},
							val:        "(((",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1546, col: 29, offset: 58491},
							label: "term1",
							expr: &ruleRefExpr{
								pos:  position{line: 1546, col: 35, offset: 58497},
								name: "Alphanums",
							},
						},
						&labeledExpr{
							pos:   position{line: 1546, col: 45, offset: 58507},
							label: "term2",
							expr: &zeroOrOneExpr{
								pos: position{line: 1546, col: 51, offset: 58513},
								expr: &actionExpr{
									pos: position{line: 1546, col: 52, offset: 58514},
									run: (*parser).callonConceleadIndexTerm8,
									expr: &seqExpr{
										pos: position{line: 1546, col: 52, offset: 58514},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 1546, col: 52, offset: 58514},
												expr: &ruleRefExpr{
													pos:  position{line: 1546, col: 52, offset: 58514},
													name: "WS",
												},
											},
											&litMatcher{
												pos:        position{line: 1546, col: 56, offset: 58518},
												val:        ",",
												ignoreCase: false,
											},
											&zeroOrMoreExpr{
												pos: position{line: 1546, col: 60, offset: 58522},
												expr: &ruleRefExpr{
													pos:  position{line: 1546, col: 60, offset: 58522},
													name: "WS",
												},
											},
											&labeledExpr{
												pos:   position{line: 1546, col: 64, offset: 58526},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 1546, col: 72, offset: 58534},
													name: "Alphanums",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1548, col: 9, offset: 58582},
							label: "term3",
							expr: &zeroOrOneExpr{
								pos: position{line: 1548, col: 15, offset: 58588},
								expr: &actionExpr{
									pos: position{line: 1548, col: 16, offset: 58589},
									run: (*parser).callonConceleadIndexTerm19,
									expr: &seqExpr{
										pos: position{line: 1548, col: 16, offset: 58589},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 1548, col: 16, offset: 58589},
												expr: &ruleRefExpr{
													pos:  position{line: 1548, col: 16, offset: 58589},
													name: "WS",
												},
											},
											&litMatcher{
												pos:        position{line: 1548, col: 20, offset: 58593},
												val:        ",",
												ignoreCase: false,
											},
											&zeroOrMoreExpr{
												pos: position{line: 1548, col: 24, offset: 58597},
												expr: &ruleRefExpr{
													pos:  position{line: 1548, col: 24, offset: 58597},
													name: "WS",
												},
											},
											&labeledExpr{
												pos:   position{line: 1548, col: 28, offset: 58601},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 1548, col: 36, offset: 58609},
													name: "Alphanums",
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1550, col: 9, offset: 58657},
							val:        ")))",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "BlankLine",
			pos:  position{line: 1557, col: 1, offset: 58841},
			expr: &actionExpr{
				pos: position{line: 1557, col: 14, offset: 58854},
				run: (*parser).callonBlankLine1,
				expr: &seqExpr{
					pos: position{line: 1557, col: 14, offset: 58854},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1557, col: 14, offset: 58854},
							expr: &ruleRefExpr{
								pos:  position{line: 1557, col: 15, offset: 58855},
								name: "EOF",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1557, col: 19, offset: 58859},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "Alphanum",
			pos:  position{line: 1564, col: 1, offset: 59007},
			expr: &charClassMatcher{
				pos:        position{line: 1564, col: 13, offset: 59019},
				val:        "[\\pL0-9]",
				ranges:     []rune{'0', '9'},
				classes:    []*unicode.RangeTable{rangeTable("L")},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Parenthesis",
			pos:  position{line: 1566, col: 1, offset: 59029},
			expr: &choiceExpr{
				pos: position{line: 1566, col: 16, offset: 59044},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1566, col: 16, offset: 59044},
						val:        "(",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1566, col: 22, offset: 59050},
						val:        ")",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1566, col: 28, offset: 59056},
						val:        "[",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1566, col: 34, offset: 59062},
						val:        "]",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1566, col: 40, offset: 59068},
						val:        "{",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1566, col: 46, offset: 59074},
						val:        "}",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "Alphanums",
			pos:  position{line: 1568, col: 1, offset: 59080},
			expr: &actionExpr{
				pos: position{line: 1568, col: 14, offset: 59093},
				run: (*parser).callonAlphanums1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1568, col: 14, offset: 59093},
					expr: &charClassMatcher{
						pos:        position{line: 1568, col: 14, offset: 59093},
						val:        "[\\pL0-9]",
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Dot",
			pos:  position{line: 1572, col: 1, offset: 59139},
			expr: &litMatcher{
				pos:        position{line: 1572, col: 8, offset: 59146},
				val:        ".",
				ignoreCase: false,
			},
		},
		{
			name: "SimpleWord",
			pos:  position{line: 1574, col: 1, offset: 59151},
			expr: &actionExpr{
				pos: position{line: 1574, col: 15, offset: 59165},
				run: (*parser).callonSimpleWord1,
				expr: &seqExpr{
					pos: position{line: 1574, col: 15, offset: 59165},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1574, col: 15, offset: 59165},
							name: "Alphanums",
						},
						&andExpr{
							pos: position{line: 1574, col: 25, offset: 59175},
							expr: &choiceExpr{
								pos: position{line: 1574, col: 27, offset: 59177},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1574, col: 27, offset: 59177},
										name: "WS",
									},
									&ruleRefExpr{
										pos:  position{line: 1574, col: 32, offset: 59182},
										name: "EOL",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OtherWord",
			pos:  position{line: 1579, col: 1, offset: 59447},
			expr: &actionExpr{
				pos: position{line: 1579, col: 14, offset: 59460},
				run: (*parser).callonOtherWord1,
				expr: &choiceExpr{
					pos: position{line: 1579, col: 15, offset: 59461},
					alternatives: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1579, col: 15, offset: 59461},
							name: "Alphanums",
						},
						&ruleRefExpr{
							pos:  position{line: 1579, col: 27, offset: 59473},
							name: "QuotedTextPrefix",
						},
						&oneOrMoreExpr{
							pos: position{line: 1579, col: 46, offset: 59492},
							expr: &actionExpr{
								pos: position{line: 1579, col: 47, offset: 59493},
								run: (*parser).callonOtherWord6,
								expr: &seqExpr{
									pos: position{line: 1579, col: 47, offset: 59493},
									exprs: []interface{}{
										&seqExpr{
											pos: position{line: 1579, col: 48, offset: 59494},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1579, col: 48, offset: 59494},
													expr: &ruleRefExpr{
														pos:  position{line: 1579, col: 49, offset: 59495},
														name: "NEWLINE",
													},
												},
												&notExpr{
													pos: position{line: 1579, col: 57, offset: 59503},
													expr: &ruleRefExpr{
														pos:  position{line: 1579, col: 58, offset: 59504},
														name: "WS",
													},
												},
												&notExpr{
													pos: position{line: 1579, col: 61, offset: 59507},
													expr: &ruleRefExpr{
														pos:  position{line: 1579, col: 62, offset: 59508},
														name: "Dot",
													},
												},
												&notExpr{
													pos: position{line: 1579, col: 66, offset: 59512},
													expr: &ruleRefExpr{
														pos:  position{line: 1579, col: 67, offset: 59513},
														name: "QuotedTextPrefix",
													},
												},
												&notExpr{
													pos: position{line: 1579, col: 84, offset: 59530},
													expr: &ruleRefExpr{
														pos:  position{line: 1579, col: 85, offset: 59531},
														name: "LabeledListItemSeparator",
													},
												},
												&notExpr{
													pos: position{line: 1579, col: 110, offset: 59556},
													expr: &ruleRefExpr{
														pos:  position{line: 1579, col: 111, offset: 59557},
														name: "Parenthesis",
													},
												},
												&anyMatcher{
													line: 1579, col: 123, offset: 59569,
												},
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 1579, col: 126, offset: 59572},
											expr: &ruleRefExpr{
												pos:  position{line: 1579, col: 126, offset: 59572},
												name: "Dot",
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1581, col: 7, offset: 59681},
							expr: &litMatcher{
								pos:        position{line: 1581, col: 7, offset: 59681},
								val:        ".",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "Spaces",
			pos:  position{line: 1585, col: 1, offset: 59862},
			expr: &oneOrMoreExpr{
				pos: position{line: 1585, col: 11, offset: 59872},
				expr: &ruleRefExpr{
					pos:  position{line: 1585, col: 11, offset: 59872},
					name: "WS",
				},
			},
		},
		{
			name: "FileLocation",
			pos:  position{line: 1587, col: 1, offset: 59878},
			expr: &actionExpr{
				pos: position{line: 1587, col: 17, offset: 59894},
				run: (*parser).callonFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 1587, col: 17, offset: 59894},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1587, col: 26, offset: 59903},
						expr: &choiceExpr{
							pos: position{line: 1587, col: 27, offset: 59904},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1587, col: 27, offset: 59904},
									name: "FILENAME",
								},
								&ruleRefExpr{
									pos:  position{line: 1587, col: 38, offset: 59915},
									name: "DocumentAttributeSubstitution",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ResolvedFileLocation",
			pos:  position{line: 1591, col: 1, offset: 60007},
			expr: &actionExpr{
				pos: position{line: 1591, col: 25, offset: 60031},
				run: (*parser).callonResolvedFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 1591, col: 25, offset: 60031},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1591, col: 34, offset: 60040},
						expr: &seqExpr{
							pos: position{line: 1591, col: 35, offset: 60041},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1591, col: 35, offset: 60041},
									expr: &ruleRefExpr{
										pos:  position{line: 1591, col: 36, offset: 60042},
										name: "EOL",
									},
								},
								&notExpr{
									pos: position{line: 1591, col: 40, offset: 60046},
									expr: &ruleRefExpr{
										pos:  position{line: 1591, col: 41, offset: 60047},
										name: "WS",
									},
								},
								&notExpr{
									pos: position{line: 1591, col: 44, offset: 60050},
									expr: &litMatcher{
										pos:        position{line: 1591, col: 45, offset: 60051},
										val:        "[",
										ignoreCase: false,
									},
								},
								&anyMatcher{
									line: 1591, col: 49, offset: 60055,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Location",
			pos:  position{line: 1595, col: 1, offset: 60119},
			expr: &actionExpr{
				pos: position{line: 1595, col: 13, offset: 60131},
				run: (*parser).callonLocation1,
				expr: &labeledExpr{
					pos:   position{line: 1595, col: 13, offset: 60131},
					label: "elements",
					expr: &seqExpr{
						pos: position{line: 1595, col: 23, offset: 60141},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1595, col: 23, offset: 60141},
								name: "URL_SCHEME",
							},
							&oneOrMoreExpr{
								pos: position{line: 1595, col: 34, offset: 60152},
								expr: &choiceExpr{
									pos: position{line: 1595, col: 35, offset: 60153},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1595, col: 35, offset: 60153},
											name: "FILENAME",
										},
										&ruleRefExpr{
											pos:  position{line: 1595, col: 46, offset: 60164},
											name: "DocumentAttributeSubstitution",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FILENAME",
			pos:  position{line: 1599, col: 1, offset: 60257},
			expr: &oneOrMoreExpr{
				pos: position{line: 1599, col: 13, offset: 60269},
				expr: &choiceExpr{
					pos: position{line: 1599, col: 14, offset: 60270},
					alternatives: []interface{}{
						&charClassMatcher{
							pos:        position{line: 1599, col: 14, offset: 60270},
							val:        "[ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789~:/?#@!$&;=()*+,_%]",
							chars:      []rune{'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '~', ':', '/', '?', '#', '@', '!', '$', '&', ';', '=', '(', ')', '*', '+', ',', '_', '%'},
							ignoreCase: false,
							inverted:   false,
						},
						&litMatcher{
							pos:        position{line: 1599, col: 99, offset: 60355},
							val:        "-",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1599, col: 105, offset: 60361},
							val:        ".",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "ResolvedLocation",
			pos:  position{line: 1601, col: 1, offset: 60482},
			expr: &actionExpr{
				pos: position{line: 1601, col: 21, offset: 60502},
				run: (*parser).callonResolvedLocation1,
				expr: &labeledExpr{
					pos:   position{line: 1601, col: 21, offset: 60502},
					label: "elements",
					expr: &seqExpr{
						pos: position{line: 1601, col: 31, offset: 60512},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1601, col: 31, offset: 60512},
								name: "URL_SCHEME",
							},
							&ruleRefExpr{
								pos:  position{line: 1601, col: 42, offset: 60523},
								name: "RESOLVED_FILENAME",
							},
						},
					},
				},
			},
		},
		{
			name: "RESOLVED_FILENAME",
			pos:  position{line: 1605, col: 1, offset: 60602},
			expr: &oneOrMoreExpr{
				pos: position{line: 1605, col: 22, offset: 60623},
				expr: &choiceExpr{
					pos: position{line: 1605, col: 23, offset: 60624},
					alternatives: []interface{}{
						&charClassMatcher{
							pos:        position{line: 1605, col: 23, offset: 60624},
							val:        "[ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789~:/?#@!$&;=()*+_,%{}]",
							chars:      []rune{'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '~', ':', '/', '?', '#', '@', '!', '$', '&', ';', '=', '(', ')', '*', '+', '_', ',', '%', '{', '}'},
							ignoreCase: false,
							inverted:   false,
						},
						&litMatcher{
							pos:        position{line: 1605, col: 110, offset: 60711},
							val:        "-",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1605, col: 116, offset: 60717},
							val:        ".",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "URL",
			pos:  position{line: 1607, col: 1, offset: 60766},
			expr: &actionExpr{
				pos: position{line: 1607, col: 8, offset: 60773},
				run: (*parser).callonURL1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1607, col: 8, offset: 60773},
					expr: &choiceExpr{
						pos: position{line: 1607, col: 9, offset: 60774},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1607, col: 9, offset: 60774},
								name: "Alphanums",
							},
							&seqExpr{
								pos: position{line: 1607, col: 22, offset: 60787},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1607, col: 22, offset: 60787},
										expr: &ruleRefExpr{
											pos:  position{line: 1607, col: 23, offset: 60788},
											name: "NEWLINE",
										},
									},
									&notExpr{
										pos: position{line: 1607, col: 31, offset: 60796},
										expr: &ruleRefExpr{
											pos:  position{line: 1607, col: 32, offset: 60797},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 1607, col: 35, offset: 60800},
										expr: &litMatcher{
											pos:        position{line: 1607, col: 36, offset: 60801},
											val:        "[",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1607, col: 40, offset: 60805},
										expr: &litMatcher{
											pos:        position{line: 1607, col: 41, offset: 60806},
											val:        "]",
											ignoreCase: false,
										},
									},
									&anyMatcher{
										line: 1607, col: 46, offset: 60811,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "URL_SCHEME",
			pos:  position{line: 1611, col: 1, offset: 60852},
			expr: &choiceExpr{
				pos: position{line: 1611, col: 15, offset: 60866},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1611, col: 15, offset: 60866},
						val:        "http://",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1611, col: 27, offset: 60878},
						val:        "https://",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1611, col: 40, offset: 60891},
						val:        "ftp://",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1611, col: 51, offset: 60902},
						val:        "irc://",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1611, col: 62, offset: 60913},
						val:        "mailto:",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "ID",
			pos:  position{line: 1613, col: 1, offset: 60924},
			expr: &actionExpr{
				pos: position{line: 1613, col: 7, offset: 60930},
				run: (*parser).callonID1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1613, col: 7, offset: 60930},
					expr: &choiceExpr{
						pos: position{line: 1613, col: 8, offset: 60931},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1613, col: 8, offset: 60931},
								name: "Alphanums",
							},
							&seqExpr{
								pos: position{line: 1613, col: 21, offset: 60944},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1613, col: 21, offset: 60944},
										expr: &ruleRefExpr{
											pos:  position{line: 1613, col: 22, offset: 60945},
											name: "NEWLINE",
										},
									},
									&notExpr{
										pos: position{line: 1613, col: 30, offset: 60953},
										expr: &ruleRefExpr{
											pos:  position{line: 1613, col: 31, offset: 60954},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 1613, col: 34, offset: 60957},
										expr: &litMatcher{
											pos:        position{line: 1613, col: 35, offset: 60958},
											val:        "[",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1613, col: 39, offset: 60962},
										expr: &litMatcher{
											pos:        position{line: 1613, col: 40, offset: 60963},
											val:        "]",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1613, col: 44, offset: 60967},
										expr: &litMatcher{
											pos:        position{line: 1613, col: 45, offset: 60968},
											val:        "<<",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1613, col: 50, offset: 60973},
										expr: &litMatcher{
											pos:        position{line: 1613, col: 51, offset: 60974},
											val:        ">>",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1613, col: 56, offset: 60979},
										expr: &litMatcher{
											pos:        position{line: 1613, col: 57, offset: 60980},
											val:        ",",
											ignoreCase: false,
										},
									},
									&anyMatcher{
										line: 1613, col: 62, offset: 60985,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DIGIT",
			pos:  position{line: 1617, col: 1, offset: 61026},
			expr: &actionExpr{
				pos: position{line: 1617, col: 10, offset: 61035},
				run: (*parser).callonDIGIT1,
				expr: &charClassMatcher{
					pos:        position{line: 1617, col: 10, offset: 61035},
					val:        "[0-9]",
					ranges:     []rune{'0', '9'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "NUMBER",
			pos:  position{line: 1621, col: 1, offset: 61077},
			expr: &actionExpr{
				pos: position{line: 1621, col: 11, offset: 61087},
				run: (*parser).callonNUMBER1,
				expr: &seqExpr{
					pos: position{line: 1621, col: 11, offset: 61087},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1621, col: 11, offset: 61087},
							expr: &litMatcher{
								pos:        position{line: 1621, col: 11, offset: 61087},
								val:        "-",
								ignoreCase: false,
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1621, col: 16, offset: 61092},
							expr: &ruleRefExpr{
								pos:  position{line: 1621, col: 16, offset: 61092},
								name: "DIGIT",
							},
						},
					},
				},
			},
		},
		{
			name: "WS",
			pos:  position{line: 1625, col: 1, offset: 61144},
			expr: &choiceExpr{
				pos: position{line: 1625, col: 7, offset: 61150},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1625, col: 7, offset: 61150},
						val:        " ",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1625, col: 13, offset: 61156},
						run: (*parser).callonWS3,
						expr: &litMatcher{
							pos:        position{line: 1625, col: 13, offset: 61156},
							val:        "\t",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NEWLINE",
			pos:  position{line: 1629, col: 1, offset: 61197},
			expr: &choiceExpr{
				pos: position{line: 1629, col: 12, offset: 61208},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1629, col: 12, offset: 61208},
						val:        "\r\n",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1629, col: 21, offset: 61217},
						val:        "\r",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1629, col: 28, offset: 61224},
						val:        "\n",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 1631, col: 1, offset: 61230},
			expr: &notExpr{
				pos: position{line: 1631, col: 8, offset: 61237},
				expr: &anyMatcher{
					line: 1631, col: 9, offset: 61238,
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 1633, col: 1, offset: 61241},
			expr: &choiceExpr{
				pos: position{line: 1633, col: 8, offset: 61248},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1633, col: 8, offset: 61248},
						name: "NEWLINE",
					},
					&ruleRefExpr{
						pos:  position{line: 1633, col: 18, offset: 61258},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "EOLS",
			pos:  position{line: 1635, col: 1, offset: 61263},
			expr: &seqExpr{
				pos: position{line: 1635, col: 9, offset: 61271},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1635, col: 9, offset: 61271},
						expr: &ruleRefExpr{
							pos:  position{line: 1635, col: 9, offset: 61271},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1635, col: 13, offset: 61275},
						name: "EOL",
					},
				},
			},
		},
	},
}

func (c *current) onAsciidocDocument1(frontmatter, blocks interface{}) (interface{}, error) {
	return types.NewDraftDocument(frontmatter, blocks.([]interface{}))
}

func (p *parser) callonAsciidocDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsciidocDocument1(stack["frontmatter"], stack["blocks"])
}

func (c *current) onAsciidocDocumentWithinDelimitedBlock1(frontmatter, blocks interface{}) (interface{}, error) {
	return types.NewDraftDocument(frontmatter, blocks.([]interface{}))
}

func (p *parser) callonAsciidocDocumentWithinDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsciidocDocumentWithinDelimitedBlock1(stack["frontmatter"], stack["blocks"])
}

func (c *current) onTextDocument1(blocks interface{}) (interface{}, error) {
	return types.NewDraftDocument(nil, blocks.([]interface{}))
}

func (p *parser) callonTextDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextDocument1(stack["blocks"])
}

func (c *current) onAsciidocDocumentBlocks1(header, others interface{}) (interface{}, error) {
	if header != nil && others != nil {
		return append([]interface{}{header}, others.([]interface{})...), nil
	} else if others != nil {
		return others.([]interface{}), nil
	}
	return []interface{}{}, nil
}

func (p *parser) callonAsciidocDocumentBlocks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsciidocDocumentBlocks1(stack["header"], stack["others"])
}

func (c *current) onDocumentBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDocumentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock1(stack["block"])
}

func (c *current) onDocumentBlockWithinDelimitedBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDocumentBlockWithinDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlockWithinDelimitedBlock1(stack["block"])
}

func (c *current) onTextDocumentBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonTextDocumentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextDocumentBlock1(stack["block"])
}

func (c *current) onYamlFrontMatter1(content interface{}) (interface{}, error) {
	return types.NewYamlFrontMatter(content.(string))
}

func (p *parser) callonYamlFrontMatter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatter1(stack["content"])
}

func (c *current) onYamlFrontMatterContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonYamlFrontMatterContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatterContent1()
}

func (c *current) onDocumentHeader1(title, id, authors, revision interface{}) (interface{}, error) {
	return types.NewDocumentHeader(title.([]interface{}), authors, revision)
}

func (p *parser) callonDocumentHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader1(stack["title"], stack["id"], stack["authors"], stack["revision"])
}

func (c *current) onDocumentAuthorsInlineForm1(authors interface{}) (interface{}, error) {
	return types.NewDocumentAuthors(authors.([]interface{}))
}

func (p *parser) callonDocumentAuthorsInlineForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsInlineForm1(stack["authors"])
}

func (c *current) onDocumentAuthorsAttributeForm1(author interface{}) (interface{}, error) {
	return []types.DocumentAuthor{author.(types.DocumentAuthor)}, nil
}

func (p *parser) callonDocumentAuthorsAttributeForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsAttributeForm1(stack["author"])
}

func (c *current) onDocumentAuthor1(fullname, email interface{}) (interface{}, error) {
	return types.NewDocumentAuthor(fullname, email)
}

func (p *parser) callonDocumentAuthor1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthor1(stack["fullname"], stack["email"])
}

func (c *current) onDocumentAuthorName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorName1()
}

func (c *current) onDocumentAuthorEmail5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorEmail5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail5()
}

func (c *current) onDocumentAuthorEmail1(email interface{}) (interface{}, error) {
	return email, nil
}

func (p *parser) callonDocumentAuthorEmail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail1(stack["email"])
}

func (c *current) onDocumentRevision9(revnumber, revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(revnumber, revdate, revremark)

}

func (p *parser) callonDocumentRevision9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision9(stack["revnumber"], stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision23(revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(nil, revdate, revremark)

}

func (p *parser) callonDocumentRevision23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision23(stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision1(revision interface{}) (interface{}, error) {
	return revision, nil
}

func (p *parser) callonDocumentRevision1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision1(stack["revision"])
}

func (c *current) onDocumentRevisionNumber2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber2()
}

func (c *current) onDocumentRevisionNumber18() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber18()
}

func (c *current) onDocumentRevisionDate1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionDate1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionDate1()
}

func (c *current) onDocumentRevisionRemark1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionRemark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionRemark1()
}

func (c *current) onDocumentAttributeDeclaration9(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonDocumentAttributeDeclaration9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeDeclaration9(stack["value"])
}

func (c *current) onDocumentAttributeDeclaration1(name, value interface{}) (interface{}, error) {
	return types.NewDocumentAttributeDeclaration(name.(string), value)
}

func (p *parser) callonDocumentAttributeDeclaration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeDeclaration1(stack["name"], stack["value"])
}

func (c *current) onDocumentAttributeName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAttributeName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeName1()
}

func (c *current) onDocumentAttributeValue1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeValue1()
}

func (c *current) onDocumentAttributeReset2(name interface{}) (interface{}, error) {
	return types.NewDocumentAttributeReset(name.(string))
}

func (p *parser) callonDocumentAttributeReset2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeReset2(stack["name"])
}

func (c *current) onDocumentAttributeReset9(name interface{}) (interface{}, error) {
	return types.NewDocumentAttributeReset(name.(string))
}

func (p *parser) callonDocumentAttributeReset9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeReset9(stack["name"])
}

func (c *current) onDocumentAttributeSubstitution1(name interface{}) (interface{}, error) {
	return types.NewDocumentAttributeSubstitution(name.(string))
}

func (p *parser) callonDocumentAttributeSubstitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeSubstitution1(stack["name"])
}

func (c *current) onElementAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewElementAttributes(attrs.([]interface{})), nil
}

func (p *parser) callonElementAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributes1(stack["attrs"])
}

func (c *current) onElementAttribute1(attr interface{}) (interface{}, error) {
	return attr, nil // avoid returning something like `[]interface{}{attr, EOL}`
}

func (p *parser) callonElementAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttribute1(stack["attr"])
}

func (c *current) onElementID2(id interface{}) (interface{}, error) {
	return types.NewElementID(id.(string))
}

func (p *parser) callonElementID2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementID2(stack["id"])
}

func (c *current) onElementID9(id interface{}) (interface{}, error) {
	return types.NewElementID(id.(string))
}

func (p *parser) callonElementID9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementID9(stack["id"])
}

func (c *current) onInlineElementID1(id interface{}) (interface{}, error) {
	// no EOL here since there can be multiple InlineElementID on the same line
	return types.NewInlineElementID(id.(string))
}

func (p *parser) callonInlineElementID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementID1(stack["id"])
}

func (c *current) onElementTitle5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonElementTitle5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitle5()
}

func (c *current) onElementTitle1(title interface{}) (interface{}, error) {
	return types.NewElementTitle(title.(string))
}

func (p *parser) callonElementTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitle1(stack["title"])
}

func (c *current) onElementRole5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonElementRole5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementRole5()
}

func (c *current) onElementRole1(role interface{}) (interface{}, error) {
	return types.NewElementRole(role.(string))
}

func (p *parser) callonElementRole1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementRole1(stack["role"])
}

func (c *current) onLiteralAttribute1() (interface{}, error) {
	return types.NewLiteralAttribute()
}

func (p *parser) callonLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralAttribute1()
}

func (c *current) onAdmonitionMarkerAttribute1(k interface{}) (interface{}, error) {
	return types.NewAdmonitionAttribute(k.(types.AdmonitionKind))
}

func (p *parser) callonAdmonitionMarkerAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionMarkerAttribute1(stack["k"])
}

func (c *current) onSourceAttributes8() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSourceAttributes8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes8()
}

func (c *current) onSourceAttributes1(language interface{}) (interface{}, error) {
	return types.NewSourceAttributes(language)
}

func (p *parser) callonSourceAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes1(stack["language"])
}

func (c *current) onAttributeGroup1(attributes interface{}) (interface{}, error) {
	return types.NewAttributeGroup(attributes.([]interface{}))
}

func (p *parser) callonAttributeGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeGroup1(stack["attributes"])
}

func (c *current) onGenericAttribute2(key, value interface{}) (interface{}, error) {
	// value is (optionally) set
	return types.NewGenericAttribute(key.(string), value)

}

func (p *parser) callonGenericAttribute2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttribute2(stack["key"], stack["value"])
}

func (c *current) onGenericAttribute14(key interface{}) (interface{}, error) {
	// value is not set
	return types.NewGenericAttribute(key.(string), nil)

}

func (p *parser) callonGenericAttribute14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttribute14(stack["key"])
}

func (c *current) onAttributeKey1(key interface{}) (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeKey1(stack["key"])
}

func (c *current) onAttributeValue1(value interface{}) (interface{}, error) {
	// attribute value cannot be followed by a `=`, otherwise it causes troubles for standalone values (eg: in images)
	return string(c.text), nil
}

func (p *parser) callonAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue1(stack["value"])
}

func (c *current) onHorizontalLayout1() (interface{}, error) {
	return types.ElementAttributes{"layout": "horizontal"}, nil
}

func (p *parser) callonHorizontalLayout1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHorizontalLayout1()
}

func (c *current) onQuoteAttributes1(author, title interface{}) (interface{}, error) {
	return types.NewQuoteAttributes("quote", author, title)
}

func (p *parser) callonQuoteAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttributes1(stack["author"], stack["title"])
}

func (c *current) onVerseAttributes1(author, title interface{}) (interface{}, error) {
	return types.NewQuoteAttributes("verse", author.(string), title.(string))
}

func (p *parser) callonVerseAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseAttributes1(stack["author"], stack["title"])
}

func (c *current) onQuoteAttribute1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttribute1()
}

func (c *current) onInlineAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewInlineAttributes(attrs.([]interface{}))
}

func (p *parser) callonInlineAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAttributes1(stack["attrs"])
}

func (c *current) onSection7() (interface{}, error) {

	// `=` is level 0, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonSection7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection7()
}

func (c *current) onSection10(attributes, level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonSection10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection10(stack["attributes"], stack["level"])
}

func (c *current) onSection1(attributes, level, title, id interface{}) (interface{}, error) {
	return types.NewSection(level.(int), title.([]interface{}), id.([]interface{}), attributes)
}

func (p *parser) callonSection1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection1(stack["attributes"], stack["level"], stack["title"], stack["id"])
}

func (c *current) onTitleElements1(elements interface{}) (interface{}, error) {
	// absorbs heading and trailing spaces
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonTitleElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElements1(stack["elements"])
}

func (c *current) onTitleElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonTitleElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElement1(stack["element"])
}

func (c *current) onUserMacroBlock1(name, value, attrs interface{}) (interface{}, error) {
	return types.NewUserMacroBlock(name.(string), value.(string), attrs.(types.ElementAttributes), string(c.text))
}

func (p *parser) callonUserMacroBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onInlineUserMacro1(name, value, attrs interface{}) (interface{}, error) {
	return types.NewInlineUserMacro(name.(string), value.(string), attrs.(types.ElementAttributes), string(c.text))
}

func (p *parser) callonInlineUserMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onUserMacroName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUserMacroName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroName1()
}

func (c *current) onUserMacroValue1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUserMacroValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroValue1()
}

func (c *current) onUserMacroAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewInlineAttributes(attrs.([]interface{}))
}

func (p *parser) callonUserMacroAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroAttributes1(stack["attrs"])
}

func (c *current) onFileInclusion4(path, inlineAttributes interface{}) (interface{}, error) {

	return types.NewFileInclusion(path.(types.Location), inlineAttributes.(types.ElementAttributes), string(c.text))

}

func (p *parser) callonFileInclusion4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion4(stack["path"], stack["inlineAttributes"])
}

func (c *current) onFileInclusion1(incl interface{}) (interface{}, error) {
	return incl.(types.FileInclusion), nil
}

func (p *parser) callonFileInclusion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion1(stack["incl"])
}

func (c *current) onFileIncludeAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewInlineAttributes(attrs.([]interface{}))
}

func (p *parser) callonFileIncludeAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileIncludeAttributes1(stack["attrs"])
}

func (c *current) onLineRangesAttribute1(lines interface{}) (interface{}, error) {

	return types.NewLineRangesAttribute(lines)
}

func (p *parser) callonLineRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttribute1(stack["lines"])
}

func (c *current) onLineRangesAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonLineRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleLineRanges9(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleLineRanges9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges9(stack["other"])
}

func (c *current) onMultipleLineRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultipleQuotedLineRanges10(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleQuotedLineRanges10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges10(stack["other"])
}

func (c *current) onMultipleQuotedLineRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleQuotedLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultiLineRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineRange1(stack["start"], stack["end"])
}

func (c *current) onMultiLineQuotedRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineQuotedRange1(stack["start"], stack["end"])
}

func (c *current) onSingleLineRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineRange1(stack["singleline"])
}

func (c *current) onSingleLineQuotedRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineQuotedRange1(stack["singleline"])
}

func (c *current) onUndefinedLineRange1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUndefinedLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUndefinedLineRange1()
}

func (c *current) onTagRangesAttribute1(tags interface{}) (interface{}, error) {
	//TODO: check if 'tags'/'tag' is allowed for both single and multiple values
	return types.NewTagRangesAttribute(tags.([]interface{}))
}

func (p *parser) callonTagRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttribute1(stack["tags"])
}

func (c *current) onTagRangesAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonTagRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleTagRanges7(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleTagRanges7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges7(stack["other"])
}

func (c *current) onMultipleTagRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleTagRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges1(stack["first"], stack["others"])
}

func (c *current) onTagRange2(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), true)
}

func (p *parser) callonTagRange2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange2(stack["tag"])
}

func (c *current) onTagRange7(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), false)
}

func (p *parser) callonTagRange7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange7(stack["tag"])
}

func (c *current) onTagWildcard4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagWildcard4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard4()
}

func (c *current) onTagWildcard7(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagWildcard7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard7(stack["stars"])
}

func (c *current) onTagWildcard1(stars interface{}) (interface{}, error) {
	return stars, nil
}

func (p *parser) callonTagWildcard1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard1(stack["stars"])
}

func (c *current) onIncludedFileLine8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine8()
}

func (c *current) onIncludedFileLine1(content interface{}) (interface{}, error) {
	return types.NewIncludedFileLine(content.([]interface{}))
}

func (p *parser) callonIncludedFileLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine1(stack["content"])
}

func (c *current) onIncludedFileStartTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileStartTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag5()
}

func (c *current) onIncludedFileStartTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileStartTag(tag.(string))
}

func (p *parser) callonIncludedFileStartTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag1(stack["tag"])
}

func (c *current) onIncludedFileEndTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileEndTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag5()
}

func (c *current) onIncludedFileEndTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileEndTag(tag.(string))
}

func (p *parser) callonIncludedFileEndTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag1(stack["tag"])
}

func (c *current) onListParagraph2(comment interface{}) (interface{}, error) {
	return comment, nil

}

func (p *parser) callonListParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph2(stack["comment"])
}

func (c *current) onListParagraph5(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), nil)

}

func (p *parser) callonListParagraph5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph5(stack["lines"])
}

func (c *current) onListParagraphLine24(elements, linebreak interface{}) (interface{}, error) {
	// absorbs heading and trailing spaces
	return types.NewInlineElements(append(elements.([]interface{}), linebreak))

}

func (p *parser) callonListParagraphLine24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine24(stack["elements"], stack["linebreak"])
}

func (c *current) onListParagraphLine1(line interface{}) (interface{}, error) {

	return line, nil

}

func (p *parser) callonListParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine1(stack["line"])
}

func (c *current) onContinuedListItemElement1(blanklines, element interface{}) (interface{}, error) {
	return types.NewContinuedListItemElement(-len(blanklines.([]interface{})), element) // offset is negative
}

func (p *parser) callonContinuedListItemElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemElement1(stack["blanklines"], stack["element"])
}

func (c *current) onOrderedListItem1(attributes, prefix, content interface{}) (interface{}, error) {
	return types.NewOrderedListItem(prefix.(types.OrderedListItemPrefix), content.([]interface{}), attributes)
}

func (p *parser) callonOrderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItem1(stack["attributes"], stack["prefix"], stack["content"])
}

func (c *current) onOrderedListItemPrefix10() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonOrderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix10()
}

func (c *current) onOrderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonOrderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix13(stack["depth"])
}

func (c *current) onOrderedListItemPrefix7(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListItemPrefix(types.Arabic, 1)
	case 2:
		return types.NewOrderedListItemPrefix(types.LowerAlpha, 2)
	case 3:
		return types.NewOrderedListItemPrefix(types.LowerRoman, 3)
	case 4:
		return types.NewOrderedListItemPrefix(types.UpperAlpha, 4)
	default:
		return types.NewOrderedListItemPrefix(types.UpperRoman, 5)
	}

}

func (p *parser) callonOrderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix7(stack["depth"])
}

func (c *current) onOrderedListItemPrefix14() (interface{}, error) {
	// numbering style: "1."
	return types.NewOrderedListItemPrefix(types.Arabic, 1)

}

func (p *parser) callonOrderedListItemPrefix14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix14()
}

func (c *current) onOrderedListItemPrefix19() (interface{}, error) {
	// numbering style: "a."
	return types.NewOrderedListItemPrefix(types.LowerAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix19()
}

func (c *current) onOrderedListItemPrefix23() (interface{}, error) {
	// numbering style: "A."
	return types.NewOrderedListItemPrefix(types.UpperAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix23()
}

func (c *current) onOrderedListItemPrefix27() (interface{}, error) {
	// numbering style: "i)"
	return types.NewOrderedListItemPrefix(types.LowerRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix27()
}

func (c *current) onOrderedListItemPrefix32() (interface{}, error) {
	// numbering style: "I)"
	return types.NewOrderedListItemPrefix(types.UpperRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix32()
}

func (c *current) onOrderedListItemPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonOrderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix1(stack["prefix"])
}

func (c *current) onOrderedListItemContent1(elements interface{}) (interface{}, error) {
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonOrderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemContent1(stack["elements"])
}

func (c *current) onUnorderedListItem1(attributes, prefix, checkstyle, content interface{}) (interface{}, error) {
	return types.NewUnorderedListItem(prefix.(types.UnorderedListItemPrefix), checkstyle, content.([]interface{}), attributes)
}

func (p *parser) callonUnorderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItem1(stack["attributes"], stack["prefix"], stack["checkstyle"], stack["content"])
}

func (c *current) onUnorderedListItemPrefix10() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonUnorderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix10()
}

func (c *current) onUnorderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonUnorderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix13(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix7(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListItemPrefix(types.OneAsterisk, 1)
	case 2:
		return types.NewUnorderedListItemPrefix(types.TwoAsterisks, 2)
	case 3:
		return types.NewUnorderedListItemPrefix(types.ThreeAsterisks, 3)
	case 4:
		return types.NewUnorderedListItemPrefix(types.FourAsterisks, 4)
	default:
		return types.NewUnorderedListItemPrefix(types.FiveAsterisks, 5)
	}

}

func (p *parser) callonUnorderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix7(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix15() (interface{}, error) {
	return types.NewUnorderedListItemPrefix(types.Dash, 1)

}

func (p *parser) callonUnorderedListItemPrefix15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix15()
}

func (c *current) onUnorderedListItemPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonUnorderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix1(stack["prefix"])
}

func (c *current) onUnorderedListItemCheckStyle7() (interface{}, error) {
	return types.Unchecked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle7()
}

func (c *current) onUnorderedListItemCheckStyle9() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle9()
}

func (c *current) onUnorderedListItemCheckStyle11() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle11()
}

func (c *current) onUnorderedListItemCheckStyle1(style interface{}) (interface{}, error) {
	return style, nil

}

func (p *parser) callonUnorderedListItemCheckStyle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle1(stack["style"])
}

func (c *current) onUnorderedListItemContent1(elements interface{}) (interface{}, error) {
	// Another list or a literal paragraph immediately following a list item will be implicitly included in the list item
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonUnorderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemContent1(stack["elements"])
}

func (c *current) onLabeledListItem1(attributes, term, separator, description interface{}) (interface{}, error) {
	return types.NewLabeledListItem(len(separator.(string))-1, term.([]interface{}), description, attributes)
}

func (p *parser) callonLabeledListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItem1(stack["attributes"], stack["term"], stack["separator"], stack["description"])
}

func (c *current) onSimpleLabeledListItemTerm3() (interface{}, error) {
	return types.NewStringElement(strings.TrimSpace(string(c.text)))
}

func (p *parser) callonSimpleLabeledListItemTerm3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleLabeledListItemTerm3()
}

func (c *current) onSimpleLabeledListItemTerm1(content interface{}) (interface{}, error) {
	return types.NewInlineElements(content)
}

func (p *parser) callonSimpleLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleLabeledListItemTerm1(stack["content"])
}

func (c *current) onLabeledListItemTerm1(elements interface{}) (interface{}, error) {
	// absorbs heading and trailing spaces
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTerm1(stack["elements"])
}

func (c *current) onLabeledListItemTermElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonLabeledListItemTermElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTermElement1(stack["element"])
}

func (c *current) onLabeledListItemSeparator4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonLabeledListItemSeparator4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator4()
}

func (c *current) onLabeledListItemSeparator7(separator interface{}) (bool, error) {

	// use a predicate to make sure that only `::` to `::::` are allowed
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonLabeledListItemSeparator7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator7(stack["separator"])
}

func (c *current) onLabeledListItemSeparator1(separator interface{}) (interface{}, error) {
	return separator, nil
}

func (p *parser) callonLabeledListItemSeparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator1(stack["separator"])
}

func (c *current) onLabeledListItemDescription1(elements interface{}) (interface{}, error) {

	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemDescription1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemDescription1(stack["elements"])
}

func (c *current) onAdmonitionKind2() (interface{}, error) {
	return types.Tip, nil

}

func (p *parser) callonAdmonitionKind2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind2()
}

func (c *current) onAdmonitionKind4() (interface{}, error) {
	return types.Note, nil

}

func (p *parser) callonAdmonitionKind4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind4()
}

func (c *current) onAdmonitionKind6() (interface{}, error) {
	return types.Important, nil

}

func (p *parser) callonAdmonitionKind6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind6()
}

func (c *current) onAdmonitionKind8() (interface{}, error) {
	return types.Warning, nil

}

func (p *parser) callonAdmonitionKind8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind8()
}

func (c *current) onAdmonitionKind10() (interface{}, error) {
	return types.Caution, nil
}

func (p *parser) callonAdmonitionKind10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind10()
}

func (c *current) onParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onParagraph13(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)
}

func (p *parser) callonParagraph13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph13(stack["attributes"], stack["lines"])
}

func (c *current) onSimpleParagraph6(attributes interface{}) (bool, error) {
	// skip if the '[literal]' attribute was set on this paragraph
	if attrs, ok := attributes.(types.ElementAttributes); ok {
		kind, found := attrs[types.AttrKind]
		return !found || kind != types.Literal, nil
	}
	return true, nil

}

func (p *parser) callonSimpleParagraph6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleParagraph6(stack["attributes"])
}

func (c *current) onSimpleParagraph1(attributes, firstLine, otherLines interface{}) (interface{}, error) {

	return types.NewParagraph(append([]interface{}{firstLine}, otherLines.([]interface{})...), attributes)
}

func (p *parser) callonSimpleParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleParagraph1(stack["attributes"], stack["firstLine"], stack["otherLines"])
}

func (c *current) onParagraphLines1(firstLine, otherLines interface{}) (interface{}, error) {
	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonParagraphLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onFirstParagraphLine1(elements, linebreak interface{}) (interface{}, error) {

	return types.NewInlineElements(append(elements.([]interface{}), linebreak))
}

func (p *parser) callonFirstParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstParagraphLine1(stack["elements"], stack["linebreak"])
}

func (c *current) onOtherParagraphLine1(elements interface{}) (interface{}, error) {
	return elements, nil
}

func (p *parser) callonOtherParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherParagraphLine1(stack["elements"])
}

func (c *current) onVerseParagraph7(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.ElementAttributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Verse, nil
	}
	return false, nil

}

func (p *parser) callonVerseParagraph7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph7(stack["attributes"])
}

func (c *current) onVerseParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonVerseParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onVerseParagraph19(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.ElementAttributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Verse, nil
	}
	return false, nil

}

func (p *parser) callonVerseParagraph19() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph19(stack["attributes"])
}

func (c *current) onVerseParagraph14(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)

}

func (p *parser) callonVerseParagraph14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph14(stack["attributes"], stack["lines"])
}

func (c *current) onInlineElements9(comment interface{}) (interface{}, error) {
	return types.NewInlineElements([]interface{}{comment})

}

func (p *parser) callonInlineElements9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements9(stack["comment"])
}

func (c *current) onInlineElements12(elements, linebreak interface{}) (interface{}, error) {

	return types.NewInlineElements(append(elements.([]interface{}), linebreak))

}

func (p *parser) callonInlineElements12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements12(stack["elements"], stack["linebreak"])
}

func (c *current) onInlineElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonInlineElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements1(stack["elements"])
}

func (c *current) onInlineElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonInlineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement1(stack["element"])
}

func (c *current) onInlineElementsWithoutSubtitution1(elements, linebreak interface{}) (interface{}, error) {

	return types.NewInlineElements(append(elements.([]interface{}), linebreak))
}

func (p *parser) callonInlineElementsWithoutSubtitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementsWithoutSubtitution1(stack["elements"], stack["linebreak"])
}

func (c *current) onInlineElementWithoutSubtitution1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonInlineElementWithoutSubtitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementWithoutSubtitution1(stack["element"])
}

func (c *current) onVerbatimParagraph8(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonVerbatimParagraph8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimParagraph8(stack["line"])
}

func (c *current) onVerbatimParagraph1(attributes, lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), attributes)
}

func (p *parser) callonVerbatimParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimParagraph1(stack["attributes"], stack["lines"])
}

func (c *current) onVerbatimParagraphLine1(elements, linebreak interface{}) (interface{}, error) {

	return types.NewInlineElements(append(elements.([]interface{}), linebreak))
}

func (p *parser) callonVerbatimParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimParagraphLine1(stack["elements"], stack["linebreak"])
}

func (c *current) onVerbatimParagraphLineElement1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonVerbatimParagraphLineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimParagraphLineElement1()
}

func (c *current) onLineBreak1() (interface{}, error) {
	return types.NewLineBreak()
}

func (p *parser) callonLineBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineBreak1()
}

func (c *current) onQuotedText1(text interface{}) (interface{}, error) {
	// if a '^' or '~' is alone (ie, badly formatted superscript or subscript, then accept it as-is)
	return text, nil
}

func (p *parser) callonQuotedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedText1(stack["text"])
}

func (c *current) onSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	// rule used withn `words` to detect superscript or subscript portions, eg in math formulae.
	return string(c.text), nil
}

func (p *parser) callonSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptOrSuperscriptPrefix3()
}

func (c *current) onOneOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonOneOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOneOrMoreBackslashes1()
}

func (c *current) onTwoOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonTwoOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTwoOrMoreBackslashes1()
}

func (c *current) onDoubleQuoteBoldText1(elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Bold, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldText1(stack["elements"])
}

func (c *current) onDoubleQuoteBoldTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonDoubleQuoteBoldTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement1(stack["element"])
}

func (c *current) onNonDoubleQuoteBoldText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonDoubleQuoteBoldText1()
}

func (c *current) onSingleQuoteBoldText2(elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '**' to emphazise a portion of a word)
	return types.NewQuotedText(types.Bold, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText2(stack["elements"])
}

func (c *current) onSingleQuoteBoldText12(elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation.
	return types.NewQuotedText(types.Bold, elements.([]interface{})) // include the second heading `*` as a regular StringElement in the bold content
}

func (p *parser) callonSingleQuoteBoldText12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText12(stack["elements"])
}

func (c *current) onSingleQuoteBoldTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonSingleQuoteBoldTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement1(stack["element"])
}

func (c *current) onNonSingleQuoteBoldText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonSingleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSingleQuoteBoldText1()
}

func (c *current) onEscapedBoldText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "**", elements.([]interface{}))

}

func (p *parser) callonEscapedBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation
	result := append([]interface{}{"*"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "*", result)

}

func (p *parser) callonEscapedBoldText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "*", elements.([]interface{}))
}

func (p *parser) callonEscapedBoldText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicText1(elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Italic, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicText1(stack["elements"])
}

func (c *current) onDoubleQuoteItalicTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonDoubleQuoteItalicTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement1(stack["element"])
}

func (c *current) onNonDoubleQuoteItalicText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonDoubleQuoteItalicText1()
}

func (c *current) onSingleQuoteItalicText2(elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '__' to emphazise a portion of a word)
	return types.NewQuotedText(types.Italic, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText2(stack["elements"])
}

func (c *current) onSingleQuoteItalicText12(elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation.
	return types.NewQuotedText(types.Italic, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content
}

func (p *parser) callonSingleQuoteItalicText12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText12(stack["elements"])
}

func (c *current) onSingleQuoteItalicTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonSingleQuoteItalicTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement1(stack["element"])
}

func (c *current) onNonSingleQuoteItalicText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonSingleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSingleQuoteItalicText1()
}

func (c *current) onEscapedItalicText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "__", elements.([]interface{}))

}

func (p *parser) callonEscapedItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation
	result := append([]interface{}{"_"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "_", result)

}

func (p *parser) callonEscapedItalicText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "_", elements.([]interface{}))
}

func (p *parser) callonEscapedItalicText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceText1(elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Monospace, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceText1(stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonDoubleQuoteMonospaceTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement1(stack["element"])
}

func (c *current) onNonDoubleQuoteMonospaceText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonDoubleQuoteMonospaceText1()
}

func (c *current) onSingleQuoteMonospaceText2(elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs "``" to emphazise a portion of a word)
	return types.NewQuotedText(types.Monospace, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText2(stack["elements"])
}

func (c *current) onSingleQuoteMonospaceText12(elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation.
	return types.NewQuotedText(types.Monospace, elements.([]interface{})) // include the second heading "`" as a regular StringElement in the monospace content
}

func (p *parser) callonSingleQuoteMonospaceText12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText12(stack["elements"])
}

func (c *current) onSingleQuoteMonospaceTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonSingleQuoteMonospaceTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement1(stack["element"])
}

func (c *current) onNonSingleQuoteMonospaceText1() (interface{}, error) {
	// break at multiline
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonSingleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSingleQuoteMonospaceText1()
}

func (c *current) onEscapedMonospaceText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "``", elements.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation
	result := append([]interface{}{"`"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "`", result)

}

func (p *parser) callonEscapedMonospaceText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "`", elements.([]interface{}))
}

func (p *parser) callonEscapedMonospaceText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText18(stack["backslashes"], stack["elements"])
}

func (c *current) onSubscriptText1(element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Subscript, element)
}

func (p *parser) callonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptText1(stack["element"])
}

func (c *current) onNonSubscriptText1() (interface{}, error) {

	return c.text, nil
}

func (p *parser) callonNonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSubscriptText1()
}

func (c *current) onEscapedSubscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "~", element)
}

func (p *parser) callonEscapedSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSuperscriptText1(element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Superscript, element)
}

func (p *parser) callonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptText1(stack["element"])
}

func (c *current) onNonSuperscriptText1() (interface{}, error) {

	return c.text, nil
}

func (p *parser) callonNonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSuperscriptText1()
}

func (c *current) onEscapedSuperscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "^", element)
}

func (p *parser) callonEscapedSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSinglePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewPassthrough(types.SinglePlusPassthrough, []interface{}{content})
}

func (p *parser) callonSinglePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthrough1(stack["content"])
}

func (c *current) onSinglePlusPassthroughContent2() (interface{}, error) {
	// no space in the first or last position of the content, but allowed elsewhere
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent2()
}

func (c *current) onSinglePlusPassthroughContent24() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent24()
}

func (c *current) onTriplePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewPassthrough(types.TriplePlusPassthrough, []interface{}{content})
}

func (p *parser) callonTriplePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthrough1(stack["content"])
}

func (c *current) onTriplePlusPassthroughContent2() (interface{}, error) {
	// spaces and newlines are also allowed in the first or last position of the content and elsewhere too
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent2()
}

func (c *current) onTriplePlusPassthroughContent8() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent8()
}

func (c *current) onPassthroughMacro2(content interface{}) (interface{}, error) {
	return types.NewPassthrough(types.PassthroughMacro, []interface{}{content})
}

func (p *parser) callonPassthroughMacro2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro2(stack["content"])
}

func (c *current) onPassthroughMacro9(content interface{}) (interface{}, error) {
	return types.NewPassthrough(types.PassthroughMacro, content.([]interface{}))
}

func (p *parser) callonPassthroughMacro9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro9(stack["content"])
}

func (c *current) onPassthroughMacroCharacter4() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonPassthroughMacroCharacter4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacroCharacter4()
}

func (c *current) onInternalCrossReference2(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id.(string), label.(string))
}

func (p *parser) callonInternalCrossReference2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference2(stack["id"], stack["label"])
}

func (c *current) onInternalCrossReference13(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id.(string), nil)
}

func (p *parser) callonInternalCrossReference13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference13(stack["id"])
}

func (c *current) onExternalCrossReference1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewExternalCrossReference(url.(types.Location), inlineAttributes.(types.ElementAttributes))
}

func (p *parser) callonExternalCrossReference1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onCrossReferenceLabel1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonCrossReferenceLabel1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReferenceLabel1()
}

func (c *current) onRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.ElementAttributes))
}

func (p *parser) callonRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onTextOnlyLinkAttributes1(text interface{}) (interface{}, error) {
	return types.NewInlineLinkAttributes(text, nil)
}

func (p *parser) callonTextOnlyLinkAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextOnlyLinkAttributes1(stack["text"])
}

func (c *current) onLinkTextWithCommaAttribute18() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLinkTextWithCommaAttribute18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextWithCommaAttribute18()
}

func (c *current) onLinkTextWithCommaAttribute2(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonLinkTextWithCommaAttribute2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextWithCommaAttribute2(stack["elements"])
}

func (c *current) onLinkTextWithCommaAttribute42() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLinkTextWithCommaAttribute42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextWithCommaAttribute42()
}

func (c *current) onLinkTextWithCommaAttribute29(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonLinkTextWithCommaAttribute29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextWithCommaAttribute29(stack["elements"])
}

func (c *current) onTextAndMoreLinkAttributes1(text, otherattrs interface{}) (interface{}, error) {
	return types.NewInlineLinkAttributes(text, otherattrs.([]interface{}))
}

func (p *parser) callonTextAndMoreLinkAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextAndMoreLinkAttributes1(stack["text"], stack["otherattrs"])
}

func (c *current) onLinkTextAttribute18() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLinkTextAttribute18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextAttribute18()
}

func (c *current) onLinkTextAttribute2(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonLinkTextAttribute2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextAttribute2(stack["elements"])
}

func (c *current) onLinkTextAttribute44() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLinkTextAttribute44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextAttribute44()
}

func (c *current) onLinkTextAttribute29(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonLinkTextAttribute29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextAttribute29(stack["elements"])
}

func (c *current) onInlineLinks1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonInlineLinks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineLinks1(stack["elements"])
}

func (c *current) onResolvedRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.ElementAttributes))
}

func (p *parser) callonResolvedRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onResolvedExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonResolvedExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onExternalQuotedLink1(url, inlineAttributes interface{}) (interface{}, error) {
	// here attributes are required, so we can safely use the `_` and `*` characters in the URL without messing with the bold or italic markers.
	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonExternalQuotedLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalQuotedLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onImageBlock1(attributes, path, inlineAttributes interface{}) (interface{}, error) {
	return types.NewImageBlock(path.(types.Location), inlineAttributes.(types.ElementAttributes), attributes)
}

func (p *parser) callonImageBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock1(stack["attributes"], stack["path"], stack["inlineAttributes"])
}

func (c *current) onInlineImage1(path, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineImage(path.(types.Location), inlineAttributes.(types.ElementAttributes))
}

func (p *parser) callonInlineImage1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage1(stack["path"], stack["inlineAttributes"])
}

func (c *current) onImageAttributes1(alt, width, height, otherattrs interface{}) (interface{}, error) {
	return types.NewImageAttributes(alt, width, height, otherattrs.([]interface{}))
}

func (p *parser) callonImageAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAttributes1(stack["alt"], stack["width"], stack["height"], stack["otherattrs"])
}

func (c *current) onInlineFootnote2(content interface{}) (interface{}, error) {
	return types.NewFootnote("", content.([]interface{}))
}

func (p *parser) callonInlineFootnote2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote2(stack["content"])
}

func (c *current) onInlineFootnote8(ref, content interface{}) (interface{}, error) {
	return types.NewFootnote(ref.(string), content.([]interface{}))
}

func (p *parser) callonInlineFootnote8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote8(stack["ref"], stack["content"])
}

func (c *current) onInlineFootnote17(ref interface{}) (interface{}, error) {
	return types.NewFootnote(ref.(string), []interface{}{}) // foot note referring to another note
}

func (p *parser) callonInlineFootnote17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote17(stack["ref"])
}

func (c *current) onFootnoteRef1() (interface{}, error) {
	// footnote ID not may span multiple lines
	return string(c.text), nil
}

func (p *parser) callonFootnoteRef1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteRef1()
}

func (c *current) onFootnoteContent1(elements interface{}) (interface{}, error) {
	// footnote content may span multiple lines
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonFootnoteContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteContent1(stack["elements"])
}

func (c *current) onDelimitedBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock1(stack["block"])
}

func (c *current) onFencedBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Fenced, content.([]interface{}), types.None, attributes)
}

func (p *parser) callonFencedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlock1(stack["attributes"], stack["content"])
}

func (c *current) onFencedBlockParagraph1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), types.ElementAttributes{})
}

func (p *parser) callonFencedBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockParagraph1(stack["lines"])
}

func (c *current) onFencedBlockParagraphLine1(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonFencedBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockParagraphLine1(stack["line"])
}

func (c *current) onListingBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Listing, content.([]interface{}), types.None, attributes)
}

func (p *parser) callonListingBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlock1(stack["attributes"], stack["content"])
}

func (c *current) onListingBlockParagraph1(lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), nil) // no attributes supported
}

func (p *parser) callonListingBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockParagraph1(stack["lines"])
}

func (c *current) onListingBlockParagraphLine6() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonListingBlockParagraphLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockParagraphLine6()
}

func (c *current) onListingBlockParagraphLine1(line interface{}) (interface{}, error) {
	// skip EOL in line content, and stop when quote block delimiter is encountered
	return types.NewInlineElements(line)
}

func (p *parser) callonListingBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockParagraphLine1(stack["line"])
}

func (c *current) onExampleBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Example, content.([]interface{}), types.None, attributes)
}

func (p *parser) callonExampleBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlock1(stack["attributes"], stack["content"])
}

func (c *current) onExampleBlockParagraph1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), types.ElementAttributes{})
}

func (p *parser) callonExampleBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockParagraph1(stack["lines"])
}

func (c *current) onExampleBlockParagraphLine1(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonExampleBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockParagraphLine1(stack["line"])
}

func (c *current) onQuoteBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Quote, content.([]interface{}), types.None, attributes)
}

func (p *parser) callonQuoteBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlock1(stack["attributes"], stack["content"])
}

func (c *current) onQuoteBlockElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonQuoteBlockElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockElement1(stack["element"])
}

func (c *current) onQuoteBlockParagraph1(lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), types.ElementAttributes{})
}

func (p *parser) callonQuoteBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockParagraph1(stack["lines"])
}

func (c *current) onVerseBlock5(attributes interface{}) (bool, error) {

	kind := attributes.(types.ElementAttributes).GetAsString("kind") // once we got the attributes, check that `[verse]`  was set
	return kind == "verse", nil

}

func (p *parser) callonVerseBlock5() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlock5(stack["attributes"])
}

func (c *current) onVerseBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Verse, content.([]interface{}), types.None, attributes)

}

func (p *parser) callonVerseBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlock1(stack["attributes"], stack["content"])
}

func (c *current) onVerseFileInclude1(include interface{}) (interface{}, error) {
	return include, nil
}

func (p *parser) callonVerseFileInclude1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseFileInclude1(stack["include"])
}

func (c *current) onVerseBlockParagraph1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), nil)
}

func (p *parser) callonVerseBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraph1(stack["lines"])
}

func (c *current) onVerseBlockParagraphLine8(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonVerseBlockParagraphLine8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraphLine8(stack["elements"])
}

func (c *current) onVerseBlockParagraphLine1(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonVerseBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraphLine1(stack["line"])
}

func (c *current) onVerseBlockParagraphLineElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonVerseBlockParagraphLineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraphLineElement1(stack["element"])
}

func (c *current) onSidebarBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Sidebar, content.([]interface{}), types.None, attributes)
}

func (p *parser) callonSidebarBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlock1(stack["attributes"], stack["content"])
}

func (c *current) onNonSidebarBlock1(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonNonSidebarBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSidebarBlock1(stack["content"])
}

func (c *current) onSidebarBlockParagraph1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), types.ElementAttributes{})
}

func (p *parser) callonSidebarBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockParagraph1(stack["lines"])
}

func (c *current) onSidebarBlockParagraphLine1(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonSidebarBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockParagraphLine1(stack["line"])
}

func (c *current) onTable1(attributes, header, lines interface{}) (interface{}, error) {
	// end delimiter or end of file
	return types.NewTable(header, lines.([]interface{}), attributes)
}

func (p *parser) callonTable1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTable1(stack["attributes"], stack["header"], stack["lines"])
}

func (c *current) onTableLineHeader1(cells interface{}) (interface{}, error) {
	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLineHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLineHeader1(stack["cells"])
}

func (c *current) onTableLine1(cells interface{}) (interface{}, error) {
	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLine1(stack["cells"])
}

func (c *current) onTableCell1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonTableCell1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCell1(stack["elements"])
}

func (c *current) onCommentBlock1(content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Comment, content.([]interface{}), types.Verbatim, nil)
}

func (p *parser) callonCommentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlock1(stack["content"])
}

func (c *current) onCommentBlockLine1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonCommentBlockLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlockLine1()
}

func (c *current) onSingleLineComment1(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))
}

func (p *parser) callonSingleLineComment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineComment1(stack["content"])
}

func (c *current) onSingleLineCommentContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleLineCommentContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineCommentContent1()
}

func (c *current) onParagraphWithHeadingSpaces1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithSpacesOnFirstLine, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithHeadingSpaces1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpaces1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithHeadingSpacesLines11() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines11()
}

func (c *current) onParagraphWithHeadingSpacesLines4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines4()
}

func (c *current) onParagraphWithHeadingSpacesLines24() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines24()
}

func (c *current) onParagraphWithHeadingSpacesLines19(otherLine interface{}) (interface{}, error) {
	return otherLine, nil // do not include the trailing 'EOL'

}

func (p *parser) callonParagraphWithHeadingSpacesLines19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines19(stack["otherLine"])
}

func (c *current) onParagraphWithHeadingSpacesLines1(firstLine, otherLines interface{}) (interface{}, error) {

	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonParagraphWithHeadingSpacesLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiter1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithDelimiter, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithLiteralBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiter1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLines1(lines interface{}) (interface{}, error) {
	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine4()
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine1(line interface{}) (interface{}, error) {

	return line, nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine1(stack["line"])
}

func (c *current) onParagraphWithLiteralAttribute6(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.ElementAttributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Literal, nil
	}
	return false, nil

}

func (p *parser) callonParagraphWithLiteralAttribute6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute6(stack["attributes"])
}

func (c *current) onParagraphWithLiteralAttribute1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithAttribute, lines.([]interface{}), attributes)

}

func (p *parser) callonParagraphWithLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute1(stack["attributes"], stack["lines"])
}

func (c *current) onLiteralKind1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLiteralKind1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralKind1()
}

func (c *current) onParagraphWithLiteralAttributeLines1(lines interface{}) (interface{}, error) {

	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralAttributeLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralAttributeLine4() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonParagraphWithLiteralAttributeLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLine4()
}

func (c *current) onParagraphWithLiteralAttributeLine1(line interface{}) (interface{}, error) {
	return line, nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralAttributeLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLine1(stack["line"])
}

func (c *current) onConceleadIndexTerm8(content interface{}) (interface{}, error) {
	return content, nil

}

func (p *parser) callonConceleadIndexTerm8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConceleadIndexTerm8(stack["content"])
}

func (c *current) onConceleadIndexTerm19(content interface{}) (interface{}, error) {
	return content, nil

}

func (p *parser) callonConceleadIndexTerm19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConceleadIndexTerm19(stack["content"])
}

func (c *current) onConceleadIndexTerm1(term1, term2, term3 interface{}) (interface{}, error) {
	return types.NewConceleadIndexTerm(term1, term2, term3)

}

func (p *parser) callonConceleadIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConceleadIndexTerm1(stack["term1"], stack["term2"], stack["term3"])
}

func (c *current) onBlankLine1() (interface{}, error) {
	return types.NewBlankLine()
}

func (p *parser) callonBlankLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlankLine1()
}

func (c *current) onAlphanums1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAlphanums1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAlphanums1()
}

func (c *current) onSimpleWord1() (interface{}, error) {
	// very straightforward content: alphanums followed by spaces but not the "+" signs because it needs a heading space to become a LineBreak element
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSimpleWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleWord1()
}

func (c *current) onOtherWord6() (interface{}, error) {
	// TODO: remove check on parenthesis and dot?
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonOtherWord6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherWord6()
}

func (c *current) onOtherWord1() (interface{}, error) {
	// word cannot contain parenthesis. Dots and ellipsis are treated as independent words (but will be combined afterwards)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonOtherWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherWord1()
}

func (c *current) onFileLocation1(elements interface{}) (interface{}, error) {
	return types.NewLocation(elements.([]interface{}))
}

func (p *parser) callonFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation1(stack["elements"])
}

func (c *current) onResolvedFileLocation1(elements interface{}) (interface{}, error) {
	return types.NewLocation(elements.([]interface{}))
}

func (p *parser) callonResolvedFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedFileLocation1(stack["elements"])
}

func (c *current) onLocation1(elements interface{}) (interface{}, error) {
	return types.NewLocation(elements.([]interface{}))
}

func (p *parser) callonLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocation1(stack["elements"])
}

func (c *current) onResolvedLocation1(elements interface{}) (interface{}, error) {
	return types.NewLocation(elements.([]interface{}))
}

func (p *parser) callonResolvedLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedLocation1(stack["elements"])
}

func (c *current) onURL1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonURL1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURL1()
}

func (c *current) onID1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onID1()
}

func (c *current) onDIGIT1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDIGIT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDIGIT1()
}

func (c *current) onNUMBER1() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonNUMBER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNUMBER1()
}

func (c *current) onWS3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonWS3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWS3()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			return val, ok
		}
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	ignoreCase := ""
	if lit.ignoreCase {
		ignoreCase = "i"
	}
	val := string(strconv.AppendQuote([]byte{}, lit.val)) + ignoreCase // wrap 'lit.val' with double quotes
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, val)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, val)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}
