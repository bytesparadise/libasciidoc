// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/bytesparadise/libasciidoc/pkg/types"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "AsciidocDocument",
			pos:  position{line: 17, col: 1, offset: 348},
			expr: &actionExpr{
				pos: position{line: 17, col: 21, offset: 368},
				run: (*parser).callonAsciidocDocument1,
				expr: &seqExpr{
					pos: position{line: 17, col: 21, offset: 368},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 17, col: 21, offset: 368},
							label: "frontmatter",
							expr: &zeroOrOneExpr{
								pos: position{line: 17, col: 34, offset: 381},
								expr: &ruleRefExpr{
									pos:  position{line: 17, col: 34, offset: 381},
									name: "FrontMatter",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 17, col: 48, offset: 395},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 17, col: 56, offset: 403},
								name: "AsciidocDocumentBlocks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 17, col: 80, offset: 427},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "VerbatimDocument",
			pos:  position{line: 21, col: 1, offset: 511},
			expr: &actionExpr{
				pos: position{line: 21, col: 21, offset: 531},
				run: (*parser).callonVerbatimDocument1,
				expr: &seqExpr{
					pos: position{line: 21, col: 21, offset: 531},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 21, col: 21, offset: 531},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 21, col: 29, offset: 539},
								name: "VerbatimFileContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 21, col: 50, offset: 560},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "TextDocument",
			pos:  position{line: 26, col: 1, offset: 665},
			expr: &actionExpr{
				pos: position{line: 26, col: 17, offset: 681},
				run: (*parser).callonTextDocument1,
				expr: &seqExpr{
					pos: position{line: 26, col: 17, offset: 681},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 26, col: 17, offset: 681},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 26, col: 25, offset: 689},
								name: "TextDocumentBlocks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 26, col: 45, offset: 709},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "AsciidocDocumentBlocks",
			pos:  position{line: 33, col: 1, offset: 899},
			expr: &actionExpr{
				pos: position{line: 33, col: 27, offset: 925},
				run: (*parser).callonAsciidocDocumentBlocks1,
				expr: &seqExpr{
					pos: position{line: 33, col: 27, offset: 925},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 33, col: 27, offset: 925},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 33, col: 35, offset: 933},
								expr: &ruleRefExpr{
									pos:  position{line: 33, col: 35, offset: 933},
									name: "DocumentHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 33, col: 52, offset: 950},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 33, col: 60, offset: 958},
								expr: &ruleRefExpr{
									pos:  position{line: 33, col: 60, offset: 958},
									name: "DocumentBlock",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentBlock",
			pos:  position{line: 42, col: 1, offset: 1216},
			expr: &choiceExpr{
				pos: position{line: 43, col: 9, offset: 1243},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 43, col: 9, offset: 1243},
						name: "LabeledListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 44, col: 11, offset: 1309},
						name: "SimpleParagraph",
					},
					&ruleRefExpr{
						pos:  position{line: 45, col: 11, offset: 1336},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 46, col: 11, offset: 1389},
						name: "Section",
					},
					&ruleRefExpr{
						pos:  position{line: 47, col: 11, offset: 1408},
						name: "DelimitedBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 48, col: 11, offset: 1434},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 49, col: 11, offset: 1459},
						name: "VerseParagraph",
					},
					&ruleRefExpr{
						pos:  position{line: 50, col: 11, offset: 1514},
						name: "ImageBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 51, col: 11, offset: 1536},
						name: "ThematicBreak",
					},
					&ruleRefExpr{
						pos:  position{line: 52, col: 11, offset: 1561},
						name: "OrderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 53, col: 11, offset: 1588},
						name: "UnorderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 54, col: 11, offset: 1618},
						name: "CalloutListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 55, col: 11, offset: 1645},
						name: "ContinuedListItemElement",
					},
					&ruleRefExpr{
						pos:  position{line: 56, col: 11, offset: 1681},
						name: "LiteralBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 57, col: 11, offset: 1706},
						name: "AttributeDeclaration",
					},
					&ruleRefExpr{
						pos:  position{line: 58, col: 11, offset: 1739},
						name: "AttributeReset",
					},
					&ruleRefExpr{
						pos:  position{line: 59, col: 11, offset: 1766},
						name: "TableOfContentsPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 60, col: 11, offset: 1804},
						name: "UserMacroBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 61, col: 11, offset: 1830},
						name: "StandaloneAttributes",
					},
					&ruleRefExpr{
						pos:  position{line: 62, col: 11, offset: 1862},
						name: "Paragraph",
					},
				},
			},
		},
		{
			name: "AsciidocDocumentBlocksWithinDelimitedBlock",
			pos:  position{line: 64, col: 1, offset: 1875},
			expr: &labeledExpr{
				pos:   position{line: 64, col: 47, offset: 1921},
				label: "blocks",
				expr: &zeroOrMoreExpr{
					pos: position{line: 64, col: 54, offset: 1928},
					expr: &ruleRefExpr{
						pos:  position{line: 64, col: 55, offset: 1929},
						name: "DocumentBlockWithinDelimitedBlock",
					},
				},
			},
		},
		{
			name: "DocumentBlockWithinDelimitedBlock",
			pos:  position{line: 66, col: 1, offset: 1968},
			expr: &actionExpr{
				pos: position{line: 66, col: 38, offset: 2005},
				run: (*parser).callonDocumentBlockWithinDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 66, col: 38, offset: 2005},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 66, col: 38, offset: 2005},
							expr: &ruleRefExpr{
								pos:  position{line: 66, col: 39, offset: 2006},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 67, col: 5, offset: 2016},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 67, col: 12, offset: 2023},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 67, col: 12, offset: 2023},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 68, col: 11, offset: 2049},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 69, col: 11, offset: 2102},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 70, col: 11, offset: 2127},
										name: "VerseParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 71, col: 11, offset: 2153},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 72, col: 11, offset: 2175},
										name: "ThematicBreak",
									},
									&ruleRefExpr{
										pos:  position{line: 73, col: 11, offset: 2200},
										name: "OrderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 74, col: 11, offset: 2227},
										name: "UnorderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 75, col: 11, offset: 2257},
										name: "LabeledListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 76, col: 11, offset: 2285},
										name: "ContinuedListItemElement",
									},
									&ruleRefExpr{
										pos:  position{line: 77, col: 11, offset: 2321},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 78, col: 11, offset: 2346},
										name: "AttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 79, col: 11, offset: 2379},
										name: "AttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 80, col: 11, offset: 2406},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 81, col: 11, offset: 2444},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 82, col: 11, offset: 2470},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TextDocumentBlocks",
			pos:  position{line: 86, col: 1, offset: 2512},
			expr: &labeledExpr{
				pos:   position{line: 86, col: 23, offset: 2534},
				label: "blocks",
				expr: &zeroOrMoreExpr{
					pos: position{line: 86, col: 30, offset: 2541},
					expr: &ruleRefExpr{
						pos:  position{line: 86, col: 31, offset: 2542},
						name: "TextDocumentBlock",
					},
				},
			},
		},
		{
			name: "TextDocumentBlock",
			pos:  position{line: 88, col: 1, offset: 2565},
			expr: &actionExpr{
				pos: position{line: 88, col: 22, offset: 2586},
				run: (*parser).callonTextDocumentBlock1,
				expr: &seqExpr{
					pos: position{line: 88, col: 22, offset: 2586},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 88, col: 22, offset: 2586},
							expr: &ruleRefExpr{
								pos:  position{line: 88, col: 23, offset: 2587},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 89, col: 5, offset: 2597},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 89, col: 12, offset: 2604},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 89, col: 12, offset: 2604},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 89, col: 24, offset: 2616},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FrontMatter",
			pos:  position{line: 96, col: 1, offset: 2769},
			expr: &ruleRefExpr{
				pos:  position{line: 96, col: 16, offset: 2784},
				name: "YamlFrontMatter",
			},
		},
		{
			name: "YamlFrontMatter",
			pos:  position{line: 98, col: 1, offset: 2804},
			expr: &actionExpr{
				pos: position{line: 98, col: 20, offset: 2823},
				run: (*parser).callonYamlFrontMatter1,
				expr: &seqExpr{
					pos: position{line: 98, col: 20, offset: 2823},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 98, col: 20, offset: 2823},
							name: "YamlFrontMatterToken",
						},
						&labeledExpr{
							pos:   position{line: 98, col: 41, offset: 2844},
							label: "content",
							expr: &zeroOrOneExpr{
								pos: position{line: 98, col: 49, offset: 2852},
								expr: &ruleRefExpr{
									pos:  position{line: 98, col: 50, offset: 2853},
									name: "YamlFrontMatterContent",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 98, col: 75, offset: 2878},
							name: "YamlFrontMatterToken",
						},
					},
				},
			},
		},
		{
			name: "YamlFrontMatterToken",
			pos:  position{line: 102, col: 1, offset: 2962},
			expr: &seqExpr{
				pos: position{line: 102, col: 26, offset: 2987},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 102, col: 26, offset: 2987},
						val:        "---",
						ignoreCase: false,
						want:       "\"---\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 102, col: 32, offset: 2993},
						expr: &ruleRefExpr{
							pos:  position{line: 102, col: 32, offset: 2993},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 102, col: 39, offset: 3000},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "YamlFrontMatterContent",
			pos:  position{line: 104, col: 1, offset: 3007},
			expr: &actionExpr{
				pos: position{line: 104, col: 27, offset: 3033},
				run: (*parser).callonYamlFrontMatterContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 104, col: 27, offset: 3033},
					expr: &oneOrMoreExpr{
						pos: position{line: 104, col: 28, offset: 3034},
						expr: &seqExpr{
							pos: position{line: 104, col: 29, offset: 3035},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 104, col: 29, offset: 3035},
									expr: &ruleRefExpr{
										pos:  position{line: 104, col: 30, offset: 3036},
										name: "YamlFrontMatterToken",
									},
								},
								&anyMatcher{
									line: 104, col: 51, offset: 3057,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentHeader",
			pos:  position{line: 111, col: 1, offset: 3230},
			expr: &actionExpr{
				pos: position{line: 111, col: 19, offset: 3248},
				run: (*parser).callonDocumentHeader1,
				expr: &seqExpr{
					pos: position{line: 111, col: 19, offset: 3248},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 111, col: 19, offset: 3248},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 111, col: 23, offset: 3252},
							expr: &ruleRefExpr{
								pos:  position{line: 111, col: 23, offset: 3252},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 111, col: 30, offset: 3259},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 111, col: 37, offset: 3266},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 111, col: 52, offset: 3281},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 111, col: 56, offset: 3285},
								expr: &ruleRefExpr{
									pos:  position{line: 111, col: 56, offset: 3285},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 111, col: 74, offset: 3303},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 112, col: 9, offset: 3316},
							expr: &choiceExpr{
								pos: position{line: 112, col: 10, offset: 3317},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 112, col: 10, offset: 3317},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 112, col: 30, offset: 3337},
										name: "CommentBlock",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 113, col: 9, offset: 3361},
							label: "authors",
							expr: &zeroOrOneExpr{
								pos: position{line: 113, col: 18, offset: 3370},
								expr: &ruleRefExpr{
									pos:  position{line: 113, col: 18, offset: 3370},
									name: "DocumentAuthors",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 114, col: 9, offset: 3398},
							expr: &choiceExpr{
								pos: position{line: 114, col: 10, offset: 3399},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 114, col: 10, offset: 3399},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 114, col: 30, offset: 3419},
										name: "CommentBlock",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 115, col: 9, offset: 3443},
							label: "revision",
							expr: &zeroOrOneExpr{
								pos: position{line: 115, col: 19, offset: 3453},
								expr: &ruleRefExpr{
									pos:  position{line: 115, col: 19, offset: 3453},
									name: "DocumentRevision",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthors",
			pos:  position{line: 119, col: 1, offset: 3558},
			expr: &choiceExpr{
				pos: position{line: 119, col: 20, offset: 3577},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 119, col: 20, offset: 3577},
						name: "DocumentAuthorsInlineForm",
					},
					&ruleRefExpr{
						pos:  position{line: 119, col: 48, offset: 3605},
						name: "DocumentAuthorsAttributeForm",
					},
				},
			},
		},
		{
			name: "DocumentAuthorsInlineForm",
			pos:  position{line: 121, col: 1, offset: 3637},
			expr: &actionExpr{
				pos: position{line: 121, col: 30, offset: 3666},
				run: (*parser).callonDocumentAuthorsInlineForm1,
				expr: &seqExpr{
					pos: position{line: 121, col: 30, offset: 3666},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 121, col: 30, offset: 3666},
							expr: &ruleRefExpr{
								pos:  position{line: 121, col: 30, offset: 3666},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 121, col: 37, offset: 3673},
							expr: &litMatcher{
								pos:        position{line: 121, col: 38, offset: 3674},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 121, col: 42, offset: 3678},
							label: "authors",
							expr: &oneOrMoreExpr{
								pos: position{line: 121, col: 51, offset: 3687},
								expr: &ruleRefExpr{
									pos:  position{line: 121, col: 51, offset: 3687},
									name: "DocumentAuthor",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 121, col: 68, offset: 3704},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorsAttributeForm",
			pos:  position{line: 125, col: 1, offset: 3778},
			expr: &actionExpr{
				pos: position{line: 125, col: 33, offset: 3810},
				run: (*parser).callonDocumentAuthorsAttributeForm1,
				expr: &seqExpr{
					pos: position{line: 125, col: 33, offset: 3810},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 125, col: 33, offset: 3810},
							expr: &ruleRefExpr{
								pos:  position{line: 125, col: 33, offset: 3810},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 125, col: 40, offset: 3817},
							val:        ":author:",
							ignoreCase: false,
							want:       "\":author:\"",
						},
						&labeledExpr{
							pos:   position{line: 125, col: 51, offset: 3828},
							label: "author",
							expr: &ruleRefExpr{
								pos:  position{line: 125, col: 59, offset: 3836},
								name: "DocumentAuthor",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 125, col: 75, offset: 3852},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthor",
			pos:  position{line: 129, col: 1, offset: 3935},
			expr: &actionExpr{
				pos: position{line: 129, col: 19, offset: 3953},
				run: (*parser).callonDocumentAuthor1,
				expr: &seqExpr{
					pos: position{line: 129, col: 19, offset: 3953},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 129, col: 19, offset: 3953},
							expr: &ruleRefExpr{
								pos:  position{line: 129, col: 19, offset: 3953},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 129, col: 26, offset: 3960},
							label: "fullname",
							expr: &ruleRefExpr{
								pos:  position{line: 129, col: 36, offset: 3970},
								name: "DocumentAuthorName",
							},
						},
						&labeledExpr{
							pos:   position{line: 129, col: 56, offset: 3990},
							label: "email",
							expr: &zeroOrOneExpr{
								pos: position{line: 129, col: 62, offset: 3996},
								expr: &ruleRefExpr{
									pos:  position{line: 129, col: 63, offset: 3997},
									name: "DocumentAuthorEmail",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 129, col: 85, offset: 4019},
							expr: &ruleRefExpr{
								pos:  position{line: 129, col: 85, offset: 4019},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 129, col: 92, offset: 4026},
							expr: &litMatcher{
								pos:        position{line: 129, col: 92, offset: 4026},
								val:        ";",
								ignoreCase: false,
								want:       "\";\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 129, col: 97, offset: 4031},
							expr: &ruleRefExpr{
								pos:  position{line: 129, col: 97, offset: 4031},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorName",
			pos:  position{line: 134, col: 1, offset: 4181},
			expr: &actionExpr{
				pos: position{line: 134, col: 23, offset: 4203},
				run: (*parser).callonDocumentAuthorName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 134, col: 23, offset: 4203},
					expr: &charClassMatcher{
						pos:        position{line: 134, col: 23, offset: 4203},
						val:        "[^<;\\r\\n]",
						chars:      []rune{'<', ';', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentAuthorEmail",
			pos:  position{line: 138, col: 1, offset: 4254},
			expr: &actionExpr{
				pos: position{line: 138, col: 24, offset: 4277},
				run: (*parser).callonDocumentAuthorEmail1,
				expr: &seqExpr{
					pos: position{line: 138, col: 24, offset: 4277},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 138, col: 24, offset: 4277},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 138, col: 28, offset: 4281},
							label: "email",
							expr: &actionExpr{
								pos: position{line: 138, col: 35, offset: 4288},
								run: (*parser).callonDocumentAuthorEmail5,
								expr: &oneOrMoreExpr{
									pos: position{line: 138, col: 36, offset: 4289},
									expr: &charClassMatcher{
										pos:        position{line: 138, col: 36, offset: 4289},
										val:        "[^>\\r\\n]",
										chars:      []rune{'>', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 140, col: 4, offset: 4338},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevision",
			pos:  position{line: 146, col: 1, offset: 4505},
			expr: &actionExpr{
				pos: position{line: 146, col: 21, offset: 4525},
				run: (*parser).callonDocumentRevision1,
				expr: &seqExpr{
					pos: position{line: 146, col: 21, offset: 4525},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 146, col: 21, offset: 4525},
							expr: &ruleRefExpr{
								pos:  position{line: 146, col: 21, offset: 4525},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 146, col: 28, offset: 4532},
							expr: &litMatcher{
								pos:        position{line: 146, col: 29, offset: 4533},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 146, col: 33, offset: 4537},
							label: "revision",
							expr: &choiceExpr{
								pos: position{line: 147, col: 9, offset: 4557},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 147, col: 10, offset: 4558},
										run: (*parser).callonDocumentRevision9,
										expr: &seqExpr{
											pos: position{line: 147, col: 10, offset: 4558},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 147, col: 10, offset: 4558},
													label: "revnumber",
													expr: &ruleRefExpr{
														pos:  position{line: 147, col: 21, offset: 4569},
														name: "DocumentRevisionNumber",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 147, col: 45, offset: 4593},
													expr: &litMatcher{
														pos:        position{line: 147, col: 45, offset: 4593},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 147, col: 50, offset: 4598},
													label: "revdate",
													expr: &zeroOrOneExpr{
														pos: position{line: 147, col: 58, offset: 4606},
														expr: &ruleRefExpr{
															pos:  position{line: 147, col: 59, offset: 4607},
															name: "DocumentRevisionDate",
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 147, col: 82, offset: 4630},
													expr: &litMatcher{
														pos:        position{line: 147, col: 82, offset: 4630},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 147, col: 87, offset: 4635},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 147, col: 97, offset: 4645},
														expr: &ruleRefExpr{
															pos:  position{line: 147, col: 98, offset: 4646},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 149, col: 15, offset: 4765},
										run: (*parser).callonDocumentRevision23,
										expr: &seqExpr{
											pos: position{line: 149, col: 15, offset: 4765},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 149, col: 15, offset: 4765},
													label: "revdate",
													expr: &ruleRefExpr{
														pos:  position{line: 149, col: 24, offset: 4774},
														name: "DocumentRevisionDate",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 149, col: 46, offset: 4796},
													expr: &litMatcher{
														pos:        position{line: 149, col: 46, offset: 4796},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 149, col: 51, offset: 4801},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 149, col: 61, offset: 4811},
														expr: &ruleRefExpr{
															pos:  position{line: 149, col: 62, offset: 4812},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 151, col: 13, offset: 4923},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionNumber",
			pos:  position{line: 156, col: 1, offset: 5058},
			expr: &choiceExpr{
				pos: position{line: 156, col: 27, offset: 5084},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 156, col: 27, offset: 5084},
						run: (*parser).callonDocumentRevisionNumber2,
						expr: &seqExpr{
							pos: position{line: 156, col: 27, offset: 5084},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 156, col: 27, offset: 5084},
									val:        "v",
									ignoreCase: true,
									want:       "\"v\"i",
								},
								&ruleRefExpr{
									pos:  position{line: 156, col: 32, offset: 5089},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 156, col: 39, offset: 5096},
									expr: &charClassMatcher{
										pos:        position{line: 156, col: 39, offset: 5096},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 158, col: 5, offset: 5146},
						run: (*parser).callonDocumentRevisionNumber8,
						expr: &seqExpr{
							pos: position{line: 158, col: 5, offset: 5146},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 158, col: 5, offset: 5146},
									expr: &litMatcher{
										pos:        position{line: 158, col: 5, offset: 5146},
										val:        "v",
										ignoreCase: true,
										want:       "\"v\"i",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 158, col: 11, offset: 5152},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 158, col: 18, offset: 5159},
									expr: &charClassMatcher{
										pos:        position{line: 158, col: 18, offset: 5159},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 158, col: 29, offset: 5170},
									expr: &ruleRefExpr{
										pos:  position{line: 158, col: 29, offset: 5170},
										name: "Space",
									},
								},
								&andExpr{
									pos: position{line: 158, col: 36, offset: 5177},
									expr: &litMatcher{
										pos:        position{line: 158, col: 37, offset: 5178},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionDate",
			pos:  position{line: 162, col: 1, offset: 5222},
			expr: &actionExpr{
				pos: position{line: 162, col: 25, offset: 5246},
				run: (*parser).callonDocumentRevisionDate1,
				expr: &oneOrMoreExpr{
					pos: position{line: 162, col: 25, offset: 5246},
					expr: &charClassMatcher{
						pos:        position{line: 162, col: 25, offset: 5246},
						val:        "[^:\\r\\n]",
						chars:      []rune{':', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentRevisionRemark",
			pos:  position{line: 166, col: 1, offset: 5296},
			expr: &actionExpr{
				pos: position{line: 166, col: 27, offset: 5322},
				run: (*parser).callonDocumentRevisionRemark1,
				expr: &oneOrMoreExpr{
					pos: position{line: 166, col: 27, offset: 5322},
					expr: &charClassMatcher{
						pos:        position{line: 166, col: 27, offset: 5322},
						val:        "[^\\r\\r\\n]",
						chars:      []rune{'\r', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "AttributeDeclaration",
			pos:  position{line: 173, col: 1, offset: 5482},
			expr: &actionExpr{
				pos: position{line: 173, col: 25, offset: 5506},
				run: (*parser).callonAttributeDeclaration1,
				expr: &seqExpr{
					pos: position{line: 173, col: 25, offset: 5506},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 173, col: 25, offset: 5506},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 173, col: 29, offset: 5510},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 173, col: 35, offset: 5516},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 173, col: 50, offset: 5531},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 174, col: 9, offset: 5545},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 174, col: 15, offset: 5551},
								expr: &actionExpr{
									pos: position{line: 174, col: 16, offset: 5552},
									run: (*parser).callonAttributeDeclaration9,
									expr: &seqExpr{
										pos: position{line: 174, col: 17, offset: 5553},
										exprs: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 174, col: 17, offset: 5553},
												expr: &ruleRefExpr{
													pos:  position{line: 174, col: 17, offset: 5553},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 174, col: 24, offset: 5560},
												label: "value",
												expr: &ruleRefExpr{
													pos:  position{line: 174, col: 31, offset: 5567},
													name: "AttributeDeclarationValue",
												},
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 176, col: 13, offset: 5643},
							expr: &ruleRefExpr{
								pos:  position{line: 176, col: 13, offset: 5643},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 176, col: 20, offset: 5650},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "AttributeName",
			pos:  position{line: 183, col: 1, offset: 5897},
			expr: &actionExpr{
				pos: position{line: 183, col: 18, offset: 5914},
				run: (*parser).callonAttributeName1,
				expr: &seqExpr{
					pos: position{line: 183, col: 18, offset: 5914},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 183, col: 18, offset: 5914},
							val:        "[\\pL0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 183, col: 28, offset: 5924},
							expr: &charClassMatcher{
								pos:        position{line: 183, col: 29, offset: 5925},
								val:        "[\\pL0-9-]",
								chars:      []rune{'-'},
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeDeclarationValue",
			pos:  position{line: 187, col: 1, offset: 5977},
			expr: &actionExpr{
				pos: position{line: 187, col: 30, offset: 6006},
				run: (*parser).callonAttributeDeclarationValue1,
				expr: &oneOrMoreExpr{
					pos: position{line: 187, col: 30, offset: 6006},
					expr: &charClassMatcher{
						pos:        position{line: 187, col: 30, offset: 6006},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "AttributeReset",
			pos:  position{line: 191, col: 1, offset: 6055},
			expr: &choiceExpr{
				pos: position{line: 191, col: 19, offset: 6073},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 191, col: 19, offset: 6073},
						run: (*parser).callonAttributeReset2,
						expr: &seqExpr{
							pos: position{line: 191, col: 19, offset: 6073},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 191, col: 19, offset: 6073},
									val:        ":!",
									ignoreCase: false,
									want:       "\":!\"",
								},
								&labeledExpr{
									pos:   position{line: 191, col: 24, offset: 6078},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 191, col: 30, offset: 6084},
										name: "AttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 191, col: 45, offset: 6099},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 191, col: 49, offset: 6103},
									expr: &ruleRefExpr{
										pos:  position{line: 191, col: 49, offset: 6103},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 191, col: 56, offset: 6110},
									name: "EOL",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 193, col: 5, offset: 6172},
						run: (*parser).callonAttributeReset11,
						expr: &seqExpr{
							pos: position{line: 193, col: 5, offset: 6172},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 193, col: 5, offset: 6172},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&labeledExpr{
									pos:   position{line: 193, col: 9, offset: 6176},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 193, col: 15, offset: 6182},
										name: "AttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 193, col: 30, offset: 6197},
									val:        "!:",
									ignoreCase: false,
									want:       "\"!:\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 193, col: 35, offset: 6202},
									expr: &ruleRefExpr{
										pos:  position{line: 193, col: 35, offset: 6202},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 193, col: 42, offset: 6209},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeSubstitution",
			pos:  position{line: 197, col: 1, offset: 6272},
			expr: &actionExpr{
				pos: position{line: 197, col: 26, offset: 6297},
				run: (*parser).callonAttributeSubstitution1,
				expr: &seqExpr{
					pos: position{line: 197, col: 26, offset: 6297},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 197, col: 26, offset: 6297},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&labeledExpr{
							pos:   position{line: 197, col: 30, offset: 6301},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 197, col: 36, offset: 6307},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 197, col: 51, offset: 6322},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "Attributes",
			pos:  position{line: 201, col: 1, offset: 6392},
			expr: &actionExpr{
				pos: position{line: 201, col: 15, offset: 6406},
				run: (*parser).callonAttributes1,
				expr: &seqExpr{
					pos: position{line: 201, col: 15, offset: 6406},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 201, col: 15, offset: 6406},
							label: "attrs",
							expr: &oneOrMoreExpr{
								pos: position{line: 201, col: 21, offset: 6412},
								expr: &ruleRefExpr{
									pos:  position{line: 201, col: 22, offset: 6413},
									name: "ElementAttribute",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 201, col: 41, offset: 6432},
							expr: &ruleRefExpr{
								pos:  position{line: 201, col: 41, offset: 6432},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "ElementAttribute",
			pos:  position{line: 205, col: 1, offset: 6506},
			expr: &actionExpr{
				pos: position{line: 205, col: 21, offset: 6526},
				run: (*parser).callonElementAttribute1,
				expr: &seqExpr{
					pos: position{line: 205, col: 21, offset: 6526},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 205, col: 21, offset: 6526},
							expr: &choiceExpr{
								pos: position{line: 205, col: 23, offset: 6528},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 205, col: 23, offset: 6528},
										val:        "[",
										ignoreCase: false,
										want:       "\"[\"",
									},
									&litMatcher{
										pos:        position{line: 205, col: 29, offset: 6534},
										val:        ".",
										ignoreCase: false,
										want:       "\".\"",
									},
									&litMatcher{
										pos:        position{line: 205, col: 35, offset: 6540},
										val:        "#",
										ignoreCase: false,
										want:       "\"#\"",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 206, col: 5, offset: 6617},
							label: "attr",
							expr: &choiceExpr{
								pos: position{line: 206, col: 11, offset: 6623},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 206, col: 11, offset: 6623},
										name: "ElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 207, col: 9, offset: 6645},
										name: "ElementTitle",
									},
									&ruleRefExpr{
										pos:  position{line: 208, col: 9, offset: 6670},
										name: "ElementRole",
									},
									&ruleRefExpr{
										pos:  position{line: 209, col: 9, offset: 6694},
										name: "LiteralAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 210, col: 9, offset: 6723},
										name: "SourceAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 211, col: 9, offset: 6752},
										name: "QuoteAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 212, col: 9, offset: 6780},
										name: "VerseAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 213, col: 9, offset: 6808},
										name: "AdmonitionMarkerAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 214, col: 9, offset: 6846},
										name: "HorizontalLayout",
									},
									&ruleRefExpr{
										pos:  position{line: 215, col: 9, offset: 6875},
										name: "PassthroughBlockAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 216, col: 9, offset: 6913},
										name: "AttributeGroup",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MasqueradeAttribute",
			pos:  position{line: 221, col: 1, offset: 7101},
			expr: &choiceExpr{
				pos: position{line: 221, col: 24, offset: 7124},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 221, col: 24, offset: 7124},
						name: "QuoteAttributes",
					},
					&ruleRefExpr{
						pos:  position{line: 221, col: 42, offset: 7142},
						name: "VerseAttributes",
					},
				},
			},
		},
		{
			name: "ElementID",
			pos:  position{line: 223, col: 1, offset: 7161},
			expr: &choiceExpr{
				pos: position{line: 223, col: 14, offset: 7174},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 223, col: 14, offset: 7174},
						run: (*parser).callonElementID2,
						expr: &seqExpr{
							pos: position{line: 223, col: 14, offset: 7174},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 223, col: 14, offset: 7174},
									val:        "[[",
									ignoreCase: false,
									want:       "\"[[\"",
								},
								&labeledExpr{
									pos:   position{line: 223, col: 19, offset: 7179},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 223, col: 23, offset: 7183},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 223, col: 27, offset: 7187},
									val:        "]]",
									ignoreCase: false,
									want:       "\"]]\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 223, col: 32, offset: 7192},
									expr: &ruleRefExpr{
										pos:  position{line: 223, col: 32, offset: 7192},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 223, col: 39, offset: 7199},
									name: "EOL",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 225, col: 5, offset: 7254},
						run: (*parser).callonElementID11,
						expr: &seqExpr{
							pos: position{line: 225, col: 5, offset: 7254},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 225, col: 5, offset: 7254},
									val:        "[#",
									ignoreCase: false,
									want:       "\"[#\"",
								},
								&labeledExpr{
									pos:   position{line: 225, col: 10, offset: 7259},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 225, col: 14, offset: 7263},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 225, col: 18, offset: 7267},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 225, col: 23, offset: 7272},
									expr: &ruleRefExpr{
										pos:  position{line: 225, col: 23, offset: 7272},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 225, col: 30, offset: 7279},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElementID",
			pos:  position{line: 229, col: 1, offset: 7335},
			expr: &actionExpr{
				pos: position{line: 229, col: 20, offset: 7354},
				run: (*parser).callonInlineElementID1,
				expr: &seqExpr{
					pos: position{line: 229, col: 20, offset: 7354},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 229, col: 20, offset: 7354},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 229, col: 25, offset: 7359},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 229, col: 29, offset: 7363},
								name: "ID",
							},
						},
						&litMatcher{
							pos:        position{line: 229, col: 33, offset: 7367},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 229, col: 38, offset: 7372},
							expr: &ruleRefExpr{
								pos:  position{line: 229, col: 38, offset: 7372},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "ElementTitle",
			pos:  position{line: 235, col: 1, offset: 7655},
			expr: &actionExpr{
				pos: position{line: 235, col: 17, offset: 7671},
				run: (*parser).callonElementTitle1,
				expr: &seqExpr{
					pos: position{line: 235, col: 17, offset: 7671},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 235, col: 17, offset: 7671},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 235, col: 21, offset: 7675},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 235, col: 28, offset: 7682},
								name: "ElementTitleContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 235, col: 49, offset: 7703},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ElementTitleContent",
			pos:  position{line: 239, col: 1, offset: 7765},
			expr: &actionExpr{
				pos: position{line: 239, col: 24, offset: 7788},
				run: (*parser).callonElementTitleContent1,
				expr: &seqExpr{
					pos: position{line: 239, col: 24, offset: 7788},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 239, col: 24, offset: 7788},
							val:        "[\\pL0-9]",
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 239, col: 32, offset: 7796},
							expr: &charClassMatcher{
								pos:        position{line: 239, col: 32, offset: 7796},
								val:        "[^\\r\\n<>]",
								chars:      []rune{'\r', '\n', '<', '>'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "ElementRole",
			pos:  position{line: 245, col: 1, offset: 8029},
			expr: &actionExpr{
				pos: position{line: 245, col: 16, offset: 8044},
				run: (*parser).callonElementRole1,
				expr: &seqExpr{
					pos: position{line: 245, col: 16, offset: 8044},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 245, col: 16, offset: 8044},
							val:        "[.",
							ignoreCase: false,
							want:       "\"[.\"",
						},
						&labeledExpr{
							pos:   position{line: 245, col: 21, offset: 8049},
							label: "role",
							expr: &actionExpr{
								pos: position{line: 245, col: 27, offset: 8055},
								run: (*parser).callonElementRole5,
								expr: &seqExpr{
									pos: position{line: 245, col: 27, offset: 8055},
									exprs: []interface{}{
										&charClassMatcher{
											pos:        position{line: 245, col: 27, offset: 8055},
											val:        "[\\pL0-9]",
											ranges:     []rune{'0', '9'},
											classes:    []*unicode.RangeTable{rangeTable("L")},
											ignoreCase: false,
											inverted:   false,
										},
										&zeroOrMoreExpr{
											pos: position{line: 245, col: 36, offset: 8064},
											expr: &charClassMatcher{
												pos:        position{line: 245, col: 36, offset: 8064},
												val:        "[^\\]\\r\\n]",
												chars:      []rune{']', '\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 247, col: 4, offset: 8113},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 247, col: 8, offset: 8117},
							expr: &ruleRefExpr{
								pos:  position{line: 247, col: 8, offset: 8117},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 247, col: 15, offset: 8124},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "LiteralAttribute",
			pos:  position{line: 251, col: 1, offset: 8184},
			expr: &actionExpr{
				pos: position{line: 251, col: 21, offset: 8204},
				run: (*parser).callonLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 251, col: 21, offset: 8204},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 251, col: 21, offset: 8204},
							val:        "[literal]",
							ignoreCase: false,
							want:       "\"[literal]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 251, col: 33, offset: 8216},
							expr: &ruleRefExpr{
								pos:  position{line: 251, col: 33, offset: 8216},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 251, col: 40, offset: 8223},
							name: "Newline",
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockAttribute",
			pos:  position{line: 255, col: 1, offset: 8279},
			expr: &actionExpr{
				pos: position{line: 255, col: 30, offset: 8308},
				run: (*parser).callonPassthroughBlockAttribute1,
				expr: &seqExpr{
					pos: position{line: 255, col: 30, offset: 8308},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 255, col: 30, offset: 8308},
							val:        "[pass]",
							ignoreCase: false,
							want:       "\"[pass]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 255, col: 39, offset: 8317},
							expr: &ruleRefExpr{
								pos:  position{line: 255, col: 39, offset: 8317},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 255, col: 46, offset: 8324},
							name: "Newline",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionMarkerAttribute",
			pos:  position{line: 260, col: 1, offset: 8470},
			expr: &actionExpr{
				pos: position{line: 260, col: 30, offset: 8499},
				run: (*parser).callonAdmonitionMarkerAttribute1,
				expr: &seqExpr{
					pos: position{line: 260, col: 30, offset: 8499},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 260, col: 30, offset: 8499},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 260, col: 34, offset: 8503},
							label: "k",
							expr: &ruleRefExpr{
								pos:  position{line: 260, col: 37, offset: 8506},
								name: "AdmonitionKind",
							},
						},
						&litMatcher{
							pos:        position{line: 260, col: 53, offset: 8522},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 260, col: 57, offset: 8526},
							expr: &ruleRefExpr{
								pos:  position{line: 260, col: 57, offset: 8526},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 260, col: 64, offset: 8533},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SourceAttributes",
			pos:  position{line: 265, col: 1, offset: 8693},
			expr: &actionExpr{
				pos: position{line: 265, col: 21, offset: 8713},
				run: (*parser).callonSourceAttributes1,
				expr: &seqExpr{
					pos: position{line: 265, col: 21, offset: 8713},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 265, col: 21, offset: 8713},
							val:        "[source",
							ignoreCase: false,
							want:       "\"[source\"",
						},
						&labeledExpr{
							pos:   position{line: 266, col: 5, offset: 8729},
							label: "language",
							expr: &zeroOrOneExpr{
								pos: position{line: 266, col: 14, offset: 8738},
								expr: &actionExpr{
									pos: position{line: 266, col: 15, offset: 8739},
									run: (*parser).callonSourceAttributes6,
									expr: &seqExpr{
										pos: position{line: 266, col: 15, offset: 8739},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 266, col: 15, offset: 8739},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 266, col: 19, offset: 8743},
												label: "attr",
												expr: &zeroOrOneExpr{
													pos: position{line: 266, col: 24, offset: 8748},
													expr: &ruleRefExpr{
														pos:  position{line: 266, col: 25, offset: 8749},
														name: "StandaloneAttributeValue",
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 267, col: 5, offset: 8805},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 267, col: 12, offset: 8812},
								expr: &actionExpr{
									pos: position{line: 267, col: 13, offset: 8813},
									run: (*parser).callonSourceAttributes14,
									expr: &seqExpr{
										pos: position{line: 267, col: 13, offset: 8813},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 267, col: 13, offset: 8813},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 267, col: 17, offset: 8817},
												label: "attr",
												expr: &zeroOrOneExpr{
													pos: position{line: 267, col: 22, offset: 8822},
													expr: &ruleRefExpr{
														pos:  position{line: 267, col: 23, offset: 8823},
														name: "GenericAttribute",
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 268, col: 5, offset: 8871},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 268, col: 9, offset: 8875},
							expr: &ruleRefExpr{
								pos:  position{line: 268, col: 9, offset: 8875},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 268, col: 16, offset: 8882},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "AttributeGroup",
			pos:  position{line: 273, col: 1, offset: 9038},
			expr: &actionExpr{
				pos: position{line: 273, col: 19, offset: 9056},
				run: (*parser).callonAttributeGroup1,
				expr: &seqExpr{
					pos: position{line: 273, col: 19, offset: 9056},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 273, col: 19, offset: 9056},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 273, col: 23, offset: 9060},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 273, col: 34, offset: 9071},
								expr: &ruleRefExpr{
									pos:  position{line: 273, col: 35, offset: 9072},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 273, col: 54, offset: 9091},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 273, col: 58, offset: 9095},
							expr: &ruleRefExpr{
								pos:  position{line: 273, col: 58, offset: 9095},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 273, col: 65, offset: 9102},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "GenericAttribute",
			pos:  position{line: 277, col: 1, offset: 9178},
			expr: &choiceExpr{
				pos: position{line: 277, col: 21, offset: 9198},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 277, col: 21, offset: 9198},
						name: "GenericAttributeWithValue",
					},
					&ruleRefExpr{
						pos:  position{line: 277, col: 49, offset: 9226},
						name: "GenericAttributeWithoutValue",
					},
				},
			},
		},
		{
			name: "GenericAttributeWithValue",
			pos:  position{line: 279, col: 1, offset: 9258},
			expr: &actionExpr{
				pos: position{line: 279, col: 30, offset: 9287},
				run: (*parser).callonGenericAttributeWithValue1,
				expr: &seqExpr{
					pos: position{line: 279, col: 30, offset: 9287},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 279, col: 30, offset: 9287},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 279, col: 35, offset: 9292},
								name: "AttributeKey",
							},
						},
						&litMatcher{
							pos:        position{line: 279, col: 49, offset: 9306},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&labeledExpr{
							pos:   position{line: 279, col: 53, offset: 9310},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 279, col: 59, offset: 9316},
								expr: &ruleRefExpr{
									pos:  position{line: 279, col: 60, offset: 9317},
									name: "AttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 279, col: 77, offset: 9334},
							expr: &litMatcher{
								pos:        position{line: 279, col: 77, offset: 9334},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 279, col: 82, offset: 9339},
							expr: &ruleRefExpr{
								pos:  position{line: 279, col: 82, offset: 9339},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "GenericAttributeWithoutValue",
			pos:  position{line: 283, col: 1, offset: 9442},
			expr: &actionExpr{
				pos: position{line: 283, col: 33, offset: 9474},
				run: (*parser).callonGenericAttributeWithoutValue1,
				expr: &seqExpr{
					pos: position{line: 283, col: 33, offset: 9474},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 283, col: 33, offset: 9474},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 283, col: 38, offset: 9479},
								name: "AttributeKey",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 283, col: 52, offset: 9493},
							expr: &litMatcher{
								pos:        position{line: 283, col: 52, offset: 9493},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 283, col: 57, offset: 9498},
							expr: &ruleRefExpr{
								pos:  position{line: 283, col: 57, offset: 9498},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeKey",
			pos:  position{line: 287, col: 1, offset: 9590},
			expr: &actionExpr{
				pos: position{line: 287, col: 17, offset: 9606},
				run: (*parser).callonAttributeKey1,
				expr: &seqExpr{
					pos: position{line: 287, col: 17, offset: 9606},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 287, col: 17, offset: 9606},
							expr: &litMatcher{
								pos:        position{line: 287, col: 18, offset: 9607},
								val:        "quote",
								ignoreCase: false,
								want:       "\"quote\"",
							},
						},
						&notExpr{
							pos: position{line: 287, col: 26, offset: 9615},
							expr: &litMatcher{
								pos:        position{line: 287, col: 27, offset: 9616},
								val:        "verse",
								ignoreCase: false,
								want:       "\"verse\"",
							},
						},
						&notExpr{
							pos: position{line: 287, col: 35, offset: 9624},
							expr: &litMatcher{
								pos:        position{line: 287, col: 36, offset: 9625},
								val:        "literal",
								ignoreCase: false,
								want:       "\"literal\"",
							},
						},
						&notExpr{
							pos: position{line: 287, col: 46, offset: 9635},
							expr: &oneOrMoreExpr{
								pos: position{line: 287, col: 48, offset: 9637},
								expr: &ruleRefExpr{
									pos:  position{line: 287, col: 48, offset: 9637},
									name: "Space",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 287, col: 56, offset: 9645},
							label: "key",
							expr: &oneOrMoreExpr{
								pos: position{line: 287, col: 61, offset: 9650},
								expr: &charClassMatcher{
									pos:        position{line: 287, col: 61, offset: 9650},
									val:        "[^\\r\\n=,\\]]",
									chars:      []rune{'\r', '\n', '=', ',', ']'},
									ignoreCase: false,
									inverted:   true,
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 287, col: 75, offset: 9664},
							expr: &ruleRefExpr{
								pos:  position{line: 287, col: 75, offset: 9664},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeValue",
			pos:  position{line: 291, col: 1, offset: 9711},
			expr: &actionExpr{
				pos: position{line: 291, col: 19, offset: 9729},
				run: (*parser).callonAttributeValue1,
				expr: &labeledExpr{
					pos:   position{line: 291, col: 19, offset: 9729},
					label: "value",
					expr: &oneOrMoreExpr{
						pos: position{line: 291, col: 26, offset: 9736},
						expr: &charClassMatcher{
							pos:        position{line: 291, col: 26, offset: 9736},
							val:        "[^\\r\\n=,\\]]",
							chars:      []rune{'\r', '\n', '=', ',', ']'},
							ignoreCase: false,
							inverted:   true,
						},
					},
				},
			},
		},
		{
			name: "StandaloneAttributeValue",
			pos:  position{line: 295, col: 1, offset: 9791},
			expr: &actionExpr{
				pos: position{line: 295, col: 29, offset: 9819},
				run: (*parser).callonStandaloneAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 295, col: 29, offset: 9819},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 295, col: 29, offset: 9819},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 295, col: 36, offset: 9826},
								expr: &charClassMatcher{
									pos:        position{line: 295, col: 36, offset: 9826},
									val:        "[^\\r\\n=,\\]]",
									chars:      []rune{'\r', '\n', '=', ',', ']'},
									ignoreCase: false,
									inverted:   true,
								},
							},
						},
						&notExpr{
							pos: position{line: 295, col: 50, offset: 9840},
							expr: &litMatcher{
								pos:        position{line: 295, col: 51, offset: 9841},
								val:        "=",
								ignoreCase: false,
								want:       "\"=\"",
							},
						},
					},
				},
			},
		},
		{
			name: "HorizontalLayout",
			pos:  position{line: 299, col: 1, offset: 10011},
			expr: &actionExpr{
				pos: position{line: 299, col: 21, offset: 10031},
				run: (*parser).callonHorizontalLayout1,
				expr: &seqExpr{
					pos: position{line: 299, col: 21, offset: 10031},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 299, col: 21, offset: 10031},
							val:        "[horizontal]",
							ignoreCase: false,
							want:       "\"[horizontal]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 299, col: 36, offset: 10046},
							expr: &ruleRefExpr{
								pos:  position{line: 299, col: 36, offset: 10046},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 299, col: 43, offset: 10053},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "QuoteAttributes",
			pos:  position{line: 303, col: 1, offset: 10123},
			expr: &actionExpr{
				pos: position{line: 303, col: 20, offset: 10142},
				run: (*parser).callonQuoteAttributes1,
				expr: &seqExpr{
					pos: position{line: 303, col: 20, offset: 10142},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 303, col: 20, offset: 10142},
							val:        "[quote",
							ignoreCase: false,
							want:       "\"[quote\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 303, col: 29, offset: 10151},
							expr: &ruleRefExpr{
								pos:  position{line: 303, col: 29, offset: 10151},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 303, col: 36, offset: 10158},
							expr: &litMatcher{
								pos:        position{line: 303, col: 36, offset: 10158},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 303, col: 41, offset: 10163},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 303, col: 48, offset: 10170},
								expr: &ruleRefExpr{
									pos:  position{line: 303, col: 49, offset: 10171},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 303, col: 66, offset: 10188},
							expr: &litMatcher{
								pos:        position{line: 303, col: 66, offset: 10188},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 303, col: 71, offset: 10193},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 303, col: 77, offset: 10199},
								expr: &ruleRefExpr{
									pos:  position{line: 303, col: 78, offset: 10200},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 303, col: 95, offset: 10217},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 303, col: 99, offset: 10221},
							expr: &ruleRefExpr{
								pos:  position{line: 303, col: 99, offset: 10221},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 303, col: 106, offset: 10228},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "VerseAttributes",
			pos:  position{line: 307, col: 1, offset: 10301},
			expr: &actionExpr{
				pos: position{line: 307, col: 20, offset: 10320},
				run: (*parser).callonVerseAttributes1,
				expr: &seqExpr{
					pos: position{line: 307, col: 20, offset: 10320},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 307, col: 20, offset: 10320},
							val:        "[verse",
							ignoreCase: false,
							want:       "\"[verse\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 307, col: 29, offset: 10329},
							expr: &ruleRefExpr{
								pos:  position{line: 307, col: 29, offset: 10329},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 307, col: 36, offset: 10336},
							expr: &litMatcher{
								pos:        position{line: 307, col: 36, offset: 10336},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 307, col: 41, offset: 10341},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 307, col: 48, offset: 10348},
								expr: &ruleRefExpr{
									pos:  position{line: 307, col: 49, offset: 10349},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 307, col: 66, offset: 10366},
							expr: &litMatcher{
								pos:        position{line: 307, col: 66, offset: 10366},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 307, col: 71, offset: 10371},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 307, col: 77, offset: 10377},
								expr: &ruleRefExpr{
									pos:  position{line: 307, col: 78, offset: 10378},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 307, col: 95, offset: 10395},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 307, col: 99, offset: 10399},
							expr: &ruleRefExpr{
								pos:  position{line: 307, col: 99, offset: 10399},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 307, col: 106, offset: 10406},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "QuoteAttribute",
			pos:  position{line: 311, col: 1, offset: 10497},
			expr: &actionExpr{
				pos: position{line: 311, col: 19, offset: 10515},
				run: (*parser).callonQuoteAttribute1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 311, col: 20, offset: 10516},
					expr: &charClassMatcher{
						pos:        position{line: 311, col: 20, offset: 10516},
						val:        "[^\\r\\n,\\]]",
						chars:      []rune{'\r', '\n', ',', ']'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "InlineAttributes",
			pos:  position{line: 315, col: 1, offset: 10569},
			expr: &actionExpr{
				pos: position{line: 315, col: 21, offset: 10589},
				run: (*parser).callonInlineAttributes1,
				expr: &seqExpr{
					pos: position{line: 315, col: 21, offset: 10589},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 315, col: 21, offset: 10589},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 315, col: 25, offset: 10593},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 315, col: 31, offset: 10599},
								expr: &ruleRefExpr{
									pos:  position{line: 315, col: 32, offset: 10600},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 315, col: 51, offset: 10619},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "QuotedTextAttrs",
			pos:  position{line: 328, col: 1, offset: 11100},
			expr: &actionExpr{
				pos: position{line: 328, col: 20, offset: 11119},
				run: (*parser).callonQuotedTextAttrs1,
				expr: &labeledExpr{
					pos:   position{line: 328, col: 20, offset: 11119},
					label: "attrs",
					expr: &choiceExpr{
						pos: position{line: 328, col: 27, offset: 11126},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 328, col: 27, offset: 11126},
								name: "QuotedTextRole",
							},
							&ruleRefExpr{
								pos:  position{line: 328, col: 44, offset: 11143},
								name: "QuotedTextShortHand",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextRole",
			pos:  position{line: 335, col: 1, offset: 11412},
			expr: &actionExpr{
				pos: position{line: 335, col: 19, offset: 11430},
				run: (*parser).callonQuotedTextRole1,
				expr: &seqExpr{
					pos: position{line: 335, col: 19, offset: 11430},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 335, col: 19, offset: 11430},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 335, col: 23, offset: 11434},
							label: "role",
							expr: &zeroOrOneExpr{
								pos: position{line: 335, col: 28, offset: 11439},
								expr: &ruleRefExpr{
									pos:  position{line: 335, col: 28, offset: 11439},
									name: "QuotedTextRoleWord",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 335, col: 48, offset: 11459},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "QuotedTextRoleWord",
			pos:  position{line: 339, col: 1, offset: 11519},
			expr: &actionExpr{
				pos: position{line: 339, col: 23, offset: 11541},
				run: (*parser).callonQuotedTextRoleWord1,
				expr: &seqExpr{
					pos: position{line: 339, col: 23, offset: 11541},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 339, col: 23, offset: 11541},
							expr: &charClassMatcher{
								pos:        position{line: 339, col: 24, offset: 11542},
								val:        "[#.]",
								chars:      []rune{'#', '.'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 339, col: 29, offset: 11547},
							label: "role",
							expr: &actionExpr{
								pos: position{line: 339, col: 35, offset: 11553},
								run: (*parser).callonQuotedTextRoleWord6,
								expr: &zeroOrMoreExpr{
									pos: position{line: 339, col: 35, offset: 11553},
									expr: &charClassMatcher{
										pos:        position{line: 339, col: 35, offset: 11553},
										val:        "[^\\]]",
										chars:      []rune{']'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextShortHand",
			pos:  position{line: 348, col: 1, offset: 11869},
			expr: &actionExpr{
				pos: position{line: 348, col: 24, offset: 11892},
				run: (*parser).callonQuotedTextShortHand1,
				expr: &seqExpr{
					pos: position{line: 348, col: 24, offset: 11892},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 348, col: 24, offset: 11892},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 348, col: 28, offset: 11896},
							label: "attrs",
							expr: &oneOrMoreExpr{
								pos: position{line: 348, col: 34, offset: 11902},
								expr: &choiceExpr{
									pos: position{line: 348, col: 36, offset: 11904},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 348, col: 36, offset: 11904},
											name: "QuotedTextShortRole",
										},
										&ruleRefExpr{
											pos:  position{line: 348, col: 58, offset: 11926},
											name: "QuotedTextShortID",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 348, col: 79, offset: 11947},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "QuotedTextShortRole",
			pos:  position{line: 352, col: 1, offset: 11982},
			expr: &actionExpr{
				pos: position{line: 352, col: 24, offset: 12005},
				run: (*parser).callonQuotedTextShortRole1,
				expr: &seqExpr{
					pos: position{line: 352, col: 24, offset: 12005},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 352, col: 24, offset: 12005},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 352, col: 28, offset: 12009},
							label: "role",
							expr: &actionExpr{
								pos: position{line: 352, col: 34, offset: 12015},
								run: (*parser).callonQuotedTextShortRole5,
								expr: &oneOrMoreExpr{
									pos: position{line: 352, col: 34, offset: 12015},
									expr: &charClassMatcher{
										pos:        position{line: 352, col: 34, offset: 12015},
										val:        "[^.#\\]]",
										chars:      []rune{'.', '#', ']'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextShortID",
			pos:  position{line: 358, col: 1, offset: 12128},
			expr: &actionExpr{
				pos: position{line: 358, col: 22, offset: 12149},
				run: (*parser).callonQuotedTextShortID1,
				expr: &seqExpr{
					pos: position{line: 358, col: 22, offset: 12149},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 358, col: 22, offset: 12149},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&labeledExpr{
							pos:   position{line: 358, col: 26, offset: 12153},
							label: "id",
							expr: &actionExpr{
								pos: position{line: 358, col: 30, offset: 12157},
								run: (*parser).callonQuotedTextShortID5,
								expr: &oneOrMoreExpr{
									pos: position{line: 358, col: 30, offset: 12157},
									expr: &charClassMatcher{
										pos:        position{line: 358, col: 30, offset: 12157},
										val:        "[^.#\\]]",
										chars:      []rune{'.', '#', ']'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StandaloneAttributes",
			pos:  position{line: 364, col: 1, offset: 12264},
			expr: &actionExpr{
				pos: position{line: 364, col: 25, offset: 12288},
				run: (*parser).callonStandaloneAttributes1,
				expr: &seqExpr{
					pos: position{line: 364, col: 25, offset: 12288},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 364, col: 25, offset: 12288},
							label: "attributes",
							expr: &oneOrMoreExpr{
								pos: position{line: 364, col: 36, offset: 12299},
								expr: &ruleRefExpr{
									pos:  position{line: 364, col: 37, offset: 12300},
									name: "ElementAttribute",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 364, col: 56, offset: 12319},
							expr: &ruleRefExpr{
								pos:  position{line: 364, col: 56, offset: 12319},
								name: "BlankLine",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 364, col: 67, offset: 12330},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 372, col: 1, offset: 12597},
			expr: &choiceExpr{
				pos: position{line: 372, col: 17, offset: 12613},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 372, col: 17, offset: 12613},
						name: "SingleQuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 372, col: 38, offset: 12634},
						name: "DoubleQuotedString",
					},
				},
			},
		},
		{
			name: "SingleQuotedString",
			pos:  position{line: 374, col: 1, offset: 12656},
			expr: &actionExpr{
				pos: position{line: 374, col: 23, offset: 12678},
				run: (*parser).callonSingleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 374, col: 23, offset: 12678},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 374, col: 23, offset: 12678},
							name: "SingleQuoteStringStart",
						},
						&labeledExpr{
							pos:   position{line: 374, col: 46, offset: 12701},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 374, col: 55, offset: 12710},
								name: "SingleQuotedStringElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 374, col: 82, offset: 12737},
							name: "SingleQuoteStringEnd",
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringElements",
			pos:  position{line: 378, col: 1, offset: 12845},
			expr: &actionExpr{
				pos: position{line: 378, col: 31, offset: 12875},
				run: (*parser).callonSingleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 378, col: 31, offset: 12875},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 378, col: 41, offset: 12885},
						expr: &ruleRefExpr{
							pos:  position{line: 378, col: 41, offset: 12885},
							name: "SingleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteStringStart",
			pos:  position{line: 382, col: 1, offset: 12967},
			expr: &seqExpr{
				pos: position{line: 382, col: 27, offset: 12993},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 382, col: 27, offset: 12993},
						val:        "'`",
						ignoreCase: false,
						want:       "\"'`\"",
					},
					&notExpr{
						pos: position{line: 382, col: 32, offset: 12998},
						expr: &charClassMatcher{
							pos:        position{line: 382, col: 33, offset: 12999},
							val:        "[ \\t\\r\\n]",
							chars:      []rune{' ', '\t', '\r', '\n'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteStringEnd",
			pos:  position{line: 384, col: 1, offset: 13012},
			expr: &litMatcher{
				pos:        position{line: 384, col: 25, offset: 13036},
				val:        "`'",
				ignoreCase: false,
				want:       "\"`'\"",
			},
		},
		{
			name: "SingleQuotedStringElement",
			pos:  position{line: 387, col: 1, offset: 13127},
			expr: &actionExpr{
				pos: position{line: 387, col: 30, offset: 13156},
				run: (*parser).callonSingleQuotedStringElement1,
				expr: &labeledExpr{
					pos:   position{line: 387, col: 30, offset: 13156},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 388, col: 9, offset: 13175},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 388, col: 9, offset: 13175},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 388, col: 9, offset: 13175},
										name: "LineBreak",
									},
									&notExpr{
										pos: position{line: 388, col: 19, offset: 13185},
										expr: &ruleRefExpr{
											pos:  position{line: 388, col: 20, offset: 13186},
											name: "SingleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 389, col: 11, offset: 13243},
								exprs: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 389, col: 11, offset: 13243},
										expr: &ruleRefExpr{
											pos:  position{line: 389, col: 11, offset: 13243},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 389, col: 18, offset: 13250},
										expr: &ruleRefExpr{
											pos:  position{line: 389, col: 19, offset: 13251},
											name: "SingleQuoteStringEnd",
										},
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 390, col: 11, offset: 13283},
								name: "InlineIcon",
							},
							&ruleRefExpr{
								pos:  position{line: 391, col: 11, offset: 13305},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 392, col: 11, offset: 13328},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 393, col: 11, offset: 13354},
								name: "InlinePassthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 394, col: 11, offset: 13383},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 395, col: 11, offset: 13399},
								name: "AttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 396, col: 11, offset: 13432},
								name: "BoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 397, col: 11, offset: 13452},
								name: "ItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 398, col: 11, offset: 13474},
								name: "MarkedText",
							},
							&ruleRefExpr{
								pos:  position{line: 399, col: 11, offset: 13496},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 400, col: 11, offset: 13521},
								name: "SuperscriptText",
							},
							&seqExpr{
								pos: position{line: 401, col: 11, offset: 13548},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 401, col: 11, offset: 13548},
										expr: &litMatcher{
											pos:        position{line: 401, col: 12, offset: 13549},
											val:        "`'",
											ignoreCase: false,
											want:       "\"`'\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 401, col: 17, offset: 13554},
										name: "MonospaceText",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 402, col: 11, offset: 13579},
								name: "DoubleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 403, col: 11, offset: 13609},
								name: "SingleQuotedStringFallbackCharacter",
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringFallbackCharacter",
			pos:  position{line: 407, col: 1, offset: 13679},
			expr: &choiceExpr{
				pos: position{line: 407, col: 41, offset: 13719},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 407, col: 41, offset: 13719},
						val:        "[^\\r\\n\\t `]",
						chars:      []rune{'\r', '\n', '\t', ' ', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 407, col: 55, offset: 13733},
						run: (*parser).callonSingleQuotedStringFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 407, col: 55, offset: 13733},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 407, col: 55, offset: 13733},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&notExpr{
									pos: position{line: 407, col: 59, offset: 13737},
									expr: &litMatcher{
										pos:        position{line: 407, col: 60, offset: 13738},
										val:        "'",
										ignoreCase: false,
										want:       "\"'\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedString",
			pos:  position{line: 411, col: 1, offset: 13801},
			expr: &actionExpr{
				pos: position{line: 411, col: 23, offset: 13823},
				run: (*parser).callonDoubleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 411, col: 23, offset: 13823},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 411, col: 23, offset: 13823},
							name: "DoubleQuoteStringStart",
						},
						&labeledExpr{
							pos:   position{line: 411, col: 46, offset: 13846},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 411, col: 55, offset: 13855},
								name: "DoubleQuotedStringElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 411, col: 82, offset: 13882},
							name: "DoubleQuoteStringEnd",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElements",
			pos:  position{line: 415, col: 1, offset: 13990},
			expr: &actionExpr{
				pos: position{line: 415, col: 31, offset: 14020},
				run: (*parser).callonDoubleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 415, col: 31, offset: 14020},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 415, col: 41, offset: 14030},
						expr: &ruleRefExpr{
							pos:  position{line: 415, col: 41, offset: 14030},
							name: "DoubleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElement",
			pos:  position{line: 420, col: 1, offset: 14195},
			expr: &actionExpr{
				pos: position{line: 420, col: 30, offset: 14224},
				run: (*parser).callonDoubleQuotedStringElement1,
				expr: &labeledExpr{
					pos:   position{line: 420, col: 30, offset: 14224},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 421, col: 9, offset: 14243},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 421, col: 9, offset: 14243},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 421, col: 9, offset: 14243},
										name: "LineBreak",
									},
									&notExpr{
										pos: position{line: 421, col: 19, offset: 14253},
										expr: &ruleRefExpr{
											pos:  position{line: 421, col: 20, offset: 14254},
											name: "DoubleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 422, col: 11, offset: 14311},
								exprs: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 422, col: 11, offset: 14311},
										expr: &ruleRefExpr{
											pos:  position{line: 422, col: 11, offset: 14311},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 422, col: 18, offset: 14318},
										expr: &ruleRefExpr{
											pos:  position{line: 422, col: 19, offset: 14319},
											name: "DoubleQuoteStringEnd",
										},
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 423, col: 11, offset: 14351},
								name: "InlineIcon",
							},
							&ruleRefExpr{
								pos:  position{line: 424, col: 11, offset: 14373},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 425, col: 11, offset: 14396},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 426, col: 11, offset: 14422},
								name: "InlinePassthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 427, col: 11, offset: 14451},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 428, col: 11, offset: 14467},
								name: "AttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 429, col: 11, offset: 14500},
								name: "BoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 430, col: 11, offset: 14520},
								name: "ItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 431, col: 11, offset: 14542},
								name: "MarkedText",
							},
							&ruleRefExpr{
								pos:  position{line: 432, col: 11, offset: 14564},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 433, col: 11, offset: 14589},
								name: "SuperscriptText",
							},
							&seqExpr{
								pos: position{line: 434, col: 11, offset: 14616},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 434, col: 11, offset: 14616},
										expr: &litMatcher{
											pos:        position{line: 434, col: 12, offset: 14617},
											val:        "`\"",
											ignoreCase: false,
											want:       "\"`\\\"\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 434, col: 18, offset: 14623},
										name: "MonospaceText",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 435, col: 11, offset: 14648},
								name: "SingleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 436, col: 11, offset: 14678},
								name: "DoubleQuotedStringFallbackCharacter",
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteStringStart",
			pos:  position{line: 440, col: 1, offset: 14756},
			expr: &seqExpr{
				pos: position{line: 440, col: 27, offset: 14782},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 440, col: 27, offset: 14782},
						val:        "\"`",
						ignoreCase: false,
						want:       "\"\\\"`\"",
					},
					&notExpr{
						pos: position{line: 440, col: 33, offset: 14788},
						expr: &charClassMatcher{
							pos:        position{line: 440, col: 34, offset: 14789},
							val:        "[ \\t\\r\\n]",
							chars:      []rune{' ', '\t', '\r', '\n'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteStringEnd",
			pos:  position{line: 442, col: 1, offset: 14802},
			expr: &litMatcher{
				pos:        position{line: 442, col: 25, offset: 14826},
				val:        "`\"",
				ignoreCase: false,
				want:       "\"`\\\"\"",
			},
		},
		{
			name: "DoubleQuotedStringFallbackCharacter",
			pos:  position{line: 444, col: 1, offset: 14835},
			expr: &actionExpr{
				pos: position{line: 444, col: 41, offset: 14875},
				run: (*parser).callonDoubleQuotedStringFallbackCharacter1,
				expr: &choiceExpr{
					pos: position{line: 444, col: 42, offset: 14876},
					alternatives: []interface{}{
						&charClassMatcher{
							pos:        position{line: 444, col: 42, offset: 14876},
							val:        "[^\\r\\n\\t `]",
							chars:      []rune{'\r', '\n', '\t', ' ', '`'},
							ignoreCase: false,
							inverted:   true,
						},
						&seqExpr{
							pos: position{line: 444, col: 56, offset: 14890},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 444, col: 56, offset: 14890},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&notExpr{
									pos: position{line: 444, col: 60, offset: 14894},
									expr: &litMatcher{
										pos:        position{line: 444, col: 61, offset: 14895},
										val:        "\"",
										ignoreCase: false,
										want:       "\"\\\"\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Section",
			pos:  position{line: 451, col: 1, offset: 15067},
			expr: &actionExpr{
				pos: position{line: 451, col: 12, offset: 15078},
				run: (*parser).callonSection1,
				expr: &seqExpr{
					pos: position{line: 451, col: 12, offset: 15078},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 451, col: 12, offset: 15078},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 451, col: 23, offset: 15089},
								expr: &ruleRefExpr{
									pos:  position{line: 451, col: 24, offset: 15090},
									name: "Attributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 452, col: 5, offset: 15108},
							label: "level",
							expr: &actionExpr{
								pos: position{line: 452, col: 12, offset: 15115},
								run: (*parser).callonSection7,
								expr: &oneOrMoreExpr{
									pos: position{line: 452, col: 12, offset: 15115},
									expr: &litMatcher{
										pos:        position{line: 452, col: 13, offset: 15116},
										val:        "=",
										ignoreCase: false,
										want:       "\"=\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 456, col: 5, offset: 15211},
							run: (*parser).callonSection10,
						},
						&oneOrMoreExpr{
							pos: position{line: 460, col: 5, offset: 15367},
							expr: &ruleRefExpr{
								pos:  position{line: 460, col: 5, offset: 15367},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 460, col: 12, offset: 15374},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 460, col: 19, offset: 15381},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 460, col: 34, offset: 15396},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 460, col: 38, offset: 15400},
								expr: &ruleRefExpr{
									pos:  position{line: 460, col: 38, offset: 15400},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 460, col: 56, offset: 15418},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "TitleElements",
			pos:  position{line: 464, col: 1, offset: 15528},
			expr: &actionExpr{
				pos: position{line: 464, col: 18, offset: 15545},
				run: (*parser).callonTitleElements1,
				expr: &labeledExpr{
					pos:   position{line: 464, col: 18, offset: 15545},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 464, col: 27, offset: 15554},
						expr: &seqExpr{
							pos: position{line: 464, col: 28, offset: 15555},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 464, col: 28, offset: 15555},
									expr: &ruleRefExpr{
										pos:  position{line: 464, col: 29, offset: 15556},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 464, col: 37, offset: 15564},
									expr: &ruleRefExpr{
										pos:  position{line: 464, col: 38, offset: 15565},
										name: "InlineElementID",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 464, col: 54, offset: 15581},
									name: "TitleElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TitleElement",
			pos:  position{line: 468, col: 1, offset: 15706},
			expr: &actionExpr{
				pos: position{line: 468, col: 17, offset: 15722},
				run: (*parser).callonTitleElement1,
				expr: &labeledExpr{
					pos:   position{line: 468, col: 17, offset: 15722},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 468, col: 26, offset: 15731},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 468, col: 26, offset: 15731},
								name: "Word",
							},
							&ruleRefExpr{
								pos:  position{line: 469, col: 11, offset: 15747},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 470, col: 11, offset: 15793},
								expr: &ruleRefExpr{
									pos:  position{line: 470, col: 11, offset: 15793},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 471, col: 11, offset: 15812},
								name: "CrossReference",
							},
							&ruleRefExpr{
								pos:  position{line: 472, col: 11, offset: 15838},
								name: "InlinePassthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 473, col: 11, offset: 15867},
								name: "InlineIcon",
							},
							&ruleRefExpr{
								pos:  position{line: 474, col: 11, offset: 15889},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 475, col: 11, offset: 15912},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 476, col: 11, offset: 15928},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 477, col: 11, offset: 15954},
								name: "QuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 478, col: 11, offset: 15978},
								name: "QuotedText",
							},
							&ruleRefExpr{
								pos:  position{line: 479, col: 11, offset: 16000},
								name: "AttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 480, col: 11, offset: 16033},
								name: "AnyChar",
							},
						},
					},
				},
			},
		},
		{
			name: "TableOfContentsPlaceHolder",
			pos:  position{line: 487, col: 1, offset: 16191},
			expr: &seqExpr{
				pos: position{line: 487, col: 31, offset: 16221},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 487, col: 31, offset: 16221},
						val:        "toc::[]",
						ignoreCase: false,
						want:       "\"toc::[]\"",
					},
					&ruleRefExpr{
						pos:  position{line: 487, col: 41, offset: 16231},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "UserMacroBlock",
			pos:  position{line: 492, col: 1, offset: 16347},
			expr: &actionExpr{
				pos: position{line: 492, col: 19, offset: 16365},
				run: (*parser).callonUserMacroBlock1,
				expr: &seqExpr{
					pos: position{line: 492, col: 19, offset: 16365},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 492, col: 19, offset: 16365},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 492, col: 25, offset: 16371},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 492, col: 40, offset: 16386},
							val:        "::",
							ignoreCase: false,
							want:       "\"::\"",
						},
						&labeledExpr{
							pos:   position{line: 492, col: 45, offset: 16391},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 492, col: 52, offset: 16398},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 492, col: 68, offset: 16414},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 492, col: 75, offset: 16421},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineUserMacro",
			pos:  position{line: 496, col: 1, offset: 16540},
			expr: &actionExpr{
				pos: position{line: 496, col: 20, offset: 16559},
				run: (*parser).callonInlineUserMacro1,
				expr: &seqExpr{
					pos: position{line: 496, col: 20, offset: 16559},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 496, col: 20, offset: 16559},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 496, col: 26, offset: 16565},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 496, col: 41, offset: 16580},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 496, col: 45, offset: 16584},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 496, col: 52, offset: 16591},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 496, col: 68, offset: 16607},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 496, col: 75, offset: 16614},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroName",
			pos:  position{line: 500, col: 1, offset: 16734},
			expr: &actionExpr{
				pos: position{line: 500, col: 18, offset: 16751},
				run: (*parser).callonUserMacroName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 500, col: 19, offset: 16752},
					expr: &charClassMatcher{
						pos:        position{line: 500, col: 19, offset: 16752},
						val:        "[\\pL0-9_-]",
						chars:      []rune{'_', '-'},
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "UserMacroValue",
			pos:  position{line: 504, col: 1, offset: 16805},
			expr: &actionExpr{
				pos: position{line: 504, col: 19, offset: 16823},
				run: (*parser).callonUserMacroValue1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 504, col: 19, offset: 16823},
					expr: &charClassMatcher{
						pos:        position{line: 504, col: 19, offset: 16823},
						val:        "[^:[ \\r\\n]",
						chars:      []rune{':', '[', ' ', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "UserMacroAttributes",
			pos:  position{line: 508, col: 1, offset: 16875},
			expr: &actionExpr{
				pos: position{line: 508, col: 24, offset: 16898},
				run: (*parser).callonUserMacroAttributes1,
				expr: &seqExpr{
					pos: position{line: 508, col: 24, offset: 16898},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 508, col: 24, offset: 16898},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 508, col: 28, offset: 16902},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 508, col: 34, offset: 16908},
								expr: &ruleRefExpr{
									pos:  position{line: 508, col: 35, offset: 16909},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 508, col: 54, offset: 16928},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FileInclusion",
			pos:  position{line: 515, col: 1, offset: 17117},
			expr: &actionExpr{
				pos: position{line: 515, col: 18, offset: 17134},
				run: (*parser).callonFileInclusion1,
				expr: &seqExpr{
					pos: position{line: 515, col: 18, offset: 17134},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 515, col: 18, offset: 17134},
							label: "incl",
							expr: &actionExpr{
								pos: position{line: 515, col: 24, offset: 17140},
								run: (*parser).callonFileInclusion4,
								expr: &seqExpr{
									pos: position{line: 515, col: 24, offset: 17140},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 515, col: 24, offset: 17140},
											val:        "include::",
											ignoreCase: false,
											want:       "\"include::\"",
										},
										&labeledExpr{
											pos:   position{line: 515, col: 36, offset: 17152},
											label: "path",
											expr: &ruleRefExpr{
												pos:  position{line: 515, col: 42, offset: 17158},
												name: "FileLocation",
											},
										},
										&labeledExpr{
											pos:   position{line: 515, col: 56, offset: 17172},
											label: "inlineAttributes",
											expr: &ruleRefExpr{
												pos:  position{line: 515, col: 74, offset: 17190},
												name: "FileIncludeAttributes",
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 517, col: 8, offset: 17339},
							expr: &ruleRefExpr{
								pos:  position{line: 517, col: 8, offset: 17339},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 517, col: 15, offset: 17346},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "FileIncludeAttributes",
			pos:  position{line: 521, col: 1, offset: 17402},
			expr: &actionExpr{
				pos: position{line: 521, col: 26, offset: 17427},
				run: (*parser).callonFileIncludeAttributes1,
				expr: &seqExpr{
					pos: position{line: 521, col: 26, offset: 17427},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 521, col: 26, offset: 17427},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 521, col: 30, offset: 17431},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 521, col: 36, offset: 17437},
								expr: &choiceExpr{
									pos: position{line: 521, col: 37, offset: 17438},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 521, col: 37, offset: 17438},
											name: "LineRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 521, col: 59, offset: 17460},
											name: "TagRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 521, col: 80, offset: 17481},
											name: "GenericAttribute",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 521, col: 99, offset: 17500},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttribute",
			pos:  position{line: 525, col: 1, offset: 17576},
			expr: &actionExpr{
				pos: position{line: 525, col: 24, offset: 17599},
				run: (*parser).callonLineRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 525, col: 24, offset: 17599},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 525, col: 24, offset: 17599},
							val:        "lines=",
							ignoreCase: false,
							want:       "\"lines=\"",
						},
						&labeledExpr{
							pos:   position{line: 525, col: 33, offset: 17608},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 525, col: 40, offset: 17615},
								name: "LineRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 525, col: 66, offset: 17641},
							expr: &litMatcher{
								pos:        position{line: 525, col: 66, offset: 17641},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttributeValue",
			pos:  position{line: 529, col: 1, offset: 17704},
			expr: &actionExpr{
				pos: position{line: 529, col: 29, offset: 17732},
				run: (*parser).callonLineRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 529, col: 29, offset: 17732},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 529, col: 29, offset: 17732},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 529, col: 36, offset: 17739},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 529, col: 36, offset: 17739},
										name: "MultipleLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 530, col: 11, offset: 17857},
										name: "MultipleQuotedLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 531, col: 11, offset: 17894},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 532, col: 11, offset: 17921},
										name: "MultiLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 533, col: 11, offset: 17954},
										name: "SingleLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 534, col: 11, offset: 17987},
										name: "SingleLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 535, col: 11, offset: 18015},
										name: "UndefinedLineRange",
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 535, col: 31, offset: 18035},
							expr: &ruleRefExpr{
								pos:  position{line: 535, col: 31, offset: 18035},
								name: "Space",
							},
						},
						&choiceExpr{
							pos: position{line: 535, col: 39, offset: 18043},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 535, col: 39, offset: 18043},
									expr: &litMatcher{
										pos:        position{line: 535, col: 40, offset: 18044},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
								&andExpr{
									pos: position{line: 535, col: 46, offset: 18050},
									expr: &litMatcher{
										pos:        position{line: 535, col: 47, offset: 18051},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleLineRanges",
			pos:  position{line: 539, col: 1, offset: 18087},
			expr: &actionExpr{
				pos: position{line: 539, col: 23, offset: 18109},
				run: (*parser).callonMultipleLineRanges1,
				expr: &seqExpr{
					pos: position{line: 539, col: 23, offset: 18109},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 539, col: 23, offset: 18109},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 539, col: 30, offset: 18116},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 539, col: 30, offset: 18116},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 539, col: 47, offset: 18133},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 540, col: 5, offset: 18156},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 540, col: 12, offset: 18163},
								expr: &actionExpr{
									pos: position{line: 540, col: 13, offset: 18164},
									run: (*parser).callonMultipleLineRanges9,
									expr: &seqExpr{
										pos: position{line: 540, col: 13, offset: 18164},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 540, col: 13, offset: 18164},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&labeledExpr{
												pos:   position{line: 540, col: 17, offset: 18168},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 540, col: 24, offset: 18175},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 540, col: 24, offset: 18175},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 540, col: 41, offset: 18192},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleQuotedLineRanges",
			pos:  position{line: 546, col: 1, offset: 18336},
			expr: &actionExpr{
				pos: position{line: 546, col: 29, offset: 18364},
				run: (*parser).callonMultipleQuotedLineRanges1,
				expr: &seqExpr{
					pos: position{line: 546, col: 29, offset: 18364},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 546, col: 29, offset: 18364},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 546, col: 34, offset: 18369},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 546, col: 41, offset: 18376},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 546, col: 41, offset: 18376},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 546, col: 58, offset: 18393},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 547, col: 5, offset: 18416},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 547, col: 12, offset: 18423},
								expr: &actionExpr{
									pos: position{line: 547, col: 13, offset: 18424},
									run: (*parser).callonMultipleQuotedLineRanges10,
									expr: &seqExpr{
										pos: position{line: 547, col: 13, offset: 18424},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 547, col: 13, offset: 18424},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 547, col: 17, offset: 18428},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 547, col: 24, offset: 18435},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 547, col: 24, offset: 18435},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 547, col: 41, offset: 18452},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 549, col: 9, offset: 18507},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "MultiLineRange",
			pos:  position{line: 553, col: 1, offset: 18601},
			expr: &actionExpr{
				pos: position{line: 553, col: 19, offset: 18619},
				run: (*parser).callonMultiLineRange1,
				expr: &seqExpr{
					pos: position{line: 553, col: 19, offset: 18619},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 553, col: 19, offset: 18619},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 553, col: 26, offset: 18626},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 553, col: 34, offset: 18634},
							val:        "..",
							ignoreCase: false,
							want:       "\"..\"",
						},
						&labeledExpr{
							pos:   position{line: 553, col: 39, offset: 18639},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 553, col: 44, offset: 18644},
								name: "NUMBER",
							},
						},
					},
				},
			},
		},
		{
			name: "MultiLineQuotedRange",
			pos:  position{line: 557, col: 1, offset: 18736},
			expr: &actionExpr{
				pos: position{line: 557, col: 25, offset: 18760},
				run: (*parser).callonMultiLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 557, col: 25, offset: 18760},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 557, col: 25, offset: 18760},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 557, col: 30, offset: 18765},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 557, col: 37, offset: 18772},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 557, col: 45, offset: 18780},
							val:        "..",
							ignoreCase: false,
							want:       "\"..\"",
						},
						&labeledExpr{
							pos:   position{line: 557, col: 50, offset: 18785},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 557, col: 55, offset: 18790},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 557, col: 63, offset: 18798},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "SingleLineRange",
			pos:  position{line: 561, col: 1, offset: 18887},
			expr: &actionExpr{
				pos: position{line: 561, col: 20, offset: 18906},
				run: (*parser).callonSingleLineRange1,
				expr: &labeledExpr{
					pos:   position{line: 561, col: 20, offset: 18906},
					label: "singleline",
					expr: &ruleRefExpr{
						pos:  position{line: 561, col: 32, offset: 18918},
						name: "NUMBER",
					},
				},
			},
		},
		{
			name: "SingleLineQuotedRange",
			pos:  position{line: 565, col: 1, offset: 19017},
			expr: &actionExpr{
				pos: position{line: 565, col: 26, offset: 19042},
				run: (*parser).callonSingleLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 565, col: 26, offset: 19042},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 565, col: 26, offset: 19042},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 565, col: 31, offset: 19047},
							label: "singleline",
							expr: &ruleRefExpr{
								pos:  position{line: 565, col: 43, offset: 19059},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 565, col: 51, offset: 19067},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "UndefinedLineRange",
			pos:  position{line: 569, col: 1, offset: 19163},
			expr: &actionExpr{
				pos: position{line: 569, col: 23, offset: 19185},
				run: (*parser).callonUndefinedLineRange1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 569, col: 23, offset: 19185},
					expr: &charClassMatcher{
						pos:        position{line: 569, col: 23, offset: 19185},
						val:        "[^\\], ]",
						chars:      []rune{']', ',', ' '},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "TagRangesAttribute",
			pos:  position{line: 573, col: 1, offset: 19234},
			expr: &actionExpr{
				pos: position{line: 573, col: 23, offset: 19256},
				run: (*parser).callonTagRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 573, col: 23, offset: 19256},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 573, col: 24, offset: 19257},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 573, col: 24, offset: 19257},
									val:        "tags=",
									ignoreCase: false,
									want:       "\"tags=\"",
								},
								&litMatcher{
									pos:        position{line: 573, col: 34, offset: 19267},
									val:        "tag=",
									ignoreCase: false,
									want:       "\"tag=\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 573, col: 42, offset: 19275},
							label: "tags",
							expr: &ruleRefExpr{
								pos:  position{line: 573, col: 48, offset: 19281},
								name: "TagRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 573, col: 73, offset: 19306},
							expr: &litMatcher{
								pos:        position{line: 573, col: 73, offset: 19306},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
					},
				},
			},
		},
		{
			name: "TagRangesAttributeValue",
			pos:  position{line: 577, col: 1, offset: 19459},
			expr: &actionExpr{
				pos: position{line: 577, col: 28, offset: 19486},
				run: (*parser).callonTagRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 577, col: 28, offset: 19486},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 577, col: 28, offset: 19486},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 577, col: 35, offset: 19493},
								name: "MultipleTagRanges",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 577, col: 54, offset: 19512},
							expr: &ruleRefExpr{
								pos:  position{line: 577, col: 54, offset: 19512},
								name: "Space",
							},
						},
						&choiceExpr{
							pos: position{line: 577, col: 62, offset: 19520},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 577, col: 62, offset: 19520},
									expr: &litMatcher{
										pos:        position{line: 577, col: 63, offset: 19521},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
								&andExpr{
									pos: position{line: 577, col: 69, offset: 19527},
									expr: &litMatcher{
										pos:        position{line: 577, col: 70, offset: 19528},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleTagRanges",
			pos:  position{line: 581, col: 1, offset: 19564},
			expr: &actionExpr{
				pos: position{line: 581, col: 22, offset: 19585},
				run: (*parser).callonMultipleTagRanges1,
				expr: &seqExpr{
					pos: position{line: 581, col: 22, offset: 19585},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 581, col: 22, offset: 19585},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 581, col: 29, offset: 19592},
								name: "TagRange",
							},
						},
						&labeledExpr{
							pos:   position{line: 582, col: 5, offset: 19607},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 582, col: 12, offset: 19614},
								expr: &actionExpr{
									pos: position{line: 582, col: 13, offset: 19615},
									run: (*parser).callonMultipleTagRanges7,
									expr: &seqExpr{
										pos: position{line: 582, col: 13, offset: 19615},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 582, col: 13, offset: 19615},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&labeledExpr{
												pos:   position{line: 582, col: 17, offset: 19619},
												label: "other",
												expr: &ruleRefExpr{
													pos:  position{line: 582, col: 24, offset: 19626},
													name: "TagRange",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagRange",
			pos:  position{line: 588, col: 1, offset: 19763},
			expr: &choiceExpr{
				pos: position{line: 588, col: 13, offset: 19775},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 588, col: 13, offset: 19775},
						run: (*parser).callonTagRange2,
						expr: &labeledExpr{
							pos:   position{line: 588, col: 13, offset: 19775},
							label: "tag",
							expr: &choiceExpr{
								pos: position{line: 588, col: 18, offset: 19780},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 588, col: 18, offset: 19780},
										name: "Alphanums",
									},
									&ruleRefExpr{
										pos:  position{line: 588, col: 30, offset: 19792},
										name: "TagWildcard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 590, col: 5, offset: 19862},
						run: (*parser).callonTagRange7,
						expr: &seqExpr{
							pos: position{line: 590, col: 5, offset: 19862},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 590, col: 5, offset: 19862},
									val:        "!",
									ignoreCase: false,
									want:       "\"!\"",
								},
								&labeledExpr{
									pos:   position{line: 590, col: 9, offset: 19866},
									label: "tag",
									expr: &choiceExpr{
										pos: position{line: 590, col: 14, offset: 19871},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 590, col: 14, offset: 19871},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 590, col: 26, offset: 19883},
												name: "TagWildcard",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagWildcard",
			pos:  position{line: 594, col: 1, offset: 19955},
			expr: &actionExpr{
				pos: position{line: 594, col: 16, offset: 19970},
				run: (*parser).callonTagWildcard1,
				expr: &seqExpr{
					pos: position{line: 594, col: 16, offset: 19970},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 594, col: 16, offset: 19970},
							label: "stars",
							expr: &actionExpr{
								pos: position{line: 594, col: 23, offset: 19977},
								run: (*parser).callonTagWildcard4,
								expr: &oneOrMoreExpr{
									pos: position{line: 594, col: 23, offset: 19977},
									expr: &litMatcher{
										pos:        position{line: 594, col: 24, offset: 19978},
										val:        "*",
										ignoreCase: false,
										want:       "\"*\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 597, col: 5, offset: 20035},
							run: (*parser).callonTagWildcard7,
						},
					},
				},
			},
		},
		{
			name: "VerbatimFileContent",
			pos:  position{line: 605, col: 1, offset: 20285},
			expr: &zeroOrMoreExpr{
				pos: position{line: 605, col: 24, offset: 20308},
				expr: &choiceExpr{
					pos: position{line: 605, col: 25, offset: 20309},
					alternatives: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 605, col: 25, offset: 20309},
							name: "FileInclusion",
						},
						&ruleRefExpr{
							pos:  position{line: 605, col: 41, offset: 20325},
							name: "VerbatimFileLine",
						},
					},
				},
			},
		},
		{
			name: "VerbatimFileLine",
			pos:  position{line: 607, col: 1, offset: 20347},
			expr: &actionExpr{
				pos: position{line: 607, col: 21, offset: 20367},
				run: (*parser).callonVerbatimFileLine1,
				expr: &seqExpr{
					pos: position{line: 607, col: 21, offset: 20367},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 607, col: 21, offset: 20367},
							expr: &ruleRefExpr{
								pos:  position{line: 607, col: 22, offset: 20368},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 607, col: 26, offset: 20372},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 607, col: 35, offset: 20381},
								run: (*parser).callonVerbatimFileLine6,
								expr: &zeroOrMoreExpr{
									pos: position{line: 607, col: 35, offset: 20381},
									expr: &charClassMatcher{
										pos:        position{line: 607, col: 35, offset: 20381},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 609, col: 12, offset: 20445},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileLine",
			pos:  position{line: 616, col: 1, offset: 20651},
			expr: &actionExpr{
				pos: position{line: 616, col: 21, offset: 20671},
				run: (*parser).callonIncludedFileLine1,
				expr: &seqExpr{
					pos: position{line: 616, col: 21, offset: 20671},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 616, col: 21, offset: 20671},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 616, col: 29, offset: 20679},
								expr: &choiceExpr{
									pos: position{line: 616, col: 30, offset: 20680},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 616, col: 30, offset: 20680},
											name: "IncludedFileStartTag",
										},
										&ruleRefExpr{
											pos:  position{line: 616, col: 53, offset: 20703},
											name: "IncludedFileEndTag",
										},
										&actionExpr{
											pos: position{line: 616, col: 74, offset: 20724},
											run: (*parser).callonIncludedFileLine8,
											expr: &anyMatcher{
												line: 616, col: 74, offset: 20724,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 616, col: 107, offset: 20757},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileStartTag",
			pos:  position{line: 620, col: 1, offset: 20832},
			expr: &actionExpr{
				pos: position{line: 620, col: 25, offset: 20856},
				run: (*parser).callonIncludedFileStartTag1,
				expr: &seqExpr{
					pos: position{line: 620, col: 25, offset: 20856},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 620, col: 25, offset: 20856},
							val:        "tag::",
							ignoreCase: false,
							want:       "\"tag::\"",
						},
						&labeledExpr{
							pos:   position{line: 620, col: 33, offset: 20864},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 620, col: 38, offset: 20869},
								run: (*parser).callonIncludedFileStartTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 620, col: 38, offset: 20869},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 620, col: 78, offset: 20909},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileEndTag",
			pos:  position{line: 624, col: 1, offset: 20978},
			expr: &actionExpr{
				pos: position{line: 624, col: 23, offset: 21000},
				run: (*parser).callonIncludedFileEndTag1,
				expr: &seqExpr{
					pos: position{line: 624, col: 23, offset: 21000},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 624, col: 23, offset: 21000},
							val:        "end::",
							ignoreCase: false,
							want:       "\"end::\"",
						},
						&labeledExpr{
							pos:   position{line: 624, col: 31, offset: 21008},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 624, col: 36, offset: 21013},
								run: (*parser).callonIncludedFileEndTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 624, col: 36, offset: 21013},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 624, col: 76, offset: 21053},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "ListParagraph",
			pos:  position{line: 631, col: 1, offset: 21224},
			expr: &choiceExpr{
				pos: position{line: 631, col: 18, offset: 21241},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 631, col: 18, offset: 21241},
						run: (*parser).callonListParagraph2,
						expr: &labeledExpr{
							pos:   position{line: 631, col: 18, offset: 21241},
							label: "comment",
							expr: &ruleRefExpr{
								pos:  position{line: 631, col: 27, offset: 21250},
								name: "SingleLineComment",
							},
						},
					},
					&actionExpr{
						pos: position{line: 633, col: 9, offset: 21309},
						run: (*parser).callonListParagraph5,
						expr: &labeledExpr{
							pos:   position{line: 633, col: 9, offset: 21309},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 633, col: 15, offset: 21315},
								expr: &ruleRefExpr{
									pos:  position{line: 633, col: 16, offset: 21316},
									name: "ListParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListParagraphLine",
			pos:  position{line: 637, col: 1, offset: 21412},
			expr: &actionExpr{
				pos: position{line: 637, col: 22, offset: 21433},
				run: (*parser).callonListParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 637, col: 22, offset: 21433},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 637, col: 22, offset: 21433},
							expr: &ruleRefExpr{
								pos:  position{line: 637, col: 23, offset: 21434},
								name: "EOF",
							},
						},
						&notExpr{
							pos: position{line: 638, col: 5, offset: 21443},
							expr: &ruleRefExpr{
								pos:  position{line: 638, col: 6, offset: 21444},
								name: "BlankLine",
							},
						},
						&notExpr{
							pos: position{line: 639, col: 5, offset: 21460},
							expr: &ruleRefExpr{
								pos:  position{line: 639, col: 6, offset: 21461},
								name: "SingleLineComment",
							},
						},
						&notExpr{
							pos: position{line: 640, col: 5, offset: 21484},
							expr: &ruleRefExpr{
								pos:  position{line: 640, col: 6, offset: 21485},
								name: "OrderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 641, col: 5, offset: 21512},
							expr: &ruleRefExpr{
								pos:  position{line: 641, col: 6, offset: 21513},
								name: "UnorderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 642, col: 5, offset: 21542},
							expr: &ruleRefExpr{
								pos:  position{line: 642, col: 6, offset: 21543},
								name: "CalloutListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 643, col: 5, offset: 21570},
							expr: &ruleRefExpr{
								pos:  position{line: 643, col: 6, offset: 21571},
								name: "ListItemContinuation",
							},
						},
						&notExpr{
							pos: position{line: 644, col: 5, offset: 21597},
							expr: &ruleRefExpr{
								pos:  position{line: 644, col: 6, offset: 21598},
								name: "ElementAttribute",
							},
						},
						&notExpr{
							pos: position{line: 645, col: 5, offset: 21620},
							expr: &ruleRefExpr{
								pos:  position{line: 645, col: 6, offset: 21621},
								name: "BlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 646, col: 5, offset: 21641},
							expr: &ruleRefExpr{
								pos:  position{line: 646, col: 6, offset: 21642},
								name: "LabeledListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 647, col: 5, offset: 21670},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 647, col: 11, offset: 21676},
								run: (*parser).callonListParagraphLine24,
								expr: &labeledExpr{
									pos:   position{line: 647, col: 11, offset: 21676},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 647, col: 20, offset: 21685},
										expr: &ruleRefExpr{
											pos:  position{line: 647, col: 21, offset: 21686},
											name: "InlineElement",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 649, col: 12, offset: 21787},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ListItemContinuation",
			pos:  position{line: 653, col: 1, offset: 21830},
			expr: &seqExpr{
				pos: position{line: 653, col: 25, offset: 21854},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 653, col: 25, offset: 21854},
						val:        "+",
						ignoreCase: false,
						want:       "\"+\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 653, col: 29, offset: 21858},
						expr: &ruleRefExpr{
							pos:  position{line: 653, col: 29, offset: 21858},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 653, col: 36, offset: 21865},
						name: "Newline",
					},
				},
			},
		},
		{
			name: "ContinuedListItemElement",
			pos:  position{line: 655, col: 1, offset: 21939},
			expr: &actionExpr{
				pos: position{line: 655, col: 29, offset: 21967},
				run: (*parser).callonContinuedListItemElement1,
				expr: &seqExpr{
					pos: position{line: 655, col: 29, offset: 21967},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 655, col: 29, offset: 21967},
							name: "ListItemContinuation",
						},
						&labeledExpr{
							pos:   position{line: 655, col: 50, offset: 21988},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 655, col: 58, offset: 21996},
								name: "ContinuedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "ContinuedListItemContent",
			pos:  position{line: 659, col: 1, offset: 22106},
			expr: &actionExpr{
				pos: position{line: 659, col: 29, offset: 22134},
				run: (*parser).callonContinuedListItemContent1,
				expr: &seqExpr{
					pos: position{line: 659, col: 29, offset: 22134},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 659, col: 29, offset: 22134},
							expr: &ruleRefExpr{
								pos:  position{line: 659, col: 30, offset: 22135},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 660, col: 5, offset: 22145},
							label: "content",
							expr: &choiceExpr{
								pos: position{line: 660, col: 14, offset: 22154},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 660, col: 14, offset: 22154},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 661, col: 11, offset: 22180},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 662, col: 11, offset: 22205},
										name: "VerseParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 663, col: 11, offset: 22260},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 664, col: 11, offset: 22282},
										name: "ThematicBreak",
									},
									&ruleRefExpr{
										pos:  position{line: 665, col: 11, offset: 22307},
										name: "OrderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 666, col: 11, offset: 22335},
										name: "UnorderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 667, col: 11, offset: 22365},
										name: "LabeledListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 669, col: 11, offset: 22432},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 670, col: 11, offset: 22484},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 671, col: 11, offset: 22509},
										name: "AttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 672, col: 11, offset: 22542},
										name: "AttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 673, col: 11, offset: 22569},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 674, col: 11, offset: 22607},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 675, col: 11, offset: 22633},
										name: "ContinuedParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItem",
			pos:  position{line: 682, col: 1, offset: 22803},
			expr: &actionExpr{
				pos: position{line: 682, col: 20, offset: 22822},
				run: (*parser).callonOrderedListItem1,
				expr: &seqExpr{
					pos: position{line: 682, col: 20, offset: 22822},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 682, col: 20, offset: 22822},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 682, col: 31, offset: 22833},
								expr: &ruleRefExpr{
									pos:  position{line: 682, col: 32, offset: 22834},
									name: "Attributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 682, col: 45, offset: 22847},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 682, col: 53, offset: 22855},
								name: "OrderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 682, col: 76, offset: 22878},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 682, col: 85, offset: 22887},
								name: "OrderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemPrefix",
			pos:  position{line: 686, col: 1, offset: 23031},
			expr: &actionExpr{
				pos: position{line: 687, col: 5, offset: 23062},
				run: (*parser).callonOrderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 687, col: 5, offset: 23062},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 687, col: 5, offset: 23062},
							expr: &ruleRefExpr{
								pos:  position{line: 687, col: 5, offset: 23062},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 687, col: 12, offset: 23069},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 689, col: 9, offset: 23134},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 689, col: 9, offset: 23134},
										run: (*parser).callonOrderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 689, col: 9, offset: 23134},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 689, col: 9, offset: 23134},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 689, col: 16, offset: 23141},
														run: (*parser).callonOrderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 689, col: 16, offset: 23141},
															expr: &litMatcher{
																pos:        position{line: 689, col: 17, offset: 23142},
																val:        ".",
																ignoreCase: false,
																want:       "\".\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 693, col: 9, offset: 23246},
													run: (*parser).callonOrderedListItemPrefix13,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 712, col: 11, offset: 23982},
										run: (*parser).callonOrderedListItemPrefix14,
										expr: &seqExpr{
											pos: position{line: 712, col: 11, offset: 23982},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 712, col: 11, offset: 23982},
													expr: &charClassMatcher{
														pos:        position{line: 712, col: 12, offset: 23983},
														val:        "[0-9]",
														ranges:     []rune{'0', '9'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 712, col: 20, offset: 23991},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 714, col: 13, offset: 24104},
										run: (*parser).callonOrderedListItemPrefix19,
										expr: &seqExpr{
											pos: position{line: 714, col: 13, offset: 24104},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 714, col: 14, offset: 24105},
													val:        "[a-z]",
													ranges:     []rune{'a', 'z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 714, col: 21, offset: 24112},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 716, col: 13, offset: 24228},
										run: (*parser).callonOrderedListItemPrefix23,
										expr: &seqExpr{
											pos: position{line: 716, col: 13, offset: 24228},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 716, col: 14, offset: 24229},
													val:        "[A-Z]",
													ranges:     []rune{'A', 'Z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 716, col: 21, offset: 24236},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 718, col: 13, offset: 24352},
										run: (*parser).callonOrderedListItemPrefix27,
										expr: &seqExpr{
											pos: position{line: 718, col: 13, offset: 24352},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 718, col: 13, offset: 24352},
													expr: &charClassMatcher{
														pos:        position{line: 718, col: 14, offset: 24353},
														val:        "[a-z]",
														ranges:     []rune{'a', 'z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 718, col: 22, offset: 24361},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 720, col: 13, offset: 24477},
										run: (*parser).callonOrderedListItemPrefix32,
										expr: &seqExpr{
											pos: position{line: 720, col: 13, offset: 24477},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 720, col: 13, offset: 24477},
													expr: &charClassMatcher{
														pos:        position{line: 720, col: 14, offset: 24478},
														val:        "[A-Z]",
														ranges:     []rune{'A', 'Z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 720, col: 22, offset: 24486},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 722, col: 12, offset: 24601},
							expr: &ruleRefExpr{
								pos:  position{line: 722, col: 12, offset: 24601},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemContent",
			pos:  position{line: 726, col: 1, offset: 24640},
			expr: &actionExpr{
				pos: position{line: 726, col: 27, offset: 24666},
				run: (*parser).callonOrderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 726, col: 27, offset: 24666},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 726, col: 37, offset: 24676},
						expr: &ruleRefExpr{
							pos:  position{line: 726, col: 37, offset: 24676},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItem",
			pos:  position{line: 733, col: 1, offset: 24883},
			expr: &actionExpr{
				pos: position{line: 733, col: 22, offset: 24904},
				run: (*parser).callonUnorderedListItem1,
				expr: &seqExpr{
					pos: position{line: 733, col: 22, offset: 24904},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 733, col: 22, offset: 24904},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 733, col: 33, offset: 24915},
								expr: &ruleRefExpr{
									pos:  position{line: 733, col: 34, offset: 24916},
									name: "Attributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 733, col: 47, offset: 24929},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 733, col: 55, offset: 24937},
								name: "UnorderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 733, col: 80, offset: 24962},
							label: "checkstyle",
							expr: &zeroOrOneExpr{
								pos: position{line: 733, col: 91, offset: 24973},
								expr: &ruleRefExpr{
									pos:  position{line: 733, col: 92, offset: 24974},
									name: "UnorderedListItemCheckStyle",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 733, col: 122, offset: 25004},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 733, col: 131, offset: 25013},
								name: "UnorderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemPrefix",
			pos:  position{line: 737, col: 1, offset: 25175},
			expr: &actionExpr{
				pos: position{line: 738, col: 5, offset: 25208},
				run: (*parser).callonUnorderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 738, col: 5, offset: 25208},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 738, col: 5, offset: 25208},
							expr: &ruleRefExpr{
								pos:  position{line: 738, col: 5, offset: 25208},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 738, col: 12, offset: 25215},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 738, col: 20, offset: 25223},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 740, col: 9, offset: 25282},
										run: (*parser).callonUnorderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 740, col: 9, offset: 25282},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 740, col: 9, offset: 25282},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 740, col: 16, offset: 25289},
														run: (*parser).callonUnorderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 740, col: 16, offset: 25289},
															expr: &litMatcher{
																pos:        position{line: 740, col: 17, offset: 25290},
																val:        "*",
																ignoreCase: false,
																want:       "\"*\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 744, col: 9, offset: 25394},
													run: (*parser).callonUnorderedListItemPrefix13,
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 761, col: 14, offset: 26118},
										label: "depth",
										expr: &actionExpr{
											pos: position{line: 761, col: 21, offset: 26125},
											run: (*parser).callonUnorderedListItemPrefix15,
											expr: &litMatcher{
												pos:        position{line: 761, col: 22, offset: 26126},
												val:        "-",
												ignoreCase: false,
												want:       "\"-\"",
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 763, col: 13, offset: 26214},
							expr: &ruleRefExpr{
								pos:  position{line: 763, col: 13, offset: 26214},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemCheckStyle",
			pos:  position{line: 767, col: 1, offset: 26254},
			expr: &actionExpr{
				pos: position{line: 767, col: 32, offset: 26285},
				run: (*parser).callonUnorderedListItemCheckStyle1,
				expr: &seqExpr{
					pos: position{line: 767, col: 32, offset: 26285},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 767, col: 32, offset: 26285},
							expr: &litMatcher{
								pos:        position{line: 767, col: 33, offset: 26286},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 767, col: 37, offset: 26290},
							label: "style",
							expr: &choiceExpr{
								pos: position{line: 768, col: 7, offset: 26305},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 768, col: 7, offset: 26305},
										run: (*parser).callonUnorderedListItemCheckStyle7,
										expr: &litMatcher{
											pos:        position{line: 768, col: 7, offset: 26305},
											val:        "[ ]",
											ignoreCase: false,
											want:       "\"[ ]\"",
										},
									},
									&actionExpr{
										pos: position{line: 769, col: 7, offset: 26351},
										run: (*parser).callonUnorderedListItemCheckStyle9,
										expr: &litMatcher{
											pos:        position{line: 769, col: 7, offset: 26351},
											val:        "[*]",
											ignoreCase: false,
											want:       "\"[*]\"",
										},
									},
									&actionExpr{
										pos: position{line: 770, col: 7, offset: 26395},
										run: (*parser).callonUnorderedListItemCheckStyle11,
										expr: &litMatcher{
											pos:        position{line: 770, col: 7, offset: 26395},
											val:        "[x]",
											ignoreCase: false,
											want:       "\"[x]\"",
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 771, col: 7, offset: 26438},
							expr: &ruleRefExpr{
								pos:  position{line: 771, col: 7, offset: 26438},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemContent",
			pos:  position{line: 775, col: 1, offset: 26484},
			expr: &actionExpr{
				pos: position{line: 775, col: 29, offset: 26512},
				run: (*parser).callonUnorderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 775, col: 29, offset: 26512},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 775, col: 39, offset: 26522},
						expr: &ruleRefExpr{
							pos:  position{line: 775, col: 39, offset: 26522},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "LabeledListItem",
			pos:  position{line: 782, col: 1, offset: 26845},
			expr: &actionExpr{
				pos: position{line: 782, col: 20, offset: 26864},
				run: (*parser).callonLabeledListItem1,
				expr: &seqExpr{
					pos: position{line: 782, col: 20, offset: 26864},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 782, col: 20, offset: 26864},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 782, col: 31, offset: 26875},
								expr: &ruleRefExpr{
									pos:  position{line: 782, col: 32, offset: 26876},
									name: "Attributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 782, col: 45, offset: 26889},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 782, col: 51, offset: 26895},
								name: "VerbatimLabeledListItemTerm",
							},
						},
						&labeledExpr{
							pos:   position{line: 782, col: 80, offset: 26924},
							label: "separator",
							expr: &ruleRefExpr{
								pos:  position{line: 782, col: 91, offset: 26935},
								name: "LabeledListItemSeparator",
							},
						},
						&labeledExpr{
							pos:   position{line: 782, col: 117, offset: 26961},
							label: "description",
							expr: &zeroOrOneExpr{
								pos: position{line: 782, col: 129, offset: 26973},
								expr: &ruleRefExpr{
									pos:  position{line: 782, col: 130, offset: 26974},
									name: "LabeledListItemDescription",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemPrefix",
			pos:  position{line: 786, col: 1, offset: 27124},
			expr: &seqExpr{
				pos: position{line: 786, col: 26, offset: 27149},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 786, col: 26, offset: 27149},
						name: "VerbatimLabeledListItemTerm",
					},
					&ruleRefExpr{
						pos:  position{line: 786, col: 54, offset: 27177},
						name: "LabeledListItemSeparator",
					},
				},
			},
		},
		{
			name: "VerbatimLabeledListItemChars",
			pos:  position{line: 788, col: 1, offset: 27205},
			expr: &choiceExpr{
				pos: position{line: 788, col: 33, offset: 27237},
				alternatives: []interface{}{
					&oneOrMoreExpr{
						pos: position{line: 788, col: 33, offset: 27237},
						expr: &charClassMatcher{
							pos:        position{line: 788, col: 33, offset: 27237},
							val:        "[^:\\r\\n]",
							chars:      []rune{':', '\r', '\n'},
							ignoreCase: false,
							inverted:   true,
						},
					},
					&seqExpr{
						pos: position{line: 788, col: 45, offset: 27249},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 788, col: 45, offset: 27249},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
							&notExpr{
								pos: position{line: 788, col: 49, offset: 27253},
								expr: &litMatcher{
									pos:        position{line: 788, col: 50, offset: 27254},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerbatimLabeledListItemTerm",
			pos:  position{line: 789, col: 1, offset: 27259},
			expr: &actionExpr{
				pos: position{line: 789, col: 32, offset: 27290},
				run: (*parser).callonVerbatimLabeledListItemTerm1,
				expr: &labeledExpr{
					pos:   position{line: 789, col: 32, offset: 27290},
					label: "content",
					expr: &actionExpr{
						pos: position{line: 789, col: 42, offset: 27300},
						run: (*parser).callonVerbatimLabeledListItemTerm3,
						expr: &oneOrMoreExpr{
							pos: position{line: 789, col: 42, offset: 27300},
							expr: &ruleRefExpr{
								pos:  position{line: 789, col: 42, offset: 27300},
								name: "VerbatimLabeledListItemChars",
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTerm",
			pos:  position{line: 795, col: 1, offset: 27461},
			expr: &actionExpr{
				pos: position{line: 795, col: 24, offset: 27484},
				run: (*parser).callonLabeledListItemTerm1,
				expr: &labeledExpr{
					pos:   position{line: 795, col: 24, offset: 27484},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 795, col: 33, offset: 27493},
						expr: &seqExpr{
							pos: position{line: 795, col: 34, offset: 27494},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 795, col: 34, offset: 27494},
									expr: &ruleRefExpr{
										pos:  position{line: 795, col: 35, offset: 27495},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 795, col: 43, offset: 27503},
									expr: &litMatcher{
										pos:        position{line: 795, col: 44, offset: 27504},
										val:        "::",
										ignoreCase: false,
										want:       "\"::\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 795, col: 49, offset: 27509},
									name: "LabeledListItemTermElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTermElement",
			pos:  position{line: 799, col: 1, offset: 27640},
			expr: &actionExpr{
				pos: position{line: 799, col: 31, offset: 27670},
				run: (*parser).callonLabeledListItemTermElement1,
				expr: &labeledExpr{
					pos:   position{line: 799, col: 31, offset: 27670},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 799, col: 40, offset: 27679},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 799, col: 40, offset: 27679},
								name: "Word",
							},
							&ruleRefExpr{
								pos:  position{line: 800, col: 11, offset: 27695},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 801, col: 11, offset: 27745},
								expr: &ruleRefExpr{
									pos:  position{line: 801, col: 11, offset: 27745},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 802, col: 11, offset: 27764},
								name: "CrossReference",
							},
							&ruleRefExpr{
								pos:  position{line: 803, col: 11, offset: 27790},
								name: "ConcealedIndexTerm",
							},
							&ruleRefExpr{
								pos:  position{line: 804, col: 11, offset: 27820},
								name: "IndexTerm",
							},
							&ruleRefExpr{
								pos:  position{line: 805, col: 11, offset: 27841},
								name: "InlinePassthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 806, col: 11, offset: 27870},
								name: "InlineIcon",
							},
							&ruleRefExpr{
								pos:  position{line: 807, col: 11, offset: 27892},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 808, col: 11, offset: 27916},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 809, col: 11, offset: 27932},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 810, col: 11, offset: 27958},
								name: "QuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 811, col: 11, offset: 27982},
								name: "QuotedText",
							},
							&ruleRefExpr{
								pos:  position{line: 812, col: 11, offset: 28004},
								name: "AttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 813, col: 11, offset: 28037},
								name: "AnyChar",
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemSeparator",
			pos:  position{line: 817, col: 1, offset: 28080},
			expr: &actionExpr{
				pos: position{line: 818, col: 5, offset: 28114},
				run: (*parser).callonLabeledListItemSeparator1,
				expr: &seqExpr{
					pos: position{line: 818, col: 5, offset: 28114},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 818, col: 5, offset: 28114},
							label: "separator",
							expr: &actionExpr{
								pos: position{line: 818, col: 16, offset: 28125},
								run: (*parser).callonLabeledListItemSeparator4,
								expr: &oneOrMoreExpr{
									pos: position{line: 818, col: 16, offset: 28125},
									expr: &litMatcher{
										pos:        position{line: 818, col: 17, offset: 28126},
										val:        ":",
										ignoreCase: false,
										want:       "\":\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 821, col: 5, offset: 28187},
							run: (*parser).callonLabeledListItemSeparator7,
						},
						&choiceExpr{
							pos: position{line: 825, col: 6, offset: 28367},
							alternatives: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 825, col: 6, offset: 28367},
									expr: &choiceExpr{
										pos: position{line: 825, col: 7, offset: 28368},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 825, col: 7, offset: 28368},
												name: "Space",
											},
											&ruleRefExpr{
												pos:  position{line: 825, col: 15, offset: 28376},
												name: "Newline",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 825, col: 27, offset: 28388},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemDescription",
			pos:  position{line: 829, col: 1, offset: 28432},
			expr: &actionExpr{
				pos: position{line: 829, col: 31, offset: 28462},
				run: (*parser).callonLabeledListItemDescription1,
				expr: &labeledExpr{
					pos:   position{line: 829, col: 31, offset: 28462},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 829, col: 40, offset: 28471},
						expr: &ruleRefExpr{
							pos:  position{line: 829, col: 41, offset: 28472},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionKind",
			pos:  position{line: 836, col: 1, offset: 28670},
			expr: &choiceExpr{
				pos: position{line: 836, col: 19, offset: 28688},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 836, col: 19, offset: 28688},
						run: (*parser).callonAdmonitionKind2,
						expr: &litMatcher{
							pos:        position{line: 836, col: 19, offset: 28688},
							val:        "TIP",
							ignoreCase: false,
							want:       "\"TIP\"",
						},
					},
					&actionExpr{
						pos: position{line: 838, col: 9, offset: 28736},
						run: (*parser).callonAdmonitionKind4,
						expr: &litMatcher{
							pos:        position{line: 838, col: 9, offset: 28736},
							val:        "NOTE",
							ignoreCase: false,
							want:       "\"NOTE\"",
						},
					},
					&actionExpr{
						pos: position{line: 840, col: 9, offset: 28786},
						run: (*parser).callonAdmonitionKind6,
						expr: &litMatcher{
							pos:        position{line: 840, col: 9, offset: 28786},
							val:        "IMPORTANT",
							ignoreCase: false,
							want:       "\"IMPORTANT\"",
						},
					},
					&actionExpr{
						pos: position{line: 842, col: 9, offset: 28846},
						run: (*parser).callonAdmonitionKind8,
						expr: &litMatcher{
							pos:        position{line: 842, col: 9, offset: 28846},
							val:        "WARNING",
							ignoreCase: false,
							want:       "\"WARNING\"",
						},
					},
					&actionExpr{
						pos: position{line: 844, col: 9, offset: 28902},
						run: (*parser).callonAdmonitionKind10,
						expr: &litMatcher{
							pos:        position{line: 844, col: 9, offset: 28902},
							val:        "CAUTION",
							ignoreCase: false,
							want:       "\"CAUTION\"",
						},
					},
				},
			},
		},
		{
			name: "Paragraph",
			pos:  position{line: 853, col: 1, offset: 29218},
			expr: &choiceExpr{
				pos: position{line: 855, col: 5, offset: 29267},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 855, col: 5, offset: 29267},
						run: (*parser).callonParagraph2,
						expr: &seqExpr{
							pos: position{line: 855, col: 5, offset: 29267},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 855, col: 5, offset: 29267},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 855, col: 16, offset: 29278},
										expr: &ruleRefExpr{
											pos:  position{line: 855, col: 17, offset: 29279},
											name: "Attributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 855, col: 30, offset: 29292},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 855, col: 33, offset: 29295},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 855, col: 49, offset: 29311},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 855, col: 54, offset: 29316},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 855, col: 60, offset: 29322},
										expr: &ruleRefExpr{
											pos:  position{line: 855, col: 61, offset: 29323},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 859, col: 5, offset: 29508},
						run: (*parser).callonParagraph13,
						expr: &seqExpr{
							pos: position{line: 859, col: 5, offset: 29508},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 859, col: 5, offset: 29508},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 859, col: 16, offset: 29519},
										expr: &ruleRefExpr{
											pos:  position{line: 859, col: 17, offset: 29520},
											name: "Attributes",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 859, col: 30, offset: 29533},
									val:        "> ",
									ignoreCase: false,
									want:       "\"> \"",
								},
								&labeledExpr{
									pos:   position{line: 859, col: 35, offset: 29538},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 859, col: 44, offset: 29547},
										name: "MarkdownQuoteBlockVerbatimContent",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 863, col: 5, offset: 29746},
						run: (*parser).callonParagraph21,
						expr: &seqExpr{
							pos: position{line: 863, col: 5, offset: 29746},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 863, col: 5, offset: 29746},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 863, col: 16, offset: 29757},
										expr: &ruleRefExpr{
											pos:  position{line: 863, col: 17, offset: 29758},
											name: "Attributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 863, col: 30, offset: 29771},
									run: (*parser).callonParagraph26,
								},
								&notExpr{
									pos: position{line: 870, col: 7, offset: 30057},
									expr: &ruleRefExpr{
										pos:  position{line: 870, col: 8, offset: 30058},
										name: "BlockDelimiter",
									},
								},
								&labeledExpr{
									pos:   position{line: 870, col: 23, offset: 30073},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 870, col: 32, offset: 30082},
										name: "OpenPassthroughParagraphContent",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 874, col: 5, offset: 30283},
						run: (*parser).callonParagraph31,
						expr: &seqExpr{
							pos: position{line: 874, col: 5, offset: 30283},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 874, col: 5, offset: 30283},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 874, col: 16, offset: 30294},
										expr: &ruleRefExpr{
											pos:  position{line: 874, col: 17, offset: 30295},
											name: "Attributes",
										},
									},
								},
								&notExpr{
									pos: position{line: 874, col: 30, offset: 30308},
									expr: &ruleRefExpr{
										pos:  position{line: 874, col: 31, offset: 30309},
										name: "BlockDelimiter",
									},
								},
								&labeledExpr{
									pos:   position{line: 874, col: 46, offset: 30324},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 874, col: 52, offset: 30330},
										expr: &ruleRefExpr{
											pos:  position{line: 874, col: 53, offset: 30331},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkdownQuoteBlockVerbatimContent",
			pos:  position{line: 878, col: 1, offset: 30431},
			expr: &oneOrMoreExpr{
				pos: position{line: 878, col: 38, offset: 30468},
				expr: &actionExpr{
					pos: position{line: 878, col: 39, offset: 30469},
					run: (*parser).callonMarkdownQuoteBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 878, col: 39, offset: 30469},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 878, col: 39, offset: 30469},
								expr: &ruleRefExpr{
									pos:  position{line: 878, col: 40, offset: 30470},
									name: "BlankLine",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 878, col: 50, offset: 30480},
								expr: &litMatcher{
									pos:        position{line: 878, col: 50, offset: 30480},
									val:        "> ",
									ignoreCase: false,
									want:       "\"> \"",
								},
							},
							&labeledExpr{
								pos:   position{line: 878, col: 56, offset: 30486},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 878, col: 65, offset: 30495},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkdownQuoteBlockAttribution",
			pos:  position{line: 882, col: 1, offset: 30640},
			expr: &actionExpr{
				pos: position{line: 882, col: 34, offset: 30673},
				run: (*parser).callonMarkdownQuoteBlockAttribution1,
				expr: &seqExpr{
					pos: position{line: 882, col: 34, offset: 30673},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 882, col: 34, offset: 30673},
							val:        "-- ",
							ignoreCase: false,
							want:       "\"-- \"",
						},
						&labeledExpr{
							pos:   position{line: 882, col: 40, offset: 30679},
							label: "author",
							expr: &actionExpr{
								pos: position{line: 882, col: 48, offset: 30687},
								run: (*parser).callonMarkdownQuoteBlockAttribution5,
								expr: &oneOrMoreExpr{
									pos: position{line: 882, col: 49, offset: 30688},
									expr: &charClassMatcher{
										pos:        position{line: 882, col: 49, offset: 30688},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 884, col: 8, offset: 30740},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "OpenPassthroughParagraphContent",
			pos:  position{line: 888, col: 1, offset: 30776},
			expr: &oneOrMoreExpr{
				pos: position{line: 888, col: 36, offset: 30811},
				expr: &actionExpr{
					pos: position{line: 888, col: 37, offset: 30812},
					run: (*parser).callonOpenPassthroughParagraphContent2,
					expr: &seqExpr{
						pos: position{line: 888, col: 37, offset: 30812},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 888, col: 37, offset: 30812},
								expr: &ruleRefExpr{
									pos:  position{line: 888, col: 38, offset: 30813},
									name: "BlankLine",
								},
							},
							&labeledExpr{
								pos:   position{line: 888, col: 48, offset: 30823},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 888, col: 57, offset: 30832},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SimpleParagraph",
			pos:  position{line: 893, col: 1, offset: 31050},
			expr: &actionExpr{
				pos: position{line: 893, col: 20, offset: 31069},
				run: (*parser).callonSimpleParagraph1,
				expr: &seqExpr{
					pos: position{line: 893, col: 20, offset: 31069},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 893, col: 20, offset: 31069},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 893, col: 31, offset: 31080},
								expr: &ruleRefExpr{
									pos:  position{line: 893, col: 32, offset: 31081},
									name: "Attributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 894, col: 5, offset: 31100},
							run: (*parser).callonSimpleParagraph6,
						},
						&labeledExpr{
							pos:   position{line: 902, col: 5, offset: 31394},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 902, col: 16, offset: 31405},
								name: "FirstParagraphLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 903, col: 5, offset: 31429},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 903, col: 16, offset: 31440},
								expr: &ruleRefExpr{
									pos:  position{line: 903, col: 17, offset: 31441},
									name: "OtherParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FirstParagraphLine",
			pos:  position{line: 907, col: 1, offset: 31579},
			expr: &actionExpr{
				pos: position{line: 908, col: 5, offset: 31607},
				run: (*parser).callonFirstParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 908, col: 5, offset: 31607},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 908, col: 5, offset: 31607},
							label: "elements",
							expr: &seqExpr{
								pos: position{line: 908, col: 15, offset: 31617},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 908, col: 15, offset: 31617},
										name: "Word",
									},
									&zeroOrMoreExpr{
										pos: position{line: 908, col: 20, offset: 31622},
										expr: &ruleRefExpr{
											pos:  position{line: 908, col: 20, offset: 31622},
											name: "InlineElement",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 908, col: 36, offset: 31638},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "OtherParagraphLine",
			pos:  position{line: 912, col: 1, offset: 31713},
			expr: &actionExpr{
				pos: position{line: 912, col: 23, offset: 31735},
				run: (*parser).callonOtherParagraphLine1,
				expr: &labeledExpr{
					pos:   position{line: 912, col: 23, offset: 31735},
					label: "elements",
					expr: &ruleRefExpr{
						pos:  position{line: 912, col: 33, offset: 31745},
						name: "InlineElements",
					},
				},
			},
		},
		{
			name: "ContinuedParagraph",
			pos:  position{line: 917, col: 1, offset: 31870},
			expr: &choiceExpr{
				pos: position{line: 919, col: 5, offset: 31928},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 919, col: 5, offset: 31928},
						run: (*parser).callonContinuedParagraph2,
						expr: &seqExpr{
							pos: position{line: 919, col: 5, offset: 31928},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 919, col: 5, offset: 31928},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 919, col: 16, offset: 31939},
										expr: &ruleRefExpr{
											pos:  position{line: 919, col: 17, offset: 31940},
											name: "Attributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 919, col: 30, offset: 31953},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 919, col: 33, offset: 31956},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 919, col: 49, offset: 31972},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 919, col: 54, offset: 31977},
									label: "lines",
									expr: &ruleRefExpr{
										pos:  position{line: 919, col: 61, offset: 31984},
										name: "ContinuedParagraphLines",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 923, col: 5, offset: 32188},
						run: (*parser).callonContinuedParagraph12,
						expr: &seqExpr{
							pos: position{line: 923, col: 5, offset: 32188},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 923, col: 5, offset: 32188},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 923, col: 16, offset: 32199},
										expr: &ruleRefExpr{
											pos:  position{line: 923, col: 17, offset: 32200},
											name: "Attributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 923, col: 30, offset: 32213},
									label: "lines",
									expr: &ruleRefExpr{
										pos:  position{line: 923, col: 37, offset: 32220},
										name: "ContinuedParagraphLines",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ContinuedParagraphLines",
			pos:  position{line: 927, col: 1, offset: 32325},
			expr: &actionExpr{
				pos: position{line: 927, col: 28, offset: 32352},
				run: (*parser).callonContinuedParagraphLines1,
				expr: &seqExpr{
					pos: position{line: 927, col: 28, offset: 32352},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 927, col: 28, offset: 32352},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 927, col: 39, offset: 32363},
								name: "FirstParagraphLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 927, col: 59, offset: 32383},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 927, col: 70, offset: 32394},
								expr: &seqExpr{
									pos: position{line: 927, col: 71, offset: 32395},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 927, col: 71, offset: 32395},
											expr: &ruleRefExpr{
												pos:  position{line: 927, col: 72, offset: 32396},
												name: "ListItemContinuation",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 927, col: 93, offset: 32417},
											name: "OtherParagraphLine",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseParagraph",
			pos:  position{line: 931, col: 1, offset: 32527},
			expr: &choiceExpr{
				pos: position{line: 933, col: 5, offset: 32581},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 933, col: 5, offset: 32581},
						run: (*parser).callonVerseParagraph2,
						expr: &seqExpr{
							pos: position{line: 933, col: 5, offset: 32581},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 933, col: 5, offset: 32581},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 933, col: 16, offset: 32592},
										expr: &ruleRefExpr{
											pos:  position{line: 933, col: 17, offset: 32593},
											name: "Attributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 934, col: 5, offset: 32611},
									run: (*parser).callonVerseParagraph7,
								},
								&labeledExpr{
									pos:   position{line: 941, col: 5, offset: 32823},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 941, col: 8, offset: 32826},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 941, col: 24, offset: 32842},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 941, col: 29, offset: 32847},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 941, col: 35, offset: 32853},
										expr: &ruleRefExpr{
											pos:  position{line: 941, col: 36, offset: 32854},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 945, col: 5, offset: 33050},
						run: (*parser).callonVerseParagraph14,
						expr: &seqExpr{
							pos: position{line: 945, col: 5, offset: 33050},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 945, col: 5, offset: 33050},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 945, col: 16, offset: 33061},
										expr: &ruleRefExpr{
											pos:  position{line: 945, col: 17, offset: 33062},
											name: "Attributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 946, col: 5, offset: 33080},
									run: (*parser).callonVerseParagraph19,
								},
								&labeledExpr{
									pos:   position{line: 953, col: 5, offset: 33292},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 953, col: 11, offset: 33298},
										expr: &ruleRefExpr{
											pos:  position{line: 953, col: 12, offset: 33299},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElements",
			pos:  position{line: 957, col: 1, offset: 33404},
			expr: &actionExpr{
				pos: position{line: 957, col: 19, offset: 33422},
				run: (*parser).callonInlineElements1,
				expr: &seqExpr{
					pos: position{line: 957, col: 19, offset: 33422},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 957, col: 19, offset: 33422},
							expr: &ruleRefExpr{
								pos:  position{line: 957, col: 20, offset: 33423},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 958, col: 5, offset: 33438},
							label: "elements",
							expr: &choiceExpr{
								pos: position{line: 958, col: 15, offset: 33448},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 958, col: 15, offset: 33448},
										run: (*parser).callonInlineElements7,
										expr: &labeledExpr{
											pos:   position{line: 958, col: 15, offset: 33448},
											label: "comment",
											expr: &ruleRefExpr{
												pos:  position{line: 958, col: 24, offset: 33457},
												name: "SingleLineComment",
											},
										},
									},
									&actionExpr{
										pos: position{line: 960, col: 9, offset: 33551},
										run: (*parser).callonInlineElements10,
										expr: &seqExpr{
											pos: position{line: 960, col: 9, offset: 33551},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 960, col: 9, offset: 33551},
													label: "elements",
													expr: &oneOrMoreExpr{
														pos: position{line: 960, col: 18, offset: 33560},
														expr: &ruleRefExpr{
															pos:  position{line: 960, col: 19, offset: 33561},
															name: "InlineElement",
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 960, col: 35, offset: 33577},
													name: "EOL",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElement",
			pos:  position{line: 966, col: 1, offset: 33700},
			expr: &actionExpr{
				pos: position{line: 967, col: 5, offset: 33724},
				run: (*parser).callonInlineElement1,
				expr: &labeledExpr{
					pos:   position{line: 967, col: 5, offset: 33724},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 967, col: 14, offset: 33733},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 967, col: 14, offset: 33733},
								name: "InlineWord",
							},
							&ruleRefExpr{
								pos:  position{line: 968, col: 11, offset: 33785},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 969, col: 11, offset: 33831},
								expr: &ruleRefExpr{
									pos:  position{line: 969, col: 11, offset: 33831},
									name: "Space",
								},
							},
							&seqExpr{
								pos: position{line: 970, col: 11, offset: 33850},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 970, col: 11, offset: 33850},
										expr: &ruleRefExpr{
											pos:  position{line: 970, col: 12, offset: 33851},
											name: "EOL",
										},
									},
									&choiceExpr{
										pos: position{line: 971, col: 13, offset: 33870},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 971, col: 13, offset: 33870},
												name: "QuotedString",
											},
											&ruleRefExpr{
												pos:  position{line: 972, col: 15, offset: 33898},
												name: "QuotedText",
											},
											&ruleRefExpr{
												pos:  position{line: 973, col: 15, offset: 33924},
												name: "InlineIcon",
											},
											&ruleRefExpr{
												pos:  position{line: 974, col: 15, offset: 33950},
												name: "InlineImage",
											},
											&ruleRefExpr{
												pos:  position{line: 975, col: 15, offset: 33978},
												name: "Link",
											},
											&ruleRefExpr{
												pos:  position{line: 976, col: 15, offset: 33999},
												name: "InlinePassthrough",
											},
											&ruleRefExpr{
												pos:  position{line: 977, col: 15, offset: 34033},
												name: "InlineFootnote",
											},
											&ruleRefExpr{
												pos:  position{line: 978, col: 15, offset: 34064},
												name: "CrossReference",
											},
											&ruleRefExpr{
												pos:  position{line: 979, col: 15, offset: 34095},
												name: "InlineUserMacro",
											},
											&ruleRefExpr{
												pos:  position{line: 980, col: 15, offset: 34127},
												name: "AttributeSubstitution",
											},
											&ruleRefExpr{
												pos:  position{line: 981, col: 15, offset: 34165},
												name: "InlineElementID",
											},
											&ruleRefExpr{
												pos:  position{line: 982, col: 15, offset: 34196},
												name: "ConcealedIndexTerm",
											},
											&ruleRefExpr{
												pos:  position{line: 983, col: 15, offset: 34230},
												name: "IndexTerm",
											},
											&ruleRefExpr{
												pos:  position{line: 984, col: 15, offset: 34255},
												name: "AnyChar",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LineBreak",
			pos:  position{line: 991, col: 1, offset: 34485},
			expr: &actionExpr{
				pos: position{line: 991, col: 14, offset: 34498},
				run: (*parser).callonLineBreak1,
				expr: &seqExpr{
					pos: position{line: 991, col: 14, offset: 34498},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 991, col: 14, offset: 34498},
							name: "Space",
						},
						&litMatcher{
							pos:        position{line: 991, col: 20, offset: 34504},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 991, col: 24, offset: 34508},
							expr: &ruleRefExpr{
								pos:  position{line: 991, col: 24, offset: 34508},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 991, col: 31, offset: 34515},
							expr: &ruleRefExpr{
								pos:  position{line: 991, col: 32, offset: 34516},
								name: "EOL",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedText",
			pos:  position{line: 998, col: 1, offset: 34807},
			expr: &choiceExpr{
				pos: position{line: 998, col: 15, offset: 34821},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 998, col: 15, offset: 34821},
						name: "UnconstrainedQuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 998, col: 41, offset: 34847},
						name: "ConstrainedQuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 998, col: 65, offset: 34871},
						name: "EscapedQuotedText",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedTextMarker",
			pos:  position{line: 1000, col: 1, offset: 34892},
			expr: &choiceExpr{
				pos: position{line: 1000, col: 32, offset: 34923},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1000, col: 32, offset: 34923},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1000, col: 32, offset: 34923},
								val:        "*",
								ignoreCase: false,
								want:       "\"*\"",
							},
							&notExpr{
								pos: position{line: 1000, col: 36, offset: 34927},
								expr: &litMatcher{
									pos:        position{line: 1000, col: 37, offset: 34928},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1000, col: 43, offset: 34934},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1000, col: 43, offset: 34934},
								val:        "_",
								ignoreCase: false,
								want:       "\"_\"",
							},
							&notExpr{
								pos: position{line: 1000, col: 47, offset: 34938},
								expr: &litMatcher{
									pos:        position{line: 1000, col: 48, offset: 34939},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1000, col: 54, offset: 34945},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1000, col: 54, offset: 34945},
								val:        "#",
								ignoreCase: false,
								want:       "\"#\"",
							},
							&notExpr{
								pos: position{line: 1000, col: 58, offset: 34949},
								expr: &litMatcher{
									pos:        position{line: 1000, col: 59, offset: 34950},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1000, col: 65, offset: 34956},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1000, col: 65, offset: 34956},
								val:        "`",
								ignoreCase: false,
								want:       "\"`\"",
							},
							&notExpr{
								pos: position{line: 1000, col: 69, offset: 34960},
								expr: &litMatcher{
									pos:        position{line: 1000, col: 70, offset: 34961},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedTextPrefix",
			pos:  position{line: 1002, col: 1, offset: 34968},
			expr: &choiceExpr{
				pos: position{line: 1002, col: 34, offset: 35001},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1002, col: 34, offset: 35001},
						val:        "**",
						ignoreCase: false,
						want:       "\"**\"",
					},
					&litMatcher{
						pos:        position{line: 1002, col: 41, offset: 35008},
						val:        "__",
						ignoreCase: false,
						want:       "\"__\"",
					},
					&litMatcher{
						pos:        position{line: 1002, col: 48, offset: 35015},
						val:        "``",
						ignoreCase: false,
						want:       "\"``\"",
					},
					&litMatcher{
						pos:        position{line: 1002, col: 55, offset: 35022},
						val:        "##",
						ignoreCase: false,
						want:       "\"##\"",
					},
					&litMatcher{
						pos:        position{line: 1002, col: 62, offset: 35029},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&litMatcher{
						pos:        position{line: 1002, col: 68, offset: 35035},
						val:        "~",
						ignoreCase: false,
						want:       "\"~\"",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedText",
			pos:  position{line: 1004, col: 1, offset: 35042},
			expr: &actionExpr{
				pos: position{line: 1004, col: 26, offset: 35067},
				run: (*parser).callonConstrainedQuotedText1,
				expr: &labeledExpr{
					pos:   position{line: 1004, col: 26, offset: 35067},
					label: "text",
					expr: &choiceExpr{
						pos: position{line: 1004, col: 32, offset: 35073},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1004, col: 32, offset: 35073},
								name: "SingleQuoteBoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 1005, col: 15, offset: 35109},
								name: "SingleQuoteItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 1006, col: 15, offset: 35146},
								name: "SingleQuoteMarkedText",
							},
							&ruleRefExpr{
								pos:  position{line: 1007, col: 15, offset: 35183},
								name: "SingleQuoteMonospaceText",
							},
							&ruleRefExpr{
								pos:  position{line: 1008, col: 15, offset: 35224},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1009, col: 15, offset: 35254},
								name: "SuperscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1010, col: 15, offset: 35286},
								name: "SubscriptOrSuperscriptPrefix",
							},
						},
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedText",
			pos:  position{line: 1014, col: 1, offset: 35444},
			expr: &choiceExpr{
				pos: position{line: 1014, col: 28, offset: 35471},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1014, col: 28, offset: 35471},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1015, col: 15, offset: 35506},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1016, col: 15, offset: 35543},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1017, col: 15, offset: 35580},
						name: "DoubleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "EscapedQuotedText",
			pos:  position{line: 1019, col: 1, offset: 35608},
			expr: &choiceExpr{
				pos: position{line: 1019, col: 22, offset: 35629},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1019, col: 22, offset: 35629},
						name: "EscapedBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1020, col: 15, offset: 35661},
						name: "EscapedItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1021, col: 15, offset: 35694},
						name: "EscapedMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1022, col: 15, offset: 35727},
						name: "EscapedMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1023, col: 15, offset: 35764},
						name: "EscapedSubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1024, col: 15, offset: 35801},
						name: "EscapedSuperscriptText",
					},
				},
			},
		},
		{
			name: "SubscriptOrSuperscriptPrefix",
			pos:  position{line: 1026, col: 1, offset: 35827},
			expr: &choiceExpr{
				pos: position{line: 1026, col: 33, offset: 35859},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1026, col: 33, offset: 35859},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&actionExpr{
						pos: position{line: 1026, col: 39, offset: 35865},
						run: (*parser).callonSubscriptOrSuperscriptPrefix3,
						expr: &litMatcher{
							pos:        position{line: 1026, col: 39, offset: 35865},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "OneOrMoreBackslashes",
			pos:  position{line: 1030, col: 1, offset: 36002},
			expr: &actionExpr{
				pos: position{line: 1030, col: 25, offset: 36026},
				run: (*parser).callonOneOrMoreBackslashes1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1030, col: 25, offset: 36026},
					expr: &litMatcher{
						pos:        position{line: 1030, col: 25, offset: 36026},
						val:        "\\",
						ignoreCase: false,
						want:       "\"\\\\\"",
					},
				},
			},
		},
		{
			name: "TwoOrMoreBackslashes",
			pos:  position{line: 1034, col: 1, offset: 36071},
			expr: &actionExpr{
				pos: position{line: 1034, col: 25, offset: 36095},
				run: (*parser).callonTwoOrMoreBackslashes1,
				expr: &seqExpr{
					pos: position{line: 1034, col: 25, offset: 36095},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1034, col: 25, offset: 36095},
							val:        "\\\\",
							ignoreCase: false,
							want:       "\"\\\\\\\\\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1034, col: 30, offset: 36100},
							expr: &litMatcher{
								pos:        position{line: 1034, col: 30, offset: 36100},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
					},
				},
			},
		},
		{
			name: "BoldText",
			pos:  position{line: 1042, col: 1, offset: 36205},
			expr: &choiceExpr{
				pos: position{line: 1042, col: 13, offset: 36217},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1042, col: 13, offset: 36217},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1042, col: 35, offset: 36239},
						name: "SingleQuoteBoldText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldText",
			pos:  position{line: 1044, col: 1, offset: 36308},
			expr: &actionExpr{
				pos: position{line: 1044, col: 24, offset: 36331},
				run: (*parser).callonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 1044, col: 24, offset: 36331},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1044, col: 24, offset: 36331},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1044, col: 30, offset: 36337},
								expr: &ruleRefExpr{
									pos:  position{line: 1044, col: 31, offset: 36338},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1044, col: 49, offset: 36356},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
						&labeledExpr{
							pos:   position{line: 1044, col: 54, offset: 36361},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1044, col: 64, offset: 36371},
								name: "DoubleQuoteBoldTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1044, col: 93, offset: 36400},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElements",
			pos:  position{line: 1048, col: 1, offset: 36491},
			expr: &seqExpr{
				pos: position{line: 1048, col: 32, offset: 36522},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1048, col: 32, offset: 36522},
						name: "DoubleQuoteBoldTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1048, col: 59, offset: 36549},
						expr: &seqExpr{
							pos: position{line: 1048, col: 60, offset: 36550},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1048, col: 60, offset: 36550},
									expr: &litMatcher{
										pos:        position{line: 1048, col: 62, offset: 36552},
										val:        "**",
										ignoreCase: false,
										want:       "\"**\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1048, col: 69, offset: 36559},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1048, col: 69, offset: 36559},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1048, col: 77, offset: 36567},
											name: "DoubleQuoteBoldTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElement",
			pos:  position{line: 1050, col: 1, offset: 36634},
			expr: &choiceExpr{
				pos: position{line: 1050, col: 31, offset: 36664},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1050, col: 31, offset: 36664},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1051, col: 11, offset: 36680},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1051, col: 11, offset: 36680},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1051, col: 19, offset: 36688},
								expr: &ruleRefExpr{
									pos:  position{line: 1051, col: 20, offset: 36689},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1052, col: 11, offset: 36708},
						name: "SingleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1053, col: 11, offset: 36740},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1054, col: 11, offset: 36764},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1055, col: 11, offset: 36786},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1056, col: 11, offset: 36808},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1057, col: 11, offset: 36833},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1058, col: 11, offset: 36858},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1059, col: 11, offset: 36885},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1060, col: 11, offset: 36907},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1061, col: 11, offset: 36930},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1062, col: 11, offset: 36946},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1063, col: 11, offset: 36975},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1064, col: 11, offset: 37008},
						name: "DoubleQuoteBoldTextStringElement",
					},
					&ruleRefExpr{
						pos:  position{line: 1065, col: 11, offset: 37052},
						name: "DoubleQuoteBoldTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextStringElement",
			pos:  position{line: 1068, col: 1, offset: 37094},
			expr: &actionExpr{
				pos: position{line: 1068, col: 37, offset: 37130},
				run: (*parser).callonDoubleQuoteBoldTextStringElement1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1068, col: 37, offset: 37130},
					expr: &seqExpr{
						pos: position{line: 1068, col: 38, offset: 37131},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1068, col: 38, offset: 37131},
								expr: &litMatcher{
									pos:        position{line: 1068, col: 39, offset: 37132},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
							},
							&charClassMatcher{
								pos:        position{line: 1068, col: 44, offset: 37137},
								val:        "[^\\r\\n ^~{}]",
								chars:      []rune{'\r', '\n', ' ', '^', '~', '{', '}'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 1072, col: 1, offset: 37212},
			expr: &choiceExpr{
				pos: position{line: 1073, col: 5, offset: 37258},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1073, col: 5, offset: 37258},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1074, col: 7, offset: 37356},
						run: (*parser).callonDoubleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1074, col: 7, offset: 37356},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1074, col: 7, offset: 37356},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1074, col: 12, offset: 37361},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldText",
			pos:  position{line: 1078, col: 1, offset: 37528},
			expr: &choiceExpr{
				pos: position{line: 1078, col: 24, offset: 37551},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1078, col: 24, offset: 37551},
						run: (*parser).callonSingleQuoteBoldText2,
						expr: &seqExpr{
							pos: position{line: 1078, col: 24, offset: 37551},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1078, col: 24, offset: 37551},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1078, col: 30, offset: 37557},
										expr: &ruleRefExpr{
											pos:  position{line: 1078, col: 31, offset: 37558},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1078, col: 51, offset: 37578},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1078, col: 51, offset: 37578},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 1078, col: 55, offset: 37582},
											expr: &litMatcher{
												pos:        position{line: 1078, col: 56, offset: 37583},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1078, col: 61, offset: 37588},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1078, col: 71, offset: 37598},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1078, col: 100, offset: 37627},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&andExpr{
									pos: position{line: 1078, col: 104, offset: 37631},
									expr: &notExpr{
										pos: position{line: 1078, col: 106, offset: 37633},
										expr: &ruleRefExpr{
											pos:  position{line: 1078, col: 107, offset: 37634},
											name: "Alphanum",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1080, col: 5, offset: 37830},
						run: (*parser).callonSingleQuoteBoldText17,
						expr: &seqExpr{
							pos: position{line: 1080, col: 5, offset: 37830},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1080, col: 5, offset: 37830},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1080, col: 11, offset: 37836},
										expr: &ruleRefExpr{
											pos:  position{line: 1080, col: 12, offset: 37837},
											name: "QuotedTextAttrs",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1080, col: 30, offset: 37855},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 1080, col: 34, offset: 37859},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1080, col: 44, offset: 37869},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1080, col: 44, offset: 37869},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1080, col: 48, offset: 37873},
												name: "SingleQuoteBoldTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1080, col: 77, offset: 37902},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElements",
			pos:  position{line: 1084, col: 1, offset: 38112},
			expr: &seqExpr{
				pos: position{line: 1084, col: 32, offset: 38143},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1084, col: 32, offset: 38143},
						expr: &ruleRefExpr{
							pos:  position{line: 1084, col: 33, offset: 38144},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1084, col: 39, offset: 38150},
						expr: &ruleRefExpr{
							pos:  position{line: 1084, col: 39, offset: 38150},
							name: "SingleQuoteBoldTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElement",
			pos:  position{line: 1086, col: 1, offset: 38181},
			expr: &choiceExpr{
				pos: position{line: 1086, col: 31, offset: 38211},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1086, col: 31, offset: 38211},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1087, col: 11, offset: 38227},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1087, col: 11, offset: 38227},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1087, col: 19, offset: 38235},
								expr: &ruleRefExpr{
									pos:  position{line: 1087, col: 20, offset: 38236},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1088, col: 11, offset: 38255},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1089, col: 11, offset: 38286},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1090, col: 11, offset: 38310},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1090, col: 11, offset: 38310},
								expr: &ruleRefExpr{
									pos:  position{line: 1090, col: 11, offset: 38310},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1090, col: 18, offset: 38317},
								expr: &seqExpr{
									pos: position{line: 1090, col: 19, offset: 38318},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1090, col: 19, offset: 38318},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 1090, col: 23, offset: 38322},
											expr: &litMatcher{
												pos:        position{line: 1090, col: 24, offset: 38323},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1091, col: 11, offset: 38340},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1092, col: 11, offset: 38362},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1093, col: 11, offset: 38384},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1094, col: 11, offset: 38409},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1095, col: 11, offset: 38434},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1096, col: 11, offset: 38461},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1097, col: 11, offset: 38483},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1098, col: 11, offset: 38507},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1099, col: 11, offset: 38525},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1100, col: 11, offset: 38554},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1101, col: 11, offset: 38587},
						name: "SingleQuoteBoldTextStringElement",
					},
					&ruleRefExpr{
						pos:  position{line: 1102, col: 11, offset: 38631},
						name: "SingleQuoteBoldTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextStringElement",
			pos:  position{line: 1104, col: 1, offset: 38671},
			expr: &actionExpr{
				pos: position{line: 1104, col: 37, offset: 38707},
				run: (*parser).callonSingleQuoteBoldTextStringElement1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1104, col: 37, offset: 38707},
					expr: &charClassMatcher{
						pos:        position{line: 1104, col: 37, offset: 38707},
						val:        "[^\\r\\n{} *^~]",
						chars:      []rune{'\r', '\n', '{', '}', ' ', '*', '^', '~'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 1108, col: 1, offset: 38937},
			expr: &choiceExpr{
				pos: position{line: 1109, col: 5, offset: 38983},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1109, col: 5, offset: 38983},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1110, col: 7, offset: 39081},
						run: (*parser).callonSingleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1110, col: 7, offset: 39081},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1110, col: 7, offset: 39081},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1110, col: 11, offset: 39085},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedBoldText",
			pos:  position{line: 1114, col: 1, offset: 39252},
			expr: &choiceExpr{
				pos: position{line: 1115, col: 5, offset: 39277},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1115, col: 5, offset: 39277},
						run: (*parser).callonEscapedBoldText2,
						expr: &seqExpr{
							pos: position{line: 1115, col: 5, offset: 39277},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1115, col: 5, offset: 39277},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1115, col: 18, offset: 39290},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1115, col: 40, offset: 39312},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1115, col: 45, offset: 39317},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1115, col: 55, offset: 39327},
										name: "DoubleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1115, col: 84, offset: 39356},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1117, col: 9, offset: 39515},
						run: (*parser).callonEscapedBoldText10,
						expr: &seqExpr{
							pos: position{line: 1117, col: 9, offset: 39515},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1117, col: 9, offset: 39515},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1117, col: 22, offset: 39528},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1117, col: 44, offset: 39550},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1117, col: 49, offset: 39555},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1117, col: 59, offset: 39565},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1117, col: 88, offset: 39594},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1120, col: 9, offset: 39797},
						run: (*parser).callonEscapedBoldText18,
						expr: &seqExpr{
							pos: position{line: 1120, col: 9, offset: 39797},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1120, col: 9, offset: 39797},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1120, col: 22, offset: 39810},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1120, col: 44, offset: 39832},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 1120, col: 48, offset: 39836},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1120, col: 58, offset: 39846},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1120, col: 87, offset: 39875},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ItalicText",
			pos:  position{line: 1128, col: 1, offset: 40091},
			expr: &choiceExpr{
				pos: position{line: 1128, col: 15, offset: 40105},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1128, col: 15, offset: 40105},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1128, col: 39, offset: 40129},
						name: "SingleQuoteItalicText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicText",
			pos:  position{line: 1130, col: 1, offset: 40154},
			expr: &actionExpr{
				pos: position{line: 1130, col: 26, offset: 40179},
				run: (*parser).callonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 1130, col: 26, offset: 40179},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1130, col: 26, offset: 40179},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1130, col: 32, offset: 40185},
								expr: &ruleRefExpr{
									pos:  position{line: 1130, col: 33, offset: 40186},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1130, col: 51, offset: 40204},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
						&labeledExpr{
							pos:   position{line: 1130, col: 56, offset: 40209},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1130, col: 66, offset: 40219},
								name: "DoubleQuoteItalicTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1130, col: 97, offset: 40250},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElements",
			pos:  position{line: 1134, col: 1, offset: 40388},
			expr: &seqExpr{
				pos: position{line: 1134, col: 34, offset: 40421},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1134, col: 34, offset: 40421},
						name: "DoubleQuoteItalicTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1134, col: 63, offset: 40450},
						expr: &seqExpr{
							pos: position{line: 1134, col: 64, offset: 40451},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1134, col: 64, offset: 40451},
									expr: &litMatcher{
										pos:        position{line: 1134, col: 66, offset: 40453},
										val:        "__",
										ignoreCase: false,
										want:       "\"__\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1134, col: 73, offset: 40460},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1134, col: 73, offset: 40460},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1134, col: 81, offset: 40468},
											name: "DoubleQuoteItalicTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElement",
			pos:  position{line: 1136, col: 1, offset: 40537},
			expr: &choiceExpr{
				pos: position{line: 1136, col: 33, offset: 40569},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1136, col: 33, offset: 40569},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1137, col: 11, offset: 40585},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1137, col: 11, offset: 40585},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1137, col: 19, offset: 40593},
								expr: &ruleRefExpr{
									pos:  position{line: 1137, col: 20, offset: 40594},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1138, col: 11, offset: 40613},
						name: "SingleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1139, col: 11, offset: 40647},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1140, col: 11, offset: 40671},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1141, col: 11, offset: 40691},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1142, col: 11, offset: 40713},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1143, col: 11, offset: 40738},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1144, col: 11, offset: 40763},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1145, col: 11, offset: 40790},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1146, col: 11, offset: 40812},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1147, col: 11, offset: 40836},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1148, col: 11, offset: 40853},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1149, col: 11, offset: 40882},
						name: "DoubleQuoteItalicTextStringElement",
					},
					&ruleRefExpr{
						pos:  position{line: 1150, col: 11, offset: 40928},
						name: "DoubleQuoteItalicTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextStringElement",
			pos:  position{line: 1152, col: 1, offset: 40970},
			expr: &actionExpr{
				pos: position{line: 1152, col: 39, offset: 41008},
				run: (*parser).callonDoubleQuoteItalicTextStringElement1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1152, col: 39, offset: 41008},
					expr: &seqExpr{
						pos: position{line: 1152, col: 40, offset: 41009},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1152, col: 40, offset: 41009},
								expr: &litMatcher{
									pos:        position{line: 1152, col: 41, offset: 41010},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
							},
							&charClassMatcher{
								pos:        position{line: 1152, col: 46, offset: 41015},
								val:        "[^\\r\\n ^~{}]",
								chars:      []rune{'\r', '\n', ' ', '^', '~', '{', '}'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1156, col: 1, offset: 41090},
			expr: &choiceExpr{
				pos: position{line: 1157, col: 5, offset: 41138},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1157, col: 5, offset: 41138},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1158, col: 7, offset: 41238},
						run: (*parser).callonDoubleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1158, col: 7, offset: 41238},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1158, col: 7, offset: 41238},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1158, col: 12, offset: 41243},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicText",
			pos:  position{line: 1162, col: 1, offset: 41412},
			expr: &choiceExpr{
				pos: position{line: 1162, col: 26, offset: 41437},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1162, col: 26, offset: 41437},
						run: (*parser).callonSingleQuoteItalicText2,
						expr: &seqExpr{
							pos: position{line: 1162, col: 26, offset: 41437},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1162, col: 26, offset: 41437},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1162, col: 32, offset: 41443},
										expr: &ruleRefExpr{
											pos:  position{line: 1162, col: 33, offset: 41444},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1162, col: 52, offset: 41463},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1162, col: 52, offset: 41463},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1162, col: 56, offset: 41467},
											expr: &litMatcher{
												pos:        position{line: 1162, col: 57, offset: 41468},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1162, col: 62, offset: 41473},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1162, col: 72, offset: 41483},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1162, col: 103, offset: 41514},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1164, col: 5, offset: 41706},
						run: (*parser).callonSingleQuoteItalicText14,
						expr: &seqExpr{
							pos: position{line: 1164, col: 5, offset: 41706},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1164, col: 5, offset: 41706},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1164, col: 11, offset: 41712},
										expr: &ruleRefExpr{
											pos:  position{line: 1164, col: 12, offset: 41713},
											name: "QuotedTextAttrs",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1164, col: 30, offset: 41731},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1164, col: 34, offset: 41735},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1164, col: 44, offset: 41745},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1164, col: 44, offset: 41745},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1164, col: 48, offset: 41749},
												name: "SingleQuoteItalicTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1164, col: 79, offset: 41780},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElements",
			pos:  position{line: 1168, col: 1, offset: 41994},
			expr: &seqExpr{
				pos: position{line: 1168, col: 34, offset: 42027},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1168, col: 34, offset: 42027},
						expr: &ruleRefExpr{
							pos:  position{line: 1168, col: 35, offset: 42028},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1168, col: 41, offset: 42034},
						expr: &ruleRefExpr{
							pos:  position{line: 1168, col: 41, offset: 42034},
							name: "SingleQuoteItalicTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElement",
			pos:  position{line: 1170, col: 1, offset: 42067},
			expr: &choiceExpr{
				pos: position{line: 1170, col: 33, offset: 42099},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1170, col: 33, offset: 42099},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1171, col: 11, offset: 42115},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1171, col: 11, offset: 42115},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1171, col: 19, offset: 42123},
								expr: &ruleRefExpr{
									pos:  position{line: 1171, col: 20, offset: 42124},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1172, col: 11, offset: 42143},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1173, col: 11, offset: 42176},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1174, col: 11, offset: 42200},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1174, col: 11, offset: 42200},
								expr: &ruleRefExpr{
									pos:  position{line: 1174, col: 11, offset: 42200},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1174, col: 18, offset: 42207},
								expr: &seqExpr{
									pos: position{line: 1174, col: 19, offset: 42208},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1174, col: 19, offset: 42208},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1174, col: 23, offset: 42212},
											expr: &litMatcher{
												pos:        position{line: 1174, col: 24, offset: 42213},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1175, col: 11, offset: 42230},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1176, col: 11, offset: 42250},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1177, col: 11, offset: 42272},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1178, col: 11, offset: 42297},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1179, col: 11, offset: 42322},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1180, col: 11, offset: 42349},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1181, col: 11, offset: 42371},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1182, col: 11, offset: 42395},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1183, col: 11, offset: 42413},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1184, col: 11, offset: 42443},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1185, col: 11, offset: 42476},
						name: "SingleQuoteItalicTextStringElement",
					},
					&ruleRefExpr{
						pos:  position{line: 1186, col: 11, offset: 42522},
						name: "SingleQuoteItalicTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextStringElement",
			pos:  position{line: 1188, col: 1, offset: 42564},
			expr: &actionExpr{
				pos: position{line: 1188, col: 39, offset: 42602},
				run: (*parser).callonSingleQuoteItalicTextStringElement1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1188, col: 39, offset: 42602},
					expr: &charClassMatcher{
						pos:        position{line: 1188, col: 39, offset: 42602},
						val:        "[^\\r\\n{} _^~]",
						chars:      []rune{'\r', '\n', '{', '}', ' ', '_', '^', '~'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1192, col: 1, offset: 42832},
			expr: &choiceExpr{
				pos: position{line: 1193, col: 5, offset: 42880},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1193, col: 5, offset: 42880},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1194, col: 7, offset: 42980},
						run: (*parser).callonSingleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1194, col: 7, offset: 42980},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1194, col: 7, offset: 42980},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1194, col: 11, offset: 42984},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedItalicText",
			pos:  position{line: 1198, col: 1, offset: 43154},
			expr: &choiceExpr{
				pos: position{line: 1199, col: 5, offset: 43181},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1199, col: 5, offset: 43181},
						run: (*parser).callonEscapedItalicText2,
						expr: &seqExpr{
							pos: position{line: 1199, col: 5, offset: 43181},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1199, col: 5, offset: 43181},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1199, col: 18, offset: 43194},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1199, col: 40, offset: 43216},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1199, col: 45, offset: 43221},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1199, col: 55, offset: 43231},
										name: "DoubleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1199, col: 86, offset: 43262},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1201, col: 9, offset: 43421},
						run: (*parser).callonEscapedItalicText10,
						expr: &seqExpr{
							pos: position{line: 1201, col: 9, offset: 43421},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1201, col: 9, offset: 43421},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1201, col: 22, offset: 43434},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1201, col: 44, offset: 43456},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1201, col: 49, offset: 43461},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1201, col: 59, offset: 43471},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1201, col: 90, offset: 43502},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1204, col: 9, offset: 43705},
						run: (*parser).callonEscapedItalicText18,
						expr: &seqExpr{
							pos: position{line: 1204, col: 9, offset: 43705},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1204, col: 9, offset: 43705},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1204, col: 22, offset: 43718},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1204, col: 44, offset: 43740},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1204, col: 48, offset: 43744},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1204, col: 58, offset: 43754},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1204, col: 89, offset: 43785},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MonospaceText",
			pos:  position{line: 1211, col: 1, offset: 44002},
			expr: &choiceExpr{
				pos: position{line: 1211, col: 18, offset: 44019},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1211, col: 18, offset: 44019},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1211, col: 45, offset: 44046},
						name: "SingleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceText",
			pos:  position{line: 1213, col: 1, offset: 44074},
			expr: &actionExpr{
				pos: position{line: 1213, col: 29, offset: 44102},
				run: (*parser).callonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1213, col: 29, offset: 44102},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1213, col: 29, offset: 44102},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1213, col: 35, offset: 44108},
								expr: &ruleRefExpr{
									pos:  position{line: 1213, col: 36, offset: 44109},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1213, col: 54, offset: 44127},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
						&labeledExpr{
							pos:   position{line: 1213, col: 59, offset: 44132},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1213, col: 69, offset: 44142},
								name: "DoubleQuoteMonospaceTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1213, col: 103, offset: 44176},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElements",
			pos:  position{line: 1217, col: 1, offset: 44317},
			expr: &seqExpr{
				pos: position{line: 1217, col: 37, offset: 44353},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1217, col: 37, offset: 44353},
						name: "DoubleQuoteMonospaceTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1217, col: 69, offset: 44385},
						expr: &seqExpr{
							pos: position{line: 1217, col: 70, offset: 44386},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1217, col: 70, offset: 44386},
									expr: &litMatcher{
										pos:        position{line: 1217, col: 72, offset: 44388},
										val:        "``",
										ignoreCase: false,
										want:       "\"``\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1217, col: 79, offset: 44395},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1217, col: 79, offset: 44395},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1217, col: 87, offset: 44403},
											name: "DoubleQuoteMonospaceTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElement",
			pos:  position{line: 1219, col: 1, offset: 44474},
			expr: &choiceExpr{
				pos: position{line: 1219, col: 36, offset: 44509},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1219, col: 36, offset: 44509},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1220, col: 11, offset: 44525},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1220, col: 11, offset: 44525},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1220, col: 19, offset: 44533},
								expr: &ruleRefExpr{
									pos:  position{line: 1220, col: 20, offset: 44534},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1221, col: 11, offset: 44553},
						name: "SingleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1222, col: 11, offset: 44590},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1223, col: 11, offset: 44614},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1224, col: 11, offset: 44634},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1225, col: 11, offset: 44656},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1226, col: 11, offset: 44678},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1227, col: 11, offset: 44703},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1228, col: 11, offset: 44730},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1229, col: 11, offset: 44752},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1230, col: 11, offset: 44775},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1231, col: 11, offset: 44791},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1232, col: 11, offset: 44821},
						name: "DoubleQuoteMonospaceTextStringElement",
					},
					&ruleRefExpr{
						pos:  position{line: 1233, col: 11, offset: 44870},
						name: "DoubleQuoteMonospaceTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextStringElement",
			pos:  position{line: 1235, col: 1, offset: 44915},
			expr: &actionExpr{
				pos: position{line: 1235, col: 42, offset: 44956},
				run: (*parser).callonDoubleQuoteMonospaceTextStringElement1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1235, col: 42, offset: 44956},
					expr: &seqExpr{
						pos: position{line: 1235, col: 43, offset: 44957},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1235, col: 43, offset: 44957},
								expr: &litMatcher{
									pos:        position{line: 1235, col: 44, offset: 44958},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
							},
							&charClassMatcher{
								pos:        position{line: 1235, col: 49, offset: 44963},
								val:        "[^\\r\\n ^~{}]",
								chars:      []rune{'\r', '\n', ' ', '^', '~', '{', '}'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1239, col: 1, offset: 45038},
			expr: &choiceExpr{
				pos: position{line: 1240, col: 5, offset: 45089},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1240, col: 5, offset: 45089},
						val:        "[^\\r\\n`]",
						chars:      []rune{'\r', '\n', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1241, col: 7, offset: 45192},
						run: (*parser).callonDoubleQuoteMonospaceTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1241, col: 7, offset: 45192},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1241, col: 7, offset: 45192},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1241, col: 12, offset: 45197},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceText",
			pos:  position{line: 1245, col: 1, offset: 45369},
			expr: &choiceExpr{
				pos: position{line: 1245, col: 29, offset: 45397},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1245, col: 29, offset: 45397},
						run: (*parser).callonSingleQuoteMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1245, col: 29, offset: 45397},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1245, col: 29, offset: 45397},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1245, col: 35, offset: 45403},
										expr: &ruleRefExpr{
											pos:  position{line: 1245, col: 36, offset: 45404},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1245, col: 55, offset: 45423},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1245, col: 55, offset: 45423},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1245, col: 59, offset: 45427},
											expr: &litMatcher{
												pos:        position{line: 1245, col: 60, offset: 45428},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1245, col: 65, offset: 45433},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1245, col: 75, offset: 45443},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1245, col: 109, offset: 45477},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1247, col: 5, offset: 45672},
						run: (*parser).callonSingleQuoteMonospaceText14,
						expr: &seqExpr{
							pos: position{line: 1247, col: 5, offset: 45672},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1247, col: 5, offset: 45672},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1247, col: 11, offset: 45678},
										expr: &ruleRefExpr{
											pos:  position{line: 1247, col: 12, offset: 45679},
											name: "QuotedTextAttrs",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1247, col: 30, offset: 45697},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1247, col: 34, offset: 45701},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1247, col: 44, offset: 45711},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1247, col: 44, offset: 45711},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1247, col: 48, offset: 45715},
												name: "SingleQuoteMonospaceTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1247, col: 82, offset: 45749},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElements",
			pos:  position{line: 1251, col: 1, offset: 45969},
			expr: &seqExpr{
				pos: position{line: 1251, col: 37, offset: 46005},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1251, col: 37, offset: 46005},
						expr: &ruleRefExpr{
							pos:  position{line: 1251, col: 38, offset: 46006},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1251, col: 44, offset: 46012},
						expr: &ruleRefExpr{
							pos:  position{line: 1251, col: 44, offset: 46012},
							name: "SingleQuoteMonospaceTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElement",
			pos:  position{line: 1253, col: 1, offset: 46048},
			expr: &choiceExpr{
				pos: position{line: 1253, col: 37, offset: 46084},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1253, col: 37, offset: 46084},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1254, col: 11, offset: 46100},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1254, col: 11, offset: 46100},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1254, col: 19, offset: 46108},
								expr: &ruleRefExpr{
									pos:  position{line: 1254, col: 20, offset: 46109},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1255, col: 11, offset: 46128},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1256, col: 11, offset: 46165},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1257, col: 11, offset: 46189},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1257, col: 11, offset: 46189},
								expr: &ruleRefExpr{
									pos:  position{line: 1257, col: 11, offset: 46189},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1257, col: 18, offset: 46196},
								expr: &seqExpr{
									pos: position{line: 1257, col: 19, offset: 46197},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1257, col: 19, offset: 46197},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1257, col: 23, offset: 46201},
											expr: &litMatcher{
												pos:        position{line: 1257, col: 24, offset: 46202},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1258, col: 11, offset: 46331},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1259, col: 11, offset: 46351},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1260, col: 11, offset: 46373},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1261, col: 11, offset: 46395},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1262, col: 11, offset: 46420},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1263, col: 11, offset: 46447},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1264, col: 11, offset: 46469},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1265, col: 11, offset: 46493},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1266, col: 11, offset: 46510},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1267, col: 11, offset: 46540},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1268, col: 11, offset: 46573},
						name: "SingleQuoteMonospaceTextStringElement",
					},
					&ruleRefExpr{
						pos:  position{line: 1269, col: 11, offset: 46622},
						name: "SingleQuoteMonospaceTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextStringElement",
			pos:  position{line: 1271, col: 1, offset: 46667},
			expr: &actionExpr{
				pos: position{line: 1271, col: 42, offset: 46708},
				run: (*parser).callonSingleQuoteMonospaceTextStringElement1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1271, col: 42, offset: 46708},
					expr: &charClassMatcher{
						pos:        position{line: 1271, col: 42, offset: 46708},
						val:        "[^\\r\\n {}`^~]",
						chars:      []rune{'\r', '\n', ' ', '{', '}', '`', '^', '~'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1275, col: 1, offset: 46930},
			expr: &choiceExpr{
				pos: position{line: 1276, col: 5, offset: 46981},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1276, col: 5, offset: 46981},
						val:        "[^\\r\\n`]",
						chars:      []rune{'\r', '\n', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1277, col: 7, offset: 47084},
						run: (*parser).callonSingleQuoteMonospaceTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1277, col: 7, offset: 47084},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1277, col: 7, offset: 47084},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1277, col: 11, offset: 47088},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMonospaceText",
			pos:  position{line: 1281, col: 1, offset: 47261},
			expr: &choiceExpr{
				pos: position{line: 1282, col: 5, offset: 47291},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1282, col: 5, offset: 47291},
						run: (*parser).callonEscapedMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1282, col: 5, offset: 47291},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1282, col: 5, offset: 47291},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1282, col: 18, offset: 47304},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1282, col: 40, offset: 47326},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1282, col: 45, offset: 47331},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1282, col: 55, offset: 47341},
										name: "DoubleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1282, col: 89, offset: 47375},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1284, col: 9, offset: 47534},
						run: (*parser).callonEscapedMonospaceText10,
						expr: &seqExpr{
							pos: position{line: 1284, col: 9, offset: 47534},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1284, col: 9, offset: 47534},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1284, col: 22, offset: 47547},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1284, col: 44, offset: 47569},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1284, col: 49, offset: 47574},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1284, col: 59, offset: 47584},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1284, col: 93, offset: 47618},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1287, col: 9, offset: 47821},
						run: (*parser).callonEscapedMonospaceText18,
						expr: &seqExpr{
							pos: position{line: 1287, col: 9, offset: 47821},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1287, col: 9, offset: 47821},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1287, col: 22, offset: 47834},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1287, col: 44, offset: 47856},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1287, col: 48, offset: 47860},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1287, col: 58, offset: 47870},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1287, col: 92, offset: 47904},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkedText",
			pos:  position{line: 1295, col: 1, offset: 48120},
			expr: &choiceExpr{
				pos: position{line: 1295, col: 15, offset: 48134},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1295, col: 15, offset: 48134},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1295, col: 39, offset: 48158},
						name: "SingleQuoteMarkedText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedText",
			pos:  position{line: 1297, col: 1, offset: 48183},
			expr: &actionExpr{
				pos: position{line: 1297, col: 26, offset: 48208},
				run: (*parser).callonDoubleQuoteMarkedText1,
				expr: &seqExpr{
					pos: position{line: 1297, col: 26, offset: 48208},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1297, col: 26, offset: 48208},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1297, col: 32, offset: 48214},
								expr: &ruleRefExpr{
									pos:  position{line: 1297, col: 33, offset: 48215},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1297, col: 51, offset: 48233},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
						&labeledExpr{
							pos:   position{line: 1297, col: 56, offset: 48238},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1297, col: 66, offset: 48248},
								name: "DoubleQuoteMarkedTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1297, col: 97, offset: 48279},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElements",
			pos:  position{line: 1301, col: 1, offset: 48417},
			expr: &seqExpr{
				pos: position{line: 1301, col: 34, offset: 48450},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1301, col: 34, offset: 48450},
						name: "DoubleQuoteMarkedTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1301, col: 63, offset: 48479},
						expr: &seqExpr{
							pos: position{line: 1301, col: 64, offset: 48480},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1301, col: 64, offset: 48480},
									expr: &litMatcher{
										pos:        position{line: 1301, col: 66, offset: 48482},
										val:        "##",
										ignoreCase: false,
										want:       "\"##\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1301, col: 73, offset: 48489},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1301, col: 73, offset: 48489},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1301, col: 81, offset: 48497},
											name: "DoubleQuoteMarkedTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElement",
			pos:  position{line: 1303, col: 1, offset: 48566},
			expr: &choiceExpr{
				pos: position{line: 1303, col: 33, offset: 48598},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1303, col: 33, offset: 48598},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 1304, col: 11, offset: 48614},
						name: "SingleQuoteMarkedText",
					},
					&seqExpr{
						pos: position{line: 1305, col: 11, offset: 48647},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1305, col: 11, offset: 48647},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1305, col: 19, offset: 48655},
								expr: &ruleRefExpr{
									pos:  position{line: 1305, col: 20, offset: 48656},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1306, col: 11, offset: 48675},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1307, col: 11, offset: 48699},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1308, col: 11, offset: 48719},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1309, col: 11, offset: 48741},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1310, col: 11, offset: 48766},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1311, col: 11, offset: 48791},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1312, col: 11, offset: 48818},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1313, col: 11, offset: 48840},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1314, col: 11, offset: 48863},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1315, col: 11, offset: 48879},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1316, col: 11, offset: 48908},
						name: "DoubleQuoteMarkedTextStringElement",
					},
					&ruleRefExpr{
						pos:  position{line: 1317, col: 11, offset: 48954},
						name: "DoubleQuoteMarkedTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextStringElement",
			pos:  position{line: 1319, col: 1, offset: 48996},
			expr: &actionExpr{
				pos: position{line: 1319, col: 39, offset: 49034},
				run: (*parser).callonDoubleQuoteMarkedTextStringElement1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1319, col: 39, offset: 49034},
					expr: &seqExpr{
						pos: position{line: 1319, col: 40, offset: 49035},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1319, col: 40, offset: 49035},
								expr: &litMatcher{
									pos:        position{line: 1319, col: 41, offset: 49036},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
							},
							&charClassMatcher{
								pos:        position{line: 1319, col: 46, offset: 49041},
								val:        "[^\\r\\n ^~{}]",
								chars:      []rune{'\r', '\n', ' ', '^', '~', '{', '}'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextFallbackCharacter",
			pos:  position{line: 1323, col: 1, offset: 49115},
			expr: &choiceExpr{
				pos: position{line: 1324, col: 5, offset: 49162},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1324, col: 5, offset: 49162},
						val:        "[^\\r\\n#]",
						chars:      []rune{'\r', '\n', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1325, col: 7, offset: 49262},
						run: (*parser).callonDoubleQuoteMarkedTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1325, col: 7, offset: 49262},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1325, col: 7, offset: 49262},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1325, col: 12, offset: 49267},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedText",
			pos:  position{line: 1329, col: 1, offset: 49436},
			expr: &choiceExpr{
				pos: position{line: 1329, col: 26, offset: 49461},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1329, col: 26, offset: 49461},
						run: (*parser).callonSingleQuoteMarkedText2,
						expr: &seqExpr{
							pos: position{line: 1329, col: 26, offset: 49461},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1329, col: 26, offset: 49461},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1329, col: 32, offset: 49467},
										expr: &ruleRefExpr{
											pos:  position{line: 1329, col: 33, offset: 49468},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1329, col: 52, offset: 49487},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1329, col: 52, offset: 49487},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
										&notExpr{
											pos: position{line: 1329, col: 56, offset: 49491},
											expr: &litMatcher{
												pos:        position{line: 1329, col: 57, offset: 49492},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1329, col: 62, offset: 49497},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1329, col: 72, offset: 49507},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1329, col: 103, offset: 49538},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1331, col: 5, offset: 49730},
						run: (*parser).callonSingleQuoteMarkedText14,
						expr: &seqExpr{
							pos: position{line: 1331, col: 5, offset: 49730},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1331, col: 5, offset: 49730},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1331, col: 11, offset: 49736},
										expr: &ruleRefExpr{
											pos:  position{line: 1331, col: 12, offset: 49737},
											name: "QuotedTextAttrs",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1331, col: 30, offset: 49755},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1331, col: 34, offset: 49759},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1331, col: 44, offset: 49769},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1331, col: 44, offset: 49769},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1331, col: 48, offset: 49773},
												name: "SingleQuoteMarkedTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1331, col: 79, offset: 49804},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElements",
			pos:  position{line: 1335, col: 1, offset: 50017},
			expr: &seqExpr{
				pos: position{line: 1335, col: 34, offset: 50050},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1335, col: 34, offset: 50050},
						expr: &ruleRefExpr{
							pos:  position{line: 1335, col: 35, offset: 50051},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1335, col: 41, offset: 50057},
						expr: &ruleRefExpr{
							pos:  position{line: 1335, col: 41, offset: 50057},
							name: "SingleQuoteMarkedTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElement",
			pos:  position{line: 1337, col: 1, offset: 50090},
			expr: &choiceExpr{
				pos: position{line: 1337, col: 33, offset: 50122},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1337, col: 33, offset: 50122},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 1338, col: 11, offset: 50138},
						name: "DoubleQuoteMarkedText",
					},
					&seqExpr{
						pos: position{line: 1339, col: 11, offset: 50171},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1339, col: 11, offset: 50171},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1339, col: 19, offset: 50179},
								expr: &ruleRefExpr{
									pos:  position{line: 1339, col: 20, offset: 50180},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1340, col: 11, offset: 50199},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1341, col: 11, offset: 50223},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1341, col: 11, offset: 50223},
								expr: &ruleRefExpr{
									pos:  position{line: 1341, col: 11, offset: 50223},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1341, col: 18, offset: 50230},
								expr: &seqExpr{
									pos: position{line: 1341, col: 19, offset: 50231},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1341, col: 19, offset: 50231},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
										&notExpr{
											pos: position{line: 1341, col: 23, offset: 50235},
											expr: &litMatcher{
												pos:        position{line: 1341, col: 24, offset: 50236},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1342, col: 11, offset: 50253},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1343, col: 11, offset: 50273},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1344, col: 11, offset: 50295},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1345, col: 11, offset: 50320},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1346, col: 11, offset: 50345},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1347, col: 11, offset: 50372},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1348, col: 11, offset: 50394},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1349, col: 11, offset: 50417},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1350, col: 11, offset: 50433},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1351, col: 11, offset: 50462},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1352, col: 11, offset: 50495},
						name: "SingleQuoteMarkedTextStringElement",
					},
					&ruleRefExpr{
						pos:  position{line: 1353, col: 11, offset: 50541},
						name: "SingleQuoteMarkedTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextStringElement",
			pos:  position{line: 1355, col: 1, offset: 50583},
			expr: &actionExpr{
				pos: position{line: 1355, col: 39, offset: 50621},
				run: (*parser).callonSingleQuoteMarkedTextStringElement1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1355, col: 39, offset: 50621},
					expr: &charClassMatcher{
						pos:        position{line: 1355, col: 39, offset: 50621},
						val:        "[^\\r\\n{} #^~]",
						chars:      []rune{'\r', '\n', '{', '}', ' ', '#', '^', '~'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextFallbackCharacter",
			pos:  position{line: 1359, col: 1, offset: 50851},
			expr: &choiceExpr{
				pos: position{line: 1360, col: 5, offset: 50898},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1360, col: 5, offset: 50898},
						val:        "[^\\r\\n#]",
						chars:      []rune{'\r', '\n', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1361, col: 7, offset: 50996},
						run: (*parser).callonSingleQuoteMarkedTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1361, col: 7, offset: 50996},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1361, col: 7, offset: 50996},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1361, col: 11, offset: 51000},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMarkedText",
			pos:  position{line: 1365, col: 1, offset: 51167},
			expr: &choiceExpr{
				pos: position{line: 1366, col: 5, offset: 51193},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1366, col: 5, offset: 51193},
						run: (*parser).callonEscapedMarkedText2,
						expr: &seqExpr{
							pos: position{line: 1366, col: 5, offset: 51193},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1366, col: 5, offset: 51193},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1366, col: 18, offset: 51206},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1366, col: 40, offset: 51228},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 1366, col: 45, offset: 51233},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1366, col: 55, offset: 51243},
										name: "DoubleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1366, col: 86, offset: 51274},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1368, col: 9, offset: 51433},
						run: (*parser).callonEscapedMarkedText10,
						expr: &seqExpr{
							pos: position{line: 1368, col: 9, offset: 51433},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1368, col: 9, offset: 51433},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1368, col: 22, offset: 51446},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1368, col: 44, offset: 51468},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 1368, col: 49, offset: 51473},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1368, col: 59, offset: 51483},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1368, col: 90, offset: 51514},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1371, col: 9, offset: 51717},
						run: (*parser).callonEscapedMarkedText18,
						expr: &seqExpr{
							pos: position{line: 1371, col: 9, offset: 51717},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1371, col: 9, offset: 51717},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1371, col: 22, offset: 51730},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1371, col: 44, offset: 51752},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1371, col: 48, offset: 51756},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1371, col: 58, offset: 51766},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1371, col: 89, offset: 51797},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptText",
			pos:  position{line: 1376, col: 1, offset: 51952},
			expr: &actionExpr{
				pos: position{line: 1376, col: 18, offset: 51969},
				run: (*parser).callonSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1376, col: 18, offset: 51969},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1376, col: 18, offset: 51969},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1376, col: 24, offset: 51975},
								expr: &ruleRefExpr{
									pos:  position{line: 1376, col: 25, offset: 51976},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1376, col: 43, offset: 51994},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1376, col: 47, offset: 51998},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1376, col: 56, offset: 52007},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1376, col: 78, offset: 52029},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SubscriptTextElement",
			pos:  position{line: 1380, col: 1, offset: 52129},
			expr: &choiceExpr{
				pos: position{line: 1380, col: 25, offset: 52153},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1380, col: 25, offset: 52153},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1380, col: 38, offset: 52166},
						name: "NonSubscriptText",
					},
				},
			},
		},
		{
			name: "NonSubscriptText",
			pos:  position{line: 1382, col: 1, offset: 52187},
			expr: &actionExpr{
				pos: position{line: 1382, col: 21, offset: 52207},
				run: (*parser).callonNonSubscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1382, col: 21, offset: 52207},
					expr: &charClassMatcher{
						pos:        position{line: 1382, col: 21, offset: 52207},
						val:        "[^\\r\\n ~]",
						chars:      []rune{'\r', '\n', ' ', '~'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSubscriptText",
			pos:  position{line: 1386, col: 1, offset: 52288},
			expr: &actionExpr{
				pos: position{line: 1386, col: 25, offset: 52312},
				run: (*parser).callonEscapedSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1386, col: 25, offset: 52312},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1386, col: 25, offset: 52312},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1386, col: 38, offset: 52325},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1386, col: 60, offset: 52347},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1386, col: 64, offset: 52351},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1386, col: 73, offset: 52360},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1386, col: 95, offset: 52382},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptText",
			pos:  position{line: 1390, col: 1, offset: 52515},
			expr: &actionExpr{
				pos: position{line: 1390, col: 20, offset: 52534},
				run: (*parser).callonSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1390, col: 20, offset: 52534},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1390, col: 20, offset: 52534},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1390, col: 26, offset: 52540},
								expr: &ruleRefExpr{
									pos:  position{line: 1390, col: 27, offset: 52541},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1390, col: 45, offset: 52559},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1390, col: 49, offset: 52563},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1390, col: 58, offset: 52572},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1390, col: 82, offset: 52596},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptTextElement",
			pos:  position{line: 1394, col: 1, offset: 52698},
			expr: &choiceExpr{
				pos: position{line: 1394, col: 27, offset: 52724},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1394, col: 27, offset: 52724},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1394, col: 40, offset: 52737},
						name: "NonSuperscriptText",
					},
				},
			},
		},
		{
			name: "NonSuperscriptText",
			pos:  position{line: 1396, col: 1, offset: 52760},
			expr: &actionExpr{
				pos: position{line: 1396, col: 23, offset: 52782},
				run: (*parser).callonNonSuperscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1396, col: 23, offset: 52782},
					expr: &charClassMatcher{
						pos:        position{line: 1396, col: 23, offset: 52782},
						val:        "[^\\r\\n ^]",
						chars:      []rune{'\r', '\n', ' ', '^'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSuperscriptText",
			pos:  position{line: 1400, col: 1, offset: 52863},
			expr: &actionExpr{
				pos: position{line: 1400, col: 27, offset: 52889},
				run: (*parser).callonEscapedSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1400, col: 27, offset: 52889},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1400, col: 27, offset: 52889},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1400, col: 40, offset: 52902},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1400, col: 62, offset: 52924},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1400, col: 66, offset: 52928},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1400, col: 75, offset: 52937},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1400, col: 99, offset: 52961},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "InlinePassthrough",
			pos:  position{line: 1407, col: 1, offset: 53210},
			expr: &choiceExpr{
				pos: position{line: 1407, col: 22, offset: 53231},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1407, col: 22, offset: 53231},
						name: "TriplePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1407, col: 46, offset: 53255},
						name: "SinglePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1407, col: 70, offset: 53279},
						name: "PassthroughMacro",
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughPrefix",
			pos:  position{line: 1409, col: 1, offset: 53299},
			expr: &litMatcher{
				pos:        position{line: 1409, col: 32, offset: 53330},
				val:        "+",
				ignoreCase: false,
				want:       "\"+\"",
			},
		},
		{
			name: "SinglePlusPassthrough",
			pos:  position{line: 1411, col: 1, offset: 53337},
			expr: &actionExpr{
				pos: position{line: 1411, col: 26, offset: 53362},
				run: (*parser).callonSinglePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1411, col: 26, offset: 53362},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1411, col: 26, offset: 53362},
							name: "SinglePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1411, col: 54, offset: 53390},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1411, col: 63, offset: 53399},
								name: "SinglePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1411, col: 93, offset: 53429},
							name: "SinglePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1411, col: 121, offset: 53457},
							expr: &ruleRefExpr{
								pos:  position{line: 1411, col: 122, offset: 53458},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughContent",
			pos:  position{line: 1415, col: 1, offset: 53567},
			expr: &choiceExpr{
				pos: position{line: 1415, col: 33, offset: 53599},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1415, col: 34, offset: 53600},
						run: (*parser).callonSinglePlusPassthroughContent2,
						expr: &seqExpr{
							pos: position{line: 1415, col: 34, offset: 53600},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1415, col: 35, offset: 53601},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1415, col: 35, offset: 53601},
											expr: &ruleRefExpr{
												pos:  position{line: 1415, col: 36, offset: 53602},
												name: "SinglePlusPassthroughPrefix",
											},
										},
										&notExpr{
											pos: position{line: 1415, col: 64, offset: 53630},
											expr: &ruleRefExpr{
												pos:  position{line: 1415, col: 65, offset: 53631},
												name: "Space",
											},
										},
										&notExpr{
											pos: position{line: 1415, col: 71, offset: 53637},
											expr: &ruleRefExpr{
												pos:  position{line: 1415, col: 72, offset: 53638},
												name: "Newline",
											},
										},
										&anyMatcher{
											line: 1415, col: 80, offset: 53646,
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1415, col: 83, offset: 53649},
									expr: &seqExpr{
										pos: position{line: 1415, col: 84, offset: 53650},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1415, col: 84, offset: 53650},
												expr: &seqExpr{
													pos: position{line: 1415, col: 86, offset: 53652},
													exprs: []interface{}{
														&oneOrMoreExpr{
															pos: position{line: 1415, col: 86, offset: 53652},
															expr: &ruleRefExpr{
																pos:  position{line: 1415, col: 86, offset: 53652},
																name: "Space",
															},
														},
														&ruleRefExpr{
															pos:  position{line: 1415, col: 93, offset: 53659},
															name: "SinglePlusPassthroughPrefix",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 1415, col: 122, offset: 53688},
												expr: &ruleRefExpr{
													pos:  position{line: 1415, col: 123, offset: 53689},
													name: "SinglePlusPassthroughPrefix",
												},
											},
											&notExpr{
												pos: position{line: 1415, col: 151, offset: 53717},
												expr: &ruleRefExpr{
													pos:  position{line: 1415, col: 152, offset: 53718},
													name: "Newline",
												},
											},
											&anyMatcher{
												line: 1415, col: 160, offset: 53726,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1417, col: 7, offset: 53870},
						run: (*parser).callonSinglePlusPassthroughContent24,
						expr: &seqExpr{
							pos: position{line: 1417, col: 8, offset: 53871},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1417, col: 8, offset: 53871},
									expr: &ruleRefExpr{
										pos:  position{line: 1417, col: 9, offset: 53872},
										name: "Space",
									},
								},
								&notExpr{
									pos: position{line: 1417, col: 15, offset: 53878},
									expr: &ruleRefExpr{
										pos:  position{line: 1417, col: 16, offset: 53879},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 1417, col: 24, offset: 53887},
									expr: &ruleRefExpr{
										pos:  position{line: 1417, col: 25, offset: 53888},
										name: "SinglePlusPassthroughPrefix",
									},
								},
								&anyMatcher{
									line: 1417, col: 53, offset: 53916,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughPrefix",
			pos:  position{line: 1421, col: 1, offset: 54002},
			expr: &litMatcher{
				pos:        position{line: 1421, col: 32, offset: 54033},
				val:        "+++",
				ignoreCase: false,
				want:       "\"+++\"",
			},
		},
		{
			name: "TriplePlusPassthrough",
			pos:  position{line: 1423, col: 1, offset: 54042},
			expr: &actionExpr{
				pos: position{line: 1423, col: 26, offset: 54067},
				run: (*parser).callonTriplePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1423, col: 26, offset: 54067},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1423, col: 26, offset: 54067},
							name: "TriplePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1423, col: 54, offset: 54095},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1423, col: 63, offset: 54104},
								name: "TriplePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1423, col: 93, offset: 54134},
							name: "TriplePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1423, col: 121, offset: 54162},
							expr: &ruleRefExpr{
								pos:  position{line: 1423, col: 122, offset: 54163},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughContent",
			pos:  position{line: 1427, col: 1, offset: 54272},
			expr: &choiceExpr{
				pos: position{line: 1427, col: 33, offset: 54304},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1427, col: 34, offset: 54305},
						run: (*parser).callonTriplePlusPassthroughContent2,
						expr: &zeroOrMoreExpr{
							pos: position{line: 1427, col: 34, offset: 54305},
							expr: &seqExpr{
								pos: position{line: 1427, col: 35, offset: 54306},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1427, col: 35, offset: 54306},
										expr: &ruleRefExpr{
											pos:  position{line: 1427, col: 36, offset: 54307},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1427, col: 64, offset: 54335,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1429, col: 7, offset: 54502},
						run: (*parser).callonTriplePlusPassthroughContent8,
						expr: &zeroOrOneExpr{
							pos: position{line: 1429, col: 7, offset: 54502},
							expr: &seqExpr{
								pos: position{line: 1429, col: 8, offset: 54503},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1429, col: 8, offset: 54503},
										expr: &ruleRefExpr{
											pos:  position{line: 1429, col: 9, offset: 54504},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 1429, col: 15, offset: 54510},
										expr: &ruleRefExpr{
											pos:  position{line: 1429, col: 16, offset: 54511},
											name: "Newline",
										},
									},
									&notExpr{
										pos: position{line: 1429, col: 24, offset: 54519},
										expr: &ruleRefExpr{
											pos:  position{line: 1429, col: 25, offset: 54520},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1429, col: 53, offset: 54548,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacro",
			pos:  position{line: 1433, col: 1, offset: 54635},
			expr: &choiceExpr{
				pos: position{line: 1433, col: 21, offset: 54655},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1433, col: 21, offset: 54655},
						run: (*parser).callonPassthroughMacro2,
						expr: &seqExpr{
							pos: position{line: 1433, col: 21, offset: 54655},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1433, col: 21, offset: 54655},
									val:        "pass:[",
									ignoreCase: false,
									want:       "\"pass:[\"",
								},
								&labeledExpr{
									pos:   position{line: 1433, col: 30, offset: 54664},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1433, col: 38, offset: 54672},
										expr: &ruleRefExpr{
											pos:  position{line: 1433, col: 39, offset: 54673},
											name: "PassthroughMacroCharacter",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1433, col: 67, offset: 54701},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1435, col: 5, offset: 54799},
						run: (*parser).callonPassthroughMacro9,
						expr: &seqExpr{
							pos: position{line: 1435, col: 5, offset: 54799},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1435, col: 5, offset: 54799},
									val:        "pass:q[",
									ignoreCase: false,
									want:       "\"pass:q[\"",
								},
								&labeledExpr{
									pos:   position{line: 1435, col: 15, offset: 54809},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1435, col: 23, offset: 54817},
										expr: &choiceExpr{
											pos: position{line: 1435, col: 24, offset: 54818},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1435, col: 24, offset: 54818},
													name: "QuotedText",
												},
												&ruleRefExpr{
													pos:  position{line: 1435, col: 37, offset: 54831},
													name: "PassthroughMacroCharacter",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1435, col: 65, offset: 54859},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacroCharacter",
			pos:  position{line: 1439, col: 1, offset: 54959},
			expr: &actionExpr{
				pos: position{line: 1439, col: 30, offset: 54988},
				run: (*parser).callonPassthroughMacroCharacter1,
				expr: &charClassMatcher{
					pos:        position{line: 1439, col: 30, offset: 54988},
					val:        "[^\\]]",
					chars:      []rune{']'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "CrossReference",
			pos:  position{line: 1446, col: 1, offset: 55168},
			expr: &choiceExpr{
				pos: position{line: 1446, col: 19, offset: 55186},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1446, col: 19, offset: 55186},
						name: "InternalCrossReference",
					},
					&ruleRefExpr{
						pos:  position{line: 1446, col: 44, offset: 55211},
						name: "ExternalCrossReference",
					},
				},
			},
		},
		{
			name: "InternalCrossReference",
			pos:  position{line: 1448, col: 1, offset: 55238},
			expr: &choiceExpr{
				pos: position{line: 1448, col: 27, offset: 55264},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1448, col: 27, offset: 55264},
						run: (*parser).callonInternalCrossReference2,
						expr: &seqExpr{
							pos: position{line: 1448, col: 27, offset: 55264},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1448, col: 27, offset: 55264},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 1448, col: 32, offset: 55269},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1448, col: 36, offset: 55273},
										name: "ID",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1448, col: 40, offset: 55277},
									expr: &ruleRefExpr{
										pos:  position{line: 1448, col: 40, offset: 55277},
										name: "Space",
									},
								},
								&litMatcher{
									pos:        position{line: 1448, col: 47, offset: 55284},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&labeledExpr{
									pos:   position{line: 1448, col: 51, offset: 55288},
									label: "label",
									expr: &ruleRefExpr{
										pos:  position{line: 1448, col: 58, offset: 55295},
										name: "CrossReferenceLabel",
									},
								},
								&litMatcher{
									pos:        position{line: 1448, col: 79, offset: 55316},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1450, col: 5, offset: 55401},
						run: (*parser).callonInternalCrossReference13,
						expr: &seqExpr{
							pos: position{line: 1450, col: 5, offset: 55401},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1450, col: 5, offset: 55401},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 1450, col: 10, offset: 55406},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1450, col: 14, offset: 55410},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 1450, col: 18, offset: 55414},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalCrossReference",
			pos:  position{line: 1454, col: 1, offset: 55490},
			expr: &actionExpr{
				pos: position{line: 1454, col: 27, offset: 55516},
				run: (*parser).callonExternalCrossReference1,
				expr: &seqExpr{
					pos: position{line: 1454, col: 27, offset: 55516},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1454, col: 27, offset: 55516},
							val:        "xref:",
							ignoreCase: false,
							want:       "\"xref:\"",
						},
						&labeledExpr{
							pos:   position{line: 1454, col: 35, offset: 55524},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1454, col: 40, offset: 55529},
								name: "FileLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 1454, col: 54, offset: 55543},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1454, col: 72, offset: 55561},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReferenceLabel",
			pos:  position{line: 1458, col: 1, offset: 55688},
			expr: &ruleRefExpr{
				pos:  position{line: 1458, col: 24, offset: 55711},
				name: "ElementTitleContent",
			},
		},
		{
			name: "Link",
			pos:  position{line: 1463, col: 1, offset: 55838},
			expr: &choiceExpr{
				pos: position{line: 1463, col: 9, offset: 55846},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1463, col: 9, offset: 55846},
						name: "RelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1463, col: 24, offset: 55861},
						name: "ExternalLink",
					},
				},
			},
		},
		{
			name: "RelativeLink",
			pos:  position{line: 1466, col: 1, offset: 55945},
			expr: &actionExpr{
				pos: position{line: 1466, col: 17, offset: 55961},
				run: (*parser).callonRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1466, col: 17, offset: 55961},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1466, col: 17, offset: 55961},
							val:        "link:",
							ignoreCase: false,
							want:       "\"link:\"",
						},
						&labeledExpr{
							pos:   position{line: 1466, col: 25, offset: 55969},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1466, col: 30, offset: 55974},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1466, col: 40, offset: 55984},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1466, col: 58, offset: 56002},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalLink",
			pos:  position{line: 1470, col: 1, offset: 56117},
			expr: &actionExpr{
				pos: position{line: 1470, col: 17, offset: 56133},
				run: (*parser).callonExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1470, col: 17, offset: 56133},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1470, col: 17, offset: 56133},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1470, col: 22, offset: 56138},
								name: "LocationWithScheme",
							},
						},
						&labeledExpr{
							pos:   position{line: 1470, col: 42, offset: 56158},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1470, col: 59, offset: 56175},
								expr: &ruleRefExpr{
									pos:  position{line: 1470, col: 60, offset: 56176},
									name: "LinkAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LinkAttributes",
			pos:  position{line: 1474, col: 1, offset: 56273},
			expr: &actionExpr{
				pos: position{line: 1474, col: 19, offset: 56291},
				run: (*parser).callonLinkAttributes1,
				expr: &seqExpr{
					pos: position{line: 1474, col: 19, offset: 56291},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1474, col: 19, offset: 56291},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1474, col: 23, offset: 56295},
							label: "firstAttr",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1474, col: 33, offset: 56305},
								expr: &ruleRefExpr{
									pos:  position{line: 1474, col: 34, offset: 56306},
									name: "FirstLinkAttributeElement",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1475, col: 5, offset: 56339},
							expr: &ruleRefExpr{
								pos:  position{line: 1475, col: 5, offset: 56339},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1475, col: 12, offset: 56346},
							label: "otherattrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1475, col: 23, offset: 56357},
								expr: &ruleRefExpr{
									pos:  position{line: 1475, col: 24, offset: 56358},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1475, col: 43, offset: 56377},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FirstLinkAttributeElement",
			pos:  position{line: 1479, col: 1, offset: 56498},
			expr: &actionExpr{
				pos: position{line: 1479, col: 30, offset: 56527},
				run: (*parser).callonFirstLinkAttributeElement1,
				expr: &labeledExpr{
					pos:   position{line: 1479, col: 30, offset: 56527},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1481, col: 5, offset: 56580},
						alternatives: []interface{}{
							&actionExpr{
								pos: position{line: 1481, col: 6, offset: 56581},
								run: (*parser).callonFirstLinkAttributeElement4,
								expr: &seqExpr{
									pos: position{line: 1481, col: 6, offset: 56581},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1481, col: 6, offset: 56581},
											val:        "\"",
											ignoreCase: false,
											want:       "\"\\\"\"",
										},
										&labeledExpr{
											pos:   position{line: 1481, col: 11, offset: 56586},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 1481, col: 20, offset: 56595},
												expr: &choiceExpr{
													pos: position{line: 1481, col: 21, offset: 56596},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1481, col: 21, offset: 56596},
															name: "QuotedString",
														},
														&ruleRefExpr{
															pos:  position{line: 1481, col: 36, offset: 56611},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1481, col: 49, offset: 56624},
															name: "QuotedAttributeChar",
														},
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 1481, col: 71, offset: 56646},
											val:        "\"",
											ignoreCase: false,
											want:       "\"\\\"\"",
										},
										&andExpr{
											pos: position{line: 1481, col: 76, offset: 56651},
											expr: &notExpr{
												pos: position{line: 1481, col: 78, offset: 56653},
												expr: &litMatcher{
													pos:        position{line: 1481, col: 79, offset: 56654},
													val:        "=",
													ignoreCase: false,
													want:       "\"=\"",
												},
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 1481, col: 84, offset: 56659},
											expr: &litMatcher{
												pos:        position{line: 1481, col: 84, offset: 56659},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
										},
									},
								},
							},
							&actionExpr{
								pos: position{line: 1485, col: 6, offset: 56790},
								run: (*parser).callonFirstLinkAttributeElement19,
								expr: &seqExpr{
									pos: position{line: 1485, col: 6, offset: 56790},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 1485, col: 6, offset: 56790},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 1485, col: 15, offset: 56799},
												expr: &choiceExpr{
													pos: position{line: 1485, col: 16, offset: 56800},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1485, col: 16, offset: 56800},
															name: "QuotedString",
														},
														&ruleRefExpr{
															pos:  position{line: 1485, col: 31, offset: 56815},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1485, col: 44, offset: 56828},
															name: "UnquotedAttributeChar",
														},
													},
												},
											},
										},
										&andExpr{
											pos: position{line: 1485, col: 68, offset: 56852},
											expr: &notExpr{
												pos: position{line: 1485, col: 70, offset: 56854},
												expr: &litMatcher{
													pos:        position{line: 1485, col: 71, offset: 56855},
													val:        "=",
													ignoreCase: false,
													want:       "\"=\"",
												},
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 1485, col: 76, offset: 56860},
											expr: &litMatcher{
												pos:        position{line: 1485, col: 76, offset: 56860},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeChar",
			pos:  position{line: 1491, col: 1, offset: 56980},
			expr: &actionExpr{
				pos: position{line: 1491, col: 18, offset: 56997},
				run: (*parser).callonAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1491, col: 18, offset: 56997},
					val:        "[^\\r\\n\"=\\],]",
					chars:      []rune{'\r', '\n', '"', '=', ']', ','},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "QuotedAttributeChar",
			pos:  position{line: 1495, col: 1, offset: 57087},
			expr: &actionExpr{
				pos: position{line: 1495, col: 24, offset: 57110},
				run: (*parser).callonQuotedAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1495, col: 24, offset: 57110},
					val:        "[^\\r\\n\"=\\]]",
					chars:      []rune{'\r', '\n', '"', '=', ']'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "UnquotedAttributeChar",
			pos:  position{line: 1499, col: 1, offset: 57207},
			expr: &actionExpr{
				pos: position{line: 1499, col: 26, offset: 57232},
				run: (*parser).callonUnquotedAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1499, col: 26, offset: 57232},
					val:        "[^\\r\\n\"=\\],]",
					chars:      []rune{'\r', '\n', '"', '=', ']', ','},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "InlineLinks",
			pos:  position{line: 1504, col: 1, offset: 57394},
			expr: &actionExpr{
				pos: position{line: 1505, col: 5, offset: 57415},
				run: (*parser).callonInlineLinks1,
				expr: &seqExpr{
					pos: position{line: 1505, col: 5, offset: 57415},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1505, col: 5, offset: 57415},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1505, col: 14, offset: 57424},
								expr: &choiceExpr{
									pos: position{line: 1505, col: 15, offset: 57425},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1505, col: 15, offset: 57425},
											name: "Word",
										},
										&oneOrMoreExpr{
											pos: position{line: 1506, col: 11, offset: 57441},
											expr: &ruleRefExpr{
												pos:  position{line: 1506, col: 11, offset: 57441},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1507, col: 11, offset: 57460},
											name: "ResolvedLink",
										},
										&ruleRefExpr{
											pos:  position{line: 1508, col: 11, offset: 57485},
											name: "Parenthesis",
										},
										&ruleRefExpr{
											pos:  position{line: 1509, col: 11, offset: 57508},
											name: "AnyChar",
										},
										&ruleRefExpr{
											pos:  position{line: 1510, col: 11, offset: 57527},
											name: "Newline",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1510, col: 21, offset: 57537},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "ResolvedLink",
			pos:  position{line: 1514, col: 1, offset: 57611},
			expr: &choiceExpr{
				pos: position{line: 1514, col: 17, offset: 57627},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1514, col: 17, offset: 57627},
						name: "ResolvedRelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1514, col: 40, offset: 57650},
						name: "ResolvedExternalLink",
					},
				},
			},
		},
		{
			name: "ResolvedRelativeLink",
			pos:  position{line: 1517, col: 1, offset: 57781},
			expr: &actionExpr{
				pos: position{line: 1517, col: 25, offset: 57805},
				run: (*parser).callonResolvedRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1517, col: 25, offset: 57805},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1517, col: 25, offset: 57805},
							val:        "link:",
							ignoreCase: false,
							want:       "\"link:\"",
						},
						&labeledExpr{
							pos:   position{line: 1517, col: 33, offset: 57813},
							label: "url",
							expr: &choiceExpr{
								pos: position{line: 1517, col: 38, offset: 57818},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1517, col: 38, offset: 57818},
										name: "ResolvedLocation",
									},
									&ruleRefExpr{
										pos:  position{line: 1517, col: 57, offset: 57837},
										name: "ResolvedFileLocation",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1517, col: 79, offset: 57859},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1517, col: 97, offset: 57877},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ResolvedExternalLink",
			pos:  position{line: 1521, col: 1, offset: 57992},
			expr: &actionExpr{
				pos: position{line: 1521, col: 25, offset: 58016},
				run: (*parser).callonResolvedExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1521, col: 25, offset: 58016},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1521, col: 25, offset: 58016},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1521, col: 30, offset: 58021},
								name: "ResolvedLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 1521, col: 48, offset: 58039},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1521, col: 65, offset: 58056},
								expr: &ruleRefExpr{
									pos:  position{line: 1521, col: 66, offset: 58057},
									name: "LinkAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageBlock",
			pos:  position{line: 1528, col: 1, offset: 58259},
			expr: &actionExpr{
				pos: position{line: 1528, col: 15, offset: 58273},
				run: (*parser).callonImageBlock1,
				expr: &seqExpr{
					pos: position{line: 1528, col: 15, offset: 58273},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1528, col: 15, offset: 58273},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1528, col: 26, offset: 58284},
								expr: &ruleRefExpr{
									pos:  position{line: 1528, col: 27, offset: 58285},
									name: "Attributes",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1528, col: 40, offset: 58298},
							val:        "image::",
							ignoreCase: false,
							want:       "\"image::\"",
						},
						&labeledExpr{
							pos:   position{line: 1528, col: 50, offset: 58308},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1528, col: 56, offset: 58314},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1528, col: 66, offset: 58324},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1528, col: 84, offset: 58342},
								name: "ImageAttributes",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1528, col: 101, offset: 58359},
							expr: &ruleRefExpr{
								pos:  position{line: 1528, col: 101, offset: 58359},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1528, col: 108, offset: 58366},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "InlineImage",
			pos:  position{line: 1532, col: 1, offset: 58482},
			expr: &actionExpr{
				pos: position{line: 1532, col: 16, offset: 58497},
				run: (*parser).callonInlineImage1,
				expr: &seqExpr{
					pos: position{line: 1532, col: 16, offset: 58497},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1532, col: 16, offset: 58497},
							val:        "image:",
							ignoreCase: false,
							want:       "\"image:\"",
						},
						&notExpr{
							pos: position{line: 1532, col: 25, offset: 58506},
							expr: &litMatcher{
								pos:        position{line: 1532, col: 26, offset: 58507},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1532, col: 30, offset: 58511},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1532, col: 36, offset: 58517},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1532, col: 46, offset: 58527},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1532, col: 64, offset: 58545},
								name: "ImageAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ImageAttributes",
			pos:  position{line: 1536, col: 1, offset: 58663},
			expr: &actionExpr{
				pos: position{line: 1536, col: 20, offset: 58682},
				run: (*parser).callonImageAttributes1,
				expr: &seqExpr{
					pos: position{line: 1536, col: 20, offset: 58682},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1536, col: 20, offset: 58682},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1536, col: 24, offset: 58686},
							label: "alt",
							expr: &zeroOrOneExpr{
								pos: position{line: 1536, col: 28, offset: 58690},
								expr: &ruleRefExpr{
									pos:  position{line: 1536, col: 29, offset: 58691},
									name: "StandaloneAttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1536, col: 56, offset: 58718},
							expr: &litMatcher{
								pos:        position{line: 1536, col: 56, offset: 58718},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1536, col: 61, offset: 58723},
							label: "width",
							expr: &zeroOrOneExpr{
								pos: position{line: 1536, col: 67, offset: 58729},
								expr: &ruleRefExpr{
									pos:  position{line: 1536, col: 68, offset: 58730},
									name: "StandaloneAttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1536, col: 95, offset: 58757},
							expr: &litMatcher{
								pos:        position{line: 1536, col: 95, offset: 58757},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1536, col: 100, offset: 58762},
							label: "height",
							expr: &zeroOrOneExpr{
								pos: position{line: 1536, col: 107, offset: 58769},
								expr: &ruleRefExpr{
									pos:  position{line: 1536, col: 108, offset: 58770},
									name: "StandaloneAttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1536, col: 135, offset: 58797},
							expr: &litMatcher{
								pos:        position{line: 1536, col: 135, offset: 58797},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1536, col: 140, offset: 58802},
							expr: &ruleRefExpr{
								pos:  position{line: 1536, col: 140, offset: 58802},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1536, col: 147, offset: 58809},
							label: "otherattrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1536, col: 158, offset: 58820},
								expr: &ruleRefExpr{
									pos:  position{line: 1536, col: 159, offset: 58821},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1536, col: 178, offset: 58840},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "InlineIcon",
			pos:  position{line: 1543, col: 1, offset: 59132},
			expr: &actionExpr{
				pos: position{line: 1543, col: 15, offset: 59146},
				run: (*parser).callonInlineIcon1,
				expr: &seqExpr{
					pos: position{line: 1543, col: 15, offset: 59146},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1543, col: 15, offset: 59146},
							val:        "icon:",
							ignoreCase: false,
							want:       "\"icon:\"",
						},
						&labeledExpr{
							pos:   position{line: 1543, col: 23, offset: 59154},
							label: "iconClass",
							expr: &actionExpr{
								pos: position{line: 1543, col: 34, offset: 59165},
								run: (*parser).callonInlineIcon5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1543, col: 34, offset: 59165},
									expr: &charClassMatcher{
										pos:        position{line: 1543, col: 34, offset: 59165},
										val:        "[\\pL0-9_-]",
										chars:      []rune{'_', '-'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1543, col: 78, offset: 59209},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1543, col: 96, offset: 59227},
								name: "IconAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "IconAttributes",
			pos:  position{line: 1547, col: 1, offset: 59334},
			expr: &actionExpr{
				pos: position{line: 1547, col: 19, offset: 59352},
				run: (*parser).callonIconAttributes1,
				expr: &seqExpr{
					pos: position{line: 1547, col: 19, offset: 59352},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1547, col: 19, offset: 59352},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1547, col: 23, offset: 59356},
							label: "size",
							expr: &zeroOrOneExpr{
								pos: position{line: 1547, col: 28, offset: 59361},
								expr: &ruleRefExpr{
									pos:  position{line: 1547, col: 29, offset: 59362},
									name: "StandaloneAttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1547, col: 56, offset: 59389},
							expr: &litMatcher{
								pos:        position{line: 1547, col: 56, offset: 59389},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1547, col: 61, offset: 59394},
							expr: &ruleRefExpr{
								pos:  position{line: 1547, col: 61, offset: 59394},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1547, col: 68, offset: 59401},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1547, col: 75, offset: 59408},
								expr: &ruleRefExpr{
									pos:  position{line: 1547, col: 76, offset: 59409},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1547, col: 95, offset: 59428},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "InlineFootnote",
			pos:  position{line: 1554, col: 1, offset: 59706},
			expr: &choiceExpr{
				pos: position{line: 1554, col: 19, offset: 59724},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1554, col: 19, offset: 59724},
						run: (*parser).callonInlineFootnote2,
						expr: &seqExpr{
							pos: position{line: 1554, col: 19, offset: 59724},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1554, col: 19, offset: 59724},
									val:        "footnote:[",
									ignoreCase: false,
									want:       "\"footnote:[\"",
								},
								&labeledExpr{
									pos:   position{line: 1554, col: 32, offset: 59737},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1554, col: 41, offset: 59746},
										name: "FootnoteContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1554, col: 58, offset: 59763},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1556, col: 5, offset: 59833},
						run: (*parser).callonInlineFootnote8,
						expr: &seqExpr{
							pos: position{line: 1556, col: 5, offset: 59833},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1556, col: 5, offset: 59833},
									val:        "footnote:",
									ignoreCase: false,
									want:       "\"footnote:\"",
								},
								&labeledExpr{
									pos:   position{line: 1556, col: 17, offset: 59845},
									label: "ref",
									expr: &ruleRefExpr{
										pos:  position{line: 1556, col: 22, offset: 59850},
										name: "FootnoteRef",
									},
								},
								&litMatcher{
									pos:        position{line: 1556, col: 35, offset: 59863},
									val:        "[",
									ignoreCase: false,
									want:       "\"[\"",
								},
								&labeledExpr{
									pos:   position{line: 1556, col: 39, offset: 59867},
									label: "content",
									expr: &zeroOrOneExpr{
										pos: position{line: 1556, col: 47, offset: 59875},
										expr: &ruleRefExpr{
											pos:  position{line: 1556, col: 48, offset: 59876},
											name: "FootnoteContent",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1556, col: 66, offset: 59894},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FootnoteRef",
			pos:  position{line: 1560, col: 1, offset: 59959},
			expr: &ruleRefExpr{
				pos:  position{line: 1560, col: 16, offset: 59974},
				name: "Alphanums",
			},
		},
		{
			name: "FootnoteContent",
			pos:  position{line: 1562, col: 1, offset: 59987},
			expr: &actionExpr{
				pos: position{line: 1562, col: 20, offset: 60006},
				run: (*parser).callonFootnoteContent1,
				expr: &labeledExpr{
					pos:   position{line: 1562, col: 20, offset: 60006},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1562, col: 29, offset: 60015},
						expr: &seqExpr{
							pos: position{line: 1562, col: 30, offset: 60016},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1562, col: 30, offset: 60016},
									expr: &litMatcher{
										pos:        position{line: 1562, col: 31, offset: 60017},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1562, col: 35, offset: 60021},
									name: "InlineElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DelimitedBlock",
			pos:  position{line: 1569, col: 1, offset: 60352},
			expr: &actionExpr{
				pos: position{line: 1569, col: 19, offset: 60370},
				run: (*parser).callonDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 1569, col: 19, offset: 60370},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1569, col: 19, offset: 60370},
							expr: &ruleRefExpr{
								pos:  position{line: 1569, col: 20, offset: 60371},
								name: "Alphanum",
							},
						},
						&labeledExpr{
							pos:   position{line: 1570, col: 5, offset: 60460},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 1570, col: 12, offset: 60467},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1570, col: 12, offset: 60467},
										name: "FencedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1571, col: 11, offset: 60491},
										name: "ListingBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1572, col: 11, offset: 60516},
										name: "ExampleBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1573, col: 11, offset: 60541},
										name: "VerseBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1574, col: 11, offset: 60564},
										name: "QuoteBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1575, col: 11, offset: 60587},
										name: "SidebarBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1576, col: 11, offset: 60611},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 1577, col: 11, offset: 60640},
										name: "PassthroughBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1578, col: 11, offset: 60668},
										name: "Table",
									},
									&ruleRefExpr{
										pos:  position{line: 1579, col: 11, offset: 60685},
										name: "CommentBlock",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockDelimiter",
			pos:  position{line: 1583, col: 1, offset: 60730},
			expr: &choiceExpr{
				pos: position{line: 1583, col: 19, offset: 60748},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1583, col: 19, offset: 60748},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1583, col: 19, offset: 60748},
								expr: &ruleRefExpr{
									pos:  position{line: 1583, col: 21, offset: 60750},
									name: "Alphanum",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1583, col: 31, offset: 60760},
								name: "LiteralBlockDelimiter",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1584, col: 19, offset: 60832},
						name: "FencedBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1585, col: 19, offset: 60873},
						name: "ListingBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1586, col: 19, offset: 60915},
						name: "ExampleBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1587, col: 19, offset: 60957},
						name: "CommentBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1588, col: 19, offset: 60999},
						name: "QuoteBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1589, col: 19, offset: 61038},
						name: "SidebarBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1590, col: 19, offset: 61079},
						name: "PassthroughBlockDelimiter",
					},
				},
			},
		},
		{
			name: "VerbatimContent",
			pos:  position{line: 1592, col: 1, offset: 61108},
			expr: &choiceExpr{
				pos: position{line: 1592, col: 20, offset: 61127},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1592, col: 20, offset: 61127},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 1592, col: 36, offset: 61143},
						name: "VerbatimLine",
					},
				},
			},
		},
		{
			name: "VerbatimLine",
			pos:  position{line: 1594, col: 1, offset: 61159},
			expr: &actionExpr{
				pos: position{line: 1594, col: 17, offset: 61175},
				run: (*parser).callonVerbatimLine1,
				expr: &seqExpr{
					pos: position{line: 1594, col: 17, offset: 61175},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1594, col: 17, offset: 61175},
							expr: &ruleRefExpr{
								pos:  position{line: 1594, col: 18, offset: 61176},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1594, col: 22, offset: 61180},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1594, col: 31, offset: 61189},
								name: "VerbatimLineContent",
							},
						},
						&labeledExpr{
							pos:   position{line: 1594, col: 52, offset: 61210},
							label: "callouts",
							expr: &zeroOrOneExpr{
								pos: position{line: 1594, col: 61, offset: 61219},
								expr: &ruleRefExpr{
									pos:  position{line: 1594, col: 62, offset: 61220},
									name: "Callouts",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1594, col: 73, offset: 61231},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "VerbatimLineContent",
			pos:  position{line: 1598, col: 1, offset: 61305},
			expr: &actionExpr{
				pos: position{line: 1598, col: 24, offset: 61328},
				run: (*parser).callonVerbatimLineContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1598, col: 24, offset: 61328},
					expr: &seqExpr{
						pos: position{line: 1598, col: 25, offset: 61329},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1598, col: 25, offset: 61329},
								expr: &ruleRefExpr{
									pos:  position{line: 1598, col: 26, offset: 61330},
									name: "Callouts",
								},
							},
							&choiceExpr{
								pos: position{line: 1598, col: 36, offset: 61340},
								alternatives: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 1598, col: 36, offset: 61340},
										expr: &ruleRefExpr{
											pos:  position{line: 1598, col: 36, offset: 61340},
											name: "Space",
										},
									},
									&oneOrMoreExpr{
										pos: position{line: 1598, col: 45, offset: 61349},
										expr: &charClassMatcher{
											pos:        position{line: 1598, col: 45, offset: 61349},
											val:        "[^ \\r\\n]",
											chars:      []rune{' ', '\r', '\n'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Callouts",
			pos:  position{line: 1602, col: 1, offset: 61403},
			expr: &oneOrMoreExpr{
				pos: position{line: 1602, col: 13, offset: 61415},
				expr: &ruleRefExpr{
					pos:  position{line: 1602, col: 13, offset: 61415},
					name: "Callout",
				},
			},
		},
		{
			name: "Callout",
			pos:  position{line: 1604, col: 1, offset: 61427},
			expr: &actionExpr{
				pos: position{line: 1604, col: 12, offset: 61438},
				run: (*parser).callonCallout1,
				expr: &seqExpr{
					pos: position{line: 1604, col: 12, offset: 61438},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1604, col: 12, offset: 61438},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 1604, col: 16, offset: 61442},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1604, col: 21, offset: 61447},
								run: (*parser).callonCallout5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1604, col: 21, offset: 61447},
									expr: &charClassMatcher{
										pos:        position{line: 1604, col: 21, offset: 61447},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1604, col: 69, offset: 61495},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1604, col: 73, offset: 61499},
							expr: &ruleRefExpr{
								pos:  position{line: 1604, col: 73, offset: 61499},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 1604, col: 80, offset: 61506},
							expr: &choiceExpr{
								pos: position{line: 1604, col: 82, offset: 61508},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1604, col: 82, offset: 61508},
										name: "EOL",
									},
									&ruleRefExpr{
										pos:  position{line: 1604, col: 88, offset: 61514},
										name: "Callout",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CalloutListItem",
			pos:  position{line: 1608, col: 1, offset: 61571},
			expr: &actionExpr{
				pos: position{line: 1608, col: 20, offset: 61590},
				run: (*parser).callonCalloutListItem1,
				expr: &seqExpr{
					pos: position{line: 1608, col: 20, offset: 61590},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1608, col: 20, offset: 61590},
							label: "ref",
							expr: &ruleRefExpr{
								pos:  position{line: 1608, col: 25, offset: 61595},
								name: "CalloutListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 1608, col: 48, offset: 61618},
							label: "description",
							expr: &oneOrMoreExpr{
								pos: position{line: 1608, col: 61, offset: 61631},
								expr: &ruleRefExpr{
									pos:  position{line: 1608, col: 61, offset: 61631},
									name: "ListParagraph",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CalloutListItemPrefix",
			pos:  position{line: 1612, col: 1, offset: 61732},
			expr: &actionExpr{
				pos: position{line: 1612, col: 26, offset: 61757},
				run: (*parser).callonCalloutListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 1612, col: 26, offset: 61757},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1612, col: 26, offset: 61757},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 1612, col: 30, offset: 61761},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1612, col: 35, offset: 61766},
								run: (*parser).callonCalloutListItemPrefix5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1612, col: 35, offset: 61766},
									expr: &charClassMatcher{
										pos:        position{line: 1612, col: 35, offset: 61766},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1612, col: 83, offset: 61814},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 1612, col: 87, offset: 61818},
							expr: &ruleRefExpr{
								pos:  position{line: 1612, col: 87, offset: 61818},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "FencedBlockDelimiter",
			pos:  position{line: 1619, col: 1, offset: 62052},
			expr: &seqExpr{
				pos: position{line: 1619, col: 25, offset: 62076},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1619, col: 25, offset: 62076},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1619, col: 31, offset: 62082},
						expr: &ruleRefExpr{
							pos:  position{line: 1619, col: 31, offset: 62082},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1619, col: 38, offset: 62089},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "FencedBlockStartDelimiter",
			pos:  position{line: 1621, col: 1, offset: 62151},
			expr: &seqExpr{
				pos: position{line: 1621, col: 30, offset: 62180},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1621, col: 30, offset: 62180},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1621, col: 36, offset: 62186},
						expr: &ruleRefExpr{
							pos:  position{line: 1621, col: 36, offset: 62186},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1621, col: 43, offset: 62193},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "FencedBlockEndDelimiter",
			pos:  position{line: 1623, col: 1, offset: 62200},
			expr: &choiceExpr{
				pos: position{line: 1623, col: 28, offset: 62227},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1623, col: 29, offset: 62228},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1623, col: 29, offset: 62228},
								val:        "```",
								ignoreCase: false,
								want:       "\"```\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1623, col: 35, offset: 62234},
								expr: &ruleRefExpr{
									pos:  position{line: 1623, col: 35, offset: 62234},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1623, col: 42, offset: 62241},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1623, col: 49, offset: 62248},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "FencedBlock",
			pos:  position{line: 1625, col: 1, offset: 62255},
			expr: &actionExpr{
				pos: position{line: 1625, col: 16, offset: 62270},
				run: (*parser).callonFencedBlock1,
				expr: &seqExpr{
					pos: position{line: 1625, col: 16, offset: 62270},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1625, col: 16, offset: 62270},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1625, col: 27, offset: 62281},
								expr: &ruleRefExpr{
									pos:  position{line: 1625, col: 28, offset: 62282},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1625, col: 41, offset: 62295},
							name: "FencedBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1625, col: 67, offset: 62321},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1625, col: 76, offset: 62330},
								name: "FencedBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1625, col: 104, offset: 62358},
							name: "FencedBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "FencedBlockVerbatimContent",
			pos:  position{line: 1629, col: 1, offset: 62477},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1629, col: 31, offset: 62507},
				expr: &actionExpr{
					pos: position{line: 1629, col: 32, offset: 62508},
					run: (*parser).callonFencedBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1629, col: 32, offset: 62508},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1629, col: 32, offset: 62508},
								expr: &ruleRefExpr{
									pos:  position{line: 1629, col: 33, offset: 62509},
									name: "FencedBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1629, col: 57, offset: 62533},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1629, col: 66, offset: 62542},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListingBlockDelimiter",
			pos:  position{line: 1636, col: 1, offset: 62886},
			expr: &seqExpr{
				pos: position{line: 1636, col: 26, offset: 62911},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1636, col: 26, offset: 62911},
						val:        "----",
						ignoreCase: false,
						want:       "\"----\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1636, col: 33, offset: 62918},
						expr: &ruleRefExpr{
							pos:  position{line: 1636, col: 33, offset: 62918},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1636, col: 40, offset: 62925},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ListingBlockStartDelimiter",
			pos:  position{line: 1638, col: 1, offset: 62932},
			expr: &seqExpr{
				pos: position{line: 1638, col: 31, offset: 62962},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1638, col: 31, offset: 62962},
						val:        "----",
						ignoreCase: false,
						want:       "\"----\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1638, col: 38, offset: 62969},
						expr: &ruleRefExpr{
							pos:  position{line: 1638, col: 38, offset: 62969},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1638, col: 45, offset: 62976},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ListingBlockEndDelimiter",
			pos:  position{line: 1640, col: 1, offset: 62983},
			expr: &choiceExpr{
				pos: position{line: 1640, col: 29, offset: 63011},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1640, col: 30, offset: 63012},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1640, col: 30, offset: 63012},
								val:        "----",
								ignoreCase: false,
								want:       "\"----\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1640, col: 37, offset: 63019},
								expr: &ruleRefExpr{
									pos:  position{line: 1640, col: 37, offset: 63019},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1640, col: 44, offset: 63026},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1640, col: 51, offset: 63033},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "ListingBlock",
			pos:  position{line: 1642, col: 1, offset: 63040},
			expr: &actionExpr{
				pos: position{line: 1642, col: 17, offset: 63056},
				run: (*parser).callonListingBlock1,
				expr: &seqExpr{
					pos: position{line: 1642, col: 17, offset: 63056},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1642, col: 17, offset: 63056},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1642, col: 28, offset: 63067},
								expr: &ruleRefExpr{
									pos:  position{line: 1642, col: 29, offset: 63068},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1642, col: 42, offset: 63081},
							name: "ListingBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1642, col: 69, offset: 63108},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1642, col: 78, offset: 63117},
								name: "ListingBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1642, col: 107, offset: 63146},
							name: "ListingBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "ListingBlockVerbatimContent",
			pos:  position{line: 1646, col: 1, offset: 63267},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1646, col: 32, offset: 63298},
				expr: &actionExpr{
					pos: position{line: 1646, col: 33, offset: 63299},
					run: (*parser).callonListingBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1646, col: 33, offset: 63299},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1646, col: 33, offset: 63299},
								expr: &ruleRefExpr{
									pos:  position{line: 1646, col: 34, offset: 63300},
									name: "ListingBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1646, col: 59, offset: 63325},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1646, col: 68, offset: 63334},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockDelimiter",
			pos:  position{line: 1653, col: 1, offset: 63678},
			expr: &seqExpr{
				pos: position{line: 1653, col: 26, offset: 63703},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1653, col: 26, offset: 63703},
						val:        "====",
						ignoreCase: false,
						want:       "\"====\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1653, col: 33, offset: 63710},
						expr: &ruleRefExpr{
							pos:  position{line: 1653, col: 33, offset: 63710},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1653, col: 40, offset: 63717},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ExampleBlockStartDelimiter",
			pos:  position{line: 1655, col: 1, offset: 63724},
			expr: &seqExpr{
				pos: position{line: 1655, col: 31, offset: 63754},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1655, col: 31, offset: 63754},
						val:        "====",
						ignoreCase: false,
						want:       "\"====\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1655, col: 38, offset: 63761},
						expr: &ruleRefExpr{
							pos:  position{line: 1655, col: 38, offset: 63761},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1655, col: 45, offset: 63768},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ExampleBlockEndDelimiter",
			pos:  position{line: 1657, col: 1, offset: 63775},
			expr: &choiceExpr{
				pos: position{line: 1657, col: 29, offset: 63803},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1657, col: 30, offset: 63804},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1657, col: 30, offset: 63804},
								val:        "====",
								ignoreCase: false,
								want:       "\"====\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1657, col: 37, offset: 63811},
								expr: &ruleRefExpr{
									pos:  position{line: 1657, col: 37, offset: 63811},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1657, col: 44, offset: 63818},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1657, col: 51, offset: 63825},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "ExampleBlock",
			pos:  position{line: 1659, col: 1, offset: 63832},
			expr: &actionExpr{
				pos: position{line: 1659, col: 17, offset: 63848},
				run: (*parser).callonExampleBlock1,
				expr: &seqExpr{
					pos: position{line: 1659, col: 17, offset: 63848},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1659, col: 17, offset: 63848},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1659, col: 28, offset: 63859},
								expr: &ruleRefExpr{
									pos:  position{line: 1659, col: 29, offset: 63860},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1659, col: 42, offset: 63873},
							name: "ExampleBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1659, col: 69, offset: 63900},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1659, col: 78, offset: 63909},
								name: "ExampleBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1659, col: 107, offset: 63938},
							name: "ExampleBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockVerbatimContent",
			pos:  position{line: 1663, col: 1, offset: 64059},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1663, col: 32, offset: 64090},
				expr: &actionExpr{
					pos: position{line: 1663, col: 33, offset: 64091},
					run: (*parser).callonExampleBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1663, col: 33, offset: 64091},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1663, col: 33, offset: 64091},
								expr: &ruleRefExpr{
									pos:  position{line: 1663, col: 34, offset: 64092},
									name: "ExampleBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1663, col: 59, offset: 64117},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1663, col: 68, offset: 64126},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockDelimiter",
			pos:  position{line: 1670, col: 1, offset: 64468},
			expr: &seqExpr{
				pos: position{line: 1670, col: 24, offset: 64491},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1670, col: 24, offset: 64491},
						val:        "____",
						ignoreCase: false,
						want:       "\"____\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1670, col: 31, offset: 64498},
						expr: &ruleRefExpr{
							pos:  position{line: 1670, col: 31, offset: 64498},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1670, col: 38, offset: 64505},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "QuoteBlockStartDelimiter",
			pos:  position{line: 1672, col: 1, offset: 64537},
			expr: &seqExpr{
				pos: position{line: 1672, col: 29, offset: 64565},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1672, col: 29, offset: 64565},
						val:        "____",
						ignoreCase: false,
						want:       "\"____\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1672, col: 36, offset: 64572},
						expr: &ruleRefExpr{
							pos:  position{line: 1672, col: 36, offset: 64572},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1672, col: 43, offset: 64579},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "QuoteBlockEndDelimiter",
			pos:  position{line: 1674, col: 1, offset: 64611},
			expr: &choiceExpr{
				pos: position{line: 1674, col: 27, offset: 64637},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1674, col: 28, offset: 64638},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1674, col: 28, offset: 64638},
								val:        "____",
								ignoreCase: false,
								want:       "\"____\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1674, col: 35, offset: 64645},
								expr: &ruleRefExpr{
									pos:  position{line: 1674, col: 35, offset: 64645},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1674, col: 42, offset: 64652},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1674, col: 49, offset: 64659},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "QuoteBlock",
			pos:  position{line: 1676, col: 1, offset: 64691},
			expr: &actionExpr{
				pos: position{line: 1676, col: 15, offset: 64705},
				run: (*parser).callonQuoteBlock1,
				expr: &seqExpr{
					pos: position{line: 1676, col: 15, offset: 64705},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1676, col: 15, offset: 64705},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1676, col: 26, offset: 64716},
								expr: &ruleRefExpr{
									pos:  position{line: 1676, col: 27, offset: 64717},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1676, col: 40, offset: 64730},
							name: "QuoteBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1676, col: 65, offset: 64755},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1676, col: 74, offset: 64764},
								name: "QuoteBlockVerbatimElement",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1676, col: 101, offset: 64791},
							name: "QuoteBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockVerbatimElement",
			pos:  position{line: 1680, col: 1, offset: 64908},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1680, col: 30, offset: 64937},
				expr: &actionExpr{
					pos: position{line: 1680, col: 31, offset: 64938},
					run: (*parser).callonQuoteBlockVerbatimElement2,
					expr: &seqExpr{
						pos: position{line: 1680, col: 31, offset: 64938},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1680, col: 31, offset: 64938},
								expr: &ruleRefExpr{
									pos:  position{line: 1680, col: 32, offset: 64939},
									name: "QuoteBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1680, col: 55, offset: 64962},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1680, col: 64, offset: 64971},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlock",
			pos:  position{line: 1689, col: 1, offset: 65364},
			expr: &actionExpr{
				pos: position{line: 1689, col: 15, offset: 65378},
				run: (*parser).callonVerseBlock1,
				expr: &seqExpr{
					pos: position{line: 1689, col: 15, offset: 65378},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1689, col: 15, offset: 65378},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1689, col: 27, offset: 65390},
								name: "Attributes",
							},
						},
						&andCodeExpr{
							pos: position{line: 1690, col: 5, offset: 65408},
							run: (*parser).callonVerseBlock5,
						},
						&ruleRefExpr{
							pos:  position{line: 1694, col: 5, offset: 65607},
							name: "QuoteBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1694, col: 30, offset: 65632},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1694, col: 39, offset: 65641},
								name: "VerseBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1694, col: 66, offset: 65668},
							name: "QuoteBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "VerseBlockVerbatimContent",
			pos:  position{line: 1698, col: 1, offset: 65793},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1698, col: 30, offset: 65822},
				expr: &actionExpr{
					pos: position{line: 1698, col: 31, offset: 65823},
					run: (*parser).callonVerseBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1698, col: 31, offset: 65823},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1698, col: 31, offset: 65823},
								expr: &ruleRefExpr{
									pos:  position{line: 1698, col: 32, offset: 65824},
									name: "QuoteBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1698, col: 55, offset: 65847},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1698, col: 64, offset: 65856},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockDelimiter",
			pos:  position{line: 1705, col: 1, offset: 66200},
			expr: &seqExpr{
				pos: position{line: 1705, col: 26, offset: 66225},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1705, col: 26, offset: 66225},
						val:        "****",
						ignoreCase: false,
						want:       "\"****\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1705, col: 33, offset: 66232},
						expr: &ruleRefExpr{
							pos:  position{line: 1705, col: 33, offset: 66232},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1705, col: 40, offset: 66239},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "SidebarBlockStartDelimiter",
			pos:  position{line: 1707, col: 1, offset: 66246},
			expr: &seqExpr{
				pos: position{line: 1707, col: 31, offset: 66276},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1707, col: 31, offset: 66276},
						val:        "****",
						ignoreCase: false,
						want:       "\"****\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1707, col: 38, offset: 66283},
						expr: &ruleRefExpr{
							pos:  position{line: 1707, col: 38, offset: 66283},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1707, col: 45, offset: 66290},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "SidebarBlockEndDelimiter",
			pos:  position{line: 1709, col: 1, offset: 66297},
			expr: &choiceExpr{
				pos: position{line: 1709, col: 29, offset: 66325},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1709, col: 30, offset: 66326},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1709, col: 30, offset: 66326},
								val:        "****",
								ignoreCase: false,
								want:       "\"****\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1709, col: 37, offset: 66333},
								expr: &ruleRefExpr{
									pos:  position{line: 1709, col: 37, offset: 66333},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1709, col: 44, offset: 66340},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1709, col: 51, offset: 66347},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "SidebarBlock",
			pos:  position{line: 1711, col: 1, offset: 66354},
			expr: &actionExpr{
				pos: position{line: 1711, col: 17, offset: 66370},
				run: (*parser).callonSidebarBlock1,
				expr: &seqExpr{
					pos: position{line: 1711, col: 17, offset: 66370},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1711, col: 17, offset: 66370},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1711, col: 28, offset: 66381},
								expr: &ruleRefExpr{
									pos:  position{line: 1711, col: 29, offset: 66382},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1711, col: 42, offset: 66395},
							name: "SidebarBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1711, col: 69, offset: 66422},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1711, col: 78, offset: 66431},
								name: "SidebarBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1711, col: 107, offset: 66460},
							name: "SidebarBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockVerbatimContent",
			pos:  position{line: 1715, col: 1, offset: 66581},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1715, col: 32, offset: 66612},
				expr: &actionExpr{
					pos: position{line: 1715, col: 33, offset: 66613},
					run: (*parser).callonSidebarBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1715, col: 33, offset: 66613},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1715, col: 33, offset: 66613},
								expr: &ruleRefExpr{
									pos:  position{line: 1715, col: 34, offset: 66614},
									name: "SidebarBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1715, col: 59, offset: 66639},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1715, col: 68, offset: 66648},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockDelimiter",
			pos:  position{line: 1722, col: 1, offset: 66996},
			expr: &seqExpr{
				pos: position{line: 1722, col: 30, offset: 67025},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1722, col: 30, offset: 67025},
						val:        "++++",
						ignoreCase: false,
						want:       "\"++++\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1722, col: 37, offset: 67032},
						expr: &ruleRefExpr{
							pos:  position{line: 1722, col: 37, offset: 67032},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1722, col: 44, offset: 67039},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "PassthroughBlockStartDelimiter",
			pos:  position{line: 1724, col: 1, offset: 67046},
			expr: &seqExpr{
				pos: position{line: 1724, col: 35, offset: 67080},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1724, col: 35, offset: 67080},
						val:        "++++",
						ignoreCase: false,
						want:       "\"++++\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1724, col: 42, offset: 67087},
						expr: &ruleRefExpr{
							pos:  position{line: 1724, col: 42, offset: 67087},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1724, col: 49, offset: 67094},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "PassthroughBlockEndDelimiter",
			pos:  position{line: 1726, col: 1, offset: 67101},
			expr: &choiceExpr{
				pos: position{line: 1726, col: 33, offset: 67133},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1726, col: 34, offset: 67134},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1726, col: 34, offset: 67134},
								val:        "++++",
								ignoreCase: false,
								want:       "\"++++\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1726, col: 41, offset: 67141},
								expr: &ruleRefExpr{
									pos:  position{line: 1726, col: 41, offset: 67141},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1726, col: 48, offset: 67148},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1726, col: 55, offset: 67155},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "PassthroughBlock",
			pos:  position{line: 1728, col: 1, offset: 67162},
			expr: &actionExpr{
				pos: position{line: 1728, col: 21, offset: 67182},
				run: (*parser).callonPassthroughBlock1,
				expr: &seqExpr{
					pos: position{line: 1728, col: 21, offset: 67182},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1728, col: 21, offset: 67182},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1728, col: 32, offset: 67193},
								expr: &ruleRefExpr{
									pos:  position{line: 1728, col: 33, offset: 67194},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1728, col: 46, offset: 67207},
							name: "PassthroughBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1728, col: 77, offset: 67238},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1728, col: 86, offset: 67247},
								name: "PassthroughBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1728, col: 119, offset: 67280},
							name: "PassthroughBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockVerbatimContent",
			pos:  position{line: 1732, col: 1, offset: 67409},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1732, col: 36, offset: 67444},
				expr: &actionExpr{
					pos: position{line: 1732, col: 37, offset: 67445},
					run: (*parser).callonPassthroughBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1732, col: 37, offset: 67445},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1732, col: 37, offset: 67445},
								expr: &ruleRefExpr{
									pos:  position{line: 1732, col: 38, offset: 67446},
									name: "PassthroughBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1732, col: 67, offset: 67475},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1732, col: 76, offset: 67484},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ThematicBreak",
			pos:  position{line: 1737, col: 1, offset: 67648},
			expr: &actionExpr{
				pos: position{line: 1737, col: 18, offset: 67665},
				run: (*parser).callonThematicBreak1,
				expr: &seqExpr{
					pos: position{line: 1737, col: 18, offset: 67665},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1737, col: 19, offset: 67666},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1737, col: 19, offset: 67666},
									val:        "***",
									ignoreCase: false,
									want:       "\"***\"",
								},
								&litMatcher{
									pos:        position{line: 1737, col: 27, offset: 67674},
									val:        "* * *",
									ignoreCase: false,
									want:       "\"* * *\"",
								},
								&litMatcher{
									pos:        position{line: 1737, col: 37, offset: 67684},
									val:        "---",
									ignoreCase: false,
									want:       "\"---\"",
								},
								&litMatcher{
									pos:        position{line: 1737, col: 45, offset: 67692},
									val:        "- - -",
									ignoreCase: false,
									want:       "\"- - -\"",
								},
								&litMatcher{
									pos:        position{line: 1737, col: 55, offset: 67702},
									val:        "___",
									ignoreCase: false,
									want:       "\"___\"",
								},
								&litMatcher{
									pos:        position{line: 1737, col: 63, offset: 67710},
									val:        "_ _ _",
									ignoreCase: false,
									want:       "\"_ _ _\"",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1737, col: 72, offset: 67719},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "NormalBlockContent",
			pos:  position{line: 1745, col: 1, offset: 67977},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1745, col: 23, offset: 67999},
				expr: &ruleRefExpr{
					pos:  position{line: 1745, col: 23, offset: 67999},
					name: "NormalBlockElement",
				},
			},
		},
		{
			name: "NormalBlockElement",
			pos:  position{line: 1747, col: 1, offset: 68022},
			expr: &actionExpr{
				pos: position{line: 1748, col: 5, offset: 68050},
				run: (*parser).callonNormalBlockElement1,
				expr: &seqExpr{
					pos: position{line: 1748, col: 5, offset: 68050},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1748, col: 5, offset: 68050},
							expr: &ruleRefExpr{
								pos:  position{line: 1748, col: 6, offset: 68051},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1748, col: 10, offset: 68055},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1748, col: 19, offset: 68064},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1748, col: 19, offset: 68064},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 1749, col: 15, offset: 68090},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 1750, col: 15, offset: 68119},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1751, col: 15, offset: 68145},
										name: "ThematicBreak",
									},
									&ruleRefExpr{
										pos:  position{line: 1752, col: 15, offset: 68174},
										name: "OrderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 1753, col: 15, offset: 68206},
										name: "UnorderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 1754, col: 15, offset: 68240},
										name: "LabeledListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 1755, col: 15, offset: 68272},
										name: "ContinuedListItemElement",
									},
									&ruleRefExpr{
										pos:  position{line: 1756, col: 15, offset: 68312},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1757, col: 15, offset: 68342},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1758, col: 15, offset: 68371},
										name: "AttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 1759, col: 15, offset: 68408},
										name: "AttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 1760, col: 15, offset: 68439},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1761, col: 15, offset: 68481},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockContent",
			pos:  position{line: 1765, col: 1, offset: 68534},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1765, col: 22, offset: 68555},
				expr: &ruleRefExpr{
					pos:  position{line: 1765, col: 22, offset: 68555},
					name: "VerseBlockElement",
				},
			},
		},
		{
			name: "VerseBlockElement",
			pos:  position{line: 1767, col: 1, offset: 68577},
			expr: &actionExpr{
				pos: position{line: 1767, col: 22, offset: 68598},
				run: (*parser).callonVerseBlockElement1,
				expr: &seqExpr{
					pos: position{line: 1767, col: 22, offset: 68598},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1767, col: 22, offset: 68598},
							expr: &ruleRefExpr{
								pos:  position{line: 1767, col: 23, offset: 68599},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1767, col: 27, offset: 68603},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1767, col: 36, offset: 68612},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1767, col: 36, offset: 68612},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 1767, col: 48, offset: 68624},
										name: "VerseBlockParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraph",
			pos:  position{line: 1771, col: 1, offset: 68678},
			expr: &actionExpr{
				pos: position{line: 1771, col: 24, offset: 68701},
				run: (*parser).callonVerseBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1771, col: 24, offset: 68701},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1771, col: 30, offset: 68707},
						expr: &ruleRefExpr{
							pos:  position{line: 1771, col: 31, offset: 68708},
							name: "VerseBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraphLine",
			pos:  position{line: 1775, col: 1, offset: 68802},
			expr: &actionExpr{
				pos: position{line: 1775, col: 28, offset: 68829},
				run: (*parser).callonVerseBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1775, col: 28, offset: 68829},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1775, col: 28, offset: 68829},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1775, col: 37, offset: 68838},
								expr: &ruleRefExpr{
									pos:  position{line: 1775, col: 38, offset: 68839},
									name: "InlineElement",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1775, col: 54, offset: 68855},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "Table",
			pos:  position{line: 1782, col: 1, offset: 69104},
			expr: &actionExpr{
				pos: position{line: 1782, col: 10, offset: 69113},
				run: (*parser).callonTable1,
				expr: &seqExpr{
					pos: position{line: 1782, col: 10, offset: 69113},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1782, col: 10, offset: 69113},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1782, col: 21, offset: 69124},
								expr: &ruleRefExpr{
									pos:  position{line: 1782, col: 22, offset: 69125},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1782, col: 35, offset: 69138},
							name: "TableDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1783, col: 5, offset: 69158},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 1783, col: 12, offset: 69165},
								expr: &ruleRefExpr{
									pos:  position{line: 1783, col: 13, offset: 69166},
									name: "TableLineHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1784, col: 5, offset: 69189},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1784, col: 11, offset: 69195},
								expr: &ruleRefExpr{
									pos:  position{line: 1784, col: 12, offset: 69196},
									name: "TableLine",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1785, col: 6, offset: 69214},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1785, col: 6, offset: 69214},
									name: "TableDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1785, col: 23, offset: 69231},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TableCellSeparator",
			pos:  position{line: 1789, col: 1, offset: 69350},
			expr: &seqExpr{
				pos: position{line: 1789, col: 23, offset: 69372},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1789, col: 23, offset: 69372},
						val:        "|",
						ignoreCase: false,
						want:       "\"|\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1789, col: 27, offset: 69376},
						expr: &ruleRefExpr{
							pos:  position{line: 1789, col: 27, offset: 69376},
							name: "Space",
						},
					},
				},
			},
		},
		{
			name: "TableDelimiter",
			pos:  position{line: 1791, col: 1, offset: 69386},
			expr: &seqExpr{
				pos: position{line: 1791, col: 19, offset: 69404},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1791, col: 19, offset: 69404},
						val:        "|===",
						ignoreCase: false,
						want:       "\"|===\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1791, col: 26, offset: 69411},
						expr: &ruleRefExpr{
							pos:  position{line: 1791, col: 26, offset: 69411},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1791, col: 33, offset: 69418},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "TableLineHeader",
			pos:  position{line: 1794, col: 1, offset: 69489},
			expr: &actionExpr{
				pos: position{line: 1794, col: 20, offset: 69508},
				run: (*parser).callonTableLineHeader1,
				expr: &seqExpr{
					pos: position{line: 1794, col: 20, offset: 69508},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1794, col: 20, offset: 69508},
							expr: &ruleRefExpr{
								pos:  position{line: 1794, col: 21, offset: 69509},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1794, col: 36, offset: 69524},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1794, col: 42, offset: 69530},
								expr: &ruleRefExpr{
									pos:  position{line: 1794, col: 43, offset: 69531},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1794, col: 55, offset: 69543},
							name: "EOL",
						},
						&ruleRefExpr{
							pos:  position{line: 1794, col: 59, offset: 69547},
							name: "BlankLine",
						},
					},
				},
			},
		},
		{
			name: "TableLine",
			pos:  position{line: 1798, col: 1, offset: 69619},
			expr: &actionExpr{
				pos: position{line: 1798, col: 14, offset: 69632},
				run: (*parser).callonTableLine1,
				expr: &seqExpr{
					pos: position{line: 1798, col: 14, offset: 69632},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1798, col: 14, offset: 69632},
							expr: &ruleRefExpr{
								pos:  position{line: 1798, col: 15, offset: 69633},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1798, col: 30, offset: 69648},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1798, col: 36, offset: 69654},
								expr: &ruleRefExpr{
									pos:  position{line: 1798, col: 37, offset: 69655},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1798, col: 49, offset: 69667},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1798, col: 53, offset: 69671},
							expr: &ruleRefExpr{
								pos:  position{line: 1798, col: 53, offset: 69671},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "TableCell",
			pos:  position{line: 1802, col: 1, offset: 69744},
			expr: &actionExpr{
				pos: position{line: 1802, col: 14, offset: 69757},
				run: (*parser).callonTableCell1,
				expr: &seqExpr{
					pos: position{line: 1802, col: 14, offset: 69757},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1802, col: 14, offset: 69757},
							name: "TableCellSeparator",
						},
						&labeledExpr{
							pos:   position{line: 1802, col: 33, offset: 69776},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1802, col: 42, offset: 69785},
								expr: &seqExpr{
									pos: position{line: 1802, col: 43, offset: 69786},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1802, col: 43, offset: 69786},
											expr: &ruleRefExpr{
												pos:  position{line: 1802, col: 44, offset: 69787},
												name: "TableCellSeparator",
											},
										},
										&notExpr{
											pos: position{line: 1802, col: 63, offset: 69806},
											expr: &ruleRefExpr{
												pos:  position{line: 1802, col: 64, offset: 69807},
												name: "EOL",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 1802, col: 68, offset: 69811},
											expr: &ruleRefExpr{
												pos:  position{line: 1802, col: 68, offset: 69811},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1802, col: 75, offset: 69818},
											name: "InlineElement",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1802, col: 89, offset: 69832},
											expr: &ruleRefExpr{
												pos:  position{line: 1802, col: 89, offset: 69832},
												name: "Space",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CommentBlockDelimiter",
			pos:  position{line: 1809, col: 1, offset: 70088},
			expr: &seqExpr{
				pos: position{line: 1809, col: 26, offset: 70113},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1809, col: 26, offset: 70113},
						val:        "////",
						ignoreCase: false,
						want:       "\"////\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1809, col: 33, offset: 70120},
						expr: &ruleRefExpr{
							pos:  position{line: 1809, col: 33, offset: 70120},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1809, col: 40, offset: 70127},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "CommentBlockStartDelimiter",
			pos:  position{line: 1811, col: 1, offset: 70134},
			expr: &seqExpr{
				pos: position{line: 1811, col: 31, offset: 70164},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1811, col: 31, offset: 70164},
						val:        "////",
						ignoreCase: false,
						want:       "\"////\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1811, col: 38, offset: 70171},
						expr: &ruleRefExpr{
							pos:  position{line: 1811, col: 38, offset: 70171},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1811, col: 45, offset: 70178},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "CommentBlockEndDelimiter",
			pos:  position{line: 1813, col: 1, offset: 70185},
			expr: &choiceExpr{
				pos: position{line: 1813, col: 29, offset: 70213},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1813, col: 30, offset: 70214},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1813, col: 30, offset: 70214},
								val:        "////",
								ignoreCase: false,
								want:       "\"////\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1813, col: 37, offset: 70221},
								expr: &ruleRefExpr{
									pos:  position{line: 1813, col: 37, offset: 70221},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1813, col: 44, offset: 70228},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1813, col: 51, offset: 70235},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "CommentBlock",
			pos:  position{line: 1815, col: 1, offset: 70242},
			expr: &actionExpr{
				pos: position{line: 1815, col: 17, offset: 70258},
				run: (*parser).callonCommentBlock1,
				expr: &seqExpr{
					pos: position{line: 1815, col: 17, offset: 70258},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1815, col: 17, offset: 70258},
							name: "CommentBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1815, col: 44, offset: 70285},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1815, col: 53, offset: 70294},
								name: "CommentBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1815, col: 83, offset: 70324},
							name: "CommentBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "CommentBlockVerbatimContent",
			pos:  position{line: 1819, col: 1, offset: 70438},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1819, col: 32, offset: 70469},
				expr: &actionExpr{
					pos: position{line: 1819, col: 33, offset: 70470},
					run: (*parser).callonCommentBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1819, col: 33, offset: 70470},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1819, col: 33, offset: 70470},
								expr: &ruleRefExpr{
									pos:  position{line: 1819, col: 34, offset: 70471},
									name: "CommentBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1819, col: 59, offset: 70496},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1819, col: 68, offset: 70505},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1823, col: 1, offset: 70650},
			expr: &actionExpr{
				pos: position{line: 1823, col: 22, offset: 70671},
				run: (*parser).callonSingleLineComment1,
				expr: &seqExpr{
					pos: position{line: 1823, col: 22, offset: 70671},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1823, col: 22, offset: 70671},
							expr: &ruleRefExpr{
								pos:  position{line: 1823, col: 23, offset: 70672},
								name: "CommentBlockDelimiter",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1823, col: 45, offset: 70694},
							expr: &ruleRefExpr{
								pos:  position{line: 1823, col: 45, offset: 70694},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 1823, col: 52, offset: 70701},
							val:        "//",
							ignoreCase: false,
							want:       "\"//\"",
						},
						&labeledExpr{
							pos:   position{line: 1823, col: 57, offset: 70706},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1823, col: 66, offset: 70715},
								name: "SingleLineCommentContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1823, col: 92, offset: 70741},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SingleLineCommentContent",
			pos:  position{line: 1827, col: 1, offset: 70810},
			expr: &actionExpr{
				pos: position{line: 1827, col: 29, offset: 70838},
				run: (*parser).callonSingleLineCommentContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1827, col: 29, offset: 70838},
					expr: &charClassMatcher{
						pos:        position{line: 1827, col: 29, offset: 70838},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "LiteralBlock",
			pos:  position{line: 1835, col: 1, offset: 71159},
			expr: &choiceExpr{
				pos: position{line: 1835, col: 17, offset: 71175},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1835, col: 17, offset: 71175},
						name: "ParagraphWithLiteralAttribute",
					},
					&ruleRefExpr{
						pos:  position{line: 1835, col: 49, offset: 71207},
						name: "ParagraphWithHeadingSpaces",
					},
					&ruleRefExpr{
						pos:  position{line: 1835, col: 78, offset: 71236},
						name: "ParagraphWithLiteralBlockDelimiter",
					},
				},
			},
		},
		{
			name: "LiteralBlockDelimiter",
			pos:  position{line: 1837, col: 1, offset: 71274},
			expr: &litMatcher{
				pos:        position{line: 1837, col: 26, offset: 71299},
				val:        "....",
				ignoreCase: false,
				want:       "\"....\"",
			},
		},
		{
			name: "ParagraphWithHeadingSpaces",
			pos:  position{line: 1840, col: 1, offset: 71374},
			expr: &actionExpr{
				pos: position{line: 1840, col: 31, offset: 71404},
				run: (*parser).callonParagraphWithHeadingSpaces1,
				expr: &seqExpr{
					pos: position{line: 1840, col: 31, offset: 71404},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1840, col: 31, offset: 71404},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1840, col: 42, offset: 71415},
								expr: &ruleRefExpr{
									pos:  position{line: 1840, col: 43, offset: 71416},
									name: "Attributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1840, col: 56, offset: 71429},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1840, col: 63, offset: 71436},
								name: "ParagraphWithHeadingSpacesLines",
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithHeadingSpacesLines",
			pos:  position{line: 1845, col: 1, offset: 71671},
			expr: &actionExpr{
				pos: position{line: 1846, col: 5, offset: 71712},
				run: (*parser).callonParagraphWithHeadingSpacesLines1,
				expr: &seqExpr{
					pos: position{line: 1846, col: 5, offset: 71712},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1846, col: 5, offset: 71712},
							label: "firstLine",
							expr: &actionExpr{
								pos: position{line: 1846, col: 16, offset: 71723},
								run: (*parser).callonParagraphWithHeadingSpacesLines4,
								expr: &seqExpr{
									pos: position{line: 1846, col: 16, offset: 71723},
									exprs: []interface{}{
										&oneOrMoreExpr{
											pos: position{line: 1846, col: 16, offset: 71723},
											expr: &ruleRefExpr{
												pos:  position{line: 1846, col: 16, offset: 71723},
												name: "Space",
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 1846, col: 23, offset: 71730},
											expr: &charClassMatcher{
												pos:        position{line: 1846, col: 23, offset: 71730},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1848, col: 8, offset: 71785},
							name: "EOL",
						},
						&labeledExpr{
							pos:   position{line: 1849, col: 5, offset: 71849},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1849, col: 16, offset: 71860},
								expr: &actionExpr{
									pos: position{line: 1850, col: 9, offset: 71871},
									run: (*parser).callonParagraphWithHeadingSpacesLines13,
									expr: &seqExpr{
										pos: position{line: 1850, col: 9, offset: 71871},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1850, col: 9, offset: 71871},
												expr: &ruleRefExpr{
													pos:  position{line: 1850, col: 10, offset: 71872},
													name: "BlankLine",
												},
											},
											&labeledExpr{
												pos:   position{line: 1851, col: 9, offset: 71892},
												label: "otherLine",
												expr: &actionExpr{
													pos: position{line: 1851, col: 20, offset: 71903},
													run: (*parser).callonParagraphWithHeadingSpacesLines18,
													expr: &oneOrMoreExpr{
														pos: position{line: 1851, col: 20, offset: 71903},
														expr: &charClassMatcher{
															pos:        position{line: 1851, col: 20, offset: 71903},
															val:        "[^\\r\\n]",
															chars:      []rune{'\r', '\n'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 1853, col: 12, offset: 71966},
												name: "EOL",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiter",
			pos:  position{line: 1860, col: 1, offset: 72203},
			expr: &actionExpr{
				pos: position{line: 1860, col: 39, offset: 72241},
				run: (*parser).callonParagraphWithLiteralBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1860, col: 39, offset: 72241},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1860, col: 39, offset: 72241},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1860, col: 50, offset: 72252},
								expr: &ruleRefExpr{
									pos:  position{line: 1860, col: 51, offset: 72253},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1861, col: 9, offset: 72275},
							name: "LiteralBlockDelimiter",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1861, col: 31, offset: 72297},
							expr: &ruleRefExpr{
								pos:  position{line: 1861, col: 31, offset: 72297},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1861, col: 38, offset: 72304},
							name: "Newline",
						},
						&labeledExpr{
							pos:   position{line: 1861, col: 46, offset: 72312},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1861, col: 53, offset: 72319},
								name: "ParagraphWithLiteralBlockDelimiterLines",
							},
						},
						&choiceExpr{
							pos: position{line: 1861, col: 95, offset: 72361},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 1861, col: 96, offset: 72362},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1861, col: 96, offset: 72362},
											name: "LiteralBlockDelimiter",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1861, col: 118, offset: 72384},
											expr: &ruleRefExpr{
												pos:  position{line: 1861, col: 118, offset: 72384},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1861, col: 125, offset: 72391},
											name: "EOL",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1861, col: 132, offset: 72398},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLines",
			pos:  position{line: 1866, col: 1, offset: 72562},
			expr: &actionExpr{
				pos: position{line: 1866, col: 44, offset: 72605},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLines1,
				expr: &labeledExpr{
					pos:   position{line: 1866, col: 44, offset: 72605},
					label: "lines",
					expr: &zeroOrMoreExpr{
						pos: position{line: 1866, col: 50, offset: 72611},
						expr: &ruleRefExpr{
							pos:  position{line: 1866, col: 51, offset: 72612},
							name: "ParagraphWithLiteralBlockDelimiterLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLine",
			pos:  position{line: 1870, col: 1, offset: 72700},
			expr: &actionExpr{
				pos: position{line: 1871, col: 5, offset: 72756},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLine1,
				expr: &seqExpr{
					pos: position{line: 1871, col: 5, offset: 72756},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1871, col: 5, offset: 72756},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1871, col: 11, offset: 72762},
								run: (*parser).callonParagraphWithLiteralBlockDelimiterLine4,
								expr: &seqExpr{
									pos: position{line: 1871, col: 11, offset: 72762},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1871, col: 11, offset: 72762},
											expr: &ruleRefExpr{
												pos:  position{line: 1871, col: 12, offset: 72763},
												name: "LiteralBlockDelimiter",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 1871, col: 34, offset: 72785},
											expr: &charClassMatcher{
												pos:        position{line: 1871, col: 34, offset: 72785},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1873, col: 8, offset: 72840},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttribute",
			pos:  position{line: 1878, col: 1, offset: 72971},
			expr: &actionExpr{
				pos: position{line: 1879, col: 5, offset: 73010},
				run: (*parser).callonParagraphWithLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 1879, col: 5, offset: 73010},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1879, col: 5, offset: 73010},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1879, col: 16, offset: 73021},
								expr: &ruleRefExpr{
									pos:  position{line: 1879, col: 17, offset: 73022},
									name: "Attributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1880, col: 5, offset: 73040},
							run: (*parser).callonParagraphWithLiteralAttribute6,
						},
						&labeledExpr{
							pos:   position{line: 1887, col: 5, offset: 73254},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1887, col: 12, offset: 73261},
								name: "ParagraphWithLiteralAttributeLines",
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralKind",
			pos:  position{line: 1891, col: 1, offset: 73415},
			expr: &actionExpr{
				pos: position{line: 1891, col: 16, offset: 73430},
				run: (*parser).callonLiteralKind1,
				expr: &litMatcher{
					pos:        position{line: 1891, col: 16, offset: 73430},
					val:        "literal",
					ignoreCase: false,
					want:       "\"literal\"",
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttributeLines",
			pos:  position{line: 1896, col: 1, offset: 73518},
			expr: &actionExpr{
				pos: position{line: 1896, col: 39, offset: 73556},
				run: (*parser).callonParagraphWithLiteralAttributeLines1,
				expr: &labeledExpr{
					pos:   position{line: 1896, col: 39, offset: 73556},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1896, col: 45, offset: 73562},
						expr: &ruleRefExpr{
							pos:  position{line: 1896, col: 46, offset: 73563},
							name: "ParagraphWithLiteralAttributeLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttributeLine",
			pos:  position{line: 1900, col: 1, offset: 73647},
			expr: &actionExpr{
				pos: position{line: 1900, col: 38, offset: 73684},
				run: (*parser).callonParagraphWithLiteralAttributeLine1,
				expr: &seqExpr{
					pos: position{line: 1900, col: 38, offset: 73684},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1900, col: 38, offset: 73684},
							expr: &ruleRefExpr{
								pos:  position{line: 1900, col: 39, offset: 73685},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1900, col: 49, offset: 73695},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 1900, col: 58, offset: 73704},
								run: (*parser).callonParagraphWithLiteralAttributeLine6,
								expr: &oneOrMoreExpr{
									pos: position{line: 1900, col: 58, offset: 73704},
									expr: &charClassMatcher{
										pos:        position{line: 1900, col: 58, offset: 73704},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1902, col: 4, offset: 73751},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IndexTerm",
			pos:  position{line: 1909, col: 1, offset: 73944},
			expr: &actionExpr{
				pos: position{line: 1909, col: 14, offset: 73957},
				run: (*parser).callonIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 1909, col: 14, offset: 73957},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1909, col: 14, offset: 73957},
							val:        "((",
							ignoreCase: false,
							want:       "\"((\"",
						},
						&labeledExpr{
							pos:   position{line: 1909, col: 19, offset: 73962},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 1909, col: 25, offset: 73968},
								name: "IndexTermContent",
							},
						},
						&litMatcher{
							pos:        position{line: 1909, col: 43, offset: 73986},
							val:        "))",
							ignoreCase: false,
							want:       "\"))\"",
						},
					},
				},
			},
		},
		{
			name: "IndexTermContent",
			pos:  position{line: 1913, col: 1, offset: 74055},
			expr: &actionExpr{
				pos: position{line: 1913, col: 21, offset: 74075},
				run: (*parser).callonIndexTermContent1,
				expr: &labeledExpr{
					pos:   position{line: 1913, col: 21, offset: 74075},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1913, col: 30, offset: 74084},
						expr: &choiceExpr{
							pos: position{line: 1913, col: 31, offset: 74085},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1913, col: 31, offset: 74085},
									name: "Word",
								},
								&ruleRefExpr{
									pos:  position{line: 1913, col: 38, offset: 74092},
									name: "QuotedString",
								},
								&ruleRefExpr{
									pos:  position{line: 1913, col: 53, offset: 74107},
									name: "QuotedText",
								},
								&ruleRefExpr{
									pos:  position{line: 1913, col: 66, offset: 74120},
									name: "Space",
								},
								&actionExpr{
									pos: position{line: 1913, col: 74, offset: 74128},
									run: (*parser).callonIndexTermContent9,
									expr: &seqExpr{
										pos: position{line: 1913, col: 75, offset: 74129},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1913, col: 75, offset: 74129},
												expr: &litMatcher{
													pos:        position{line: 1913, col: 76, offset: 74130},
													val:        "))",
													ignoreCase: false,
													want:       "\"))\"",
												},
											},
											&anyMatcher{
												line: 1913, col: 81, offset: 74135,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTerm",
			pos:  position{line: 1919, col: 1, offset: 74247},
			expr: &actionExpr{
				pos: position{line: 1919, col: 23, offset: 74269},
				run: (*parser).callonConcealedIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 1919, col: 23, offset: 74269},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1919, col: 23, offset: 74269},
							val:        "(((",
							ignoreCase: false,
							want:       "\"(((\"",
						},
						&labeledExpr{
							pos:   position{line: 1919, col: 29, offset: 74275},
							label: "term1",
							expr: &ruleRefExpr{
								pos:  position{line: 1919, col: 36, offset: 74282},
								name: "ConcealedIndexTermContent",
							},
						},
						&labeledExpr{
							pos:   position{line: 1920, col: 5, offset: 74315},
							label: "term2",
							expr: &zeroOrOneExpr{
								pos: position{line: 1920, col: 11, offset: 74321},
								expr: &actionExpr{
									pos: position{line: 1920, col: 12, offset: 74322},
									run: (*parser).callonConcealedIndexTerm8,
									expr: &seqExpr{
										pos: position{line: 1920, col: 12, offset: 74322},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 1920, col: 12, offset: 74322},
												expr: &ruleRefExpr{
													pos:  position{line: 1920, col: 12, offset: 74322},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 1920, col: 19, offset: 74329},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 1920, col: 23, offset: 74333},
												expr: &ruleRefExpr{
													pos:  position{line: 1920, col: 23, offset: 74333},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 1920, col: 30, offset: 74340},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 1920, col: 39, offset: 74349},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1921, col: 5, offset: 74408},
							label: "term3",
							expr: &zeroOrOneExpr{
								pos: position{line: 1921, col: 11, offset: 74414},
								expr: &actionExpr{
									pos: position{line: 1921, col: 12, offset: 74415},
									run: (*parser).callonConcealedIndexTerm19,
									expr: &seqExpr{
										pos: position{line: 1921, col: 12, offset: 74415},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 1921, col: 12, offset: 74415},
												expr: &ruleRefExpr{
													pos:  position{line: 1921, col: 12, offset: 74415},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 1921, col: 19, offset: 74422},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 1921, col: 23, offset: 74426},
												expr: &ruleRefExpr{
													pos:  position{line: 1921, col: 23, offset: 74426},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 1921, col: 30, offset: 74433},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 1921, col: 39, offset: 74442},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1922, col: 5, offset: 74501},
							val:        ")))",
							ignoreCase: false,
							want:       "\")))\"",
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTermContent",
			pos:  position{line: 1926, col: 1, offset: 74584},
			expr: &actionExpr{
				pos: position{line: 1926, col: 30, offset: 74613},
				run: (*parser).callonConcealedIndexTermContent1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1926, col: 30, offset: 74613},
					expr: &choiceExpr{
						pos: position{line: 1926, col: 31, offset: 74614},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1926, col: 31, offset: 74614},
								name: "Alphanum",
							},
							&ruleRefExpr{
								pos:  position{line: 1926, col: 42, offset: 74625},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "BlankLine",
			pos:  position{line: 1933, col: 1, offset: 74781},
			expr: &actionExpr{
				pos: position{line: 1933, col: 14, offset: 74794},
				run: (*parser).callonBlankLine1,
				expr: &seqExpr{
					pos: position{line: 1933, col: 14, offset: 74794},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1933, col: 14, offset: 74794},
							expr: &ruleRefExpr{
								pos:  position{line: 1933, col: 15, offset: 74795},
								name: "EOF",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1933, col: 19, offset: 74799},
							expr: &ruleRefExpr{
								pos:  position{line: 1933, col: 19, offset: 74799},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1933, col: 26, offset: 74806},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "Alphanum",
			pos:  position{line: 1940, col: 1, offset: 74960},
			expr: &charClassMatcher{
				pos:        position{line: 1940, col: 13, offset: 74972},
				val:        "[\\pL0-9]",
				ranges:     []rune{'0', '9'},
				classes:    []*unicode.RangeTable{rangeTable("L")},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Parenthesis",
			pos:  position{line: 1942, col: 1, offset: 74984},
			expr: &choiceExpr{
				pos: position{line: 1942, col: 16, offset: 74999},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1942, col: 16, offset: 74999},
						val:        "(",
						ignoreCase: false,
						want:       "\"(\"",
					},
					&litMatcher{
						pos:        position{line: 1942, col: 22, offset: 75005},
						val:        ")",
						ignoreCase: false,
						want:       "\")\"",
					},
					&litMatcher{
						pos:        position{line: 1942, col: 28, offset: 75011},
						val:        "[",
						ignoreCase: false,
						want:       "\"[\"",
					},
					&litMatcher{
						pos:        position{line: 1942, col: 34, offset: 75017},
						val:        "]",
						ignoreCase: false,
						want:       "\"]\"",
					},
					&litMatcher{
						pos:        position{line: 1942, col: 40, offset: 75023},
						val:        "{",
						ignoreCase: false,
						want:       "\"{\"",
					},
					&litMatcher{
						pos:        position{line: 1942, col: 46, offset: 75029},
						val:        "}",
						ignoreCase: false,
						want:       "\"}\"",
					},
				},
			},
		},
		{
			name: "Alphanums",
			pos:  position{line: 1944, col: 1, offset: 75037},
			expr: &actionExpr{
				pos: position{line: 1944, col: 14, offset: 75050},
				run: (*parser).callonAlphanums1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1944, col: 14, offset: 75050},
					expr: &charClassMatcher{
						pos:        position{line: 1944, col: 14, offset: 75050},
						val:        "[\\pL0-9]",
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Word",
			pos:  position{line: 1948, col: 1, offset: 75100},
			expr: &choiceExpr{
				pos: position{line: 1952, col: 5, offset: 75431},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1952, col: 5, offset: 75431},
						run: (*parser).callonWord2,
						expr: &seqExpr{
							pos: position{line: 1952, col: 5, offset: 75431},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 1952, col: 5, offset: 75431},
									expr: &charClassMatcher{
										pos:        position{line: 1952, col: 5, offset: 75431},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 1952, col: 15, offset: 75441},
									expr: &choiceExpr{
										pos: position{line: 1952, col: 17, offset: 75443},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 1952, col: 17, offset: 75443},
												val:        "[\\r\\n ,\\]]",
												chars:      []rune{'\r', '\n', ' ', ',', ']'},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 1952, col: 30, offset: 75456},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1954, col: 9, offset: 75528},
						run: (*parser).callonWord10,
						expr: &seqExpr{
							pos: position{line: 1954, col: 9, offset: 75528},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 1954, col: 9, offset: 75528},
									expr: &charClassMatcher{
										pos:        position{line: 1954, col: 9, offset: 75528},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 1954, col: 19, offset: 75538},
									expr: &seqExpr{
										pos: position{line: 1954, col: 20, offset: 75539},
										exprs: []interface{}{
											&charClassMatcher{
												pos:        position{line: 1954, col: 20, offset: 75539},
												val:        "[=*_`]",
												chars:      []rune{'=', '*', '_', '`'},
												ignoreCase: false,
												inverted:   false,
											},
											&oneOrMoreExpr{
												pos: position{line: 1954, col: 27, offset: 75546},
												expr: &charClassMatcher{
													pos:        position{line: 1954, col: 27, offset: 75546},
													val:        "[\\pL0-9]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineWord",
			pos:  position{line: 1958, col: 1, offset: 75626},
			expr: &choiceExpr{
				pos: position{line: 1959, col: 5, offset: 75708},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1959, col: 5, offset: 75708},
						run: (*parser).callonInlineWord2,
						expr: &seqExpr{
							pos: position{line: 1959, col: 5, offset: 75708},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 1959, col: 5, offset: 75708},
									expr: &charClassMatcher{
										pos:        position{line: 1959, col: 5, offset: 75708},
										val:        "[\\pL0-9,.?!;]",
										chars:      []rune{',', '.', '?', '!', ';'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 1959, col: 20, offset: 75723},
									expr: &choiceExpr{
										pos: position{line: 1959, col: 22, offset: 75725},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 1959, col: 22, offset: 75725},
												val:        "[\\r\\n ]",
												chars:      []rune{'\r', '\n', ' '},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 1959, col: 32, offset: 75735},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1961, col: 9, offset: 75807},
						name: "Word",
					},
				},
			},
		},
		{
			name: "AnyChar",
			pos:  position{line: 1964, col: 1, offset: 75910},
			expr: &actionExpr{
				pos: position{line: 1964, col: 12, offset: 75921},
				run: (*parser).callonAnyChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1964, col: 12, offset: 75921},
					val:        "[^\\r\\n]",
					chars:      []rune{'\r', '\n'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "FileLocation",
			pos:  position{line: 1968, col: 1, offset: 75990},
			expr: &actionExpr{
				pos: position{line: 1968, col: 17, offset: 76006},
				run: (*parser).callonFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 1968, col: 17, offset: 76006},
					label: "path",
					expr: &oneOrMoreExpr{
						pos: position{line: 1968, col: 22, offset: 76011},
						expr: &choiceExpr{
							pos: position{line: 1968, col: 23, offset: 76012},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1968, col: 23, offset: 76012},
									name: "FILENAME",
								},
								&ruleRefExpr{
									pos:  position{line: 1968, col: 34, offset: 76023},
									name: "AttributeSubstitution",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ResolvedFileLocation",
			pos:  position{line: 1972, col: 1, offset: 76111},
			expr: &actionExpr{
				pos: position{line: 1972, col: 25, offset: 76135},
				run: (*parser).callonResolvedFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 1972, col: 25, offset: 76135},
					label: "path",
					expr: &oneOrMoreExpr{
						pos: position{line: 1972, col: 30, offset: 76140},
						expr: &charClassMatcher{
							pos:        position{line: 1972, col: 31, offset: 76141},
							val:        "[^\\r\\n []",
							chars:      []rune{'\r', '\n', ' ', '['},
							ignoreCase: false,
							inverted:   true,
						},
					},
				},
			},
		},
		{
			name: "Location",
			pos:  position{line: 1976, col: 1, offset: 76217},
			expr: &actionExpr{
				pos: position{line: 1976, col: 13, offset: 76229},
				run: (*parser).callonLocation1,
				expr: &seqExpr{
					pos: position{line: 1976, col: 13, offset: 76229},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1976, col: 13, offset: 76229},
							label: "scheme",
							expr: &zeroOrOneExpr{
								pos: position{line: 1976, col: 20, offset: 76236},
								expr: &ruleRefExpr{
									pos:  position{line: 1976, col: 21, offset: 76237},
									name: "URL_SCHEME",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1976, col: 34, offset: 76250},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 1976, col: 39, offset: 76255},
								expr: &choiceExpr{
									pos: position{line: 1976, col: 40, offset: 76256},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1976, col: 40, offset: 76256},
											name: "FILENAME",
										},
										&ruleRefExpr{
											pos:  position{line: 1976, col: 51, offset: 76267},
											name: "AttributeSubstitution",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LocationWithScheme",
			pos:  position{line: 1980, col: 1, offset: 76359},
			expr: &actionExpr{
				pos: position{line: 1980, col: 23, offset: 76381},
				run: (*parser).callonLocationWithScheme1,
				expr: &seqExpr{
					pos: position{line: 1980, col: 23, offset: 76381},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1980, col: 23, offset: 76381},
							label: "scheme",
							expr: &ruleRefExpr{
								pos:  position{line: 1980, col: 31, offset: 76389},
								name: "URL_SCHEME",
							},
						},
						&labeledExpr{
							pos:   position{line: 1980, col: 43, offset: 76401},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 1980, col: 48, offset: 76406},
								expr: &choiceExpr{
									pos: position{line: 1980, col: 49, offset: 76407},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1980, col: 49, offset: 76407},
											name: "FILENAME",
										},
										&ruleRefExpr{
											pos:  position{line: 1980, col: 60, offset: 76418},
											name: "AttributeSubstitution",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FILENAME",
			pos:  position{line: 1984, col: 1, offset: 76510},
			expr: &oneOrMoreExpr{
				pos: position{line: 1984, col: 13, offset: 76522},
				expr: &charClassMatcher{
					pos:        position{line: 1984, col: 14, offset: 76523},
					val:        "[^\\r\\n{}[\\] ]",
					chars:      []rune{'\r', '\n', '{', '}', '[', ']', ' '},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "ResolvedLocation",
			pos:  position{line: 1986, col: 1, offset: 76659},
			expr: &actionExpr{
				pos: position{line: 1986, col: 21, offset: 76679},
				run: (*parser).callonResolvedLocation1,
				expr: &seqExpr{
					pos: position{line: 1986, col: 21, offset: 76679},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1986, col: 21, offset: 76679},
							label: "scheme",
							expr: &ruleRefExpr{
								pos:  position{line: 1986, col: 29, offset: 76687},
								name: "URL_SCHEME",
							},
						},
						&labeledExpr{
							pos:   position{line: 1986, col: 41, offset: 76699},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1986, col: 47, offset: 76705},
								name: "RESOLVED_FILENAME",
							},
						},
					},
				},
			},
		},
		{
			name: "RESOLVED_FILENAME",
			pos:  position{line: 1991, col: 1, offset: 76958},
			expr: &oneOrMoreExpr{
				pos: position{line: 1991, col: 22, offset: 76979},
				expr: &charClassMatcher{
					pos:        position{line: 1991, col: 23, offset: 76980},
					val:        "[^\\r\\n[\\] ]",
					chars:      []rune{'\r', '\n', '[', ']', ' '},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "URL",
			pos:  position{line: 1993, col: 1, offset: 77114},
			expr: &actionExpr{
				pos: position{line: 1993, col: 9, offset: 77122},
				run: (*parser).callonURL1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1993, col: 9, offset: 77122},
					expr: &charClassMatcher{
						pos:        position{line: 1993, col: 9, offset: 77122},
						val:        "[^\\r\\n[\\]]",
						chars:      []rune{'\r', '\n', '[', ']'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "URL_SCHEME",
			pos:  position{line: 1997, col: 1, offset: 77174},
			expr: &choiceExpr{
				pos: position{line: 1997, col: 15, offset: 77188},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1997, col: 15, offset: 77188},
						val:        "http://",
						ignoreCase: false,
						want:       "\"http://\"",
					},
					&litMatcher{
						pos:        position{line: 1997, col: 27, offset: 77200},
						val:        "https://",
						ignoreCase: false,
						want:       "\"https://\"",
					},
					&litMatcher{
						pos:        position{line: 1997, col: 40, offset: 77213},
						val:        "ftp://",
						ignoreCase: false,
						want:       "\"ftp://\"",
					},
					&litMatcher{
						pos:        position{line: 1997, col: 51, offset: 77224},
						val:        "irc://",
						ignoreCase: false,
						want:       "\"irc://\"",
					},
					&litMatcher{
						pos:        position{line: 1997, col: 62, offset: 77235},
						val:        "mailto:",
						ignoreCase: false,
						want:       "\"mailto:\"",
					},
				},
			},
		},
		{
			name: "ID",
			pos:  position{line: 1999, col: 1, offset: 77248},
			expr: &actionExpr{
				pos: position{line: 1999, col: 7, offset: 77254},
				run: (*parser).callonID1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1999, col: 7, offset: 77254},
					expr: &charClassMatcher{
						pos:        position{line: 1999, col: 7, offset: 77254},
						val:        "[^[\\]<>,]",
						chars:      []rune{'[', ']', '<', '>', ','},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DIGIT",
			pos:  position{line: 2003, col: 1, offset: 77383},
			expr: &actionExpr{
				pos: position{line: 2003, col: 10, offset: 77392},
				run: (*parser).callonDIGIT1,
				expr: &charClassMatcher{
					pos:        position{line: 2003, col: 10, offset: 77392},
					val:        "[0-9]",
					ranges:     []rune{'0', '9'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "NUMBER",
			pos:  position{line: 2007, col: 1, offset: 77438},
			expr: &actionExpr{
				pos: position{line: 2007, col: 11, offset: 77448},
				run: (*parser).callonNUMBER1,
				expr: &seqExpr{
					pos: position{line: 2007, col: 11, offset: 77448},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 2007, col: 11, offset: 77448},
							expr: &litMatcher{
								pos:        position{line: 2007, col: 11, offset: 77448},
								val:        "-",
								ignoreCase: false,
								want:       "\"-\"",
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 2007, col: 16, offset: 77453},
							expr: &ruleRefExpr{
								pos:  position{line: 2007, col: 16, offset: 77453},
								name: "DIGIT",
							},
						},
					},
				},
			},
		},
		{
			name: "Space",
			pos:  position{line: 2011, col: 1, offset: 77509},
			expr: &choiceExpr{
				pos: position{line: 2011, col: 10, offset: 77518},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2011, col: 10, offset: 77518},
						val:        " ",
						ignoreCase: false,
						want:       "\" \"",
					},
					&actionExpr{
						pos: position{line: 2011, col: 16, offset: 77524},
						run: (*parser).callonSpace3,
						expr: &litMatcher{
							pos:        position{line: 2011, col: 16, offset: 77524},
							val:        "\t",
							ignoreCase: false,
							want:       "\"\\t\"",
						},
					},
				},
			},
		},
		{
			name: "Newline",
			pos:  position{line: 2015, col: 1, offset: 77569},
			expr: &choiceExpr{
				pos: position{line: 2015, col: 12, offset: 77580},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2015, col: 12, offset: 77580},
						val:        "\r\n",
						ignoreCase: false,
						want:       "\"\\r\\n\"",
					},
					&litMatcher{
						pos:        position{line: 2015, col: 21, offset: 77589},
						val:        "\r",
						ignoreCase: false,
						want:       "\"\\r\"",
					},
					&litMatcher{
						pos:        position{line: 2015, col: 28, offset: 77596},
						val:        "\n",
						ignoreCase: false,
						want:       "\"\\n\"",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 2017, col: 1, offset: 77604},
			expr: &notExpr{
				pos: position{line: 2017, col: 8, offset: 77611},
				expr: &anyMatcher{
					line: 2017, col: 9, offset: 77612,
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 2019, col: 1, offset: 77617},
			expr: &choiceExpr{
				pos: position{line: 2019, col: 8, offset: 77624},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2019, col: 8, offset: 77624},
						name: "Newline",
					},
					&ruleRefExpr{
						pos:  position{line: 2019, col: 18, offset: 77634},
						name: "EOF",
					},
				},
			},
		},
	},
}

func (c *current) onAsciidocDocument1(frontmatter, blocks interface{}) (interface{}, error) {

	return types.NewDraftDocument(frontmatter, blocks.([]interface{}))
}

func (p *parser) callonAsciidocDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsciidocDocument1(stack["frontmatter"], stack["blocks"])
}

func (c *current) onVerbatimDocument1(blocks interface{}) (interface{}, error) {

	return types.NewDraftDocument(nil, blocks.([]interface{}))
}

func (p *parser) callonVerbatimDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimDocument1(stack["blocks"])
}

func (c *current) onTextDocument1(blocks interface{}) (interface{}, error) {

	return types.NewDraftDocument(nil, blocks.([]interface{}))
}

func (p *parser) callonTextDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextDocument1(stack["blocks"])
}

func (c *current) onAsciidocDocumentBlocks1(header, others interface{}) (interface{}, error) {

	if header != nil && others != nil {
		return append([]interface{}{header}, others.([]interface{})...), nil
	} else if others != nil {
		return others.([]interface{}), nil
	}
	return []interface{}{}, nil
}

func (p *parser) callonAsciidocDocumentBlocks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsciidocDocumentBlocks1(stack["header"], stack["others"])
}

func (c *current) onDocumentBlockWithinDelimitedBlock1(block interface{}) (interface{}, error) {

	return block, nil
}

func (p *parser) callonDocumentBlockWithinDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlockWithinDelimitedBlock1(stack["block"])
}

func (c *current) onTextDocumentBlock1(block interface{}) (interface{}, error) {

	return block, nil
}

func (p *parser) callonTextDocumentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextDocumentBlock1(stack["block"])
}

func (c *current) onYamlFrontMatter1(content interface{}) (interface{}, error) {

	return types.NewYamlFrontMatter(content.(string))
}

func (p *parser) callonYamlFrontMatter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatter1(stack["content"])
}

func (c *current) onYamlFrontMatterContent1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonYamlFrontMatterContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatterContent1()
}

func (c *current) onDocumentHeader1(title, id, authors, revision interface{}) (interface{}, error) {

	return types.NewDocumentHeader(title.([]interface{}), authors, revision)
}

func (p *parser) callonDocumentHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader1(stack["title"], stack["id"], stack["authors"], stack["revision"])
}

func (c *current) onDocumentAuthorsInlineForm1(authors interface{}) (interface{}, error) {

	return types.NewDocumentAuthors(authors.([]interface{}))
}

func (p *parser) callonDocumentAuthorsInlineForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsInlineForm1(stack["authors"])
}

func (c *current) onDocumentAuthorsAttributeForm1(author interface{}) (interface{}, error) {

	return []types.DocumentAuthor{author.(types.DocumentAuthor)}, nil
}

func (p *parser) callonDocumentAuthorsAttributeForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsAttributeForm1(stack["author"])
}

func (c *current) onDocumentAuthor1(fullname, email interface{}) (interface{}, error) {

	return types.NewDocumentAuthor(fullname, email)
}

func (p *parser) callonDocumentAuthor1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthor1(stack["fullname"], stack["email"])
}

func (c *current) onDocumentAuthorName1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorName1()
}

func (c *current) onDocumentAuthorEmail5() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorEmail5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail5()
}

func (c *current) onDocumentAuthorEmail1(email interface{}) (interface{}, error) {

	return email, nil
}

func (p *parser) callonDocumentAuthorEmail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail1(stack["email"])
}

func (c *current) onDocumentRevision9(revnumber, revdate, revremark interface{}) (interface{}, error) {

	return types.NewDocumentRevision(revnumber, revdate, revremark)

}

func (p *parser) callonDocumentRevision9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision9(stack["revnumber"], stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision23(revdate, revremark interface{}) (interface{}, error) {

	return types.NewDocumentRevision(nil, revdate, revremark)

}

func (p *parser) callonDocumentRevision23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision23(stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision1(revision interface{}) (interface{}, error) {

	return revision, nil
}

func (p *parser) callonDocumentRevision1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision1(stack["revision"])
}

func (c *current) onDocumentRevisionNumber2() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber2()
}

func (c *current) onDocumentRevisionNumber8() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber8()
}

func (c *current) onDocumentRevisionDate1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionDate1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionDate1()
}

func (c *current) onDocumentRevisionRemark1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionRemark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionRemark1()
}

func (c *current) onAttributeDeclaration9(value interface{}) (interface{}, error) {

	return value, nil

}

func (p *parser) callonAttributeDeclaration9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration9(stack["value"])
}

func (c *current) onAttributeDeclaration1(name, value interface{}) (interface{}, error) {

	return types.NewAttributeDeclaration(name.(string), value)
}

func (p *parser) callonAttributeDeclaration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration1(stack["name"], stack["value"])
}

func (c *current) onAttributeName1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonAttributeName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeName1()
}

func (c *current) onAttributeDeclarationValue1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonAttributeDeclarationValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue1()
}

func (c *current) onAttributeReset2(name interface{}) (interface{}, error) {

	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonAttributeReset2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset2(stack["name"])
}

func (c *current) onAttributeReset11(name interface{}) (interface{}, error) {

	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonAttributeReset11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset11(stack["name"])
}

func (c *current) onAttributeSubstitution1(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonAttributeSubstitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeSubstitution1(stack["name"])
}

func (c *current) onAttributes1(attrs interface{}) (interface{}, error) {

	return types.NewAttributes(attrs.([]interface{}))
}

func (p *parser) callonAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributes1(stack["attrs"])
}

func (c *current) onElementAttribute1(attr interface{}) (interface{}, error) {

	return attr, nil // avoid returning something like `[]interface{}{attr, EOL}`
}

func (p *parser) callonElementAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttribute1(stack["attr"])
}

func (c *current) onElementID2(id interface{}) (interface{}, error) {

	return types.NewElementID(id.(string))
}

func (p *parser) callonElementID2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementID2(stack["id"])
}

func (c *current) onElementID11(id interface{}) (interface{}, error) {

	return types.NewElementID(id.(string))
}

func (p *parser) callonElementID11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementID11(stack["id"])
}

func (c *current) onInlineElementID1(id interface{}) (interface{}, error) {
	// no EOL here since there can be multiple InlineElementID on the same line
	return types.NewInlineElementID(id.(string))
}

func (p *parser) callonInlineElementID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementID1(stack["id"])
}

func (c *current) onElementTitle1(title interface{}) (interface{}, error) {

	return types.NewElementTitle(title.(string))
}

func (p *parser) callonElementTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitle1(stack["title"])
}

func (c *current) onElementTitleContent1() (interface{}, error) {
	// "<" and ">" characters are not allowed as they are used as cross-reference markers
	return string(c.text), nil
}

func (p *parser) callonElementTitleContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitleContent1()
}

func (c *current) onElementRole5() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonElementRole5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementRole5()
}

func (c *current) onElementRole1(role interface{}) (interface{}, error) {

	return types.NewElementRole(role.(string))
}

func (p *parser) callonElementRole1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementRole1(stack["role"])
}

func (c *current) onLiteralAttribute1() (interface{}, error) {

	return types.NewLiteralAttribute()
}

func (p *parser) callonLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralAttribute1()
}

func (c *current) onPassthroughBlockAttribute1() (interface{}, error) {

	return types.NewPassthroughBlockAttribute()
}

func (p *parser) callonPassthroughBlockAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockAttribute1()
}

func (c *current) onAdmonitionMarkerAttribute1(k interface{}) (interface{}, error) {

	return types.NewAdmonitionAttribute(k.(types.AdmonitionKind))
}

func (p *parser) callonAdmonitionMarkerAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionMarkerAttribute1(stack["k"])
}

func (c *current) onSourceAttributes6(attr interface{}) (interface{}, error) {
	return attr, nil
}

func (p *parser) callonSourceAttributes6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes6(stack["attr"])
}

func (c *current) onSourceAttributes14(attr interface{}) (interface{}, error) {
	return attr, nil
}

func (p *parser) callonSourceAttributes14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes14(stack["attr"])
}

func (c *current) onSourceAttributes1(language, others interface{}) (interface{}, error) {

	return types.NewSourceAttributes(language, others.([]interface{})...)
}

func (p *parser) callonSourceAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes1(stack["language"], stack["others"])
}

func (c *current) onAttributeGroup1(attributes interface{}) (interface{}, error) {

	return types.NewAttributeGroup(attributes.([]interface{}))
}

func (p *parser) callonAttributeGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeGroup1(stack["attributes"])
}

func (c *current) onGenericAttributeWithValue1(key, value interface{}) (interface{}, error) {
	// value is (optionally) set
	return types.NewGenericAttribute(key.(string), value)
}

func (p *parser) callonGenericAttributeWithValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttributeWithValue1(stack["key"], stack["value"])
}

func (c *current) onGenericAttributeWithoutValue1(key interface{}) (interface{}, error) {
	// value is not set
	return types.NewGenericAttribute(key.(string), nil)
}

func (p *parser) callonGenericAttributeWithoutValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttributeWithoutValue1(stack["key"])
}

func (c *current) onAttributeKey1(key interface{}) (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonAttributeKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeKey1(stack["key"])
}

func (c *current) onAttributeValue1(value interface{}) (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue1(stack["value"])
}

func (c *current) onStandaloneAttributeValue1(value interface{}) (interface{}, error) {
	// standalone attribute value cannot be followed by a `=`, otherwise it causes troubles for standalone values (eg: in images)
	return string(c.text), nil
}

func (p *parser) callonStandaloneAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStandaloneAttributeValue1(stack["value"])
}

func (c *current) onHorizontalLayout1() (interface{}, error) {

	return types.Attributes{"layout": "horizontal"}, nil
}

func (p *parser) callonHorizontalLayout1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHorizontalLayout1()
}

func (c *current) onQuoteAttributes1(author, title interface{}) (interface{}, error) {

	return types.NewQuoteAttributes("quote", author, title)
}

func (p *parser) callonQuoteAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttributes1(stack["author"], stack["title"])
}

func (c *current) onVerseAttributes1(author, title interface{}) (interface{}, error) {

	return types.NewQuoteAttributes("verse", author.(string), title.(string))
}

func (p *parser) callonVerseAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseAttributes1(stack["author"], stack["title"])
}

func (c *current) onQuoteAttribute1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonQuoteAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttribute1()
}

func (c *current) onInlineAttributes1(attrs interface{}) (interface{}, error) {

	return types.NewAttributes(attrs.([]interface{}))
}

func (p *parser) callonInlineAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAttributes1(stack["attrs"])
}

func (c *current) onQuotedTextAttrs1(attrs interface{}) (interface{}, error) {

	return attrs, nil
}

func (p *parser) callonQuotedTextAttrs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextAttrs1(stack["attrs"])
}

func (c *current) onQuotedTextRole1(role interface{}) (interface{}, error) {

	return types.NewElementRole(role.(string))
}

func (p *parser) callonQuotedTextRole1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextRole1(stack["role"])
}

func (c *current) onQuotedTextRoleWord6() (interface{}, error) {

	return strings.SplitN(string(c.text), ",", 2)[0], nil
}

func (p *parser) callonQuotedTextRoleWord6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextRoleWord6()
}

func (c *current) onQuotedTextRoleWord1(role interface{}) (interface{}, error) {

	return role, nil
}

func (p *parser) callonQuotedTextRoleWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextRoleWord1(stack["role"])
}

func (c *current) onQuotedTextShortHand1(attrs interface{}) (interface{}, error) {

	return attrs, nil
}

func (p *parser) callonQuotedTextShortHand1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextShortHand1(stack["attrs"])
}

func (c *current) onQuotedTextShortRole5() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonQuotedTextShortRole5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextShortRole5()
}

func (c *current) onQuotedTextShortRole1(role interface{}) (interface{}, error) {

	return types.NewElementRole(role.(string))
}

func (p *parser) callonQuotedTextShortRole1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextShortRole1(stack["role"])
}

func (c *current) onQuotedTextShortID5() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonQuotedTextShortID5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextShortID5()
}

func (c *current) onQuotedTextShortID1(id interface{}) (interface{}, error) {

	return types.NewElementID(id.(string))
}

func (p *parser) callonQuotedTextShortID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextShortID1(stack["id"])
}

func (c *current) onStandaloneAttributes1(attributes interface{}) (interface{}, error) {
	// standalone attributes, i.e., with nothing afterwards
	return types.NewAttributes(attributes)
}

func (p *parser) callonStandaloneAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStandaloneAttributes1(stack["attributes"])
}

func (c *current) onSingleQuotedString1(elements interface{}) (interface{}, error) {

	return types.NewQuotedString(types.SingleQuote, elements.([]interface{}))
}

func (p *parser) callonSingleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedString1(stack["elements"])
}

func (c *current) onSingleQuotedStringElements1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements)
}

func (p *parser) callonSingleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElements1(stack["elements"])
}

func (c *current) onSingleQuotedStringElement1(element interface{}) (interface{}, error) {

	return element, nil
}

func (p *parser) callonSingleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement1(stack["element"])
}

func (c *current) onSingleQuotedStringFallbackCharacter3() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuotedStringFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringFallbackCharacter3()
}

func (c *current) onDoubleQuotedString1(elements interface{}) (interface{}, error) {

	return types.NewQuotedString(types.DoubleQuote, elements.([]interface{}))
}

func (p *parser) callonDoubleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedString1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElements1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements)
}

func (p *parser) callonDoubleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElements1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElement1(element interface{}) (interface{}, error) {

	return element, nil
}

func (p *parser) callonDoubleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement1(stack["element"])
}

func (c *current) onDoubleQuotedStringFallbackCharacter1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuotedStringFallbackCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringFallbackCharacter1()
}

func (c *current) onSection7() (interface{}, error) {

	// `=` is level 0, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonSection7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection7()
}

func (c *current) onSection10(attributes, level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonSection10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection10(stack["attributes"], stack["level"])
}

func (c *current) onSection1(attributes, level, title, id interface{}) (interface{}, error) {

	return types.NewSection(level.(int), title.([]interface{}), id.([]interface{}), attributes)
}

func (p *parser) callonSection1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection1(stack["attributes"], stack["level"], stack["title"], stack["id"])
}

func (c *current) onTitleElements1(elements interface{}) (interface{}, error) {
	// absorbs heading and trailing spaces
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonTitleElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElements1(stack["elements"])
}

func (c *current) onTitleElement1(element interface{}) (interface{}, error) {

	return element, nil
}

func (p *parser) callonTitleElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElement1(stack["element"])
}

func (c *current) onUserMacroBlock1(name, value, attrs interface{}) (interface{}, error) {

	return types.NewUserMacroBlock(name.(string), value.(string), attrs, string(c.text))
}

func (p *parser) callonUserMacroBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onInlineUserMacro1(name, value, attrs interface{}) (interface{}, error) {

	return types.NewInlineUserMacro(name.(string), value.(string), attrs, string(c.text))
}

func (p *parser) callonInlineUserMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onUserMacroName1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonUserMacroName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroName1()
}

func (c *current) onUserMacroValue1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonUserMacroValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroValue1()
}

func (c *current) onUserMacroAttributes1(attrs interface{}) (interface{}, error) {

	return types.NewAttributes(attrs.([]interface{}))
}

func (p *parser) callonUserMacroAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroAttributes1(stack["attrs"])
}

func (c *current) onFileInclusion4(path, inlineAttributes interface{}) (interface{}, error) {

	return types.NewFileInclusion(path.(types.Location), inlineAttributes.(types.Attributes), string(c.text))

}

func (p *parser) callonFileInclusion4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion4(stack["path"], stack["inlineAttributes"])
}

func (c *current) onFileInclusion1(incl interface{}) (interface{}, error) {

	return incl.(types.FileInclusion), nil
}

func (p *parser) callonFileInclusion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion1(stack["incl"])
}

func (c *current) onFileIncludeAttributes1(attrs interface{}) (interface{}, error) {

	return types.NewAttributes(attrs.([]interface{}))
}

func (p *parser) callonFileIncludeAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileIncludeAttributes1(stack["attrs"])
}

func (c *current) onLineRangesAttribute1(lines interface{}) (interface{}, error) {

	return types.NewLineRangesAttribute(lines)
}

func (p *parser) callonLineRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttribute1(stack["lines"])
}

func (c *current) onLineRangesAttributeValue1(value interface{}) (interface{}, error) {

	return value, nil
}

func (p *parser) callonLineRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleLineRanges9(other interface{}) (interface{}, error) {

	return other, nil

}

func (p *parser) callonMultipleLineRanges9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges9(stack["other"])
}

func (c *current) onMultipleLineRanges1(first, others interface{}) (interface{}, error) {

	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultipleQuotedLineRanges10(other interface{}) (interface{}, error) {

	return other, nil

}

func (p *parser) callonMultipleQuotedLineRanges10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges10(stack["other"])
}

func (c *current) onMultipleQuotedLineRanges1(first, others interface{}) (interface{}, error) {

	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleQuotedLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultiLineRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineRange1(stack["start"], stack["end"])
}

func (c *current) onMultiLineQuotedRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineQuotedRange1(stack["start"], stack["end"])
}

func (c *current) onSingleLineRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineRange1(stack["singleline"])
}

func (c *current) onSingleLineQuotedRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineQuotedRange1(stack["singleline"])
}

func (c *current) onUndefinedLineRange1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonUndefinedLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUndefinedLineRange1()
}

func (c *current) onTagRangesAttribute1(tags interface{}) (interface{}, error) {
	//TODO: check if 'tags'/'tag' is allowed for both single and multiple values
	return types.NewTagRangesAttribute(tags.([]interface{}))
}

func (p *parser) callonTagRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttribute1(stack["tags"])
}

func (c *current) onTagRangesAttributeValue1(value interface{}) (interface{}, error) {

	return value, nil
}

func (p *parser) callonTagRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleTagRanges7(other interface{}) (interface{}, error) {

	return other, nil

}

func (p *parser) callonMultipleTagRanges7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges7(stack["other"])
}

func (c *current) onMultipleTagRanges1(first, others interface{}) (interface{}, error) {

	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleTagRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges1(stack["first"], stack["others"])
}

func (c *current) onTagRange2(tag interface{}) (interface{}, error) {

	return types.NewTagRange(tag.(string), true)
}

func (p *parser) callonTagRange2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange2(stack["tag"])
}

func (c *current) onTagRange7(tag interface{}) (interface{}, error) {

	return types.NewTagRange(tag.(string), false)
}

func (p *parser) callonTagRange7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange7(stack["tag"])
}

func (c *current) onTagWildcard4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonTagWildcard4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard4()
}

func (c *current) onTagWildcard7(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagWildcard7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard7(stack["stars"])
}

func (c *current) onTagWildcard1(stars interface{}) (interface{}, error) {

	return stars, nil
}

func (p *parser) callonTagWildcard1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard1(stack["stars"])
}

func (c *current) onVerbatimFileLine6() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonVerbatimFileLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimFileLine6()
}

func (c *current) onVerbatimFileLine1(content interface{}) (interface{}, error) {

	return types.NewVerbatimFileLine(content.(string))
}

func (p *parser) callonVerbatimFileLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimFileLine1(stack["content"])
}

func (c *current) onIncludedFileLine8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine8()
}

func (c *current) onIncludedFileLine1(content interface{}) (interface{}, error) {

	return types.NewIncludedFileLine(content.([]interface{}))
}

func (p *parser) callonIncludedFileLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine1(stack["content"])
}

func (c *current) onIncludedFileStartTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileStartTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag5()
}

func (c *current) onIncludedFileStartTag1(tag interface{}) (interface{}, error) {

	return types.NewIncludedFileStartTag(tag.(string))
}

func (p *parser) callonIncludedFileStartTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag1(stack["tag"])
}

func (c *current) onIncludedFileEndTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileEndTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag5()
}

func (c *current) onIncludedFileEndTag1(tag interface{}) (interface{}, error) {

	return types.NewIncludedFileEndTag(tag.(string))
}

func (p *parser) callonIncludedFileEndTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag1(stack["tag"])
}

func (c *current) onListParagraph2(comment interface{}) (interface{}, error) {

	return comment, nil

}

func (p *parser) callonListParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph2(stack["comment"])
}

func (c *current) onListParagraph5(lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), nil)

}

func (p *parser) callonListParagraph5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph5(stack["lines"])
}

func (c *current) onListParagraphLine24(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonListParagraphLine24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine24(stack["elements"])
}

func (c *current) onListParagraphLine1(line interface{}) (interface{}, error) {

	return line, nil

}

func (p *parser) callonListParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine1(stack["line"])
}

func (c *current) onContinuedListItemElement1(element interface{}) (interface{}, error) {

	return types.NewContinuedListItemElement(element) // offset is negative
}

func (p *parser) callonContinuedListItemElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemElement1(stack["element"])
}

func (c *current) onContinuedListItemContent1(content interface{}) (interface{}, error) {

	return content, nil
}

func (p *parser) callonContinuedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent1(stack["content"])
}

func (c *current) onOrderedListItem1(attributes, prefix, content interface{}) (interface{}, error) {

	return types.NewOrderedListItem(prefix.(types.OrderedListItemPrefix), content.([]interface{}), attributes)
}

func (p *parser) callonOrderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItem1(stack["attributes"], stack["prefix"], stack["content"])
}

func (c *current) onOrderedListItemPrefix10() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonOrderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix10()
}

func (c *current) onOrderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonOrderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix13(stack["depth"])
}

func (c *current) onOrderedListItemPrefix7(depth interface{}) (interface{}, error) {

	switch depth.(int) {
	case 1:
		return types.NewOrderedListItemPrefix(types.Arabic, 1)
	case 2:
		return types.NewOrderedListItemPrefix(types.LowerAlpha, 2)
	case 3:
		return types.NewOrderedListItemPrefix(types.LowerRoman, 3)
	case 4:
		return types.NewOrderedListItemPrefix(types.UpperAlpha, 4)
	default:
		return types.NewOrderedListItemPrefix(types.UpperRoman, 5)
	}

}

func (p *parser) callonOrderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix7(stack["depth"])
}

func (c *current) onOrderedListItemPrefix14() (interface{}, error) {
	// numbering style: "1."
	return types.NewOrderedListItemPrefix(types.Arabic, 1)

}

func (p *parser) callonOrderedListItemPrefix14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix14()
}

func (c *current) onOrderedListItemPrefix19() (interface{}, error) {
	// numbering style: "a."
	return types.NewOrderedListItemPrefix(types.LowerAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix19()
}

func (c *current) onOrderedListItemPrefix23() (interface{}, error) {
	// numbering style: "A."
	return types.NewOrderedListItemPrefix(types.UpperAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix23()
}

func (c *current) onOrderedListItemPrefix27() (interface{}, error) {
	// numbering style: "i)"
	return types.NewOrderedListItemPrefix(types.LowerRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix27()
}

func (c *current) onOrderedListItemPrefix32() (interface{}, error) {
	// numbering style: "I)"
	return types.NewOrderedListItemPrefix(types.UpperRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix32()
}

func (c *current) onOrderedListItemPrefix1(prefix interface{}) (interface{}, error) {

	return prefix, nil
}

func (p *parser) callonOrderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix1(stack["prefix"])
}

func (c *current) onOrderedListItemContent1(elements interface{}) (interface{}, error) {

	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonOrderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemContent1(stack["elements"])
}

func (c *current) onUnorderedListItem1(attributes, prefix, checkstyle, content interface{}) (interface{}, error) {

	return types.NewUnorderedListItem(prefix.(types.UnorderedListItemPrefix), checkstyle, content.([]interface{}), attributes)
}

func (p *parser) callonUnorderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItem1(stack["attributes"], stack["prefix"], stack["checkstyle"], stack["content"])
}

func (c *current) onUnorderedListItemPrefix10() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonUnorderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix10()
}

func (c *current) onUnorderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonUnorderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix13(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix7(depth interface{}) (interface{}, error) {

	switch depth.(int) {
	case 1:
		return types.NewUnorderedListItemPrefix(types.OneAsterisk, 1)
	case 2:
		return types.NewUnorderedListItemPrefix(types.TwoAsterisks, 2)
	case 3:
		return types.NewUnorderedListItemPrefix(types.ThreeAsterisks, 3)
	case 4:
		return types.NewUnorderedListItemPrefix(types.FourAsterisks, 4)
	default:
		return types.NewUnorderedListItemPrefix(types.FiveAsterisks, 5)
	}

}

func (p *parser) callonUnorderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix7(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix15() (interface{}, error) {

	return types.NewUnorderedListItemPrefix(types.Dash, 1)

}

func (p *parser) callonUnorderedListItemPrefix15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix15()
}

func (c *current) onUnorderedListItemPrefix1(prefix interface{}) (interface{}, error) {

	return prefix, nil
}

func (p *parser) callonUnorderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix1(stack["prefix"])
}

func (c *current) onUnorderedListItemCheckStyle7() (interface{}, error) {
	return types.Unchecked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle7()
}

func (c *current) onUnorderedListItemCheckStyle9() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle9()
}

func (c *current) onUnorderedListItemCheckStyle11() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle11()
}

func (c *current) onUnorderedListItemCheckStyle1(style interface{}) (interface{}, error) {

	return style, nil

}

func (p *parser) callonUnorderedListItemCheckStyle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle1(stack["style"])
}

func (c *current) onUnorderedListItemContent1(elements interface{}) (interface{}, error) {
	// Another list or a literal paragraph immediately following a list item will be implicitly included in the list item
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonUnorderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemContent1(stack["elements"])
}

func (c *current) onLabeledListItem1(attributes, term, separator, description interface{}) (interface{}, error) {

	return types.NewLabeledListItem(len(separator.(string))-1, term.([]interface{}), description, attributes)
}

func (p *parser) callonLabeledListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItem1(stack["attributes"], stack["term"], stack["separator"], stack["description"])
}

func (c *current) onVerbatimLabeledListItemTerm3() (interface{}, error) {

	return types.NewStringElement(strings.TrimSpace(string(c.text)))
}

func (p *parser) callonVerbatimLabeledListItemTerm3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLabeledListItemTerm3()
}

func (c *current) onVerbatimLabeledListItemTerm1(content interface{}) (interface{}, error) {

	return types.NewInlineElements(content)
}

func (p *parser) callonVerbatimLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLabeledListItemTerm1(stack["content"])
}

func (c *current) onLabeledListItemTerm1(elements interface{}) (interface{}, error) {
	// rule as an extra entrypoint
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTerm1(stack["elements"])
}

func (c *current) onLabeledListItemTermElement1(element interface{}) (interface{}, error) {

	return element, nil
}

func (p *parser) callonLabeledListItemTermElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTermElement1(stack["element"])
}

func (c *current) onLabeledListItemSeparator4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonLabeledListItemSeparator4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator4()
}

func (c *current) onLabeledListItemSeparator7(separator interface{}) (bool, error) {

	// use a predicate to make sure that only `::` to `::::` are allowed
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonLabeledListItemSeparator7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator7(stack["separator"])
}

func (c *current) onLabeledListItemSeparator1(separator interface{}) (interface{}, error) {

	return separator, nil
}

func (p *parser) callonLabeledListItemSeparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator1(stack["separator"])
}

func (c *current) onLabeledListItemDescription1(elements interface{}) (interface{}, error) {

	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemDescription1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemDescription1(stack["elements"])
}

func (c *current) onAdmonitionKind2() (interface{}, error) {

	return types.Tip, nil

}

func (p *parser) callonAdmonitionKind2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind2()
}

func (c *current) onAdmonitionKind4() (interface{}, error) {

	return types.Note, nil

}

func (p *parser) callonAdmonitionKind4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind4()
}

func (c *current) onAdmonitionKind6() (interface{}, error) {

	return types.Important, nil

}

func (p *parser) callonAdmonitionKind6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind6()
}

func (c *current) onAdmonitionKind8() (interface{}, error) {

	return types.Warning, nil

}

func (p *parser) callonAdmonitionKind8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind8()
}

func (c *current) onAdmonitionKind10() (interface{}, error) {

	return types.Caution, nil
}

func (p *parser) callonAdmonitionKind10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind10()
}

func (c *current) onParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onParagraph13(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.MarkdownQuote, content.([]interface{}), attributes)

}

func (p *parser) callonParagraph13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph13(stack["attributes"], stack["content"])
}

func (c *current) onParagraph26(attributes interface{}) (bool, error) {

	// verify that one of the attributes is `passthrough`
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, exists := attrs[types.AttrKind]
		return exists && kind == types.Passthrough, nil
	}
	return false, nil

}

func (p *parser) callonParagraph26() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph26(stack["attributes"])
}

func (c *current) onParagraph21(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Passthrough, content.([]interface{}), attributes)

}

func (p *parser) callonParagraph21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph21(stack["attributes"], stack["content"])
}

func (c *current) onParagraph31(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)

}

func (p *parser) callonParagraph31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph31(stack["attributes"], stack["lines"])
}

func (c *current) onMarkdownQuoteBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonMarkdownQuoteBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteBlockVerbatimContent2(stack["content"])
}

func (c *current) onMarkdownQuoteBlockAttribution5() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonMarkdownQuoteBlockAttribution5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteBlockAttribution5()
}

func (c *current) onMarkdownQuoteBlockAttribution1(author interface{}) (interface{}, error) {

	return author, nil
}

func (p *parser) callonMarkdownQuoteBlockAttribution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteBlockAttribution1(stack["author"])
}

func (c *current) onOpenPassthroughParagraphContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonOpenPassthroughParagraphContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpenPassthroughParagraphContent2(stack["content"])
}

func (c *current) onSimpleParagraph6(attributes interface{}) (bool, error) {

	// skip if the '[literal]' attribute was set on this paragraph
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, exists := attrs[types.AttrKind]
		return !exists || kind != types.Literal, nil
	}
	return true, nil

}

func (p *parser) callonSimpleParagraph6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleParagraph6(stack["attributes"])
}

func (c *current) onSimpleParagraph1(attributes, firstLine, otherLines interface{}) (interface{}, error) {

	return types.NewParagraph(append([]interface{}{firstLine}, otherLines.([]interface{})...), attributes)
}

func (p *parser) callonSimpleParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleParagraph1(stack["attributes"], stack["firstLine"], stack["otherLines"])
}

func (c *current) onFirstParagraphLine1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonFirstParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstParagraphLine1(stack["elements"])
}

func (c *current) onOtherParagraphLine1(elements interface{}) (interface{}, error) {

	return elements, nil
}

func (p *parser) callonOtherParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherParagraphLine1(stack["elements"])
}

func (c *current) onContinuedParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonContinuedParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onContinuedParagraph12(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)
}

func (p *parser) callonContinuedParagraph12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedParagraph12(stack["attributes"], stack["lines"])
}

func (c *current) onContinuedParagraphLines1(firstLine, otherLines interface{}) (interface{}, error) {

	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonContinuedParagraphLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedParagraphLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onVerseParagraph7(attributes interface{}) (bool, error) {

	if attrs, ok := attributes.(types.Attributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Verse, nil
	}
	return false, nil

}

func (p *parser) callonVerseParagraph7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph7(stack["attributes"])
}

func (c *current) onVerseParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonVerseParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onVerseParagraph19(attributes interface{}) (bool, error) {

	if attrs, ok := attributes.(types.Attributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Verse, nil
	}
	return false, nil

}

func (p *parser) callonVerseParagraph19() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph19(stack["attributes"])
}

func (c *current) onVerseParagraph14(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)

}

func (p *parser) callonVerseParagraph14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph14(stack["attributes"], stack["lines"])
}

func (c *current) onInlineElements7(comment interface{}) (interface{}, error) {

	return types.NewInlineElements([]interface{}{comment})

}

func (p *parser) callonInlineElements7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements7(stack["comment"])
}

func (c *current) onInlineElements10(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonInlineElements10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements10(stack["elements"])
}

func (c *current) onInlineElements1(elements interface{}) (interface{}, error) {

	return elements, nil

}

func (p *parser) callonInlineElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements1(stack["elements"])
}

func (c *current) onInlineElement1(element interface{}) (interface{}, error) {

	return element, nil
}

func (p *parser) callonInlineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement1(stack["element"])
}

func (c *current) onLineBreak1() (interface{}, error) {

	return types.NewLineBreak()
}

func (p *parser) callonLineBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineBreak1()
}

func (c *current) onConstrainedQuotedText1(text interface{}) (interface{}, error) {
	// if a '^' or '~' is alone (ie, badly formatted superscript or subscript, then accept it as-is)
	return text, nil
}

func (p *parser) callonConstrainedQuotedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstrainedQuotedText1(stack["text"])
}

func (c *current) onSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	// rule used withn `words` to detect superscript or subscript portions, eg in math formulae.
	return string(c.text), nil
}

func (p *parser) callonSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptOrSuperscriptPrefix3()
}

func (c *current) onOneOrMoreBackslashes1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonOneOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOneOrMoreBackslashes1()
}

func (c *current) onTwoOrMoreBackslashes1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonTwoOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTwoOrMoreBackslashes1()
}

func (c *current) onDoubleQuoteBoldText1(attrs, elements interface{}) (interface{}, error) {

	return types.NewQuotedText(types.Bold, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteBoldTextStringElement1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteBoldTextStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextStringElement1()
}

func (c *current) onDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onSingleQuoteBoldText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '**' to emphazise a portion of a word)
	return types.NewQuotedText(types.Bold, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteBoldText17(attrs, elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation.
	return types.NewQuotedText(types.Bold, attrs, elements.([]interface{})) // include the second heading `*` as a regular StringElement in the bold content
}

func (p *parser) callonSingleQuoteBoldText17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText17(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteBoldTextStringElement1() (interface{}, error) {
	// anything except EOL, space, bold and subscript/superscript delimiters and brackets. Excludes curly brackets to match with AttributeSubstitution elements
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteBoldTextStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextStringElement1()
}

func (c *current) onSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onEscapedBoldText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "**", elements.([]interface{}))

}

func (p *parser) callonEscapedBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation
	result := append([]interface{}{"*"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "*", result)

}

func (p *parser) callonEscapedBoldText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "*", elements.([]interface{}))
}

func (p *parser) callonEscapedBoldText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicText1(attrs, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Italic, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicTextStringElement1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteItalicTextStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextStringElement1()
}

func (c *current) onDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or a italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onSingleQuoteItalicText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '__' to emphazise a portion of a word)
	return types.NewQuotedText(types.Italic, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteItalicText14(attrs, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation.
	return types.NewQuotedText(types.Italic, attrs, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content
}

func (p *parser) callonSingleQuoteItalicText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText14(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteItalicTextStringElement1() (interface{}, error) {
	// anything except EOL, space, bold and subscript/superscript delimiters and brackets. Excludes curly brackets to match with AttributeSubstitution elements
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteItalicTextStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextStringElement1()
}

func (c *current) onSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or an italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onEscapedItalicText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "__", elements.([]interface{}))

}

func (p *parser) callonEscapedItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation
	result := append([]interface{}{"_"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "_", result)

}

func (p *parser) callonEscapedItalicText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "_", elements.([]interface{}))
}

func (p *parser) callonEscapedItalicText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceText1(attrs, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Monospace, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceTextStringElement1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteMonospaceTextStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextStringElement1()
}

func (c *current) onDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	// or a monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextFallbackCharacter3()
}

func (c *current) onSingleQuoteMonospaceText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs "``" to emphazise a portion of a word)
	return types.NewQuotedText(types.Monospace, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMonospaceText14(attrs, elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation.
	return types.NewQuotedText(types.Monospace, attrs, elements.([]interface{})) // include the second heading "`" as a regular StringElement in the monospace content
}

func (p *parser) callonSingleQuoteMonospaceText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText14(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMonospaceTextStringElement1() (interface{}, error) {
	// anything except EOL, space, monospace and subscript/superscript delimiters. Excludes curly brackets to match with AttributeSubstitution elements
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteMonospaceTextStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextStringElement1()
}

func (c *current) onSingleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	// or an monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextFallbackCharacter3()
}

func (c *current) onEscapedMonospaceText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "``", elements.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation
	result := append([]interface{}{"`"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "`", result)

}

func (p *parser) callonEscapedMonospaceText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "`", elements.([]interface{}))
}

func (p *parser) callonEscapedMonospaceText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMarkedText1(attrs, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Marked, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteMarkedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteMarkedTextStringElement1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteMarkedTextStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextStringElement1()
}

func (c *current) onDoubleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	// or a marked delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextFallbackCharacter3()
}

func (c *current) onSingleQuoteMarkedText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '##' to emphazise a portion of a word)
	return types.NewQuotedText(types.Marked, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMarkedText14(attrs, elements interface{}) (interface{}, error) {
	// unbalanced `##` vs `#` punctuation.
	return types.NewQuotedText(types.Marked, attrs, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content
}

func (p *parser) callonSingleQuoteMarkedText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText14(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMarkedTextStringElement1() (interface{}, error) {
	// anything except EOL, space, bold and subscript/superscript delimiters and brackets. Excludes curly brackets to match with AttributeSubstitution elements
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteMarkedTextStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextStringElement1()
}

func (c *current) onSingleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	// or a mark delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextFallbackCharacter3()
}

func (c *current) onEscapedMarkedText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "##", elements.([]interface{}))

}

func (p *parser) callonEscapedMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `##` vs `#` punctuation
	result := append([]interface{}{"#"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "#", result)

}

func (p *parser) callonEscapedMarkedText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "#", elements.([]interface{}))
}

func (p *parser) callonEscapedMarkedText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText18(stack["backslashes"], stack["elements"])
}

func (c *current) onSubscriptText1(attrs, element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Subscript, attrs, element)
}

func (p *parser) callonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptText1(stack["attrs"], stack["element"])
}

func (c *current) onNonSubscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '~'
	return c.text, nil
}

func (p *parser) callonNonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSubscriptText1()
}

func (c *current) onEscapedSubscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "~", element)
}

func (p *parser) callonEscapedSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSuperscriptText1(attrs, element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Superscript, attrs, element)
}

func (p *parser) callonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptText1(stack["attrs"], stack["element"])
}

func (c *current) onNonSuperscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '^'
	return c.text, nil
}

func (p *parser) callonNonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSuperscriptText1()
}

func (c *current) onEscapedSuperscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "^", element)
}

func (p *parser) callonEscapedSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSinglePlusPassthrough1(content interface{}) (interface{}, error) {

	return types.NewInlinePassthrough(types.SinglePlusPassthrough, []interface{}{content})
}

func (p *parser) callonSinglePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthrough1(stack["content"])
}

func (c *current) onSinglePlusPassthroughContent2() (interface{}, error) {
	// no space in the first or last position of the content, but allowed elsewhere
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent2()
}

func (c *current) onSinglePlusPassthroughContent24() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent24()
}

func (c *current) onTriplePlusPassthrough1(content interface{}) (interface{}, error) {

	return types.NewInlinePassthrough(types.TriplePlusPassthrough, []interface{}{content})
}

func (p *parser) callonTriplePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthrough1(stack["content"])
}

func (c *current) onTriplePlusPassthroughContent2() (interface{}, error) {
	// spaces and newlines are also allowed in the first or last position of the content and elsewhere too
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent2()
}

func (c *current) onTriplePlusPassthroughContent8() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent8()
}

func (c *current) onPassthroughMacro2(content interface{}) (interface{}, error) {

	return types.NewInlinePassthrough(types.PassthroughMacro, []interface{}{content})
}

func (p *parser) callonPassthroughMacro2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro2(stack["content"])
}

func (c *current) onPassthroughMacro9(content interface{}) (interface{}, error) {

	return types.NewInlinePassthrough(types.PassthroughMacro, content.([]interface{}))
}

func (p *parser) callonPassthroughMacro9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro9(stack["content"])
}

func (c *current) onPassthroughMacroCharacter1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonPassthroughMacroCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacroCharacter1()
}

func (c *current) onInternalCrossReference2(id, label interface{}) (interface{}, error) {

	return types.NewInternalCrossReference(id.(string), label.(string))
}

func (p *parser) callonInternalCrossReference2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference2(stack["id"], stack["label"])
}

func (c *current) onInternalCrossReference13(id interface{}) (interface{}, error) {

	return types.NewInternalCrossReference(id.(string), nil)
}

func (p *parser) callonInternalCrossReference13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference13(stack["id"])
}

func (c *current) onExternalCrossReference1(url, inlineAttributes interface{}) (interface{}, error) {

	return types.NewExternalCrossReference(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonExternalCrossReference1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {

	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {

	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onLinkAttributes1(firstAttr, otherattrs interface{}) (interface{}, error) {

	return types.NewInlineLinkAttributes(append(firstAttr.([]interface{}), otherattrs.([]interface{})...))
}

func (p *parser) callonLinkAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkAttributes1(stack["firstAttr"], stack["otherattrs"])
}

func (c *current) onFirstLinkAttributeElement4(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFirstLinkAttributeElement4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement4(stack["elements"])
}

func (c *current) onFirstLinkAttributeElement19(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFirstLinkAttributeElement19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement19(stack["elements"])
}

func (c *current) onFirstLinkAttributeElement1(element interface{}) (interface{}, error) {

	return element, nil
}

func (p *parser) callonFirstLinkAttributeElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement1(stack["element"])
}

func (c *current) onAttributeChar1() (interface{}, error) {
	// excludes comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeChar1()
}

func (c *current) onQuotedAttributeChar1() (interface{}, error) {
	// does not exclude comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonQuotedAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedAttributeChar1()
}

func (c *current) onUnquotedAttributeChar1() (interface{}, error) {
	// excludes comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonUnquotedAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeChar1()
}

func (c *current) onInlineLinks1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonInlineLinks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineLinks1(stack["elements"])
}

func (c *current) onResolvedRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {

	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonResolvedRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onResolvedExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {

	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonResolvedExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onImageBlock1(attributes, path, inlineAttributes interface{}) (interface{}, error) {

	return types.NewImageBlock(path.(types.Location), inlineAttributes.(types.Attributes), attributes)
}

func (p *parser) callonImageBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock1(stack["attributes"], stack["path"], stack["inlineAttributes"])
}

func (c *current) onInlineImage1(path, inlineAttributes interface{}) (interface{}, error) {

	return types.NewInlineImage(path.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonInlineImage1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage1(stack["path"], stack["inlineAttributes"])
}

func (c *current) onImageAttributes1(alt, width, height, otherattrs interface{}) (interface{}, error) {

	return types.NewImageAttributes(alt, width, height, otherattrs.([]interface{}))
}

func (p *parser) callonImageAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAttributes1(stack["alt"], stack["width"], stack["height"], stack["otherattrs"])
}

func (c *current) onInlineIcon5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineIcon5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon5()
}

func (c *current) onInlineIcon1(iconClass, inlineAttributes interface{}) (interface{}, error) {

	return types.NewIcon(iconClass.(string), inlineAttributes.(types.Attributes))
}

func (p *parser) callonInlineIcon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon1(stack["iconClass"], stack["inlineAttributes"])
}

func (c *current) onIconAttributes1(size, others interface{}) (interface{}, error) {

	return types.NewIconAttributes(size, others.([]interface{}))
}

func (p *parser) callonIconAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIconAttributes1(stack["size"], stack["others"])
}

func (c *current) onInlineFootnote2(content interface{}) (interface{}, error) {

	return types.NewFootnote("", content.([]interface{}))
}

func (p *parser) callonInlineFootnote2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote2(stack["content"])
}

func (c *current) onInlineFootnote8(ref, content interface{}) (interface{}, error) {

	return types.NewFootnote(ref.(string), content)
}

func (p *parser) callonInlineFootnote8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote8(stack["ref"], stack["content"])
}

func (c *current) onFootnoteContent1(elements interface{}) (interface{}, error) {
	// footnote content may span multiple lines
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonFootnoteContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteContent1(stack["elements"])
}

func (c *current) onDelimitedBlock1(block interface{}) (interface{}, error) {

	return block, nil
}

func (p *parser) callonDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock1(stack["block"])
}

func (c *current) onVerbatimLine1(content, callouts interface{}) (interface{}, error) {

	return types.NewVerbatimLine(content.(string), callouts)
}

func (p *parser) callonVerbatimLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLine1(stack["content"], stack["callouts"])
}

func (c *current) onVerbatimLineContent1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonVerbatimLineContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLineContent1()
}

func (c *current) onCallout5() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCallout5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout5()
}

func (c *current) onCallout1(ref interface{}) (interface{}, error) {

	return types.NewCallout(ref.(int))
}

func (p *parser) callonCallout1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout1(stack["ref"])
}

func (c *current) onCalloutListItem1(ref, description interface{}) (interface{}, error) {

	return types.NewCalloutListItem(ref.(int), description.([]interface{}))
}

func (p *parser) callonCalloutListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItem1(stack["ref"], stack["description"])
}

func (c *current) onCalloutListItemPrefix5() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCalloutListItemPrefix5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItemPrefix5()
}

func (c *current) onCalloutListItemPrefix1(ref interface{}) (interface{}, error) {

	return ref, nil
}

func (p *parser) callonCalloutListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItemPrefix1(stack["ref"])
}

func (c *current) onFencedBlock1(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Fenced, content.([]interface{}), attributes)
}

func (p *parser) callonFencedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlock1(stack["attributes"], stack["content"])
}

func (c *current) onFencedBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonFencedBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockVerbatimContent2(stack["content"])
}

func (c *current) onListingBlock1(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Listing, content.([]interface{}), attributes)
}

func (p *parser) callonListingBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlock1(stack["attributes"], stack["content"])
}

func (c *current) onListingBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonListingBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockVerbatimContent2(stack["content"])
}

func (c *current) onExampleBlock1(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Example, content.([]interface{}), attributes)
}

func (p *parser) callonExampleBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlock1(stack["attributes"], stack["content"])
}

func (c *current) onExampleBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonExampleBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockVerbatimContent2(stack["content"])
}

func (c *current) onQuoteBlock1(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Quote, content.([]interface{}), attributes)
}

func (p *parser) callonQuoteBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlock1(stack["attributes"], stack["content"])
}

func (c *current) onQuoteBlockVerbatimElement2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonQuoteBlockVerbatimElement2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockVerbatimElement2(stack["content"])
}

func (c *current) onVerseBlock5(attributes interface{}) (bool, error) {

	kind, found := attributes.(types.Attributes).GetAsString("kind") // once we got the attributes, check that `[verse]`  was set
	return found && kind == "verse", nil

}

func (p *parser) callonVerseBlock5() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlock5(stack["attributes"])
}

func (c *current) onVerseBlock1(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Verse, content.([]interface{}), attributes)

}

func (p *parser) callonVerseBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlock1(stack["attributes"], stack["content"])
}

func (c *current) onVerseBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonVerseBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockVerbatimContent2(stack["content"])
}

func (c *current) onSidebarBlock1(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Sidebar, content.([]interface{}), attributes)
}

func (p *parser) callonSidebarBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlock1(stack["attributes"], stack["content"])
}

func (c *current) onSidebarBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonSidebarBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockVerbatimContent2(stack["content"])
}

func (c *current) onPassthroughBlock1(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Passthrough, content.([]interface{}), attributes)
}

func (p *parser) callonPassthroughBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlock1(stack["attributes"], stack["content"])
}

func (c *current) onPassthroughBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonPassthroughBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockVerbatimContent2(stack["content"])
}

func (c *current) onThematicBreak1() (interface{}, error) {

	return types.NewThematicBreak()
}

func (p *parser) callonThematicBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onThematicBreak1()
}

func (c *current) onNormalBlockElement1(element interface{}) (interface{}, error) {

	return element, nil

}

func (p *parser) callonNormalBlockElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalBlockElement1(stack["element"])
}

func (c *current) onVerseBlockElement1(element interface{}) (interface{}, error) {

	return element, nil
}

func (p *parser) callonVerseBlockElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockElement1(stack["element"])
}

func (c *current) onVerseBlockParagraph1(lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), nil)
}

func (p *parser) callonVerseBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraph1(stack["lines"])
}

func (c *current) onVerseBlockParagraphLine1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements)
}

func (p *parser) callonVerseBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraphLine1(stack["elements"])
}

func (c *current) onTable1(attributes, header, lines interface{}) (interface{}, error) {
	// end delimiter or end of file
	return types.NewTable(header, lines.([]interface{}), attributes)
}

func (p *parser) callonTable1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTable1(stack["attributes"], stack["header"], stack["lines"])
}

func (c *current) onTableLineHeader1(cells interface{}) (interface{}, error) {

	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLineHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLineHeader1(stack["cells"])
}

func (c *current) onTableLine1(cells interface{}) (interface{}, error) {

	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLine1(stack["cells"])
}

func (c *current) onTableCell1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements)
}

func (p *parser) callonTableCell1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCell1(stack["elements"])
}

func (c *current) onCommentBlock1(content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Comment, content.([]interface{}), nil)
}

func (p *parser) callonCommentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlock1(stack["content"])
}

func (c *current) onCommentBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonCommentBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlockVerbatimContent2(stack["content"])
}

func (c *current) onSingleLineComment1(content interface{}) (interface{}, error) {

	return types.NewSingleLineComment(content.(string))
}

func (p *parser) callonSingleLineComment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineComment1(stack["content"])
}

func (c *current) onSingleLineCommentContent1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonSingleLineCommentContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineCommentContent1()
}

func (c *current) onParagraphWithHeadingSpaces1(attributes, lines interface{}) (interface{}, error) {

	return types.NewLiteralBlock(types.LiteralBlockWithSpacesOnFirstLine, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithHeadingSpaces1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpaces1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithHeadingSpacesLines4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines4()
}

func (c *current) onParagraphWithHeadingSpacesLines18() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines18()
}

func (c *current) onParagraphWithHeadingSpacesLines13(otherLine interface{}) (interface{}, error) {

	return otherLine, nil // do not include the trailing 'EOL'

}

func (p *parser) callonParagraphWithHeadingSpacesLines13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines13(stack["otherLine"])
}

func (c *current) onParagraphWithHeadingSpacesLines1(firstLine, otherLines interface{}) (interface{}, error) {

	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonParagraphWithHeadingSpacesLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiter1(attributes, lines interface{}) (interface{}, error) {

	return types.NewLiteralBlock(types.LiteralBlockWithDelimiter, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithLiteralBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiter1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLines1(lines interface{}) (interface{}, error) {

	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine4()
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine1(line interface{}) (interface{}, error) {

	return line, nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine1(stack["line"])
}

func (c *current) onParagraphWithLiteralAttribute6(attributes interface{}) (bool, error) {

	if attrs, ok := attributes.(types.Attributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Literal, nil
	}
	return false, nil

}

func (p *parser) callonParagraphWithLiteralAttribute6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute6(stack["attributes"])
}

func (c *current) onParagraphWithLiteralAttribute1(attributes, lines interface{}) (interface{}, error) {

	return types.NewLiteralBlock(types.LiteralBlockWithAttribute, lines.([]interface{}), attributes)

}

func (p *parser) callonParagraphWithLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute1(stack["attributes"], stack["lines"])
}

func (c *current) onLiteralKind1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonLiteralKind1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralKind1()
}

func (c *current) onParagraphWithLiteralAttributeLines1(lines interface{}) (interface{}, error) {

	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralAttributeLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralAttributeLine6() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonParagraphWithLiteralAttributeLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLine6()
}

func (c *current) onParagraphWithLiteralAttributeLine1(content interface{}) (interface{}, error) {

	return content.(string), nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralAttributeLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLine1(stack["content"])
}

func (c *current) onIndexTerm1(term interface{}) (interface{}, error) {

	return types.NewIndexTerm(term.([]interface{}))
}

func (p *parser) callonIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTerm1(stack["term"])
}

func (c *current) onIndexTermContent9() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonIndexTermContent9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent9()
}

func (c *current) onIndexTermContent1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent1(stack["elements"])
}

func (c *current) onConcealedIndexTerm8(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm8(stack["content"])
}

func (c *current) onConcealedIndexTerm19(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm19(stack["content"])
}

func (c *current) onConcealedIndexTerm1(term1, term2, term3 interface{}) (interface{}, error) {

	return types.NewConcealedIndexTerm(term1, term2, term3)

}

func (p *parser) callonConcealedIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm1(stack["term1"], stack["term2"], stack["term3"])
}

func (c *current) onConcealedIndexTermContent1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonConcealedIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTermContent1()
}

func (c *current) onBlankLine1() (interface{}, error) {

	return types.NewBlankLine()
}

func (p *parser) callonBlankLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlankLine1()
}

func (c *current) onAlphanums1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonAlphanums1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAlphanums1()
}

func (c *current) onWord2() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord2()
}

func (c *current) onWord10() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord10()
}

func (c *current) onInlineWord2() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineWord2()
}

func (c *current) onAnyChar1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonAnyChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyChar1()
}

func (c *current) onFileLocation1(path interface{}) (interface{}, error) {

	return types.NewLocation("", path.([]interface{}))
}

func (p *parser) callonFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation1(stack["path"])
}

func (c *current) onResolvedFileLocation1(path interface{}) (interface{}, error) {

	return types.NewLocation("", path.([]interface{}))
}

func (p *parser) callonResolvedFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedFileLocation1(stack["path"])
}

func (c *current) onLocation1(scheme, path interface{}) (interface{}, error) {

	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocation1(stack["scheme"], stack["path"])
}

func (c *current) onLocationWithScheme1(scheme, path interface{}) (interface{}, error) {

	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonLocationWithScheme1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocationWithScheme1(stack["scheme"], stack["path"])
}

func (c *current) onResolvedLocation1(scheme, path interface{}) (interface{}, error) {

	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonResolvedLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedLocation1(stack["scheme"], stack["path"])
}

func (c *current) onURL1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonURL1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURL1()
}

func (c *current) onID1() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil
}

func (p *parser) callonID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onID1()
}

func (c *current) onDIGIT1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonDIGIT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDIGIT1()
}

func (c *current) onNUMBER1() (interface{}, error) {

	return strconv.Atoi(string(c.text))
}

func (p *parser) callonNUMBER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNUMBER1()
}

func (c *current) onSpace3() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonSpace3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpace3()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			return val, ok
		}
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}
