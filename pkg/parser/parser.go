// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/bytesparadise/libasciidoc/pkg/types"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "AsciidocDocument",
			pos:  position{line: 17, col: 1, offset: 348},
			expr: &actionExpr{
				pos: position{line: 17, col: 21, offset: 368},
				run: (*parser).callonAsciidocDocument1,
				expr: &seqExpr{
					pos: position{line: 17, col: 21, offset: 368},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 17, col: 21, offset: 368},
							label: "frontmatter",
							expr: &zeroOrOneExpr{
								pos: position{line: 17, col: 34, offset: 381},
								expr: &ruleRefExpr{
									pos:  position{line: 17, col: 34, offset: 381},
									name: "FrontMatter",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 17, col: 48, offset: 395},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 17, col: 56, offset: 403},
								name: "AsciidocDocumentBlocks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 17, col: 80, offset: 427},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "VerbatimDocument",
			pos:  position{line: 21, col: 1, offset: 511},
			expr: &actionExpr{
				pos: position{line: 21, col: 21, offset: 531},
				run: (*parser).callonVerbatimDocument1,
				expr: &seqExpr{
					pos: position{line: 21, col: 21, offset: 531},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 21, col: 21, offset: 531},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 21, col: 29, offset: 539},
								name: "VerbatimFileContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 21, col: 50, offset: 560},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "TextDocument",
			pos:  position{line: 26, col: 1, offset: 665},
			expr: &actionExpr{
				pos: position{line: 26, col: 17, offset: 681},
				run: (*parser).callonTextDocument1,
				expr: &seqExpr{
					pos: position{line: 26, col: 17, offset: 681},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 26, col: 17, offset: 681},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 26, col: 25, offset: 689},
								name: "TextDocumentBlocks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 26, col: 45, offset: 709},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "AsciidocDocumentBlocks",
			pos:  position{line: 33, col: 1, offset: 899},
			expr: &actionExpr{
				pos: position{line: 33, col: 27, offset: 925},
				run: (*parser).callonAsciidocDocumentBlocks1,
				expr: &seqExpr{
					pos: position{line: 33, col: 27, offset: 925},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 33, col: 27, offset: 925},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 33, col: 35, offset: 933},
								expr: &ruleRefExpr{
									pos:  position{line: 33, col: 35, offset: 933},
									name: "DocumentHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 33, col: 52, offset: 950},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 33, col: 60, offset: 958},
								expr: &ruleRefExpr{
									pos:  position{line: 33, col: 60, offset: 958},
									name: "DocumentBlock",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentBlock",
			pos:  position{line: 42, col: 1, offset: 1216},
			expr: &choiceExpr{
				pos: position{line: 43, col: 9, offset: 1243},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 43, col: 9, offset: 1243},
						name: "LabeledListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 44, col: 11, offset: 1309},
						name: "SimpleParagraph",
					},
					&ruleRefExpr{
						pos:  position{line: 45, col: 11, offset: 1336},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 46, col: 11, offset: 1389},
						name: "Section",
					},
					&ruleRefExpr{
						pos:  position{line: 47, col: 11, offset: 1408},
						name: "DelimitedBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 48, col: 11, offset: 1434},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 49, col: 11, offset: 1459},
						name: "VerseParagraph",
					},
					&ruleRefExpr{
						pos:  position{line: 50, col: 11, offset: 1514},
						name: "ImageBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 51, col: 11, offset: 1537},
						name: "OrderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 52, col: 11, offset: 1565},
						name: "UnorderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 53, col: 11, offset: 1595},
						name: "CalloutListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 54, col: 11, offset: 1622},
						name: "ContinuedListItemElement",
					},
					&ruleRefExpr{
						pos:  position{line: 55, col: 11, offset: 1658},
						name: "LiteralBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 56, col: 11, offset: 1683},
						name: "AttributeDeclaration",
					},
					&ruleRefExpr{
						pos:  position{line: 57, col: 11, offset: 1716},
						name: "AttributeReset",
					},
					&ruleRefExpr{
						pos:  position{line: 58, col: 11, offset: 1743},
						name: "TableOfContentsPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 59, col: 11, offset: 1781},
						name: "UserMacroBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 60, col: 11, offset: 1807},
						name: "StandaloneAttributes",
					},
					&ruleRefExpr{
						pos:  position{line: 61, col: 11, offset: 1839},
						name: "Paragraph",
					},
				},
			},
		},
		{
			name: "AsciidocDocumentBlocksWithinDelimitedBlock",
			pos:  position{line: 63, col: 1, offset: 1852},
			expr: &labeledExpr{
				pos:   position{line: 63, col: 47, offset: 1898},
				label: "blocks",
				expr: &zeroOrMoreExpr{
					pos: position{line: 63, col: 54, offset: 1905},
					expr: &ruleRefExpr{
						pos:  position{line: 63, col: 55, offset: 1906},
						name: "DocumentBlockWithinDelimitedBlock",
					},
				},
			},
		},
		{
			name: "DocumentBlockWithinDelimitedBlock",
			pos:  position{line: 65, col: 1, offset: 1945},
			expr: &actionExpr{
				pos: position{line: 65, col: 38, offset: 1982},
				run: (*parser).callonDocumentBlockWithinDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 65, col: 38, offset: 1982},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 65, col: 38, offset: 1982},
							expr: &ruleRefExpr{
								pos:  position{line: 65, col: 39, offset: 1983},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 66, col: 5, offset: 1993},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 66, col: 12, offset: 2000},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 66, col: 12, offset: 2000},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 67, col: 11, offset: 2026},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 68, col: 11, offset: 2079},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 69, col: 11, offset: 2104},
										name: "VerseParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 70, col: 11, offset: 2130},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 71, col: 11, offset: 2153},
										name: "OrderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 72, col: 11, offset: 2181},
										name: "UnorderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 73, col: 11, offset: 2211},
										name: "LabeledListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 74, col: 11, offset: 2239},
										name: "ContinuedListItemElement",
									},
									&ruleRefExpr{
										pos:  position{line: 75, col: 11, offset: 2275},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 76, col: 11, offset: 2300},
										name: "AttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 77, col: 11, offset: 2333},
										name: "AttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 78, col: 11, offset: 2360},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 79, col: 11, offset: 2398},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 80, col: 11, offset: 2424},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TextDocumentBlocks",
			pos:  position{line: 84, col: 1, offset: 2466},
			expr: &labeledExpr{
				pos:   position{line: 84, col: 23, offset: 2488},
				label: "blocks",
				expr: &zeroOrMoreExpr{
					pos: position{line: 84, col: 30, offset: 2495},
					expr: &ruleRefExpr{
						pos:  position{line: 84, col: 31, offset: 2496},
						name: "TextDocumentBlock",
					},
				},
			},
		},
		{
			name: "TextDocumentBlock",
			pos:  position{line: 86, col: 1, offset: 2519},
			expr: &actionExpr{
				pos: position{line: 86, col: 22, offset: 2540},
				run: (*parser).callonTextDocumentBlock1,
				expr: &seqExpr{
					pos: position{line: 86, col: 22, offset: 2540},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 86, col: 22, offset: 2540},
							expr: &ruleRefExpr{
								pos:  position{line: 86, col: 23, offset: 2541},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 87, col: 5, offset: 2551},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 87, col: 12, offset: 2558},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 87, col: 12, offset: 2558},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 87, col: 24, offset: 2570},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FrontMatter",
			pos:  position{line: 94, col: 1, offset: 2723},
			expr: &ruleRefExpr{
				pos:  position{line: 94, col: 16, offset: 2738},
				name: "YamlFrontMatter",
			},
		},
		{
			name: "YamlFrontMatter",
			pos:  position{line: 96, col: 1, offset: 2758},
			expr: &actionExpr{
				pos: position{line: 96, col: 20, offset: 2777},
				run: (*parser).callonYamlFrontMatter1,
				expr: &seqExpr{
					pos: position{line: 96, col: 20, offset: 2777},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 96, col: 20, offset: 2777},
							name: "YamlFrontMatterToken",
						},
						&labeledExpr{
							pos:   position{line: 96, col: 41, offset: 2798},
							label: "content",
							expr: &zeroOrOneExpr{
								pos: position{line: 96, col: 49, offset: 2806},
								expr: &ruleRefExpr{
									pos:  position{line: 96, col: 50, offset: 2807},
									name: "YamlFrontMatterContent",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 96, col: 75, offset: 2832},
							name: "YamlFrontMatterToken",
						},
					},
				},
			},
		},
		{
			name: "YamlFrontMatterToken",
			pos:  position{line: 100, col: 1, offset: 2916},
			expr: &seqExpr{
				pos: position{line: 100, col: 26, offset: 2941},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 100, col: 26, offset: 2941},
						val:        "---",
						ignoreCase: false,
						want:       "\"---\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 100, col: 32, offset: 2947},
						expr: &ruleRefExpr{
							pos:  position{line: 100, col: 32, offset: 2947},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 100, col: 39, offset: 2954},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "YamlFrontMatterContent",
			pos:  position{line: 102, col: 1, offset: 2961},
			expr: &actionExpr{
				pos: position{line: 102, col: 27, offset: 2987},
				run: (*parser).callonYamlFrontMatterContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 102, col: 27, offset: 2987},
					expr: &oneOrMoreExpr{
						pos: position{line: 102, col: 28, offset: 2988},
						expr: &seqExpr{
							pos: position{line: 102, col: 29, offset: 2989},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 102, col: 29, offset: 2989},
									expr: &ruleRefExpr{
										pos:  position{line: 102, col: 30, offset: 2990},
										name: "YamlFrontMatterToken",
									},
								},
								&anyMatcher{
									line: 102, col: 51, offset: 3011,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentHeader",
			pos:  position{line: 109, col: 1, offset: 3184},
			expr: &actionExpr{
				pos: position{line: 109, col: 19, offset: 3202},
				run: (*parser).callonDocumentHeader1,
				expr: &seqExpr{
					pos: position{line: 109, col: 19, offset: 3202},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 109, col: 19, offset: 3202},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 109, col: 23, offset: 3206},
							expr: &ruleRefExpr{
								pos:  position{line: 109, col: 23, offset: 3206},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 109, col: 30, offset: 3213},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 109, col: 37, offset: 3220},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 109, col: 52, offset: 3235},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 109, col: 56, offset: 3239},
								expr: &ruleRefExpr{
									pos:  position{line: 109, col: 56, offset: 3239},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 109, col: 74, offset: 3257},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 110, col: 9, offset: 3270},
							expr: &choiceExpr{
								pos: position{line: 110, col: 10, offset: 3271},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 110, col: 10, offset: 3271},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 110, col: 30, offset: 3291},
										name: "CommentBlock",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 111, col: 9, offset: 3315},
							label: "authors",
							expr: &zeroOrOneExpr{
								pos: position{line: 111, col: 18, offset: 3324},
								expr: &ruleRefExpr{
									pos:  position{line: 111, col: 18, offset: 3324},
									name: "DocumentAuthors",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 112, col: 9, offset: 3352},
							expr: &choiceExpr{
								pos: position{line: 112, col: 10, offset: 3353},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 112, col: 10, offset: 3353},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 112, col: 30, offset: 3373},
										name: "CommentBlock",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 113, col: 9, offset: 3397},
							label: "revision",
							expr: &zeroOrOneExpr{
								pos: position{line: 113, col: 19, offset: 3407},
								expr: &ruleRefExpr{
									pos:  position{line: 113, col: 19, offset: 3407},
									name: "DocumentRevision",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthors",
			pos:  position{line: 117, col: 1, offset: 3512},
			expr: &choiceExpr{
				pos: position{line: 117, col: 20, offset: 3531},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 117, col: 20, offset: 3531},
						name: "DocumentAuthorsInlineForm",
					},
					&ruleRefExpr{
						pos:  position{line: 117, col: 48, offset: 3559},
						name: "DocumentAuthorsAttributeForm",
					},
				},
			},
		},
		{
			name: "DocumentAuthorsInlineForm",
			pos:  position{line: 119, col: 1, offset: 3591},
			expr: &actionExpr{
				pos: position{line: 119, col: 30, offset: 3620},
				run: (*parser).callonDocumentAuthorsInlineForm1,
				expr: &seqExpr{
					pos: position{line: 119, col: 30, offset: 3620},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 119, col: 30, offset: 3620},
							expr: &ruleRefExpr{
								pos:  position{line: 119, col: 30, offset: 3620},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 119, col: 37, offset: 3627},
							expr: &litMatcher{
								pos:        position{line: 119, col: 38, offset: 3628},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 119, col: 42, offset: 3632},
							label: "authors",
							expr: &oneOrMoreExpr{
								pos: position{line: 119, col: 51, offset: 3641},
								expr: &ruleRefExpr{
									pos:  position{line: 119, col: 51, offset: 3641},
									name: "DocumentAuthor",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 119, col: 68, offset: 3658},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorsAttributeForm",
			pos:  position{line: 123, col: 1, offset: 3732},
			expr: &actionExpr{
				pos: position{line: 123, col: 33, offset: 3764},
				run: (*parser).callonDocumentAuthorsAttributeForm1,
				expr: &seqExpr{
					pos: position{line: 123, col: 33, offset: 3764},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 123, col: 33, offset: 3764},
							expr: &ruleRefExpr{
								pos:  position{line: 123, col: 33, offset: 3764},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 123, col: 40, offset: 3771},
							val:        ":author:",
							ignoreCase: false,
							want:       "\":author:\"",
						},
						&labeledExpr{
							pos:   position{line: 123, col: 51, offset: 3782},
							label: "author",
							expr: &ruleRefExpr{
								pos:  position{line: 123, col: 59, offset: 3790},
								name: "DocumentAuthor",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 123, col: 75, offset: 3806},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthor",
			pos:  position{line: 127, col: 1, offset: 3889},
			expr: &actionExpr{
				pos: position{line: 127, col: 19, offset: 3907},
				run: (*parser).callonDocumentAuthor1,
				expr: &seqExpr{
					pos: position{line: 127, col: 19, offset: 3907},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 127, col: 19, offset: 3907},
							expr: &ruleRefExpr{
								pos:  position{line: 127, col: 19, offset: 3907},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 127, col: 26, offset: 3914},
							label: "fullname",
							expr: &ruleRefExpr{
								pos:  position{line: 127, col: 36, offset: 3924},
								name: "DocumentAuthorName",
							},
						},
						&labeledExpr{
							pos:   position{line: 127, col: 56, offset: 3944},
							label: "email",
							expr: &zeroOrOneExpr{
								pos: position{line: 127, col: 62, offset: 3950},
								expr: &ruleRefExpr{
									pos:  position{line: 127, col: 63, offset: 3951},
									name: "DocumentAuthorEmail",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 127, col: 85, offset: 3973},
							expr: &ruleRefExpr{
								pos:  position{line: 127, col: 85, offset: 3973},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 127, col: 92, offset: 3980},
							expr: &litMatcher{
								pos:        position{line: 127, col: 92, offset: 3980},
								val:        ";",
								ignoreCase: false,
								want:       "\";\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 127, col: 97, offset: 3985},
							expr: &ruleRefExpr{
								pos:  position{line: 127, col: 97, offset: 3985},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorName",
			pos:  position{line: 132, col: 1, offset: 4135},
			expr: &actionExpr{
				pos: position{line: 132, col: 23, offset: 4157},
				run: (*parser).callonDocumentAuthorName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 132, col: 23, offset: 4157},
					expr: &charClassMatcher{
						pos:        position{line: 132, col: 23, offset: 4157},
						val:        "[^<;\\r\\n]",
						chars:      []rune{'<', ';', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentAuthorEmail",
			pos:  position{line: 136, col: 1, offset: 4208},
			expr: &actionExpr{
				pos: position{line: 136, col: 24, offset: 4231},
				run: (*parser).callonDocumentAuthorEmail1,
				expr: &seqExpr{
					pos: position{line: 136, col: 24, offset: 4231},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 136, col: 24, offset: 4231},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 136, col: 28, offset: 4235},
							label: "email",
							expr: &actionExpr{
								pos: position{line: 136, col: 35, offset: 4242},
								run: (*parser).callonDocumentAuthorEmail5,
								expr: &oneOrMoreExpr{
									pos: position{line: 136, col: 36, offset: 4243},
									expr: &charClassMatcher{
										pos:        position{line: 136, col: 36, offset: 4243},
										val:        "[^>\\r\\n]",
										chars:      []rune{'>', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 138, col: 4, offset: 4292},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevision",
			pos:  position{line: 144, col: 1, offset: 4459},
			expr: &actionExpr{
				pos: position{line: 144, col: 21, offset: 4479},
				run: (*parser).callonDocumentRevision1,
				expr: &seqExpr{
					pos: position{line: 144, col: 21, offset: 4479},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 144, col: 21, offset: 4479},
							expr: &ruleRefExpr{
								pos:  position{line: 144, col: 21, offset: 4479},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 144, col: 28, offset: 4486},
							expr: &litMatcher{
								pos:        position{line: 144, col: 29, offset: 4487},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 144, col: 33, offset: 4491},
							label: "revision",
							expr: &choiceExpr{
								pos: position{line: 145, col: 9, offset: 4511},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 145, col: 10, offset: 4512},
										run: (*parser).callonDocumentRevision9,
										expr: &seqExpr{
											pos: position{line: 145, col: 10, offset: 4512},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 145, col: 10, offset: 4512},
													label: "revnumber",
													expr: &ruleRefExpr{
														pos:  position{line: 145, col: 21, offset: 4523},
														name: "DocumentRevisionNumber",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 145, col: 45, offset: 4547},
													expr: &litMatcher{
														pos:        position{line: 145, col: 45, offset: 4547},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 145, col: 50, offset: 4552},
													label: "revdate",
													expr: &zeroOrOneExpr{
														pos: position{line: 145, col: 58, offset: 4560},
														expr: &ruleRefExpr{
															pos:  position{line: 145, col: 59, offset: 4561},
															name: "DocumentRevisionDate",
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 145, col: 82, offset: 4584},
													expr: &litMatcher{
														pos:        position{line: 145, col: 82, offset: 4584},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 145, col: 87, offset: 4589},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 145, col: 97, offset: 4599},
														expr: &ruleRefExpr{
															pos:  position{line: 145, col: 98, offset: 4600},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 147, col: 15, offset: 4719},
										run: (*parser).callonDocumentRevision23,
										expr: &seqExpr{
											pos: position{line: 147, col: 15, offset: 4719},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 147, col: 15, offset: 4719},
													label: "revdate",
													expr: &ruleRefExpr{
														pos:  position{line: 147, col: 24, offset: 4728},
														name: "DocumentRevisionDate",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 147, col: 46, offset: 4750},
													expr: &litMatcher{
														pos:        position{line: 147, col: 46, offset: 4750},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 147, col: 51, offset: 4755},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 147, col: 61, offset: 4765},
														expr: &ruleRefExpr{
															pos:  position{line: 147, col: 62, offset: 4766},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 149, col: 13, offset: 4877},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionNumber",
			pos:  position{line: 154, col: 1, offset: 5012},
			expr: &choiceExpr{
				pos: position{line: 154, col: 27, offset: 5038},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 154, col: 27, offset: 5038},
						run: (*parser).callonDocumentRevisionNumber2,
						expr: &seqExpr{
							pos: position{line: 154, col: 27, offset: 5038},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 154, col: 27, offset: 5038},
									val:        "v",
									ignoreCase: true,
									want:       "\"v\"i",
								},
								&ruleRefExpr{
									pos:  position{line: 154, col: 32, offset: 5043},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 154, col: 39, offset: 5050},
									expr: &charClassMatcher{
										pos:        position{line: 154, col: 39, offset: 5050},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 156, col: 5, offset: 5100},
						run: (*parser).callonDocumentRevisionNumber8,
						expr: &seqExpr{
							pos: position{line: 156, col: 5, offset: 5100},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 156, col: 5, offset: 5100},
									expr: &litMatcher{
										pos:        position{line: 156, col: 5, offset: 5100},
										val:        "v",
										ignoreCase: true,
										want:       "\"v\"i",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 156, col: 11, offset: 5106},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 156, col: 18, offset: 5113},
									expr: &charClassMatcher{
										pos:        position{line: 156, col: 18, offset: 5113},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 156, col: 29, offset: 5124},
									expr: &ruleRefExpr{
										pos:  position{line: 156, col: 29, offset: 5124},
										name: "Space",
									},
								},
								&andExpr{
									pos: position{line: 156, col: 36, offset: 5131},
									expr: &litMatcher{
										pos:        position{line: 156, col: 37, offset: 5132},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionDate",
			pos:  position{line: 160, col: 1, offset: 5176},
			expr: &actionExpr{
				pos: position{line: 160, col: 25, offset: 5200},
				run: (*parser).callonDocumentRevisionDate1,
				expr: &oneOrMoreExpr{
					pos: position{line: 160, col: 25, offset: 5200},
					expr: &charClassMatcher{
						pos:        position{line: 160, col: 25, offset: 5200},
						val:        "[^:\\r\\n]",
						chars:      []rune{':', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentRevisionRemark",
			pos:  position{line: 164, col: 1, offset: 5250},
			expr: &actionExpr{
				pos: position{line: 164, col: 27, offset: 5276},
				run: (*parser).callonDocumentRevisionRemark1,
				expr: &oneOrMoreExpr{
					pos: position{line: 164, col: 27, offset: 5276},
					expr: &charClassMatcher{
						pos:        position{line: 164, col: 27, offset: 5276},
						val:        "[^\\r\\r\\n]",
						chars:      []rune{'\r', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "AttributeDeclaration",
			pos:  position{line: 171, col: 1, offset: 5436},
			expr: &actionExpr{
				pos: position{line: 171, col: 25, offset: 5460},
				run: (*parser).callonAttributeDeclaration1,
				expr: &seqExpr{
					pos: position{line: 171, col: 25, offset: 5460},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 171, col: 25, offset: 5460},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 171, col: 29, offset: 5464},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 171, col: 35, offset: 5470},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 171, col: 50, offset: 5485},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 172, col: 9, offset: 5499},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 172, col: 15, offset: 5505},
								expr: &actionExpr{
									pos: position{line: 172, col: 16, offset: 5506},
									run: (*parser).callonAttributeDeclaration9,
									expr: &seqExpr{
										pos: position{line: 172, col: 17, offset: 5507},
										exprs: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 172, col: 17, offset: 5507},
												expr: &ruleRefExpr{
													pos:  position{line: 172, col: 17, offset: 5507},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 172, col: 24, offset: 5514},
												label: "value",
												expr: &ruleRefExpr{
													pos:  position{line: 172, col: 31, offset: 5521},
													name: "AttributeDeclarationValue",
												},
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 174, col: 13, offset: 5597},
							expr: &ruleRefExpr{
								pos:  position{line: 174, col: 13, offset: 5597},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 174, col: 20, offset: 5604},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "AttributeName",
			pos:  position{line: 181, col: 1, offset: 5851},
			expr: &actionExpr{
				pos: position{line: 181, col: 18, offset: 5868},
				run: (*parser).callonAttributeName1,
				expr: &seqExpr{
					pos: position{line: 181, col: 18, offset: 5868},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 181, col: 18, offset: 5868},
							val:        "[\\pL0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 181, col: 28, offset: 5878},
							expr: &charClassMatcher{
								pos:        position{line: 181, col: 29, offset: 5879},
								val:        "[\\pL0-9-]",
								chars:      []rune{'-'},
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeDeclarationValue",
			pos:  position{line: 185, col: 1, offset: 5931},
			expr: &actionExpr{
				pos: position{line: 185, col: 30, offset: 5960},
				run: (*parser).callonAttributeDeclarationValue1,
				expr: &oneOrMoreExpr{
					pos: position{line: 185, col: 30, offset: 5960},
					expr: &charClassMatcher{
						pos:        position{line: 185, col: 30, offset: 5960},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "AttributeReset",
			pos:  position{line: 189, col: 1, offset: 6009},
			expr: &choiceExpr{
				pos: position{line: 189, col: 19, offset: 6027},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 189, col: 19, offset: 6027},
						run: (*parser).callonAttributeReset2,
						expr: &seqExpr{
							pos: position{line: 189, col: 19, offset: 6027},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 189, col: 19, offset: 6027},
									val:        ":!",
									ignoreCase: false,
									want:       "\":!\"",
								},
								&labeledExpr{
									pos:   position{line: 189, col: 24, offset: 6032},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 189, col: 30, offset: 6038},
										name: "AttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 189, col: 45, offset: 6053},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 189, col: 49, offset: 6057},
									expr: &ruleRefExpr{
										pos:  position{line: 189, col: 49, offset: 6057},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 189, col: 56, offset: 6064},
									name: "EOL",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 191, col: 5, offset: 6126},
						run: (*parser).callonAttributeReset11,
						expr: &seqExpr{
							pos: position{line: 191, col: 5, offset: 6126},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 191, col: 5, offset: 6126},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&labeledExpr{
									pos:   position{line: 191, col: 9, offset: 6130},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 191, col: 15, offset: 6136},
										name: "AttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 191, col: 30, offset: 6151},
									val:        "!:",
									ignoreCase: false,
									want:       "\"!:\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 191, col: 35, offset: 6156},
									expr: &ruleRefExpr{
										pos:  position{line: 191, col: 35, offset: 6156},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 191, col: 42, offset: 6163},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeSubstitution",
			pos:  position{line: 195, col: 1, offset: 6226},
			expr: &actionExpr{
				pos: position{line: 195, col: 26, offset: 6251},
				run: (*parser).callonAttributeSubstitution1,
				expr: &seqExpr{
					pos: position{line: 195, col: 26, offset: 6251},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 195, col: 26, offset: 6251},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&labeledExpr{
							pos:   position{line: 195, col: 30, offset: 6255},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 195, col: 36, offset: 6261},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 195, col: 51, offset: 6276},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "Attributes",
			pos:  position{line: 199, col: 1, offset: 6346},
			expr: &actionExpr{
				pos: position{line: 199, col: 15, offset: 6360},
				run: (*parser).callonAttributes1,
				expr: &seqExpr{
					pos: position{line: 199, col: 15, offset: 6360},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 199, col: 15, offset: 6360},
							label: "attrs",
							expr: &oneOrMoreExpr{
								pos: position{line: 199, col: 21, offset: 6366},
								expr: &ruleRefExpr{
									pos:  position{line: 199, col: 22, offset: 6367},
									name: "ElementAttribute",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 199, col: 41, offset: 6386},
							expr: &ruleRefExpr{
								pos:  position{line: 199, col: 41, offset: 6386},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "ElementAttribute",
			pos:  position{line: 203, col: 1, offset: 6460},
			expr: &actionExpr{
				pos: position{line: 203, col: 21, offset: 6480},
				run: (*parser).callonElementAttribute1,
				expr: &seqExpr{
					pos: position{line: 203, col: 21, offset: 6480},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 203, col: 21, offset: 6480},
							expr: &choiceExpr{
								pos: position{line: 203, col: 23, offset: 6482},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 203, col: 23, offset: 6482},
										val:        "[",
										ignoreCase: false,
										want:       "\"[\"",
									},
									&litMatcher{
										pos:        position{line: 203, col: 29, offset: 6488},
										val:        ".",
										ignoreCase: false,
										want:       "\".\"",
									},
									&litMatcher{
										pos:        position{line: 203, col: 35, offset: 6494},
										val:        "#",
										ignoreCase: false,
										want:       "\"#\"",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 204, col: 5, offset: 6571},
							label: "attr",
							expr: &choiceExpr{
								pos: position{line: 204, col: 11, offset: 6577},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 204, col: 11, offset: 6577},
										name: "ElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 205, col: 9, offset: 6599},
										name: "ElementTitle",
									},
									&ruleRefExpr{
										pos:  position{line: 206, col: 9, offset: 6624},
										name: "ElementRole",
									},
									&ruleRefExpr{
										pos:  position{line: 207, col: 9, offset: 6648},
										name: "LiteralAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 208, col: 9, offset: 6677},
										name: "SourceAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 209, col: 9, offset: 6706},
										name: "QuoteAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 210, col: 9, offset: 6734},
										name: "VerseAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 211, col: 9, offset: 6762},
										name: "AdmonitionMarkerAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 212, col: 9, offset: 6800},
										name: "HorizontalLayout",
									},
									&ruleRefExpr{
										pos:  position{line: 213, col: 9, offset: 6829},
										name: "PassthroughBlockAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 214, col: 9, offset: 6867},
										name: "AttributeGroup",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MasqueradeAttribute",
			pos:  position{line: 219, col: 1, offset: 7055},
			expr: &choiceExpr{
				pos: position{line: 219, col: 24, offset: 7078},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 219, col: 24, offset: 7078},
						name: "QuoteAttributes",
					},
					&ruleRefExpr{
						pos:  position{line: 219, col: 42, offset: 7096},
						name: "VerseAttributes",
					},
				},
			},
		},
		{
			name: "ElementID",
			pos:  position{line: 221, col: 1, offset: 7115},
			expr: &choiceExpr{
				pos: position{line: 221, col: 14, offset: 7128},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 221, col: 14, offset: 7128},
						run: (*parser).callonElementID2,
						expr: &seqExpr{
							pos: position{line: 221, col: 14, offset: 7128},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 221, col: 14, offset: 7128},
									val:        "[[",
									ignoreCase: false,
									want:       "\"[[\"",
								},
								&labeledExpr{
									pos:   position{line: 221, col: 19, offset: 7133},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 221, col: 23, offset: 7137},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 221, col: 27, offset: 7141},
									val:        "]]",
									ignoreCase: false,
									want:       "\"]]\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 221, col: 32, offset: 7146},
									expr: &ruleRefExpr{
										pos:  position{line: 221, col: 32, offset: 7146},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 221, col: 39, offset: 7153},
									name: "EOL",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 223, col: 5, offset: 7208},
						run: (*parser).callonElementID11,
						expr: &seqExpr{
							pos: position{line: 223, col: 5, offset: 7208},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 223, col: 5, offset: 7208},
									val:        "[#",
									ignoreCase: false,
									want:       "\"[#\"",
								},
								&labeledExpr{
									pos:   position{line: 223, col: 10, offset: 7213},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 223, col: 14, offset: 7217},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 223, col: 18, offset: 7221},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 223, col: 23, offset: 7226},
									expr: &ruleRefExpr{
										pos:  position{line: 223, col: 23, offset: 7226},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 223, col: 30, offset: 7233},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElementID",
			pos:  position{line: 227, col: 1, offset: 7289},
			expr: &actionExpr{
				pos: position{line: 227, col: 20, offset: 7308},
				run: (*parser).callonInlineElementID1,
				expr: &seqExpr{
					pos: position{line: 227, col: 20, offset: 7308},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 227, col: 20, offset: 7308},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 227, col: 25, offset: 7313},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 227, col: 29, offset: 7317},
								name: "ID",
							},
						},
						&litMatcher{
							pos:        position{line: 227, col: 33, offset: 7321},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 227, col: 38, offset: 7326},
							expr: &ruleRefExpr{
								pos:  position{line: 227, col: 38, offset: 7326},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "ElementTitle",
			pos:  position{line: 233, col: 1, offset: 7609},
			expr: &actionExpr{
				pos: position{line: 233, col: 17, offset: 7625},
				run: (*parser).callonElementTitle1,
				expr: &seqExpr{
					pos: position{line: 233, col: 17, offset: 7625},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 233, col: 17, offset: 7625},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 233, col: 21, offset: 7629},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 233, col: 28, offset: 7636},
								name: "ElementTitleContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 233, col: 49, offset: 7657},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ElementTitleContent",
			pos:  position{line: 237, col: 1, offset: 7719},
			expr: &actionExpr{
				pos: position{line: 237, col: 24, offset: 7742},
				run: (*parser).callonElementTitleContent1,
				expr: &seqExpr{
					pos: position{line: 237, col: 24, offset: 7742},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 237, col: 24, offset: 7742},
							val:        "[\\pL0-9]",
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 237, col: 32, offset: 7750},
							expr: &charClassMatcher{
								pos:        position{line: 237, col: 32, offset: 7750},
								val:        "[^\\r\\n<>]",
								chars:      []rune{'\r', '\n', '<', '>'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "ElementRole",
			pos:  position{line: 243, col: 1, offset: 7983},
			expr: &actionExpr{
				pos: position{line: 243, col: 16, offset: 7998},
				run: (*parser).callonElementRole1,
				expr: &seqExpr{
					pos: position{line: 243, col: 16, offset: 7998},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 243, col: 16, offset: 7998},
							val:        "[.",
							ignoreCase: false,
							want:       "\"[.\"",
						},
						&labeledExpr{
							pos:   position{line: 243, col: 21, offset: 8003},
							label: "role",
							expr: &actionExpr{
								pos: position{line: 243, col: 27, offset: 8009},
								run: (*parser).callonElementRole5,
								expr: &seqExpr{
									pos: position{line: 243, col: 27, offset: 8009},
									exprs: []interface{}{
										&charClassMatcher{
											pos:        position{line: 243, col: 27, offset: 8009},
											val:        "[\\pL0-9]",
											ranges:     []rune{'0', '9'},
											classes:    []*unicode.RangeTable{rangeTable("L")},
											ignoreCase: false,
											inverted:   false,
										},
										&zeroOrMoreExpr{
											pos: position{line: 243, col: 36, offset: 8018},
											expr: &charClassMatcher{
												pos:        position{line: 243, col: 36, offset: 8018},
												val:        "[^\\]\\r\\n]",
												chars:      []rune{']', '\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 245, col: 4, offset: 8067},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 245, col: 8, offset: 8071},
							expr: &ruleRefExpr{
								pos:  position{line: 245, col: 8, offset: 8071},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 245, col: 15, offset: 8078},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "LiteralAttribute",
			pos:  position{line: 249, col: 1, offset: 8138},
			expr: &actionExpr{
				pos: position{line: 249, col: 21, offset: 8158},
				run: (*parser).callonLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 249, col: 21, offset: 8158},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 249, col: 21, offset: 8158},
							val:        "[literal]",
							ignoreCase: false,
							want:       "\"[literal]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 249, col: 33, offset: 8170},
							expr: &ruleRefExpr{
								pos:  position{line: 249, col: 33, offset: 8170},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 249, col: 40, offset: 8177},
							name: "Newline",
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockAttribute",
			pos:  position{line: 253, col: 1, offset: 8233},
			expr: &actionExpr{
				pos: position{line: 253, col: 30, offset: 8262},
				run: (*parser).callonPassthroughBlockAttribute1,
				expr: &seqExpr{
					pos: position{line: 253, col: 30, offset: 8262},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 253, col: 30, offset: 8262},
							val:        "[pass]",
							ignoreCase: false,
							want:       "\"[pass]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 253, col: 39, offset: 8271},
							expr: &ruleRefExpr{
								pos:  position{line: 253, col: 39, offset: 8271},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 253, col: 46, offset: 8278},
							name: "Newline",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionMarkerAttribute",
			pos:  position{line: 258, col: 1, offset: 8424},
			expr: &actionExpr{
				pos: position{line: 258, col: 30, offset: 8453},
				run: (*parser).callonAdmonitionMarkerAttribute1,
				expr: &seqExpr{
					pos: position{line: 258, col: 30, offset: 8453},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 258, col: 30, offset: 8453},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 258, col: 34, offset: 8457},
							label: "k",
							expr: &ruleRefExpr{
								pos:  position{line: 258, col: 37, offset: 8460},
								name: "AdmonitionKind",
							},
						},
						&litMatcher{
							pos:        position{line: 258, col: 53, offset: 8476},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 258, col: 57, offset: 8480},
							expr: &ruleRefExpr{
								pos:  position{line: 258, col: 57, offset: 8480},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 258, col: 64, offset: 8487},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SourceAttributes",
			pos:  position{line: 263, col: 1, offset: 8647},
			expr: &actionExpr{
				pos: position{line: 263, col: 21, offset: 8667},
				run: (*parser).callonSourceAttributes1,
				expr: &seqExpr{
					pos: position{line: 263, col: 21, offset: 8667},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 263, col: 21, offset: 8667},
							val:        "[source",
							ignoreCase: false,
							want:       "\"[source\"",
						},
						&labeledExpr{
							pos:   position{line: 264, col: 5, offset: 8683},
							label: "language",
							expr: &zeroOrOneExpr{
								pos: position{line: 264, col: 14, offset: 8692},
								expr: &actionExpr{
									pos: position{line: 264, col: 15, offset: 8693},
									run: (*parser).callonSourceAttributes6,
									expr: &seqExpr{
										pos: position{line: 264, col: 15, offset: 8693},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 264, col: 15, offset: 8693},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 264, col: 19, offset: 8697},
												label: "attr",
												expr: &zeroOrOneExpr{
													pos: position{line: 264, col: 24, offset: 8702},
													expr: &ruleRefExpr{
														pos:  position{line: 264, col: 25, offset: 8703},
														name: "StandaloneAttributeValue",
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 265, col: 5, offset: 8759},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 265, col: 12, offset: 8766},
								expr: &actionExpr{
									pos: position{line: 265, col: 13, offset: 8767},
									run: (*parser).callonSourceAttributes14,
									expr: &seqExpr{
										pos: position{line: 265, col: 13, offset: 8767},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 265, col: 13, offset: 8767},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 265, col: 17, offset: 8771},
												label: "attr",
												expr: &zeroOrOneExpr{
													pos: position{line: 265, col: 22, offset: 8776},
													expr: &ruleRefExpr{
														pos:  position{line: 265, col: 23, offset: 8777},
														name: "GenericAttribute",
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 266, col: 5, offset: 8825},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 266, col: 9, offset: 8829},
							expr: &ruleRefExpr{
								pos:  position{line: 266, col: 9, offset: 8829},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 266, col: 16, offset: 8836},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "AttributeGroup",
			pos:  position{line: 271, col: 1, offset: 8992},
			expr: &actionExpr{
				pos: position{line: 271, col: 19, offset: 9010},
				run: (*parser).callonAttributeGroup1,
				expr: &seqExpr{
					pos: position{line: 271, col: 19, offset: 9010},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 271, col: 19, offset: 9010},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 271, col: 23, offset: 9014},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 271, col: 34, offset: 9025},
								expr: &ruleRefExpr{
									pos:  position{line: 271, col: 35, offset: 9026},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 271, col: 54, offset: 9045},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 271, col: 58, offset: 9049},
							expr: &ruleRefExpr{
								pos:  position{line: 271, col: 58, offset: 9049},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 271, col: 65, offset: 9056},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "GenericAttribute",
			pos:  position{line: 275, col: 1, offset: 9132},
			expr: &choiceExpr{
				pos: position{line: 275, col: 21, offset: 9152},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 275, col: 21, offset: 9152},
						name: "GenericAttributeWithValue",
					},
					&ruleRefExpr{
						pos:  position{line: 275, col: 49, offset: 9180},
						name: "GenericAttributeWithoutValue",
					},
				},
			},
		},
		{
			name: "GenericAttributeWithValue",
			pos:  position{line: 277, col: 1, offset: 9212},
			expr: &actionExpr{
				pos: position{line: 277, col: 30, offset: 9241},
				run: (*parser).callonGenericAttributeWithValue1,
				expr: &seqExpr{
					pos: position{line: 277, col: 30, offset: 9241},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 277, col: 30, offset: 9241},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 277, col: 35, offset: 9246},
								name: "AttributeKey",
							},
						},
						&litMatcher{
							pos:        position{line: 277, col: 49, offset: 9260},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&labeledExpr{
							pos:   position{line: 277, col: 53, offset: 9264},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 277, col: 59, offset: 9270},
								expr: &ruleRefExpr{
									pos:  position{line: 277, col: 60, offset: 9271},
									name: "AttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 277, col: 77, offset: 9288},
							expr: &litMatcher{
								pos:        position{line: 277, col: 77, offset: 9288},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 277, col: 82, offset: 9293},
							expr: &ruleRefExpr{
								pos:  position{line: 277, col: 82, offset: 9293},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "GenericAttributeWithoutValue",
			pos:  position{line: 281, col: 1, offset: 9396},
			expr: &actionExpr{
				pos: position{line: 281, col: 33, offset: 9428},
				run: (*parser).callonGenericAttributeWithoutValue1,
				expr: &seqExpr{
					pos: position{line: 281, col: 33, offset: 9428},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 281, col: 33, offset: 9428},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 281, col: 38, offset: 9433},
								name: "AttributeKey",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 281, col: 52, offset: 9447},
							expr: &litMatcher{
								pos:        position{line: 281, col: 52, offset: 9447},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 281, col: 57, offset: 9452},
							expr: &ruleRefExpr{
								pos:  position{line: 281, col: 57, offset: 9452},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeKey",
			pos:  position{line: 285, col: 1, offset: 9544},
			expr: &actionExpr{
				pos: position{line: 285, col: 17, offset: 9560},
				run: (*parser).callonAttributeKey1,
				expr: &seqExpr{
					pos: position{line: 285, col: 17, offset: 9560},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 285, col: 17, offset: 9560},
							expr: &litMatcher{
								pos:        position{line: 285, col: 18, offset: 9561},
								val:        "quote",
								ignoreCase: false,
								want:       "\"quote\"",
							},
						},
						&notExpr{
							pos: position{line: 285, col: 26, offset: 9569},
							expr: &litMatcher{
								pos:        position{line: 285, col: 27, offset: 9570},
								val:        "verse",
								ignoreCase: false,
								want:       "\"verse\"",
							},
						},
						&notExpr{
							pos: position{line: 285, col: 35, offset: 9578},
							expr: &litMatcher{
								pos:        position{line: 285, col: 36, offset: 9579},
								val:        "literal",
								ignoreCase: false,
								want:       "\"literal\"",
							},
						},
						&notExpr{
							pos: position{line: 285, col: 46, offset: 9589},
							expr: &oneOrMoreExpr{
								pos: position{line: 285, col: 48, offset: 9591},
								expr: &ruleRefExpr{
									pos:  position{line: 285, col: 48, offset: 9591},
									name: "Space",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 285, col: 56, offset: 9599},
							label: "key",
							expr: &oneOrMoreExpr{
								pos: position{line: 285, col: 61, offset: 9604},
								expr: &charClassMatcher{
									pos:        position{line: 285, col: 61, offset: 9604},
									val:        "[^\\r\\n=,\\]]",
									chars:      []rune{'\r', '\n', '=', ',', ']'},
									ignoreCase: false,
									inverted:   true,
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 285, col: 75, offset: 9618},
							expr: &ruleRefExpr{
								pos:  position{line: 285, col: 75, offset: 9618},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeValue",
			pos:  position{line: 289, col: 1, offset: 9665},
			expr: &actionExpr{
				pos: position{line: 289, col: 19, offset: 9683},
				run: (*parser).callonAttributeValue1,
				expr: &labeledExpr{
					pos:   position{line: 289, col: 19, offset: 9683},
					label: "value",
					expr: &oneOrMoreExpr{
						pos: position{line: 289, col: 26, offset: 9690},
						expr: &charClassMatcher{
							pos:        position{line: 289, col: 26, offset: 9690},
							val:        "[^\\r\\n=,\\]]",
							chars:      []rune{'\r', '\n', '=', ',', ']'},
							ignoreCase: false,
							inverted:   true,
						},
					},
				},
			},
		},
		{
			name: "StandaloneAttributeValue",
			pos:  position{line: 293, col: 1, offset: 9745},
			expr: &actionExpr{
				pos: position{line: 293, col: 29, offset: 9773},
				run: (*parser).callonStandaloneAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 293, col: 29, offset: 9773},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 293, col: 29, offset: 9773},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 293, col: 36, offset: 9780},
								expr: &charClassMatcher{
									pos:        position{line: 293, col: 36, offset: 9780},
									val:        "[^\\r\\n=,\\]]",
									chars:      []rune{'\r', '\n', '=', ',', ']'},
									ignoreCase: false,
									inverted:   true,
								},
							},
						},
						&notExpr{
							pos: position{line: 293, col: 50, offset: 9794},
							expr: &litMatcher{
								pos:        position{line: 293, col: 51, offset: 9795},
								val:        "=",
								ignoreCase: false,
								want:       "\"=\"",
							},
						},
					},
				},
			},
		},
		{
			name: "HorizontalLayout",
			pos:  position{line: 297, col: 1, offset: 9965},
			expr: &actionExpr{
				pos: position{line: 297, col: 21, offset: 9985},
				run: (*parser).callonHorizontalLayout1,
				expr: &seqExpr{
					pos: position{line: 297, col: 21, offset: 9985},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 297, col: 21, offset: 9985},
							val:        "[horizontal]",
							ignoreCase: false,
							want:       "\"[horizontal]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 297, col: 36, offset: 10000},
							expr: &ruleRefExpr{
								pos:  position{line: 297, col: 36, offset: 10000},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 297, col: 43, offset: 10007},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "QuoteAttributes",
			pos:  position{line: 301, col: 1, offset: 10077},
			expr: &actionExpr{
				pos: position{line: 301, col: 20, offset: 10096},
				run: (*parser).callonQuoteAttributes1,
				expr: &seqExpr{
					pos: position{line: 301, col: 20, offset: 10096},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 301, col: 20, offset: 10096},
							val:        "[quote",
							ignoreCase: false,
							want:       "\"[quote\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 301, col: 29, offset: 10105},
							expr: &ruleRefExpr{
								pos:  position{line: 301, col: 29, offset: 10105},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 301, col: 36, offset: 10112},
							expr: &litMatcher{
								pos:        position{line: 301, col: 36, offset: 10112},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 301, col: 41, offset: 10117},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 301, col: 48, offset: 10124},
								expr: &ruleRefExpr{
									pos:  position{line: 301, col: 49, offset: 10125},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 301, col: 66, offset: 10142},
							expr: &litMatcher{
								pos:        position{line: 301, col: 66, offset: 10142},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 301, col: 71, offset: 10147},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 301, col: 77, offset: 10153},
								expr: &ruleRefExpr{
									pos:  position{line: 301, col: 78, offset: 10154},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 301, col: 95, offset: 10171},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 301, col: 99, offset: 10175},
							expr: &ruleRefExpr{
								pos:  position{line: 301, col: 99, offset: 10175},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 301, col: 106, offset: 10182},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "VerseAttributes",
			pos:  position{line: 305, col: 1, offset: 10255},
			expr: &actionExpr{
				pos: position{line: 305, col: 20, offset: 10274},
				run: (*parser).callonVerseAttributes1,
				expr: &seqExpr{
					pos: position{line: 305, col: 20, offset: 10274},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 305, col: 20, offset: 10274},
							val:        "[verse",
							ignoreCase: false,
							want:       "\"[verse\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 305, col: 29, offset: 10283},
							expr: &ruleRefExpr{
								pos:  position{line: 305, col: 29, offset: 10283},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 305, col: 36, offset: 10290},
							expr: &litMatcher{
								pos:        position{line: 305, col: 36, offset: 10290},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 305, col: 41, offset: 10295},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 305, col: 48, offset: 10302},
								expr: &ruleRefExpr{
									pos:  position{line: 305, col: 49, offset: 10303},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 305, col: 66, offset: 10320},
							expr: &litMatcher{
								pos:        position{line: 305, col: 66, offset: 10320},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 305, col: 71, offset: 10325},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 305, col: 77, offset: 10331},
								expr: &ruleRefExpr{
									pos:  position{line: 305, col: 78, offset: 10332},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 305, col: 95, offset: 10349},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 305, col: 99, offset: 10353},
							expr: &ruleRefExpr{
								pos:  position{line: 305, col: 99, offset: 10353},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 305, col: 106, offset: 10360},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "QuoteAttribute",
			pos:  position{line: 309, col: 1, offset: 10451},
			expr: &actionExpr{
				pos: position{line: 309, col: 19, offset: 10469},
				run: (*parser).callonQuoteAttribute1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 309, col: 20, offset: 10470},
					expr: &charClassMatcher{
						pos:        position{line: 309, col: 20, offset: 10470},
						val:        "[^\\r\\n,\\]]",
						chars:      []rune{'\r', '\n', ',', ']'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "InlineAttributes",
			pos:  position{line: 313, col: 1, offset: 10523},
			expr: &actionExpr{
				pos: position{line: 313, col: 21, offset: 10543},
				run: (*parser).callonInlineAttributes1,
				expr: &seqExpr{
					pos: position{line: 313, col: 21, offset: 10543},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 313, col: 21, offset: 10543},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 313, col: 25, offset: 10547},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 313, col: 31, offset: 10553},
								expr: &ruleRefExpr{
									pos:  position{line: 313, col: 32, offset: 10554},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 313, col: 51, offset: 10573},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "QuotedTextAttrs",
			pos:  position{line: 326, col: 1, offset: 11054},
			expr: &actionExpr{
				pos: position{line: 326, col: 20, offset: 11073},
				run: (*parser).callonQuotedTextAttrs1,
				expr: &labeledExpr{
					pos:   position{line: 326, col: 20, offset: 11073},
					label: "attrs",
					expr: &choiceExpr{
						pos: position{line: 326, col: 27, offset: 11080},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 326, col: 27, offset: 11080},
								name: "QuotedTextRole",
							},
							&ruleRefExpr{
								pos:  position{line: 326, col: 44, offset: 11097},
								name: "QuotedTextShortHand",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextRole",
			pos:  position{line: 333, col: 1, offset: 11366},
			expr: &actionExpr{
				pos: position{line: 333, col: 19, offset: 11384},
				run: (*parser).callonQuotedTextRole1,
				expr: &seqExpr{
					pos: position{line: 333, col: 19, offset: 11384},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 333, col: 19, offset: 11384},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 333, col: 23, offset: 11388},
							label: "role",
							expr: &zeroOrOneExpr{
								pos: position{line: 333, col: 28, offset: 11393},
								expr: &ruleRefExpr{
									pos:  position{line: 333, col: 28, offset: 11393},
									name: "QuotedTextRoleWord",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 333, col: 48, offset: 11413},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "QuotedTextRoleWord",
			pos:  position{line: 337, col: 1, offset: 11473},
			expr: &actionExpr{
				pos: position{line: 337, col: 23, offset: 11495},
				run: (*parser).callonQuotedTextRoleWord1,
				expr: &seqExpr{
					pos: position{line: 337, col: 23, offset: 11495},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 337, col: 23, offset: 11495},
							expr: &charClassMatcher{
								pos:        position{line: 337, col: 24, offset: 11496},
								val:        "[#.]",
								chars:      []rune{'#', '.'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&labeledExpr{
							pos:   position{line: 337, col: 29, offset: 11501},
							label: "role",
							expr: &actionExpr{
								pos: position{line: 337, col: 35, offset: 11507},
								run: (*parser).callonQuotedTextRoleWord6,
								expr: &zeroOrMoreExpr{
									pos: position{line: 337, col: 35, offset: 11507},
									expr: &charClassMatcher{
										pos:        position{line: 337, col: 35, offset: 11507},
										val:        "[^\\]]",
										chars:      []rune{']'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextShortHand",
			pos:  position{line: 346, col: 1, offset: 11823},
			expr: &actionExpr{
				pos: position{line: 346, col: 24, offset: 11846},
				run: (*parser).callonQuotedTextShortHand1,
				expr: &seqExpr{
					pos: position{line: 346, col: 24, offset: 11846},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 346, col: 24, offset: 11846},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 346, col: 28, offset: 11850},
							label: "attrs",
							expr: &oneOrMoreExpr{
								pos: position{line: 346, col: 34, offset: 11856},
								expr: &choiceExpr{
									pos: position{line: 346, col: 36, offset: 11858},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 346, col: 36, offset: 11858},
											name: "QuotedTextShortRole",
										},
										&ruleRefExpr{
											pos:  position{line: 346, col: 58, offset: 11880},
											name: "QuotedTextShortID",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 346, col: 79, offset: 11901},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "QuotedTextShortRole",
			pos:  position{line: 350, col: 1, offset: 11936},
			expr: &actionExpr{
				pos: position{line: 350, col: 24, offset: 11959},
				run: (*parser).callonQuotedTextShortRole1,
				expr: &seqExpr{
					pos: position{line: 350, col: 24, offset: 11959},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 350, col: 24, offset: 11959},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 350, col: 28, offset: 11963},
							label: "role",
							expr: &actionExpr{
								pos: position{line: 350, col: 34, offset: 11969},
								run: (*parser).callonQuotedTextShortRole5,
								expr: &oneOrMoreExpr{
									pos: position{line: 350, col: 34, offset: 11969},
									expr: &charClassMatcher{
										pos:        position{line: 350, col: 34, offset: 11969},
										val:        "[^.#\\]]",
										chars:      []rune{'.', '#', ']'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextShortID",
			pos:  position{line: 356, col: 1, offset: 12082},
			expr: &actionExpr{
				pos: position{line: 356, col: 22, offset: 12103},
				run: (*parser).callonQuotedTextShortID1,
				expr: &seqExpr{
					pos: position{line: 356, col: 22, offset: 12103},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 356, col: 22, offset: 12103},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&labeledExpr{
							pos:   position{line: 356, col: 26, offset: 12107},
							label: "id",
							expr: &actionExpr{
								pos: position{line: 356, col: 30, offset: 12111},
								run: (*parser).callonQuotedTextShortID5,
								expr: &oneOrMoreExpr{
									pos: position{line: 356, col: 30, offset: 12111},
									expr: &charClassMatcher{
										pos:        position{line: 356, col: 30, offset: 12111},
										val:        "[^.#\\]]",
										chars:      []rune{'.', '#', ']'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "StandaloneAttributes",
			pos:  position{line: 362, col: 1, offset: 12218},
			expr: &actionExpr{
				pos: position{line: 362, col: 25, offset: 12242},
				run: (*parser).callonStandaloneAttributes1,
				expr: &seqExpr{
					pos: position{line: 362, col: 25, offset: 12242},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 362, col: 25, offset: 12242},
							label: "attributes",
							expr: &oneOrMoreExpr{
								pos: position{line: 362, col: 36, offset: 12253},
								expr: &ruleRefExpr{
									pos:  position{line: 362, col: 37, offset: 12254},
									name: "ElementAttribute",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 362, col: 56, offset: 12273},
							expr: &ruleRefExpr{
								pos:  position{line: 362, col: 56, offset: 12273},
								name: "BlankLine",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 362, col: 67, offset: 12284},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 370, col: 1, offset: 12551},
			expr: &choiceExpr{
				pos: position{line: 370, col: 17, offset: 12567},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 370, col: 17, offset: 12567},
						name: "SingleQuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 370, col: 38, offset: 12588},
						name: "DoubleQuotedString",
					},
				},
			},
		},
		{
			name: "SingleQuotedString",
			pos:  position{line: 372, col: 1, offset: 12610},
			expr: &actionExpr{
				pos: position{line: 372, col: 23, offset: 12632},
				run: (*parser).callonSingleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 372, col: 23, offset: 12632},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 372, col: 23, offset: 12632},
							name: "SingleQuoteStringStart",
						},
						&labeledExpr{
							pos:   position{line: 372, col: 46, offset: 12655},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 372, col: 55, offset: 12664},
								name: "SingleQuotedStringElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 372, col: 82, offset: 12691},
							name: "SingleQuoteStringEnd",
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringElements",
			pos:  position{line: 376, col: 1, offset: 12799},
			expr: &actionExpr{
				pos: position{line: 376, col: 31, offset: 12829},
				run: (*parser).callonSingleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 376, col: 31, offset: 12829},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 376, col: 41, offset: 12839},
						expr: &ruleRefExpr{
							pos:  position{line: 376, col: 41, offset: 12839},
							name: "SingleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteStringStart",
			pos:  position{line: 380, col: 1, offset: 12921},
			expr: &seqExpr{
				pos: position{line: 380, col: 27, offset: 12947},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 380, col: 27, offset: 12947},
						val:        "'`",
						ignoreCase: false,
						want:       "\"'`\"",
					},
					&notExpr{
						pos: position{line: 380, col: 32, offset: 12952},
						expr: &charClassMatcher{
							pos:        position{line: 380, col: 33, offset: 12953},
							val:        "[ \\t\\r\\n]",
							chars:      []rune{' ', '\t', '\r', '\n'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteStringEnd",
			pos:  position{line: 382, col: 1, offset: 12966},
			expr: &litMatcher{
				pos:        position{line: 382, col: 25, offset: 12990},
				val:        "`'",
				ignoreCase: false,
				want:       "\"`'\"",
			},
		},
		{
			name: "SingleQuotedStringElement",
			pos:  position{line: 385, col: 1, offset: 13081},
			expr: &actionExpr{
				pos: position{line: 385, col: 30, offset: 13110},
				run: (*parser).callonSingleQuotedStringElement1,
				expr: &labeledExpr{
					pos:   position{line: 385, col: 30, offset: 13110},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 386, col: 9, offset: 13129},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 386, col: 9, offset: 13129},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 386, col: 9, offset: 13129},
										name: "LineBreak",
									},
									&notExpr{
										pos: position{line: 386, col: 19, offset: 13139},
										expr: &ruleRefExpr{
											pos:  position{line: 386, col: 20, offset: 13140},
											name: "SingleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 387, col: 11, offset: 13197},
								exprs: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 387, col: 11, offset: 13197},
										expr: &ruleRefExpr{
											pos:  position{line: 387, col: 11, offset: 13197},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 387, col: 18, offset: 13204},
										expr: &ruleRefExpr{
											pos:  position{line: 387, col: 19, offset: 13205},
											name: "SingleQuoteStringEnd",
										},
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 388, col: 11, offset: 13237},
								name: "InlineIcon",
							},
							&ruleRefExpr{
								pos:  position{line: 389, col: 11, offset: 13259},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 390, col: 11, offset: 13282},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 391, col: 11, offset: 13308},
								name: "InlinePassthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 392, col: 11, offset: 13337},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 393, col: 11, offset: 13353},
								name: "AttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 394, col: 11, offset: 13386},
								name: "BoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 395, col: 11, offset: 13406},
								name: "ItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 396, col: 11, offset: 13428},
								name: "MarkedText",
							},
							&ruleRefExpr{
								pos:  position{line: 397, col: 11, offset: 13450},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 398, col: 11, offset: 13475},
								name: "SuperscriptText",
							},
							&seqExpr{
								pos: position{line: 399, col: 11, offset: 13502},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 399, col: 11, offset: 13502},
										expr: &litMatcher{
											pos:        position{line: 399, col: 12, offset: 13503},
											val:        "`'",
											ignoreCase: false,
											want:       "\"`'\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 399, col: 17, offset: 13508},
										name: "MonospaceText",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 400, col: 11, offset: 13533},
								name: "DoubleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 401, col: 11, offset: 13563},
								name: "SingleQuotedStringFallbackCharacter",
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringFallbackCharacter",
			pos:  position{line: 405, col: 1, offset: 13633},
			expr: &choiceExpr{
				pos: position{line: 405, col: 41, offset: 13673},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 405, col: 41, offset: 13673},
						val:        "[^\\r\\n\\t `]",
						chars:      []rune{'\r', '\n', '\t', ' ', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 405, col: 55, offset: 13687},
						run: (*parser).callonSingleQuotedStringFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 405, col: 55, offset: 13687},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 405, col: 55, offset: 13687},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&notExpr{
									pos: position{line: 405, col: 59, offset: 13691},
									expr: &litMatcher{
										pos:        position{line: 405, col: 60, offset: 13692},
										val:        "'",
										ignoreCase: false,
										want:       "\"'\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedString",
			pos:  position{line: 409, col: 1, offset: 13755},
			expr: &actionExpr{
				pos: position{line: 409, col: 23, offset: 13777},
				run: (*parser).callonDoubleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 409, col: 23, offset: 13777},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 409, col: 23, offset: 13777},
							name: "DoubleQuoteStringStart",
						},
						&labeledExpr{
							pos:   position{line: 409, col: 46, offset: 13800},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 409, col: 55, offset: 13809},
								name: "DoubleQuotedStringElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 409, col: 82, offset: 13836},
							name: "DoubleQuoteStringEnd",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElements",
			pos:  position{line: 413, col: 1, offset: 13944},
			expr: &actionExpr{
				pos: position{line: 413, col: 31, offset: 13974},
				run: (*parser).callonDoubleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 413, col: 31, offset: 13974},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 413, col: 41, offset: 13984},
						expr: &ruleRefExpr{
							pos:  position{line: 413, col: 41, offset: 13984},
							name: "DoubleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElement",
			pos:  position{line: 418, col: 1, offset: 14149},
			expr: &actionExpr{
				pos: position{line: 418, col: 30, offset: 14178},
				run: (*parser).callonDoubleQuotedStringElement1,
				expr: &labeledExpr{
					pos:   position{line: 418, col: 30, offset: 14178},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 419, col: 9, offset: 14197},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 419, col: 9, offset: 14197},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 419, col: 9, offset: 14197},
										name: "LineBreak",
									},
									&notExpr{
										pos: position{line: 419, col: 19, offset: 14207},
										expr: &ruleRefExpr{
											pos:  position{line: 419, col: 20, offset: 14208},
											name: "DoubleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 420, col: 11, offset: 14265},
								exprs: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 420, col: 11, offset: 14265},
										expr: &ruleRefExpr{
											pos:  position{line: 420, col: 11, offset: 14265},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 420, col: 18, offset: 14272},
										expr: &ruleRefExpr{
											pos:  position{line: 420, col: 19, offset: 14273},
											name: "DoubleQuoteStringEnd",
										},
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 421, col: 11, offset: 14305},
								name: "InlineIcon",
							},
							&ruleRefExpr{
								pos:  position{line: 422, col: 11, offset: 14327},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 423, col: 11, offset: 14350},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 424, col: 11, offset: 14376},
								name: "InlinePassthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 425, col: 11, offset: 14405},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 426, col: 11, offset: 14421},
								name: "AttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 427, col: 11, offset: 14454},
								name: "BoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 428, col: 11, offset: 14474},
								name: "ItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 429, col: 11, offset: 14496},
								name: "MarkedText",
							},
							&ruleRefExpr{
								pos:  position{line: 430, col: 11, offset: 14518},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 431, col: 11, offset: 14543},
								name: "SuperscriptText",
							},
							&seqExpr{
								pos: position{line: 432, col: 11, offset: 14570},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 432, col: 11, offset: 14570},
										expr: &litMatcher{
											pos:        position{line: 432, col: 12, offset: 14571},
											val:        "`\"",
											ignoreCase: false,
											want:       "\"`\\\"\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 432, col: 18, offset: 14577},
										name: "MonospaceText",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 433, col: 11, offset: 14602},
								name: "SingleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 434, col: 11, offset: 14632},
								name: "DoubleQuotedStringFallbackCharacter",
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteStringStart",
			pos:  position{line: 438, col: 1, offset: 14710},
			expr: &seqExpr{
				pos: position{line: 438, col: 27, offset: 14736},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 438, col: 27, offset: 14736},
						val:        "\"`",
						ignoreCase: false,
						want:       "\"\\\"`\"",
					},
					&notExpr{
						pos: position{line: 438, col: 33, offset: 14742},
						expr: &charClassMatcher{
							pos:        position{line: 438, col: 34, offset: 14743},
							val:        "[ \\t\\r\\n]",
							chars:      []rune{' ', '\t', '\r', '\n'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteStringEnd",
			pos:  position{line: 440, col: 1, offset: 14756},
			expr: &litMatcher{
				pos:        position{line: 440, col: 25, offset: 14780},
				val:        "`\"",
				ignoreCase: false,
				want:       "\"`\\\"\"",
			},
		},
		{
			name: "DoubleQuotedStringFallbackCharacter",
			pos:  position{line: 442, col: 1, offset: 14789},
			expr: &actionExpr{
				pos: position{line: 442, col: 41, offset: 14829},
				run: (*parser).callonDoubleQuotedStringFallbackCharacter1,
				expr: &choiceExpr{
					pos: position{line: 442, col: 42, offset: 14830},
					alternatives: []interface{}{
						&charClassMatcher{
							pos:        position{line: 442, col: 42, offset: 14830},
							val:        "[^\\r\\n\\t `]",
							chars:      []rune{'\r', '\n', '\t', ' ', '`'},
							ignoreCase: false,
							inverted:   true,
						},
						&seqExpr{
							pos: position{line: 442, col: 56, offset: 14844},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 442, col: 56, offset: 14844},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&notExpr{
									pos: position{line: 442, col: 60, offset: 14848},
									expr: &litMatcher{
										pos:        position{line: 442, col: 61, offset: 14849},
										val:        "\"",
										ignoreCase: false,
										want:       "\"\\\"\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Section",
			pos:  position{line: 449, col: 1, offset: 15021},
			expr: &actionExpr{
				pos: position{line: 449, col: 12, offset: 15032},
				run: (*parser).callonSection1,
				expr: &seqExpr{
					pos: position{line: 449, col: 12, offset: 15032},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 449, col: 12, offset: 15032},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 449, col: 23, offset: 15043},
								expr: &ruleRefExpr{
									pos:  position{line: 449, col: 24, offset: 15044},
									name: "Attributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 450, col: 5, offset: 15062},
							label: "level",
							expr: &actionExpr{
								pos: position{line: 450, col: 12, offset: 15069},
								run: (*parser).callonSection7,
								expr: &oneOrMoreExpr{
									pos: position{line: 450, col: 12, offset: 15069},
									expr: &litMatcher{
										pos:        position{line: 450, col: 13, offset: 15070},
										val:        "=",
										ignoreCase: false,
										want:       "\"=\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 454, col: 5, offset: 15165},
							run: (*parser).callonSection10,
						},
						&oneOrMoreExpr{
							pos: position{line: 458, col: 5, offset: 15321},
							expr: &ruleRefExpr{
								pos:  position{line: 458, col: 5, offset: 15321},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 458, col: 12, offset: 15328},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 458, col: 19, offset: 15335},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 458, col: 34, offset: 15350},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 458, col: 38, offset: 15354},
								expr: &ruleRefExpr{
									pos:  position{line: 458, col: 38, offset: 15354},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 458, col: 56, offset: 15372},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "TitleElements",
			pos:  position{line: 462, col: 1, offset: 15482},
			expr: &actionExpr{
				pos: position{line: 462, col: 18, offset: 15499},
				run: (*parser).callonTitleElements1,
				expr: &labeledExpr{
					pos:   position{line: 462, col: 18, offset: 15499},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 462, col: 27, offset: 15508},
						expr: &seqExpr{
							pos: position{line: 462, col: 28, offset: 15509},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 462, col: 28, offset: 15509},
									expr: &ruleRefExpr{
										pos:  position{line: 462, col: 29, offset: 15510},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 462, col: 37, offset: 15518},
									expr: &ruleRefExpr{
										pos:  position{line: 462, col: 38, offset: 15519},
										name: "InlineElementID",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 462, col: 54, offset: 15535},
									name: "TitleElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TitleElement",
			pos:  position{line: 466, col: 1, offset: 15660},
			expr: &actionExpr{
				pos: position{line: 466, col: 17, offset: 15676},
				run: (*parser).callonTitleElement1,
				expr: &labeledExpr{
					pos:   position{line: 466, col: 17, offset: 15676},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 466, col: 26, offset: 15685},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 466, col: 26, offset: 15685},
								name: "Word",
							},
							&ruleRefExpr{
								pos:  position{line: 467, col: 11, offset: 15701},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 468, col: 11, offset: 15747},
								expr: &ruleRefExpr{
									pos:  position{line: 468, col: 11, offset: 15747},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 469, col: 11, offset: 15766},
								name: "CrossReference",
							},
							&ruleRefExpr{
								pos:  position{line: 470, col: 11, offset: 15792},
								name: "InlinePassthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 471, col: 11, offset: 15821},
								name: "InlineIcon",
							},
							&ruleRefExpr{
								pos:  position{line: 472, col: 11, offset: 15843},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 473, col: 11, offset: 15866},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 474, col: 11, offset: 15882},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 475, col: 11, offset: 15908},
								name: "QuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 476, col: 11, offset: 15932},
								name: "QuotedText",
							},
							&ruleRefExpr{
								pos:  position{line: 477, col: 11, offset: 15954},
								name: "AttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 478, col: 11, offset: 15987},
								name: "AnyChar",
							},
						},
					},
				},
			},
		},
		{
			name: "TableOfContentsPlaceHolder",
			pos:  position{line: 485, col: 1, offset: 16145},
			expr: &seqExpr{
				pos: position{line: 485, col: 31, offset: 16175},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 485, col: 31, offset: 16175},
						val:        "toc::[]",
						ignoreCase: false,
						want:       "\"toc::[]\"",
					},
					&ruleRefExpr{
						pos:  position{line: 485, col: 41, offset: 16185},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "UserMacroBlock",
			pos:  position{line: 490, col: 1, offset: 16301},
			expr: &actionExpr{
				pos: position{line: 490, col: 19, offset: 16319},
				run: (*parser).callonUserMacroBlock1,
				expr: &seqExpr{
					pos: position{line: 490, col: 19, offset: 16319},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 490, col: 19, offset: 16319},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 490, col: 25, offset: 16325},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 490, col: 40, offset: 16340},
							val:        "::",
							ignoreCase: false,
							want:       "\"::\"",
						},
						&labeledExpr{
							pos:   position{line: 490, col: 45, offset: 16345},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 490, col: 52, offset: 16352},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 490, col: 68, offset: 16368},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 490, col: 75, offset: 16375},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineUserMacro",
			pos:  position{line: 494, col: 1, offset: 16494},
			expr: &actionExpr{
				pos: position{line: 494, col: 20, offset: 16513},
				run: (*parser).callonInlineUserMacro1,
				expr: &seqExpr{
					pos: position{line: 494, col: 20, offset: 16513},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 494, col: 20, offset: 16513},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 494, col: 26, offset: 16519},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 494, col: 41, offset: 16534},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 494, col: 45, offset: 16538},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 494, col: 52, offset: 16545},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 494, col: 68, offset: 16561},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 494, col: 75, offset: 16568},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroName",
			pos:  position{line: 498, col: 1, offset: 16688},
			expr: &actionExpr{
				pos: position{line: 498, col: 18, offset: 16705},
				run: (*parser).callonUserMacroName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 498, col: 19, offset: 16706},
					expr: &charClassMatcher{
						pos:        position{line: 498, col: 19, offset: 16706},
						val:        "[\\pL0-9_-]",
						chars:      []rune{'_', '-'},
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "UserMacroValue",
			pos:  position{line: 502, col: 1, offset: 16759},
			expr: &actionExpr{
				pos: position{line: 502, col: 19, offset: 16777},
				run: (*parser).callonUserMacroValue1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 502, col: 19, offset: 16777},
					expr: &charClassMatcher{
						pos:        position{line: 502, col: 19, offset: 16777},
						val:        "[^:[ \\r\\n]",
						chars:      []rune{':', '[', ' ', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "UserMacroAttributes",
			pos:  position{line: 506, col: 1, offset: 16829},
			expr: &actionExpr{
				pos: position{line: 506, col: 24, offset: 16852},
				run: (*parser).callonUserMacroAttributes1,
				expr: &seqExpr{
					pos: position{line: 506, col: 24, offset: 16852},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 506, col: 24, offset: 16852},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 506, col: 28, offset: 16856},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 506, col: 34, offset: 16862},
								expr: &ruleRefExpr{
									pos:  position{line: 506, col: 35, offset: 16863},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 506, col: 54, offset: 16882},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FileInclusion",
			pos:  position{line: 513, col: 1, offset: 17071},
			expr: &actionExpr{
				pos: position{line: 513, col: 18, offset: 17088},
				run: (*parser).callonFileInclusion1,
				expr: &seqExpr{
					pos: position{line: 513, col: 18, offset: 17088},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 513, col: 18, offset: 17088},
							label: "incl",
							expr: &actionExpr{
								pos: position{line: 513, col: 24, offset: 17094},
								run: (*parser).callonFileInclusion4,
								expr: &seqExpr{
									pos: position{line: 513, col: 24, offset: 17094},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 513, col: 24, offset: 17094},
											val:        "include::",
											ignoreCase: false,
											want:       "\"include::\"",
										},
										&labeledExpr{
											pos:   position{line: 513, col: 36, offset: 17106},
											label: "path",
											expr: &ruleRefExpr{
												pos:  position{line: 513, col: 42, offset: 17112},
												name: "FileLocation",
											},
										},
										&labeledExpr{
											pos:   position{line: 513, col: 56, offset: 17126},
											label: "inlineAttributes",
											expr: &ruleRefExpr{
												pos:  position{line: 513, col: 74, offset: 17144},
												name: "FileIncludeAttributes",
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 515, col: 8, offset: 17293},
							expr: &ruleRefExpr{
								pos:  position{line: 515, col: 8, offset: 17293},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 515, col: 15, offset: 17300},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "FileIncludeAttributes",
			pos:  position{line: 519, col: 1, offset: 17356},
			expr: &actionExpr{
				pos: position{line: 519, col: 26, offset: 17381},
				run: (*parser).callonFileIncludeAttributes1,
				expr: &seqExpr{
					pos: position{line: 519, col: 26, offset: 17381},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 519, col: 26, offset: 17381},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 519, col: 30, offset: 17385},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 519, col: 36, offset: 17391},
								expr: &choiceExpr{
									pos: position{line: 519, col: 37, offset: 17392},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 519, col: 37, offset: 17392},
											name: "LineRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 519, col: 59, offset: 17414},
											name: "TagRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 519, col: 80, offset: 17435},
											name: "GenericAttribute",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 519, col: 99, offset: 17454},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttribute",
			pos:  position{line: 523, col: 1, offset: 17530},
			expr: &actionExpr{
				pos: position{line: 523, col: 24, offset: 17553},
				run: (*parser).callonLineRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 523, col: 24, offset: 17553},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 523, col: 24, offset: 17553},
							val:        "lines=",
							ignoreCase: false,
							want:       "\"lines=\"",
						},
						&labeledExpr{
							pos:   position{line: 523, col: 33, offset: 17562},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 523, col: 40, offset: 17569},
								name: "LineRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 523, col: 66, offset: 17595},
							expr: &litMatcher{
								pos:        position{line: 523, col: 66, offset: 17595},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttributeValue",
			pos:  position{line: 527, col: 1, offset: 17658},
			expr: &actionExpr{
				pos: position{line: 527, col: 29, offset: 17686},
				run: (*parser).callonLineRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 527, col: 29, offset: 17686},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 527, col: 29, offset: 17686},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 527, col: 36, offset: 17693},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 527, col: 36, offset: 17693},
										name: "MultipleLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 528, col: 11, offset: 17811},
										name: "MultipleQuotedLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 529, col: 11, offset: 17848},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 530, col: 11, offset: 17875},
										name: "MultiLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 531, col: 11, offset: 17908},
										name: "SingleLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 532, col: 11, offset: 17941},
										name: "SingleLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 533, col: 11, offset: 17969},
										name: "UndefinedLineRange",
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 533, col: 31, offset: 17989},
							expr: &ruleRefExpr{
								pos:  position{line: 533, col: 31, offset: 17989},
								name: "Space",
							},
						},
						&choiceExpr{
							pos: position{line: 533, col: 39, offset: 17997},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 533, col: 39, offset: 17997},
									expr: &litMatcher{
										pos:        position{line: 533, col: 40, offset: 17998},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
								&andExpr{
									pos: position{line: 533, col: 46, offset: 18004},
									expr: &litMatcher{
										pos:        position{line: 533, col: 47, offset: 18005},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleLineRanges",
			pos:  position{line: 537, col: 1, offset: 18041},
			expr: &actionExpr{
				pos: position{line: 537, col: 23, offset: 18063},
				run: (*parser).callonMultipleLineRanges1,
				expr: &seqExpr{
					pos: position{line: 537, col: 23, offset: 18063},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 537, col: 23, offset: 18063},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 537, col: 30, offset: 18070},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 537, col: 30, offset: 18070},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 537, col: 47, offset: 18087},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 538, col: 5, offset: 18110},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 538, col: 12, offset: 18117},
								expr: &actionExpr{
									pos: position{line: 538, col: 13, offset: 18118},
									run: (*parser).callonMultipleLineRanges9,
									expr: &seqExpr{
										pos: position{line: 538, col: 13, offset: 18118},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 538, col: 13, offset: 18118},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&labeledExpr{
												pos:   position{line: 538, col: 17, offset: 18122},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 538, col: 24, offset: 18129},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 538, col: 24, offset: 18129},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 538, col: 41, offset: 18146},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleQuotedLineRanges",
			pos:  position{line: 544, col: 1, offset: 18290},
			expr: &actionExpr{
				pos: position{line: 544, col: 29, offset: 18318},
				run: (*parser).callonMultipleQuotedLineRanges1,
				expr: &seqExpr{
					pos: position{line: 544, col: 29, offset: 18318},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 544, col: 29, offset: 18318},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 544, col: 34, offset: 18323},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 544, col: 41, offset: 18330},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 544, col: 41, offset: 18330},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 544, col: 58, offset: 18347},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 545, col: 5, offset: 18370},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 545, col: 12, offset: 18377},
								expr: &actionExpr{
									pos: position{line: 545, col: 13, offset: 18378},
									run: (*parser).callonMultipleQuotedLineRanges10,
									expr: &seqExpr{
										pos: position{line: 545, col: 13, offset: 18378},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 545, col: 13, offset: 18378},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 545, col: 17, offset: 18382},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 545, col: 24, offset: 18389},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 545, col: 24, offset: 18389},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 545, col: 41, offset: 18406},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 547, col: 9, offset: 18461},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "MultiLineRange",
			pos:  position{line: 551, col: 1, offset: 18555},
			expr: &actionExpr{
				pos: position{line: 551, col: 19, offset: 18573},
				run: (*parser).callonMultiLineRange1,
				expr: &seqExpr{
					pos: position{line: 551, col: 19, offset: 18573},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 551, col: 19, offset: 18573},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 551, col: 26, offset: 18580},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 551, col: 34, offset: 18588},
							val:        "..",
							ignoreCase: false,
							want:       "\"..\"",
						},
						&labeledExpr{
							pos:   position{line: 551, col: 39, offset: 18593},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 551, col: 44, offset: 18598},
								name: "NUMBER",
							},
						},
					},
				},
			},
		},
		{
			name: "MultiLineQuotedRange",
			pos:  position{line: 555, col: 1, offset: 18690},
			expr: &actionExpr{
				pos: position{line: 555, col: 25, offset: 18714},
				run: (*parser).callonMultiLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 555, col: 25, offset: 18714},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 555, col: 25, offset: 18714},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 555, col: 30, offset: 18719},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 555, col: 37, offset: 18726},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 555, col: 45, offset: 18734},
							val:        "..",
							ignoreCase: false,
							want:       "\"..\"",
						},
						&labeledExpr{
							pos:   position{line: 555, col: 50, offset: 18739},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 555, col: 55, offset: 18744},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 555, col: 63, offset: 18752},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "SingleLineRange",
			pos:  position{line: 559, col: 1, offset: 18841},
			expr: &actionExpr{
				pos: position{line: 559, col: 20, offset: 18860},
				run: (*parser).callonSingleLineRange1,
				expr: &labeledExpr{
					pos:   position{line: 559, col: 20, offset: 18860},
					label: "singleline",
					expr: &ruleRefExpr{
						pos:  position{line: 559, col: 32, offset: 18872},
						name: "NUMBER",
					},
				},
			},
		},
		{
			name: "SingleLineQuotedRange",
			pos:  position{line: 563, col: 1, offset: 18971},
			expr: &actionExpr{
				pos: position{line: 563, col: 26, offset: 18996},
				run: (*parser).callonSingleLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 563, col: 26, offset: 18996},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 563, col: 26, offset: 18996},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 563, col: 31, offset: 19001},
							label: "singleline",
							expr: &ruleRefExpr{
								pos:  position{line: 563, col: 43, offset: 19013},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 563, col: 51, offset: 19021},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "UndefinedLineRange",
			pos:  position{line: 567, col: 1, offset: 19117},
			expr: &actionExpr{
				pos: position{line: 567, col: 23, offset: 19139},
				run: (*parser).callonUndefinedLineRange1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 567, col: 23, offset: 19139},
					expr: &charClassMatcher{
						pos:        position{line: 567, col: 23, offset: 19139},
						val:        "[^\\], ]",
						chars:      []rune{']', ',', ' '},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "TagRangesAttribute",
			pos:  position{line: 571, col: 1, offset: 19188},
			expr: &actionExpr{
				pos: position{line: 571, col: 23, offset: 19210},
				run: (*parser).callonTagRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 571, col: 23, offset: 19210},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 571, col: 24, offset: 19211},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 571, col: 24, offset: 19211},
									val:        "tags=",
									ignoreCase: false,
									want:       "\"tags=\"",
								},
								&litMatcher{
									pos:        position{line: 571, col: 34, offset: 19221},
									val:        "tag=",
									ignoreCase: false,
									want:       "\"tag=\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 571, col: 42, offset: 19229},
							label: "tags",
							expr: &ruleRefExpr{
								pos:  position{line: 571, col: 48, offset: 19235},
								name: "TagRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 571, col: 73, offset: 19260},
							expr: &litMatcher{
								pos:        position{line: 571, col: 73, offset: 19260},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
					},
				},
			},
		},
		{
			name: "TagRangesAttributeValue",
			pos:  position{line: 575, col: 1, offset: 19413},
			expr: &actionExpr{
				pos: position{line: 575, col: 28, offset: 19440},
				run: (*parser).callonTagRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 575, col: 28, offset: 19440},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 575, col: 28, offset: 19440},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 575, col: 35, offset: 19447},
								name: "MultipleTagRanges",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 575, col: 54, offset: 19466},
							expr: &ruleRefExpr{
								pos:  position{line: 575, col: 54, offset: 19466},
								name: "Space",
							},
						},
						&choiceExpr{
							pos: position{line: 575, col: 62, offset: 19474},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 575, col: 62, offset: 19474},
									expr: &litMatcher{
										pos:        position{line: 575, col: 63, offset: 19475},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
								&andExpr{
									pos: position{line: 575, col: 69, offset: 19481},
									expr: &litMatcher{
										pos:        position{line: 575, col: 70, offset: 19482},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleTagRanges",
			pos:  position{line: 579, col: 1, offset: 19518},
			expr: &actionExpr{
				pos: position{line: 579, col: 22, offset: 19539},
				run: (*parser).callonMultipleTagRanges1,
				expr: &seqExpr{
					pos: position{line: 579, col: 22, offset: 19539},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 579, col: 22, offset: 19539},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 579, col: 29, offset: 19546},
								name: "TagRange",
							},
						},
						&labeledExpr{
							pos:   position{line: 580, col: 5, offset: 19561},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 580, col: 12, offset: 19568},
								expr: &actionExpr{
									pos: position{line: 580, col: 13, offset: 19569},
									run: (*parser).callonMultipleTagRanges7,
									expr: &seqExpr{
										pos: position{line: 580, col: 13, offset: 19569},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 580, col: 13, offset: 19569},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&labeledExpr{
												pos:   position{line: 580, col: 17, offset: 19573},
												label: "other",
												expr: &ruleRefExpr{
													pos:  position{line: 580, col: 24, offset: 19580},
													name: "TagRange",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagRange",
			pos:  position{line: 586, col: 1, offset: 19717},
			expr: &choiceExpr{
				pos: position{line: 586, col: 13, offset: 19729},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 586, col: 13, offset: 19729},
						run: (*parser).callonTagRange2,
						expr: &labeledExpr{
							pos:   position{line: 586, col: 13, offset: 19729},
							label: "tag",
							expr: &choiceExpr{
								pos: position{line: 586, col: 18, offset: 19734},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 586, col: 18, offset: 19734},
										name: "Alphanums",
									},
									&ruleRefExpr{
										pos:  position{line: 586, col: 30, offset: 19746},
										name: "TagWildcard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 588, col: 5, offset: 19816},
						run: (*parser).callonTagRange7,
						expr: &seqExpr{
							pos: position{line: 588, col: 5, offset: 19816},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 588, col: 5, offset: 19816},
									val:        "!",
									ignoreCase: false,
									want:       "\"!\"",
								},
								&labeledExpr{
									pos:   position{line: 588, col: 9, offset: 19820},
									label: "tag",
									expr: &choiceExpr{
										pos: position{line: 588, col: 14, offset: 19825},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 588, col: 14, offset: 19825},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 588, col: 26, offset: 19837},
												name: "TagWildcard",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagWildcard",
			pos:  position{line: 592, col: 1, offset: 19909},
			expr: &actionExpr{
				pos: position{line: 592, col: 16, offset: 19924},
				run: (*parser).callonTagWildcard1,
				expr: &seqExpr{
					pos: position{line: 592, col: 16, offset: 19924},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 592, col: 16, offset: 19924},
							label: "stars",
							expr: &actionExpr{
								pos: position{line: 592, col: 23, offset: 19931},
								run: (*parser).callonTagWildcard4,
								expr: &oneOrMoreExpr{
									pos: position{line: 592, col: 23, offset: 19931},
									expr: &litMatcher{
										pos:        position{line: 592, col: 24, offset: 19932},
										val:        "*",
										ignoreCase: false,
										want:       "\"*\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 595, col: 5, offset: 19989},
							run: (*parser).callonTagWildcard7,
						},
					},
				},
			},
		},
		{
			name: "VerbatimFileContent",
			pos:  position{line: 603, col: 1, offset: 20239},
			expr: &zeroOrMoreExpr{
				pos: position{line: 603, col: 24, offset: 20262},
				expr: &choiceExpr{
					pos: position{line: 603, col: 25, offset: 20263},
					alternatives: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 603, col: 25, offset: 20263},
							name: "FileInclusion",
						},
						&ruleRefExpr{
							pos:  position{line: 603, col: 41, offset: 20279},
							name: "VerbatimFileLine",
						},
					},
				},
			},
		},
		{
			name: "VerbatimFileLine",
			pos:  position{line: 605, col: 1, offset: 20301},
			expr: &actionExpr{
				pos: position{line: 605, col: 21, offset: 20321},
				run: (*parser).callonVerbatimFileLine1,
				expr: &seqExpr{
					pos: position{line: 605, col: 21, offset: 20321},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 605, col: 21, offset: 20321},
							expr: &ruleRefExpr{
								pos:  position{line: 605, col: 22, offset: 20322},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 605, col: 26, offset: 20326},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 605, col: 35, offset: 20335},
								run: (*parser).callonVerbatimFileLine6,
								expr: &zeroOrMoreExpr{
									pos: position{line: 605, col: 35, offset: 20335},
									expr: &charClassMatcher{
										pos:        position{line: 605, col: 35, offset: 20335},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 607, col: 12, offset: 20399},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileLine",
			pos:  position{line: 614, col: 1, offset: 20605},
			expr: &actionExpr{
				pos: position{line: 614, col: 21, offset: 20625},
				run: (*parser).callonIncludedFileLine1,
				expr: &seqExpr{
					pos: position{line: 614, col: 21, offset: 20625},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 614, col: 21, offset: 20625},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 614, col: 29, offset: 20633},
								expr: &choiceExpr{
									pos: position{line: 614, col: 30, offset: 20634},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 614, col: 30, offset: 20634},
											name: "IncludedFileStartTag",
										},
										&ruleRefExpr{
											pos:  position{line: 614, col: 53, offset: 20657},
											name: "IncludedFileEndTag",
										},
										&actionExpr{
											pos: position{line: 614, col: 74, offset: 20678},
											run: (*parser).callonIncludedFileLine8,
											expr: &anyMatcher{
												line: 614, col: 74, offset: 20678,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 614, col: 107, offset: 20711},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileStartTag",
			pos:  position{line: 618, col: 1, offset: 20786},
			expr: &actionExpr{
				pos: position{line: 618, col: 25, offset: 20810},
				run: (*parser).callonIncludedFileStartTag1,
				expr: &seqExpr{
					pos: position{line: 618, col: 25, offset: 20810},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 618, col: 25, offset: 20810},
							val:        "tag::",
							ignoreCase: false,
							want:       "\"tag::\"",
						},
						&labeledExpr{
							pos:   position{line: 618, col: 33, offset: 20818},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 618, col: 38, offset: 20823},
								run: (*parser).callonIncludedFileStartTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 618, col: 38, offset: 20823},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 618, col: 78, offset: 20863},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileEndTag",
			pos:  position{line: 622, col: 1, offset: 20932},
			expr: &actionExpr{
				pos: position{line: 622, col: 23, offset: 20954},
				run: (*parser).callonIncludedFileEndTag1,
				expr: &seqExpr{
					pos: position{line: 622, col: 23, offset: 20954},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 622, col: 23, offset: 20954},
							val:        "end::",
							ignoreCase: false,
							want:       "\"end::\"",
						},
						&labeledExpr{
							pos:   position{line: 622, col: 31, offset: 20962},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 622, col: 36, offset: 20967},
								run: (*parser).callonIncludedFileEndTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 622, col: 36, offset: 20967},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 622, col: 76, offset: 21007},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "ListParagraph",
			pos:  position{line: 629, col: 1, offset: 21178},
			expr: &choiceExpr{
				pos: position{line: 629, col: 18, offset: 21195},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 629, col: 18, offset: 21195},
						run: (*parser).callonListParagraph2,
						expr: &labeledExpr{
							pos:   position{line: 629, col: 18, offset: 21195},
							label: "comment",
							expr: &ruleRefExpr{
								pos:  position{line: 629, col: 27, offset: 21204},
								name: "SingleLineComment",
							},
						},
					},
					&actionExpr{
						pos: position{line: 631, col: 9, offset: 21263},
						run: (*parser).callonListParagraph5,
						expr: &labeledExpr{
							pos:   position{line: 631, col: 9, offset: 21263},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 631, col: 15, offset: 21269},
								expr: &ruleRefExpr{
									pos:  position{line: 631, col: 16, offset: 21270},
									name: "ListParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListParagraphLine",
			pos:  position{line: 635, col: 1, offset: 21366},
			expr: &actionExpr{
				pos: position{line: 635, col: 22, offset: 21387},
				run: (*parser).callonListParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 635, col: 22, offset: 21387},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 635, col: 22, offset: 21387},
							expr: &ruleRefExpr{
								pos:  position{line: 635, col: 23, offset: 21388},
								name: "EOF",
							},
						},
						&notExpr{
							pos: position{line: 636, col: 5, offset: 21397},
							expr: &ruleRefExpr{
								pos:  position{line: 636, col: 6, offset: 21398},
								name: "BlankLine",
							},
						},
						&notExpr{
							pos: position{line: 637, col: 5, offset: 21414},
							expr: &ruleRefExpr{
								pos:  position{line: 637, col: 6, offset: 21415},
								name: "SingleLineComment",
							},
						},
						&notExpr{
							pos: position{line: 638, col: 5, offset: 21438},
							expr: &ruleRefExpr{
								pos:  position{line: 638, col: 6, offset: 21439},
								name: "OrderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 639, col: 5, offset: 21466},
							expr: &ruleRefExpr{
								pos:  position{line: 639, col: 6, offset: 21467},
								name: "UnorderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 640, col: 5, offset: 21496},
							expr: &ruleRefExpr{
								pos:  position{line: 640, col: 6, offset: 21497},
								name: "CalloutListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 641, col: 5, offset: 21524},
							expr: &ruleRefExpr{
								pos:  position{line: 641, col: 6, offset: 21525},
								name: "ListItemContinuation",
							},
						},
						&notExpr{
							pos: position{line: 642, col: 5, offset: 21551},
							expr: &ruleRefExpr{
								pos:  position{line: 642, col: 6, offset: 21552},
								name: "ElementAttribute",
							},
						},
						&notExpr{
							pos: position{line: 643, col: 5, offset: 21574},
							expr: &ruleRefExpr{
								pos:  position{line: 643, col: 6, offset: 21575},
								name: "BlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 644, col: 5, offset: 21595},
							expr: &ruleRefExpr{
								pos:  position{line: 644, col: 6, offset: 21596},
								name: "LabeledListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 645, col: 5, offset: 21624},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 645, col: 11, offset: 21630},
								run: (*parser).callonListParagraphLine24,
								expr: &labeledExpr{
									pos:   position{line: 645, col: 11, offset: 21630},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 645, col: 20, offset: 21639},
										expr: &ruleRefExpr{
											pos:  position{line: 645, col: 21, offset: 21640},
											name: "InlineElement",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 647, col: 12, offset: 21741},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ListItemContinuation",
			pos:  position{line: 651, col: 1, offset: 21784},
			expr: &seqExpr{
				pos: position{line: 651, col: 25, offset: 21808},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 651, col: 25, offset: 21808},
						val:        "+",
						ignoreCase: false,
						want:       "\"+\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 651, col: 29, offset: 21812},
						expr: &ruleRefExpr{
							pos:  position{line: 651, col: 29, offset: 21812},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 651, col: 36, offset: 21819},
						name: "Newline",
					},
				},
			},
		},
		{
			name: "ContinuedListItemElement",
			pos:  position{line: 653, col: 1, offset: 21893},
			expr: &actionExpr{
				pos: position{line: 653, col: 29, offset: 21921},
				run: (*parser).callonContinuedListItemElement1,
				expr: &seqExpr{
					pos: position{line: 653, col: 29, offset: 21921},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 653, col: 29, offset: 21921},
							name: "ListItemContinuation",
						},
						&labeledExpr{
							pos:   position{line: 653, col: 50, offset: 21942},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 653, col: 58, offset: 21950},
								name: "ContinuedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "ContinuedListItemContent",
			pos:  position{line: 657, col: 1, offset: 22060},
			expr: &actionExpr{
				pos: position{line: 657, col: 29, offset: 22088},
				run: (*parser).callonContinuedListItemContent1,
				expr: &seqExpr{
					pos: position{line: 657, col: 29, offset: 22088},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 657, col: 29, offset: 22088},
							expr: &ruleRefExpr{
								pos:  position{line: 657, col: 30, offset: 22089},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 658, col: 5, offset: 22099},
							label: "content",
							expr: &choiceExpr{
								pos: position{line: 658, col: 14, offset: 22108},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 658, col: 14, offset: 22108},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 659, col: 11, offset: 22134},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 660, col: 11, offset: 22159},
										name: "VerseParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 661, col: 11, offset: 22214},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 662, col: 11, offset: 22237},
										name: "OrderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 663, col: 11, offset: 22265},
										name: "UnorderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 664, col: 11, offset: 22295},
										name: "LabeledListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 666, col: 11, offset: 22362},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 667, col: 11, offset: 22414},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 668, col: 11, offset: 22439},
										name: "AttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 669, col: 11, offset: 22472},
										name: "AttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 670, col: 11, offset: 22499},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 671, col: 11, offset: 22537},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 672, col: 11, offset: 22563},
										name: "ContinuedParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItem",
			pos:  position{line: 679, col: 1, offset: 22733},
			expr: &actionExpr{
				pos: position{line: 679, col: 20, offset: 22752},
				run: (*parser).callonOrderedListItem1,
				expr: &seqExpr{
					pos: position{line: 679, col: 20, offset: 22752},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 679, col: 20, offset: 22752},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 679, col: 31, offset: 22763},
								expr: &ruleRefExpr{
									pos:  position{line: 679, col: 32, offset: 22764},
									name: "Attributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 679, col: 45, offset: 22777},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 679, col: 53, offset: 22785},
								name: "OrderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 679, col: 76, offset: 22808},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 679, col: 85, offset: 22817},
								name: "OrderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemPrefix",
			pos:  position{line: 683, col: 1, offset: 22961},
			expr: &actionExpr{
				pos: position{line: 684, col: 5, offset: 22992},
				run: (*parser).callonOrderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 684, col: 5, offset: 22992},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 684, col: 5, offset: 22992},
							expr: &ruleRefExpr{
								pos:  position{line: 684, col: 5, offset: 22992},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 684, col: 12, offset: 22999},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 686, col: 9, offset: 23064},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 686, col: 9, offset: 23064},
										run: (*parser).callonOrderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 686, col: 9, offset: 23064},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 686, col: 9, offset: 23064},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 686, col: 16, offset: 23071},
														run: (*parser).callonOrderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 686, col: 16, offset: 23071},
															expr: &litMatcher{
																pos:        position{line: 686, col: 17, offset: 23072},
																val:        ".",
																ignoreCase: false,
																want:       "\".\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 690, col: 9, offset: 23176},
													run: (*parser).callonOrderedListItemPrefix13,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 709, col: 11, offset: 23912},
										run: (*parser).callonOrderedListItemPrefix14,
										expr: &seqExpr{
											pos: position{line: 709, col: 11, offset: 23912},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 709, col: 11, offset: 23912},
													expr: &charClassMatcher{
														pos:        position{line: 709, col: 12, offset: 23913},
														val:        "[0-9]",
														ranges:     []rune{'0', '9'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 709, col: 20, offset: 23921},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 711, col: 13, offset: 24034},
										run: (*parser).callonOrderedListItemPrefix19,
										expr: &seqExpr{
											pos: position{line: 711, col: 13, offset: 24034},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 711, col: 14, offset: 24035},
													val:        "[a-z]",
													ranges:     []rune{'a', 'z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 711, col: 21, offset: 24042},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 713, col: 13, offset: 24158},
										run: (*parser).callonOrderedListItemPrefix23,
										expr: &seqExpr{
											pos: position{line: 713, col: 13, offset: 24158},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 713, col: 14, offset: 24159},
													val:        "[A-Z]",
													ranges:     []rune{'A', 'Z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 713, col: 21, offset: 24166},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 715, col: 13, offset: 24282},
										run: (*parser).callonOrderedListItemPrefix27,
										expr: &seqExpr{
											pos: position{line: 715, col: 13, offset: 24282},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 715, col: 13, offset: 24282},
													expr: &charClassMatcher{
														pos:        position{line: 715, col: 14, offset: 24283},
														val:        "[a-z]",
														ranges:     []rune{'a', 'z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 715, col: 22, offset: 24291},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 717, col: 13, offset: 24407},
										run: (*parser).callonOrderedListItemPrefix32,
										expr: &seqExpr{
											pos: position{line: 717, col: 13, offset: 24407},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 717, col: 13, offset: 24407},
													expr: &charClassMatcher{
														pos:        position{line: 717, col: 14, offset: 24408},
														val:        "[A-Z]",
														ranges:     []rune{'A', 'Z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 717, col: 22, offset: 24416},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 719, col: 12, offset: 24531},
							expr: &ruleRefExpr{
								pos:  position{line: 719, col: 12, offset: 24531},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemContent",
			pos:  position{line: 723, col: 1, offset: 24570},
			expr: &actionExpr{
				pos: position{line: 723, col: 27, offset: 24596},
				run: (*parser).callonOrderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 723, col: 27, offset: 24596},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 723, col: 37, offset: 24606},
						expr: &ruleRefExpr{
							pos:  position{line: 723, col: 37, offset: 24606},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItem",
			pos:  position{line: 730, col: 1, offset: 24813},
			expr: &actionExpr{
				pos: position{line: 730, col: 22, offset: 24834},
				run: (*parser).callonUnorderedListItem1,
				expr: &seqExpr{
					pos: position{line: 730, col: 22, offset: 24834},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 730, col: 22, offset: 24834},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 730, col: 33, offset: 24845},
								expr: &ruleRefExpr{
									pos:  position{line: 730, col: 34, offset: 24846},
									name: "Attributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 730, col: 47, offset: 24859},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 730, col: 55, offset: 24867},
								name: "UnorderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 730, col: 80, offset: 24892},
							label: "checkstyle",
							expr: &zeroOrOneExpr{
								pos: position{line: 730, col: 91, offset: 24903},
								expr: &ruleRefExpr{
									pos:  position{line: 730, col: 92, offset: 24904},
									name: "UnorderedListItemCheckStyle",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 730, col: 122, offset: 24934},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 730, col: 131, offset: 24943},
								name: "UnorderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemPrefix",
			pos:  position{line: 734, col: 1, offset: 25105},
			expr: &actionExpr{
				pos: position{line: 735, col: 5, offset: 25138},
				run: (*parser).callonUnorderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 735, col: 5, offset: 25138},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 735, col: 5, offset: 25138},
							expr: &ruleRefExpr{
								pos:  position{line: 735, col: 5, offset: 25138},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 735, col: 12, offset: 25145},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 735, col: 20, offset: 25153},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 737, col: 9, offset: 25212},
										run: (*parser).callonUnorderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 737, col: 9, offset: 25212},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 737, col: 9, offset: 25212},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 737, col: 16, offset: 25219},
														run: (*parser).callonUnorderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 737, col: 16, offset: 25219},
															expr: &litMatcher{
																pos:        position{line: 737, col: 17, offset: 25220},
																val:        "*",
																ignoreCase: false,
																want:       "\"*\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 741, col: 9, offset: 25324},
													run: (*parser).callonUnorderedListItemPrefix13,
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 758, col: 14, offset: 26048},
										label: "depth",
										expr: &actionExpr{
											pos: position{line: 758, col: 21, offset: 26055},
											run: (*parser).callonUnorderedListItemPrefix15,
											expr: &litMatcher{
												pos:        position{line: 758, col: 22, offset: 26056},
												val:        "-",
												ignoreCase: false,
												want:       "\"-\"",
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 760, col: 13, offset: 26144},
							expr: &ruleRefExpr{
								pos:  position{line: 760, col: 13, offset: 26144},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemCheckStyle",
			pos:  position{line: 764, col: 1, offset: 26184},
			expr: &actionExpr{
				pos: position{line: 764, col: 32, offset: 26215},
				run: (*parser).callonUnorderedListItemCheckStyle1,
				expr: &seqExpr{
					pos: position{line: 764, col: 32, offset: 26215},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 764, col: 32, offset: 26215},
							expr: &litMatcher{
								pos:        position{line: 764, col: 33, offset: 26216},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 764, col: 37, offset: 26220},
							label: "style",
							expr: &choiceExpr{
								pos: position{line: 765, col: 7, offset: 26235},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 765, col: 7, offset: 26235},
										run: (*parser).callonUnorderedListItemCheckStyle7,
										expr: &litMatcher{
											pos:        position{line: 765, col: 7, offset: 26235},
											val:        "[ ]",
											ignoreCase: false,
											want:       "\"[ ]\"",
										},
									},
									&actionExpr{
										pos: position{line: 766, col: 7, offset: 26281},
										run: (*parser).callonUnorderedListItemCheckStyle9,
										expr: &litMatcher{
											pos:        position{line: 766, col: 7, offset: 26281},
											val:        "[*]",
											ignoreCase: false,
											want:       "\"[*]\"",
										},
									},
									&actionExpr{
										pos: position{line: 767, col: 7, offset: 26325},
										run: (*parser).callonUnorderedListItemCheckStyle11,
										expr: &litMatcher{
											pos:        position{line: 767, col: 7, offset: 26325},
											val:        "[x]",
											ignoreCase: false,
											want:       "\"[x]\"",
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 768, col: 7, offset: 26368},
							expr: &ruleRefExpr{
								pos:  position{line: 768, col: 7, offset: 26368},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemContent",
			pos:  position{line: 772, col: 1, offset: 26414},
			expr: &actionExpr{
				pos: position{line: 772, col: 29, offset: 26442},
				run: (*parser).callonUnorderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 772, col: 29, offset: 26442},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 772, col: 39, offset: 26452},
						expr: &ruleRefExpr{
							pos:  position{line: 772, col: 39, offset: 26452},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "LabeledListItem",
			pos:  position{line: 779, col: 1, offset: 26775},
			expr: &actionExpr{
				pos: position{line: 779, col: 20, offset: 26794},
				run: (*parser).callonLabeledListItem1,
				expr: &seqExpr{
					pos: position{line: 779, col: 20, offset: 26794},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 779, col: 20, offset: 26794},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 779, col: 31, offset: 26805},
								expr: &ruleRefExpr{
									pos:  position{line: 779, col: 32, offset: 26806},
									name: "Attributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 779, col: 45, offset: 26819},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 779, col: 51, offset: 26825},
								name: "VerbatimLabeledListItemTerm",
							},
						},
						&labeledExpr{
							pos:   position{line: 779, col: 80, offset: 26854},
							label: "separator",
							expr: &ruleRefExpr{
								pos:  position{line: 779, col: 91, offset: 26865},
								name: "LabeledListItemSeparator",
							},
						},
						&labeledExpr{
							pos:   position{line: 779, col: 117, offset: 26891},
							label: "description",
							expr: &zeroOrOneExpr{
								pos: position{line: 779, col: 129, offset: 26903},
								expr: &ruleRefExpr{
									pos:  position{line: 779, col: 130, offset: 26904},
									name: "LabeledListItemDescription",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemPrefix",
			pos:  position{line: 783, col: 1, offset: 27054},
			expr: &seqExpr{
				pos: position{line: 783, col: 26, offset: 27079},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 783, col: 26, offset: 27079},
						name: "VerbatimLabeledListItemTerm",
					},
					&ruleRefExpr{
						pos:  position{line: 783, col: 54, offset: 27107},
						name: "LabeledListItemSeparator",
					},
				},
			},
		},
		{
			name: "VerbatimLabeledListItemChars",
			pos:  position{line: 785, col: 1, offset: 27135},
			expr: &choiceExpr{
				pos: position{line: 785, col: 33, offset: 27167},
				alternatives: []interface{}{
					&oneOrMoreExpr{
						pos: position{line: 785, col: 33, offset: 27167},
						expr: &charClassMatcher{
							pos:        position{line: 785, col: 33, offset: 27167},
							val:        "[^:\\r\\n]",
							chars:      []rune{':', '\r', '\n'},
							ignoreCase: false,
							inverted:   true,
						},
					},
					&seqExpr{
						pos: position{line: 785, col: 45, offset: 27179},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 785, col: 45, offset: 27179},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
							&notExpr{
								pos: position{line: 785, col: 49, offset: 27183},
								expr: &litMatcher{
									pos:        position{line: 785, col: 50, offset: 27184},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerbatimLabeledListItemTerm",
			pos:  position{line: 786, col: 1, offset: 27189},
			expr: &actionExpr{
				pos: position{line: 786, col: 32, offset: 27220},
				run: (*parser).callonVerbatimLabeledListItemTerm1,
				expr: &labeledExpr{
					pos:   position{line: 786, col: 32, offset: 27220},
					label: "content",
					expr: &actionExpr{
						pos: position{line: 786, col: 42, offset: 27230},
						run: (*parser).callonVerbatimLabeledListItemTerm3,
						expr: &oneOrMoreExpr{
							pos: position{line: 786, col: 42, offset: 27230},
							expr: &ruleRefExpr{
								pos:  position{line: 786, col: 42, offset: 27230},
								name: "VerbatimLabeledListItemChars",
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTerm",
			pos:  position{line: 792, col: 1, offset: 27391},
			expr: &actionExpr{
				pos: position{line: 792, col: 24, offset: 27414},
				run: (*parser).callonLabeledListItemTerm1,
				expr: &labeledExpr{
					pos:   position{line: 792, col: 24, offset: 27414},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 792, col: 33, offset: 27423},
						expr: &seqExpr{
							pos: position{line: 792, col: 34, offset: 27424},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 792, col: 34, offset: 27424},
									expr: &ruleRefExpr{
										pos:  position{line: 792, col: 35, offset: 27425},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 792, col: 43, offset: 27433},
									expr: &litMatcher{
										pos:        position{line: 792, col: 44, offset: 27434},
										val:        "::",
										ignoreCase: false,
										want:       "\"::\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 792, col: 49, offset: 27439},
									name: "LabeledListItemTermElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTermElement",
			pos:  position{line: 796, col: 1, offset: 27570},
			expr: &actionExpr{
				pos: position{line: 796, col: 31, offset: 27600},
				run: (*parser).callonLabeledListItemTermElement1,
				expr: &labeledExpr{
					pos:   position{line: 796, col: 31, offset: 27600},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 796, col: 40, offset: 27609},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 796, col: 40, offset: 27609},
								name: "Word",
							},
							&ruleRefExpr{
								pos:  position{line: 797, col: 11, offset: 27625},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 798, col: 11, offset: 27675},
								expr: &ruleRefExpr{
									pos:  position{line: 798, col: 11, offset: 27675},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 799, col: 11, offset: 27694},
								name: "CrossReference",
							},
							&ruleRefExpr{
								pos:  position{line: 800, col: 11, offset: 27720},
								name: "ConcealedIndexTerm",
							},
							&ruleRefExpr{
								pos:  position{line: 801, col: 11, offset: 27750},
								name: "IndexTerm",
							},
							&ruleRefExpr{
								pos:  position{line: 802, col: 11, offset: 27771},
								name: "InlinePassthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 803, col: 11, offset: 27800},
								name: "InlineIcon",
							},
							&ruleRefExpr{
								pos:  position{line: 804, col: 11, offset: 27822},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 805, col: 11, offset: 27846},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 806, col: 11, offset: 27862},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 807, col: 11, offset: 27888},
								name: "QuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 808, col: 11, offset: 27912},
								name: "QuotedText",
							},
							&ruleRefExpr{
								pos:  position{line: 809, col: 11, offset: 27934},
								name: "AttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 810, col: 11, offset: 27967},
								name: "AnyChar",
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemSeparator",
			pos:  position{line: 814, col: 1, offset: 28010},
			expr: &actionExpr{
				pos: position{line: 815, col: 5, offset: 28044},
				run: (*parser).callonLabeledListItemSeparator1,
				expr: &seqExpr{
					pos: position{line: 815, col: 5, offset: 28044},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 815, col: 5, offset: 28044},
							label: "separator",
							expr: &actionExpr{
								pos: position{line: 815, col: 16, offset: 28055},
								run: (*parser).callonLabeledListItemSeparator4,
								expr: &oneOrMoreExpr{
									pos: position{line: 815, col: 16, offset: 28055},
									expr: &litMatcher{
										pos:        position{line: 815, col: 17, offset: 28056},
										val:        ":",
										ignoreCase: false,
										want:       "\":\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 818, col: 5, offset: 28117},
							run: (*parser).callonLabeledListItemSeparator7,
						},
						&choiceExpr{
							pos: position{line: 822, col: 6, offset: 28297},
							alternatives: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 822, col: 6, offset: 28297},
									expr: &choiceExpr{
										pos: position{line: 822, col: 7, offset: 28298},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 822, col: 7, offset: 28298},
												name: "Space",
											},
											&ruleRefExpr{
												pos:  position{line: 822, col: 15, offset: 28306},
												name: "Newline",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 822, col: 27, offset: 28318},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemDescription",
			pos:  position{line: 826, col: 1, offset: 28362},
			expr: &actionExpr{
				pos: position{line: 826, col: 31, offset: 28392},
				run: (*parser).callonLabeledListItemDescription1,
				expr: &labeledExpr{
					pos:   position{line: 826, col: 31, offset: 28392},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 826, col: 40, offset: 28401},
						expr: &ruleRefExpr{
							pos:  position{line: 826, col: 41, offset: 28402},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionKind",
			pos:  position{line: 833, col: 1, offset: 28600},
			expr: &choiceExpr{
				pos: position{line: 833, col: 19, offset: 28618},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 833, col: 19, offset: 28618},
						run: (*parser).callonAdmonitionKind2,
						expr: &litMatcher{
							pos:        position{line: 833, col: 19, offset: 28618},
							val:        "TIP",
							ignoreCase: false,
							want:       "\"TIP\"",
						},
					},
					&actionExpr{
						pos: position{line: 835, col: 9, offset: 28666},
						run: (*parser).callonAdmonitionKind4,
						expr: &litMatcher{
							pos:        position{line: 835, col: 9, offset: 28666},
							val:        "NOTE",
							ignoreCase: false,
							want:       "\"NOTE\"",
						},
					},
					&actionExpr{
						pos: position{line: 837, col: 9, offset: 28716},
						run: (*parser).callonAdmonitionKind6,
						expr: &litMatcher{
							pos:        position{line: 837, col: 9, offset: 28716},
							val:        "IMPORTANT",
							ignoreCase: false,
							want:       "\"IMPORTANT\"",
						},
					},
					&actionExpr{
						pos: position{line: 839, col: 9, offset: 28776},
						run: (*parser).callonAdmonitionKind8,
						expr: &litMatcher{
							pos:        position{line: 839, col: 9, offset: 28776},
							val:        "WARNING",
							ignoreCase: false,
							want:       "\"WARNING\"",
						},
					},
					&actionExpr{
						pos: position{line: 841, col: 9, offset: 28832},
						run: (*parser).callonAdmonitionKind10,
						expr: &litMatcher{
							pos:        position{line: 841, col: 9, offset: 28832},
							val:        "CAUTION",
							ignoreCase: false,
							want:       "\"CAUTION\"",
						},
					},
				},
			},
		},
		{
			name: "Paragraph",
			pos:  position{line: 850, col: 1, offset: 29148},
			expr: &choiceExpr{
				pos: position{line: 852, col: 5, offset: 29197},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 852, col: 5, offset: 29197},
						run: (*parser).callonParagraph2,
						expr: &seqExpr{
							pos: position{line: 852, col: 5, offset: 29197},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 852, col: 5, offset: 29197},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 852, col: 16, offset: 29208},
										expr: &ruleRefExpr{
											pos:  position{line: 852, col: 17, offset: 29209},
											name: "Attributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 852, col: 30, offset: 29222},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 852, col: 33, offset: 29225},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 852, col: 49, offset: 29241},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 852, col: 54, offset: 29246},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 852, col: 60, offset: 29252},
										expr: &ruleRefExpr{
											pos:  position{line: 852, col: 61, offset: 29253},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 856, col: 5, offset: 29438},
						run: (*parser).callonParagraph13,
						expr: &seqExpr{
							pos: position{line: 856, col: 5, offset: 29438},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 856, col: 5, offset: 29438},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 856, col: 16, offset: 29449},
										expr: &ruleRefExpr{
											pos:  position{line: 856, col: 17, offset: 29450},
											name: "Attributes",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 856, col: 30, offset: 29463},
									val:        "> ",
									ignoreCase: false,
									want:       "\"> \"",
								},
								&labeledExpr{
									pos:   position{line: 856, col: 35, offset: 29468},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 856, col: 44, offset: 29477},
										name: "MarkdownQuoteBlockVerbatimContent",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 860, col: 5, offset: 29676},
						run: (*parser).callonParagraph21,
						expr: &seqExpr{
							pos: position{line: 860, col: 5, offset: 29676},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 860, col: 5, offset: 29676},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 860, col: 16, offset: 29687},
										expr: &ruleRefExpr{
											pos:  position{line: 860, col: 17, offset: 29688},
											name: "Attributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 860, col: 30, offset: 29701},
									run: (*parser).callonParagraph26,
								},
								&notExpr{
									pos: position{line: 867, col: 7, offset: 29987},
									expr: &ruleRefExpr{
										pos:  position{line: 867, col: 8, offset: 29988},
										name: "BlockDelimiter",
									},
								},
								&labeledExpr{
									pos:   position{line: 867, col: 23, offset: 30003},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 867, col: 32, offset: 30012},
										name: "OpenPassthroughParagraphContent",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 871, col: 5, offset: 30213},
						run: (*parser).callonParagraph31,
						expr: &seqExpr{
							pos: position{line: 871, col: 5, offset: 30213},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 871, col: 5, offset: 30213},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 871, col: 16, offset: 30224},
										expr: &ruleRefExpr{
											pos:  position{line: 871, col: 17, offset: 30225},
											name: "Attributes",
										},
									},
								},
								&notExpr{
									pos: position{line: 871, col: 30, offset: 30238},
									expr: &ruleRefExpr{
										pos:  position{line: 871, col: 31, offset: 30239},
										name: "BlockDelimiter",
									},
								},
								&labeledExpr{
									pos:   position{line: 871, col: 46, offset: 30254},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 871, col: 52, offset: 30260},
										expr: &ruleRefExpr{
											pos:  position{line: 871, col: 53, offset: 30261},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkdownQuoteBlockVerbatimContent",
			pos:  position{line: 875, col: 1, offset: 30361},
			expr: &oneOrMoreExpr{
				pos: position{line: 875, col: 38, offset: 30398},
				expr: &actionExpr{
					pos: position{line: 875, col: 39, offset: 30399},
					run: (*parser).callonMarkdownQuoteBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 875, col: 39, offset: 30399},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 875, col: 39, offset: 30399},
								expr: &ruleRefExpr{
									pos:  position{line: 875, col: 40, offset: 30400},
									name: "BlankLine",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 875, col: 50, offset: 30410},
								expr: &litMatcher{
									pos:        position{line: 875, col: 50, offset: 30410},
									val:        "> ",
									ignoreCase: false,
									want:       "\"> \"",
								},
							},
							&labeledExpr{
								pos:   position{line: 875, col: 56, offset: 30416},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 875, col: 65, offset: 30425},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkdownQuoteBlockAttribution",
			pos:  position{line: 879, col: 1, offset: 30570},
			expr: &actionExpr{
				pos: position{line: 879, col: 34, offset: 30603},
				run: (*parser).callonMarkdownQuoteBlockAttribution1,
				expr: &seqExpr{
					pos: position{line: 879, col: 34, offset: 30603},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 879, col: 34, offset: 30603},
							val:        "-- ",
							ignoreCase: false,
							want:       "\"-- \"",
						},
						&labeledExpr{
							pos:   position{line: 879, col: 40, offset: 30609},
							label: "author",
							expr: &actionExpr{
								pos: position{line: 879, col: 48, offset: 30617},
								run: (*parser).callonMarkdownQuoteBlockAttribution5,
								expr: &oneOrMoreExpr{
									pos: position{line: 879, col: 49, offset: 30618},
									expr: &charClassMatcher{
										pos:        position{line: 879, col: 49, offset: 30618},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 881, col: 8, offset: 30670},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "OpenPassthroughParagraphContent",
			pos:  position{line: 885, col: 1, offset: 30706},
			expr: &oneOrMoreExpr{
				pos: position{line: 885, col: 36, offset: 30741},
				expr: &actionExpr{
					pos: position{line: 885, col: 37, offset: 30742},
					run: (*parser).callonOpenPassthroughParagraphContent2,
					expr: &seqExpr{
						pos: position{line: 885, col: 37, offset: 30742},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 885, col: 37, offset: 30742},
								expr: &ruleRefExpr{
									pos:  position{line: 885, col: 38, offset: 30743},
									name: "BlankLine",
								},
							},
							&labeledExpr{
								pos:   position{line: 885, col: 48, offset: 30753},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 885, col: 57, offset: 30762},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SimpleParagraph",
			pos:  position{line: 890, col: 1, offset: 30980},
			expr: &actionExpr{
				pos: position{line: 890, col: 20, offset: 30999},
				run: (*parser).callonSimpleParagraph1,
				expr: &seqExpr{
					pos: position{line: 890, col: 20, offset: 30999},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 890, col: 20, offset: 30999},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 890, col: 31, offset: 31010},
								expr: &ruleRefExpr{
									pos:  position{line: 890, col: 32, offset: 31011},
									name: "Attributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 891, col: 5, offset: 31030},
							run: (*parser).callonSimpleParagraph6,
						},
						&labeledExpr{
							pos:   position{line: 899, col: 5, offset: 31324},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 899, col: 16, offset: 31335},
								name: "FirstParagraphLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 900, col: 5, offset: 31359},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 900, col: 16, offset: 31370},
								expr: &ruleRefExpr{
									pos:  position{line: 900, col: 17, offset: 31371},
									name: "OtherParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FirstParagraphLine",
			pos:  position{line: 904, col: 1, offset: 31509},
			expr: &actionExpr{
				pos: position{line: 905, col: 5, offset: 31537},
				run: (*parser).callonFirstParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 905, col: 5, offset: 31537},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 905, col: 5, offset: 31537},
							label: "elements",
							expr: &seqExpr{
								pos: position{line: 905, col: 15, offset: 31547},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 905, col: 15, offset: 31547},
										name: "Word",
									},
									&zeroOrMoreExpr{
										pos: position{line: 905, col: 20, offset: 31552},
										expr: &ruleRefExpr{
											pos:  position{line: 905, col: 20, offset: 31552},
											name: "InlineElement",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 905, col: 36, offset: 31568},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "OtherParagraphLine",
			pos:  position{line: 909, col: 1, offset: 31643},
			expr: &actionExpr{
				pos: position{line: 909, col: 23, offset: 31665},
				run: (*parser).callonOtherParagraphLine1,
				expr: &labeledExpr{
					pos:   position{line: 909, col: 23, offset: 31665},
					label: "elements",
					expr: &ruleRefExpr{
						pos:  position{line: 909, col: 33, offset: 31675},
						name: "InlineElements",
					},
				},
			},
		},
		{
			name: "ContinuedParagraph",
			pos:  position{line: 914, col: 1, offset: 31800},
			expr: &choiceExpr{
				pos: position{line: 916, col: 5, offset: 31858},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 916, col: 5, offset: 31858},
						run: (*parser).callonContinuedParagraph2,
						expr: &seqExpr{
							pos: position{line: 916, col: 5, offset: 31858},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 916, col: 5, offset: 31858},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 916, col: 16, offset: 31869},
										expr: &ruleRefExpr{
											pos:  position{line: 916, col: 17, offset: 31870},
											name: "Attributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 916, col: 30, offset: 31883},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 916, col: 33, offset: 31886},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 916, col: 49, offset: 31902},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 916, col: 54, offset: 31907},
									label: "lines",
									expr: &ruleRefExpr{
										pos:  position{line: 916, col: 61, offset: 31914},
										name: "ContinuedParagraphLines",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 920, col: 5, offset: 32118},
						run: (*parser).callonContinuedParagraph12,
						expr: &seqExpr{
							pos: position{line: 920, col: 5, offset: 32118},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 920, col: 5, offset: 32118},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 920, col: 16, offset: 32129},
										expr: &ruleRefExpr{
											pos:  position{line: 920, col: 17, offset: 32130},
											name: "Attributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 920, col: 30, offset: 32143},
									label: "lines",
									expr: &ruleRefExpr{
										pos:  position{line: 920, col: 37, offset: 32150},
										name: "ContinuedParagraphLines",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ContinuedParagraphLines",
			pos:  position{line: 924, col: 1, offset: 32255},
			expr: &actionExpr{
				pos: position{line: 924, col: 28, offset: 32282},
				run: (*parser).callonContinuedParagraphLines1,
				expr: &seqExpr{
					pos: position{line: 924, col: 28, offset: 32282},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 924, col: 28, offset: 32282},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 924, col: 39, offset: 32293},
								name: "FirstParagraphLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 924, col: 59, offset: 32313},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 924, col: 70, offset: 32324},
								expr: &seqExpr{
									pos: position{line: 924, col: 71, offset: 32325},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 924, col: 71, offset: 32325},
											expr: &ruleRefExpr{
												pos:  position{line: 924, col: 72, offset: 32326},
												name: "ListItemContinuation",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 924, col: 93, offset: 32347},
											name: "OtherParagraphLine",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseParagraph",
			pos:  position{line: 928, col: 1, offset: 32457},
			expr: &choiceExpr{
				pos: position{line: 930, col: 5, offset: 32511},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 930, col: 5, offset: 32511},
						run: (*parser).callonVerseParagraph2,
						expr: &seqExpr{
							pos: position{line: 930, col: 5, offset: 32511},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 930, col: 5, offset: 32511},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 930, col: 16, offset: 32522},
										expr: &ruleRefExpr{
											pos:  position{line: 930, col: 17, offset: 32523},
											name: "Attributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 931, col: 5, offset: 32541},
									run: (*parser).callonVerseParagraph7,
								},
								&labeledExpr{
									pos:   position{line: 938, col: 5, offset: 32753},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 938, col: 8, offset: 32756},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 938, col: 24, offset: 32772},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 938, col: 29, offset: 32777},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 938, col: 35, offset: 32783},
										expr: &ruleRefExpr{
											pos:  position{line: 938, col: 36, offset: 32784},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 942, col: 5, offset: 32980},
						run: (*parser).callonVerseParagraph14,
						expr: &seqExpr{
							pos: position{line: 942, col: 5, offset: 32980},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 942, col: 5, offset: 32980},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 942, col: 16, offset: 32991},
										expr: &ruleRefExpr{
											pos:  position{line: 942, col: 17, offset: 32992},
											name: "Attributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 943, col: 5, offset: 33010},
									run: (*parser).callonVerseParagraph19,
								},
								&labeledExpr{
									pos:   position{line: 950, col: 5, offset: 33222},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 950, col: 11, offset: 33228},
										expr: &ruleRefExpr{
											pos:  position{line: 950, col: 12, offset: 33229},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElements",
			pos:  position{line: 954, col: 1, offset: 33334},
			expr: &actionExpr{
				pos: position{line: 954, col: 19, offset: 33352},
				run: (*parser).callonInlineElements1,
				expr: &seqExpr{
					pos: position{line: 954, col: 19, offset: 33352},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 954, col: 19, offset: 33352},
							expr: &ruleRefExpr{
								pos:  position{line: 954, col: 20, offset: 33353},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 955, col: 5, offset: 33368},
							label: "elements",
							expr: &choiceExpr{
								pos: position{line: 955, col: 15, offset: 33378},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 955, col: 15, offset: 33378},
										run: (*parser).callonInlineElements7,
										expr: &labeledExpr{
											pos:   position{line: 955, col: 15, offset: 33378},
											label: "comment",
											expr: &ruleRefExpr{
												pos:  position{line: 955, col: 24, offset: 33387},
												name: "SingleLineComment",
											},
										},
									},
									&actionExpr{
										pos: position{line: 957, col: 9, offset: 33481},
										run: (*parser).callonInlineElements10,
										expr: &seqExpr{
											pos: position{line: 957, col: 9, offset: 33481},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 957, col: 9, offset: 33481},
													label: "elements",
													expr: &oneOrMoreExpr{
														pos: position{line: 957, col: 18, offset: 33490},
														expr: &ruleRefExpr{
															pos:  position{line: 957, col: 19, offset: 33491},
															name: "InlineElement",
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 957, col: 35, offset: 33507},
													name: "EOL",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElement",
			pos:  position{line: 963, col: 1, offset: 33630},
			expr: &actionExpr{
				pos: position{line: 964, col: 5, offset: 33654},
				run: (*parser).callonInlineElement1,
				expr: &labeledExpr{
					pos:   position{line: 964, col: 5, offset: 33654},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 964, col: 14, offset: 33663},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 964, col: 14, offset: 33663},
								name: "InlineWord",
							},
							&ruleRefExpr{
								pos:  position{line: 965, col: 11, offset: 33715},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 966, col: 11, offset: 33761},
								expr: &ruleRefExpr{
									pos:  position{line: 966, col: 11, offset: 33761},
									name: "Space",
								},
							},
							&seqExpr{
								pos: position{line: 967, col: 11, offset: 33780},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 967, col: 11, offset: 33780},
										expr: &ruleRefExpr{
											pos:  position{line: 967, col: 12, offset: 33781},
											name: "EOL",
										},
									},
									&choiceExpr{
										pos: position{line: 968, col: 13, offset: 33800},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 968, col: 13, offset: 33800},
												name: "QuotedString",
											},
											&ruleRefExpr{
												pos:  position{line: 969, col: 15, offset: 33828},
												name: "QuotedText",
											},
											&ruleRefExpr{
												pos:  position{line: 970, col: 15, offset: 33854},
												name: "InlineIcon",
											},
											&ruleRefExpr{
												pos:  position{line: 971, col: 15, offset: 33880},
												name: "InlineImage",
											},
											&ruleRefExpr{
												pos:  position{line: 972, col: 15, offset: 33908},
												name: "Link",
											},
											&ruleRefExpr{
												pos:  position{line: 973, col: 15, offset: 33929},
												name: "InlinePassthrough",
											},
											&ruleRefExpr{
												pos:  position{line: 974, col: 15, offset: 33963},
												name: "InlineFootnote",
											},
											&ruleRefExpr{
												pos:  position{line: 975, col: 15, offset: 33994},
												name: "CrossReference",
											},
											&ruleRefExpr{
												pos:  position{line: 976, col: 15, offset: 34025},
												name: "InlineUserMacro",
											},
											&ruleRefExpr{
												pos:  position{line: 977, col: 15, offset: 34057},
												name: "AttributeSubstitution",
											},
											&ruleRefExpr{
												pos:  position{line: 978, col: 15, offset: 34095},
												name: "InlineElementID",
											},
											&ruleRefExpr{
												pos:  position{line: 979, col: 15, offset: 34126},
												name: "ConcealedIndexTerm",
											},
											&ruleRefExpr{
												pos:  position{line: 980, col: 15, offset: 34160},
												name: "IndexTerm",
											},
											&ruleRefExpr{
												pos:  position{line: 981, col: 15, offset: 34185},
												name: "AnyChar",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LineBreak",
			pos:  position{line: 988, col: 1, offset: 34415},
			expr: &actionExpr{
				pos: position{line: 988, col: 14, offset: 34428},
				run: (*parser).callonLineBreak1,
				expr: &seqExpr{
					pos: position{line: 988, col: 14, offset: 34428},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 988, col: 14, offset: 34428},
							name: "Space",
						},
						&litMatcher{
							pos:        position{line: 988, col: 20, offset: 34434},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 988, col: 24, offset: 34438},
							expr: &ruleRefExpr{
								pos:  position{line: 988, col: 24, offset: 34438},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 988, col: 31, offset: 34445},
							expr: &ruleRefExpr{
								pos:  position{line: 988, col: 32, offset: 34446},
								name: "EOL",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedText",
			pos:  position{line: 995, col: 1, offset: 34737},
			expr: &choiceExpr{
				pos: position{line: 995, col: 15, offset: 34751},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 995, col: 15, offset: 34751},
						name: "UnconstrainedQuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 995, col: 41, offset: 34777},
						name: "ConstrainedQuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 995, col: 65, offset: 34801},
						name: "EscapedQuotedText",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedTextMarker",
			pos:  position{line: 997, col: 1, offset: 34822},
			expr: &choiceExpr{
				pos: position{line: 997, col: 32, offset: 34853},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 997, col: 32, offset: 34853},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 997, col: 32, offset: 34853},
								val:        "*",
								ignoreCase: false,
								want:       "\"*\"",
							},
							&notExpr{
								pos: position{line: 997, col: 36, offset: 34857},
								expr: &litMatcher{
									pos:        position{line: 997, col: 37, offset: 34858},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 997, col: 43, offset: 34864},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 997, col: 43, offset: 34864},
								val:        "_",
								ignoreCase: false,
								want:       "\"_\"",
							},
							&notExpr{
								pos: position{line: 997, col: 47, offset: 34868},
								expr: &litMatcher{
									pos:        position{line: 997, col: 48, offset: 34869},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 997, col: 54, offset: 34875},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 997, col: 54, offset: 34875},
								val:        "#",
								ignoreCase: false,
								want:       "\"#\"",
							},
							&notExpr{
								pos: position{line: 997, col: 58, offset: 34879},
								expr: &litMatcher{
									pos:        position{line: 997, col: 59, offset: 34880},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 997, col: 65, offset: 34886},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 997, col: 65, offset: 34886},
								val:        "`",
								ignoreCase: false,
								want:       "\"`\"",
							},
							&notExpr{
								pos: position{line: 997, col: 69, offset: 34890},
								expr: &litMatcher{
									pos:        position{line: 997, col: 70, offset: 34891},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedTextPrefix",
			pos:  position{line: 999, col: 1, offset: 34898},
			expr: &choiceExpr{
				pos: position{line: 999, col: 34, offset: 34931},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 999, col: 34, offset: 34931},
						val:        "**",
						ignoreCase: false,
						want:       "\"**\"",
					},
					&litMatcher{
						pos:        position{line: 999, col: 41, offset: 34938},
						val:        "__",
						ignoreCase: false,
						want:       "\"__\"",
					},
					&litMatcher{
						pos:        position{line: 999, col: 48, offset: 34945},
						val:        "``",
						ignoreCase: false,
						want:       "\"``\"",
					},
					&litMatcher{
						pos:        position{line: 999, col: 55, offset: 34952},
						val:        "##",
						ignoreCase: false,
						want:       "\"##\"",
					},
					&litMatcher{
						pos:        position{line: 999, col: 62, offset: 34959},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&litMatcher{
						pos:        position{line: 999, col: 68, offset: 34965},
						val:        "~",
						ignoreCase: false,
						want:       "\"~\"",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedText",
			pos:  position{line: 1001, col: 1, offset: 34972},
			expr: &actionExpr{
				pos: position{line: 1001, col: 26, offset: 34997},
				run: (*parser).callonConstrainedQuotedText1,
				expr: &labeledExpr{
					pos:   position{line: 1001, col: 26, offset: 34997},
					label: "text",
					expr: &choiceExpr{
						pos: position{line: 1001, col: 32, offset: 35003},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1001, col: 32, offset: 35003},
								name: "SingleQuoteBoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 1002, col: 15, offset: 35039},
								name: "SingleQuoteItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 1003, col: 15, offset: 35076},
								name: "SingleQuoteMarkedText",
							},
							&ruleRefExpr{
								pos:  position{line: 1004, col: 15, offset: 35113},
								name: "SingleQuoteMonospaceText",
							},
							&ruleRefExpr{
								pos:  position{line: 1005, col: 15, offset: 35154},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1006, col: 15, offset: 35184},
								name: "SuperscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1007, col: 15, offset: 35216},
								name: "SubscriptOrSuperscriptPrefix",
							},
						},
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedText",
			pos:  position{line: 1011, col: 1, offset: 35374},
			expr: &choiceExpr{
				pos: position{line: 1011, col: 28, offset: 35401},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1011, col: 28, offset: 35401},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1012, col: 15, offset: 35436},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1013, col: 15, offset: 35473},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1014, col: 15, offset: 35510},
						name: "DoubleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "EscapedQuotedText",
			pos:  position{line: 1016, col: 1, offset: 35538},
			expr: &choiceExpr{
				pos: position{line: 1016, col: 22, offset: 35559},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1016, col: 22, offset: 35559},
						name: "EscapedBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1017, col: 15, offset: 35591},
						name: "EscapedItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1018, col: 15, offset: 35624},
						name: "EscapedMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1019, col: 15, offset: 35657},
						name: "EscapedMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1020, col: 15, offset: 35694},
						name: "EscapedSubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1021, col: 15, offset: 35731},
						name: "EscapedSuperscriptText",
					},
				},
			},
		},
		{
			name: "SubscriptOrSuperscriptPrefix",
			pos:  position{line: 1023, col: 1, offset: 35757},
			expr: &choiceExpr{
				pos: position{line: 1023, col: 33, offset: 35789},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1023, col: 33, offset: 35789},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&actionExpr{
						pos: position{line: 1023, col: 39, offset: 35795},
						run: (*parser).callonSubscriptOrSuperscriptPrefix3,
						expr: &litMatcher{
							pos:        position{line: 1023, col: 39, offset: 35795},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "OneOrMoreBackslashes",
			pos:  position{line: 1027, col: 1, offset: 35932},
			expr: &actionExpr{
				pos: position{line: 1027, col: 25, offset: 35956},
				run: (*parser).callonOneOrMoreBackslashes1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1027, col: 25, offset: 35956},
					expr: &litMatcher{
						pos:        position{line: 1027, col: 25, offset: 35956},
						val:        "\\",
						ignoreCase: false,
						want:       "\"\\\\\"",
					},
				},
			},
		},
		{
			name: "TwoOrMoreBackslashes",
			pos:  position{line: 1031, col: 1, offset: 36001},
			expr: &actionExpr{
				pos: position{line: 1031, col: 25, offset: 36025},
				run: (*parser).callonTwoOrMoreBackslashes1,
				expr: &seqExpr{
					pos: position{line: 1031, col: 25, offset: 36025},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1031, col: 25, offset: 36025},
							val:        "\\\\",
							ignoreCase: false,
							want:       "\"\\\\\\\\\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1031, col: 30, offset: 36030},
							expr: &litMatcher{
								pos:        position{line: 1031, col: 30, offset: 36030},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
					},
				},
			},
		},
		{
			name: "BoldText",
			pos:  position{line: 1039, col: 1, offset: 36135},
			expr: &choiceExpr{
				pos: position{line: 1039, col: 13, offset: 36147},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1039, col: 13, offset: 36147},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1039, col: 35, offset: 36169},
						name: "SingleQuoteBoldText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldText",
			pos:  position{line: 1041, col: 1, offset: 36238},
			expr: &actionExpr{
				pos: position{line: 1041, col: 24, offset: 36261},
				run: (*parser).callonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 1041, col: 24, offset: 36261},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1041, col: 24, offset: 36261},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1041, col: 30, offset: 36267},
								expr: &ruleRefExpr{
									pos:  position{line: 1041, col: 31, offset: 36268},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1041, col: 49, offset: 36286},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
						&labeledExpr{
							pos:   position{line: 1041, col: 54, offset: 36291},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1041, col: 64, offset: 36301},
								name: "DoubleQuoteBoldTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1041, col: 93, offset: 36330},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElements",
			pos:  position{line: 1045, col: 1, offset: 36421},
			expr: &seqExpr{
				pos: position{line: 1045, col: 32, offset: 36452},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1045, col: 32, offset: 36452},
						name: "DoubleQuoteBoldTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1045, col: 59, offset: 36479},
						expr: &seqExpr{
							pos: position{line: 1045, col: 60, offset: 36480},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1045, col: 60, offset: 36480},
									expr: &litMatcher{
										pos:        position{line: 1045, col: 62, offset: 36482},
										val:        "**",
										ignoreCase: false,
										want:       "\"**\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1045, col: 69, offset: 36489},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1045, col: 69, offset: 36489},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1045, col: 77, offset: 36497},
											name: "DoubleQuoteBoldTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElement",
			pos:  position{line: 1047, col: 1, offset: 36564},
			expr: &choiceExpr{
				pos: position{line: 1047, col: 31, offset: 36594},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1047, col: 31, offset: 36594},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1048, col: 11, offset: 36610},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1048, col: 11, offset: 36610},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1048, col: 19, offset: 36618},
								expr: &ruleRefExpr{
									pos:  position{line: 1048, col: 20, offset: 36619},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1049, col: 11, offset: 36638},
						name: "SingleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1050, col: 11, offset: 36670},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1051, col: 11, offset: 36694},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1052, col: 11, offset: 36716},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1053, col: 11, offset: 36738},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1054, col: 11, offset: 36763},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1055, col: 11, offset: 36788},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1056, col: 11, offset: 36815},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1057, col: 11, offset: 36837},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1058, col: 11, offset: 36860},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1059, col: 11, offset: 36876},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1060, col: 11, offset: 36905},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1061, col: 11, offset: 36938},
						name: "DoubleQuoteBoldTextStringElement",
					},
					&ruleRefExpr{
						pos:  position{line: 1062, col: 11, offset: 36982},
						name: "DoubleQuoteBoldTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextStringElement",
			pos:  position{line: 1065, col: 1, offset: 37024},
			expr: &actionExpr{
				pos: position{line: 1065, col: 37, offset: 37060},
				run: (*parser).callonDoubleQuoteBoldTextStringElement1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1065, col: 37, offset: 37060},
					expr: &seqExpr{
						pos: position{line: 1065, col: 38, offset: 37061},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1065, col: 38, offset: 37061},
								expr: &litMatcher{
									pos:        position{line: 1065, col: 39, offset: 37062},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
							},
							&charClassMatcher{
								pos:        position{line: 1065, col: 44, offset: 37067},
								val:        "[^\\r\\n ^~{}]",
								chars:      []rune{'\r', '\n', ' ', '^', '~', '{', '}'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 1069, col: 1, offset: 37142},
			expr: &choiceExpr{
				pos: position{line: 1070, col: 5, offset: 37188},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1070, col: 5, offset: 37188},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1071, col: 7, offset: 37286},
						run: (*parser).callonDoubleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1071, col: 7, offset: 37286},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1071, col: 7, offset: 37286},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1071, col: 12, offset: 37291},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldText",
			pos:  position{line: 1075, col: 1, offset: 37458},
			expr: &choiceExpr{
				pos: position{line: 1075, col: 24, offset: 37481},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1075, col: 24, offset: 37481},
						run: (*parser).callonSingleQuoteBoldText2,
						expr: &seqExpr{
							pos: position{line: 1075, col: 24, offset: 37481},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1075, col: 24, offset: 37481},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1075, col: 30, offset: 37487},
										expr: &ruleRefExpr{
											pos:  position{line: 1075, col: 31, offset: 37488},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1075, col: 51, offset: 37508},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1075, col: 51, offset: 37508},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 1075, col: 55, offset: 37512},
											expr: &litMatcher{
												pos:        position{line: 1075, col: 56, offset: 37513},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1075, col: 61, offset: 37518},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1075, col: 71, offset: 37528},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1075, col: 100, offset: 37557},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&andExpr{
									pos: position{line: 1075, col: 104, offset: 37561},
									expr: &notExpr{
										pos: position{line: 1075, col: 106, offset: 37563},
										expr: &ruleRefExpr{
											pos:  position{line: 1075, col: 107, offset: 37564},
											name: "Alphanum",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1077, col: 5, offset: 37760},
						run: (*parser).callonSingleQuoteBoldText17,
						expr: &seqExpr{
							pos: position{line: 1077, col: 5, offset: 37760},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1077, col: 5, offset: 37760},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1077, col: 11, offset: 37766},
										expr: &ruleRefExpr{
											pos:  position{line: 1077, col: 12, offset: 37767},
											name: "QuotedTextAttrs",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1077, col: 30, offset: 37785},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 1077, col: 34, offset: 37789},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1077, col: 44, offset: 37799},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1077, col: 44, offset: 37799},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1077, col: 48, offset: 37803},
												name: "SingleQuoteBoldTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1077, col: 77, offset: 37832},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElements",
			pos:  position{line: 1081, col: 1, offset: 38042},
			expr: &seqExpr{
				pos: position{line: 1081, col: 32, offset: 38073},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1081, col: 32, offset: 38073},
						expr: &ruleRefExpr{
							pos:  position{line: 1081, col: 33, offset: 38074},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1081, col: 39, offset: 38080},
						expr: &ruleRefExpr{
							pos:  position{line: 1081, col: 39, offset: 38080},
							name: "SingleQuoteBoldTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElement",
			pos:  position{line: 1083, col: 1, offset: 38111},
			expr: &choiceExpr{
				pos: position{line: 1083, col: 31, offset: 38141},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1083, col: 31, offset: 38141},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1084, col: 11, offset: 38157},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1084, col: 11, offset: 38157},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1084, col: 19, offset: 38165},
								expr: &ruleRefExpr{
									pos:  position{line: 1084, col: 20, offset: 38166},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1085, col: 11, offset: 38185},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1086, col: 11, offset: 38216},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1087, col: 11, offset: 38240},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1087, col: 11, offset: 38240},
								expr: &ruleRefExpr{
									pos:  position{line: 1087, col: 11, offset: 38240},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1087, col: 18, offset: 38247},
								expr: &seqExpr{
									pos: position{line: 1087, col: 19, offset: 38248},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1087, col: 19, offset: 38248},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 1087, col: 23, offset: 38252},
											expr: &litMatcher{
												pos:        position{line: 1087, col: 24, offset: 38253},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1088, col: 11, offset: 38270},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1089, col: 11, offset: 38292},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1090, col: 11, offset: 38314},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1091, col: 11, offset: 38339},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1092, col: 11, offset: 38364},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1093, col: 11, offset: 38391},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1094, col: 11, offset: 38413},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1095, col: 11, offset: 38437},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1096, col: 11, offset: 38455},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1097, col: 11, offset: 38484},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1098, col: 11, offset: 38517},
						name: "SingleQuoteBoldTextStringElement",
					},
					&ruleRefExpr{
						pos:  position{line: 1099, col: 11, offset: 38561},
						name: "SingleQuoteBoldTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextStringElement",
			pos:  position{line: 1101, col: 1, offset: 38601},
			expr: &actionExpr{
				pos: position{line: 1101, col: 37, offset: 38637},
				run: (*parser).callonSingleQuoteBoldTextStringElement1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1101, col: 37, offset: 38637},
					expr: &charClassMatcher{
						pos:        position{line: 1101, col: 37, offset: 38637},
						val:        "[^\\r\\n{} *^~]",
						chars:      []rune{'\r', '\n', '{', '}', ' ', '*', '^', '~'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 1105, col: 1, offset: 38867},
			expr: &choiceExpr{
				pos: position{line: 1106, col: 5, offset: 38913},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1106, col: 5, offset: 38913},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1107, col: 7, offset: 39011},
						run: (*parser).callonSingleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1107, col: 7, offset: 39011},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1107, col: 7, offset: 39011},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1107, col: 11, offset: 39015},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedBoldText",
			pos:  position{line: 1111, col: 1, offset: 39182},
			expr: &choiceExpr{
				pos: position{line: 1112, col: 5, offset: 39207},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1112, col: 5, offset: 39207},
						run: (*parser).callonEscapedBoldText2,
						expr: &seqExpr{
							pos: position{line: 1112, col: 5, offset: 39207},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1112, col: 5, offset: 39207},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1112, col: 18, offset: 39220},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1112, col: 40, offset: 39242},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1112, col: 45, offset: 39247},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1112, col: 55, offset: 39257},
										name: "DoubleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1112, col: 84, offset: 39286},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1114, col: 9, offset: 39445},
						run: (*parser).callonEscapedBoldText10,
						expr: &seqExpr{
							pos: position{line: 1114, col: 9, offset: 39445},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1114, col: 9, offset: 39445},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1114, col: 22, offset: 39458},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1114, col: 44, offset: 39480},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1114, col: 49, offset: 39485},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1114, col: 59, offset: 39495},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1114, col: 88, offset: 39524},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1117, col: 9, offset: 39727},
						run: (*parser).callonEscapedBoldText18,
						expr: &seqExpr{
							pos: position{line: 1117, col: 9, offset: 39727},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1117, col: 9, offset: 39727},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1117, col: 22, offset: 39740},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1117, col: 44, offset: 39762},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 1117, col: 48, offset: 39766},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1117, col: 58, offset: 39776},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1117, col: 87, offset: 39805},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ItalicText",
			pos:  position{line: 1125, col: 1, offset: 40021},
			expr: &choiceExpr{
				pos: position{line: 1125, col: 15, offset: 40035},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1125, col: 15, offset: 40035},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1125, col: 39, offset: 40059},
						name: "SingleQuoteItalicText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicText",
			pos:  position{line: 1127, col: 1, offset: 40084},
			expr: &actionExpr{
				pos: position{line: 1127, col: 26, offset: 40109},
				run: (*parser).callonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 1127, col: 26, offset: 40109},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1127, col: 26, offset: 40109},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1127, col: 32, offset: 40115},
								expr: &ruleRefExpr{
									pos:  position{line: 1127, col: 33, offset: 40116},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1127, col: 51, offset: 40134},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
						&labeledExpr{
							pos:   position{line: 1127, col: 56, offset: 40139},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1127, col: 66, offset: 40149},
								name: "DoubleQuoteItalicTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1127, col: 97, offset: 40180},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElements",
			pos:  position{line: 1131, col: 1, offset: 40318},
			expr: &seqExpr{
				pos: position{line: 1131, col: 34, offset: 40351},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1131, col: 34, offset: 40351},
						name: "DoubleQuoteItalicTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1131, col: 63, offset: 40380},
						expr: &seqExpr{
							pos: position{line: 1131, col: 64, offset: 40381},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1131, col: 64, offset: 40381},
									expr: &litMatcher{
										pos:        position{line: 1131, col: 66, offset: 40383},
										val:        "__",
										ignoreCase: false,
										want:       "\"__\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1131, col: 73, offset: 40390},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1131, col: 73, offset: 40390},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1131, col: 81, offset: 40398},
											name: "DoubleQuoteItalicTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElement",
			pos:  position{line: 1133, col: 1, offset: 40467},
			expr: &choiceExpr{
				pos: position{line: 1133, col: 33, offset: 40499},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1133, col: 33, offset: 40499},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1134, col: 11, offset: 40515},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1134, col: 11, offset: 40515},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1134, col: 19, offset: 40523},
								expr: &ruleRefExpr{
									pos:  position{line: 1134, col: 20, offset: 40524},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1135, col: 11, offset: 40543},
						name: "SingleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1136, col: 11, offset: 40577},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1137, col: 11, offset: 40601},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1138, col: 11, offset: 40621},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1139, col: 11, offset: 40643},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1140, col: 11, offset: 40668},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1141, col: 11, offset: 40693},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1142, col: 11, offset: 40720},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1143, col: 11, offset: 40742},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1144, col: 11, offset: 40766},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1145, col: 11, offset: 40783},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1146, col: 11, offset: 40812},
						name: "DoubleQuoteItalicTextStringElement",
					},
					&ruleRefExpr{
						pos:  position{line: 1147, col: 11, offset: 40858},
						name: "DoubleQuoteItalicTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextStringElement",
			pos:  position{line: 1149, col: 1, offset: 40900},
			expr: &actionExpr{
				pos: position{line: 1149, col: 39, offset: 40938},
				run: (*parser).callonDoubleQuoteItalicTextStringElement1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1149, col: 39, offset: 40938},
					expr: &seqExpr{
						pos: position{line: 1149, col: 40, offset: 40939},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1149, col: 40, offset: 40939},
								expr: &litMatcher{
									pos:        position{line: 1149, col: 41, offset: 40940},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
							},
							&charClassMatcher{
								pos:        position{line: 1149, col: 46, offset: 40945},
								val:        "[^\\r\\n ^~{}]",
								chars:      []rune{'\r', '\n', ' ', '^', '~', '{', '}'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1153, col: 1, offset: 41020},
			expr: &choiceExpr{
				pos: position{line: 1154, col: 5, offset: 41068},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1154, col: 5, offset: 41068},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1155, col: 7, offset: 41168},
						run: (*parser).callonDoubleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1155, col: 7, offset: 41168},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1155, col: 7, offset: 41168},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1155, col: 12, offset: 41173},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicText",
			pos:  position{line: 1159, col: 1, offset: 41342},
			expr: &choiceExpr{
				pos: position{line: 1159, col: 26, offset: 41367},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1159, col: 26, offset: 41367},
						run: (*parser).callonSingleQuoteItalicText2,
						expr: &seqExpr{
							pos: position{line: 1159, col: 26, offset: 41367},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1159, col: 26, offset: 41367},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1159, col: 32, offset: 41373},
										expr: &ruleRefExpr{
											pos:  position{line: 1159, col: 33, offset: 41374},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1159, col: 52, offset: 41393},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1159, col: 52, offset: 41393},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1159, col: 56, offset: 41397},
											expr: &litMatcher{
												pos:        position{line: 1159, col: 57, offset: 41398},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1159, col: 62, offset: 41403},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1159, col: 72, offset: 41413},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1159, col: 103, offset: 41444},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1161, col: 5, offset: 41636},
						run: (*parser).callonSingleQuoteItalicText14,
						expr: &seqExpr{
							pos: position{line: 1161, col: 5, offset: 41636},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1161, col: 5, offset: 41636},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1161, col: 11, offset: 41642},
										expr: &ruleRefExpr{
											pos:  position{line: 1161, col: 12, offset: 41643},
											name: "QuotedTextAttrs",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1161, col: 30, offset: 41661},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1161, col: 34, offset: 41665},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1161, col: 44, offset: 41675},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1161, col: 44, offset: 41675},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1161, col: 48, offset: 41679},
												name: "SingleQuoteItalicTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1161, col: 79, offset: 41710},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElements",
			pos:  position{line: 1165, col: 1, offset: 41924},
			expr: &seqExpr{
				pos: position{line: 1165, col: 34, offset: 41957},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1165, col: 34, offset: 41957},
						expr: &ruleRefExpr{
							pos:  position{line: 1165, col: 35, offset: 41958},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1165, col: 41, offset: 41964},
						expr: &ruleRefExpr{
							pos:  position{line: 1165, col: 41, offset: 41964},
							name: "SingleQuoteItalicTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElement",
			pos:  position{line: 1167, col: 1, offset: 41997},
			expr: &choiceExpr{
				pos: position{line: 1167, col: 33, offset: 42029},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1167, col: 33, offset: 42029},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1168, col: 11, offset: 42045},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1168, col: 11, offset: 42045},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1168, col: 19, offset: 42053},
								expr: &ruleRefExpr{
									pos:  position{line: 1168, col: 20, offset: 42054},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1169, col: 11, offset: 42073},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1170, col: 11, offset: 42106},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1171, col: 11, offset: 42130},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1171, col: 11, offset: 42130},
								expr: &ruleRefExpr{
									pos:  position{line: 1171, col: 11, offset: 42130},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1171, col: 18, offset: 42137},
								expr: &seqExpr{
									pos: position{line: 1171, col: 19, offset: 42138},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1171, col: 19, offset: 42138},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1171, col: 23, offset: 42142},
											expr: &litMatcher{
												pos:        position{line: 1171, col: 24, offset: 42143},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1172, col: 11, offset: 42160},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1173, col: 11, offset: 42180},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1174, col: 11, offset: 42202},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1175, col: 11, offset: 42227},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1176, col: 11, offset: 42252},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1177, col: 11, offset: 42279},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1178, col: 11, offset: 42301},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1179, col: 11, offset: 42325},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1180, col: 11, offset: 42343},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1181, col: 11, offset: 42373},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1182, col: 11, offset: 42406},
						name: "SingleQuoteItalicTextStringElement",
					},
					&ruleRefExpr{
						pos:  position{line: 1183, col: 11, offset: 42452},
						name: "SingleQuoteItalicTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextStringElement",
			pos:  position{line: 1185, col: 1, offset: 42494},
			expr: &actionExpr{
				pos: position{line: 1185, col: 39, offset: 42532},
				run: (*parser).callonSingleQuoteItalicTextStringElement1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1185, col: 39, offset: 42532},
					expr: &charClassMatcher{
						pos:        position{line: 1185, col: 39, offset: 42532},
						val:        "[^\\r\\n{} _^~]",
						chars:      []rune{'\r', '\n', '{', '}', ' ', '_', '^', '~'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1189, col: 1, offset: 42762},
			expr: &choiceExpr{
				pos: position{line: 1190, col: 5, offset: 42810},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1190, col: 5, offset: 42810},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1191, col: 7, offset: 42910},
						run: (*parser).callonSingleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1191, col: 7, offset: 42910},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1191, col: 7, offset: 42910},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1191, col: 11, offset: 42914},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedItalicText",
			pos:  position{line: 1195, col: 1, offset: 43084},
			expr: &choiceExpr{
				pos: position{line: 1196, col: 5, offset: 43111},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1196, col: 5, offset: 43111},
						run: (*parser).callonEscapedItalicText2,
						expr: &seqExpr{
							pos: position{line: 1196, col: 5, offset: 43111},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1196, col: 5, offset: 43111},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1196, col: 18, offset: 43124},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1196, col: 40, offset: 43146},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1196, col: 45, offset: 43151},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1196, col: 55, offset: 43161},
										name: "DoubleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1196, col: 86, offset: 43192},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1198, col: 9, offset: 43351},
						run: (*parser).callonEscapedItalicText10,
						expr: &seqExpr{
							pos: position{line: 1198, col: 9, offset: 43351},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1198, col: 9, offset: 43351},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1198, col: 22, offset: 43364},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1198, col: 44, offset: 43386},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1198, col: 49, offset: 43391},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1198, col: 59, offset: 43401},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1198, col: 90, offset: 43432},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1201, col: 9, offset: 43635},
						run: (*parser).callonEscapedItalicText18,
						expr: &seqExpr{
							pos: position{line: 1201, col: 9, offset: 43635},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1201, col: 9, offset: 43635},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1201, col: 22, offset: 43648},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1201, col: 44, offset: 43670},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1201, col: 48, offset: 43674},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1201, col: 58, offset: 43684},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1201, col: 89, offset: 43715},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MonospaceText",
			pos:  position{line: 1208, col: 1, offset: 43932},
			expr: &choiceExpr{
				pos: position{line: 1208, col: 18, offset: 43949},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1208, col: 18, offset: 43949},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1208, col: 45, offset: 43976},
						name: "SingleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceText",
			pos:  position{line: 1210, col: 1, offset: 44004},
			expr: &actionExpr{
				pos: position{line: 1210, col: 29, offset: 44032},
				run: (*parser).callonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1210, col: 29, offset: 44032},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1210, col: 29, offset: 44032},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1210, col: 35, offset: 44038},
								expr: &ruleRefExpr{
									pos:  position{line: 1210, col: 36, offset: 44039},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1210, col: 54, offset: 44057},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
						&labeledExpr{
							pos:   position{line: 1210, col: 59, offset: 44062},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1210, col: 69, offset: 44072},
								name: "DoubleQuoteMonospaceTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1210, col: 103, offset: 44106},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElements",
			pos:  position{line: 1214, col: 1, offset: 44247},
			expr: &seqExpr{
				pos: position{line: 1214, col: 37, offset: 44283},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1214, col: 37, offset: 44283},
						name: "DoubleQuoteMonospaceTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1214, col: 69, offset: 44315},
						expr: &seqExpr{
							pos: position{line: 1214, col: 70, offset: 44316},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1214, col: 70, offset: 44316},
									expr: &litMatcher{
										pos:        position{line: 1214, col: 72, offset: 44318},
										val:        "``",
										ignoreCase: false,
										want:       "\"``\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1214, col: 79, offset: 44325},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1214, col: 79, offset: 44325},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1214, col: 87, offset: 44333},
											name: "DoubleQuoteMonospaceTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElement",
			pos:  position{line: 1216, col: 1, offset: 44404},
			expr: &choiceExpr{
				pos: position{line: 1216, col: 36, offset: 44439},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1216, col: 36, offset: 44439},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1217, col: 11, offset: 44455},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1217, col: 11, offset: 44455},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1217, col: 19, offset: 44463},
								expr: &ruleRefExpr{
									pos:  position{line: 1217, col: 20, offset: 44464},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1218, col: 11, offset: 44483},
						name: "SingleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1219, col: 11, offset: 44520},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1220, col: 11, offset: 44544},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1221, col: 11, offset: 44564},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1222, col: 11, offset: 44586},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1223, col: 11, offset: 44608},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1224, col: 11, offset: 44633},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1225, col: 11, offset: 44660},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1226, col: 11, offset: 44682},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1227, col: 11, offset: 44705},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1228, col: 11, offset: 44721},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1229, col: 11, offset: 44751},
						name: "DoubleQuoteMonospaceTextStringElement",
					},
					&ruleRefExpr{
						pos:  position{line: 1230, col: 11, offset: 44800},
						name: "DoubleQuoteMonospaceTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextStringElement",
			pos:  position{line: 1232, col: 1, offset: 44845},
			expr: &actionExpr{
				pos: position{line: 1232, col: 42, offset: 44886},
				run: (*parser).callonDoubleQuoteMonospaceTextStringElement1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1232, col: 42, offset: 44886},
					expr: &seqExpr{
						pos: position{line: 1232, col: 43, offset: 44887},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1232, col: 43, offset: 44887},
								expr: &litMatcher{
									pos:        position{line: 1232, col: 44, offset: 44888},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
							},
							&charClassMatcher{
								pos:        position{line: 1232, col: 49, offset: 44893},
								val:        "[^\\r\\n ^~{}]",
								chars:      []rune{'\r', '\n', ' ', '^', '~', '{', '}'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1236, col: 1, offset: 44968},
			expr: &choiceExpr{
				pos: position{line: 1237, col: 5, offset: 45019},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1237, col: 5, offset: 45019},
						val:        "[^\\r\\n`]",
						chars:      []rune{'\r', '\n', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1238, col: 7, offset: 45122},
						run: (*parser).callonDoubleQuoteMonospaceTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1238, col: 7, offset: 45122},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1238, col: 7, offset: 45122},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1238, col: 12, offset: 45127},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceText",
			pos:  position{line: 1242, col: 1, offset: 45299},
			expr: &choiceExpr{
				pos: position{line: 1242, col: 29, offset: 45327},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1242, col: 29, offset: 45327},
						run: (*parser).callonSingleQuoteMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1242, col: 29, offset: 45327},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1242, col: 29, offset: 45327},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1242, col: 35, offset: 45333},
										expr: &ruleRefExpr{
											pos:  position{line: 1242, col: 36, offset: 45334},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1242, col: 55, offset: 45353},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1242, col: 55, offset: 45353},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1242, col: 59, offset: 45357},
											expr: &litMatcher{
												pos:        position{line: 1242, col: 60, offset: 45358},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1242, col: 65, offset: 45363},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1242, col: 75, offset: 45373},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1242, col: 109, offset: 45407},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1244, col: 5, offset: 45602},
						run: (*parser).callonSingleQuoteMonospaceText14,
						expr: &seqExpr{
							pos: position{line: 1244, col: 5, offset: 45602},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1244, col: 5, offset: 45602},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1244, col: 11, offset: 45608},
										expr: &ruleRefExpr{
											pos:  position{line: 1244, col: 12, offset: 45609},
											name: "QuotedTextAttrs",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1244, col: 30, offset: 45627},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1244, col: 34, offset: 45631},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1244, col: 44, offset: 45641},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1244, col: 44, offset: 45641},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1244, col: 48, offset: 45645},
												name: "SingleQuoteMonospaceTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1244, col: 82, offset: 45679},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElements",
			pos:  position{line: 1248, col: 1, offset: 45899},
			expr: &seqExpr{
				pos: position{line: 1248, col: 37, offset: 45935},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1248, col: 37, offset: 45935},
						expr: &ruleRefExpr{
							pos:  position{line: 1248, col: 38, offset: 45936},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1248, col: 44, offset: 45942},
						expr: &ruleRefExpr{
							pos:  position{line: 1248, col: 44, offset: 45942},
							name: "SingleQuoteMonospaceTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElement",
			pos:  position{line: 1250, col: 1, offset: 45978},
			expr: &choiceExpr{
				pos: position{line: 1250, col: 37, offset: 46014},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1250, col: 37, offset: 46014},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1251, col: 11, offset: 46030},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1251, col: 11, offset: 46030},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1251, col: 19, offset: 46038},
								expr: &ruleRefExpr{
									pos:  position{line: 1251, col: 20, offset: 46039},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1252, col: 11, offset: 46058},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1253, col: 11, offset: 46095},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1254, col: 11, offset: 46119},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1254, col: 11, offset: 46119},
								expr: &ruleRefExpr{
									pos:  position{line: 1254, col: 11, offset: 46119},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1254, col: 18, offset: 46126},
								expr: &seqExpr{
									pos: position{line: 1254, col: 19, offset: 46127},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1254, col: 19, offset: 46127},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1254, col: 23, offset: 46131},
											expr: &litMatcher{
												pos:        position{line: 1254, col: 24, offset: 46132},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1255, col: 11, offset: 46261},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1256, col: 11, offset: 46281},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1257, col: 11, offset: 46303},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1258, col: 11, offset: 46325},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1259, col: 11, offset: 46350},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1260, col: 11, offset: 46377},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1261, col: 11, offset: 46399},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1262, col: 11, offset: 46423},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1263, col: 11, offset: 46440},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1264, col: 11, offset: 46470},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1265, col: 11, offset: 46503},
						name: "SingleQuoteMonospaceTextStringElement",
					},
					&ruleRefExpr{
						pos:  position{line: 1266, col: 11, offset: 46552},
						name: "SingleQuoteMonospaceTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextStringElement",
			pos:  position{line: 1268, col: 1, offset: 46597},
			expr: &actionExpr{
				pos: position{line: 1268, col: 42, offset: 46638},
				run: (*parser).callonSingleQuoteMonospaceTextStringElement1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1268, col: 42, offset: 46638},
					expr: &charClassMatcher{
						pos:        position{line: 1268, col: 42, offset: 46638},
						val:        "[^\\r\\n {}`^~]",
						chars:      []rune{'\r', '\n', ' ', '{', '}', '`', '^', '~'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1272, col: 1, offset: 46860},
			expr: &choiceExpr{
				pos: position{line: 1273, col: 5, offset: 46911},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1273, col: 5, offset: 46911},
						val:        "[^\\r\\n`]",
						chars:      []rune{'\r', '\n', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1274, col: 7, offset: 47014},
						run: (*parser).callonSingleQuoteMonospaceTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1274, col: 7, offset: 47014},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1274, col: 7, offset: 47014},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1274, col: 11, offset: 47018},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMonospaceText",
			pos:  position{line: 1278, col: 1, offset: 47191},
			expr: &choiceExpr{
				pos: position{line: 1279, col: 5, offset: 47221},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1279, col: 5, offset: 47221},
						run: (*parser).callonEscapedMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1279, col: 5, offset: 47221},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1279, col: 5, offset: 47221},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1279, col: 18, offset: 47234},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1279, col: 40, offset: 47256},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1279, col: 45, offset: 47261},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1279, col: 55, offset: 47271},
										name: "DoubleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1279, col: 89, offset: 47305},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1281, col: 9, offset: 47464},
						run: (*parser).callonEscapedMonospaceText10,
						expr: &seqExpr{
							pos: position{line: 1281, col: 9, offset: 47464},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1281, col: 9, offset: 47464},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1281, col: 22, offset: 47477},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1281, col: 44, offset: 47499},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1281, col: 49, offset: 47504},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1281, col: 59, offset: 47514},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1281, col: 93, offset: 47548},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1284, col: 9, offset: 47751},
						run: (*parser).callonEscapedMonospaceText18,
						expr: &seqExpr{
							pos: position{line: 1284, col: 9, offset: 47751},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1284, col: 9, offset: 47751},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1284, col: 22, offset: 47764},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1284, col: 44, offset: 47786},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1284, col: 48, offset: 47790},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1284, col: 58, offset: 47800},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1284, col: 92, offset: 47834},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkedText",
			pos:  position{line: 1292, col: 1, offset: 48050},
			expr: &choiceExpr{
				pos: position{line: 1292, col: 15, offset: 48064},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1292, col: 15, offset: 48064},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1292, col: 39, offset: 48088},
						name: "SingleQuoteMarkedText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedText",
			pos:  position{line: 1294, col: 1, offset: 48113},
			expr: &actionExpr{
				pos: position{line: 1294, col: 26, offset: 48138},
				run: (*parser).callonDoubleQuoteMarkedText1,
				expr: &seqExpr{
					pos: position{line: 1294, col: 26, offset: 48138},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1294, col: 26, offset: 48138},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1294, col: 32, offset: 48144},
								expr: &ruleRefExpr{
									pos:  position{line: 1294, col: 33, offset: 48145},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1294, col: 51, offset: 48163},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
						&labeledExpr{
							pos:   position{line: 1294, col: 56, offset: 48168},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1294, col: 66, offset: 48178},
								name: "DoubleQuoteMarkedTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1294, col: 97, offset: 48209},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElements",
			pos:  position{line: 1298, col: 1, offset: 48347},
			expr: &seqExpr{
				pos: position{line: 1298, col: 34, offset: 48380},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1298, col: 34, offset: 48380},
						name: "DoubleQuoteMarkedTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1298, col: 63, offset: 48409},
						expr: &seqExpr{
							pos: position{line: 1298, col: 64, offset: 48410},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1298, col: 64, offset: 48410},
									expr: &litMatcher{
										pos:        position{line: 1298, col: 66, offset: 48412},
										val:        "##",
										ignoreCase: false,
										want:       "\"##\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1298, col: 73, offset: 48419},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1298, col: 73, offset: 48419},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1298, col: 81, offset: 48427},
											name: "DoubleQuoteMarkedTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElement",
			pos:  position{line: 1300, col: 1, offset: 48496},
			expr: &choiceExpr{
				pos: position{line: 1300, col: 33, offset: 48528},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1300, col: 33, offset: 48528},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 1301, col: 11, offset: 48544},
						name: "SingleQuoteMarkedText",
					},
					&seqExpr{
						pos: position{line: 1302, col: 11, offset: 48577},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1302, col: 11, offset: 48577},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1302, col: 19, offset: 48585},
								expr: &ruleRefExpr{
									pos:  position{line: 1302, col: 20, offset: 48586},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1303, col: 11, offset: 48605},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1304, col: 11, offset: 48629},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1305, col: 11, offset: 48649},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1306, col: 11, offset: 48671},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1307, col: 11, offset: 48696},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1308, col: 11, offset: 48721},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1309, col: 11, offset: 48748},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1310, col: 11, offset: 48770},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1311, col: 11, offset: 48793},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1312, col: 11, offset: 48809},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1313, col: 11, offset: 48838},
						name: "DoubleQuoteMarkedTextStringElement",
					},
					&ruleRefExpr{
						pos:  position{line: 1314, col: 11, offset: 48884},
						name: "DoubleQuoteMarkedTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextStringElement",
			pos:  position{line: 1316, col: 1, offset: 48926},
			expr: &actionExpr{
				pos: position{line: 1316, col: 39, offset: 48964},
				run: (*parser).callonDoubleQuoteMarkedTextStringElement1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1316, col: 39, offset: 48964},
					expr: &seqExpr{
						pos: position{line: 1316, col: 40, offset: 48965},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1316, col: 40, offset: 48965},
								expr: &litMatcher{
									pos:        position{line: 1316, col: 41, offset: 48966},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
							},
							&charClassMatcher{
								pos:        position{line: 1316, col: 46, offset: 48971},
								val:        "[^\\r\\n ^~{}]",
								chars:      []rune{'\r', '\n', ' ', '^', '~', '{', '}'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextFallbackCharacter",
			pos:  position{line: 1320, col: 1, offset: 49045},
			expr: &choiceExpr{
				pos: position{line: 1321, col: 5, offset: 49092},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1321, col: 5, offset: 49092},
						val:        "[^\\r\\n#]",
						chars:      []rune{'\r', '\n', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1322, col: 7, offset: 49192},
						run: (*parser).callonDoubleQuoteMarkedTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1322, col: 7, offset: 49192},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1322, col: 7, offset: 49192},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1322, col: 12, offset: 49197},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedText",
			pos:  position{line: 1326, col: 1, offset: 49366},
			expr: &choiceExpr{
				pos: position{line: 1326, col: 26, offset: 49391},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1326, col: 26, offset: 49391},
						run: (*parser).callonSingleQuoteMarkedText2,
						expr: &seqExpr{
							pos: position{line: 1326, col: 26, offset: 49391},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1326, col: 26, offset: 49391},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1326, col: 32, offset: 49397},
										expr: &ruleRefExpr{
											pos:  position{line: 1326, col: 33, offset: 49398},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1326, col: 52, offset: 49417},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1326, col: 52, offset: 49417},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
										&notExpr{
											pos: position{line: 1326, col: 56, offset: 49421},
											expr: &litMatcher{
												pos:        position{line: 1326, col: 57, offset: 49422},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1326, col: 62, offset: 49427},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1326, col: 72, offset: 49437},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1326, col: 103, offset: 49468},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1328, col: 5, offset: 49660},
						run: (*parser).callonSingleQuoteMarkedText14,
						expr: &seqExpr{
							pos: position{line: 1328, col: 5, offset: 49660},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1328, col: 5, offset: 49660},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1328, col: 11, offset: 49666},
										expr: &ruleRefExpr{
											pos:  position{line: 1328, col: 12, offset: 49667},
											name: "QuotedTextAttrs",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1328, col: 30, offset: 49685},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1328, col: 34, offset: 49689},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1328, col: 44, offset: 49699},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1328, col: 44, offset: 49699},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1328, col: 48, offset: 49703},
												name: "SingleQuoteMarkedTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1328, col: 79, offset: 49734},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElements",
			pos:  position{line: 1332, col: 1, offset: 49947},
			expr: &seqExpr{
				pos: position{line: 1332, col: 34, offset: 49980},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1332, col: 34, offset: 49980},
						expr: &ruleRefExpr{
							pos:  position{line: 1332, col: 35, offset: 49981},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1332, col: 41, offset: 49987},
						expr: &ruleRefExpr{
							pos:  position{line: 1332, col: 41, offset: 49987},
							name: "SingleQuoteMarkedTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElement",
			pos:  position{line: 1334, col: 1, offset: 50020},
			expr: &choiceExpr{
				pos: position{line: 1334, col: 33, offset: 50052},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1334, col: 33, offset: 50052},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 1335, col: 11, offset: 50068},
						name: "DoubleQuoteMarkedText",
					},
					&seqExpr{
						pos: position{line: 1336, col: 11, offset: 50101},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1336, col: 11, offset: 50101},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1336, col: 19, offset: 50109},
								expr: &ruleRefExpr{
									pos:  position{line: 1336, col: 20, offset: 50110},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1337, col: 11, offset: 50129},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1338, col: 11, offset: 50153},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1338, col: 11, offset: 50153},
								expr: &ruleRefExpr{
									pos:  position{line: 1338, col: 11, offset: 50153},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1338, col: 18, offset: 50160},
								expr: &seqExpr{
									pos: position{line: 1338, col: 19, offset: 50161},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1338, col: 19, offset: 50161},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
										&notExpr{
											pos: position{line: 1338, col: 23, offset: 50165},
											expr: &litMatcher{
												pos:        position{line: 1338, col: 24, offset: 50166},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1339, col: 11, offset: 50183},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1340, col: 11, offset: 50203},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1341, col: 11, offset: 50225},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1342, col: 11, offset: 50250},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1343, col: 11, offset: 50275},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1344, col: 11, offset: 50302},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1345, col: 11, offset: 50324},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1346, col: 11, offset: 50347},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1347, col: 11, offset: 50363},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1348, col: 11, offset: 50392},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1349, col: 11, offset: 50425},
						name: "SingleQuoteMarkedTextStringElement",
					},
					&ruleRefExpr{
						pos:  position{line: 1350, col: 11, offset: 50471},
						name: "SingleQuoteMarkedTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextStringElement",
			pos:  position{line: 1352, col: 1, offset: 50513},
			expr: &actionExpr{
				pos: position{line: 1352, col: 39, offset: 50551},
				run: (*parser).callonSingleQuoteMarkedTextStringElement1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1352, col: 39, offset: 50551},
					expr: &charClassMatcher{
						pos:        position{line: 1352, col: 39, offset: 50551},
						val:        "[^\\r\\n{} #^~]",
						chars:      []rune{'\r', '\n', '{', '}', ' ', '#', '^', '~'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextFallbackCharacter",
			pos:  position{line: 1356, col: 1, offset: 50781},
			expr: &choiceExpr{
				pos: position{line: 1357, col: 5, offset: 50828},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1357, col: 5, offset: 50828},
						val:        "[^\\r\\n#]",
						chars:      []rune{'\r', '\n', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1358, col: 7, offset: 50926},
						run: (*parser).callonSingleQuoteMarkedTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1358, col: 7, offset: 50926},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1358, col: 7, offset: 50926},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1358, col: 11, offset: 50930},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMarkedText",
			pos:  position{line: 1362, col: 1, offset: 51097},
			expr: &choiceExpr{
				pos: position{line: 1363, col: 5, offset: 51123},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1363, col: 5, offset: 51123},
						run: (*parser).callonEscapedMarkedText2,
						expr: &seqExpr{
							pos: position{line: 1363, col: 5, offset: 51123},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1363, col: 5, offset: 51123},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1363, col: 18, offset: 51136},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1363, col: 40, offset: 51158},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 1363, col: 45, offset: 51163},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1363, col: 55, offset: 51173},
										name: "DoubleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1363, col: 86, offset: 51204},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1365, col: 9, offset: 51363},
						run: (*parser).callonEscapedMarkedText10,
						expr: &seqExpr{
							pos: position{line: 1365, col: 9, offset: 51363},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1365, col: 9, offset: 51363},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1365, col: 22, offset: 51376},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1365, col: 44, offset: 51398},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 1365, col: 49, offset: 51403},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1365, col: 59, offset: 51413},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1365, col: 90, offset: 51444},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1368, col: 9, offset: 51647},
						run: (*parser).callonEscapedMarkedText18,
						expr: &seqExpr{
							pos: position{line: 1368, col: 9, offset: 51647},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1368, col: 9, offset: 51647},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1368, col: 22, offset: 51660},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1368, col: 44, offset: 51682},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1368, col: 48, offset: 51686},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1368, col: 58, offset: 51696},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1368, col: 89, offset: 51727},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptText",
			pos:  position{line: 1373, col: 1, offset: 51882},
			expr: &actionExpr{
				pos: position{line: 1373, col: 18, offset: 51899},
				run: (*parser).callonSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1373, col: 18, offset: 51899},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1373, col: 18, offset: 51899},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1373, col: 24, offset: 51905},
								expr: &ruleRefExpr{
									pos:  position{line: 1373, col: 25, offset: 51906},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1373, col: 43, offset: 51924},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1373, col: 47, offset: 51928},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1373, col: 56, offset: 51937},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1373, col: 78, offset: 51959},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SubscriptTextElement",
			pos:  position{line: 1377, col: 1, offset: 52059},
			expr: &choiceExpr{
				pos: position{line: 1377, col: 25, offset: 52083},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1377, col: 25, offset: 52083},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1377, col: 38, offset: 52096},
						name: "NonSubscriptText",
					},
				},
			},
		},
		{
			name: "NonSubscriptText",
			pos:  position{line: 1379, col: 1, offset: 52117},
			expr: &actionExpr{
				pos: position{line: 1379, col: 21, offset: 52137},
				run: (*parser).callonNonSubscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1379, col: 21, offset: 52137},
					expr: &charClassMatcher{
						pos:        position{line: 1379, col: 21, offset: 52137},
						val:        "[^\\r\\n ~]",
						chars:      []rune{'\r', '\n', ' ', '~'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSubscriptText",
			pos:  position{line: 1383, col: 1, offset: 52218},
			expr: &actionExpr{
				pos: position{line: 1383, col: 25, offset: 52242},
				run: (*parser).callonEscapedSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1383, col: 25, offset: 52242},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1383, col: 25, offset: 52242},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1383, col: 38, offset: 52255},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1383, col: 60, offset: 52277},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1383, col: 64, offset: 52281},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1383, col: 73, offset: 52290},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1383, col: 95, offset: 52312},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptText",
			pos:  position{line: 1387, col: 1, offset: 52445},
			expr: &actionExpr{
				pos: position{line: 1387, col: 20, offset: 52464},
				run: (*parser).callonSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1387, col: 20, offset: 52464},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1387, col: 20, offset: 52464},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1387, col: 26, offset: 52470},
								expr: &ruleRefExpr{
									pos:  position{line: 1387, col: 27, offset: 52471},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1387, col: 45, offset: 52489},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1387, col: 49, offset: 52493},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1387, col: 58, offset: 52502},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1387, col: 82, offset: 52526},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptTextElement",
			pos:  position{line: 1391, col: 1, offset: 52628},
			expr: &choiceExpr{
				pos: position{line: 1391, col: 27, offset: 52654},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1391, col: 27, offset: 52654},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1391, col: 40, offset: 52667},
						name: "NonSuperscriptText",
					},
				},
			},
		},
		{
			name: "NonSuperscriptText",
			pos:  position{line: 1393, col: 1, offset: 52690},
			expr: &actionExpr{
				pos: position{line: 1393, col: 23, offset: 52712},
				run: (*parser).callonNonSuperscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1393, col: 23, offset: 52712},
					expr: &charClassMatcher{
						pos:        position{line: 1393, col: 23, offset: 52712},
						val:        "[^\\r\\n ^]",
						chars:      []rune{'\r', '\n', ' ', '^'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSuperscriptText",
			pos:  position{line: 1397, col: 1, offset: 52793},
			expr: &actionExpr{
				pos: position{line: 1397, col: 27, offset: 52819},
				run: (*parser).callonEscapedSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1397, col: 27, offset: 52819},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1397, col: 27, offset: 52819},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1397, col: 40, offset: 52832},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1397, col: 62, offset: 52854},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1397, col: 66, offset: 52858},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1397, col: 75, offset: 52867},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1397, col: 99, offset: 52891},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "InlinePassthrough",
			pos:  position{line: 1404, col: 1, offset: 53140},
			expr: &choiceExpr{
				pos: position{line: 1404, col: 22, offset: 53161},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1404, col: 22, offset: 53161},
						name: "TriplePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1404, col: 46, offset: 53185},
						name: "SinglePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1404, col: 70, offset: 53209},
						name: "PassthroughMacro",
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughPrefix",
			pos:  position{line: 1406, col: 1, offset: 53229},
			expr: &litMatcher{
				pos:        position{line: 1406, col: 32, offset: 53260},
				val:        "+",
				ignoreCase: false,
				want:       "\"+\"",
			},
		},
		{
			name: "SinglePlusPassthrough",
			pos:  position{line: 1408, col: 1, offset: 53267},
			expr: &actionExpr{
				pos: position{line: 1408, col: 26, offset: 53292},
				run: (*parser).callonSinglePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1408, col: 26, offset: 53292},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1408, col: 26, offset: 53292},
							name: "SinglePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1408, col: 54, offset: 53320},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1408, col: 63, offset: 53329},
								name: "SinglePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1408, col: 93, offset: 53359},
							name: "SinglePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1408, col: 121, offset: 53387},
							expr: &ruleRefExpr{
								pos:  position{line: 1408, col: 122, offset: 53388},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughContent",
			pos:  position{line: 1412, col: 1, offset: 53497},
			expr: &choiceExpr{
				pos: position{line: 1412, col: 33, offset: 53529},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1412, col: 34, offset: 53530},
						run: (*parser).callonSinglePlusPassthroughContent2,
						expr: &seqExpr{
							pos: position{line: 1412, col: 34, offset: 53530},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1412, col: 35, offset: 53531},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1412, col: 35, offset: 53531},
											expr: &ruleRefExpr{
												pos:  position{line: 1412, col: 36, offset: 53532},
												name: "SinglePlusPassthroughPrefix",
											},
										},
										&notExpr{
											pos: position{line: 1412, col: 64, offset: 53560},
											expr: &ruleRefExpr{
												pos:  position{line: 1412, col: 65, offset: 53561},
												name: "Space",
											},
										},
										&notExpr{
											pos: position{line: 1412, col: 71, offset: 53567},
											expr: &ruleRefExpr{
												pos:  position{line: 1412, col: 72, offset: 53568},
												name: "Newline",
											},
										},
										&anyMatcher{
											line: 1412, col: 80, offset: 53576,
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1412, col: 83, offset: 53579},
									expr: &seqExpr{
										pos: position{line: 1412, col: 84, offset: 53580},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1412, col: 84, offset: 53580},
												expr: &seqExpr{
													pos: position{line: 1412, col: 86, offset: 53582},
													exprs: []interface{}{
														&oneOrMoreExpr{
															pos: position{line: 1412, col: 86, offset: 53582},
															expr: &ruleRefExpr{
																pos:  position{line: 1412, col: 86, offset: 53582},
																name: "Space",
															},
														},
														&ruleRefExpr{
															pos:  position{line: 1412, col: 93, offset: 53589},
															name: "SinglePlusPassthroughPrefix",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 1412, col: 122, offset: 53618},
												expr: &ruleRefExpr{
													pos:  position{line: 1412, col: 123, offset: 53619},
													name: "SinglePlusPassthroughPrefix",
												},
											},
											&notExpr{
												pos: position{line: 1412, col: 151, offset: 53647},
												expr: &ruleRefExpr{
													pos:  position{line: 1412, col: 152, offset: 53648},
													name: "Newline",
												},
											},
											&anyMatcher{
												line: 1412, col: 160, offset: 53656,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1414, col: 7, offset: 53800},
						run: (*parser).callonSinglePlusPassthroughContent24,
						expr: &seqExpr{
							pos: position{line: 1414, col: 8, offset: 53801},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1414, col: 8, offset: 53801},
									expr: &ruleRefExpr{
										pos:  position{line: 1414, col: 9, offset: 53802},
										name: "Space",
									},
								},
								&notExpr{
									pos: position{line: 1414, col: 15, offset: 53808},
									expr: &ruleRefExpr{
										pos:  position{line: 1414, col: 16, offset: 53809},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 1414, col: 24, offset: 53817},
									expr: &ruleRefExpr{
										pos:  position{line: 1414, col: 25, offset: 53818},
										name: "SinglePlusPassthroughPrefix",
									},
								},
								&anyMatcher{
									line: 1414, col: 53, offset: 53846,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughPrefix",
			pos:  position{line: 1418, col: 1, offset: 53932},
			expr: &litMatcher{
				pos:        position{line: 1418, col: 32, offset: 53963},
				val:        "+++",
				ignoreCase: false,
				want:       "\"+++\"",
			},
		},
		{
			name: "TriplePlusPassthrough",
			pos:  position{line: 1420, col: 1, offset: 53972},
			expr: &actionExpr{
				pos: position{line: 1420, col: 26, offset: 53997},
				run: (*parser).callonTriplePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1420, col: 26, offset: 53997},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1420, col: 26, offset: 53997},
							name: "TriplePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1420, col: 54, offset: 54025},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1420, col: 63, offset: 54034},
								name: "TriplePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1420, col: 93, offset: 54064},
							name: "TriplePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1420, col: 121, offset: 54092},
							expr: &ruleRefExpr{
								pos:  position{line: 1420, col: 122, offset: 54093},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughContent",
			pos:  position{line: 1424, col: 1, offset: 54202},
			expr: &choiceExpr{
				pos: position{line: 1424, col: 33, offset: 54234},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1424, col: 34, offset: 54235},
						run: (*parser).callonTriplePlusPassthroughContent2,
						expr: &zeroOrMoreExpr{
							pos: position{line: 1424, col: 34, offset: 54235},
							expr: &seqExpr{
								pos: position{line: 1424, col: 35, offset: 54236},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1424, col: 35, offset: 54236},
										expr: &ruleRefExpr{
											pos:  position{line: 1424, col: 36, offset: 54237},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1424, col: 64, offset: 54265,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1426, col: 7, offset: 54432},
						run: (*parser).callonTriplePlusPassthroughContent8,
						expr: &zeroOrOneExpr{
							pos: position{line: 1426, col: 7, offset: 54432},
							expr: &seqExpr{
								pos: position{line: 1426, col: 8, offset: 54433},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1426, col: 8, offset: 54433},
										expr: &ruleRefExpr{
											pos:  position{line: 1426, col: 9, offset: 54434},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 1426, col: 15, offset: 54440},
										expr: &ruleRefExpr{
											pos:  position{line: 1426, col: 16, offset: 54441},
											name: "Newline",
										},
									},
									&notExpr{
										pos: position{line: 1426, col: 24, offset: 54449},
										expr: &ruleRefExpr{
											pos:  position{line: 1426, col: 25, offset: 54450},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1426, col: 53, offset: 54478,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacro",
			pos:  position{line: 1430, col: 1, offset: 54565},
			expr: &choiceExpr{
				pos: position{line: 1430, col: 21, offset: 54585},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1430, col: 21, offset: 54585},
						run: (*parser).callonPassthroughMacro2,
						expr: &seqExpr{
							pos: position{line: 1430, col: 21, offset: 54585},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1430, col: 21, offset: 54585},
									val:        "pass:[",
									ignoreCase: false,
									want:       "\"pass:[\"",
								},
								&labeledExpr{
									pos:   position{line: 1430, col: 30, offset: 54594},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1430, col: 38, offset: 54602},
										expr: &ruleRefExpr{
											pos:  position{line: 1430, col: 39, offset: 54603},
											name: "PassthroughMacroCharacter",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1430, col: 67, offset: 54631},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1432, col: 5, offset: 54729},
						run: (*parser).callonPassthroughMacro9,
						expr: &seqExpr{
							pos: position{line: 1432, col: 5, offset: 54729},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1432, col: 5, offset: 54729},
									val:        "pass:q[",
									ignoreCase: false,
									want:       "\"pass:q[\"",
								},
								&labeledExpr{
									pos:   position{line: 1432, col: 15, offset: 54739},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1432, col: 23, offset: 54747},
										expr: &choiceExpr{
											pos: position{line: 1432, col: 24, offset: 54748},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1432, col: 24, offset: 54748},
													name: "QuotedText",
												},
												&ruleRefExpr{
													pos:  position{line: 1432, col: 37, offset: 54761},
													name: "PassthroughMacroCharacter",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1432, col: 65, offset: 54789},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacroCharacter",
			pos:  position{line: 1436, col: 1, offset: 54889},
			expr: &actionExpr{
				pos: position{line: 1436, col: 30, offset: 54918},
				run: (*parser).callonPassthroughMacroCharacter1,
				expr: &charClassMatcher{
					pos:        position{line: 1436, col: 30, offset: 54918},
					val:        "[^\\]]",
					chars:      []rune{']'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "CrossReference",
			pos:  position{line: 1443, col: 1, offset: 55098},
			expr: &choiceExpr{
				pos: position{line: 1443, col: 19, offset: 55116},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1443, col: 19, offset: 55116},
						name: "InternalCrossReference",
					},
					&ruleRefExpr{
						pos:  position{line: 1443, col: 44, offset: 55141},
						name: "ExternalCrossReference",
					},
				},
			},
		},
		{
			name: "InternalCrossReference",
			pos:  position{line: 1445, col: 1, offset: 55168},
			expr: &choiceExpr{
				pos: position{line: 1445, col: 27, offset: 55194},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1445, col: 27, offset: 55194},
						run: (*parser).callonInternalCrossReference2,
						expr: &seqExpr{
							pos: position{line: 1445, col: 27, offset: 55194},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1445, col: 27, offset: 55194},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 1445, col: 32, offset: 55199},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1445, col: 36, offset: 55203},
										name: "ID",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1445, col: 40, offset: 55207},
									expr: &ruleRefExpr{
										pos:  position{line: 1445, col: 40, offset: 55207},
										name: "Space",
									},
								},
								&litMatcher{
									pos:        position{line: 1445, col: 47, offset: 55214},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&labeledExpr{
									pos:   position{line: 1445, col: 51, offset: 55218},
									label: "label",
									expr: &ruleRefExpr{
										pos:  position{line: 1445, col: 58, offset: 55225},
										name: "CrossReferenceLabel",
									},
								},
								&litMatcher{
									pos:        position{line: 1445, col: 79, offset: 55246},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1447, col: 5, offset: 55331},
						run: (*parser).callonInternalCrossReference13,
						expr: &seqExpr{
							pos: position{line: 1447, col: 5, offset: 55331},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1447, col: 5, offset: 55331},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 1447, col: 10, offset: 55336},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1447, col: 14, offset: 55340},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 1447, col: 18, offset: 55344},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalCrossReference",
			pos:  position{line: 1451, col: 1, offset: 55420},
			expr: &actionExpr{
				pos: position{line: 1451, col: 27, offset: 55446},
				run: (*parser).callonExternalCrossReference1,
				expr: &seqExpr{
					pos: position{line: 1451, col: 27, offset: 55446},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1451, col: 27, offset: 55446},
							val:        "xref:",
							ignoreCase: false,
							want:       "\"xref:\"",
						},
						&labeledExpr{
							pos:   position{line: 1451, col: 35, offset: 55454},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1451, col: 40, offset: 55459},
								name: "FileLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 1451, col: 54, offset: 55473},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1451, col: 72, offset: 55491},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReferenceLabel",
			pos:  position{line: 1455, col: 1, offset: 55618},
			expr: &ruleRefExpr{
				pos:  position{line: 1455, col: 24, offset: 55641},
				name: "ElementTitleContent",
			},
		},
		{
			name: "Link",
			pos:  position{line: 1460, col: 1, offset: 55768},
			expr: &choiceExpr{
				pos: position{line: 1460, col: 9, offset: 55776},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1460, col: 9, offset: 55776},
						name: "RelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1460, col: 24, offset: 55791},
						name: "ExternalLink",
					},
				},
			},
		},
		{
			name: "RelativeLink",
			pos:  position{line: 1463, col: 1, offset: 55875},
			expr: &actionExpr{
				pos: position{line: 1463, col: 17, offset: 55891},
				run: (*parser).callonRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1463, col: 17, offset: 55891},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1463, col: 17, offset: 55891},
							val:        "link:",
							ignoreCase: false,
							want:       "\"link:\"",
						},
						&labeledExpr{
							pos:   position{line: 1463, col: 25, offset: 55899},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1463, col: 30, offset: 55904},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1463, col: 40, offset: 55914},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1463, col: 58, offset: 55932},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalLink",
			pos:  position{line: 1467, col: 1, offset: 56047},
			expr: &actionExpr{
				pos: position{line: 1467, col: 17, offset: 56063},
				run: (*parser).callonExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1467, col: 17, offset: 56063},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1467, col: 17, offset: 56063},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1467, col: 22, offset: 56068},
								name: "LocationWithScheme",
							},
						},
						&labeledExpr{
							pos:   position{line: 1467, col: 42, offset: 56088},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1467, col: 59, offset: 56105},
								expr: &ruleRefExpr{
									pos:  position{line: 1467, col: 60, offset: 56106},
									name: "LinkAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LinkAttributes",
			pos:  position{line: 1471, col: 1, offset: 56203},
			expr: &actionExpr{
				pos: position{line: 1471, col: 19, offset: 56221},
				run: (*parser).callonLinkAttributes1,
				expr: &seqExpr{
					pos: position{line: 1471, col: 19, offset: 56221},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1471, col: 19, offset: 56221},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1471, col: 23, offset: 56225},
							label: "firstAttr",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1471, col: 33, offset: 56235},
								expr: &ruleRefExpr{
									pos:  position{line: 1471, col: 34, offset: 56236},
									name: "FirstLinkAttributeElement",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1472, col: 5, offset: 56269},
							expr: &ruleRefExpr{
								pos:  position{line: 1472, col: 5, offset: 56269},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1472, col: 12, offset: 56276},
							label: "otherattrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1472, col: 23, offset: 56287},
								expr: &ruleRefExpr{
									pos:  position{line: 1472, col: 24, offset: 56288},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1472, col: 43, offset: 56307},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FirstLinkAttributeElement",
			pos:  position{line: 1476, col: 1, offset: 56428},
			expr: &actionExpr{
				pos: position{line: 1476, col: 30, offset: 56457},
				run: (*parser).callonFirstLinkAttributeElement1,
				expr: &labeledExpr{
					pos:   position{line: 1476, col: 30, offset: 56457},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1478, col: 5, offset: 56510},
						alternatives: []interface{}{
							&actionExpr{
								pos: position{line: 1478, col: 6, offset: 56511},
								run: (*parser).callonFirstLinkAttributeElement4,
								expr: &seqExpr{
									pos: position{line: 1478, col: 6, offset: 56511},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1478, col: 6, offset: 56511},
											val:        "\"",
											ignoreCase: false,
											want:       "\"\\\"\"",
										},
										&labeledExpr{
											pos:   position{line: 1478, col: 11, offset: 56516},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 1478, col: 20, offset: 56525},
												expr: &choiceExpr{
													pos: position{line: 1478, col: 21, offset: 56526},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1478, col: 21, offset: 56526},
															name: "QuotedString",
														},
														&ruleRefExpr{
															pos:  position{line: 1478, col: 36, offset: 56541},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1478, col: 49, offset: 56554},
															name: "QuotedAttributeChar",
														},
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 1478, col: 71, offset: 56576},
											val:        "\"",
											ignoreCase: false,
											want:       "\"\\\"\"",
										},
										&andExpr{
											pos: position{line: 1478, col: 76, offset: 56581},
											expr: &notExpr{
												pos: position{line: 1478, col: 78, offset: 56583},
												expr: &litMatcher{
													pos:        position{line: 1478, col: 79, offset: 56584},
													val:        "=",
													ignoreCase: false,
													want:       "\"=\"",
												},
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 1478, col: 84, offset: 56589},
											expr: &litMatcher{
												pos:        position{line: 1478, col: 84, offset: 56589},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
										},
									},
								},
							},
							&actionExpr{
								pos: position{line: 1482, col: 6, offset: 56720},
								run: (*parser).callonFirstLinkAttributeElement19,
								expr: &seqExpr{
									pos: position{line: 1482, col: 6, offset: 56720},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 1482, col: 6, offset: 56720},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 1482, col: 15, offset: 56729},
												expr: &choiceExpr{
													pos: position{line: 1482, col: 16, offset: 56730},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1482, col: 16, offset: 56730},
															name: "QuotedString",
														},
														&ruleRefExpr{
															pos:  position{line: 1482, col: 31, offset: 56745},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1482, col: 44, offset: 56758},
															name: "UnquotedAttributeChar",
														},
													},
												},
											},
										},
										&andExpr{
											pos: position{line: 1482, col: 68, offset: 56782},
											expr: &notExpr{
												pos: position{line: 1482, col: 70, offset: 56784},
												expr: &litMatcher{
													pos:        position{line: 1482, col: 71, offset: 56785},
													val:        "=",
													ignoreCase: false,
													want:       "\"=\"",
												},
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 1482, col: 76, offset: 56790},
											expr: &litMatcher{
												pos:        position{line: 1482, col: 76, offset: 56790},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeChar",
			pos:  position{line: 1488, col: 1, offset: 56910},
			expr: &actionExpr{
				pos: position{line: 1488, col: 18, offset: 56927},
				run: (*parser).callonAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1488, col: 18, offset: 56927},
					val:        "[^\\r\\n\"=\\],]",
					chars:      []rune{'\r', '\n', '"', '=', ']', ','},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "QuotedAttributeChar",
			pos:  position{line: 1492, col: 1, offset: 57017},
			expr: &actionExpr{
				pos: position{line: 1492, col: 24, offset: 57040},
				run: (*parser).callonQuotedAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1492, col: 24, offset: 57040},
					val:        "[^\\r\\n\"=\\]]",
					chars:      []rune{'\r', '\n', '"', '=', ']'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "UnquotedAttributeChar",
			pos:  position{line: 1496, col: 1, offset: 57137},
			expr: &actionExpr{
				pos: position{line: 1496, col: 26, offset: 57162},
				run: (*parser).callonUnquotedAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1496, col: 26, offset: 57162},
					val:        "[^\\r\\n\"=\\],]",
					chars:      []rune{'\r', '\n', '"', '=', ']', ','},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "InlineLinks",
			pos:  position{line: 1501, col: 1, offset: 57324},
			expr: &actionExpr{
				pos: position{line: 1502, col: 5, offset: 57345},
				run: (*parser).callonInlineLinks1,
				expr: &seqExpr{
					pos: position{line: 1502, col: 5, offset: 57345},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1502, col: 5, offset: 57345},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1502, col: 14, offset: 57354},
								expr: &choiceExpr{
									pos: position{line: 1502, col: 15, offset: 57355},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1502, col: 15, offset: 57355},
											name: "Word",
										},
										&oneOrMoreExpr{
											pos: position{line: 1503, col: 11, offset: 57371},
											expr: &ruleRefExpr{
												pos:  position{line: 1503, col: 11, offset: 57371},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1504, col: 11, offset: 57390},
											name: "ResolvedLink",
										},
										&ruleRefExpr{
											pos:  position{line: 1505, col: 11, offset: 57415},
											name: "Parenthesis",
										},
										&ruleRefExpr{
											pos:  position{line: 1506, col: 11, offset: 57438},
											name: "AnyChar",
										},
										&ruleRefExpr{
											pos:  position{line: 1507, col: 11, offset: 57457},
											name: "Newline",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1507, col: 21, offset: 57467},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "ResolvedLink",
			pos:  position{line: 1511, col: 1, offset: 57541},
			expr: &choiceExpr{
				pos: position{line: 1511, col: 17, offset: 57557},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1511, col: 17, offset: 57557},
						name: "ResolvedRelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1511, col: 40, offset: 57580},
						name: "ResolvedExternalLink",
					},
				},
			},
		},
		{
			name: "ResolvedRelativeLink",
			pos:  position{line: 1514, col: 1, offset: 57711},
			expr: &actionExpr{
				pos: position{line: 1514, col: 25, offset: 57735},
				run: (*parser).callonResolvedRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1514, col: 25, offset: 57735},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1514, col: 25, offset: 57735},
							val:        "link:",
							ignoreCase: false,
							want:       "\"link:\"",
						},
						&labeledExpr{
							pos:   position{line: 1514, col: 33, offset: 57743},
							label: "url",
							expr: &choiceExpr{
								pos: position{line: 1514, col: 38, offset: 57748},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1514, col: 38, offset: 57748},
										name: "ResolvedLocation",
									},
									&ruleRefExpr{
										pos:  position{line: 1514, col: 57, offset: 57767},
										name: "ResolvedFileLocation",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1514, col: 79, offset: 57789},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1514, col: 97, offset: 57807},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ResolvedExternalLink",
			pos:  position{line: 1518, col: 1, offset: 57922},
			expr: &actionExpr{
				pos: position{line: 1518, col: 25, offset: 57946},
				run: (*parser).callonResolvedExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1518, col: 25, offset: 57946},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1518, col: 25, offset: 57946},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1518, col: 30, offset: 57951},
								name: "ResolvedLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 1518, col: 48, offset: 57969},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1518, col: 65, offset: 57986},
								expr: &ruleRefExpr{
									pos:  position{line: 1518, col: 66, offset: 57987},
									name: "LinkAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageBlock",
			pos:  position{line: 1525, col: 1, offset: 58189},
			expr: &actionExpr{
				pos: position{line: 1525, col: 15, offset: 58203},
				run: (*parser).callonImageBlock1,
				expr: &seqExpr{
					pos: position{line: 1525, col: 15, offset: 58203},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1525, col: 15, offset: 58203},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1525, col: 26, offset: 58214},
								expr: &ruleRefExpr{
									pos:  position{line: 1525, col: 27, offset: 58215},
									name: "Attributes",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1525, col: 40, offset: 58228},
							val:        "image::",
							ignoreCase: false,
							want:       "\"image::\"",
						},
						&labeledExpr{
							pos:   position{line: 1525, col: 50, offset: 58238},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1525, col: 56, offset: 58244},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1525, col: 66, offset: 58254},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1525, col: 84, offset: 58272},
								name: "ImageAttributes",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1525, col: 101, offset: 58289},
							expr: &ruleRefExpr{
								pos:  position{line: 1525, col: 101, offset: 58289},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1525, col: 108, offset: 58296},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "InlineImage",
			pos:  position{line: 1529, col: 1, offset: 58412},
			expr: &actionExpr{
				pos: position{line: 1529, col: 16, offset: 58427},
				run: (*parser).callonInlineImage1,
				expr: &seqExpr{
					pos: position{line: 1529, col: 16, offset: 58427},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1529, col: 16, offset: 58427},
							val:        "image:",
							ignoreCase: false,
							want:       "\"image:\"",
						},
						&notExpr{
							pos: position{line: 1529, col: 25, offset: 58436},
							expr: &litMatcher{
								pos:        position{line: 1529, col: 26, offset: 58437},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1529, col: 30, offset: 58441},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1529, col: 36, offset: 58447},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1529, col: 46, offset: 58457},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1529, col: 64, offset: 58475},
								name: "ImageAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ImageAttributes",
			pos:  position{line: 1533, col: 1, offset: 58593},
			expr: &actionExpr{
				pos: position{line: 1533, col: 20, offset: 58612},
				run: (*parser).callonImageAttributes1,
				expr: &seqExpr{
					pos: position{line: 1533, col: 20, offset: 58612},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1533, col: 20, offset: 58612},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1533, col: 24, offset: 58616},
							label: "alt",
							expr: &zeroOrOneExpr{
								pos: position{line: 1533, col: 28, offset: 58620},
								expr: &ruleRefExpr{
									pos:  position{line: 1533, col: 29, offset: 58621},
									name: "StandaloneAttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1533, col: 56, offset: 58648},
							expr: &litMatcher{
								pos:        position{line: 1533, col: 56, offset: 58648},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1533, col: 61, offset: 58653},
							label: "width",
							expr: &zeroOrOneExpr{
								pos: position{line: 1533, col: 67, offset: 58659},
								expr: &ruleRefExpr{
									pos:  position{line: 1533, col: 68, offset: 58660},
									name: "StandaloneAttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1533, col: 95, offset: 58687},
							expr: &litMatcher{
								pos:        position{line: 1533, col: 95, offset: 58687},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1533, col: 100, offset: 58692},
							label: "height",
							expr: &zeroOrOneExpr{
								pos: position{line: 1533, col: 107, offset: 58699},
								expr: &ruleRefExpr{
									pos:  position{line: 1533, col: 108, offset: 58700},
									name: "StandaloneAttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1533, col: 135, offset: 58727},
							expr: &litMatcher{
								pos:        position{line: 1533, col: 135, offset: 58727},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1533, col: 140, offset: 58732},
							expr: &ruleRefExpr{
								pos:  position{line: 1533, col: 140, offset: 58732},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1533, col: 147, offset: 58739},
							label: "otherattrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1533, col: 158, offset: 58750},
								expr: &ruleRefExpr{
									pos:  position{line: 1533, col: 159, offset: 58751},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1533, col: 178, offset: 58770},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "InlineIcon",
			pos:  position{line: 1540, col: 1, offset: 59062},
			expr: &actionExpr{
				pos: position{line: 1540, col: 15, offset: 59076},
				run: (*parser).callonInlineIcon1,
				expr: &seqExpr{
					pos: position{line: 1540, col: 15, offset: 59076},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1540, col: 15, offset: 59076},
							val:        "icon:",
							ignoreCase: false,
							want:       "\"icon:\"",
						},
						&labeledExpr{
							pos:   position{line: 1540, col: 23, offset: 59084},
							label: "iconClass",
							expr: &actionExpr{
								pos: position{line: 1540, col: 34, offset: 59095},
								run: (*parser).callonInlineIcon5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1540, col: 34, offset: 59095},
									expr: &charClassMatcher{
										pos:        position{line: 1540, col: 34, offset: 59095},
										val:        "[\\pL0-9_-]",
										chars:      []rune{'_', '-'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1540, col: 78, offset: 59139},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1540, col: 96, offset: 59157},
								name: "IconAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "IconAttributes",
			pos:  position{line: 1544, col: 1, offset: 59264},
			expr: &actionExpr{
				pos: position{line: 1544, col: 19, offset: 59282},
				run: (*parser).callonIconAttributes1,
				expr: &seqExpr{
					pos: position{line: 1544, col: 19, offset: 59282},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1544, col: 19, offset: 59282},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1544, col: 23, offset: 59286},
							label: "size",
							expr: &zeroOrOneExpr{
								pos: position{line: 1544, col: 28, offset: 59291},
								expr: &ruleRefExpr{
									pos:  position{line: 1544, col: 29, offset: 59292},
									name: "StandaloneAttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1544, col: 56, offset: 59319},
							expr: &litMatcher{
								pos:        position{line: 1544, col: 56, offset: 59319},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1544, col: 61, offset: 59324},
							expr: &ruleRefExpr{
								pos:  position{line: 1544, col: 61, offset: 59324},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1544, col: 68, offset: 59331},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1544, col: 75, offset: 59338},
								expr: &ruleRefExpr{
									pos:  position{line: 1544, col: 76, offset: 59339},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1544, col: 95, offset: 59358},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "InlineFootnote",
			pos:  position{line: 1551, col: 1, offset: 59636},
			expr: &choiceExpr{
				pos: position{line: 1551, col: 19, offset: 59654},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1551, col: 19, offset: 59654},
						run: (*parser).callonInlineFootnote2,
						expr: &seqExpr{
							pos: position{line: 1551, col: 19, offset: 59654},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1551, col: 19, offset: 59654},
									val:        "footnote:[",
									ignoreCase: false,
									want:       "\"footnote:[\"",
								},
								&labeledExpr{
									pos:   position{line: 1551, col: 32, offset: 59667},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1551, col: 41, offset: 59676},
										name: "FootnoteContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1551, col: 58, offset: 59693},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1553, col: 5, offset: 59763},
						run: (*parser).callonInlineFootnote8,
						expr: &seqExpr{
							pos: position{line: 1553, col: 5, offset: 59763},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1553, col: 5, offset: 59763},
									val:        "footnote:",
									ignoreCase: false,
									want:       "\"footnote:\"",
								},
								&labeledExpr{
									pos:   position{line: 1553, col: 17, offset: 59775},
									label: "ref",
									expr: &ruleRefExpr{
										pos:  position{line: 1553, col: 22, offset: 59780},
										name: "FootnoteRef",
									},
								},
								&litMatcher{
									pos:        position{line: 1553, col: 35, offset: 59793},
									val:        "[",
									ignoreCase: false,
									want:       "\"[\"",
								},
								&labeledExpr{
									pos:   position{line: 1553, col: 39, offset: 59797},
									label: "content",
									expr: &zeroOrOneExpr{
										pos: position{line: 1553, col: 47, offset: 59805},
										expr: &ruleRefExpr{
											pos:  position{line: 1553, col: 48, offset: 59806},
											name: "FootnoteContent",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1553, col: 66, offset: 59824},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FootnoteRef",
			pos:  position{line: 1557, col: 1, offset: 59889},
			expr: &ruleRefExpr{
				pos:  position{line: 1557, col: 16, offset: 59904},
				name: "Alphanums",
			},
		},
		{
			name: "FootnoteContent",
			pos:  position{line: 1559, col: 1, offset: 59917},
			expr: &actionExpr{
				pos: position{line: 1559, col: 20, offset: 59936},
				run: (*parser).callonFootnoteContent1,
				expr: &labeledExpr{
					pos:   position{line: 1559, col: 20, offset: 59936},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1559, col: 29, offset: 59945},
						expr: &seqExpr{
							pos: position{line: 1559, col: 30, offset: 59946},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1559, col: 30, offset: 59946},
									expr: &litMatcher{
										pos:        position{line: 1559, col: 31, offset: 59947},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1559, col: 35, offset: 59951},
									name: "InlineElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DelimitedBlock",
			pos:  position{line: 1566, col: 1, offset: 60282},
			expr: &actionExpr{
				pos: position{line: 1566, col: 19, offset: 60300},
				run: (*parser).callonDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 1566, col: 19, offset: 60300},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1566, col: 19, offset: 60300},
							expr: &ruleRefExpr{
								pos:  position{line: 1566, col: 20, offset: 60301},
								name: "Alphanum",
							},
						},
						&labeledExpr{
							pos:   position{line: 1567, col: 5, offset: 60390},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 1567, col: 12, offset: 60397},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1567, col: 12, offset: 60397},
										name: "FencedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1568, col: 11, offset: 60421},
										name: "ListingBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1569, col: 11, offset: 60446},
										name: "ExampleBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1570, col: 11, offset: 60471},
										name: "VerseBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1571, col: 11, offset: 60494},
										name: "QuoteBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1572, col: 11, offset: 60517},
										name: "SidebarBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1573, col: 11, offset: 60541},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 1574, col: 11, offset: 60570},
										name: "PassthroughBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1575, col: 11, offset: 60598},
										name: "Table",
									},
									&ruleRefExpr{
										pos:  position{line: 1576, col: 11, offset: 60615},
										name: "CommentBlock",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockDelimiter",
			pos:  position{line: 1580, col: 1, offset: 60660},
			expr: &choiceExpr{
				pos: position{line: 1580, col: 19, offset: 60678},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1580, col: 19, offset: 60678},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1580, col: 19, offset: 60678},
								expr: &ruleRefExpr{
									pos:  position{line: 1580, col: 21, offset: 60680},
									name: "Alphanum",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1580, col: 31, offset: 60690},
								name: "LiteralBlockDelimiter",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1581, col: 19, offset: 60762},
						name: "FencedBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1582, col: 19, offset: 60803},
						name: "ListingBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1583, col: 19, offset: 60845},
						name: "ExampleBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1584, col: 19, offset: 60887},
						name: "CommentBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1585, col: 19, offset: 60929},
						name: "QuoteBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1586, col: 19, offset: 60968},
						name: "SidebarBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1587, col: 19, offset: 61009},
						name: "PassthroughBlockDelimiter",
					},
				},
			},
		},
		{
			name: "VerbatimContent",
			pos:  position{line: 1589, col: 1, offset: 61038},
			expr: &choiceExpr{
				pos: position{line: 1589, col: 20, offset: 61057},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1589, col: 20, offset: 61057},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 1589, col: 36, offset: 61073},
						name: "VerbatimLine",
					},
				},
			},
		},
		{
			name: "VerbatimLine",
			pos:  position{line: 1591, col: 1, offset: 61089},
			expr: &actionExpr{
				pos: position{line: 1591, col: 17, offset: 61105},
				run: (*parser).callonVerbatimLine1,
				expr: &seqExpr{
					pos: position{line: 1591, col: 17, offset: 61105},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1591, col: 17, offset: 61105},
							expr: &ruleRefExpr{
								pos:  position{line: 1591, col: 18, offset: 61106},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1591, col: 22, offset: 61110},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1591, col: 31, offset: 61119},
								name: "VerbatimLineContent",
							},
						},
						&labeledExpr{
							pos:   position{line: 1591, col: 52, offset: 61140},
							label: "callouts",
							expr: &zeroOrOneExpr{
								pos: position{line: 1591, col: 61, offset: 61149},
								expr: &ruleRefExpr{
									pos:  position{line: 1591, col: 62, offset: 61150},
									name: "Callouts",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1591, col: 73, offset: 61161},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "VerbatimLineContent",
			pos:  position{line: 1595, col: 1, offset: 61235},
			expr: &actionExpr{
				pos: position{line: 1595, col: 24, offset: 61258},
				run: (*parser).callonVerbatimLineContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1595, col: 24, offset: 61258},
					expr: &seqExpr{
						pos: position{line: 1595, col: 25, offset: 61259},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1595, col: 25, offset: 61259},
								expr: &ruleRefExpr{
									pos:  position{line: 1595, col: 26, offset: 61260},
									name: "Callouts",
								},
							},
							&choiceExpr{
								pos: position{line: 1595, col: 36, offset: 61270},
								alternatives: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 1595, col: 36, offset: 61270},
										expr: &ruleRefExpr{
											pos:  position{line: 1595, col: 36, offset: 61270},
											name: "Space",
										},
									},
									&oneOrMoreExpr{
										pos: position{line: 1595, col: 45, offset: 61279},
										expr: &charClassMatcher{
											pos:        position{line: 1595, col: 45, offset: 61279},
											val:        "[^ \\r\\n]",
											chars:      []rune{' ', '\r', '\n'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Callouts",
			pos:  position{line: 1599, col: 1, offset: 61333},
			expr: &oneOrMoreExpr{
				pos: position{line: 1599, col: 13, offset: 61345},
				expr: &ruleRefExpr{
					pos:  position{line: 1599, col: 13, offset: 61345},
					name: "Callout",
				},
			},
		},
		{
			name: "Callout",
			pos:  position{line: 1601, col: 1, offset: 61357},
			expr: &actionExpr{
				pos: position{line: 1601, col: 12, offset: 61368},
				run: (*parser).callonCallout1,
				expr: &seqExpr{
					pos: position{line: 1601, col: 12, offset: 61368},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1601, col: 12, offset: 61368},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 1601, col: 16, offset: 61372},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1601, col: 21, offset: 61377},
								run: (*parser).callonCallout5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1601, col: 21, offset: 61377},
									expr: &charClassMatcher{
										pos:        position{line: 1601, col: 21, offset: 61377},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1601, col: 69, offset: 61425},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1601, col: 73, offset: 61429},
							expr: &ruleRefExpr{
								pos:  position{line: 1601, col: 73, offset: 61429},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 1601, col: 80, offset: 61436},
							expr: &choiceExpr{
								pos: position{line: 1601, col: 82, offset: 61438},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1601, col: 82, offset: 61438},
										name: "EOL",
									},
									&ruleRefExpr{
										pos:  position{line: 1601, col: 88, offset: 61444},
										name: "Callout",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CalloutListItem",
			pos:  position{line: 1605, col: 1, offset: 61501},
			expr: &actionExpr{
				pos: position{line: 1605, col: 20, offset: 61520},
				run: (*parser).callonCalloutListItem1,
				expr: &seqExpr{
					pos: position{line: 1605, col: 20, offset: 61520},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1605, col: 20, offset: 61520},
							label: "ref",
							expr: &ruleRefExpr{
								pos:  position{line: 1605, col: 25, offset: 61525},
								name: "CalloutListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 1605, col: 48, offset: 61548},
							label: "description",
							expr: &oneOrMoreExpr{
								pos: position{line: 1605, col: 61, offset: 61561},
								expr: &ruleRefExpr{
									pos:  position{line: 1605, col: 61, offset: 61561},
									name: "ListParagraph",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CalloutListItemPrefix",
			pos:  position{line: 1609, col: 1, offset: 61662},
			expr: &actionExpr{
				pos: position{line: 1609, col: 26, offset: 61687},
				run: (*parser).callonCalloutListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 1609, col: 26, offset: 61687},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1609, col: 26, offset: 61687},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 1609, col: 30, offset: 61691},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1609, col: 35, offset: 61696},
								run: (*parser).callonCalloutListItemPrefix5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1609, col: 35, offset: 61696},
									expr: &charClassMatcher{
										pos:        position{line: 1609, col: 35, offset: 61696},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1609, col: 83, offset: 61744},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 1609, col: 87, offset: 61748},
							expr: &ruleRefExpr{
								pos:  position{line: 1609, col: 87, offset: 61748},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "FencedBlockDelimiter",
			pos:  position{line: 1616, col: 1, offset: 61982},
			expr: &seqExpr{
				pos: position{line: 1616, col: 25, offset: 62006},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1616, col: 25, offset: 62006},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1616, col: 31, offset: 62012},
						expr: &ruleRefExpr{
							pos:  position{line: 1616, col: 31, offset: 62012},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1616, col: 38, offset: 62019},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "FencedBlockStartDelimiter",
			pos:  position{line: 1618, col: 1, offset: 62081},
			expr: &seqExpr{
				pos: position{line: 1618, col: 30, offset: 62110},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1618, col: 30, offset: 62110},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1618, col: 36, offset: 62116},
						expr: &ruleRefExpr{
							pos:  position{line: 1618, col: 36, offset: 62116},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1618, col: 43, offset: 62123},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "FencedBlockEndDelimiter",
			pos:  position{line: 1620, col: 1, offset: 62130},
			expr: &choiceExpr{
				pos: position{line: 1620, col: 28, offset: 62157},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1620, col: 29, offset: 62158},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1620, col: 29, offset: 62158},
								val:        "```",
								ignoreCase: false,
								want:       "\"```\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1620, col: 35, offset: 62164},
								expr: &ruleRefExpr{
									pos:  position{line: 1620, col: 35, offset: 62164},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1620, col: 42, offset: 62171},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1620, col: 49, offset: 62178},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "FencedBlock",
			pos:  position{line: 1622, col: 1, offset: 62185},
			expr: &actionExpr{
				pos: position{line: 1622, col: 16, offset: 62200},
				run: (*parser).callonFencedBlock1,
				expr: &seqExpr{
					pos: position{line: 1622, col: 16, offset: 62200},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1622, col: 16, offset: 62200},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1622, col: 27, offset: 62211},
								expr: &ruleRefExpr{
									pos:  position{line: 1622, col: 28, offset: 62212},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1622, col: 41, offset: 62225},
							name: "FencedBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1622, col: 67, offset: 62251},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1622, col: 76, offset: 62260},
								name: "FencedBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1622, col: 104, offset: 62288},
							name: "FencedBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "FencedBlockVerbatimContent",
			pos:  position{line: 1626, col: 1, offset: 62407},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1626, col: 31, offset: 62437},
				expr: &actionExpr{
					pos: position{line: 1626, col: 32, offset: 62438},
					run: (*parser).callonFencedBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1626, col: 32, offset: 62438},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1626, col: 32, offset: 62438},
								expr: &ruleRefExpr{
									pos:  position{line: 1626, col: 33, offset: 62439},
									name: "FencedBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1626, col: 57, offset: 62463},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1626, col: 66, offset: 62472},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListingBlockDelimiter",
			pos:  position{line: 1633, col: 1, offset: 62816},
			expr: &seqExpr{
				pos: position{line: 1633, col: 26, offset: 62841},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1633, col: 26, offset: 62841},
						val:        "----",
						ignoreCase: false,
						want:       "\"----\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1633, col: 33, offset: 62848},
						expr: &ruleRefExpr{
							pos:  position{line: 1633, col: 33, offset: 62848},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1633, col: 40, offset: 62855},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ListingBlockStartDelimiter",
			pos:  position{line: 1635, col: 1, offset: 62862},
			expr: &seqExpr{
				pos: position{line: 1635, col: 31, offset: 62892},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1635, col: 31, offset: 62892},
						val:        "----",
						ignoreCase: false,
						want:       "\"----\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1635, col: 38, offset: 62899},
						expr: &ruleRefExpr{
							pos:  position{line: 1635, col: 38, offset: 62899},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1635, col: 45, offset: 62906},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ListingBlockEndDelimiter",
			pos:  position{line: 1637, col: 1, offset: 62913},
			expr: &choiceExpr{
				pos: position{line: 1637, col: 29, offset: 62941},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1637, col: 30, offset: 62942},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1637, col: 30, offset: 62942},
								val:        "----",
								ignoreCase: false,
								want:       "\"----\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1637, col: 37, offset: 62949},
								expr: &ruleRefExpr{
									pos:  position{line: 1637, col: 37, offset: 62949},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1637, col: 44, offset: 62956},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1637, col: 51, offset: 62963},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "ListingBlock",
			pos:  position{line: 1639, col: 1, offset: 62970},
			expr: &actionExpr{
				pos: position{line: 1639, col: 17, offset: 62986},
				run: (*parser).callonListingBlock1,
				expr: &seqExpr{
					pos: position{line: 1639, col: 17, offset: 62986},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1639, col: 17, offset: 62986},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1639, col: 28, offset: 62997},
								expr: &ruleRefExpr{
									pos:  position{line: 1639, col: 29, offset: 62998},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1639, col: 42, offset: 63011},
							name: "ListingBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1639, col: 69, offset: 63038},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1639, col: 78, offset: 63047},
								name: "ListingBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1639, col: 107, offset: 63076},
							name: "ListingBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "ListingBlockVerbatimContent",
			pos:  position{line: 1643, col: 1, offset: 63197},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1643, col: 32, offset: 63228},
				expr: &actionExpr{
					pos: position{line: 1643, col: 33, offset: 63229},
					run: (*parser).callonListingBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1643, col: 33, offset: 63229},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1643, col: 33, offset: 63229},
								expr: &ruleRefExpr{
									pos:  position{line: 1643, col: 34, offset: 63230},
									name: "ListingBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1643, col: 59, offset: 63255},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1643, col: 68, offset: 63264},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockDelimiter",
			pos:  position{line: 1650, col: 1, offset: 63608},
			expr: &seqExpr{
				pos: position{line: 1650, col: 26, offset: 63633},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1650, col: 26, offset: 63633},
						val:        "====",
						ignoreCase: false,
						want:       "\"====\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1650, col: 33, offset: 63640},
						expr: &ruleRefExpr{
							pos:  position{line: 1650, col: 33, offset: 63640},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1650, col: 40, offset: 63647},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ExampleBlockStartDelimiter",
			pos:  position{line: 1652, col: 1, offset: 63654},
			expr: &seqExpr{
				pos: position{line: 1652, col: 31, offset: 63684},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1652, col: 31, offset: 63684},
						val:        "====",
						ignoreCase: false,
						want:       "\"====\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1652, col: 38, offset: 63691},
						expr: &ruleRefExpr{
							pos:  position{line: 1652, col: 38, offset: 63691},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1652, col: 45, offset: 63698},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ExampleBlockEndDelimiter",
			pos:  position{line: 1654, col: 1, offset: 63705},
			expr: &choiceExpr{
				pos: position{line: 1654, col: 29, offset: 63733},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1654, col: 30, offset: 63734},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1654, col: 30, offset: 63734},
								val:        "====",
								ignoreCase: false,
								want:       "\"====\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1654, col: 37, offset: 63741},
								expr: &ruleRefExpr{
									pos:  position{line: 1654, col: 37, offset: 63741},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1654, col: 44, offset: 63748},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1654, col: 51, offset: 63755},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "ExampleBlock",
			pos:  position{line: 1656, col: 1, offset: 63762},
			expr: &actionExpr{
				pos: position{line: 1656, col: 17, offset: 63778},
				run: (*parser).callonExampleBlock1,
				expr: &seqExpr{
					pos: position{line: 1656, col: 17, offset: 63778},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1656, col: 17, offset: 63778},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1656, col: 28, offset: 63789},
								expr: &ruleRefExpr{
									pos:  position{line: 1656, col: 29, offset: 63790},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1656, col: 42, offset: 63803},
							name: "ExampleBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1656, col: 69, offset: 63830},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1656, col: 78, offset: 63839},
								name: "ExampleBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1656, col: 107, offset: 63868},
							name: "ExampleBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockVerbatimContent",
			pos:  position{line: 1660, col: 1, offset: 63989},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1660, col: 32, offset: 64020},
				expr: &actionExpr{
					pos: position{line: 1660, col: 33, offset: 64021},
					run: (*parser).callonExampleBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1660, col: 33, offset: 64021},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1660, col: 33, offset: 64021},
								expr: &ruleRefExpr{
									pos:  position{line: 1660, col: 34, offset: 64022},
									name: "ExampleBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1660, col: 59, offset: 64047},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1660, col: 68, offset: 64056},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockDelimiter",
			pos:  position{line: 1667, col: 1, offset: 64398},
			expr: &seqExpr{
				pos: position{line: 1667, col: 24, offset: 64421},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1667, col: 24, offset: 64421},
						val:        "____",
						ignoreCase: false,
						want:       "\"____\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1667, col: 31, offset: 64428},
						expr: &ruleRefExpr{
							pos:  position{line: 1667, col: 31, offset: 64428},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1667, col: 38, offset: 64435},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "QuoteBlockStartDelimiter",
			pos:  position{line: 1669, col: 1, offset: 64467},
			expr: &seqExpr{
				pos: position{line: 1669, col: 29, offset: 64495},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1669, col: 29, offset: 64495},
						val:        "____",
						ignoreCase: false,
						want:       "\"____\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1669, col: 36, offset: 64502},
						expr: &ruleRefExpr{
							pos:  position{line: 1669, col: 36, offset: 64502},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1669, col: 43, offset: 64509},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "QuoteBlockEndDelimiter",
			pos:  position{line: 1671, col: 1, offset: 64541},
			expr: &choiceExpr{
				pos: position{line: 1671, col: 27, offset: 64567},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1671, col: 28, offset: 64568},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1671, col: 28, offset: 64568},
								val:        "____",
								ignoreCase: false,
								want:       "\"____\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1671, col: 35, offset: 64575},
								expr: &ruleRefExpr{
									pos:  position{line: 1671, col: 35, offset: 64575},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1671, col: 42, offset: 64582},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1671, col: 49, offset: 64589},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "QuoteBlock",
			pos:  position{line: 1673, col: 1, offset: 64621},
			expr: &actionExpr{
				pos: position{line: 1673, col: 15, offset: 64635},
				run: (*parser).callonQuoteBlock1,
				expr: &seqExpr{
					pos: position{line: 1673, col: 15, offset: 64635},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1673, col: 15, offset: 64635},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1673, col: 26, offset: 64646},
								expr: &ruleRefExpr{
									pos:  position{line: 1673, col: 27, offset: 64647},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1673, col: 40, offset: 64660},
							name: "QuoteBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1673, col: 65, offset: 64685},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1673, col: 74, offset: 64694},
								name: "QuoteBlockVerbatimElement",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1673, col: 101, offset: 64721},
							name: "QuoteBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockVerbatimElement",
			pos:  position{line: 1677, col: 1, offset: 64838},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1677, col: 30, offset: 64867},
				expr: &actionExpr{
					pos: position{line: 1677, col: 31, offset: 64868},
					run: (*parser).callonQuoteBlockVerbatimElement2,
					expr: &seqExpr{
						pos: position{line: 1677, col: 31, offset: 64868},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1677, col: 31, offset: 64868},
								expr: &ruleRefExpr{
									pos:  position{line: 1677, col: 32, offset: 64869},
									name: "QuoteBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1677, col: 55, offset: 64892},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1677, col: 64, offset: 64901},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlock",
			pos:  position{line: 1686, col: 1, offset: 65294},
			expr: &actionExpr{
				pos: position{line: 1686, col: 15, offset: 65308},
				run: (*parser).callonVerseBlock1,
				expr: &seqExpr{
					pos: position{line: 1686, col: 15, offset: 65308},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1686, col: 15, offset: 65308},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1686, col: 27, offset: 65320},
								name: "Attributes",
							},
						},
						&andCodeExpr{
							pos: position{line: 1687, col: 5, offset: 65338},
							run: (*parser).callonVerseBlock5,
						},
						&ruleRefExpr{
							pos:  position{line: 1691, col: 5, offset: 65537},
							name: "QuoteBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1691, col: 30, offset: 65562},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1691, col: 39, offset: 65571},
								name: "VerseBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1691, col: 66, offset: 65598},
							name: "QuoteBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "VerseBlockVerbatimContent",
			pos:  position{line: 1695, col: 1, offset: 65723},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1695, col: 30, offset: 65752},
				expr: &actionExpr{
					pos: position{line: 1695, col: 31, offset: 65753},
					run: (*parser).callonVerseBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1695, col: 31, offset: 65753},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1695, col: 31, offset: 65753},
								expr: &ruleRefExpr{
									pos:  position{line: 1695, col: 32, offset: 65754},
									name: "QuoteBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1695, col: 55, offset: 65777},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1695, col: 64, offset: 65786},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockDelimiter",
			pos:  position{line: 1702, col: 1, offset: 66130},
			expr: &seqExpr{
				pos: position{line: 1702, col: 26, offset: 66155},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1702, col: 26, offset: 66155},
						val:        "****",
						ignoreCase: false,
						want:       "\"****\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1702, col: 33, offset: 66162},
						expr: &ruleRefExpr{
							pos:  position{line: 1702, col: 33, offset: 66162},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1702, col: 40, offset: 66169},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "SidebarBlockStartDelimiter",
			pos:  position{line: 1704, col: 1, offset: 66176},
			expr: &seqExpr{
				pos: position{line: 1704, col: 31, offset: 66206},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1704, col: 31, offset: 66206},
						val:        "****",
						ignoreCase: false,
						want:       "\"****\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1704, col: 38, offset: 66213},
						expr: &ruleRefExpr{
							pos:  position{line: 1704, col: 38, offset: 66213},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1704, col: 45, offset: 66220},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "SidebarBlockEndDelimiter",
			pos:  position{line: 1706, col: 1, offset: 66227},
			expr: &choiceExpr{
				pos: position{line: 1706, col: 29, offset: 66255},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1706, col: 30, offset: 66256},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1706, col: 30, offset: 66256},
								val:        "****",
								ignoreCase: false,
								want:       "\"****\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1706, col: 37, offset: 66263},
								expr: &ruleRefExpr{
									pos:  position{line: 1706, col: 37, offset: 66263},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1706, col: 44, offset: 66270},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1706, col: 51, offset: 66277},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "SidebarBlock",
			pos:  position{line: 1708, col: 1, offset: 66284},
			expr: &actionExpr{
				pos: position{line: 1708, col: 17, offset: 66300},
				run: (*parser).callonSidebarBlock1,
				expr: &seqExpr{
					pos: position{line: 1708, col: 17, offset: 66300},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1708, col: 17, offset: 66300},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1708, col: 28, offset: 66311},
								expr: &ruleRefExpr{
									pos:  position{line: 1708, col: 29, offset: 66312},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1708, col: 42, offset: 66325},
							name: "SidebarBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1708, col: 69, offset: 66352},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1708, col: 78, offset: 66361},
								name: "SidebarBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1708, col: 107, offset: 66390},
							name: "SidebarBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockVerbatimContent",
			pos:  position{line: 1712, col: 1, offset: 66511},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1712, col: 32, offset: 66542},
				expr: &actionExpr{
					pos: position{line: 1712, col: 33, offset: 66543},
					run: (*parser).callonSidebarBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1712, col: 33, offset: 66543},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1712, col: 33, offset: 66543},
								expr: &ruleRefExpr{
									pos:  position{line: 1712, col: 34, offset: 66544},
									name: "SidebarBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1712, col: 59, offset: 66569},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1712, col: 68, offset: 66578},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockDelimiter",
			pos:  position{line: 1719, col: 1, offset: 66926},
			expr: &seqExpr{
				pos: position{line: 1719, col: 30, offset: 66955},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1719, col: 30, offset: 66955},
						val:        "++++",
						ignoreCase: false,
						want:       "\"++++\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1719, col: 37, offset: 66962},
						expr: &ruleRefExpr{
							pos:  position{line: 1719, col: 37, offset: 66962},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1719, col: 44, offset: 66969},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "PassthroughBlockStartDelimiter",
			pos:  position{line: 1721, col: 1, offset: 66976},
			expr: &seqExpr{
				pos: position{line: 1721, col: 35, offset: 67010},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1721, col: 35, offset: 67010},
						val:        "++++",
						ignoreCase: false,
						want:       "\"++++\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1721, col: 42, offset: 67017},
						expr: &ruleRefExpr{
							pos:  position{line: 1721, col: 42, offset: 67017},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1721, col: 49, offset: 67024},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "PassthroughBlockEndDelimiter",
			pos:  position{line: 1723, col: 1, offset: 67031},
			expr: &choiceExpr{
				pos: position{line: 1723, col: 33, offset: 67063},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1723, col: 34, offset: 67064},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1723, col: 34, offset: 67064},
								val:        "++++",
								ignoreCase: false,
								want:       "\"++++\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1723, col: 41, offset: 67071},
								expr: &ruleRefExpr{
									pos:  position{line: 1723, col: 41, offset: 67071},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1723, col: 48, offset: 67078},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1723, col: 55, offset: 67085},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "PassthroughBlock",
			pos:  position{line: 1725, col: 1, offset: 67092},
			expr: &actionExpr{
				pos: position{line: 1725, col: 21, offset: 67112},
				run: (*parser).callonPassthroughBlock1,
				expr: &seqExpr{
					pos: position{line: 1725, col: 21, offset: 67112},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1725, col: 21, offset: 67112},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1725, col: 32, offset: 67123},
								expr: &ruleRefExpr{
									pos:  position{line: 1725, col: 33, offset: 67124},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1725, col: 46, offset: 67137},
							name: "PassthroughBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1725, col: 77, offset: 67168},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1725, col: 86, offset: 67177},
								name: "PassthroughBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1725, col: 119, offset: 67210},
							name: "PassthroughBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockVerbatimContent",
			pos:  position{line: 1729, col: 1, offset: 67339},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1729, col: 36, offset: 67374},
				expr: &actionExpr{
					pos: position{line: 1729, col: 37, offset: 67375},
					run: (*parser).callonPassthroughBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1729, col: 37, offset: 67375},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1729, col: 37, offset: 67375},
								expr: &ruleRefExpr{
									pos:  position{line: 1729, col: 38, offset: 67376},
									name: "PassthroughBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1729, col: 67, offset: 67405},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1729, col: 76, offset: 67414},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NormalBlockContent",
			pos:  position{line: 1737, col: 1, offset: 67768},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1737, col: 23, offset: 67790},
				expr: &ruleRefExpr{
					pos:  position{line: 1737, col: 23, offset: 67790},
					name: "NormalBlockElement",
				},
			},
		},
		{
			name: "NormalBlockElement",
			pos:  position{line: 1739, col: 1, offset: 67813},
			expr: &actionExpr{
				pos: position{line: 1740, col: 5, offset: 67841},
				run: (*parser).callonNormalBlockElement1,
				expr: &seqExpr{
					pos: position{line: 1740, col: 5, offset: 67841},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1740, col: 5, offset: 67841},
							expr: &ruleRefExpr{
								pos:  position{line: 1740, col: 6, offset: 67842},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1740, col: 10, offset: 67846},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1740, col: 19, offset: 67855},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1740, col: 19, offset: 67855},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 1741, col: 15, offset: 67881},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 1742, col: 15, offset: 67910},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1743, col: 15, offset: 67937},
										name: "OrderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 1744, col: 15, offset: 67969},
										name: "UnorderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 1745, col: 15, offset: 68003},
										name: "LabeledListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 1746, col: 15, offset: 68035},
										name: "ContinuedListItemElement",
									},
									&ruleRefExpr{
										pos:  position{line: 1747, col: 15, offset: 68075},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1748, col: 15, offset: 68105},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1749, col: 15, offset: 68134},
										name: "AttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 1750, col: 15, offset: 68171},
										name: "AttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 1751, col: 15, offset: 68202},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1752, col: 15, offset: 68244},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockContent",
			pos:  position{line: 1756, col: 1, offset: 68297},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1756, col: 22, offset: 68318},
				expr: &ruleRefExpr{
					pos:  position{line: 1756, col: 22, offset: 68318},
					name: "VerseBlockElement",
				},
			},
		},
		{
			name: "VerseBlockElement",
			pos:  position{line: 1758, col: 1, offset: 68340},
			expr: &actionExpr{
				pos: position{line: 1758, col: 22, offset: 68361},
				run: (*parser).callonVerseBlockElement1,
				expr: &seqExpr{
					pos: position{line: 1758, col: 22, offset: 68361},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1758, col: 22, offset: 68361},
							expr: &ruleRefExpr{
								pos:  position{line: 1758, col: 23, offset: 68362},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1758, col: 27, offset: 68366},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1758, col: 36, offset: 68375},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1758, col: 36, offset: 68375},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 1758, col: 48, offset: 68387},
										name: "VerseBlockParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraph",
			pos:  position{line: 1762, col: 1, offset: 68441},
			expr: &actionExpr{
				pos: position{line: 1762, col: 24, offset: 68464},
				run: (*parser).callonVerseBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1762, col: 24, offset: 68464},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1762, col: 30, offset: 68470},
						expr: &ruleRefExpr{
							pos:  position{line: 1762, col: 31, offset: 68471},
							name: "VerseBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraphLine",
			pos:  position{line: 1766, col: 1, offset: 68565},
			expr: &actionExpr{
				pos: position{line: 1766, col: 28, offset: 68592},
				run: (*parser).callonVerseBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1766, col: 28, offset: 68592},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1766, col: 28, offset: 68592},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1766, col: 37, offset: 68601},
								expr: &ruleRefExpr{
									pos:  position{line: 1766, col: 38, offset: 68602},
									name: "InlineElement",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1766, col: 54, offset: 68618},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "Table",
			pos:  position{line: 1773, col: 1, offset: 68867},
			expr: &actionExpr{
				pos: position{line: 1773, col: 10, offset: 68876},
				run: (*parser).callonTable1,
				expr: &seqExpr{
					pos: position{line: 1773, col: 10, offset: 68876},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1773, col: 10, offset: 68876},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1773, col: 21, offset: 68887},
								expr: &ruleRefExpr{
									pos:  position{line: 1773, col: 22, offset: 68888},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1773, col: 35, offset: 68901},
							name: "TableDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1774, col: 5, offset: 68921},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 1774, col: 12, offset: 68928},
								expr: &ruleRefExpr{
									pos:  position{line: 1774, col: 13, offset: 68929},
									name: "TableLineHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1775, col: 5, offset: 68952},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1775, col: 11, offset: 68958},
								expr: &ruleRefExpr{
									pos:  position{line: 1775, col: 12, offset: 68959},
									name: "TableLine",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1776, col: 6, offset: 68977},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1776, col: 6, offset: 68977},
									name: "TableDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1776, col: 23, offset: 68994},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TableCellSeparator",
			pos:  position{line: 1780, col: 1, offset: 69113},
			expr: &seqExpr{
				pos: position{line: 1780, col: 23, offset: 69135},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1780, col: 23, offset: 69135},
						val:        "|",
						ignoreCase: false,
						want:       "\"|\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1780, col: 27, offset: 69139},
						expr: &ruleRefExpr{
							pos:  position{line: 1780, col: 27, offset: 69139},
							name: "Space",
						},
					},
				},
			},
		},
		{
			name: "TableDelimiter",
			pos:  position{line: 1782, col: 1, offset: 69149},
			expr: &seqExpr{
				pos: position{line: 1782, col: 19, offset: 69167},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1782, col: 19, offset: 69167},
						val:        "|===",
						ignoreCase: false,
						want:       "\"|===\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1782, col: 26, offset: 69174},
						expr: &ruleRefExpr{
							pos:  position{line: 1782, col: 26, offset: 69174},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1782, col: 33, offset: 69181},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "TableLineHeader",
			pos:  position{line: 1785, col: 1, offset: 69252},
			expr: &actionExpr{
				pos: position{line: 1785, col: 20, offset: 69271},
				run: (*parser).callonTableLineHeader1,
				expr: &seqExpr{
					pos: position{line: 1785, col: 20, offset: 69271},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1785, col: 20, offset: 69271},
							expr: &ruleRefExpr{
								pos:  position{line: 1785, col: 21, offset: 69272},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1785, col: 36, offset: 69287},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1785, col: 42, offset: 69293},
								expr: &ruleRefExpr{
									pos:  position{line: 1785, col: 43, offset: 69294},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1785, col: 55, offset: 69306},
							name: "EOL",
						},
						&ruleRefExpr{
							pos:  position{line: 1785, col: 59, offset: 69310},
							name: "BlankLine",
						},
					},
				},
			},
		},
		{
			name: "TableLine",
			pos:  position{line: 1789, col: 1, offset: 69382},
			expr: &actionExpr{
				pos: position{line: 1789, col: 14, offset: 69395},
				run: (*parser).callonTableLine1,
				expr: &seqExpr{
					pos: position{line: 1789, col: 14, offset: 69395},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1789, col: 14, offset: 69395},
							expr: &ruleRefExpr{
								pos:  position{line: 1789, col: 15, offset: 69396},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1789, col: 30, offset: 69411},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1789, col: 36, offset: 69417},
								expr: &ruleRefExpr{
									pos:  position{line: 1789, col: 37, offset: 69418},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1789, col: 49, offset: 69430},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1789, col: 53, offset: 69434},
							expr: &ruleRefExpr{
								pos:  position{line: 1789, col: 53, offset: 69434},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "TableCell",
			pos:  position{line: 1793, col: 1, offset: 69507},
			expr: &actionExpr{
				pos: position{line: 1793, col: 14, offset: 69520},
				run: (*parser).callonTableCell1,
				expr: &seqExpr{
					pos: position{line: 1793, col: 14, offset: 69520},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1793, col: 14, offset: 69520},
							name: "TableCellSeparator",
						},
						&labeledExpr{
							pos:   position{line: 1793, col: 33, offset: 69539},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1793, col: 42, offset: 69548},
								expr: &seqExpr{
									pos: position{line: 1793, col: 43, offset: 69549},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1793, col: 43, offset: 69549},
											expr: &ruleRefExpr{
												pos:  position{line: 1793, col: 44, offset: 69550},
												name: "TableCellSeparator",
											},
										},
										&notExpr{
											pos: position{line: 1793, col: 63, offset: 69569},
											expr: &ruleRefExpr{
												pos:  position{line: 1793, col: 64, offset: 69570},
												name: "EOL",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 1793, col: 68, offset: 69574},
											expr: &ruleRefExpr{
												pos:  position{line: 1793, col: 68, offset: 69574},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1793, col: 75, offset: 69581},
											name: "InlineElement",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1793, col: 89, offset: 69595},
											expr: &ruleRefExpr{
												pos:  position{line: 1793, col: 89, offset: 69595},
												name: "Space",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CommentBlockDelimiter",
			pos:  position{line: 1800, col: 1, offset: 69851},
			expr: &seqExpr{
				pos: position{line: 1800, col: 26, offset: 69876},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1800, col: 26, offset: 69876},
						val:        "////",
						ignoreCase: false,
						want:       "\"////\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1800, col: 33, offset: 69883},
						expr: &ruleRefExpr{
							pos:  position{line: 1800, col: 33, offset: 69883},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1800, col: 40, offset: 69890},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "CommentBlockStartDelimiter",
			pos:  position{line: 1802, col: 1, offset: 69897},
			expr: &seqExpr{
				pos: position{line: 1802, col: 31, offset: 69927},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1802, col: 31, offset: 69927},
						val:        "////",
						ignoreCase: false,
						want:       "\"////\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1802, col: 38, offset: 69934},
						expr: &ruleRefExpr{
							pos:  position{line: 1802, col: 38, offset: 69934},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1802, col: 45, offset: 69941},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "CommentBlockEndDelimiter",
			pos:  position{line: 1804, col: 1, offset: 69948},
			expr: &choiceExpr{
				pos: position{line: 1804, col: 29, offset: 69976},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1804, col: 30, offset: 69977},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1804, col: 30, offset: 69977},
								val:        "////",
								ignoreCase: false,
								want:       "\"////\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1804, col: 37, offset: 69984},
								expr: &ruleRefExpr{
									pos:  position{line: 1804, col: 37, offset: 69984},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1804, col: 44, offset: 69991},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1804, col: 51, offset: 69998},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "CommentBlock",
			pos:  position{line: 1806, col: 1, offset: 70005},
			expr: &actionExpr{
				pos: position{line: 1806, col: 17, offset: 70021},
				run: (*parser).callonCommentBlock1,
				expr: &seqExpr{
					pos: position{line: 1806, col: 17, offset: 70021},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1806, col: 17, offset: 70021},
							name: "CommentBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1806, col: 44, offset: 70048},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1806, col: 53, offset: 70057},
								name: "CommentBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1806, col: 83, offset: 70087},
							name: "CommentBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "CommentBlockVerbatimContent",
			pos:  position{line: 1810, col: 1, offset: 70201},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1810, col: 32, offset: 70232},
				expr: &actionExpr{
					pos: position{line: 1810, col: 33, offset: 70233},
					run: (*parser).callonCommentBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1810, col: 33, offset: 70233},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1810, col: 33, offset: 70233},
								expr: &ruleRefExpr{
									pos:  position{line: 1810, col: 34, offset: 70234},
									name: "CommentBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1810, col: 59, offset: 70259},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1810, col: 68, offset: 70268},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1814, col: 1, offset: 70413},
			expr: &actionExpr{
				pos: position{line: 1814, col: 22, offset: 70434},
				run: (*parser).callonSingleLineComment1,
				expr: &seqExpr{
					pos: position{line: 1814, col: 22, offset: 70434},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1814, col: 22, offset: 70434},
							expr: &ruleRefExpr{
								pos:  position{line: 1814, col: 23, offset: 70435},
								name: "CommentBlockDelimiter",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1814, col: 45, offset: 70457},
							expr: &ruleRefExpr{
								pos:  position{line: 1814, col: 45, offset: 70457},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 1814, col: 52, offset: 70464},
							val:        "//",
							ignoreCase: false,
							want:       "\"//\"",
						},
						&labeledExpr{
							pos:   position{line: 1814, col: 57, offset: 70469},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1814, col: 66, offset: 70478},
								name: "SingleLineCommentContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1814, col: 92, offset: 70504},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SingleLineCommentContent",
			pos:  position{line: 1818, col: 1, offset: 70573},
			expr: &actionExpr{
				pos: position{line: 1818, col: 29, offset: 70601},
				run: (*parser).callonSingleLineCommentContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1818, col: 29, offset: 70601},
					expr: &charClassMatcher{
						pos:        position{line: 1818, col: 29, offset: 70601},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "LiteralBlock",
			pos:  position{line: 1826, col: 1, offset: 70922},
			expr: &choiceExpr{
				pos: position{line: 1826, col: 17, offset: 70938},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1826, col: 17, offset: 70938},
						name: "ParagraphWithLiteralAttribute",
					},
					&ruleRefExpr{
						pos:  position{line: 1826, col: 49, offset: 70970},
						name: "ParagraphWithHeadingSpaces",
					},
					&ruleRefExpr{
						pos:  position{line: 1826, col: 78, offset: 70999},
						name: "ParagraphWithLiteralBlockDelimiter",
					},
				},
			},
		},
		{
			name: "LiteralBlockDelimiter",
			pos:  position{line: 1828, col: 1, offset: 71037},
			expr: &litMatcher{
				pos:        position{line: 1828, col: 26, offset: 71062},
				val:        "....",
				ignoreCase: false,
				want:       "\"....\"",
			},
		},
		{
			name: "ParagraphWithHeadingSpaces",
			pos:  position{line: 1831, col: 1, offset: 71137},
			expr: &actionExpr{
				pos: position{line: 1831, col: 31, offset: 71167},
				run: (*parser).callonParagraphWithHeadingSpaces1,
				expr: &seqExpr{
					pos: position{line: 1831, col: 31, offset: 71167},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1831, col: 31, offset: 71167},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1831, col: 42, offset: 71178},
								expr: &ruleRefExpr{
									pos:  position{line: 1831, col: 43, offset: 71179},
									name: "Attributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1831, col: 56, offset: 71192},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1831, col: 63, offset: 71199},
								name: "ParagraphWithHeadingSpacesLines",
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithHeadingSpacesLines",
			pos:  position{line: 1836, col: 1, offset: 71434},
			expr: &actionExpr{
				pos: position{line: 1837, col: 5, offset: 71475},
				run: (*parser).callonParagraphWithHeadingSpacesLines1,
				expr: &seqExpr{
					pos: position{line: 1837, col: 5, offset: 71475},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1837, col: 5, offset: 71475},
							label: "firstLine",
							expr: &actionExpr{
								pos: position{line: 1837, col: 16, offset: 71486},
								run: (*parser).callonParagraphWithHeadingSpacesLines4,
								expr: &seqExpr{
									pos: position{line: 1837, col: 16, offset: 71486},
									exprs: []interface{}{
										&oneOrMoreExpr{
											pos: position{line: 1837, col: 16, offset: 71486},
											expr: &ruleRefExpr{
												pos:  position{line: 1837, col: 16, offset: 71486},
												name: "Space",
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 1837, col: 23, offset: 71493},
											expr: &charClassMatcher{
												pos:        position{line: 1837, col: 23, offset: 71493},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1839, col: 8, offset: 71548},
							name: "EOL",
						},
						&labeledExpr{
							pos:   position{line: 1840, col: 5, offset: 71612},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1840, col: 16, offset: 71623},
								expr: &actionExpr{
									pos: position{line: 1841, col: 9, offset: 71634},
									run: (*parser).callonParagraphWithHeadingSpacesLines13,
									expr: &seqExpr{
										pos: position{line: 1841, col: 9, offset: 71634},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1841, col: 9, offset: 71634},
												expr: &ruleRefExpr{
													pos:  position{line: 1841, col: 10, offset: 71635},
													name: "BlankLine",
												},
											},
											&labeledExpr{
												pos:   position{line: 1842, col: 9, offset: 71655},
												label: "otherLine",
												expr: &actionExpr{
													pos: position{line: 1842, col: 20, offset: 71666},
													run: (*parser).callonParagraphWithHeadingSpacesLines18,
													expr: &oneOrMoreExpr{
														pos: position{line: 1842, col: 20, offset: 71666},
														expr: &charClassMatcher{
															pos:        position{line: 1842, col: 20, offset: 71666},
															val:        "[^\\r\\n]",
															chars:      []rune{'\r', '\n'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 1844, col: 12, offset: 71729},
												name: "EOL",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiter",
			pos:  position{line: 1851, col: 1, offset: 71966},
			expr: &actionExpr{
				pos: position{line: 1851, col: 39, offset: 72004},
				run: (*parser).callonParagraphWithLiteralBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1851, col: 39, offset: 72004},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1851, col: 39, offset: 72004},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1851, col: 50, offset: 72015},
								expr: &ruleRefExpr{
									pos:  position{line: 1851, col: 51, offset: 72016},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1852, col: 9, offset: 72038},
							name: "LiteralBlockDelimiter",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1852, col: 31, offset: 72060},
							expr: &ruleRefExpr{
								pos:  position{line: 1852, col: 31, offset: 72060},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1852, col: 38, offset: 72067},
							name: "Newline",
						},
						&labeledExpr{
							pos:   position{line: 1852, col: 46, offset: 72075},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1852, col: 53, offset: 72082},
								name: "ParagraphWithLiteralBlockDelimiterLines",
							},
						},
						&choiceExpr{
							pos: position{line: 1852, col: 95, offset: 72124},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 1852, col: 96, offset: 72125},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1852, col: 96, offset: 72125},
											name: "LiteralBlockDelimiter",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1852, col: 118, offset: 72147},
											expr: &ruleRefExpr{
												pos:  position{line: 1852, col: 118, offset: 72147},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1852, col: 125, offset: 72154},
											name: "EOL",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1852, col: 132, offset: 72161},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLines",
			pos:  position{line: 1857, col: 1, offset: 72325},
			expr: &actionExpr{
				pos: position{line: 1857, col: 44, offset: 72368},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLines1,
				expr: &labeledExpr{
					pos:   position{line: 1857, col: 44, offset: 72368},
					label: "lines",
					expr: &zeroOrMoreExpr{
						pos: position{line: 1857, col: 50, offset: 72374},
						expr: &ruleRefExpr{
							pos:  position{line: 1857, col: 51, offset: 72375},
							name: "ParagraphWithLiteralBlockDelimiterLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLine",
			pos:  position{line: 1861, col: 1, offset: 72463},
			expr: &actionExpr{
				pos: position{line: 1862, col: 5, offset: 72519},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLine1,
				expr: &seqExpr{
					pos: position{line: 1862, col: 5, offset: 72519},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1862, col: 5, offset: 72519},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1862, col: 11, offset: 72525},
								run: (*parser).callonParagraphWithLiteralBlockDelimiterLine4,
								expr: &seqExpr{
									pos: position{line: 1862, col: 11, offset: 72525},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1862, col: 11, offset: 72525},
											expr: &ruleRefExpr{
												pos:  position{line: 1862, col: 12, offset: 72526},
												name: "LiteralBlockDelimiter",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 1862, col: 34, offset: 72548},
											expr: &charClassMatcher{
												pos:        position{line: 1862, col: 34, offset: 72548},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1864, col: 8, offset: 72603},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttribute",
			pos:  position{line: 1869, col: 1, offset: 72734},
			expr: &actionExpr{
				pos: position{line: 1870, col: 5, offset: 72773},
				run: (*parser).callonParagraphWithLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 1870, col: 5, offset: 72773},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1870, col: 5, offset: 72773},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1870, col: 16, offset: 72784},
								expr: &ruleRefExpr{
									pos:  position{line: 1870, col: 17, offset: 72785},
									name: "Attributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1871, col: 5, offset: 72803},
							run: (*parser).callonParagraphWithLiteralAttribute6,
						},
						&labeledExpr{
							pos:   position{line: 1878, col: 5, offset: 73017},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1878, col: 12, offset: 73024},
								name: "ParagraphWithLiteralAttributeLines",
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralKind",
			pos:  position{line: 1882, col: 1, offset: 73178},
			expr: &actionExpr{
				pos: position{line: 1882, col: 16, offset: 73193},
				run: (*parser).callonLiteralKind1,
				expr: &litMatcher{
					pos:        position{line: 1882, col: 16, offset: 73193},
					val:        "literal",
					ignoreCase: false,
					want:       "\"literal\"",
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttributeLines",
			pos:  position{line: 1887, col: 1, offset: 73281},
			expr: &actionExpr{
				pos: position{line: 1887, col: 39, offset: 73319},
				run: (*parser).callonParagraphWithLiteralAttributeLines1,
				expr: &labeledExpr{
					pos:   position{line: 1887, col: 39, offset: 73319},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1887, col: 45, offset: 73325},
						expr: &ruleRefExpr{
							pos:  position{line: 1887, col: 46, offset: 73326},
							name: "ParagraphWithLiteralAttributeLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttributeLine",
			pos:  position{line: 1891, col: 1, offset: 73410},
			expr: &actionExpr{
				pos: position{line: 1891, col: 38, offset: 73447},
				run: (*parser).callonParagraphWithLiteralAttributeLine1,
				expr: &seqExpr{
					pos: position{line: 1891, col: 38, offset: 73447},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1891, col: 38, offset: 73447},
							expr: &ruleRefExpr{
								pos:  position{line: 1891, col: 39, offset: 73448},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1891, col: 49, offset: 73458},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 1891, col: 58, offset: 73467},
								run: (*parser).callonParagraphWithLiteralAttributeLine6,
								expr: &oneOrMoreExpr{
									pos: position{line: 1891, col: 58, offset: 73467},
									expr: &charClassMatcher{
										pos:        position{line: 1891, col: 58, offset: 73467},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1893, col: 4, offset: 73514},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IndexTerm",
			pos:  position{line: 1900, col: 1, offset: 73707},
			expr: &actionExpr{
				pos: position{line: 1900, col: 14, offset: 73720},
				run: (*parser).callonIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 1900, col: 14, offset: 73720},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1900, col: 14, offset: 73720},
							val:        "((",
							ignoreCase: false,
							want:       "\"((\"",
						},
						&labeledExpr{
							pos:   position{line: 1900, col: 19, offset: 73725},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 1900, col: 25, offset: 73731},
								name: "IndexTermContent",
							},
						},
						&litMatcher{
							pos:        position{line: 1900, col: 43, offset: 73749},
							val:        "))",
							ignoreCase: false,
							want:       "\"))\"",
						},
					},
				},
			},
		},
		{
			name: "IndexTermContent",
			pos:  position{line: 1904, col: 1, offset: 73818},
			expr: &actionExpr{
				pos: position{line: 1904, col: 21, offset: 73838},
				run: (*parser).callonIndexTermContent1,
				expr: &labeledExpr{
					pos:   position{line: 1904, col: 21, offset: 73838},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1904, col: 30, offset: 73847},
						expr: &choiceExpr{
							pos: position{line: 1904, col: 31, offset: 73848},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1904, col: 31, offset: 73848},
									name: "Word",
								},
								&ruleRefExpr{
									pos:  position{line: 1904, col: 38, offset: 73855},
									name: "QuotedString",
								},
								&ruleRefExpr{
									pos:  position{line: 1904, col: 53, offset: 73870},
									name: "QuotedText",
								},
								&ruleRefExpr{
									pos:  position{line: 1904, col: 66, offset: 73883},
									name: "Space",
								},
								&actionExpr{
									pos: position{line: 1904, col: 74, offset: 73891},
									run: (*parser).callonIndexTermContent9,
									expr: &seqExpr{
										pos: position{line: 1904, col: 75, offset: 73892},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1904, col: 75, offset: 73892},
												expr: &litMatcher{
													pos:        position{line: 1904, col: 76, offset: 73893},
													val:        "))",
													ignoreCase: false,
													want:       "\"))\"",
												},
											},
											&anyMatcher{
												line: 1904, col: 81, offset: 73898,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTerm",
			pos:  position{line: 1910, col: 1, offset: 74010},
			expr: &actionExpr{
				pos: position{line: 1910, col: 23, offset: 74032},
				run: (*parser).callonConcealedIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 1910, col: 23, offset: 74032},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1910, col: 23, offset: 74032},
							val:        "(((",
							ignoreCase: false,
							want:       "\"(((\"",
						},
						&labeledExpr{
							pos:   position{line: 1910, col: 29, offset: 74038},
							label: "term1",
							expr: &ruleRefExpr{
								pos:  position{line: 1910, col: 36, offset: 74045},
								name: "ConcealedIndexTermContent",
							},
						},
						&labeledExpr{
							pos:   position{line: 1911, col: 5, offset: 74078},
							label: "term2",
							expr: &zeroOrOneExpr{
								pos: position{line: 1911, col: 11, offset: 74084},
								expr: &actionExpr{
									pos: position{line: 1911, col: 12, offset: 74085},
									run: (*parser).callonConcealedIndexTerm8,
									expr: &seqExpr{
										pos: position{line: 1911, col: 12, offset: 74085},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 1911, col: 12, offset: 74085},
												expr: &ruleRefExpr{
													pos:  position{line: 1911, col: 12, offset: 74085},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 1911, col: 19, offset: 74092},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 1911, col: 23, offset: 74096},
												expr: &ruleRefExpr{
													pos:  position{line: 1911, col: 23, offset: 74096},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 1911, col: 30, offset: 74103},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 1911, col: 39, offset: 74112},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1912, col: 5, offset: 74171},
							label: "term3",
							expr: &zeroOrOneExpr{
								pos: position{line: 1912, col: 11, offset: 74177},
								expr: &actionExpr{
									pos: position{line: 1912, col: 12, offset: 74178},
									run: (*parser).callonConcealedIndexTerm19,
									expr: &seqExpr{
										pos: position{line: 1912, col: 12, offset: 74178},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 1912, col: 12, offset: 74178},
												expr: &ruleRefExpr{
													pos:  position{line: 1912, col: 12, offset: 74178},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 1912, col: 19, offset: 74185},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 1912, col: 23, offset: 74189},
												expr: &ruleRefExpr{
													pos:  position{line: 1912, col: 23, offset: 74189},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 1912, col: 30, offset: 74196},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 1912, col: 39, offset: 74205},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1913, col: 5, offset: 74264},
							val:        ")))",
							ignoreCase: false,
							want:       "\")))\"",
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTermContent",
			pos:  position{line: 1917, col: 1, offset: 74347},
			expr: &actionExpr{
				pos: position{line: 1917, col: 30, offset: 74376},
				run: (*parser).callonConcealedIndexTermContent1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1917, col: 30, offset: 74376},
					expr: &choiceExpr{
						pos: position{line: 1917, col: 31, offset: 74377},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1917, col: 31, offset: 74377},
								name: "Alphanum",
							},
							&ruleRefExpr{
								pos:  position{line: 1917, col: 42, offset: 74388},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "BlankLine",
			pos:  position{line: 1924, col: 1, offset: 74544},
			expr: &actionExpr{
				pos: position{line: 1924, col: 14, offset: 74557},
				run: (*parser).callonBlankLine1,
				expr: &seqExpr{
					pos: position{line: 1924, col: 14, offset: 74557},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1924, col: 14, offset: 74557},
							expr: &ruleRefExpr{
								pos:  position{line: 1924, col: 15, offset: 74558},
								name: "EOF",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1924, col: 19, offset: 74562},
							expr: &ruleRefExpr{
								pos:  position{line: 1924, col: 19, offset: 74562},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1924, col: 26, offset: 74569},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "Alphanum",
			pos:  position{line: 1931, col: 1, offset: 74723},
			expr: &charClassMatcher{
				pos:        position{line: 1931, col: 13, offset: 74735},
				val:        "[\\pL0-9]",
				ranges:     []rune{'0', '9'},
				classes:    []*unicode.RangeTable{rangeTable("L")},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Parenthesis",
			pos:  position{line: 1933, col: 1, offset: 74747},
			expr: &choiceExpr{
				pos: position{line: 1933, col: 16, offset: 74762},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1933, col: 16, offset: 74762},
						val:        "(",
						ignoreCase: false,
						want:       "\"(\"",
					},
					&litMatcher{
						pos:        position{line: 1933, col: 22, offset: 74768},
						val:        ")",
						ignoreCase: false,
						want:       "\")\"",
					},
					&litMatcher{
						pos:        position{line: 1933, col: 28, offset: 74774},
						val:        "[",
						ignoreCase: false,
						want:       "\"[\"",
					},
					&litMatcher{
						pos:        position{line: 1933, col: 34, offset: 74780},
						val:        "]",
						ignoreCase: false,
						want:       "\"]\"",
					},
					&litMatcher{
						pos:        position{line: 1933, col: 40, offset: 74786},
						val:        "{",
						ignoreCase: false,
						want:       "\"{\"",
					},
					&litMatcher{
						pos:        position{line: 1933, col: 46, offset: 74792},
						val:        "}",
						ignoreCase: false,
						want:       "\"}\"",
					},
				},
			},
		},
		{
			name: "Alphanums",
			pos:  position{line: 1935, col: 1, offset: 74800},
			expr: &actionExpr{
				pos: position{line: 1935, col: 14, offset: 74813},
				run: (*parser).callonAlphanums1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1935, col: 14, offset: 74813},
					expr: &charClassMatcher{
						pos:        position{line: 1935, col: 14, offset: 74813},
						val:        "[\\pL0-9]",
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Word",
			pos:  position{line: 1939, col: 1, offset: 74863},
			expr: &choiceExpr{
				pos: position{line: 1943, col: 5, offset: 75194},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1943, col: 5, offset: 75194},
						run: (*parser).callonWord2,
						expr: &seqExpr{
							pos: position{line: 1943, col: 5, offset: 75194},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 1943, col: 5, offset: 75194},
									expr: &charClassMatcher{
										pos:        position{line: 1943, col: 5, offset: 75194},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 1943, col: 15, offset: 75204},
									expr: &choiceExpr{
										pos: position{line: 1943, col: 17, offset: 75206},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 1943, col: 17, offset: 75206},
												val:        "[\\r\\n ,\\]]",
												chars:      []rune{'\r', '\n', ' ', ',', ']'},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 1943, col: 30, offset: 75219},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1945, col: 9, offset: 75291},
						run: (*parser).callonWord10,
						expr: &seqExpr{
							pos: position{line: 1945, col: 9, offset: 75291},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 1945, col: 9, offset: 75291},
									expr: &charClassMatcher{
										pos:        position{line: 1945, col: 9, offset: 75291},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 1945, col: 19, offset: 75301},
									expr: &seqExpr{
										pos: position{line: 1945, col: 20, offset: 75302},
										exprs: []interface{}{
											&charClassMatcher{
												pos:        position{line: 1945, col: 20, offset: 75302},
												val:        "[=*_`]",
												chars:      []rune{'=', '*', '_', '`'},
												ignoreCase: false,
												inverted:   false,
											},
											&oneOrMoreExpr{
												pos: position{line: 1945, col: 27, offset: 75309},
												expr: &charClassMatcher{
													pos:        position{line: 1945, col: 27, offset: 75309},
													val:        "[\\pL0-9]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineWord",
			pos:  position{line: 1949, col: 1, offset: 75389},
			expr: &choiceExpr{
				pos: position{line: 1950, col: 5, offset: 75471},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1950, col: 5, offset: 75471},
						run: (*parser).callonInlineWord2,
						expr: &seqExpr{
							pos: position{line: 1950, col: 5, offset: 75471},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 1950, col: 5, offset: 75471},
									expr: &charClassMatcher{
										pos:        position{line: 1950, col: 5, offset: 75471},
										val:        "[\\pL0-9,.?!;]",
										chars:      []rune{',', '.', '?', '!', ';'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 1950, col: 20, offset: 75486},
									expr: &choiceExpr{
										pos: position{line: 1950, col: 22, offset: 75488},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 1950, col: 22, offset: 75488},
												val:        "[\\r\\n ]",
												chars:      []rune{'\r', '\n', ' '},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 1950, col: 32, offset: 75498},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1952, col: 9, offset: 75570},
						name: "Word",
					},
				},
			},
		},
		{
			name: "AnyChar",
			pos:  position{line: 1955, col: 1, offset: 75673},
			expr: &actionExpr{
				pos: position{line: 1955, col: 12, offset: 75684},
				run: (*parser).callonAnyChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1955, col: 12, offset: 75684},
					val:        "[^\\r\\n]",
					chars:      []rune{'\r', '\n'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "FileLocation",
			pos:  position{line: 1959, col: 1, offset: 75753},
			expr: &actionExpr{
				pos: position{line: 1959, col: 17, offset: 75769},
				run: (*parser).callonFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 1959, col: 17, offset: 75769},
					label: "path",
					expr: &oneOrMoreExpr{
						pos: position{line: 1959, col: 22, offset: 75774},
						expr: &choiceExpr{
							pos: position{line: 1959, col: 23, offset: 75775},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1959, col: 23, offset: 75775},
									name: "FILENAME",
								},
								&ruleRefExpr{
									pos:  position{line: 1959, col: 34, offset: 75786},
									name: "AttributeSubstitution",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ResolvedFileLocation",
			pos:  position{line: 1963, col: 1, offset: 75874},
			expr: &actionExpr{
				pos: position{line: 1963, col: 25, offset: 75898},
				run: (*parser).callonResolvedFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 1963, col: 25, offset: 75898},
					label: "path",
					expr: &oneOrMoreExpr{
						pos: position{line: 1963, col: 30, offset: 75903},
						expr: &charClassMatcher{
							pos:        position{line: 1963, col: 31, offset: 75904},
							val:        "[^\\r\\n []",
							chars:      []rune{'\r', '\n', ' ', '['},
							ignoreCase: false,
							inverted:   true,
						},
					},
				},
			},
		},
		{
			name: "Location",
			pos:  position{line: 1967, col: 1, offset: 75980},
			expr: &actionExpr{
				pos: position{line: 1967, col: 13, offset: 75992},
				run: (*parser).callonLocation1,
				expr: &seqExpr{
					pos: position{line: 1967, col: 13, offset: 75992},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1967, col: 13, offset: 75992},
							label: "scheme",
							expr: &zeroOrOneExpr{
								pos: position{line: 1967, col: 20, offset: 75999},
								expr: &ruleRefExpr{
									pos:  position{line: 1967, col: 21, offset: 76000},
									name: "URL_SCHEME",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1967, col: 34, offset: 76013},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 1967, col: 39, offset: 76018},
								expr: &choiceExpr{
									pos: position{line: 1967, col: 40, offset: 76019},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1967, col: 40, offset: 76019},
											name: "FILENAME",
										},
										&ruleRefExpr{
											pos:  position{line: 1967, col: 51, offset: 76030},
											name: "AttributeSubstitution",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LocationWithScheme",
			pos:  position{line: 1971, col: 1, offset: 76122},
			expr: &actionExpr{
				pos: position{line: 1971, col: 23, offset: 76144},
				run: (*parser).callonLocationWithScheme1,
				expr: &seqExpr{
					pos: position{line: 1971, col: 23, offset: 76144},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1971, col: 23, offset: 76144},
							label: "scheme",
							expr: &ruleRefExpr{
								pos:  position{line: 1971, col: 31, offset: 76152},
								name: "URL_SCHEME",
							},
						},
						&labeledExpr{
							pos:   position{line: 1971, col: 43, offset: 76164},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 1971, col: 48, offset: 76169},
								expr: &choiceExpr{
									pos: position{line: 1971, col: 49, offset: 76170},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1971, col: 49, offset: 76170},
											name: "FILENAME",
										},
										&ruleRefExpr{
											pos:  position{line: 1971, col: 60, offset: 76181},
											name: "AttributeSubstitution",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FILENAME",
			pos:  position{line: 1975, col: 1, offset: 76273},
			expr: &oneOrMoreExpr{
				pos: position{line: 1975, col: 13, offset: 76285},
				expr: &charClassMatcher{
					pos:        position{line: 1975, col: 14, offset: 76286},
					val:        "[^\\r\\n{}[\\] ]",
					chars:      []rune{'\r', '\n', '{', '}', '[', ']', ' '},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "ResolvedLocation",
			pos:  position{line: 1977, col: 1, offset: 76422},
			expr: &actionExpr{
				pos: position{line: 1977, col: 21, offset: 76442},
				run: (*parser).callonResolvedLocation1,
				expr: &seqExpr{
					pos: position{line: 1977, col: 21, offset: 76442},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1977, col: 21, offset: 76442},
							label: "scheme",
							expr: &ruleRefExpr{
								pos:  position{line: 1977, col: 29, offset: 76450},
								name: "URL_SCHEME",
							},
						},
						&labeledExpr{
							pos:   position{line: 1977, col: 41, offset: 76462},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1977, col: 47, offset: 76468},
								name: "RESOLVED_FILENAME",
							},
						},
					},
				},
			},
		},
		{
			name: "RESOLVED_FILENAME",
			pos:  position{line: 1982, col: 1, offset: 76721},
			expr: &oneOrMoreExpr{
				pos: position{line: 1982, col: 22, offset: 76742},
				expr: &charClassMatcher{
					pos:        position{line: 1982, col: 23, offset: 76743},
					val:        "[^\\r\\n[\\] ]",
					chars:      []rune{'\r', '\n', '[', ']', ' '},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "URL",
			pos:  position{line: 1984, col: 1, offset: 76877},
			expr: &actionExpr{
				pos: position{line: 1984, col: 9, offset: 76885},
				run: (*parser).callonURL1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1984, col: 9, offset: 76885},
					expr: &charClassMatcher{
						pos:        position{line: 1984, col: 9, offset: 76885},
						val:        "[^\\r\\n[\\]]",
						chars:      []rune{'\r', '\n', '[', ']'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "URL_SCHEME",
			pos:  position{line: 1988, col: 1, offset: 76937},
			expr: &choiceExpr{
				pos: position{line: 1988, col: 15, offset: 76951},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1988, col: 15, offset: 76951},
						val:        "http://",
						ignoreCase: false,
						want:       "\"http://\"",
					},
					&litMatcher{
						pos:        position{line: 1988, col: 27, offset: 76963},
						val:        "https://",
						ignoreCase: false,
						want:       "\"https://\"",
					},
					&litMatcher{
						pos:        position{line: 1988, col: 40, offset: 76976},
						val:        "ftp://",
						ignoreCase: false,
						want:       "\"ftp://\"",
					},
					&litMatcher{
						pos:        position{line: 1988, col: 51, offset: 76987},
						val:        "irc://",
						ignoreCase: false,
						want:       "\"irc://\"",
					},
					&litMatcher{
						pos:        position{line: 1988, col: 62, offset: 76998},
						val:        "mailto:",
						ignoreCase: false,
						want:       "\"mailto:\"",
					},
				},
			},
		},
		{
			name: "ID",
			pos:  position{line: 1990, col: 1, offset: 77011},
			expr: &actionExpr{
				pos: position{line: 1990, col: 7, offset: 77017},
				run: (*parser).callonID1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1990, col: 7, offset: 77017},
					expr: &charClassMatcher{
						pos:        position{line: 1990, col: 7, offset: 77017},
						val:        "[^[\\]<>,]",
						chars:      []rune{'[', ']', '<', '>', ','},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DIGIT",
			pos:  position{line: 1994, col: 1, offset: 77146},
			expr: &actionExpr{
				pos: position{line: 1994, col: 10, offset: 77155},
				run: (*parser).callonDIGIT1,
				expr: &charClassMatcher{
					pos:        position{line: 1994, col: 10, offset: 77155},
					val:        "[0-9]",
					ranges:     []rune{'0', '9'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "NUMBER",
			pos:  position{line: 1998, col: 1, offset: 77201},
			expr: &actionExpr{
				pos: position{line: 1998, col: 11, offset: 77211},
				run: (*parser).callonNUMBER1,
				expr: &seqExpr{
					pos: position{line: 1998, col: 11, offset: 77211},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1998, col: 11, offset: 77211},
							expr: &litMatcher{
								pos:        position{line: 1998, col: 11, offset: 77211},
								val:        "-",
								ignoreCase: false,
								want:       "\"-\"",
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1998, col: 16, offset: 77216},
							expr: &ruleRefExpr{
								pos:  position{line: 1998, col: 16, offset: 77216},
								name: "DIGIT",
							},
						},
					},
				},
			},
		},
		{
			name: "Space",
			pos:  position{line: 2002, col: 1, offset: 77272},
			expr: &choiceExpr{
				pos: position{line: 2002, col: 10, offset: 77281},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2002, col: 10, offset: 77281},
						val:        " ",
						ignoreCase: false,
						want:       "\" \"",
					},
					&actionExpr{
						pos: position{line: 2002, col: 16, offset: 77287},
						run: (*parser).callonSpace3,
						expr: &litMatcher{
							pos:        position{line: 2002, col: 16, offset: 77287},
							val:        "\t",
							ignoreCase: false,
							want:       "\"\\t\"",
						},
					},
				},
			},
		},
		{
			name: "Newline",
			pos:  position{line: 2006, col: 1, offset: 77332},
			expr: &choiceExpr{
				pos: position{line: 2006, col: 12, offset: 77343},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2006, col: 12, offset: 77343},
						val:        "\r\n",
						ignoreCase: false,
						want:       "\"\\r\\n\"",
					},
					&litMatcher{
						pos:        position{line: 2006, col: 21, offset: 77352},
						val:        "\r",
						ignoreCase: false,
						want:       "\"\\r\"",
					},
					&litMatcher{
						pos:        position{line: 2006, col: 28, offset: 77359},
						val:        "\n",
						ignoreCase: false,
						want:       "\"\\n\"",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 2008, col: 1, offset: 77367},
			expr: &notExpr{
				pos: position{line: 2008, col: 8, offset: 77374},
				expr: &anyMatcher{
					line: 2008, col: 9, offset: 77375,
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 2010, col: 1, offset: 77380},
			expr: &choiceExpr{
				pos: position{line: 2010, col: 8, offset: 77387},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2010, col: 8, offset: 77387},
						name: "Newline",
					},
					&ruleRefExpr{
						pos:  position{line: 2010, col: 18, offset: 77397},
						name: "EOF",
					},
				},
			},
		},
	},
}

func (c *current) onAsciidocDocument1(frontmatter, blocks interface{}) (interface{}, error) {

	return types.NewDraftDocument(frontmatter, blocks.([]interface{}))
}

func (p *parser) callonAsciidocDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsciidocDocument1(stack["frontmatter"], stack["blocks"])
}

func (c *current) onVerbatimDocument1(blocks interface{}) (interface{}, error) {

	return types.NewDraftDocument(nil, blocks.([]interface{}))
}

func (p *parser) callonVerbatimDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimDocument1(stack["blocks"])
}

func (c *current) onTextDocument1(blocks interface{}) (interface{}, error) {

	return types.NewDraftDocument(nil, blocks.([]interface{}))
}

func (p *parser) callonTextDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextDocument1(stack["blocks"])
}

func (c *current) onAsciidocDocumentBlocks1(header, others interface{}) (interface{}, error) {

	if header != nil && others != nil {
		return append([]interface{}{header}, others.([]interface{})...), nil
	} else if others != nil {
		return others.([]interface{}), nil
	}
	return []interface{}{}, nil
}

func (p *parser) callonAsciidocDocumentBlocks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsciidocDocumentBlocks1(stack["header"], stack["others"])
}

func (c *current) onDocumentBlockWithinDelimitedBlock1(block interface{}) (interface{}, error) {

	return block, nil
}

func (p *parser) callonDocumentBlockWithinDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlockWithinDelimitedBlock1(stack["block"])
}

func (c *current) onTextDocumentBlock1(block interface{}) (interface{}, error) {

	return block, nil
}

func (p *parser) callonTextDocumentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextDocumentBlock1(stack["block"])
}

func (c *current) onYamlFrontMatter1(content interface{}) (interface{}, error) {

	return types.NewYamlFrontMatter(content.(string))
}

func (p *parser) callonYamlFrontMatter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatter1(stack["content"])
}

func (c *current) onYamlFrontMatterContent1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonYamlFrontMatterContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatterContent1()
}

func (c *current) onDocumentHeader1(title, id, authors, revision interface{}) (interface{}, error) {

	return types.NewDocumentHeader(title.([]interface{}), authors, revision)
}

func (p *parser) callonDocumentHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader1(stack["title"], stack["id"], stack["authors"], stack["revision"])
}

func (c *current) onDocumentAuthorsInlineForm1(authors interface{}) (interface{}, error) {

	return types.NewDocumentAuthors(authors.([]interface{}))
}

func (p *parser) callonDocumentAuthorsInlineForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsInlineForm1(stack["authors"])
}

func (c *current) onDocumentAuthorsAttributeForm1(author interface{}) (interface{}, error) {

	return []types.DocumentAuthor{author.(types.DocumentAuthor)}, nil
}

func (p *parser) callonDocumentAuthorsAttributeForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsAttributeForm1(stack["author"])
}

func (c *current) onDocumentAuthor1(fullname, email interface{}) (interface{}, error) {

	return types.NewDocumentAuthor(fullname, email)
}

func (p *parser) callonDocumentAuthor1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthor1(stack["fullname"], stack["email"])
}

func (c *current) onDocumentAuthorName1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorName1()
}

func (c *current) onDocumentAuthorEmail5() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorEmail5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail5()
}

func (c *current) onDocumentAuthorEmail1(email interface{}) (interface{}, error) {

	return email, nil
}

func (p *parser) callonDocumentAuthorEmail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail1(stack["email"])
}

func (c *current) onDocumentRevision9(revnumber, revdate, revremark interface{}) (interface{}, error) {

	return types.NewDocumentRevision(revnumber, revdate, revremark)

}

func (p *parser) callonDocumentRevision9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision9(stack["revnumber"], stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision23(revdate, revremark interface{}) (interface{}, error) {

	return types.NewDocumentRevision(nil, revdate, revremark)

}

func (p *parser) callonDocumentRevision23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision23(stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision1(revision interface{}) (interface{}, error) {

	return revision, nil
}

func (p *parser) callonDocumentRevision1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision1(stack["revision"])
}

func (c *current) onDocumentRevisionNumber2() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber2()
}

func (c *current) onDocumentRevisionNumber8() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber8()
}

func (c *current) onDocumentRevisionDate1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionDate1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionDate1()
}

func (c *current) onDocumentRevisionRemark1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionRemark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionRemark1()
}

func (c *current) onAttributeDeclaration9(value interface{}) (interface{}, error) {

	return value, nil

}

func (p *parser) callonAttributeDeclaration9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration9(stack["value"])
}

func (c *current) onAttributeDeclaration1(name, value interface{}) (interface{}, error) {

	return types.NewAttributeDeclaration(name.(string), value)
}

func (p *parser) callonAttributeDeclaration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration1(stack["name"], stack["value"])
}

func (c *current) onAttributeName1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonAttributeName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeName1()
}

func (c *current) onAttributeDeclarationValue1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonAttributeDeclarationValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue1()
}

func (c *current) onAttributeReset2(name interface{}) (interface{}, error) {

	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonAttributeReset2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset2(stack["name"])
}

func (c *current) onAttributeReset11(name interface{}) (interface{}, error) {

	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonAttributeReset11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset11(stack["name"])
}

func (c *current) onAttributeSubstitution1(name interface{}) (interface{}, error) {

	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonAttributeSubstitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeSubstitution1(stack["name"])
}

func (c *current) onAttributes1(attrs interface{}) (interface{}, error) {

	return types.NewAttributes(attrs.([]interface{}))
}

func (p *parser) callonAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributes1(stack["attrs"])
}

func (c *current) onElementAttribute1(attr interface{}) (interface{}, error) {

	return attr, nil // avoid returning something like `[]interface{}{attr, EOL}`
}

func (p *parser) callonElementAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttribute1(stack["attr"])
}

func (c *current) onElementID2(id interface{}) (interface{}, error) {

	return types.NewElementID(id.(string))
}

func (p *parser) callonElementID2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementID2(stack["id"])
}

func (c *current) onElementID11(id interface{}) (interface{}, error) {

	return types.NewElementID(id.(string))
}

func (p *parser) callonElementID11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementID11(stack["id"])
}

func (c *current) onInlineElementID1(id interface{}) (interface{}, error) {
	// no EOL here since there can be multiple InlineElementID on the same line
	return types.NewInlineElementID(id.(string))
}

func (p *parser) callonInlineElementID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementID1(stack["id"])
}

func (c *current) onElementTitle1(title interface{}) (interface{}, error) {

	return types.NewElementTitle(title.(string))
}

func (p *parser) callonElementTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitle1(stack["title"])
}

func (c *current) onElementTitleContent1() (interface{}, error) {
	// "<" and ">" characters are not allowed as they are used as cross-reference markers
	return string(c.text), nil
}

func (p *parser) callonElementTitleContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitleContent1()
}

func (c *current) onElementRole5() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonElementRole5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementRole5()
}

func (c *current) onElementRole1(role interface{}) (interface{}, error) {

	return types.NewElementRole(role.(string))
}

func (p *parser) callonElementRole1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementRole1(stack["role"])
}

func (c *current) onLiteralAttribute1() (interface{}, error) {

	return types.NewLiteralAttribute()
}

func (p *parser) callonLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralAttribute1()
}

func (c *current) onPassthroughBlockAttribute1() (interface{}, error) {

	return types.NewPassthroughBlockAttribute()
}

func (p *parser) callonPassthroughBlockAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockAttribute1()
}

func (c *current) onAdmonitionMarkerAttribute1(k interface{}) (interface{}, error) {

	return types.NewAdmonitionAttribute(k.(types.AdmonitionKind))
}

func (p *parser) callonAdmonitionMarkerAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionMarkerAttribute1(stack["k"])
}

func (c *current) onSourceAttributes6(attr interface{}) (interface{}, error) {
	return attr, nil
}

func (p *parser) callonSourceAttributes6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes6(stack["attr"])
}

func (c *current) onSourceAttributes14(attr interface{}) (interface{}, error) {
	return attr, nil
}

func (p *parser) callonSourceAttributes14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes14(stack["attr"])
}

func (c *current) onSourceAttributes1(language, others interface{}) (interface{}, error) {

	return types.NewSourceAttributes(language, others.([]interface{})...)
}

func (p *parser) callonSourceAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes1(stack["language"], stack["others"])
}

func (c *current) onAttributeGroup1(attributes interface{}) (interface{}, error) {

	return types.NewAttributeGroup(attributes.([]interface{}))
}

func (p *parser) callonAttributeGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeGroup1(stack["attributes"])
}

func (c *current) onGenericAttributeWithValue1(key, value interface{}) (interface{}, error) {
	// value is (optionally) set
	return types.NewGenericAttribute(key.(string), value)
}

func (p *parser) callonGenericAttributeWithValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttributeWithValue1(stack["key"], stack["value"])
}

func (c *current) onGenericAttributeWithoutValue1(key interface{}) (interface{}, error) {
	// value is not set
	return types.NewGenericAttribute(key.(string), nil)
}

func (p *parser) callonGenericAttributeWithoutValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttributeWithoutValue1(stack["key"])
}

func (c *current) onAttributeKey1(key interface{}) (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonAttributeKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeKey1(stack["key"])
}

func (c *current) onAttributeValue1(value interface{}) (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue1(stack["value"])
}

func (c *current) onStandaloneAttributeValue1(value interface{}) (interface{}, error) {
	// standalone attribute value cannot be followed by a `=`, otherwise it causes troubles for standalone values (eg: in images)
	return string(c.text), nil
}

func (p *parser) callonStandaloneAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStandaloneAttributeValue1(stack["value"])
}

func (c *current) onHorizontalLayout1() (interface{}, error) {

	return types.Attributes{"layout": "horizontal"}, nil
}

func (p *parser) callonHorizontalLayout1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHorizontalLayout1()
}

func (c *current) onQuoteAttributes1(author, title interface{}) (interface{}, error) {

	return types.NewQuoteAttributes("quote", author, title)
}

func (p *parser) callonQuoteAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttributes1(stack["author"], stack["title"])
}

func (c *current) onVerseAttributes1(author, title interface{}) (interface{}, error) {

	return types.NewQuoteAttributes("verse", author.(string), title.(string))
}

func (p *parser) callonVerseAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseAttributes1(stack["author"], stack["title"])
}

func (c *current) onQuoteAttribute1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonQuoteAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttribute1()
}

func (c *current) onInlineAttributes1(attrs interface{}) (interface{}, error) {

	return types.NewAttributes(attrs.([]interface{}))
}

func (p *parser) callonInlineAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAttributes1(stack["attrs"])
}

func (c *current) onQuotedTextAttrs1(attrs interface{}) (interface{}, error) {

	return attrs, nil
}

func (p *parser) callonQuotedTextAttrs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextAttrs1(stack["attrs"])
}

func (c *current) onQuotedTextRole1(role interface{}) (interface{}, error) {

	return types.NewElementRole(role.(string))
}

func (p *parser) callonQuotedTextRole1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextRole1(stack["role"])
}

func (c *current) onQuotedTextRoleWord6() (interface{}, error) {

	return strings.SplitN(string(c.text), ",", 2)[0], nil
}

func (p *parser) callonQuotedTextRoleWord6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextRoleWord6()
}

func (c *current) onQuotedTextRoleWord1(role interface{}) (interface{}, error) {

	return role, nil
}

func (p *parser) callonQuotedTextRoleWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextRoleWord1(stack["role"])
}

func (c *current) onQuotedTextShortHand1(attrs interface{}) (interface{}, error) {

	return attrs, nil
}

func (p *parser) callonQuotedTextShortHand1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextShortHand1(stack["attrs"])
}

func (c *current) onQuotedTextShortRole5() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonQuotedTextShortRole5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextShortRole5()
}

func (c *current) onQuotedTextShortRole1(role interface{}) (interface{}, error) {

	return types.NewElementRole(role.(string))
}

func (p *parser) callonQuotedTextShortRole1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextShortRole1(stack["role"])
}

func (c *current) onQuotedTextShortID5() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonQuotedTextShortID5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextShortID5()
}

func (c *current) onQuotedTextShortID1(id interface{}) (interface{}, error) {

	return types.NewElementID(id.(string))
}

func (p *parser) callonQuotedTextShortID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextShortID1(stack["id"])
}

func (c *current) onStandaloneAttributes1(attributes interface{}) (interface{}, error) {
	// standalone attributes, i.e., with nothing afterwards
	return types.NewAttributes(attributes)
}

func (p *parser) callonStandaloneAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStandaloneAttributes1(stack["attributes"])
}

func (c *current) onSingleQuotedString1(elements interface{}) (interface{}, error) {

	return types.NewQuotedString(types.SingleQuote, elements.([]interface{}))
}

func (p *parser) callonSingleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedString1(stack["elements"])
}

func (c *current) onSingleQuotedStringElements1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements)
}

func (p *parser) callonSingleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElements1(stack["elements"])
}

func (c *current) onSingleQuotedStringElement1(element interface{}) (interface{}, error) {

	return element, nil
}

func (p *parser) callonSingleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement1(stack["element"])
}

func (c *current) onSingleQuotedStringFallbackCharacter3() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuotedStringFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringFallbackCharacter3()
}

func (c *current) onDoubleQuotedString1(elements interface{}) (interface{}, error) {

	return types.NewQuotedString(types.DoubleQuote, elements.([]interface{}))
}

func (p *parser) callonDoubleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedString1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElements1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements)
}

func (p *parser) callonDoubleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElements1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElement1(element interface{}) (interface{}, error) {

	return element, nil
}

func (p *parser) callonDoubleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement1(stack["element"])
}

func (c *current) onDoubleQuotedStringFallbackCharacter1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuotedStringFallbackCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringFallbackCharacter1()
}

func (c *current) onSection7() (interface{}, error) {

	// `=` is level 0, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonSection7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection7()
}

func (c *current) onSection10(attributes, level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonSection10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection10(stack["attributes"], stack["level"])
}

func (c *current) onSection1(attributes, level, title, id interface{}) (interface{}, error) {

	return types.NewSection(level.(int), title.([]interface{}), id.([]interface{}), attributes)
}

func (p *parser) callonSection1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection1(stack["attributes"], stack["level"], stack["title"], stack["id"])
}

func (c *current) onTitleElements1(elements interface{}) (interface{}, error) {
	// absorbs heading and trailing spaces
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonTitleElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElements1(stack["elements"])
}

func (c *current) onTitleElement1(element interface{}) (interface{}, error) {

	return element, nil
}

func (p *parser) callonTitleElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElement1(stack["element"])
}

func (c *current) onUserMacroBlock1(name, value, attrs interface{}) (interface{}, error) {

	return types.NewUserMacroBlock(name.(string), value.(string), attrs, string(c.text))
}

func (p *parser) callonUserMacroBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onInlineUserMacro1(name, value, attrs interface{}) (interface{}, error) {

	return types.NewInlineUserMacro(name.(string), value.(string), attrs, string(c.text))
}

func (p *parser) callonInlineUserMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onUserMacroName1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonUserMacroName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroName1()
}

func (c *current) onUserMacroValue1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonUserMacroValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroValue1()
}

func (c *current) onUserMacroAttributes1(attrs interface{}) (interface{}, error) {

	return types.NewAttributes(attrs.([]interface{}))
}

func (p *parser) callonUserMacroAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroAttributes1(stack["attrs"])
}

func (c *current) onFileInclusion4(path, inlineAttributes interface{}) (interface{}, error) {

	return types.NewFileInclusion(path.(types.Location), inlineAttributes.(types.Attributes), string(c.text))

}

func (p *parser) callonFileInclusion4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion4(stack["path"], stack["inlineAttributes"])
}

func (c *current) onFileInclusion1(incl interface{}) (interface{}, error) {

	return incl.(types.FileInclusion), nil
}

func (p *parser) callonFileInclusion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion1(stack["incl"])
}

func (c *current) onFileIncludeAttributes1(attrs interface{}) (interface{}, error) {

	return types.NewAttributes(attrs.([]interface{}))
}

func (p *parser) callonFileIncludeAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileIncludeAttributes1(stack["attrs"])
}

func (c *current) onLineRangesAttribute1(lines interface{}) (interface{}, error) {

	return types.NewLineRangesAttribute(lines)
}

func (p *parser) callonLineRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttribute1(stack["lines"])
}

func (c *current) onLineRangesAttributeValue1(value interface{}) (interface{}, error) {

	return value, nil
}

func (p *parser) callonLineRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleLineRanges9(other interface{}) (interface{}, error) {

	return other, nil

}

func (p *parser) callonMultipleLineRanges9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges9(stack["other"])
}

func (c *current) onMultipleLineRanges1(first, others interface{}) (interface{}, error) {

	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultipleQuotedLineRanges10(other interface{}) (interface{}, error) {

	return other, nil

}

func (p *parser) callonMultipleQuotedLineRanges10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges10(stack["other"])
}

func (c *current) onMultipleQuotedLineRanges1(first, others interface{}) (interface{}, error) {

	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleQuotedLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultiLineRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineRange1(stack["start"], stack["end"])
}

func (c *current) onMultiLineQuotedRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineQuotedRange1(stack["start"], stack["end"])
}

func (c *current) onSingleLineRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineRange1(stack["singleline"])
}

func (c *current) onSingleLineQuotedRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineQuotedRange1(stack["singleline"])
}

func (c *current) onUndefinedLineRange1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonUndefinedLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUndefinedLineRange1()
}

func (c *current) onTagRangesAttribute1(tags interface{}) (interface{}, error) {
	//TODO: check if 'tags'/'tag' is allowed for both single and multiple values
	return types.NewTagRangesAttribute(tags.([]interface{}))
}

func (p *parser) callonTagRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttribute1(stack["tags"])
}

func (c *current) onTagRangesAttributeValue1(value interface{}) (interface{}, error) {

	return value, nil
}

func (p *parser) callonTagRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleTagRanges7(other interface{}) (interface{}, error) {

	return other, nil

}

func (p *parser) callonMultipleTagRanges7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges7(stack["other"])
}

func (c *current) onMultipleTagRanges1(first, others interface{}) (interface{}, error) {

	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleTagRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges1(stack["first"], stack["others"])
}

func (c *current) onTagRange2(tag interface{}) (interface{}, error) {

	return types.NewTagRange(tag.(string), true)
}

func (p *parser) callonTagRange2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange2(stack["tag"])
}

func (c *current) onTagRange7(tag interface{}) (interface{}, error) {

	return types.NewTagRange(tag.(string), false)
}

func (p *parser) callonTagRange7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange7(stack["tag"])
}

func (c *current) onTagWildcard4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonTagWildcard4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard4()
}

func (c *current) onTagWildcard7(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagWildcard7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard7(stack["stars"])
}

func (c *current) onTagWildcard1(stars interface{}) (interface{}, error) {

	return stars, nil
}

func (p *parser) callonTagWildcard1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard1(stack["stars"])
}

func (c *current) onVerbatimFileLine6() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonVerbatimFileLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimFileLine6()
}

func (c *current) onVerbatimFileLine1(content interface{}) (interface{}, error) {

	return types.NewVerbatimFileLine(content.(string))
}

func (p *parser) callonVerbatimFileLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimFileLine1(stack["content"])
}

func (c *current) onIncludedFileLine8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine8()
}

func (c *current) onIncludedFileLine1(content interface{}) (interface{}, error) {

	return types.NewIncludedFileLine(content.([]interface{}))
}

func (p *parser) callonIncludedFileLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine1(stack["content"])
}

func (c *current) onIncludedFileStartTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileStartTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag5()
}

func (c *current) onIncludedFileStartTag1(tag interface{}) (interface{}, error) {

	return types.NewIncludedFileStartTag(tag.(string))
}

func (p *parser) callonIncludedFileStartTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag1(stack["tag"])
}

func (c *current) onIncludedFileEndTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileEndTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag5()
}

func (c *current) onIncludedFileEndTag1(tag interface{}) (interface{}, error) {

	return types.NewIncludedFileEndTag(tag.(string))
}

func (p *parser) callonIncludedFileEndTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag1(stack["tag"])
}

func (c *current) onListParagraph2(comment interface{}) (interface{}, error) {

	return comment, nil

}

func (p *parser) callonListParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph2(stack["comment"])
}

func (c *current) onListParagraph5(lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), nil)

}

func (p *parser) callonListParagraph5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph5(stack["lines"])
}

func (c *current) onListParagraphLine24(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonListParagraphLine24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine24(stack["elements"])
}

func (c *current) onListParagraphLine1(line interface{}) (interface{}, error) {

	return line, nil

}

func (p *parser) callonListParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine1(stack["line"])
}

func (c *current) onContinuedListItemElement1(element interface{}) (interface{}, error) {

	return types.NewContinuedListItemElement(element) // offset is negative
}

func (p *parser) callonContinuedListItemElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemElement1(stack["element"])
}

func (c *current) onContinuedListItemContent1(content interface{}) (interface{}, error) {

	return content, nil
}

func (p *parser) callonContinuedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent1(stack["content"])
}

func (c *current) onOrderedListItem1(attributes, prefix, content interface{}) (interface{}, error) {

	return types.NewOrderedListItem(prefix.(types.OrderedListItemPrefix), content.([]interface{}), attributes)
}

func (p *parser) callonOrderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItem1(stack["attributes"], stack["prefix"], stack["content"])
}

func (c *current) onOrderedListItemPrefix10() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonOrderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix10()
}

func (c *current) onOrderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonOrderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix13(stack["depth"])
}

func (c *current) onOrderedListItemPrefix7(depth interface{}) (interface{}, error) {

	switch depth.(int) {
	case 1:
		return types.NewOrderedListItemPrefix(types.Arabic, 1)
	case 2:
		return types.NewOrderedListItemPrefix(types.LowerAlpha, 2)
	case 3:
		return types.NewOrderedListItemPrefix(types.LowerRoman, 3)
	case 4:
		return types.NewOrderedListItemPrefix(types.UpperAlpha, 4)
	default:
		return types.NewOrderedListItemPrefix(types.UpperRoman, 5)
	}

}

func (p *parser) callonOrderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix7(stack["depth"])
}

func (c *current) onOrderedListItemPrefix14() (interface{}, error) {
	// numbering style: "1."
	return types.NewOrderedListItemPrefix(types.Arabic, 1)

}

func (p *parser) callonOrderedListItemPrefix14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix14()
}

func (c *current) onOrderedListItemPrefix19() (interface{}, error) {
	// numbering style: "a."
	return types.NewOrderedListItemPrefix(types.LowerAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix19()
}

func (c *current) onOrderedListItemPrefix23() (interface{}, error) {
	// numbering style: "A."
	return types.NewOrderedListItemPrefix(types.UpperAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix23()
}

func (c *current) onOrderedListItemPrefix27() (interface{}, error) {
	// numbering style: "i)"
	return types.NewOrderedListItemPrefix(types.LowerRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix27()
}

func (c *current) onOrderedListItemPrefix32() (interface{}, error) {
	// numbering style: "I)"
	return types.NewOrderedListItemPrefix(types.UpperRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix32()
}

func (c *current) onOrderedListItemPrefix1(prefix interface{}) (interface{}, error) {

	return prefix, nil
}

func (p *parser) callonOrderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix1(stack["prefix"])
}

func (c *current) onOrderedListItemContent1(elements interface{}) (interface{}, error) {

	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonOrderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemContent1(stack["elements"])
}

func (c *current) onUnorderedListItem1(attributes, prefix, checkstyle, content interface{}) (interface{}, error) {

	return types.NewUnorderedListItem(prefix.(types.UnorderedListItemPrefix), checkstyle, content.([]interface{}), attributes)
}

func (p *parser) callonUnorderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItem1(stack["attributes"], stack["prefix"], stack["checkstyle"], stack["content"])
}

func (c *current) onUnorderedListItemPrefix10() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonUnorderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix10()
}

func (c *current) onUnorderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonUnorderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix13(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix7(depth interface{}) (interface{}, error) {

	switch depth.(int) {
	case 1:
		return types.NewUnorderedListItemPrefix(types.OneAsterisk, 1)
	case 2:
		return types.NewUnorderedListItemPrefix(types.TwoAsterisks, 2)
	case 3:
		return types.NewUnorderedListItemPrefix(types.ThreeAsterisks, 3)
	case 4:
		return types.NewUnorderedListItemPrefix(types.FourAsterisks, 4)
	default:
		return types.NewUnorderedListItemPrefix(types.FiveAsterisks, 5)
	}

}

func (p *parser) callonUnorderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix7(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix15() (interface{}, error) {

	return types.NewUnorderedListItemPrefix(types.Dash, 1)

}

func (p *parser) callonUnorderedListItemPrefix15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix15()
}

func (c *current) onUnorderedListItemPrefix1(prefix interface{}) (interface{}, error) {

	return prefix, nil
}

func (p *parser) callonUnorderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix1(stack["prefix"])
}

func (c *current) onUnorderedListItemCheckStyle7() (interface{}, error) {
	return types.Unchecked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle7()
}

func (c *current) onUnorderedListItemCheckStyle9() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle9()
}

func (c *current) onUnorderedListItemCheckStyle11() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle11()
}

func (c *current) onUnorderedListItemCheckStyle1(style interface{}) (interface{}, error) {

	return style, nil

}

func (p *parser) callonUnorderedListItemCheckStyle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle1(stack["style"])
}

func (c *current) onUnorderedListItemContent1(elements interface{}) (interface{}, error) {
	// Another list or a literal paragraph immediately following a list item will be implicitly included in the list item
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonUnorderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemContent1(stack["elements"])
}

func (c *current) onLabeledListItem1(attributes, term, separator, description interface{}) (interface{}, error) {

	return types.NewLabeledListItem(len(separator.(string))-1, term.([]interface{}), description, attributes)
}

func (p *parser) callonLabeledListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItem1(stack["attributes"], stack["term"], stack["separator"], stack["description"])
}

func (c *current) onVerbatimLabeledListItemTerm3() (interface{}, error) {

	return types.NewStringElement(strings.TrimSpace(string(c.text)))
}

func (p *parser) callonVerbatimLabeledListItemTerm3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLabeledListItemTerm3()
}

func (c *current) onVerbatimLabeledListItemTerm1(content interface{}) (interface{}, error) {

	return types.NewInlineElements(content)
}

func (p *parser) callonVerbatimLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLabeledListItemTerm1(stack["content"])
}

func (c *current) onLabeledListItemTerm1(elements interface{}) (interface{}, error) {
	// rule as an extra entrypoint
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTerm1(stack["elements"])
}

func (c *current) onLabeledListItemTermElement1(element interface{}) (interface{}, error) {

	return element, nil
}

func (p *parser) callonLabeledListItemTermElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTermElement1(stack["element"])
}

func (c *current) onLabeledListItemSeparator4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonLabeledListItemSeparator4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator4()
}

func (c *current) onLabeledListItemSeparator7(separator interface{}) (bool, error) {

	// use a predicate to make sure that only `::` to `::::` are allowed
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonLabeledListItemSeparator7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator7(stack["separator"])
}

func (c *current) onLabeledListItemSeparator1(separator interface{}) (interface{}, error) {

	return separator, nil
}

func (p *parser) callonLabeledListItemSeparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator1(stack["separator"])
}

func (c *current) onLabeledListItemDescription1(elements interface{}) (interface{}, error) {

	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemDescription1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemDescription1(stack["elements"])
}

func (c *current) onAdmonitionKind2() (interface{}, error) {

	return types.Tip, nil

}

func (p *parser) callonAdmonitionKind2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind2()
}

func (c *current) onAdmonitionKind4() (interface{}, error) {

	return types.Note, nil

}

func (p *parser) callonAdmonitionKind4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind4()
}

func (c *current) onAdmonitionKind6() (interface{}, error) {

	return types.Important, nil

}

func (p *parser) callonAdmonitionKind6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind6()
}

func (c *current) onAdmonitionKind8() (interface{}, error) {

	return types.Warning, nil

}

func (p *parser) callonAdmonitionKind8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind8()
}

func (c *current) onAdmonitionKind10() (interface{}, error) {

	return types.Caution, nil
}

func (p *parser) callonAdmonitionKind10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind10()
}

func (c *current) onParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onParagraph13(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.MarkdownQuote, content.([]interface{}), attributes)

}

func (p *parser) callonParagraph13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph13(stack["attributes"], stack["content"])
}

func (c *current) onParagraph26(attributes interface{}) (bool, error) {

	// verify that one of the attributes is `passthrough`
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, exists := attrs[types.AttrKind]
		return exists && kind == types.Passthrough, nil
	}
	return false, nil

}

func (p *parser) callonParagraph26() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph26(stack["attributes"])
}

func (c *current) onParagraph21(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Passthrough, content.([]interface{}), attributes)

}

func (p *parser) callonParagraph21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph21(stack["attributes"], stack["content"])
}

func (c *current) onParagraph31(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)

}

func (p *parser) callonParagraph31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph31(stack["attributes"], stack["lines"])
}

func (c *current) onMarkdownQuoteBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonMarkdownQuoteBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteBlockVerbatimContent2(stack["content"])
}

func (c *current) onMarkdownQuoteBlockAttribution5() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonMarkdownQuoteBlockAttribution5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteBlockAttribution5()
}

func (c *current) onMarkdownQuoteBlockAttribution1(author interface{}) (interface{}, error) {

	return author, nil
}

func (p *parser) callonMarkdownQuoteBlockAttribution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteBlockAttribution1(stack["author"])
}

func (c *current) onOpenPassthroughParagraphContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonOpenPassthroughParagraphContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpenPassthroughParagraphContent2(stack["content"])
}

func (c *current) onSimpleParagraph6(attributes interface{}) (bool, error) {

	// skip if the '[literal]' attribute was set on this paragraph
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, exists := attrs[types.AttrKind]
		return !exists || kind != types.Literal, nil
	}
	return true, nil

}

func (p *parser) callonSimpleParagraph6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleParagraph6(stack["attributes"])
}

func (c *current) onSimpleParagraph1(attributes, firstLine, otherLines interface{}) (interface{}, error) {

	return types.NewParagraph(append([]interface{}{firstLine}, otherLines.([]interface{})...), attributes)
}

func (p *parser) callonSimpleParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleParagraph1(stack["attributes"], stack["firstLine"], stack["otherLines"])
}

func (c *current) onFirstParagraphLine1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonFirstParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstParagraphLine1(stack["elements"])
}

func (c *current) onOtherParagraphLine1(elements interface{}) (interface{}, error) {

	return elements, nil
}

func (p *parser) callonOtherParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherParagraphLine1(stack["elements"])
}

func (c *current) onContinuedParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonContinuedParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onContinuedParagraph12(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)
}

func (p *parser) callonContinuedParagraph12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedParagraph12(stack["attributes"], stack["lines"])
}

func (c *current) onContinuedParagraphLines1(firstLine, otherLines interface{}) (interface{}, error) {

	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonContinuedParagraphLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedParagraphLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onVerseParagraph7(attributes interface{}) (bool, error) {

	if attrs, ok := attributes.(types.Attributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Verse, nil
	}
	return false, nil

}

func (p *parser) callonVerseParagraph7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph7(stack["attributes"])
}

func (c *current) onVerseParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonVerseParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onVerseParagraph19(attributes interface{}) (bool, error) {

	if attrs, ok := attributes.(types.Attributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Verse, nil
	}
	return false, nil

}

func (p *parser) callonVerseParagraph19() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph19(stack["attributes"])
}

func (c *current) onVerseParagraph14(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)

}

func (p *parser) callonVerseParagraph14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph14(stack["attributes"], stack["lines"])
}

func (c *current) onInlineElements7(comment interface{}) (interface{}, error) {

	return types.NewInlineElements([]interface{}{comment})

}

func (p *parser) callonInlineElements7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements7(stack["comment"])
}

func (c *current) onInlineElements10(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonInlineElements10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements10(stack["elements"])
}

func (c *current) onInlineElements1(elements interface{}) (interface{}, error) {

	return elements, nil

}

func (p *parser) callonInlineElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements1(stack["elements"])
}

func (c *current) onInlineElement1(element interface{}) (interface{}, error) {

	return element, nil
}

func (p *parser) callonInlineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement1(stack["element"])
}

func (c *current) onLineBreak1() (interface{}, error) {

	return types.NewLineBreak()
}

func (p *parser) callonLineBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineBreak1()
}

func (c *current) onConstrainedQuotedText1(text interface{}) (interface{}, error) {
	// if a '^' or '~' is alone (ie, badly formatted superscript or subscript, then accept it as-is)
	return text, nil
}

func (p *parser) callonConstrainedQuotedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstrainedQuotedText1(stack["text"])
}

func (c *current) onSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	// rule used withn `words` to detect superscript or subscript portions, eg in math formulae.
	return string(c.text), nil
}

func (p *parser) callonSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptOrSuperscriptPrefix3()
}

func (c *current) onOneOrMoreBackslashes1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonOneOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOneOrMoreBackslashes1()
}

func (c *current) onTwoOrMoreBackslashes1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonTwoOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTwoOrMoreBackslashes1()
}

func (c *current) onDoubleQuoteBoldText1(attrs, elements interface{}) (interface{}, error) {

	return types.NewQuotedText(types.Bold, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteBoldTextStringElement1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteBoldTextStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextStringElement1()
}

func (c *current) onDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onSingleQuoteBoldText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '**' to emphazise a portion of a word)
	return types.NewQuotedText(types.Bold, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteBoldText17(attrs, elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation.
	return types.NewQuotedText(types.Bold, attrs, elements.([]interface{})) // include the second heading `*` as a regular StringElement in the bold content
}

func (p *parser) callonSingleQuoteBoldText17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText17(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteBoldTextStringElement1() (interface{}, error) {
	// anything except EOL, space, bold and subscript/superscript delimiters and brackets. Excludes curly brackets to match with AttributeSubstitution elements
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteBoldTextStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextStringElement1()
}

func (c *current) onSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onEscapedBoldText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "**", elements.([]interface{}))

}

func (p *parser) callonEscapedBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation
	result := append([]interface{}{"*"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "*", result)

}

func (p *parser) callonEscapedBoldText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "*", elements.([]interface{}))
}

func (p *parser) callonEscapedBoldText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicText1(attrs, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Italic, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicTextStringElement1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteItalicTextStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextStringElement1()
}

func (c *current) onDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or a italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onSingleQuoteItalicText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '__' to emphazise a portion of a word)
	return types.NewQuotedText(types.Italic, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteItalicText14(attrs, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation.
	return types.NewQuotedText(types.Italic, attrs, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content
}

func (p *parser) callonSingleQuoteItalicText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText14(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteItalicTextStringElement1() (interface{}, error) {
	// anything except EOL, space, bold and subscript/superscript delimiters and brackets. Excludes curly brackets to match with AttributeSubstitution elements
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteItalicTextStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextStringElement1()
}

func (c *current) onSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or an italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onEscapedItalicText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "__", elements.([]interface{}))

}

func (p *parser) callonEscapedItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation
	result := append([]interface{}{"_"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "_", result)

}

func (p *parser) callonEscapedItalicText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "_", elements.([]interface{}))
}

func (p *parser) callonEscapedItalicText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceText1(attrs, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Monospace, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceTextStringElement1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteMonospaceTextStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextStringElement1()
}

func (c *current) onDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	// or a monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextFallbackCharacter3()
}

func (c *current) onSingleQuoteMonospaceText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs "``" to emphazise a portion of a word)
	return types.NewQuotedText(types.Monospace, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMonospaceText14(attrs, elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation.
	return types.NewQuotedText(types.Monospace, attrs, elements.([]interface{})) // include the second heading "`" as a regular StringElement in the monospace content
}

func (p *parser) callonSingleQuoteMonospaceText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText14(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMonospaceTextStringElement1() (interface{}, error) {
	// anything except EOL, space, monospace and subscript/superscript delimiters. Excludes curly brackets to match with AttributeSubstitution elements
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteMonospaceTextStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextStringElement1()
}

func (c *current) onSingleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	// or an monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextFallbackCharacter3()
}

func (c *current) onEscapedMonospaceText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "``", elements.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation
	result := append([]interface{}{"`"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "`", result)

}

func (p *parser) callonEscapedMonospaceText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "`", elements.([]interface{}))
}

func (p *parser) callonEscapedMonospaceText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMarkedText1(attrs, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Marked, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteMarkedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteMarkedTextStringElement1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteMarkedTextStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextStringElement1()
}

func (c *current) onDoubleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	// or a marked delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextFallbackCharacter3()
}

func (c *current) onSingleQuoteMarkedText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '##' to emphazise a portion of a word)
	return types.NewQuotedText(types.Marked, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMarkedText14(attrs, elements interface{}) (interface{}, error) {
	// unbalanced `##` vs `#` punctuation.
	return types.NewQuotedText(types.Marked, attrs, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content
}

func (p *parser) callonSingleQuoteMarkedText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText14(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMarkedTextStringElement1() (interface{}, error) {
	// anything except EOL, space, bold and subscript/superscript delimiters and brackets. Excludes curly brackets to match with AttributeSubstitution elements
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteMarkedTextStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextStringElement1()
}

func (c *current) onSingleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	// or a mark delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextFallbackCharacter3()
}

func (c *current) onEscapedMarkedText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "##", elements.([]interface{}))

}

func (p *parser) callonEscapedMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `##` vs `#` punctuation
	result := append([]interface{}{"#"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "#", result)

}

func (p *parser) callonEscapedMarkedText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "#", elements.([]interface{}))
}

func (p *parser) callonEscapedMarkedText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText18(stack["backslashes"], stack["elements"])
}

func (c *current) onSubscriptText1(attrs, element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Subscript, attrs, element)
}

func (p *parser) callonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptText1(stack["attrs"], stack["element"])
}

func (c *current) onNonSubscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '~'
	return c.text, nil
}

func (p *parser) callonNonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSubscriptText1()
}

func (c *current) onEscapedSubscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "~", element)
}

func (p *parser) callonEscapedSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSuperscriptText1(attrs, element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Superscript, attrs, element)
}

func (p *parser) callonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptText1(stack["attrs"], stack["element"])
}

func (c *current) onNonSuperscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '^'
	return c.text, nil
}

func (p *parser) callonNonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSuperscriptText1()
}

func (c *current) onEscapedSuperscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "^", element)
}

func (p *parser) callonEscapedSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSinglePlusPassthrough1(content interface{}) (interface{}, error) {

	return types.NewInlinePassthrough(types.SinglePlusPassthrough, []interface{}{content})
}

func (p *parser) callonSinglePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthrough1(stack["content"])
}

func (c *current) onSinglePlusPassthroughContent2() (interface{}, error) {
	// no space in the first or last position of the content, but allowed elsewhere
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent2()
}

func (c *current) onSinglePlusPassthroughContent24() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent24()
}

func (c *current) onTriplePlusPassthrough1(content interface{}) (interface{}, error) {

	return types.NewInlinePassthrough(types.TriplePlusPassthrough, []interface{}{content})
}

func (p *parser) callonTriplePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthrough1(stack["content"])
}

func (c *current) onTriplePlusPassthroughContent2() (interface{}, error) {
	// spaces and newlines are also allowed in the first or last position of the content and elsewhere too
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent2()
}

func (c *current) onTriplePlusPassthroughContent8() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent8()
}

func (c *current) onPassthroughMacro2(content interface{}) (interface{}, error) {

	return types.NewInlinePassthrough(types.PassthroughMacro, []interface{}{content})
}

func (p *parser) callonPassthroughMacro2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro2(stack["content"])
}

func (c *current) onPassthroughMacro9(content interface{}) (interface{}, error) {

	return types.NewInlinePassthrough(types.PassthroughMacro, content.([]interface{}))
}

func (p *parser) callonPassthroughMacro9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro9(stack["content"])
}

func (c *current) onPassthroughMacroCharacter1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonPassthroughMacroCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacroCharacter1()
}

func (c *current) onInternalCrossReference2(id, label interface{}) (interface{}, error) {

	return types.NewInternalCrossReference(id.(string), label.(string))
}

func (p *parser) callonInternalCrossReference2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference2(stack["id"], stack["label"])
}

func (c *current) onInternalCrossReference13(id interface{}) (interface{}, error) {

	return types.NewInternalCrossReference(id.(string), nil)
}

func (p *parser) callonInternalCrossReference13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference13(stack["id"])
}

func (c *current) onExternalCrossReference1(url, inlineAttributes interface{}) (interface{}, error) {

	return types.NewExternalCrossReference(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonExternalCrossReference1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {

	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {

	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onLinkAttributes1(firstAttr, otherattrs interface{}) (interface{}, error) {

	return types.NewInlineLinkAttributes(append(firstAttr.([]interface{}), otherattrs.([]interface{})...))
}

func (p *parser) callonLinkAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkAttributes1(stack["firstAttr"], stack["otherattrs"])
}

func (c *current) onFirstLinkAttributeElement4(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFirstLinkAttributeElement4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement4(stack["elements"])
}

func (c *current) onFirstLinkAttributeElement19(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFirstLinkAttributeElement19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement19(stack["elements"])
}

func (c *current) onFirstLinkAttributeElement1(element interface{}) (interface{}, error) {

	return element, nil
}

func (p *parser) callonFirstLinkAttributeElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement1(stack["element"])
}

func (c *current) onAttributeChar1() (interface{}, error) {
	// excludes comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeChar1()
}

func (c *current) onQuotedAttributeChar1() (interface{}, error) {
	// does not exclude comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonQuotedAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedAttributeChar1()
}

func (c *current) onUnquotedAttributeChar1() (interface{}, error) {
	// excludes comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonUnquotedAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeChar1()
}

func (c *current) onInlineLinks1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonInlineLinks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineLinks1(stack["elements"])
}

func (c *current) onResolvedRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {

	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonResolvedRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onResolvedExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {

	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonResolvedExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onImageBlock1(attributes, path, inlineAttributes interface{}) (interface{}, error) {

	return types.NewImageBlock(path.(types.Location), inlineAttributes.(types.Attributes), attributes)
}

func (p *parser) callonImageBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock1(stack["attributes"], stack["path"], stack["inlineAttributes"])
}

func (c *current) onInlineImage1(path, inlineAttributes interface{}) (interface{}, error) {

	return types.NewInlineImage(path.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonInlineImage1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage1(stack["path"], stack["inlineAttributes"])
}

func (c *current) onImageAttributes1(alt, width, height, otherattrs interface{}) (interface{}, error) {

	return types.NewImageAttributes(alt, width, height, otherattrs.([]interface{}))
}

func (p *parser) callonImageAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAttributes1(stack["alt"], stack["width"], stack["height"], stack["otherattrs"])
}

func (c *current) onInlineIcon5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineIcon5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon5()
}

func (c *current) onInlineIcon1(iconClass, inlineAttributes interface{}) (interface{}, error) {

	return types.NewIcon(iconClass.(string), inlineAttributes.(types.Attributes))
}

func (p *parser) callonInlineIcon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon1(stack["iconClass"], stack["inlineAttributes"])
}

func (c *current) onIconAttributes1(size, others interface{}) (interface{}, error) {

	return types.NewIconAttributes(size, others.([]interface{}))
}

func (p *parser) callonIconAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIconAttributes1(stack["size"], stack["others"])
}

func (c *current) onInlineFootnote2(content interface{}) (interface{}, error) {

	return types.NewFootnote("", content.([]interface{}))
}

func (p *parser) callonInlineFootnote2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote2(stack["content"])
}

func (c *current) onInlineFootnote8(ref, content interface{}) (interface{}, error) {

	return types.NewFootnote(ref.(string), content)
}

func (p *parser) callonInlineFootnote8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote8(stack["ref"], stack["content"])
}

func (c *current) onFootnoteContent1(elements interface{}) (interface{}, error) {
	// footnote content may span multiple lines
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonFootnoteContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteContent1(stack["elements"])
}

func (c *current) onDelimitedBlock1(block interface{}) (interface{}, error) {

	return block, nil
}

func (p *parser) callonDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock1(stack["block"])
}

func (c *current) onVerbatimLine1(content, callouts interface{}) (interface{}, error) {

	return types.NewVerbatimLine(content.(string), callouts)
}

func (p *parser) callonVerbatimLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLine1(stack["content"], stack["callouts"])
}

func (c *current) onVerbatimLineContent1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonVerbatimLineContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLineContent1()
}

func (c *current) onCallout5() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCallout5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout5()
}

func (c *current) onCallout1(ref interface{}) (interface{}, error) {

	return types.NewCallout(ref.(int))
}

func (p *parser) callonCallout1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout1(stack["ref"])
}

func (c *current) onCalloutListItem1(ref, description interface{}) (interface{}, error) {

	return types.NewCalloutListItem(ref.(int), description.([]interface{}))
}

func (p *parser) callonCalloutListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItem1(stack["ref"], stack["description"])
}

func (c *current) onCalloutListItemPrefix5() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCalloutListItemPrefix5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItemPrefix5()
}

func (c *current) onCalloutListItemPrefix1(ref interface{}) (interface{}, error) {

	return ref, nil
}

func (p *parser) callonCalloutListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItemPrefix1(stack["ref"])
}

func (c *current) onFencedBlock1(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Fenced, content.([]interface{}), attributes)
}

func (p *parser) callonFencedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlock1(stack["attributes"], stack["content"])
}

func (c *current) onFencedBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonFencedBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockVerbatimContent2(stack["content"])
}

func (c *current) onListingBlock1(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Listing, content.([]interface{}), attributes)
}

func (p *parser) callonListingBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlock1(stack["attributes"], stack["content"])
}

func (c *current) onListingBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonListingBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockVerbatimContent2(stack["content"])
}

func (c *current) onExampleBlock1(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Example, content.([]interface{}), attributes)
}

func (p *parser) callonExampleBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlock1(stack["attributes"], stack["content"])
}

func (c *current) onExampleBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonExampleBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockVerbatimContent2(stack["content"])
}

func (c *current) onQuoteBlock1(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Quote, content.([]interface{}), attributes)
}

func (p *parser) callonQuoteBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlock1(stack["attributes"], stack["content"])
}

func (c *current) onQuoteBlockVerbatimElement2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonQuoteBlockVerbatimElement2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockVerbatimElement2(stack["content"])
}

func (c *current) onVerseBlock5(attributes interface{}) (bool, error) {

	kind, found := attributes.(types.Attributes).GetAsString("kind") // once we got the attributes, check that `[verse]`  was set
	return found && kind == "verse", nil

}

func (p *parser) callonVerseBlock5() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlock5(stack["attributes"])
}

func (c *current) onVerseBlock1(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Verse, content.([]interface{}), attributes)

}

func (p *parser) callonVerseBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlock1(stack["attributes"], stack["content"])
}

func (c *current) onVerseBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonVerseBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockVerbatimContent2(stack["content"])
}

func (c *current) onSidebarBlock1(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Sidebar, content.([]interface{}), attributes)
}

func (p *parser) callonSidebarBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlock1(stack["attributes"], stack["content"])
}

func (c *current) onSidebarBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonSidebarBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockVerbatimContent2(stack["content"])
}

func (c *current) onPassthroughBlock1(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Passthrough, content.([]interface{}), attributes)
}

func (p *parser) callonPassthroughBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlock1(stack["attributes"], stack["content"])
}

func (c *current) onPassthroughBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonPassthroughBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockVerbatimContent2(stack["content"])
}

func (c *current) onNormalBlockElement1(element interface{}) (interface{}, error) {

	return element, nil

}

func (p *parser) callonNormalBlockElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalBlockElement1(stack["element"])
}

func (c *current) onVerseBlockElement1(element interface{}) (interface{}, error) {

	return element, nil
}

func (p *parser) callonVerseBlockElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockElement1(stack["element"])
}

func (c *current) onVerseBlockParagraph1(lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), nil)
}

func (p *parser) callonVerseBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraph1(stack["lines"])
}

func (c *current) onVerseBlockParagraphLine1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements)
}

func (p *parser) callonVerseBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraphLine1(stack["elements"])
}

func (c *current) onTable1(attributes, header, lines interface{}) (interface{}, error) {
	// end delimiter or end of file
	return types.NewTable(header, lines.([]interface{}), attributes)
}

func (p *parser) callonTable1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTable1(stack["attributes"], stack["header"], stack["lines"])
}

func (c *current) onTableLineHeader1(cells interface{}) (interface{}, error) {

	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLineHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLineHeader1(stack["cells"])
}

func (c *current) onTableLine1(cells interface{}) (interface{}, error) {

	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLine1(stack["cells"])
}

func (c *current) onTableCell1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements)
}

func (p *parser) callonTableCell1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCell1(stack["elements"])
}

func (c *current) onCommentBlock1(content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Comment, content.([]interface{}), nil)
}

func (p *parser) callonCommentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlock1(stack["content"])
}

func (c *current) onCommentBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonCommentBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlockVerbatimContent2(stack["content"])
}

func (c *current) onSingleLineComment1(content interface{}) (interface{}, error) {

	return types.NewSingleLineComment(content.(string))
}

func (p *parser) callonSingleLineComment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineComment1(stack["content"])
}

func (c *current) onSingleLineCommentContent1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonSingleLineCommentContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineCommentContent1()
}

func (c *current) onParagraphWithHeadingSpaces1(attributes, lines interface{}) (interface{}, error) {

	return types.NewLiteralBlock(types.LiteralBlockWithSpacesOnFirstLine, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithHeadingSpaces1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpaces1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithHeadingSpacesLines4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines4()
}

func (c *current) onParagraphWithHeadingSpacesLines18() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines18()
}

func (c *current) onParagraphWithHeadingSpacesLines13(otherLine interface{}) (interface{}, error) {

	return otherLine, nil // do not include the trailing 'EOL'

}

func (p *parser) callonParagraphWithHeadingSpacesLines13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines13(stack["otherLine"])
}

func (c *current) onParagraphWithHeadingSpacesLines1(firstLine, otherLines interface{}) (interface{}, error) {

	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonParagraphWithHeadingSpacesLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiter1(attributes, lines interface{}) (interface{}, error) {

	return types.NewLiteralBlock(types.LiteralBlockWithDelimiter, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithLiteralBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiter1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLines1(lines interface{}) (interface{}, error) {

	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine4()
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine1(line interface{}) (interface{}, error) {

	return line, nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine1(stack["line"])
}

func (c *current) onParagraphWithLiteralAttribute6(attributes interface{}) (bool, error) {

	if attrs, ok := attributes.(types.Attributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Literal, nil
	}
	return false, nil

}

func (p *parser) callonParagraphWithLiteralAttribute6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute6(stack["attributes"])
}

func (c *current) onParagraphWithLiteralAttribute1(attributes, lines interface{}) (interface{}, error) {

	return types.NewLiteralBlock(types.LiteralBlockWithAttribute, lines.([]interface{}), attributes)

}

func (p *parser) callonParagraphWithLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute1(stack["attributes"], stack["lines"])
}

func (c *current) onLiteralKind1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonLiteralKind1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralKind1()
}

func (c *current) onParagraphWithLiteralAttributeLines1(lines interface{}) (interface{}, error) {

	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralAttributeLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralAttributeLine6() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonParagraphWithLiteralAttributeLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLine6()
}

func (c *current) onParagraphWithLiteralAttributeLine1(content interface{}) (interface{}, error) {

	return content.(string), nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralAttributeLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLine1(stack["content"])
}

func (c *current) onIndexTerm1(term interface{}) (interface{}, error) {

	return types.NewIndexTerm(term.([]interface{}))
}

func (p *parser) callonIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTerm1(stack["term"])
}

func (c *current) onIndexTermContent9() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonIndexTermContent9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent9()
}

func (c *current) onIndexTermContent1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent1(stack["elements"])
}

func (c *current) onConcealedIndexTerm8(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm8(stack["content"])
}

func (c *current) onConcealedIndexTerm19(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm19(stack["content"])
}

func (c *current) onConcealedIndexTerm1(term1, term2, term3 interface{}) (interface{}, error) {

	return types.NewConcealedIndexTerm(term1, term2, term3)

}

func (p *parser) callonConcealedIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm1(stack["term1"], stack["term2"], stack["term3"])
}

func (c *current) onConcealedIndexTermContent1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonConcealedIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTermContent1()
}

func (c *current) onBlankLine1() (interface{}, error) {

	return types.NewBlankLine()
}

func (p *parser) callonBlankLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlankLine1()
}

func (c *current) onAlphanums1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonAlphanums1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAlphanums1()
}

func (c *current) onWord2() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord2()
}

func (c *current) onWord10() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord10()
}

func (c *current) onInlineWord2() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineWord2()
}

func (c *current) onAnyChar1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonAnyChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyChar1()
}

func (c *current) onFileLocation1(path interface{}) (interface{}, error) {

	return types.NewLocation("", path.([]interface{}))
}

func (p *parser) callonFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation1(stack["path"])
}

func (c *current) onResolvedFileLocation1(path interface{}) (interface{}, error) {

	return types.NewLocation("", path.([]interface{}))
}

func (p *parser) callonResolvedFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedFileLocation1(stack["path"])
}

func (c *current) onLocation1(scheme, path interface{}) (interface{}, error) {

	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocation1(stack["scheme"], stack["path"])
}

func (c *current) onLocationWithScheme1(scheme, path interface{}) (interface{}, error) {

	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonLocationWithScheme1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocationWithScheme1(stack["scheme"], stack["path"])
}

func (c *current) onResolvedLocation1(scheme, path interface{}) (interface{}, error) {

	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonResolvedLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedLocation1(stack["scheme"], stack["path"])
}

func (c *current) onURL1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonURL1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURL1()
}

func (c *current) onID1() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil
}

func (p *parser) callonID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onID1()
}

func (c *current) onDIGIT1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonDIGIT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDIGIT1()
}

func (c *current) onNUMBER1() (interface{}, error) {

	return strconv.Atoi(string(c.text))
}

func (p *parser) callonNUMBER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNUMBER1()
}

func (c *current) onSpace3() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonSpace3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpace3()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			return val, ok
		}
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}
