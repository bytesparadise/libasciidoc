// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/bytesparadise/libasciidoc/pkg/types"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "AsciidocRawDocument",
			pos:  position{line: 17, col: 1, offset: 335},
			expr: &actionExpr{
				pos: position{line: 17, col: 24, offset: 358},
				run: (*parser).callonAsciidocRawDocument1,
				expr: &seqExpr{
					pos: position{line: 17, col: 24, offset: 358},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 17, col: 24, offset: 358},
							label: "frontmatter",
							expr: &zeroOrOneExpr{
								pos: position{line: 17, col: 37, offset: 371},
								expr: &ruleRefExpr{
									pos:  position{line: 17, col: 37, offset: 371},
									name: "FrontMatter",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 17, col: 51, offset: 385},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 17, col: 59, offset: 393},
								name: "AsciidocDocumentRawBlocks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 17, col: 86, offset: 420},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "VerbatimDocument",
			pos:  position{line: 22, col: 1, offset: 519},
			expr: &actionExpr{
				pos: position{line: 22, col: 21, offset: 539},
				run: (*parser).callonVerbatimDocument1,
				expr: &seqExpr{
					pos: position{line: 22, col: 21, offset: 539},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 22, col: 21, offset: 539},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 22, col: 29, offset: 547},
								name: "VerbatimFileContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 22, col: 50, offset: 568},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "RawFile",
			pos:  position{line: 27, col: 1, offset: 686},
			expr: &actionExpr{
				pos: position{line: 27, col: 12, offset: 697},
				run: (*parser).callonRawFile1,
				expr: &seqExpr{
					pos: position{line: 27, col: 12, offset: 697},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 27, col: 12, offset: 697},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 27, col: 20, offset: 705},
								name: "RawFileContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 27, col: 36, offset: 721},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "TextDocument",
			pos:  position{line: 33, col: 1, offset: 865},
			expr: &actionExpr{
				pos: position{line: 33, col: 17, offset: 881},
				run: (*parser).callonTextDocument1,
				expr: &seqExpr{
					pos: position{line: 33, col: 17, offset: 881},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 33, col: 17, offset: 881},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 33, col: 25, offset: 889},
								name: "TextDocumentBlocks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 33, col: 45, offset: 909},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "AsciidocDocumentRawBlocks",
			pos:  position{line: 40, col: 1, offset: 1090},
			expr: &actionExpr{
				pos: position{line: 40, col: 30, offset: 1119},
				run: (*parser).callonAsciidocDocumentRawBlocks1,
				expr: &seqExpr{
					pos: position{line: 40, col: 30, offset: 1119},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 40, col: 30, offset: 1119},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 40, col: 38, offset: 1127},
								expr: &ruleRefExpr{
									pos:  position{line: 40, col: 38, offset: 1127},
									name: "DocumentHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 40, col: 55, offset: 1144},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 40, col: 63, offset: 1152},
								expr: &ruleRefExpr{
									pos:  position{line: 40, col: 63, offset: 1152},
									name: "DocumentRawBlock",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRawBlock",
			pos:  position{line: 49, col: 1, offset: 1404},
			expr: &choiceExpr{
				pos: position{line: 50, col: 9, offset: 1433},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 50, col: 9, offset: 1433},
						name: "LabeledListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 51, col: 11, offset: 1498},
						name: "ImageBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 52, col: 11, offset: 1519},
						name: "SimpleParagraph",
					},
					&ruleRefExpr{
						pos:  position{line: 53, col: 11, offset: 1545},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 54, col: 11, offset: 1597},
						name: "Section",
					},
					&ruleRefExpr{
						pos:  position{line: 55, col: 11, offset: 1615},
						name: "DelimitedBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 56, col: 11, offset: 1640},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 57, col: 11, offset: 1664},
						name: "RawVerseParagraph",
					},
					&ruleRefExpr{
						pos:  position{line: 58, col: 11, offset: 1692},
						name: "ThematicBreak",
					},
					&ruleRefExpr{
						pos:  position{line: 59, col: 11, offset: 1716},
						name: "OrderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 60, col: 11, offset: 1742},
						name: "UnorderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 61, col: 11, offset: 1771},
						name: "CalloutListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 62, col: 11, offset: 1797},
						name: "ContinuedListItemElement",
					},
					&ruleRefExpr{
						pos:  position{line: 63, col: 11, offset: 1832},
						name: "LiteralBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 64, col: 11, offset: 1856},
						name: "AttributeDeclaration",
					},
					&ruleRefExpr{
						pos:  position{line: 65, col: 11, offset: 1888},
						name: "AttributeReset",
					},
					&ruleRefExpr{
						pos:  position{line: 66, col: 11, offset: 1914},
						name: "TableOfContentsPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 67, col: 11, offset: 1951},
						name: "UserMacroBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 68, col: 11, offset: 1976},
						name: "StandaloneAttributes",
					},
					&ruleRefExpr{
						pos:  position{line: 69, col: 11, offset: 2007},
						name: "RawParagraph",
					},
				},
			},
		},
		{
			name: "AsciidocDocumentBlocksWithinDelimitedBlock",
			pos:  position{line: 71, col: 1, offset: 2021},
			expr: &labeledExpr{
				pos:   position{line: 71, col: 47, offset: 2067},
				label: "blocks",
				expr: &zeroOrMoreExpr{
					pos: position{line: 71, col: 54, offset: 2074},
					expr: &ruleRefExpr{
						pos:  position{line: 71, col: 55, offset: 2075},
						name: "DocumentBlockWithinDelimitedBlock",
					},
				},
			},
		},
		{
			name: "DocumentBlockWithinDelimitedBlock",
			pos:  position{line: 73, col: 1, offset: 2112},
			expr: &actionExpr{
				pos: position{line: 73, col: 38, offset: 2149},
				run: (*parser).callonDocumentBlockWithinDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 73, col: 38, offset: 2149},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 73, col: 38, offset: 2149},
							expr: &ruleRefExpr{
								pos:  position{line: 73, col: 39, offset: 2150},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 74, col: 5, offset: 2159},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 75, col: 9, offset: 2175},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 75, col: 9, offset: 2175},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 76, col: 11, offset: 2196},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 77, col: 11, offset: 2221},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 78, col: 11, offset: 2272},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 79, col: 11, offset: 2296},
										name: "RawVerseParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 80, col: 11, offset: 2324},
										name: "ThematicBreak",
									},
									&ruleRefExpr{
										pos:  position{line: 81, col: 11, offset: 2348},
										name: "OrderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 82, col: 11, offset: 2374},
										name: "UnorderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 83, col: 11, offset: 2403},
										name: "LabeledListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 84, col: 11, offset: 2429},
										name: "ContinuedListItemElement",
									},
									&ruleRefExpr{
										pos:  position{line: 85, col: 11, offset: 2464},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 86, col: 11, offset: 2488},
										name: "AttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 87, col: 11, offset: 2520},
										name: "AttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 88, col: 11, offset: 2546},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 89, col: 11, offset: 2583},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 90, col: 11, offset: 2608},
										name: "RawParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TextDocumentBlocks",
			pos:  position{line: 94, col: 1, offset: 2649},
			expr: &labeledExpr{
				pos:   position{line: 94, col: 23, offset: 2671},
				label: "blocks",
				expr: &zeroOrMoreExpr{
					pos: position{line: 94, col: 30, offset: 2678},
					expr: &ruleRefExpr{
						pos:  position{line: 94, col: 31, offset: 2679},
						name: "TextDocumentBlock",
					},
				},
			},
		},
		{
			name: "TextDocumentBlock",
			pos:  position{line: 96, col: 1, offset: 2700},
			expr: &actionExpr{
				pos: position{line: 96, col: 22, offset: 2721},
				run: (*parser).callonTextDocumentBlock1,
				expr: &seqExpr{
					pos: position{line: 96, col: 22, offset: 2721},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 96, col: 22, offset: 2721},
							expr: &ruleRefExpr{
								pos:  position{line: 96, col: 23, offset: 2722},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 97, col: 5, offset: 2731},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 97, col: 12, offset: 2738},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 97, col: 12, offset: 2738},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 97, col: 24, offset: 2750},
										name: "RawParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FrontMatter",
			pos:  position{line: 104, col: 1, offset: 2899},
			expr: &ruleRefExpr{
				pos:  position{line: 104, col: 16, offset: 2914},
				name: "YamlFrontMatter",
			},
		},
		{
			name: "YamlFrontMatter",
			pos:  position{line: 106, col: 1, offset: 2932},
			expr: &actionExpr{
				pos: position{line: 106, col: 20, offset: 2951},
				run: (*parser).callonYamlFrontMatter1,
				expr: &seqExpr{
					pos: position{line: 106, col: 20, offset: 2951},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 106, col: 20, offset: 2951},
							name: "YamlFrontMatterToken",
						},
						&labeledExpr{
							pos:   position{line: 106, col: 41, offset: 2972},
							label: "content",
							expr: &zeroOrOneExpr{
								pos: position{line: 106, col: 49, offset: 2980},
								expr: &ruleRefExpr{
									pos:  position{line: 106, col: 50, offset: 2981},
									name: "YamlFrontMatterContent",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 106, col: 75, offset: 3006},
							name: "YamlFrontMatterToken",
						},
					},
				},
			},
		},
		{
			name: "YamlFrontMatterToken",
			pos:  position{line: 110, col: 1, offset: 3086},
			expr: &seqExpr{
				pos: position{line: 110, col: 26, offset: 3111},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 110, col: 26, offset: 3111},
						val:        "---",
						ignoreCase: false,
						want:       "\"---\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 110, col: 32, offset: 3117},
						expr: &ruleRefExpr{
							pos:  position{line: 110, col: 32, offset: 3117},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 110, col: 39, offset: 3124},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "YamlFrontMatterContent",
			pos:  position{line: 112, col: 1, offset: 3129},
			expr: &actionExpr{
				pos: position{line: 112, col: 27, offset: 3155},
				run: (*parser).callonYamlFrontMatterContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 112, col: 27, offset: 3155},
					expr: &oneOrMoreExpr{
						pos: position{line: 112, col: 28, offset: 3156},
						expr: &seqExpr{
							pos: position{line: 112, col: 29, offset: 3157},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 112, col: 29, offset: 3157},
									expr: &ruleRefExpr{
										pos:  position{line: 112, col: 30, offset: 3158},
										name: "YamlFrontMatterToken",
									},
								},
								&anyMatcher{
									line: 112, col: 51, offset: 3179,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentHeader",
			pos:  position{line: 119, col: 1, offset: 3345},
			expr: &actionExpr{
				pos: position{line: 119, col: 19, offset: 3363},
				run: (*parser).callonDocumentHeader1,
				expr: &seqExpr{
					pos: position{line: 119, col: 19, offset: 3363},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 119, col: 19, offset: 3363},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 119, col: 23, offset: 3367},
							expr: &ruleRefExpr{
								pos:  position{line: 119, col: 23, offset: 3367},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 119, col: 30, offset: 3374},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 119, col: 37, offset: 3381},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 119, col: 52, offset: 3396},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 119, col: 56, offset: 3400},
								expr: &ruleRefExpr{
									pos:  position{line: 119, col: 56, offset: 3400},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 119, col: 74, offset: 3418},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 120, col: 9, offset: 3430},
							expr: &choiceExpr{
								pos: position{line: 120, col: 10, offset: 3431},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 120, col: 10, offset: 3431},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 120, col: 30, offset: 3451},
										name: "CommentBlock",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 121, col: 9, offset: 3474},
							label: "authors",
							expr: &zeroOrOneExpr{
								pos: position{line: 121, col: 18, offset: 3483},
								expr: &ruleRefExpr{
									pos:  position{line: 121, col: 18, offset: 3483},
									name: "DocumentAuthors",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 122, col: 9, offset: 3510},
							expr: &choiceExpr{
								pos: position{line: 122, col: 10, offset: 3511},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 122, col: 10, offset: 3511},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 122, col: 30, offset: 3531},
										name: "CommentBlock",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 123, col: 9, offset: 3554},
							label: "revision",
							expr: &zeroOrOneExpr{
								pos: position{line: 123, col: 19, offset: 3564},
								expr: &ruleRefExpr{
									pos:  position{line: 123, col: 19, offset: 3564},
									name: "DocumentRevision",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthors",
			pos:  position{line: 127, col: 1, offset: 3665},
			expr: &choiceExpr{
				pos: position{line: 127, col: 20, offset: 3684},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 127, col: 20, offset: 3684},
						name: "DocumentAuthorsInlineForm",
					},
					&ruleRefExpr{
						pos:  position{line: 127, col: 48, offset: 3712},
						name: "DocumentAuthorsAttributeForm",
					},
				},
			},
		},
		{
			name: "DocumentAuthorsInlineForm",
			pos:  position{line: 129, col: 1, offset: 3742},
			expr: &actionExpr{
				pos: position{line: 129, col: 30, offset: 3771},
				run: (*parser).callonDocumentAuthorsInlineForm1,
				expr: &seqExpr{
					pos: position{line: 129, col: 30, offset: 3771},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 129, col: 30, offset: 3771},
							expr: &ruleRefExpr{
								pos:  position{line: 129, col: 30, offset: 3771},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 129, col: 37, offset: 3778},
							expr: &litMatcher{
								pos:        position{line: 129, col: 38, offset: 3779},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 129, col: 42, offset: 3783},
							label: "authors",
							expr: &oneOrMoreExpr{
								pos: position{line: 129, col: 51, offset: 3792},
								expr: &ruleRefExpr{
									pos:  position{line: 129, col: 51, offset: 3792},
									name: "DocumentAuthor",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 129, col: 68, offset: 3809},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorsAttributeForm",
			pos:  position{line: 133, col: 1, offset: 3879},
			expr: &actionExpr{
				pos: position{line: 133, col: 33, offset: 3911},
				run: (*parser).callonDocumentAuthorsAttributeForm1,
				expr: &seqExpr{
					pos: position{line: 133, col: 33, offset: 3911},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 133, col: 33, offset: 3911},
							expr: &ruleRefExpr{
								pos:  position{line: 133, col: 33, offset: 3911},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 133, col: 40, offset: 3918},
							val:        ":author:",
							ignoreCase: false,
							want:       "\":author:\"",
						},
						&labeledExpr{
							pos:   position{line: 133, col: 51, offset: 3929},
							label: "author",
							expr: &ruleRefExpr{
								pos:  position{line: 133, col: 59, offset: 3937},
								name: "DocumentAuthor",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 133, col: 75, offset: 3953},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthor",
			pos:  position{line: 137, col: 1, offset: 4032},
			expr: &actionExpr{
				pos: position{line: 137, col: 19, offset: 4050},
				run: (*parser).callonDocumentAuthor1,
				expr: &seqExpr{
					pos: position{line: 137, col: 19, offset: 4050},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 137, col: 19, offset: 4050},
							expr: &ruleRefExpr{
								pos:  position{line: 137, col: 19, offset: 4050},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 137, col: 26, offset: 4057},
							label: "fullname",
							expr: &ruleRefExpr{
								pos:  position{line: 137, col: 36, offset: 4067},
								name: "DocumentAuthorName",
							},
						},
						&labeledExpr{
							pos:   position{line: 137, col: 56, offset: 4087},
							label: "email",
							expr: &zeroOrOneExpr{
								pos: position{line: 137, col: 62, offset: 4093},
								expr: &ruleRefExpr{
									pos:  position{line: 137, col: 63, offset: 4094},
									name: "DocumentAuthorEmail",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 137, col: 85, offset: 4116},
							expr: &ruleRefExpr{
								pos:  position{line: 137, col: 85, offset: 4116},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 137, col: 92, offset: 4123},
							expr: &litMatcher{
								pos:        position{line: 137, col: 92, offset: 4123},
								val:        ";",
								ignoreCase: false,
								want:       "\";\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 137, col: 97, offset: 4128},
							expr: &ruleRefExpr{
								pos:  position{line: 137, col: 97, offset: 4128},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorName",
			pos:  position{line: 142, col: 1, offset: 4273},
			expr: &actionExpr{
				pos: position{line: 142, col: 23, offset: 4295},
				run: (*parser).callonDocumentAuthorName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 142, col: 23, offset: 4295},
					expr: &charClassMatcher{
						pos:        position{line: 142, col: 23, offset: 4295},
						val:        "[^<;\\r\\n]",
						chars:      []rune{'<', ';', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentAuthorEmail",
			pos:  position{line: 146, col: 1, offset: 4342},
			expr: &actionExpr{
				pos: position{line: 146, col: 24, offset: 4365},
				run: (*parser).callonDocumentAuthorEmail1,
				expr: &seqExpr{
					pos: position{line: 146, col: 24, offset: 4365},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 146, col: 24, offset: 4365},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 146, col: 28, offset: 4369},
							label: "email",
							expr: &actionExpr{
								pos: position{line: 146, col: 35, offset: 4376},
								run: (*parser).callonDocumentAuthorEmail5,
								expr: &oneOrMoreExpr{
									pos: position{line: 146, col: 36, offset: 4377},
									expr: &charClassMatcher{
										pos:        position{line: 146, col: 36, offset: 4377},
										val:        "[^>\\r\\n]",
										chars:      []rune{'>', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 148, col: 4, offset: 4424},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevision",
			pos:  position{line: 154, col: 1, offset: 4585},
			expr: &actionExpr{
				pos: position{line: 154, col: 21, offset: 4605},
				run: (*parser).callonDocumentRevision1,
				expr: &seqExpr{
					pos: position{line: 154, col: 21, offset: 4605},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 154, col: 21, offset: 4605},
							expr: &ruleRefExpr{
								pos:  position{line: 154, col: 21, offset: 4605},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 154, col: 28, offset: 4612},
							expr: &litMatcher{
								pos:        position{line: 154, col: 29, offset: 4613},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 154, col: 33, offset: 4617},
							label: "revision",
							expr: &choiceExpr{
								pos: position{line: 155, col: 9, offset: 4636},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 155, col: 10, offset: 4637},
										run: (*parser).callonDocumentRevision9,
										expr: &seqExpr{
											pos: position{line: 155, col: 10, offset: 4637},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 155, col: 10, offset: 4637},
													label: "revnumber",
													expr: &ruleRefExpr{
														pos:  position{line: 155, col: 21, offset: 4648},
														name: "DocumentRevisionNumber",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 155, col: 45, offset: 4672},
													expr: &litMatcher{
														pos:        position{line: 155, col: 45, offset: 4672},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 155, col: 50, offset: 4677},
													label: "revdate",
													expr: &zeroOrOneExpr{
														pos: position{line: 155, col: 58, offset: 4685},
														expr: &ruleRefExpr{
															pos:  position{line: 155, col: 59, offset: 4686},
															name: "DocumentRevisionDate",
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 155, col: 82, offset: 4709},
													expr: &litMatcher{
														pos:        position{line: 155, col: 82, offset: 4709},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 155, col: 87, offset: 4714},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 155, col: 97, offset: 4724},
														expr: &ruleRefExpr{
															pos:  position{line: 155, col: 98, offset: 4725},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 157, col: 15, offset: 4842},
										run: (*parser).callonDocumentRevision23,
										expr: &seqExpr{
											pos: position{line: 157, col: 15, offset: 4842},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 157, col: 15, offset: 4842},
													label: "revdate",
													expr: &ruleRefExpr{
														pos:  position{line: 157, col: 24, offset: 4851},
														name: "DocumentRevisionDate",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 157, col: 46, offset: 4873},
													expr: &litMatcher{
														pos:        position{line: 157, col: 46, offset: 4873},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 157, col: 51, offset: 4878},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 157, col: 61, offset: 4888},
														expr: &ruleRefExpr{
															pos:  position{line: 157, col: 62, offset: 4889},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 159, col: 13, offset: 4998},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionNumber",
			pos:  position{line: 164, col: 1, offset: 5128},
			expr: &choiceExpr{
				pos: position{line: 164, col: 27, offset: 5154},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 164, col: 27, offset: 5154},
						run: (*parser).callonDocumentRevisionNumber2,
						expr: &seqExpr{
							pos: position{line: 164, col: 27, offset: 5154},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 164, col: 27, offset: 5154},
									val:        "v",
									ignoreCase: true,
									want:       "\"v\"i",
								},
								&ruleRefExpr{
									pos:  position{line: 164, col: 32, offset: 5159},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 164, col: 39, offset: 5166},
									expr: &charClassMatcher{
										pos:        position{line: 164, col: 39, offset: 5166},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 166, col: 5, offset: 5214},
						run: (*parser).callonDocumentRevisionNumber8,
						expr: &seqExpr{
							pos: position{line: 166, col: 5, offset: 5214},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 166, col: 5, offset: 5214},
									expr: &litMatcher{
										pos:        position{line: 166, col: 5, offset: 5214},
										val:        "v",
										ignoreCase: true,
										want:       "\"v\"i",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 166, col: 11, offset: 5220},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 166, col: 18, offset: 5227},
									expr: &charClassMatcher{
										pos:        position{line: 166, col: 18, offset: 5227},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 166, col: 29, offset: 5238},
									expr: &ruleRefExpr{
										pos:  position{line: 166, col: 29, offset: 5238},
										name: "Space",
									},
								},
								&andExpr{
									pos: position{line: 166, col: 36, offset: 5245},
									expr: &litMatcher{
										pos:        position{line: 166, col: 37, offset: 5246},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionDate",
			pos:  position{line: 170, col: 1, offset: 5286},
			expr: &actionExpr{
				pos: position{line: 170, col: 25, offset: 5310},
				run: (*parser).callonDocumentRevisionDate1,
				expr: &oneOrMoreExpr{
					pos: position{line: 170, col: 25, offset: 5310},
					expr: &charClassMatcher{
						pos:        position{line: 170, col: 25, offset: 5310},
						val:        "[^:\\r\\n]",
						chars:      []rune{':', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentRevisionRemark",
			pos:  position{line: 174, col: 1, offset: 5356},
			expr: &actionExpr{
				pos: position{line: 174, col: 27, offset: 5382},
				run: (*parser).callonDocumentRevisionRemark1,
				expr: &oneOrMoreExpr{
					pos: position{line: 174, col: 27, offset: 5382},
					expr: &charClassMatcher{
						pos:        position{line: 174, col: 27, offset: 5382},
						val:        "[^\\r\\r\\n]",
						chars:      []rune{'\r', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "AttributeDeclaration",
			pos:  position{line: 181, col: 1, offset: 5535},
			expr: &actionExpr{
				pos: position{line: 181, col: 25, offset: 5559},
				run: (*parser).callonAttributeDeclaration1,
				expr: &seqExpr{
					pos: position{line: 181, col: 25, offset: 5559},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 181, col: 25, offset: 5559},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 181, col: 29, offset: 5563},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 181, col: 35, offset: 5569},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 181, col: 50, offset: 5584},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 182, col: 9, offset: 5597},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 182, col: 15, offset: 5603},
								expr: &actionExpr{
									pos: position{line: 182, col: 16, offset: 5604},
									run: (*parser).callonAttributeDeclaration9,
									expr: &seqExpr{
										pos: position{line: 182, col: 17, offset: 5605},
										exprs: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 182, col: 17, offset: 5605},
												expr: &ruleRefExpr{
													pos:  position{line: 182, col: 17, offset: 5605},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 182, col: 24, offset: 5612},
												label: "value",
												expr: &ruleRefExpr{
													pos:  position{line: 182, col: 31, offset: 5619},
													name: "AttributeDeclarationValue",
												},
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 184, col: 13, offset: 5693},
							expr: &ruleRefExpr{
								pos:  position{line: 184, col: 13, offset: 5693},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 184, col: 20, offset: 5700},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "AttributeName",
			pos:  position{line: 191, col: 1, offset: 5940},
			expr: &actionExpr{
				pos: position{line: 191, col: 18, offset: 5957},
				run: (*parser).callonAttributeName1,
				expr: &seqExpr{
					pos: position{line: 191, col: 18, offset: 5957},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 191, col: 18, offset: 5957},
							val:        "[\\pL0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 191, col: 28, offset: 5967},
							expr: &charClassMatcher{
								pos:        position{line: 191, col: 29, offset: 5968},
								val:        "[\\pL0-9-]",
								chars:      []rune{'-'},
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeDeclarationValue",
			pos:  position{line: 195, col: 1, offset: 6016},
			expr: &actionExpr{
				pos: position{line: 195, col: 30, offset: 6045},
				run: (*parser).callonAttributeDeclarationValue1,
				expr: &oneOrMoreExpr{
					pos: position{line: 195, col: 30, offset: 6045},
					expr: &charClassMatcher{
						pos:        position{line: 195, col: 30, offset: 6045},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "AttributeReset",
			pos:  position{line: 199, col: 1, offset: 6090},
			expr: &choiceExpr{
				pos: position{line: 199, col: 19, offset: 6108},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 199, col: 19, offset: 6108},
						run: (*parser).callonAttributeReset2,
						expr: &seqExpr{
							pos: position{line: 199, col: 19, offset: 6108},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 199, col: 19, offset: 6108},
									val:        ":!",
									ignoreCase: false,
									want:       "\":!\"",
								},
								&labeledExpr{
									pos:   position{line: 199, col: 24, offset: 6113},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 199, col: 30, offset: 6119},
										name: "AttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 199, col: 45, offset: 6134},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 199, col: 49, offset: 6138},
									expr: &ruleRefExpr{
										pos:  position{line: 199, col: 49, offset: 6138},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 199, col: 56, offset: 6145},
									name: "EOL",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 201, col: 5, offset: 6205},
						run: (*parser).callonAttributeReset11,
						expr: &seqExpr{
							pos: position{line: 201, col: 5, offset: 6205},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 201, col: 5, offset: 6205},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&labeledExpr{
									pos:   position{line: 201, col: 9, offset: 6209},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 201, col: 15, offset: 6215},
										name: "AttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 201, col: 30, offset: 6230},
									val:        "!:",
									ignoreCase: false,
									want:       "\"!:\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 201, col: 35, offset: 6235},
									expr: &ruleRefExpr{
										pos:  position{line: 201, col: 35, offset: 6235},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 201, col: 42, offset: 6242},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeSubstitution",
			pos:  position{line: 205, col: 1, offset: 6301},
			expr: &choiceExpr{
				pos: position{line: 205, col: 26, offset: 6326},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 205, col: 26, offset: 6326},
						name: "CounterSub",
					},
					&ruleRefExpr{
						pos:  position{line: 205, col: 39, offset: 6339},
						name: "AttrSub",
					},
				},
			},
		},
		{
			name: "AttrSub",
			pos:  position{line: 207, col: 1, offset: 6348},
			expr: &actionExpr{
				pos: position{line: 207, col: 12, offset: 6359},
				run: (*parser).callonAttrSub1,
				expr: &seqExpr{
					pos: position{line: 207, col: 12, offset: 6359},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 207, col: 12, offset: 6359},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&labeledExpr{
							pos:   position{line: 207, col: 16, offset: 6363},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 207, col: 21, offset: 6368},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 207, col: 35, offset: 6382},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSub",
			pos:  position{line: 211, col: 1, offset: 6448},
			expr: &choiceExpr{
				pos: position{line: 211, col: 15, offset: 6462},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 211, col: 15, offset: 6462},
						name: "CounterSub1",
					},
					&ruleRefExpr{
						pos:  position{line: 211, col: 29, offset: 6476},
						name: "CounterSub2",
					},
					&ruleRefExpr{
						pos:  position{line: 211, col: 43, offset: 6490},
						name: "CounterSubAlpha",
					},
					&ruleRefExpr{
						pos:  position{line: 211, col: 61, offset: 6508},
						name: "CounterSubAlpha2",
					},
					&ruleRefExpr{
						pos:  position{line: 211, col: 80, offset: 6527},
						name: "CounterSubStart",
					},
					&ruleRefExpr{
						pos:  position{line: 211, col: 98, offset: 6545},
						name: "CounterSubStart2",
					},
				},
			},
		},
		{
			name: "CounterSub1",
			pos:  position{line: 213, col: 1, offset: 6563},
			expr: &actionExpr{
				pos: position{line: 213, col: 16, offset: 6578},
				run: (*parser).callonCounterSub11,
				expr: &seqExpr{
					pos: position{line: 213, col: 16, offset: 6578},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 213, col: 16, offset: 6578},
							val:        "{counter:",
							ignoreCase: false,
							want:       "\"{counter:\"",
						},
						&labeledExpr{
							pos:   position{line: 213, col: 28, offset: 6590},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 213, col: 33, offset: 6595},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 213, col: 47, offset: 6609},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSub2",
			pos:  position{line: 217, col: 1, offset: 6685},
			expr: &actionExpr{
				pos: position{line: 217, col: 16, offset: 6700},
				run: (*parser).callonCounterSub21,
				expr: &seqExpr{
					pos: position{line: 217, col: 16, offset: 6700},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 217, col: 16, offset: 6700},
							val:        "{counter2:",
							ignoreCase: false,
							want:       "\"{counter2:\"",
						},
						&labeledExpr{
							pos:   position{line: 217, col: 29, offset: 6713},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 217, col: 34, offset: 6718},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 217, col: 48, offset: 6732},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubAlpha",
			pos:  position{line: 221, col: 1, offset: 6807},
			expr: &actionExpr{
				pos: position{line: 221, col: 20, offset: 6826},
				run: (*parser).callonCounterSubAlpha1,
				expr: &seqExpr{
					pos: position{line: 221, col: 20, offset: 6826},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 221, col: 20, offset: 6826},
							val:        "{counter:",
							ignoreCase: false,
							want:       "\"{counter:\"",
						},
						&labeledExpr{
							pos:   position{line: 221, col: 32, offset: 6838},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 221, col: 37, offset: 6843},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 221, col: 51, offset: 6857},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 221, col: 55, offset: 6861},
							label: "start",
							expr: &charClassMatcher{
								pos:        position{line: 221, col: 61, offset: 6867},
								val:        "[A-Za-z]",
								ranges:     []rune{'A', 'Z', 'a', 'z'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&litMatcher{
							pos:        position{line: 221, col: 70, offset: 6876},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubAlpha2",
			pos:  position{line: 225, col: 1, offset: 6954},
			expr: &actionExpr{
				pos: position{line: 225, col: 21, offset: 6974},
				run: (*parser).callonCounterSubAlpha21,
				expr: &seqExpr{
					pos: position{line: 225, col: 21, offset: 6974},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 225, col: 21, offset: 6974},
							val:        "{counter2:",
							ignoreCase: false,
							want:       "\"{counter2:\"",
						},
						&labeledExpr{
							pos:   position{line: 225, col: 34, offset: 6987},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 225, col: 39, offset: 6992},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 225, col: 53, offset: 7006},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 225, col: 57, offset: 7010},
							label: "start",
							expr: &charClassMatcher{
								pos:        position{line: 225, col: 63, offset: 7016},
								val:        "[A-Za-z]",
								ranges:     []rune{'A', 'Z', 'a', 'z'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&litMatcher{
							pos:        position{line: 225, col: 72, offset: 7025},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubStart",
			pos:  position{line: 229, col: 1, offset: 7102},
			expr: &actionExpr{
				pos: position{line: 229, col: 20, offset: 7121},
				run: (*parser).callonCounterSubStart1,
				expr: &seqExpr{
					pos: position{line: 229, col: 20, offset: 7121},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 229, col: 20, offset: 7121},
							val:        "{counter:",
							ignoreCase: false,
							want:       "\"{counter:\"",
						},
						&labeledExpr{
							pos:   position{line: 229, col: 32, offset: 7133},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 229, col: 37, offset: 7138},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 229, col: 51, offset: 7152},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 229, col: 55, offset: 7156},
							label: "num",
							expr: &actionExpr{
								pos: position{line: 229, col: 60, offset: 7161},
								run: (*parser).callonCounterSubStart8,
								expr: &oneOrMoreExpr{
									pos: position{line: 229, col: 60, offset: 7161},
									expr: &charClassMatcher{
										pos:        position{line: 229, col: 60, offset: 7161},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 229, col: 108, offset: 7209},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubStart2",
			pos:  position{line: 233, col: 1, offset: 7291},
			expr: &actionExpr{
				pos: position{line: 233, col: 21, offset: 7311},
				run: (*parser).callonCounterSubStart21,
				expr: &seqExpr{
					pos: position{line: 233, col: 21, offset: 7311},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 233, col: 21, offset: 7311},
							val:        "{counter2:",
							ignoreCase: false,
							want:       "\"{counter2:\"",
						},
						&labeledExpr{
							pos:   position{line: 233, col: 34, offset: 7324},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 233, col: 39, offset: 7329},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 233, col: 53, offset: 7343},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 233, col: 57, offset: 7347},
							label: "num",
							expr: &actionExpr{
								pos: position{line: 233, col: 62, offset: 7352},
								run: (*parser).callonCounterSubStart28,
								expr: &oneOrMoreExpr{
									pos: position{line: 233, col: 62, offset: 7352},
									expr: &charClassMatcher{
										pos:        position{line: 233, col: 62, offset: 7352},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 233, col: 110, offset: 7400},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "Attributes",
			pos:  position{line: 237, col: 1, offset: 7481},
			expr: &actionExpr{
				pos: position{line: 237, col: 15, offset: 7495},
				run: (*parser).callonAttributes1,
				expr: &seqExpr{
					pos: position{line: 237, col: 15, offset: 7495},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 237, col: 15, offset: 7495},
							label: "attrs",
							expr: &oneOrMoreExpr{
								pos: position{line: 237, col: 21, offset: 7501},
								expr: &ruleRefExpr{
									pos:  position{line: 237, col: 22, offset: 7502},
									name: "ElementAttribute",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 237, col: 41, offset: 7521},
							expr: &ruleRefExpr{
								pos:  position{line: 237, col: 41, offset: 7521},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "ElementAttribute",
			pos:  position{line: 241, col: 1, offset: 7591},
			expr: &actionExpr{
				pos: position{line: 241, col: 21, offset: 7611},
				run: (*parser).callonElementAttribute1,
				expr: &seqExpr{
					pos: position{line: 241, col: 21, offset: 7611},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 241, col: 21, offset: 7611},
							expr: &choiceExpr{
								pos: position{line: 241, col: 23, offset: 7613},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 241, col: 23, offset: 7613},
										val:        "[",
										ignoreCase: false,
										want:       "\"[\"",
									},
									&litMatcher{
										pos:        position{line: 241, col: 29, offset: 7619},
										val:        ".",
										ignoreCase: false,
										want:       "\".\"",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 242, col: 5, offset: 7696},
							label: "attr",
							expr: &choiceExpr{
								pos: position{line: 242, col: 11, offset: 7702},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 242, col: 11, offset: 7702},
										name: "ElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 243, col: 9, offset: 7723},
										name: "ElementTitle",
									},
									&ruleRefExpr{
										pos:  position{line: 244, col: 9, offset: 7747},
										name: "ElementShortHandAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 245, col: 9, offset: 7784},
										name: "LiteralAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 246, col: 9, offset: 7812},
										name: "SourceAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 247, col: 9, offset: 7840},
										name: "QuoteAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 248, col: 9, offset: 7867},
										name: "VerseAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 249, col: 9, offset: 7894},
										name: "AdmonitionMarkerAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 250, col: 9, offset: 7931},
										name: "PassthroughBlockAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 251, col: 9, offset: 7967},
										name: "AttributeGroup",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ElementID",
			pos:  position{line: 255, col: 1, offset: 8070},
			expr: &actionExpr{
				pos: position{line: 255, col: 14, offset: 8083},
				run: (*parser).callonElementID1,
				expr: &seqExpr{
					pos: position{line: 255, col: 14, offset: 8083},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 255, col: 14, offset: 8083},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 255, col: 19, offset: 8088},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 255, col: 23, offset: 8092},
								name: "ID",
							},
						},
						&litMatcher{
							pos:        position{line: 255, col: 27, offset: 8096},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 255, col: 32, offset: 8101},
							expr: &ruleRefExpr{
								pos:  position{line: 255, col: 32, offset: 8101},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 255, col: 39, offset: 8108},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "InlineElementID",
			pos:  position{line: 259, col: 1, offset: 8160},
			expr: &actionExpr{
				pos: position{line: 259, col: 20, offset: 8179},
				run: (*parser).callonInlineElementID1,
				expr: &seqExpr{
					pos: position{line: 259, col: 20, offset: 8179},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 259, col: 20, offset: 8179},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 259, col: 25, offset: 8184},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 259, col: 29, offset: 8188},
								name: "ID",
							},
						},
						&litMatcher{
							pos:        position{line: 259, col: 33, offset: 8192},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 259, col: 38, offset: 8197},
							expr: &ruleRefExpr{
								pos:  position{line: 259, col: 38, offset: 8197},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "ElementTitle",
			pos:  position{line: 265, col: 1, offset: 8474},
			expr: &actionExpr{
				pos: position{line: 265, col: 17, offset: 8490},
				run: (*parser).callonElementTitle1,
				expr: &seqExpr{
					pos: position{line: 265, col: 17, offset: 8490},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 265, col: 17, offset: 8490},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 265, col: 21, offset: 8494},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 265, col: 28, offset: 8501},
								name: "ElementTitleContent",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 265, col: 49, offset: 8522},
							expr: &ruleRefExpr{
								pos:  position{line: 265, col: 49, offset: 8522},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 265, col: 56, offset: 8529},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ElementTitleContent",
			pos:  position{line: 269, col: 1, offset: 8587},
			expr: &actionExpr{
				pos: position{line: 269, col: 24, offset: 8610},
				run: (*parser).callonElementTitleContent1,
				expr: &seqExpr{
					pos: position{line: 269, col: 24, offset: 8610},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 269, col: 24, offset: 8610},
							val:        "[\\pL0-9]",
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 269, col: 32, offset: 8618},
							expr: &charClassMatcher{
								pos:        position{line: 269, col: 32, offset: 8618},
								val:        "[^\\r\\n<>]",
								chars:      []rune{'\r', '\n', '<', '>'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "ElementShortHandAttributes",
			pos:  position{line: 275, col: 1, offset: 8872},
			expr: &actionExpr{
				pos: position{line: 275, col: 31, offset: 8902},
				run: (*parser).callonElementShortHandAttributes1,
				expr: &seqExpr{
					pos: position{line: 275, col: 31, offset: 8902},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 275, col: 31, offset: 8902},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 275, col: 35, offset: 8906},
							label: "attrs",
							expr: &seqExpr{
								pos: position{line: 275, col: 42, offset: 8913},
								exprs: []interface{}{
									&zeroOrMoreExpr{
										pos: position{line: 275, col: 42, offset: 8913},
										expr: &ruleRefExpr{
											pos:  position{line: 275, col: 42, offset: 8913},
											name: "ShortHandAttr",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 275, col: 57, offset: 8928},
										expr: &ruleRefExpr{
											pos:  position{line: 275, col: 57, offset: 8928},
											name: "NamedAttr",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 275, col: 69, offset: 8940},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 275, col: 73, offset: 8944},
							expr: &ruleRefExpr{
								pos:  position{line: 275, col: 73, offset: 8944},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 275, col: 80, offset: 8951},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "BlockAttrs",
			pos:  position{line: 279, col: 1, offset: 9005},
			expr: &choiceExpr{
				pos: position{line: 279, col: 15, offset: 9019},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 279, col: 15, offset: 9019},
						name: "BlockAttrList",
					},
					&ruleRefExpr{
						pos:  position{line: 279, col: 31, offset: 9035},
						name: "ElementTitle",
					},
					&ruleRefExpr{
						pos:  position{line: 279, col: 46, offset: 9050},
						name: "ElementID",
					},
				},
			},
		},
		{
			name: "BlockAttrList",
			pos:  position{line: 283, col: 1, offset: 9278},
			expr: &actionExpr{
				pos: position{line: 283, col: 18, offset: 9295},
				run: (*parser).callonBlockAttrList1,
				expr: &seqExpr{
					pos: position{line: 283, col: 18, offset: 9295},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 283, col: 18, offset: 9295},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 283, col: 22, offset: 9299},
							label: "attrs",
							expr: &seqExpr{
								pos: position{line: 283, col: 29, offset: 9306},
								exprs: []interface{}{
									&zeroOrOneExpr{
										pos: position{line: 283, col: 29, offset: 9306},
										expr: &ruleRefExpr{
											pos:  position{line: 283, col: 29, offset: 9306},
											name: "BlockAttrStyle",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 283, col: 45, offset: 9322},
										expr: &ruleRefExpr{
											pos:  position{line: 283, col: 45, offset: 9322},
											name: "ShortHandAttr",
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 283, col: 60, offset: 9337},
										expr: &ruleRefExpr{
											pos:  position{line: 283, col: 60, offset: 9337},
											name: "BlockAttrPositional2",
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 283, col: 82, offset: 9359},
										expr: &ruleRefExpr{
											pos:  position{line: 283, col: 82, offset: 9359},
											name: "BlockAttrPositional3",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 283, col: 104, offset: 9381},
										expr: &ruleRefExpr{
											pos:  position{line: 283, col: 104, offset: 9381},
											name: "NamedAttr",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 283, col: 116, offset: 9393},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&ruleRefExpr{
							pos:  position{line: 283, col: 120, offset: 9397},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "BlockAttrStyle",
			pos:  position{line: 287, col: 1, offset: 9451},
			expr: &actionExpr{
				pos: position{line: 287, col: 19, offset: 9469},
				run: (*parser).callonBlockAttrStyle1,
				expr: &labeledExpr{
					pos:   position{line: 287, col: 19, offset: 9469},
					label: "style",
					expr: &ruleRefExpr{
						pos:  position{line: 287, col: 25, offset: 9475},
						name: "PositionalValue",
					},
				},
			},
		},
		{
			name: "BlockAttrPositional2",
			pos:  position{line: 291, col: 1, offset: 9545},
			expr: &actionExpr{
				pos: position{line: 291, col: 25, offset: 9569},
				run: (*parser).callonBlockAttrPositional21,
				expr: &seqExpr{
					pos: position{line: 291, col: 25, offset: 9569},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 291, col: 25, offset: 9569},
							expr: &ruleRefExpr{
								pos:  position{line: 291, col: 25, offset: 9569},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 291, col: 32, offset: 9576},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 291, col: 36, offset: 9580},
							expr: &ruleRefExpr{
								pos:  position{line: 291, col: 36, offset: 9580},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 291, col: 43, offset: 9587},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 291, col: 49, offset: 9593},
								expr: &ruleRefExpr{
									pos:  position{line: 291, col: 49, offset: 9593},
									name: "PositionalValue",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockAttrPositional3",
			pos:  position{line: 298, col: 1, offset: 9743},
			expr: &actionExpr{
				pos: position{line: 298, col: 25, offset: 9767},
				run: (*parser).callonBlockAttrPositional31,
				expr: &seqExpr{
					pos: position{line: 298, col: 25, offset: 9767},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 298, col: 25, offset: 9767},
							expr: &ruleRefExpr{
								pos:  position{line: 298, col: 25, offset: 9767},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 298, col: 32, offset: 9774},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 298, col: 36, offset: 9778},
							expr: &ruleRefExpr{
								pos:  position{line: 298, col: 36, offset: 9778},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 298, col: 43, offset: 9785},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 298, col: 49, offset: 9791},
								expr: &ruleRefExpr{
									pos:  position{line: 298, col: 49, offset: 9791},
									name: "PositionalValue",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralAttribute",
			pos:  position{line: 305, col: 1, offset: 9941},
			expr: &actionExpr{
				pos: position{line: 305, col: 21, offset: 9961},
				run: (*parser).callonLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 305, col: 21, offset: 9961},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 305, col: 21, offset: 9961},
							val:        "[literal]",
							ignoreCase: false,
							want:       "\"[literal]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 305, col: 33, offset: 9973},
							expr: &ruleRefExpr{
								pos:  position{line: 305, col: 33, offset: 9973},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 305, col: 40, offset: 9980},
							name: "Newline",
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockAttribute",
			pos:  position{line: 309, col: 1, offset: 10032},
			expr: &actionExpr{
				pos: position{line: 309, col: 30, offset: 10061},
				run: (*parser).callonPassthroughBlockAttribute1,
				expr: &seqExpr{
					pos: position{line: 309, col: 30, offset: 10061},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 309, col: 30, offset: 10061},
							val:        "[pass]",
							ignoreCase: false,
							want:       "\"[pass]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 309, col: 39, offset: 10070},
							expr: &ruleRefExpr{
								pos:  position{line: 309, col: 39, offset: 10070},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 309, col: 46, offset: 10077},
							name: "Newline",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionMarkerAttribute",
			pos:  position{line: 314, col: 1, offset: 10218},
			expr: &actionExpr{
				pos: position{line: 314, col: 30, offset: 10247},
				run: (*parser).callonAdmonitionMarkerAttribute1,
				expr: &seqExpr{
					pos: position{line: 314, col: 30, offset: 10247},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 314, col: 30, offset: 10247},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 314, col: 34, offset: 10251},
							label: "k",
							expr: &ruleRefExpr{
								pos:  position{line: 314, col: 37, offset: 10254},
								name: "AdmonitionKind",
							},
						},
						&litMatcher{
							pos:        position{line: 314, col: 53, offset: 10270},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 314, col: 57, offset: 10274},
							expr: &ruleRefExpr{
								pos:  position{line: 314, col: 57, offset: 10274},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 314, col: 64, offset: 10281},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SourceAttributes",
			pos:  position{line: 319, col: 1, offset: 10436},
			expr: &actionExpr{
				pos: position{line: 319, col: 21, offset: 10456},
				run: (*parser).callonSourceAttributes1,
				expr: &seqExpr{
					pos: position{line: 319, col: 21, offset: 10456},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 319, col: 21, offset: 10456},
							val:        "[source",
							ignoreCase: false,
							want:       "\"[source\"",
						},
						&labeledExpr{
							pos:   position{line: 320, col: 5, offset: 10471},
							label: "language",
							expr: &zeroOrOneExpr{
								pos: position{line: 320, col: 14, offset: 10480},
								expr: &actionExpr{
									pos: position{line: 320, col: 15, offset: 10481},
									run: (*parser).callonSourceAttributes6,
									expr: &seqExpr{
										pos: position{line: 320, col: 15, offset: 10481},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 320, col: 15, offset: 10481},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 320, col: 19, offset: 10485},
												label: "attr",
												expr: &zeroOrOneExpr{
													pos: position{line: 320, col: 24, offset: 10490},
													expr: &ruleRefExpr{
														pos:  position{line: 320, col: 25, offset: 10491},
														name: "StandaloneAttributeValue",
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 321, col: 5, offset: 10546},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 321, col: 12, offset: 10553},
								expr: &actionExpr{
									pos: position{line: 321, col: 13, offset: 10554},
									run: (*parser).callonSourceAttributes14,
									expr: &seqExpr{
										pos: position{line: 321, col: 13, offset: 10554},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 321, col: 13, offset: 10554},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 321, col: 17, offset: 10558},
												label: "attr",
												expr: &zeroOrOneExpr{
													pos: position{line: 321, col: 22, offset: 10563},
													expr: &ruleRefExpr{
														pos:  position{line: 321, col: 23, offset: 10564},
														name: "GenericAttribute",
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 322, col: 5, offset: 10611},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 322, col: 9, offset: 10615},
							expr: &ruleRefExpr{
								pos:  position{line: 322, col: 9, offset: 10615},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 322, col: 16, offset: 10622},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "AttributeGroup",
			pos:  position{line: 327, col: 1, offset: 10773},
			expr: &actionExpr{
				pos: position{line: 327, col: 19, offset: 10791},
				run: (*parser).callonAttributeGroup1,
				expr: &seqExpr{
					pos: position{line: 327, col: 19, offset: 10791},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 327, col: 19, offset: 10791},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 327, col: 23, offset: 10795},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 327, col: 34, offset: 10806},
								expr: &ruleRefExpr{
									pos:  position{line: 327, col: 35, offset: 10807},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 327, col: 54, offset: 10826},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 327, col: 58, offset: 10830},
							expr: &ruleRefExpr{
								pos:  position{line: 327, col: 58, offset: 10830},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 327, col: 65, offset: 10837},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "GenericAttribute",
			pos:  position{line: 331, col: 1, offset: 10909},
			expr: &choiceExpr{
				pos: position{line: 331, col: 21, offset: 10929},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 331, col: 21, offset: 10929},
						name: "GenericAttributeWithValue",
					},
					&ruleRefExpr{
						pos:  position{line: 331, col: 49, offset: 10957},
						name: "GenericAttributeWithoutValue",
					},
				},
			},
		},
		{
			name: "GenericAttributeWithValue",
			pos:  position{line: 333, col: 1, offset: 10987},
			expr: &actionExpr{
				pos: position{line: 333, col: 30, offset: 11016},
				run: (*parser).callonGenericAttributeWithValue1,
				expr: &seqExpr{
					pos: position{line: 333, col: 30, offset: 11016},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 333, col: 30, offset: 11016},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 333, col: 35, offset: 11021},
								name: "AttributeKey",
							},
						},
						&litMatcher{
							pos:        position{line: 333, col: 49, offset: 11035},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&labeledExpr{
							pos:   position{line: 333, col: 53, offset: 11039},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 333, col: 59, offset: 11045},
								expr: &ruleRefExpr{
									pos:  position{line: 333, col: 60, offset: 11046},
									name: "AttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 333, col: 77, offset: 11063},
							expr: &litMatcher{
								pos:        position{line: 333, col: 77, offset: 11063},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 333, col: 82, offset: 11068},
							expr: &ruleRefExpr{
								pos:  position{line: 333, col: 82, offset: 11068},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "GenericAttributeWithoutValue",
			pos:  position{line: 337, col: 1, offset: 11167},
			expr: &actionExpr{
				pos: position{line: 337, col: 33, offset: 11199},
				run: (*parser).callonGenericAttributeWithoutValue1,
				expr: &seqExpr{
					pos: position{line: 337, col: 33, offset: 11199},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 337, col: 33, offset: 11199},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 337, col: 38, offset: 11204},
								name: "AttributeKey",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 337, col: 52, offset: 11218},
							expr: &litMatcher{
								pos:        position{line: 337, col: 52, offset: 11218},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 337, col: 57, offset: 11223},
							expr: &ruleRefExpr{
								pos:  position{line: 337, col: 57, offset: 11223},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeKey",
			pos:  position{line: 341, col: 1, offset: 11311},
			expr: &actionExpr{
				pos: position{line: 341, col: 17, offset: 11327},
				run: (*parser).callonAttributeKey1,
				expr: &seqExpr{
					pos: position{line: 341, col: 17, offset: 11327},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 341, col: 17, offset: 11327},
							expr: &litMatcher{
								pos:        position{line: 341, col: 18, offset: 11328},
								val:        "quote",
								ignoreCase: false,
								want:       "\"quote\"",
							},
						},
						&notExpr{
							pos: position{line: 341, col: 26, offset: 11336},
							expr: &litMatcher{
								pos:        position{line: 341, col: 27, offset: 11337},
								val:        "verse",
								ignoreCase: false,
								want:       "\"verse\"",
							},
						},
						&notExpr{
							pos: position{line: 341, col: 35, offset: 11345},
							expr: &litMatcher{
								pos:        position{line: 341, col: 36, offset: 11346},
								val:        "literal",
								ignoreCase: false,
								want:       "\"literal\"",
							},
						},
						&notExpr{
							pos: position{line: 341, col: 46, offset: 11356},
							expr: &oneOrMoreExpr{
								pos: position{line: 341, col: 48, offset: 11358},
								expr: &ruleRefExpr{
									pos:  position{line: 341, col: 48, offset: 11358},
									name: "Space",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 341, col: 56, offset: 11366},
							label: "key",
							expr: &oneOrMoreExpr{
								pos: position{line: 341, col: 61, offset: 11371},
								expr: &charClassMatcher{
									pos:        position{line: 341, col: 61, offset: 11371},
									val:        "[^\\r\\n=,\\]]",
									chars:      []rune{'\r', '\n', '=', ',', ']'},
									ignoreCase: false,
									inverted:   true,
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 341, col: 75, offset: 11385},
							expr: &ruleRefExpr{
								pos:  position{line: 341, col: 75, offset: 11385},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeValue",
			pos:  position{line: 345, col: 1, offset: 11428},
			expr: &actionExpr{
				pos: position{line: 345, col: 19, offset: 11446},
				run: (*parser).callonAttributeValue1,
				expr: &labeledExpr{
					pos:   position{line: 345, col: 19, offset: 11446},
					label: "value",
					expr: &oneOrMoreExpr{
						pos: position{line: 345, col: 26, offset: 11453},
						expr: &charClassMatcher{
							pos:        position{line: 345, col: 26, offset: 11453},
							val:        "[^\\r\\n=,\\]]",
							chars:      []rune{'\r', '\n', '=', ',', ']'},
							ignoreCase: false,
							inverted:   true,
						},
					},
				},
			},
		},
		{
			name: "StandaloneAttributeValue",
			pos:  position{line: 349, col: 1, offset: 11504},
			expr: &actionExpr{
				pos: position{line: 349, col: 29, offset: 11532},
				run: (*parser).callonStandaloneAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 349, col: 29, offset: 11532},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 349, col: 29, offset: 11532},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 349, col: 36, offset: 11539},
								expr: &charClassMatcher{
									pos:        position{line: 349, col: 36, offset: 11539},
									val:        "[^\\r\\n=,\\]]",
									chars:      []rune{'\r', '\n', '=', ',', ']'},
									ignoreCase: false,
									inverted:   true,
								},
							},
						},
						&notExpr{
							pos: position{line: 349, col: 50, offset: 11553},
							expr: &litMatcher{
								pos:        position{line: 349, col: 51, offset: 11554},
								val:        "=",
								ignoreCase: false,
								want:       "\"=\"",
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteAttributes",
			pos:  position{line: 353, col: 1, offset: 11720},
			expr: &actionExpr{
				pos: position{line: 353, col: 20, offset: 11739},
				run: (*parser).callonQuoteAttributes1,
				expr: &seqExpr{
					pos: position{line: 353, col: 20, offset: 11739},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 353, col: 20, offset: 11739},
							val:        "[quote",
							ignoreCase: false,
							want:       "\"[quote\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 353, col: 29, offset: 11748},
							expr: &ruleRefExpr{
								pos:  position{line: 353, col: 29, offset: 11748},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 353, col: 36, offset: 11755},
							expr: &litMatcher{
								pos:        position{line: 353, col: 36, offset: 11755},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 353, col: 41, offset: 11760},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 353, col: 48, offset: 11767},
								expr: &ruleRefExpr{
									pos:  position{line: 353, col: 49, offset: 11768},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 353, col: 66, offset: 11785},
							expr: &litMatcher{
								pos:        position{line: 353, col: 66, offset: 11785},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 353, col: 71, offset: 11790},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 353, col: 77, offset: 11796},
								expr: &ruleRefExpr{
									pos:  position{line: 353, col: 78, offset: 11797},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 353, col: 95, offset: 11814},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 353, col: 99, offset: 11818},
							expr: &ruleRefExpr{
								pos:  position{line: 353, col: 99, offset: 11818},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 353, col: 106, offset: 11825},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "VerseAttributes",
			pos:  position{line: 357, col: 1, offset: 11894},
			expr: &actionExpr{
				pos: position{line: 357, col: 20, offset: 11913},
				run: (*parser).callonVerseAttributes1,
				expr: &seqExpr{
					pos: position{line: 357, col: 20, offset: 11913},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 357, col: 20, offset: 11913},
							val:        "[verse",
							ignoreCase: false,
							want:       "\"[verse\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 357, col: 29, offset: 11922},
							expr: &ruleRefExpr{
								pos:  position{line: 357, col: 29, offset: 11922},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 357, col: 36, offset: 11929},
							expr: &litMatcher{
								pos:        position{line: 357, col: 36, offset: 11929},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 357, col: 41, offset: 11934},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 357, col: 48, offset: 11941},
								expr: &ruleRefExpr{
									pos:  position{line: 357, col: 49, offset: 11942},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 357, col: 66, offset: 11959},
							expr: &litMatcher{
								pos:        position{line: 357, col: 66, offset: 11959},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 357, col: 71, offset: 11964},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 357, col: 77, offset: 11970},
								expr: &ruleRefExpr{
									pos:  position{line: 357, col: 78, offset: 11971},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 357, col: 95, offset: 11988},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 357, col: 99, offset: 11992},
							expr: &ruleRefExpr{
								pos:  position{line: 357, col: 99, offset: 11992},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 357, col: 106, offset: 11999},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "QuoteAttribute",
			pos:  position{line: 361, col: 1, offset: 12086},
			expr: &actionExpr{
				pos: position{line: 361, col: 19, offset: 12104},
				run: (*parser).callonQuoteAttribute1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 361, col: 20, offset: 12105},
					expr: &charClassMatcher{
						pos:        position{line: 361, col: 20, offset: 12105},
						val:        "[^\\r\\n,\\]]",
						chars:      []rune{'\r', '\n', ',', ']'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "QuotedTextAttrs",
			pos:  position{line: 365, col: 1, offset: 12154},
			expr: &actionExpr{
				pos: position{line: 365, col: 20, offset: 12173},
				run: (*parser).callonQuotedTextAttrs1,
				expr: &seqExpr{
					pos: position{line: 365, col: 20, offset: 12173},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 365, col: 20, offset: 12173},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 365, col: 24, offset: 12177},
							label: "attrs",
							expr: &seqExpr{
								pos: position{line: 365, col: 31, offset: 12184},
								exprs: []interface{}{
									&zeroOrOneExpr{
										pos: position{line: 365, col: 31, offset: 12184},
										expr: &ruleRefExpr{
											pos:  position{line: 365, col: 31, offset: 12184},
											name: "QuotedTextAttrRole",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 365, col: 51, offset: 12204},
										expr: &ruleRefExpr{
											pos:  position{line: 365, col: 51, offset: 12204},
											name: "ShortHandAttr",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 365, col: 66, offset: 12219},
										expr: &ruleRefExpr{
											pos:  position{line: 365, col: 66, offset: 12219},
											name: "NamedAttr",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 365, col: 78, offset: 12231},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "QuotedTextAttrRole",
			pos:  position{line: 369, col: 1, offset: 12285},
			expr: &actionExpr{
				pos: position{line: 369, col: 23, offset: 12307},
				run: (*parser).callonQuotedTextAttrRole1,
				expr: &labeledExpr{
					pos:   position{line: 369, col: 23, offset: 12307},
					label: "role",
					expr: &ruleRefExpr{
						pos:  position{line: 369, col: 28, offset: 12312},
						name: "PositionalValue",
					},
				},
			},
		},
		{
			name: "StandaloneAttributes",
			pos:  position{line: 373, col: 1, offset: 12380},
			expr: &actionExpr{
				pos: position{line: 373, col: 25, offset: 12404},
				run: (*parser).callonStandaloneAttributes1,
				expr: &seqExpr{
					pos: position{line: 373, col: 25, offset: 12404},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 373, col: 25, offset: 12404},
							label: "attributes",
							expr: &oneOrMoreExpr{
								pos: position{line: 373, col: 36, offset: 12415},
								expr: &ruleRefExpr{
									pos:  position{line: 373, col: 37, offset: 12416},
									name: "ElementAttribute",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 373, col: 56, offset: 12435},
							expr: &ruleRefExpr{
								pos:  position{line: 373, col: 56, offset: 12435},
								name: "BlankLine",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 373, col: 67, offset: 12446},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttr",
			pos:  position{line: 377, col: 1, offset: 12554},
			expr: &choiceExpr{
				pos: position{line: 377, col: 18, offset: 12571},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 377, col: 18, offset: 12571},
						name: "ShortHandAttrID",
					},
					&ruleRefExpr{
						pos:  position{line: 377, col: 36, offset: 12589},
						name: "ShortHandAttrOption",
					},
					&ruleRefExpr{
						pos:  position{line: 377, col: 58, offset: 12611},
						name: "ShortHandAttrRole",
					},
				},
			},
		},
		{
			name: "ShortHandAttrOption",
			pos:  position{line: 379, col: 1, offset: 12630},
			expr: &actionExpr{
				pos: position{line: 379, col: 24, offset: 12653},
				run: (*parser).callonShortHandAttrOption1,
				expr: &seqExpr{
					pos: position{line: 379, col: 24, offset: 12653},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 379, col: 24, offset: 12653},
							val:        "%",
							ignoreCase: false,
							want:       "\"%\"",
						},
						&labeledExpr{
							pos:   position{line: 379, col: 28, offset: 12657},
							label: "option",
							expr: &ruleRefExpr{
								pos:  position{line: 379, col: 35, offset: 12664},
								name: "ShortHandValue",
							},
						},
						&andExpr{
							pos: position{line: 379, col: 50, offset: 12679},
							expr: &charClassMatcher{
								pos:        position{line: 379, col: 51, offset: 12680},
								val:        "[,#%.\\r\\n\\]]",
								chars:      []rune{',', '#', '%', '.', '\r', '\n', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttrID",
			pos:  position{line: 383, col: 1, offset: 12749},
			expr: &actionExpr{
				pos: position{line: 383, col: 20, offset: 12768},
				run: (*parser).callonShortHandAttrID1,
				expr: &seqExpr{
					pos: position{line: 383, col: 20, offset: 12768},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 383, col: 20, offset: 12768},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&labeledExpr{
							pos:   position{line: 383, col: 24, offset: 12772},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 383, col: 27, offset: 12775},
								name: "ShortHandValue",
							},
						},
						&andExpr{
							pos: position{line: 383, col: 42, offset: 12790},
							expr: &charClassMatcher{
								pos:        position{line: 383, col: 43, offset: 12791},
								val:        "[,#%.\\r\\n\\]]",
								chars:      []rune{',', '#', '%', '.', '\r', '\n', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttrRole",
			pos:  position{line: 387, col: 1, offset: 12852},
			expr: &actionExpr{
				pos: position{line: 387, col: 22, offset: 12873},
				run: (*parser).callonShortHandAttrRole1,
				expr: &seqExpr{
					pos: position{line: 387, col: 22, offset: 12873},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 387, col: 22, offset: 12873},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 387, col: 26, offset: 12877},
							label: "role",
							expr: &ruleRefExpr{
								pos:  position{line: 387, col: 31, offset: 12882},
								name: "ShortHandValue",
							},
						},
						&andExpr{
							pos: position{line: 387, col: 46, offset: 12897},
							expr: &charClassMatcher{
								pos:        position{line: 387, col: 47, offset: 12898},
								val:        "[,#%.\\r\\n\\]]",
								chars:      []rune{',', '#', '%', '.', '\r', '\n', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "PositionalValue",
			pos:  position{line: 392, col: 1, offset: 13007},
			expr: &actionExpr{
				pos: position{line: 392, col: 20, offset: 13026},
				run: (*parser).callonPositionalValue1,
				expr: &seqExpr{
					pos: position{line: 392, col: 20, offset: 13026},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 392, col: 20, offset: 13026},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 392, col: 26, offset: 13032},
								name: "ShortHandValue",
							},
						},
						&andExpr{
							pos: position{line: 392, col: 41, offset: 13047},
							expr: &charClassMatcher{
								pos:        position{line: 392, col: 42, offset: 13048},
								val:        "[,#%.\\]]",
								chars:      []rune{',', '#', '%', '.', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "InlineVal",
			pos:  position{line: 396, col: 1, offset: 13093},
			expr: &choiceExpr{
				pos: position{line: 396, col: 14, offset: 13106},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 396, col: 14, offset: 13106},
						name: "AttrEmpty",
					},
					&ruleRefExpr{
						pos:  position{line: 396, col: 26, offset: 13118},
						name: "AttrValSQ",
					},
					&ruleRefExpr{
						pos:  position{line: 396, col: 38, offset: 13130},
						name: "AttrValDQ",
					},
					&ruleRefExpr{
						pos:  position{line: 396, col: 50, offset: 13142},
						name: "AttrValPosFB",
					},
				},
			},
		},
		{
			name: "NamedAttrs",
			pos:  position{line: 398, col: 1, offset: 13156},
			expr: &actionExpr{
				pos: position{line: 398, col: 15, offset: 13170},
				run: (*parser).callonNamedAttrs1,
				expr: &labeledExpr{
					pos:   position{line: 398, col: 15, offset: 13170},
					label: "attrs",
					expr: &zeroOrMoreExpr{
						pos: position{line: 398, col: 21, offset: 13176},
						expr: &ruleRefExpr{
							pos:  position{line: 398, col: 21, offset: 13176},
							name: "NamedAttrPair",
						},
					},
				},
			},
		},
		{
			name: "NamedAttrPair",
			pos:  position{line: 402, col: 1, offset: 13241},
			expr: &actionExpr{
				pos: position{line: 402, col: 18, offset: 13258},
				run: (*parser).callonNamedAttrPair1,
				expr: &seqExpr{
					pos: position{line: 402, col: 18, offset: 13258},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 402, col: 18, offset: 13258},
							expr: &litMatcher{
								pos:        position{line: 402, col: 18, offset: 13258},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 402, col: 23, offset: 13263},
							expr: &ruleRefExpr{
								pos:  position{line: 402, col: 23, offset: 13263},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 402, col: 30, offset: 13270},
							label: "n",
							expr: &ruleRefExpr{
								pos:  position{line: 402, col: 32, offset: 13272},
								name: "NamedAttrKey",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 402, col: 45, offset: 13285},
							expr: &ruleRefExpr{
								pos:  position{line: 402, col: 45, offset: 13285},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 402, col: 52, offset: 13292},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&labeledExpr{
							pos:   position{line: 402, col: 56, offset: 13296},
							label: "v",
							expr: &choiceExpr{
								pos: position{line: 402, col: 59, offset: 13299},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 402, col: 59, offset: 13299},
										name: "AttrValDQ",
									},
									&ruleRefExpr{
										pos:  position{line: 402, col: 71, offset: 13311},
										name: "AttrValSQ",
									},
									&ruleRefExpr{
										pos:  position{line: 402, col: 83, offset: 13323},
										name: "AttrValNamedFB",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttrEmpty",
			pos:  position{line: 407, col: 1, offset: 13512},
			expr: &actionExpr{
				pos: position{line: 407, col: 14, offset: 13525},
				run: (*parser).callonAttrEmpty1,
				expr: &seqExpr{
					pos: position{line: 407, col: 14, offset: 13525},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 407, col: 14, offset: 13525},
							expr: &charClassMatcher{
								pos:        position{line: 407, col: 14, offset: 13525},
								val:        "[ \\t]",
								chars:      []rune{' ', '\t'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&andExpr{
							pos: position{line: 407, col: 21, offset: 13532},
							expr: &charClassMatcher{
								pos:        position{line: 407, col: 22, offset: 13533},
								val:        "[,\\]]",
								chars:      []rune{',', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttrValSQ",
			pos:  position{line: 413, col: 1, offset: 13669},
			expr: &actionExpr{
				pos: position{line: 413, col: 14, offset: 13682},
				run: (*parser).callonAttrValSQ1,
				expr: &seqExpr{
					pos: position{line: 413, col: 14, offset: 13682},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 413, col: 14, offset: 13682},
							expr: &ruleRefExpr{
								pos:  position{line: 413, col: 14, offset: 13682},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 413, col: 21, offset: 13689},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&labeledExpr{
							pos:   position{line: 413, col: 25, offset: 13693},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 413, col: 29, offset: 13697},
								name: "AttrValSQin",
							},
						},
						&litMatcher{
							pos:        position{line: 413, col: 41, offset: 13709},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 413, col: 45, offset: 13713},
							expr: &ruleRefExpr{
								pos:  position{line: 413, col: 45, offset: 13713},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 413, col: 52, offset: 13720},
							expr: &charClassMatcher{
								pos:        position{line: 413, col: 53, offset: 13721},
								val:        "[,\\]]",
								chars:      []rune{',', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttrValSQin",
			pos:  position{line: 415, col: 1, offset: 13748},
			expr: &actionExpr{
				pos: position{line: 415, col: 16, offset: 13763},
				run: (*parser).callonAttrValSQin1,
				expr: &labeledExpr{
					pos:   position{line: 415, col: 16, offset: 13763},
					label: "val",
					expr: &zeroOrMoreExpr{
						pos: position{line: 415, col: 20, offset: 13767},
						expr: &choiceExpr{
							pos: position{line: 415, col: 22, offset: 13769},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 415, col: 22, offset: 13769},
									name: "AttrValSQEsc",
								},
								&oneOrMoreExpr{
									pos: position{line: 415, col: 37, offset: 13784},
									expr: &charClassMatcher{
										pos:        position{line: 415, col: 37, offset: 13784},
										val:        "[^\\r\\n'\\\\]",
										chars:      []rune{'\r', '\n', '\'', '\\'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&litMatcher{
									pos:        position{line: 415, col: 51, offset: 13798},
									val:        "\\",
									ignoreCase: false,
									want:       "\"\\\\\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttrValSQEsc",
			pos:  position{line: 417, col: 1, offset: 13838},
			expr: &actionExpr{
				pos: position{line: 417, col: 17, offset: 13854},
				run: (*parser).callonAttrValSQEsc1,
				expr: &litMatcher{
					pos:        position{line: 417, col: 17, offset: 13854},
					val:        "\\'",
					ignoreCase: false,
					want:       "\"\\\\'\"",
				},
			},
		},
		{
			name: "AttrValDQ",
			pos:  position{line: 420, col: 1, offset: 13914},
			expr: &actionExpr{
				pos: position{line: 420, col: 14, offset: 13927},
				run: (*parser).callonAttrValDQ1,
				expr: &seqExpr{
					pos: position{line: 420, col: 14, offset: 13927},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 420, col: 14, offset: 13927},
							expr: &ruleRefExpr{
								pos:  position{line: 420, col: 14, offset: 13927},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 420, col: 21, offset: 13934},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 420, col: 25, offset: 13938},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 420, col: 29, offset: 13942},
								name: "AttrValDQin",
							},
						},
						&litMatcher{
							pos:        position{line: 420, col: 41, offset: 13954},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 420, col: 45, offset: 13958},
							expr: &ruleRefExpr{
								pos:  position{line: 420, col: 45, offset: 13958},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "AttrValDQin",
			pos:  position{line: 422, col: 1, offset: 13986},
			expr: &actionExpr{
				pos: position{line: 422, col: 16, offset: 14001},
				run: (*parser).callonAttrValDQin1,
				expr: &labeledExpr{
					pos:   position{line: 422, col: 16, offset: 14001},
					label: "val",
					expr: &zeroOrMoreExpr{
						pos: position{line: 422, col: 20, offset: 14005},
						expr: &choiceExpr{
							pos: position{line: 422, col: 22, offset: 14007},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 422, col: 22, offset: 14007},
									name: "AttrValDQEsc",
								},
								&oneOrMoreExpr{
									pos: position{line: 422, col: 37, offset: 14022},
									expr: &charClassMatcher{
										pos:        position{line: 422, col: 37, offset: 14022},
										val:        "[^\\r\\n\"\\\\]",
										chars:      []rune{'\r', '\n', '"', '\\'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&litMatcher{
									pos:        position{line: 422, col: 51, offset: 14036},
									val:        "\\",
									ignoreCase: false,
									want:       "\"\\\\\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttrValDQEsc",
			pos:  position{line: 424, col: 1, offset: 14076},
			expr: &actionExpr{
				pos: position{line: 424, col: 17, offset: 14092},
				run: (*parser).callonAttrValDQEsc1,
				expr: &litMatcher{
					pos:        position{line: 424, col: 17, offset: 14092},
					val:        "\\\"",
					ignoreCase: false,
					want:       "\"\\\\\\\"\"",
				},
			},
		},
		{
			name: "AttrValPosFB",
			pos:  position{line: 427, col: 1, offset: 14183},
			expr: &actionExpr{
				pos: position{line: 427, col: 17, offset: 14199},
				run: (*parser).callonAttrValPosFB1,
				expr: &seqExpr{
					pos: position{line: 427, col: 17, offset: 14199},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 427, col: 17, offset: 14199},
							expr: &charClassMatcher{
								pos:        position{line: 427, col: 17, offset: 14199},
								val:        "[^,=\\r\\n\\]]",
								chars:      []rune{',', '=', '\r', '\n', ']'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&andExpr{
							pos: position{line: 427, col: 30, offset: 14212},
							expr: &charClassMatcher{
								pos:        position{line: 427, col: 31, offset: 14213},
								val:        "[,\\]]",
								chars:      []rune{',', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttrValNamedFB",
			pos:  position{line: 430, col: 1, offset: 14324},
			expr: &actionExpr{
				pos: position{line: 430, col: 19, offset: 14342},
				run: (*parser).callonAttrValNamedFB1,
				expr: &seqExpr{
					pos: position{line: 430, col: 19, offset: 14342},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 430, col: 19, offset: 14342},
							expr: &charClassMatcher{
								pos:        position{line: 430, col: 19, offset: 14342},
								val:        "[^,\\r\\n\\]]",
								chars:      []rune{',', '\r', '\n', ']'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&andExpr{
							pos: position{line: 430, col: 31, offset: 14354},
							expr: &charClassMatcher{
								pos:        position{line: 430, col: 32, offset: 14355},
								val:        "[,\\]]",
								chars:      []rune{',', ']'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandValue",
			pos:  position{line: 432, col: 1, offset: 14412},
			expr: &choiceExpr{
				pos: position{line: 432, col: 19, offset: 14430},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 432, col: 19, offset: 14430},
						name: "ShortHandValuePlain",
					},
					&ruleRefExpr{
						pos:  position{line: 432, col: 41, offset: 14452},
						name: "AttrValueSingleQuoted",
					},
					&ruleRefExpr{
						pos:  position{line: 432, col: 65, offset: 14476},
						name: "AttrValueDoubleQuoted",
					},
				},
			},
		},
		{
			name: "ShortHandValuePlain",
			pos:  position{line: 436, col: 1, offset: 14674},
			expr: &actionExpr{
				pos: position{line: 436, col: 24, offset: 14697},
				run: (*parser).callonShortHandValuePlain1,
				expr: &seqExpr{
					pos: position{line: 436, col: 24, offset: 14697},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 436, col: 24, offset: 14697},
							val:        "[^,\\r\\n\"' \\t.#%=\\]]",
							chars:      []rune{',', '\r', '\n', '"', '\'', ' ', '\t', '.', '#', '%', '=', ']'},
							ignoreCase: false,
							inverted:   true,
						},
						&zeroOrMoreExpr{
							pos: position{line: 436, col: 45, offset: 14718},
							expr: &choiceExpr{
								pos: position{line: 436, col: 46, offset: 14719},
								alternatives: []interface{}{
									&charClassMatcher{
										pos:        position{line: 436, col: 46, offset: 14719},
										val:        "[^ \\t,\\r\\n\"'.#%=\\]]",
										chars:      []rune{' ', '\t', ',', '\r', '\n', '"', '\'', '.', '#', '%', '=', ']'},
										ignoreCase: false,
										inverted:   true,
									},
									&seqExpr{
										pos: position{line: 436, col: 68, offset: 14741},
										exprs: []interface{}{
											&charClassMatcher{
												pos:        position{line: 436, col: 68, offset: 14741},
												val:        "[ \\t]",
												chars:      []rune{' ', '\t'},
												ignoreCase: false,
												inverted:   false,
											},
											&charClassMatcher{
												pos:        position{line: 436, col: 73, offset: 14746},
												val:        "[^ \\t,\\r\\n\"'.#%=\\]]",
												chars:      []rune{' ', '\t', ',', '\r', '\n', '"', '\'', '.', '#', '%', '=', ']'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttr",
			pos:  position{line: 440, col: 1, offset: 14804},
			expr: &actionExpr{
				pos: position{line: 440, col: 13, offset: 14816},
				run: (*parser).callonNamedAttr1,
				expr: &seqExpr{
					pos: position{line: 440, col: 13, offset: 14816},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 440, col: 13, offset: 14816},
							expr: &seqExpr{
								pos: position{line: 440, col: 15, offset: 14818},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 440, col: 15, offset: 14818},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 440, col: 19, offset: 14822},
										expr: &ruleRefExpr{
											pos:  position{line: 440, col: 19, offset: 14822},
											name: "Space",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 440, col: 29, offset: 14832},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 440, col: 33, offset: 14836},
								name: "NamedAttrKey",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 440, col: 46, offset: 14849},
							expr: &ruleRefExpr{
								pos:  position{line: 440, col: 46, offset: 14849},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 440, col: 53, offset: 14856},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 440, col: 57, offset: 14860},
							expr: &ruleRefExpr{
								pos:  position{line: 440, col: 57, offset: 14860},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 440, col: 64, offset: 14867},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 440, col: 70, offset: 14873},
								name: "NamedAttrValue",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 440, col: 85, offset: 14888},
							expr: &ruleRefExpr{
								pos:  position{line: 440, col: 85, offset: 14888},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttrKey",
			pos:  position{line: 445, col: 1, offset: 15078},
			expr: &actionExpr{
				pos: position{line: 445, col: 17, offset: 15094},
				run: (*parser).callonNamedAttrKey1,
				expr: &seqExpr{
					pos: position{line: 445, col: 17, offset: 15094},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 445, col: 17, offset: 15094},
							val:        "[\\pL0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 445, col: 26, offset: 15103},
							expr: &charClassMatcher{
								pos:        position{line: 445, col: 26, offset: 15103},
								val:        "[\\pL0-9_-]",
								chars:      []rune{'_', '-'},
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttrValue",
			pos:  position{line: 449, col: 1, offset: 15151},
			expr: &choiceExpr{
				pos: position{line: 449, col: 19, offset: 15169},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 449, col: 19, offset: 15169},
						name: "AttrValueNone",
					},
					&ruleRefExpr{
						pos:  position{line: 449, col: 35, offset: 15185},
						name: "AttrValueSingleQuoted",
					},
					&ruleRefExpr{
						pos:  position{line: 449, col: 59, offset: 15209},
						name: "AttrValueDoubleQuoted",
					},
					&ruleRefExpr{
						pos:  position{line: 449, col: 83, offset: 15233},
						name: "AttrValuePlain",
					},
				},
			},
		},
		{
			name: "AttrValuePlain",
			pos:  position{line: 451, col: 1, offset: 15249},
			expr: &actionExpr{
				pos: position{line: 451, col: 19, offset: 15267},
				run: (*parser).callonAttrValuePlain1,
				expr: &oneOrMoreExpr{
					pos: position{line: 451, col: 19, offset: 15267},
					expr: &charClassMatcher{
						pos:        position{line: 451, col: 19, offset: 15267},
						val:        "[^,\\r\\n\"' \\t\\]]",
						chars:      []rune{',', '\r', '\n', '"', '\'', ' ', '\t', ']'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "AttrValueSingleQuoted",
			pos:  position{line: 455, col: 1, offset: 15320},
			expr: &actionExpr{
				pos: position{line: 455, col: 26, offset: 15345},
				run: (*parser).callonAttrValueSingleQuoted1,
				expr: &seqExpr{
					pos: position{line: 455, col: 26, offset: 15345},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 455, col: 26, offset: 15345},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 455, col: 30, offset: 15349},
							expr: &charClassMatcher{
								pos:        position{line: 455, col: 30, offset: 15349},
								val:        "[^'\\r\\n]",
								chars:      []rune{'\'', '\r', '\n'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&litMatcher{
							pos:        position{line: 455, col: 40, offset: 15359},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
					},
				},
			},
		},
		{
			name: "AttrValueDoubleQuoted",
			pos:  position{line: 459, col: 1, offset: 15416},
			expr: &actionExpr{
				pos: position{line: 459, col: 26, offset: 15441},
				run: (*parser).callonAttrValueDoubleQuoted1,
				expr: &seqExpr{
					pos: position{line: 459, col: 26, offset: 15441},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 459, col: 26, offset: 15441},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 459, col: 31, offset: 15446},
							expr: &charClassMatcher{
								pos:        position{line: 459, col: 31, offset: 15446},
								val:        "[^\"\\r\\n]",
								chars:      []rune{'"', '\r', '\n'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&litMatcher{
							pos:        position{line: 459, col: 41, offset: 15456},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "AttrValueNone",
			pos:  position{line: 465, col: 1, offset: 15711},
			expr: &actionExpr{
				pos: position{line: 465, col: 18, offset: 15728},
				run: (*parser).callonAttrValueNone1,
				expr: &litMatcher{
					pos:        position{line: 465, col: 18, offset: 15728},
					val:        "None",
					ignoreCase: false,
					want:       "\"None\"",
				},
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 473, col: 1, offset: 15910},
			expr: &choiceExpr{
				pos: position{line: 473, col: 17, offset: 15926},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 473, col: 17, offset: 15926},
						name: "SingleQuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 473, col: 38, offset: 15947},
						name: "DoubleQuotedString",
					},
				},
			},
		},
		{
			name: "SingleQuotedString",
			pos:  position{line: 475, col: 1, offset: 15967},
			expr: &actionExpr{
				pos: position{line: 475, col: 23, offset: 15989},
				run: (*parser).callonSingleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 475, col: 23, offset: 15989},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 475, col: 23, offset: 15989},
							name: "SingleQuoteStringStart",
						},
						&labeledExpr{
							pos:   position{line: 475, col: 46, offset: 16012},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 475, col: 55, offset: 16021},
								name: "SingleQuotedStringElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 475, col: 82, offset: 16048},
							name: "SingleQuoteStringEnd",
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringElements",
			pos:  position{line: 479, col: 1, offset: 16152},
			expr: &actionExpr{
				pos: position{line: 479, col: 31, offset: 16182},
				run: (*parser).callonSingleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 479, col: 31, offset: 16182},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 479, col: 41, offset: 16192},
						expr: &ruleRefExpr{
							pos:  position{line: 479, col: 41, offset: 16192},
							name: "SingleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteStringStart",
			pos:  position{line: 483, col: 1, offset: 16270},
			expr: &seqExpr{
				pos: position{line: 483, col: 27, offset: 16296},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 483, col: 27, offset: 16296},
						val:        "'`",
						ignoreCase: false,
						want:       "\"'`\"",
					},
					&notExpr{
						pos: position{line: 483, col: 32, offset: 16301},
						expr: &charClassMatcher{
							pos:        position{line: 483, col: 33, offset: 16302},
							val:        "[ \\t\\r\\n]",
							chars:      []rune{' ', '\t', '\r', '\n'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteStringEnd",
			pos:  position{line: 485, col: 1, offset: 16313},
			expr: &litMatcher{
				pos:        position{line: 485, col: 25, offset: 16337},
				val:        "`'",
				ignoreCase: false,
				want:       "\"`'\"",
			},
		},
		{
			name: "SingleQuotedStringElement",
			pos:  position{line: 488, col: 1, offset: 16425},
			expr: &actionExpr{
				pos: position{line: 488, col: 30, offset: 16454},
				run: (*parser).callonSingleQuotedStringElement1,
				expr: &labeledExpr{
					pos:   position{line: 488, col: 30, offset: 16454},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 489, col: 9, offset: 16472},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 489, col: 9, offset: 16472},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 489, col: 9, offset: 16472},
										name: "LineBreak",
									},
									&notExpr{
										pos: position{line: 489, col: 19, offset: 16482},
										expr: &ruleRefExpr{
											pos:  position{line: 489, col: 20, offset: 16483},
											name: "SingleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 490, col: 11, offset: 16539},
								exprs: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 490, col: 11, offset: 16539},
										expr: &ruleRefExpr{
											pos:  position{line: 490, col: 11, offset: 16539},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 490, col: 18, offset: 16546},
										expr: &ruleRefExpr{
											pos:  position{line: 490, col: 19, offset: 16547},
											name: "SingleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 491, col: 11, offset: 16578},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 491, col: 11, offset: 16578},
										expr: &litMatcher{
											pos:        position{line: 491, col: 12, offset: 16579},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 491, col: 16, offset: 16583},
										name: "Symbol",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 492, col: 11, offset: 16631},
								name: "InlineIcon",
							},
							&ruleRefExpr{
								pos:  position{line: 493, col: 11, offset: 16652},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 494, col: 11, offset: 16674},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 495, col: 11, offset: 16699},
								name: "InlinePassthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 496, col: 11, offset: 16788},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 497, col: 11, offset: 16803},
								name: "AttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 498, col: 11, offset: 16835},
								name: "BoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 499, col: 11, offset: 16854},
								name: "ItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 500, col: 11, offset: 16875},
								name: "MarkedText",
							},
							&ruleRefExpr{
								pos:  position{line: 501, col: 11, offset: 16896},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 502, col: 11, offset: 16920},
								name: "SuperscriptText",
							},
							&seqExpr{
								pos: position{line: 503, col: 11, offset: 16946},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 503, col: 11, offset: 16946},
										expr: &litMatcher{
											pos:        position{line: 503, col: 12, offset: 16947},
											val:        "`'",
											ignoreCase: false,
											want:       "\"`'\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 503, col: 17, offset: 16952},
										name: "MonospaceText",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 504, col: 11, offset: 16976},
								name: "DoubleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 505, col: 11, offset: 17005},
								name: "ImpliedApostrophe",
							},
							&ruleRefExpr{
								pos:  position{line: 506, col: 11, offset: 17033},
								name: "SpecialCharacter",
							},
							&ruleRefExpr{
								pos:  position{line: 507, col: 11, offset: 17060},
								name: "SingleQuotedStringFallbackCharacter",
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringFallbackCharacter",
			pos:  position{line: 511, col: 1, offset: 17126},
			expr: &choiceExpr{
				pos: position{line: 511, col: 41, offset: 17166},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 511, col: 41, offset: 17166},
						val:        "[^\\r\\n\\t `]",
						chars:      []rune{'\r', '\n', '\t', ' ', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 511, col: 55, offset: 17180},
						run: (*parser).callonSingleQuotedStringFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 511, col: 55, offset: 17180},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 511, col: 55, offset: 17180},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&notExpr{
									pos: position{line: 511, col: 59, offset: 17184},
									expr: &litMatcher{
										pos:        position{line: 511, col: 60, offset: 17185},
										val:        "'",
										ignoreCase: false,
										want:       "\"'\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedString",
			pos:  position{line: 515, col: 1, offset: 17244},
			expr: &actionExpr{
				pos: position{line: 515, col: 23, offset: 17266},
				run: (*parser).callonDoubleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 515, col: 23, offset: 17266},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 515, col: 23, offset: 17266},
							name: "DoubleQuoteStringStart",
						},
						&labeledExpr{
							pos:   position{line: 515, col: 46, offset: 17289},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 515, col: 55, offset: 17298},
								name: "DoubleQuotedStringElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 515, col: 82, offset: 17325},
							name: "DoubleQuoteStringEnd",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElements",
			pos:  position{line: 519, col: 1, offset: 17429},
			expr: &actionExpr{
				pos: position{line: 519, col: 31, offset: 17459},
				run: (*parser).callonDoubleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 519, col: 31, offset: 17459},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 519, col: 41, offset: 17469},
						expr: &ruleRefExpr{
							pos:  position{line: 519, col: 41, offset: 17469},
							name: "DoubleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElement",
			pos:  position{line: 524, col: 1, offset: 17629},
			expr: &actionExpr{
				pos: position{line: 524, col: 30, offset: 17658},
				run: (*parser).callonDoubleQuotedStringElement1,
				expr: &labeledExpr{
					pos:   position{line: 524, col: 30, offset: 17658},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 525, col: 9, offset: 17676},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 525, col: 9, offset: 17676},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 525, col: 9, offset: 17676},
										name: "LineBreak",
									},
									&notExpr{
										pos: position{line: 525, col: 19, offset: 17686},
										expr: &ruleRefExpr{
											pos:  position{line: 525, col: 20, offset: 17687},
											name: "DoubleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 526, col: 11, offset: 17743},
								exprs: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 526, col: 11, offset: 17743},
										expr: &ruleRefExpr{
											pos:  position{line: 526, col: 11, offset: 17743},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 526, col: 18, offset: 17750},
										expr: &ruleRefExpr{
											pos:  position{line: 526, col: 19, offset: 17751},
											name: "DoubleQuoteStringEnd",
										},
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 527, col: 11, offset: 17782},
								name: "InlineIcon",
							},
							&ruleRefExpr{
								pos:  position{line: 528, col: 11, offset: 17803},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 529, col: 11, offset: 17825},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 530, col: 11, offset: 17850},
								name: "InlinePassthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 531, col: 11, offset: 17939},
								name: "Symbol",
							},
							&ruleRefExpr{
								pos:  position{line: 532, col: 11, offset: 17956},
								name: "SpecialCharacter",
							},
							&ruleRefExpr{
								pos:  position{line: 533, col: 11, offset: 17983},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 534, col: 11, offset: 17998},
								name: "AttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 535, col: 11, offset: 18030},
								name: "BoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 536, col: 11, offset: 18049},
								name: "ItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 537, col: 11, offset: 18070},
								name: "MarkedText",
							},
							&ruleRefExpr{
								pos:  position{line: 538, col: 11, offset: 18091},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 539, col: 11, offset: 18115},
								name: "SuperscriptText",
							},
							&seqExpr{
								pos: position{line: 540, col: 11, offset: 18141},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 540, col: 11, offset: 18141},
										expr: &litMatcher{
											pos:        position{line: 540, col: 12, offset: 18142},
											val:        "`\"",
											ignoreCase: false,
											want:       "\"`\\\"\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 540, col: 18, offset: 18148},
										name: "MonospaceText",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 541, col: 11, offset: 18172},
								name: "SingleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 542, col: 11, offset: 18201},
								name: "ImpliedApostrophe",
							},
							&ruleRefExpr{
								pos:  position{line: 543, col: 11, offset: 18229},
								name: "DoubleQuotedStringFallbackCharacter",
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteStringStart",
			pos:  position{line: 547, col: 1, offset: 18303},
			expr: &seqExpr{
				pos: position{line: 547, col: 27, offset: 18329},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 547, col: 27, offset: 18329},
						val:        "\"`",
						ignoreCase: false,
						want:       "\"\\\"`\"",
					},
					&notExpr{
						pos: position{line: 547, col: 33, offset: 18335},
						expr: &charClassMatcher{
							pos:        position{line: 547, col: 34, offset: 18336},
							val:        "[ \\t\\r\\n]",
							chars:      []rune{' ', '\t', '\r', '\n'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteStringEnd",
			pos:  position{line: 549, col: 1, offset: 18347},
			expr: &litMatcher{
				pos:        position{line: 549, col: 25, offset: 18371},
				val:        "`\"",
				ignoreCase: false,
				want:       "\"`\\\"\"",
			},
		},
		{
			name: "DoubleQuotedStringFallbackCharacter",
			pos:  position{line: 551, col: 1, offset: 18378},
			expr: &actionExpr{
				pos: position{line: 551, col: 41, offset: 18418},
				run: (*parser).callonDoubleQuotedStringFallbackCharacter1,
				expr: &choiceExpr{
					pos: position{line: 551, col: 42, offset: 18419},
					alternatives: []interface{}{
						&charClassMatcher{
							pos:        position{line: 551, col: 42, offset: 18419},
							val:        "[^\\r\\n\\t `]",
							chars:      []rune{'\r', '\n', '\t', ' ', '`'},
							ignoreCase: false,
							inverted:   true,
						},
						&seqExpr{
							pos: position{line: 551, col: 56, offset: 18433},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 551, col: 56, offset: 18433},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&notExpr{
									pos: position{line: 551, col: 60, offset: 18437},
									expr: &litMatcher{
										pos:        position{line: 551, col: 61, offset: 18438},
										val:        "\"",
										ignoreCase: false,
										want:       "\"\\\"\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Section",
			pos:  position{line: 558, col: 1, offset: 18603},
			expr: &actionExpr{
				pos: position{line: 558, col: 12, offset: 18614},
				run: (*parser).callonSection1,
				expr: &seqExpr{
					pos: position{line: 558, col: 12, offset: 18614},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 558, col: 12, offset: 18614},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 558, col: 23, offset: 18625},
								expr: &ruleRefExpr{
									pos:  position{line: 558, col: 24, offset: 18626},
									name: "BlockAttrs",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 559, col: 5, offset: 18643},
							label: "level",
							expr: &actionExpr{
								pos: position{line: 559, col: 12, offset: 18650},
								run: (*parser).callonSection7,
								expr: &oneOrMoreExpr{
									pos: position{line: 559, col: 12, offset: 18650},
									expr: &litMatcher{
										pos:        position{line: 559, col: 13, offset: 18651},
										val:        "=",
										ignoreCase: false,
										want:       "\"=\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 563, col: 5, offset: 18742},
							run: (*parser).callonSection10,
						},
						&oneOrMoreExpr{
							pos: position{line: 567, col: 5, offset: 18894},
							expr: &ruleRefExpr{
								pos:  position{line: 567, col: 5, offset: 18894},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 567, col: 12, offset: 18901},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 567, col: 19, offset: 18908},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 567, col: 34, offset: 18923},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 567, col: 38, offset: 18927},
								expr: &ruleRefExpr{
									pos:  position{line: 567, col: 38, offset: 18927},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 567, col: 56, offset: 18945},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "TitleElements",
			pos:  position{line: 571, col: 1, offset: 19051},
			expr: &actionExpr{
				pos: position{line: 571, col: 18, offset: 19068},
				run: (*parser).callonTitleElements1,
				expr: &labeledExpr{
					pos:   position{line: 571, col: 18, offset: 19068},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 571, col: 27, offset: 19077},
						expr: &seqExpr{
							pos: position{line: 571, col: 28, offset: 19078},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 571, col: 28, offset: 19078},
									expr: &ruleRefExpr{
										pos:  position{line: 571, col: 29, offset: 19079},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 571, col: 37, offset: 19087},
									expr: &ruleRefExpr{
										pos:  position{line: 571, col: 38, offset: 19088},
										name: "InlineElementID",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 571, col: 54, offset: 19104},
									name: "TitleElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TitleElement",
			pos:  position{line: 575, col: 1, offset: 19225},
			expr: &actionExpr{
				pos: position{line: 575, col: 17, offset: 19241},
				run: (*parser).callonTitleElement1,
				expr: &labeledExpr{
					pos:   position{line: 575, col: 17, offset: 19241},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 575, col: 26, offset: 19250},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 575, col: 26, offset: 19250},
								name: "Word",
							},
							&ruleRefExpr{
								pos:  position{line: 576, col: 11, offset: 19265},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 577, col: 11, offset: 19310},
								expr: &ruleRefExpr{
									pos:  position{line: 577, col: 11, offset: 19310},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 578, col: 11, offset: 19328},
								name: "CrossReference",
							},
							&ruleRefExpr{
								pos:  position{line: 579, col: 11, offset: 19397},
								name: "InlinePassthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 580, col: 11, offset: 19486},
								name: "InlineIcon",
							},
							&ruleRefExpr{
								pos:  position{line: 581, col: 11, offset: 19507},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 582, col: 11, offset: 19529},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 583, col: 11, offset: 19544},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 584, col: 11, offset: 19569},
								name: "QuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 585, col: 11, offset: 19592},
								name: "QuotedText",
							},
							&ruleRefExpr{
								pos:  position{line: 586, col: 11, offset: 19613},
								name: "SpecialCharacter",
							},
							&ruleRefExpr{
								pos:  position{line: 587, col: 11, offset: 19640},
								name: "Symbol",
							},
							&ruleRefExpr{
								pos:  position{line: 588, col: 11, offset: 19657},
								name: "AttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 589, col: 11, offset: 19689},
								name: "ImpliedApostrophe",
							},
							&ruleRefExpr{
								pos:  position{line: 590, col: 11, offset: 19717},
								name: "AnyChar",
							},
						},
					},
				},
			},
		},
		{
			name: "TableOfContentsPlaceHolder",
			pos:  position{line: 597, col: 1, offset: 19868},
			expr: &seqExpr{
				pos: position{line: 597, col: 31, offset: 19898},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 597, col: 31, offset: 19898},
						val:        "toc::[]",
						ignoreCase: false,
						want:       "\"toc::[]\"",
					},
					&ruleRefExpr{
						pos:  position{line: 597, col: 41, offset: 19908},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "UserMacroBlock",
			pos:  position{line: 602, col: 1, offset: 20019},
			expr: &actionExpr{
				pos: position{line: 602, col: 19, offset: 20037},
				run: (*parser).callonUserMacroBlock1,
				expr: &seqExpr{
					pos: position{line: 602, col: 19, offset: 20037},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 602, col: 19, offset: 20037},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 602, col: 25, offset: 20043},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 602, col: 40, offset: 20058},
							val:        "::",
							ignoreCase: false,
							want:       "\"::\"",
						},
						&labeledExpr{
							pos:   position{line: 602, col: 45, offset: 20063},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 602, col: 52, offset: 20070},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 602, col: 68, offset: 20086},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 602, col: 75, offset: 20093},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineUserMacro",
			pos:  position{line: 606, col: 1, offset: 20208},
			expr: &actionExpr{
				pos: position{line: 606, col: 20, offset: 20227},
				run: (*parser).callonInlineUserMacro1,
				expr: &seqExpr{
					pos: position{line: 606, col: 20, offset: 20227},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 606, col: 20, offset: 20227},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 606, col: 26, offset: 20233},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 606, col: 41, offset: 20248},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 606, col: 45, offset: 20252},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 606, col: 52, offset: 20259},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 606, col: 68, offset: 20275},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 606, col: 75, offset: 20282},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroName",
			pos:  position{line: 610, col: 1, offset: 20398},
			expr: &actionExpr{
				pos: position{line: 610, col: 18, offset: 20415},
				run: (*parser).callonUserMacroName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 610, col: 19, offset: 20416},
					expr: &charClassMatcher{
						pos:        position{line: 610, col: 19, offset: 20416},
						val:        "[\\pL0-9_-]",
						chars:      []rune{'_', '-'},
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "UserMacroValue",
			pos:  position{line: 614, col: 1, offset: 20465},
			expr: &actionExpr{
				pos: position{line: 614, col: 19, offset: 20483},
				run: (*parser).callonUserMacroValue1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 614, col: 19, offset: 20483},
					expr: &charClassMatcher{
						pos:        position{line: 614, col: 19, offset: 20483},
						val:        "[^:[ \\r\\n]",
						chars:      []rune{':', '[', ' ', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "UserMacroAttributes",
			pos:  position{line: 618, col: 1, offset: 20531},
			expr: &actionExpr{
				pos: position{line: 618, col: 24, offset: 20554},
				run: (*parser).callonUserMacroAttributes1,
				expr: &seqExpr{
					pos: position{line: 618, col: 24, offset: 20554},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 618, col: 24, offset: 20554},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 618, col: 28, offset: 20558},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 618, col: 34, offset: 20564},
								expr: &ruleRefExpr{
									pos:  position{line: 618, col: 35, offset: 20565},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 618, col: 54, offset: 20584},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FileInclusion",
			pos:  position{line: 625, col: 1, offset: 20766},
			expr: &actionExpr{
				pos: position{line: 625, col: 18, offset: 20783},
				run: (*parser).callonFileInclusion1,
				expr: &seqExpr{
					pos: position{line: 625, col: 18, offset: 20783},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 625, col: 18, offset: 20783},
							label: "incl",
							expr: &actionExpr{
								pos: position{line: 625, col: 24, offset: 20789},
								run: (*parser).callonFileInclusion4,
								expr: &seqExpr{
									pos: position{line: 625, col: 24, offset: 20789},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 625, col: 24, offset: 20789},
											val:        "include::",
											ignoreCase: false,
											want:       "\"include::\"",
										},
										&labeledExpr{
											pos:   position{line: 625, col: 36, offset: 20801},
											label: "path",
											expr: &ruleRefExpr{
												pos:  position{line: 625, col: 42, offset: 20807},
												name: "FileLocation",
											},
										},
										&labeledExpr{
											pos:   position{line: 625, col: 56, offset: 20821},
											label: "inlineAttributes",
											expr: &ruleRefExpr{
												pos:  position{line: 625, col: 74, offset: 20839},
												name: "FileIncludeAttributes",
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 627, col: 8, offset: 20986},
							expr: &ruleRefExpr{
								pos:  position{line: 627, col: 8, offset: 20986},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 627, col: 15, offset: 20993},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "FileIncludeAttributes",
			pos:  position{line: 631, col: 1, offset: 21045},
			expr: &actionExpr{
				pos: position{line: 631, col: 26, offset: 21070},
				run: (*parser).callonFileIncludeAttributes1,
				expr: &seqExpr{
					pos: position{line: 631, col: 26, offset: 21070},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 631, col: 26, offset: 21070},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 631, col: 30, offset: 21074},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 631, col: 36, offset: 21080},
								expr: &choiceExpr{
									pos: position{line: 631, col: 37, offset: 21081},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 631, col: 37, offset: 21081},
											name: "LineRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 631, col: 59, offset: 21103},
											name: "TagRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 631, col: 80, offset: 21124},
											name: "GenericAttribute",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 631, col: 99, offset: 21143},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttribute",
			pos:  position{line: 635, col: 1, offset: 21215},
			expr: &actionExpr{
				pos: position{line: 635, col: 24, offset: 21238},
				run: (*parser).callonLineRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 635, col: 24, offset: 21238},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 635, col: 24, offset: 21238},
							val:        "lines=",
							ignoreCase: false,
							want:       "\"lines=\"",
						},
						&labeledExpr{
							pos:   position{line: 635, col: 33, offset: 21247},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 635, col: 40, offset: 21254},
								name: "LineRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 635, col: 66, offset: 21280},
							expr: &litMatcher{
								pos:        position{line: 635, col: 66, offset: 21280},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttributeValue",
			pos:  position{line: 639, col: 1, offset: 21339},
			expr: &actionExpr{
				pos: position{line: 639, col: 29, offset: 21367},
				run: (*parser).callonLineRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 639, col: 29, offset: 21367},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 639, col: 29, offset: 21367},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 639, col: 36, offset: 21374},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 639, col: 36, offset: 21374},
										name: "MultipleLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 640, col: 11, offset: 21491},
										name: "MultipleQuotedLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 641, col: 11, offset: 21527},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 642, col: 11, offset: 21553},
										name: "MultiLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 643, col: 11, offset: 21585},
										name: "SingleLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 644, col: 11, offset: 21617},
										name: "SingleLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 645, col: 11, offset: 21644},
										name: "UndefinedLineRange",
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 645, col: 31, offset: 21664},
							expr: &ruleRefExpr{
								pos:  position{line: 645, col: 31, offset: 21664},
								name: "Space",
							},
						},
						&choiceExpr{
							pos: position{line: 645, col: 39, offset: 21672},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 645, col: 39, offset: 21672},
									expr: &litMatcher{
										pos:        position{line: 645, col: 40, offset: 21673},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
								&andExpr{
									pos: position{line: 645, col: 46, offset: 21679},
									expr: &litMatcher{
										pos:        position{line: 645, col: 47, offset: 21680},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleLineRanges",
			pos:  position{line: 649, col: 1, offset: 21712},
			expr: &actionExpr{
				pos: position{line: 649, col: 23, offset: 21734},
				run: (*parser).callonMultipleLineRanges1,
				expr: &seqExpr{
					pos: position{line: 649, col: 23, offset: 21734},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 649, col: 23, offset: 21734},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 649, col: 30, offset: 21741},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 649, col: 30, offset: 21741},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 649, col: 47, offset: 21758},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 650, col: 5, offset: 21780},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 650, col: 12, offset: 21787},
								expr: &actionExpr{
									pos: position{line: 650, col: 13, offset: 21788},
									run: (*parser).callonMultipleLineRanges9,
									expr: &seqExpr{
										pos: position{line: 650, col: 13, offset: 21788},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 650, col: 13, offset: 21788},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&labeledExpr{
												pos:   position{line: 650, col: 17, offset: 21792},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 650, col: 24, offset: 21799},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 650, col: 24, offset: 21799},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 650, col: 41, offset: 21816},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleQuotedLineRanges",
			pos:  position{line: 656, col: 1, offset: 21954},
			expr: &actionExpr{
				pos: position{line: 656, col: 29, offset: 21982},
				run: (*parser).callonMultipleQuotedLineRanges1,
				expr: &seqExpr{
					pos: position{line: 656, col: 29, offset: 21982},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 656, col: 29, offset: 21982},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 656, col: 34, offset: 21987},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 656, col: 41, offset: 21994},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 656, col: 41, offset: 21994},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 656, col: 58, offset: 22011},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 657, col: 5, offset: 22033},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 657, col: 12, offset: 22040},
								expr: &actionExpr{
									pos: position{line: 657, col: 13, offset: 22041},
									run: (*parser).callonMultipleQuotedLineRanges10,
									expr: &seqExpr{
										pos: position{line: 657, col: 13, offset: 22041},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 657, col: 13, offset: 22041},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 657, col: 17, offset: 22045},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 657, col: 24, offset: 22052},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 657, col: 24, offset: 22052},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 657, col: 41, offset: 22069},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 659, col: 9, offset: 22122},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "MultiLineRange",
			pos:  position{line: 663, col: 1, offset: 22212},
			expr: &actionExpr{
				pos: position{line: 663, col: 19, offset: 22230},
				run: (*parser).callonMultiLineRange1,
				expr: &seqExpr{
					pos: position{line: 663, col: 19, offset: 22230},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 663, col: 19, offset: 22230},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 663, col: 26, offset: 22237},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 663, col: 34, offset: 22245},
							val:        "..",
							ignoreCase: false,
							want:       "\"..\"",
						},
						&labeledExpr{
							pos:   position{line: 663, col: 39, offset: 22250},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 663, col: 44, offset: 22255},
								name: "NUMBER",
							},
						},
					},
				},
			},
		},
		{
			name: "MultiLineQuotedRange",
			pos:  position{line: 667, col: 1, offset: 22343},
			expr: &actionExpr{
				pos: position{line: 667, col: 25, offset: 22367},
				run: (*parser).callonMultiLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 667, col: 25, offset: 22367},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 667, col: 25, offset: 22367},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 667, col: 30, offset: 22372},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 667, col: 37, offset: 22379},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 667, col: 45, offset: 22387},
							val:        "..",
							ignoreCase: false,
							want:       "\"..\"",
						},
						&labeledExpr{
							pos:   position{line: 667, col: 50, offset: 22392},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 667, col: 55, offset: 22397},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 667, col: 63, offset: 22405},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "SingleLineRange",
			pos:  position{line: 671, col: 1, offset: 22490},
			expr: &actionExpr{
				pos: position{line: 671, col: 20, offset: 22509},
				run: (*parser).callonSingleLineRange1,
				expr: &labeledExpr{
					pos:   position{line: 671, col: 20, offset: 22509},
					label: "singleline",
					expr: &ruleRefExpr{
						pos:  position{line: 671, col: 32, offset: 22521},
						name: "NUMBER",
					},
				},
			},
		},
		{
			name: "SingleLineQuotedRange",
			pos:  position{line: 675, col: 1, offset: 22616},
			expr: &actionExpr{
				pos: position{line: 675, col: 26, offset: 22641},
				run: (*parser).callonSingleLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 675, col: 26, offset: 22641},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 675, col: 26, offset: 22641},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 675, col: 31, offset: 22646},
							label: "singleline",
							expr: &ruleRefExpr{
								pos:  position{line: 675, col: 43, offset: 22658},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 675, col: 51, offset: 22666},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "UndefinedLineRange",
			pos:  position{line: 679, col: 1, offset: 22758},
			expr: &actionExpr{
				pos: position{line: 679, col: 23, offset: 22780},
				run: (*parser).callonUndefinedLineRange1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 679, col: 23, offset: 22780},
					expr: &charClassMatcher{
						pos:        position{line: 679, col: 23, offset: 22780},
						val:        "[^\\], ]",
						chars:      []rune{']', ',', ' '},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "TagRangesAttribute",
			pos:  position{line: 683, col: 1, offset: 22825},
			expr: &actionExpr{
				pos: position{line: 683, col: 23, offset: 22847},
				run: (*parser).callonTagRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 683, col: 23, offset: 22847},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 683, col: 24, offset: 22848},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 683, col: 24, offset: 22848},
									val:        "tags=",
									ignoreCase: false,
									want:       "\"tags=\"",
								},
								&litMatcher{
									pos:        position{line: 683, col: 34, offset: 22858},
									val:        "tag=",
									ignoreCase: false,
									want:       "\"tag=\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 683, col: 42, offset: 22866},
							label: "tags",
							expr: &ruleRefExpr{
								pos:  position{line: 683, col: 48, offset: 22872},
								name: "TagRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 683, col: 73, offset: 22897},
							expr: &litMatcher{
								pos:        position{line: 683, col: 73, offset: 22897},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
					},
				},
			},
		},
		{
			name: "TagRangesAttributeValue",
			pos:  position{line: 687, col: 1, offset: 23046},
			expr: &actionExpr{
				pos: position{line: 687, col: 28, offset: 23073},
				run: (*parser).callonTagRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 687, col: 28, offset: 23073},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 687, col: 28, offset: 23073},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 687, col: 35, offset: 23080},
								name: "MultipleTagRanges",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 687, col: 54, offset: 23099},
							expr: &ruleRefExpr{
								pos:  position{line: 687, col: 54, offset: 23099},
								name: "Space",
							},
						},
						&choiceExpr{
							pos: position{line: 687, col: 62, offset: 23107},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 687, col: 62, offset: 23107},
									expr: &litMatcher{
										pos:        position{line: 687, col: 63, offset: 23108},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
								&andExpr{
									pos: position{line: 687, col: 69, offset: 23114},
									expr: &litMatcher{
										pos:        position{line: 687, col: 70, offset: 23115},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleTagRanges",
			pos:  position{line: 691, col: 1, offset: 23147},
			expr: &actionExpr{
				pos: position{line: 691, col: 22, offset: 23168},
				run: (*parser).callonMultipleTagRanges1,
				expr: &seqExpr{
					pos: position{line: 691, col: 22, offset: 23168},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 691, col: 22, offset: 23168},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 691, col: 29, offset: 23175},
								name: "TagRange",
							},
						},
						&labeledExpr{
							pos:   position{line: 692, col: 5, offset: 23189},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 692, col: 12, offset: 23196},
								expr: &actionExpr{
									pos: position{line: 692, col: 13, offset: 23197},
									run: (*parser).callonMultipleTagRanges7,
									expr: &seqExpr{
										pos: position{line: 692, col: 13, offset: 23197},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 692, col: 13, offset: 23197},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&labeledExpr{
												pos:   position{line: 692, col: 17, offset: 23201},
												label: "other",
												expr: &ruleRefExpr{
													pos:  position{line: 692, col: 24, offset: 23208},
													name: "TagRange",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagRange",
			pos:  position{line: 698, col: 1, offset: 23339},
			expr: &choiceExpr{
				pos: position{line: 698, col: 13, offset: 23351},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 698, col: 13, offset: 23351},
						run: (*parser).callonTagRange2,
						expr: &labeledExpr{
							pos:   position{line: 698, col: 13, offset: 23351},
							label: "tag",
							expr: &choiceExpr{
								pos: position{line: 698, col: 18, offset: 23356},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 698, col: 18, offset: 23356},
										name: "Alphanums",
									},
									&ruleRefExpr{
										pos:  position{line: 698, col: 30, offset: 23368},
										name: "TagWildcard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 700, col: 5, offset: 23436},
						run: (*parser).callonTagRange7,
						expr: &seqExpr{
							pos: position{line: 700, col: 5, offset: 23436},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 700, col: 5, offset: 23436},
									val:        "!",
									ignoreCase: false,
									want:       "\"!\"",
								},
								&labeledExpr{
									pos:   position{line: 700, col: 9, offset: 23440},
									label: "tag",
									expr: &choiceExpr{
										pos: position{line: 700, col: 14, offset: 23445},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 700, col: 14, offset: 23445},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 700, col: 26, offset: 23457},
												name: "TagWildcard",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagWildcard",
			pos:  position{line: 704, col: 1, offset: 23525},
			expr: &actionExpr{
				pos: position{line: 704, col: 16, offset: 23540},
				run: (*parser).callonTagWildcard1,
				expr: &seqExpr{
					pos: position{line: 704, col: 16, offset: 23540},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 704, col: 16, offset: 23540},
							label: "stars",
							expr: &actionExpr{
								pos: position{line: 704, col: 23, offset: 23547},
								run: (*parser).callonTagWildcard4,
								expr: &oneOrMoreExpr{
									pos: position{line: 704, col: 23, offset: 23547},
									expr: &litMatcher{
										pos:        position{line: 704, col: 24, offset: 23548},
										val:        "*",
										ignoreCase: false,
										want:       "\"*\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 707, col: 5, offset: 23602},
							run: (*parser).callonTagWildcard7,
						},
					},
				},
			},
		},
		{
			name: "VerbatimFileLine",
			pos:  position{line: 715, col: 1, offset: 23782},
			expr: &actionExpr{
				pos: position{line: 715, col: 21, offset: 23802},
				run: (*parser).callonVerbatimFileLine1,
				expr: &seqExpr{
					pos: position{line: 715, col: 21, offset: 23802},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 715, col: 21, offset: 23802},
							expr: &ruleRefExpr{
								pos:  position{line: 715, col: 22, offset: 23803},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 715, col: 26, offset: 23807},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 715, col: 35, offset: 23816},
								run: (*parser).callonVerbatimFileLine6,
								expr: &zeroOrMoreExpr{
									pos: position{line: 715, col: 35, offset: 23816},
									expr: &charClassMatcher{
										pos:        position{line: 715, col: 35, offset: 23816},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 717, col: 12, offset: 23878},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "RawFileContent",
			pos:  position{line: 722, col: 1, offset: 24025},
			expr: &zeroOrMoreExpr{
				pos: position{line: 722, col: 19, offset: 24043},
				expr: &choiceExpr{
					pos: position{line: 722, col: 20, offset: 24044},
					alternatives: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 722, col: 20, offset: 24044},
							name: "FileInclusion",
						},
						&ruleRefExpr{
							pos:  position{line: 722, col: 36, offset: 24060},
							name: "RawLine",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileLine",
			pos:  position{line: 728, col: 1, offset: 24207},
			expr: &actionExpr{
				pos: position{line: 728, col: 21, offset: 24227},
				run: (*parser).callonIncludedFileLine1,
				expr: &seqExpr{
					pos: position{line: 728, col: 21, offset: 24227},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 728, col: 21, offset: 24227},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 728, col: 29, offset: 24235},
								expr: &choiceExpr{
									pos: position{line: 728, col: 30, offset: 24236},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 728, col: 30, offset: 24236},
											name: "IncludedFileStartTag",
										},
										&ruleRefExpr{
											pos:  position{line: 728, col: 53, offset: 24259},
											name: "IncludedFileEndTag",
										},
										&actionExpr{
											pos: position{line: 728, col: 74, offset: 24280},
											run: (*parser).callonIncludedFileLine8,
											expr: &anyMatcher{
												line: 728, col: 74, offset: 24280,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 728, col: 107, offset: 24313},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileStartTag",
			pos:  position{line: 732, col: 1, offset: 24384},
			expr: &actionExpr{
				pos: position{line: 732, col: 25, offset: 24408},
				run: (*parser).callonIncludedFileStartTag1,
				expr: &seqExpr{
					pos: position{line: 732, col: 25, offset: 24408},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 732, col: 25, offset: 24408},
							val:        "tag::",
							ignoreCase: false,
							want:       "\"tag::\"",
						},
						&labeledExpr{
							pos:   position{line: 732, col: 33, offset: 24416},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 732, col: 38, offset: 24421},
								run: (*parser).callonIncludedFileStartTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 732, col: 38, offset: 24421},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 732, col: 78, offset: 24461},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileEndTag",
			pos:  position{line: 736, col: 1, offset: 24526},
			expr: &actionExpr{
				pos: position{line: 736, col: 23, offset: 24548},
				run: (*parser).callonIncludedFileEndTag1,
				expr: &seqExpr{
					pos: position{line: 736, col: 23, offset: 24548},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 736, col: 23, offset: 24548},
							val:        "end::",
							ignoreCase: false,
							want:       "\"end::\"",
						},
						&labeledExpr{
							pos:   position{line: 736, col: 31, offset: 24556},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 736, col: 36, offset: 24561},
								run: (*parser).callonIncludedFileEndTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 736, col: 36, offset: 24561},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 736, col: 76, offset: 24601},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "ListParagraph",
			pos:  position{line: 743, col: 1, offset: 24765},
			expr: &choiceExpr{
				pos: position{line: 743, col: 18, offset: 24782},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 743, col: 18, offset: 24782},
						run: (*parser).callonListParagraph2,
						expr: &labeledExpr{
							pos:   position{line: 743, col: 18, offset: 24782},
							label: "comment",
							expr: &ruleRefExpr{
								pos:  position{line: 743, col: 27, offset: 24791},
								name: "SingleLineComment",
							},
						},
					},
					&actionExpr{
						pos: position{line: 745, col: 9, offset: 24848},
						run: (*parser).callonListParagraph5,
						expr: &labeledExpr{
							pos:   position{line: 745, col: 9, offset: 24848},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 745, col: 15, offset: 24854},
								expr: &ruleRefExpr{
									pos:  position{line: 745, col: 16, offset: 24855},
									name: "ListParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListParagraphLine",
			pos:  position{line: 749, col: 1, offset: 24947},
			expr: &actionExpr{
				pos: position{line: 749, col: 22, offset: 24968},
				run: (*parser).callonListParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 749, col: 22, offset: 24968},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 749, col: 22, offset: 24968},
							expr: &ruleRefExpr{
								pos:  position{line: 749, col: 23, offset: 24969},
								name: "EOF",
							},
						},
						&notExpr{
							pos: position{line: 750, col: 5, offset: 24977},
							expr: &ruleRefExpr{
								pos:  position{line: 750, col: 6, offset: 24978},
								name: "BlankLine",
							},
						},
						&notExpr{
							pos: position{line: 751, col: 5, offset: 24993},
							expr: &ruleRefExpr{
								pos:  position{line: 751, col: 6, offset: 24994},
								name: "SingleLineComment",
							},
						},
						&notExpr{
							pos: position{line: 752, col: 5, offset: 25016},
							expr: &ruleRefExpr{
								pos:  position{line: 752, col: 6, offset: 25017},
								name: "OrderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 753, col: 5, offset: 25043},
							expr: &ruleRefExpr{
								pos:  position{line: 753, col: 6, offset: 25044},
								name: "UnorderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 754, col: 5, offset: 25072},
							expr: &ruleRefExpr{
								pos:  position{line: 754, col: 6, offset: 25073},
								name: "CalloutListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 755, col: 5, offset: 25099},
							expr: &ruleRefExpr{
								pos:  position{line: 755, col: 6, offset: 25100},
								name: "ListItemContinuation",
							},
						},
						&notExpr{
							pos: position{line: 756, col: 5, offset: 25125},
							expr: &ruleRefExpr{
								pos:  position{line: 756, col: 6, offset: 25126},
								name: "ElementAttribute",
							},
						},
						&notExpr{
							pos: position{line: 757, col: 5, offset: 25147},
							expr: &ruleRefExpr{
								pos:  position{line: 757, col: 6, offset: 25148},
								name: "BlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 758, col: 5, offset: 25167},
							expr: &ruleRefExpr{
								pos:  position{line: 758, col: 6, offset: 25168},
								name: "LabeledListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 759, col: 5, offset: 25195},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 759, col: 11, offset: 25201},
								run: (*parser).callonListParagraphLine24,
								expr: &labeledExpr{
									pos:   position{line: 759, col: 11, offset: 25201},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 759, col: 20, offset: 25210},
										expr: &ruleRefExpr{
											pos:  position{line: 759, col: 21, offset: 25211},
											name: "InlineElement",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 761, col: 12, offset: 25310},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ListItemContinuation",
			pos:  position{line: 765, col: 1, offset: 25349},
			expr: &seqExpr{
				pos: position{line: 765, col: 25, offset: 25373},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 765, col: 25, offset: 25373},
						val:        "+",
						ignoreCase: false,
						want:       "\"+\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 765, col: 29, offset: 25377},
						expr: &ruleRefExpr{
							pos:  position{line: 765, col: 29, offset: 25377},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 765, col: 36, offset: 25384},
						name: "Newline",
					},
				},
			},
		},
		{
			name: "ContinuedListItemElement",
			pos:  position{line: 767, col: 1, offset: 25456},
			expr: &actionExpr{
				pos: position{line: 767, col: 29, offset: 25484},
				run: (*parser).callonContinuedListItemElement1,
				expr: &seqExpr{
					pos: position{line: 767, col: 29, offset: 25484},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 767, col: 29, offset: 25484},
							name: "ListItemContinuation",
						},
						&labeledExpr{
							pos:   position{line: 767, col: 50, offset: 25505},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 767, col: 58, offset: 25513},
								name: "ContinuedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "ContinuedListItemContent",
			pos:  position{line: 771, col: 1, offset: 25619},
			expr: &actionExpr{
				pos: position{line: 771, col: 29, offset: 25647},
				run: (*parser).callonContinuedListItemContent1,
				expr: &seqExpr{
					pos: position{line: 771, col: 29, offset: 25647},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 771, col: 29, offset: 25647},
							expr: &ruleRefExpr{
								pos:  position{line: 771, col: 30, offset: 25648},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 772, col: 5, offset: 25657},
							label: "content",
							expr: &choiceExpr{
								pos: position{line: 772, col: 14, offset: 25666},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 772, col: 14, offset: 25666},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 773, col: 11, offset: 25691},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 774, col: 11, offset: 25715},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 775, col: 11, offset: 25736},
										name: "RawVerseParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 776, col: 11, offset: 25764},
										name: "ThematicBreak",
									},
									&ruleRefExpr{
										pos:  position{line: 777, col: 11, offset: 25788},
										name: "OrderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 778, col: 11, offset: 25815},
										name: "UnorderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 779, col: 11, offset: 25844},
										name: "LabeledListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 781, col: 11, offset: 25909},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 782, col: 11, offset: 25960},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 783, col: 11, offset: 25984},
										name: "AttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 784, col: 11, offset: 26016},
										name: "AttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 785, col: 11, offset: 26042},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 786, col: 11, offset: 26079},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 787, col: 11, offset: 26104},
										name: "ContinuedRawParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItem",
			pos:  position{line: 794, col: 1, offset: 26270},
			expr: &actionExpr{
				pos: position{line: 794, col: 20, offset: 26289},
				run: (*parser).callonOrderedListItem1,
				expr: &seqExpr{
					pos: position{line: 794, col: 20, offset: 26289},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 794, col: 20, offset: 26289},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 794, col: 26, offset: 26295},
								expr: &ruleRefExpr{
									pos:  position{line: 794, col: 27, offset: 26296},
									name: "BlockAttrs",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 794, col: 40, offset: 26309},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 794, col: 48, offset: 26317},
								name: "OrderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 794, col: 71, offset: 26340},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 794, col: 80, offset: 26349},
								name: "OrderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemPrefix",
			pos:  position{line: 798, col: 1, offset: 26484},
			expr: &actionExpr{
				pos: position{line: 799, col: 5, offset: 26514},
				run: (*parser).callonOrderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 799, col: 5, offset: 26514},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 799, col: 5, offset: 26514},
							expr: &ruleRefExpr{
								pos:  position{line: 799, col: 5, offset: 26514},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 799, col: 12, offset: 26521},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 801, col: 9, offset: 26584},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 801, col: 9, offset: 26584},
										run: (*parser).callonOrderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 801, col: 9, offset: 26584},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 801, col: 9, offset: 26584},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 801, col: 16, offset: 26591},
														run: (*parser).callonOrderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 801, col: 16, offset: 26591},
															expr: &litMatcher{
																pos:        position{line: 801, col: 17, offset: 26592},
																val:        ".",
																ignoreCase: false,
																want:       "\".\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 805, col: 9, offset: 26692},
													run: (*parser).callonOrderedListItemPrefix13,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 824, col: 11, offset: 27409},
										run: (*parser).callonOrderedListItemPrefix14,
										expr: &seqExpr{
											pos: position{line: 824, col: 11, offset: 27409},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 824, col: 11, offset: 27409},
													expr: &charClassMatcher{
														pos:        position{line: 824, col: 12, offset: 27410},
														val:        "[0-9]",
														ranges:     []rune{'0', '9'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 824, col: 20, offset: 27418},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 826, col: 13, offset: 27529},
										run: (*parser).callonOrderedListItemPrefix19,
										expr: &seqExpr{
											pos: position{line: 826, col: 13, offset: 27529},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 826, col: 14, offset: 27530},
													val:        "[a-z]",
													ranges:     []rune{'a', 'z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 826, col: 21, offset: 27537},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 828, col: 13, offset: 27651},
										run: (*parser).callonOrderedListItemPrefix23,
										expr: &seqExpr{
											pos: position{line: 828, col: 13, offset: 27651},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 828, col: 14, offset: 27652},
													val:        "[A-Z]",
													ranges:     []rune{'A', 'Z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 828, col: 21, offset: 27659},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 830, col: 13, offset: 27773},
										run: (*parser).callonOrderedListItemPrefix27,
										expr: &seqExpr{
											pos: position{line: 830, col: 13, offset: 27773},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 830, col: 13, offset: 27773},
													expr: &charClassMatcher{
														pos:        position{line: 830, col: 14, offset: 27774},
														val:        "[a-z]",
														ranges:     []rune{'a', 'z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 830, col: 22, offset: 27782},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 832, col: 13, offset: 27896},
										run: (*parser).callonOrderedListItemPrefix32,
										expr: &seqExpr{
											pos: position{line: 832, col: 13, offset: 27896},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 832, col: 13, offset: 27896},
													expr: &charClassMatcher{
														pos:        position{line: 832, col: 14, offset: 27897},
														val:        "[A-Z]",
														ranges:     []rune{'A', 'Z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 832, col: 22, offset: 27905},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 834, col: 12, offset: 28018},
							expr: &ruleRefExpr{
								pos:  position{line: 834, col: 12, offset: 28018},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemContent",
			pos:  position{line: 838, col: 1, offset: 28053},
			expr: &actionExpr{
				pos: position{line: 838, col: 27, offset: 28079},
				run: (*parser).callonOrderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 838, col: 27, offset: 28079},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 838, col: 37, offset: 28089},
						expr: &ruleRefExpr{
							pos:  position{line: 838, col: 37, offset: 28089},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItem",
			pos:  position{line: 845, col: 1, offset: 28289},
			expr: &actionExpr{
				pos: position{line: 845, col: 22, offset: 28310},
				run: (*parser).callonUnorderedListItem1,
				expr: &seqExpr{
					pos: position{line: 845, col: 22, offset: 28310},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 845, col: 22, offset: 28310},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 845, col: 28, offset: 28316},
								expr: &ruleRefExpr{
									pos:  position{line: 845, col: 29, offset: 28317},
									name: "BlockAttrs",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 845, col: 42, offset: 28330},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 845, col: 50, offset: 28338},
								name: "UnorderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 845, col: 75, offset: 28363},
							label: "checkstyle",
							expr: &zeroOrOneExpr{
								pos: position{line: 845, col: 86, offset: 28374},
								expr: &ruleRefExpr{
									pos:  position{line: 845, col: 87, offset: 28375},
									name: "UnorderedListItemCheckStyle",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 845, col: 117, offset: 28405},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 845, col: 126, offset: 28414},
								name: "UnorderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemPrefix",
			pos:  position{line: 849, col: 1, offset: 28567},
			expr: &actionExpr{
				pos: position{line: 850, col: 5, offset: 28599},
				run: (*parser).callonUnorderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 850, col: 5, offset: 28599},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 850, col: 5, offset: 28599},
							expr: &ruleRefExpr{
								pos:  position{line: 850, col: 5, offset: 28599},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 850, col: 12, offset: 28606},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 850, col: 20, offset: 28614},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 852, col: 9, offset: 28671},
										run: (*parser).callonUnorderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 852, col: 9, offset: 28671},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 852, col: 9, offset: 28671},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 852, col: 16, offset: 28678},
														run: (*parser).callonUnorderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 852, col: 16, offset: 28678},
															expr: &litMatcher{
																pos:        position{line: 852, col: 17, offset: 28679},
																val:        "*",
																ignoreCase: false,
																want:       "\"*\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 856, col: 9, offset: 28779},
													run: (*parser).callonUnorderedListItemPrefix13,
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 873, col: 14, offset: 29486},
										label: "depth",
										expr: &actionExpr{
											pos: position{line: 873, col: 21, offset: 29493},
											run: (*parser).callonUnorderedListItemPrefix15,
											expr: &litMatcher{
												pos:        position{line: 873, col: 22, offset: 29494},
												val:        "-",
												ignoreCase: false,
												want:       "\"-\"",
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 875, col: 13, offset: 29580},
							expr: &ruleRefExpr{
								pos:  position{line: 875, col: 13, offset: 29580},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemCheckStyle",
			pos:  position{line: 879, col: 1, offset: 29616},
			expr: &actionExpr{
				pos: position{line: 879, col: 32, offset: 29647},
				run: (*parser).callonUnorderedListItemCheckStyle1,
				expr: &seqExpr{
					pos: position{line: 879, col: 32, offset: 29647},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 879, col: 32, offset: 29647},
							expr: &litMatcher{
								pos:        position{line: 879, col: 33, offset: 29648},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 879, col: 37, offset: 29652},
							label: "style",
							expr: &choiceExpr{
								pos: position{line: 880, col: 7, offset: 29666},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 880, col: 7, offset: 29666},
										run: (*parser).callonUnorderedListItemCheckStyle7,
										expr: &litMatcher{
											pos:        position{line: 880, col: 7, offset: 29666},
											val:        "[ ]",
											ignoreCase: false,
											want:       "\"[ ]\"",
										},
									},
									&actionExpr{
										pos: position{line: 881, col: 7, offset: 29711},
										run: (*parser).callonUnorderedListItemCheckStyle9,
										expr: &litMatcher{
											pos:        position{line: 881, col: 7, offset: 29711},
											val:        "[*]",
											ignoreCase: false,
											want:       "\"[*]\"",
										},
									},
									&actionExpr{
										pos: position{line: 882, col: 7, offset: 29754},
										run: (*parser).callonUnorderedListItemCheckStyle11,
										expr: &litMatcher{
											pos:        position{line: 882, col: 7, offset: 29754},
											val:        "[x]",
											ignoreCase: false,
											want:       "\"[x]\"",
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 883, col: 7, offset: 29796},
							expr: &ruleRefExpr{
								pos:  position{line: 883, col: 7, offset: 29796},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemContent",
			pos:  position{line: 887, col: 1, offset: 29838},
			expr: &actionExpr{
				pos: position{line: 887, col: 29, offset: 29866},
				run: (*parser).callonUnorderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 887, col: 29, offset: 29866},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 887, col: 39, offset: 29876},
						expr: &ruleRefExpr{
							pos:  position{line: 887, col: 39, offset: 29876},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "LabeledListItem",
			pos:  position{line: 894, col: 1, offset: 30192},
			expr: &actionExpr{
				pos: position{line: 894, col: 20, offset: 30211},
				run: (*parser).callonLabeledListItem1,
				expr: &seqExpr{
					pos: position{line: 894, col: 20, offset: 30211},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 894, col: 20, offset: 30211},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 894, col: 26, offset: 30217},
								expr: &ruleRefExpr{
									pos:  position{line: 894, col: 27, offset: 30218},
									name: "BlockAttrs",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 894, col: 40, offset: 30231},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 894, col: 46, offset: 30237},
								name: "VerbatimLabeledListItemTerm",
							},
						},
						&labeledExpr{
							pos:   position{line: 894, col: 75, offset: 30266},
							label: "separator",
							expr: &ruleRefExpr{
								pos:  position{line: 894, col: 86, offset: 30277},
								name: "LabeledListItemSeparator",
							},
						},
						&labeledExpr{
							pos:   position{line: 894, col: 112, offset: 30303},
							label: "description",
							expr: &zeroOrOneExpr{
								pos: position{line: 894, col: 124, offset: 30315},
								expr: &ruleRefExpr{
									pos:  position{line: 894, col: 125, offset: 30316},
									name: "LabeledListItemDescription",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemPrefix",
			pos:  position{line: 898, col: 1, offset: 30457},
			expr: &seqExpr{
				pos: position{line: 898, col: 26, offset: 30482},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 898, col: 26, offset: 30482},
						name: "VerbatimLabeledListItemTerm",
					},
					&ruleRefExpr{
						pos:  position{line: 898, col: 54, offset: 30510},
						name: "LabeledListItemSeparator",
					},
				},
			},
		},
		{
			name: "VerbatimLabeledListItemChars",
			pos:  position{line: 900, col: 1, offset: 30536},
			expr: &choiceExpr{
				pos: position{line: 900, col: 33, offset: 30568},
				alternatives: []interface{}{
					&oneOrMoreExpr{
						pos: position{line: 900, col: 33, offset: 30568},
						expr: &charClassMatcher{
							pos:        position{line: 900, col: 33, offset: 30568},
							val:        "[^:\\r\\n]",
							chars:      []rune{':', '\r', '\n'},
							ignoreCase: false,
							inverted:   true,
						},
					},
					&seqExpr{
						pos: position{line: 900, col: 45, offset: 30580},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 900, col: 45, offset: 30580},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
							&notExpr{
								pos: position{line: 900, col: 49, offset: 30584},
								expr: &litMatcher{
									pos:        position{line: 900, col: 50, offset: 30585},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerbatimLabeledListItemTerm",
			pos:  position{line: 901, col: 1, offset: 30589},
			expr: &actionExpr{
				pos: position{line: 901, col: 32, offset: 30620},
				run: (*parser).callonVerbatimLabeledListItemTerm1,
				expr: &labeledExpr{
					pos:   position{line: 901, col: 32, offset: 30620},
					label: "content",
					expr: &actionExpr{
						pos: position{line: 901, col: 42, offset: 30630},
						run: (*parser).callonVerbatimLabeledListItemTerm3,
						expr: &oneOrMoreExpr{
							pos: position{line: 901, col: 42, offset: 30630},
							expr: &ruleRefExpr{
								pos:  position{line: 901, col: 42, offset: 30630},
								name: "VerbatimLabeledListItemChars",
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTerm",
			pos:  position{line: 907, col: 1, offset: 30785},
			expr: &actionExpr{
				pos: position{line: 907, col: 24, offset: 30808},
				run: (*parser).callonLabeledListItemTerm1,
				expr: &labeledExpr{
					pos:   position{line: 907, col: 24, offset: 30808},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 907, col: 33, offset: 30817},
						expr: &seqExpr{
							pos: position{line: 907, col: 34, offset: 30818},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 907, col: 34, offset: 30818},
									expr: &ruleRefExpr{
										pos:  position{line: 907, col: 35, offset: 30819},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 907, col: 43, offset: 30827},
									expr: &litMatcher{
										pos:        position{line: 907, col: 44, offset: 30828},
										val:        "::",
										ignoreCase: false,
										want:       "\"::\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 907, col: 49, offset: 30833},
									name: "LabeledListItemTermElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTermElement",
			pos:  position{line: 911, col: 1, offset: 30960},
			expr: &actionExpr{
				pos: position{line: 911, col: 31, offset: 30990},
				run: (*parser).callonLabeledListItemTermElement1,
				expr: &labeledExpr{
					pos:   position{line: 911, col: 31, offset: 30990},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 911, col: 40, offset: 30999},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 911, col: 40, offset: 30999},
								name: "Word",
							},
							&ruleRefExpr{
								pos:  position{line: 912, col: 11, offset: 31014},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 913, col: 11, offset: 31063},
								expr: &ruleRefExpr{
									pos:  position{line: 913, col: 11, offset: 31063},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 914, col: 11, offset: 31081},
								name: "CrossReference",
							},
							&ruleRefExpr{
								pos:  position{line: 915, col: 11, offset: 31106},
								name: "ConcealedIndexTerm",
							},
							&ruleRefExpr{
								pos:  position{line: 916, col: 11, offset: 31135},
								name: "IndexTerm",
							},
							&ruleRefExpr{
								pos:  position{line: 917, col: 11, offset: 31155},
								name: "InlinePassthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 918, col: 11, offset: 31244},
								name: "InlineIcon",
							},
							&ruleRefExpr{
								pos:  position{line: 919, col: 11, offset: 31265},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 920, col: 11, offset: 31288},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 921, col: 11, offset: 31303},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 922, col: 11, offset: 31328},
								name: "QuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 923, col: 11, offset: 31351},
								name: "QuotedText",
							},
							&ruleRefExpr{
								pos:  position{line: 924, col: 11, offset: 31372},
								name: "SpecialCharacter",
							},
							&ruleRefExpr{
								pos:  position{line: 925, col: 11, offset: 31399},
								name: "Symbol",
							},
							&ruleRefExpr{
								pos:  position{line: 926, col: 11, offset: 31416},
								name: "AttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 927, col: 11, offset: 31448},
								name: "ImpliedApostrophe",
							},
							&ruleRefExpr{
								pos:  position{line: 928, col: 11, offset: 31476},
								name: "AnyChar",
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemSeparator",
			pos:  position{line: 932, col: 1, offset: 31515},
			expr: &actionExpr{
				pos: position{line: 933, col: 5, offset: 31548},
				run: (*parser).callonLabeledListItemSeparator1,
				expr: &seqExpr{
					pos: position{line: 933, col: 5, offset: 31548},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 933, col: 5, offset: 31548},
							label: "separator",
							expr: &actionExpr{
								pos: position{line: 933, col: 16, offset: 31559},
								run: (*parser).callonLabeledListItemSeparator4,
								expr: &oneOrMoreExpr{
									pos: position{line: 933, col: 16, offset: 31559},
									expr: &litMatcher{
										pos:        position{line: 933, col: 17, offset: 31560},
										val:        ":",
										ignoreCase: false,
										want:       "\":\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 936, col: 5, offset: 31618},
							run: (*parser).callonLabeledListItemSeparator7,
						},
						&choiceExpr{
							pos: position{line: 940, col: 6, offset: 31794},
							alternatives: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 940, col: 6, offset: 31794},
									expr: &choiceExpr{
										pos: position{line: 940, col: 7, offset: 31795},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 940, col: 7, offset: 31795},
												name: "Space",
											},
											&ruleRefExpr{
												pos:  position{line: 940, col: 15, offset: 31803},
												name: "Newline",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 940, col: 27, offset: 31815},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemDescription",
			pos:  position{line: 944, col: 1, offset: 31855},
			expr: &actionExpr{
				pos: position{line: 944, col: 31, offset: 31885},
				run: (*parser).callonLabeledListItemDescription1,
				expr: &labeledExpr{
					pos:   position{line: 944, col: 31, offset: 31885},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 944, col: 40, offset: 31894},
						expr: &ruleRefExpr{
							pos:  position{line: 944, col: 41, offset: 31895},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionKind",
			pos:  position{line: 951, col: 1, offset: 32086},
			expr: &choiceExpr{
				pos: position{line: 951, col: 19, offset: 32104},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 951, col: 19, offset: 32104},
						run: (*parser).callonAdmonitionKind2,
						expr: &litMatcher{
							pos:        position{line: 951, col: 19, offset: 32104},
							val:        "TIP",
							ignoreCase: false,
							want:       "\"TIP\"",
						},
					},
					&actionExpr{
						pos: position{line: 953, col: 9, offset: 32150},
						run: (*parser).callonAdmonitionKind4,
						expr: &litMatcher{
							pos:        position{line: 953, col: 9, offset: 32150},
							val:        "NOTE",
							ignoreCase: false,
							want:       "\"NOTE\"",
						},
					},
					&actionExpr{
						pos: position{line: 955, col: 9, offset: 32198},
						run: (*parser).callonAdmonitionKind6,
						expr: &litMatcher{
							pos:        position{line: 955, col: 9, offset: 32198},
							val:        "IMPORTANT",
							ignoreCase: false,
							want:       "\"IMPORTANT\"",
						},
					},
					&actionExpr{
						pos: position{line: 957, col: 9, offset: 32256},
						run: (*parser).callonAdmonitionKind8,
						expr: &litMatcher{
							pos:        position{line: 957, col: 9, offset: 32256},
							val:        "WARNING",
							ignoreCase: false,
							want:       "\"WARNING\"",
						},
					},
					&actionExpr{
						pos: position{line: 959, col: 9, offset: 32310},
						run: (*parser).callonAdmonitionKind10,
						expr: &litMatcher{
							pos:        position{line: 959, col: 9, offset: 32310},
							val:        "CAUTION",
							ignoreCase: false,
							want:       "\"CAUTION\"",
						},
					},
				},
			},
		},
		{
			name: "RawParagraph",
			pos:  position{line: 970, col: 1, offset: 32626},
			expr: &choiceExpr{
				pos: position{line: 972, col: 5, offset: 32676},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 972, col: 5, offset: 32676},
						run: (*parser).callonRawParagraph2,
						expr: &seqExpr{
							pos: position{line: 972, col: 5, offset: 32676},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 972, col: 5, offset: 32676},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 972, col: 16, offset: 32687},
										expr: &ruleRefExpr{
											pos:  position{line: 972, col: 17, offset: 32688},
											name: "Attributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 972, col: 30, offset: 32701},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 972, col: 33, offset: 32704},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 972, col: 49, offset: 32720},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 972, col: 54, offset: 32725},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 972, col: 60, offset: 32731},
										expr: &ruleRefExpr{
											pos:  position{line: 972, col: 61, offset: 32732},
											name: "RawParagraphLine",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 976, col: 5, offset: 32915},
						run: (*parser).callonRawParagraph13,
						expr: &seqExpr{
							pos: position{line: 976, col: 5, offset: 32915},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 976, col: 5, offset: 32915},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 976, col: 16, offset: 32926},
										expr: &ruleRefExpr{
											pos:  position{line: 976, col: 17, offset: 32927},
											name: "Attributes",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 976, col: 30, offset: 32940},
									val:        "> ",
									ignoreCase: false,
									want:       "\"> \"",
								},
								&labeledExpr{
									pos:   position{line: 976, col: 35, offset: 32945},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 976, col: 44, offset: 32954},
										name: "MarkdownQuoteBlockRawContent",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 980, col: 5, offset: 33144},
						run: (*parser).callonRawParagraph21,
						expr: &seqExpr{
							pos: position{line: 980, col: 5, offset: 33144},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 980, col: 5, offset: 33144},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 980, col: 16, offset: 33155},
										expr: &ruleRefExpr{
											pos:  position{line: 980, col: 17, offset: 33156},
											name: "Attributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 980, col: 30, offset: 33169},
									run: (*parser).callonRawParagraph26,
								},
								&notExpr{
									pos: position{line: 987, col: 7, offset: 33448},
									expr: &ruleRefExpr{
										pos:  position{line: 987, col: 8, offset: 33449},
										name: "BlockDelimiter",
									},
								},
								&labeledExpr{
									pos:   position{line: 987, col: 23, offset: 33464},
									label: "content",
									expr: &oneOrMoreExpr{
										pos: position{line: 987, col: 31, offset: 33472},
										expr: &ruleRefExpr{
											pos:  position{line: 987, col: 32, offset: 33473},
											name: "RawParagraphLine",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 991, col: 5, offset: 33656},
						run: (*parser).callonRawParagraph32,
						expr: &seqExpr{
							pos: position{line: 991, col: 5, offset: 33656},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 991, col: 5, offset: 33656},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 991, col: 16, offset: 33667},
										expr: &ruleRefExpr{
											pos:  position{line: 991, col: 17, offset: 33668},
											name: "Attributes",
										},
									},
								},
								&notExpr{
									pos: position{line: 991, col: 30, offset: 33681},
									expr: &ruleRefExpr{
										pos:  position{line: 991, col: 31, offset: 33682},
										name: "BlockDelimiter",
									},
								},
								&labeledExpr{
									pos:   position{line: 991, col: 46, offset: 33697},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 991, col: 52, offset: 33703},
										expr: &ruleRefExpr{
											pos:  position{line: 991, col: 53, offset: 33704},
											name: "RawParagraphLine",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkdownQuoteBlockRawContent",
			pos:  position{line: 995, col: 1, offset: 33802},
			expr: &oneOrMoreExpr{
				pos: position{line: 995, col: 33, offset: 33834},
				expr: &actionExpr{
					pos: position{line: 995, col: 34, offset: 33835},
					run: (*parser).callonMarkdownQuoteBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 995, col: 34, offset: 33835},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 995, col: 34, offset: 33835},
								expr: &ruleRefExpr{
									pos:  position{line: 995, col: 35, offset: 33836},
									name: "BlankLine",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 995, col: 45, offset: 33846},
								expr: &litMatcher{
									pos:        position{line: 995, col: 45, offset: 33846},
									val:        "> ",
									ignoreCase: false,
									want:       "\"> \"",
								},
							},
							&labeledExpr{
								pos:   position{line: 995, col: 51, offset: 33852},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 995, col: 60, offset: 33861},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RawParagraphLine",
			pos:  position{line: 999, col: 1, offset: 33994},
			expr: &actionExpr{
				pos: position{line: 999, col: 21, offset: 34014},
				run: (*parser).callonRawParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 999, col: 21, offset: 34014},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 999, col: 21, offset: 34014},
							expr: &ruleRefExpr{
								pos:  position{line: 999, col: 22, offset: 34015},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 999, col: 32, offset: 34025},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 999, col: 41, offset: 34034},
								name: "RawParagraphLineContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 999, col: 66, offset: 34059},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "RawParagraphLineContent",
			pos:  position{line: 1003, col: 1, offset: 34114},
			expr: &actionExpr{
				pos: position{line: 1003, col: 28, offset: 34141},
				run: (*parser).callonRawParagraphLineContent1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1003, col: 28, offset: 34141},
					expr: &charClassMatcher{
						pos:        position{line: 1003, col: 28, offset: 34141},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "Paragraph",
			pos:  position{line: 1009, col: 1, offset: 34340},
			expr: &choiceExpr{
				pos: position{line: 1011, col: 5, offset: 34387},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1011, col: 5, offset: 34387},
						run: (*parser).callonParagraph2,
						expr: &seqExpr{
							pos: position{line: 1011, col: 5, offset: 34387},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1011, col: 5, offset: 34387},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1011, col: 16, offset: 34398},
										expr: &ruleRefExpr{
											pos:  position{line: 1011, col: 17, offset: 34399},
											name: "Attributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1011, col: 30, offset: 34412},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 1011, col: 33, offset: 34415},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 1011, col: 49, offset: 34431},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 1011, col: 54, offset: 34436},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 1011, col: 60, offset: 34442},
										expr: &ruleRefExpr{
											pos:  position{line: 1011, col: 61, offset: 34443},
											name: "ParagraphLine",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1015, col: 5, offset: 34629},
						run: (*parser).callonParagraph13,
						expr: &seqExpr{
							pos: position{line: 1015, col: 5, offset: 34629},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1015, col: 5, offset: 34629},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1015, col: 16, offset: 34640},
										expr: &ruleRefExpr{
											pos:  position{line: 1015, col: 17, offset: 34641},
											name: "Attributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 1015, col: 30, offset: 34654},
									run: (*parser).callonParagraph18,
								},
								&notExpr{
									pos: position{line: 1022, col: 7, offset: 34933},
									expr: &ruleRefExpr{
										pos:  position{line: 1022, col: 8, offset: 34934},
										name: "BlockDelimiter",
									},
								},
								&labeledExpr{
									pos:   position{line: 1022, col: 23, offset: 34949},
									label: "content",
									expr: &oneOrMoreExpr{
										pos: position{line: 1022, col: 31, offset: 34957},
										expr: &ruleRefExpr{
											pos:  position{line: 1022, col: 32, offset: 34958},
											name: "ParagraphLine",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1026, col: 5, offset: 35138},
						run: (*parser).callonParagraph24,
						expr: &seqExpr{
							pos: position{line: 1026, col: 5, offset: 35138},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1026, col: 5, offset: 35138},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1026, col: 16, offset: 35149},
										expr: &ruleRefExpr{
											pos:  position{line: 1026, col: 17, offset: 35150},
											name: "Attributes",
										},
									},
								},
								&notExpr{
									pos: position{line: 1026, col: 30, offset: 35163},
									expr: &ruleRefExpr{
										pos:  position{line: 1026, col: 31, offset: 35164},
										name: "BlockDelimiter",
									},
								},
								&labeledExpr{
									pos:   position{line: 1026, col: 46, offset: 35179},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 1026, col: 52, offset: 35185},
										expr: &ruleRefExpr{
											pos:  position{line: 1026, col: 53, offset: 35186},
											name: "ParagraphLine",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphLine",
			pos:  position{line: 1030, col: 1, offset: 35281},
			expr: &ruleRefExpr{
				pos:  position{line: 1030, col: 18, offset: 35298},
				name: "InlineElements",
			},
		},
		{
			name: "MarkdownQuoteBlockAttribution",
			pos:  position{line: 1032, col: 1, offset: 35314},
			expr: &actionExpr{
				pos: position{line: 1032, col: 34, offset: 35347},
				run: (*parser).callonMarkdownQuoteBlockAttribution1,
				expr: &seqExpr{
					pos: position{line: 1032, col: 34, offset: 35347},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1032, col: 34, offset: 35347},
							val:        "-- ",
							ignoreCase: false,
							want:       "\"-- \"",
						},
						&labeledExpr{
							pos:   position{line: 1032, col: 40, offset: 35353},
							label: "author",
							expr: &actionExpr{
								pos: position{line: 1032, col: 48, offset: 35361},
								run: (*parser).callonMarkdownQuoteBlockAttribution5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1032, col: 49, offset: 35362},
									expr: &charClassMatcher{
										pos:        position{line: 1032, col: 49, offset: 35362},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1034, col: 8, offset: 35412},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "OpenPassthroughParagraphContent",
			pos:  position{line: 1038, col: 1, offset: 35444},
			expr: &oneOrMoreExpr{
				pos: position{line: 1038, col: 36, offset: 35479},
				expr: &actionExpr{
					pos: position{line: 1038, col: 37, offset: 35480},
					run: (*parser).callonOpenPassthroughParagraphContent2,
					expr: &seqExpr{
						pos: position{line: 1038, col: 37, offset: 35480},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1038, col: 37, offset: 35480},
								expr: &ruleRefExpr{
									pos:  position{line: 1038, col: 38, offset: 35481},
									name: "BlankLine",
								},
							},
							&labeledExpr{
								pos:   position{line: 1038, col: 48, offset: 35491},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1038, col: 57, offset: 35500},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SimpleParagraph",
			pos:  position{line: 1043, col: 1, offset: 35711},
			expr: &actionExpr{
				pos: position{line: 1043, col: 20, offset: 35730},
				run: (*parser).callonSimpleParagraph1,
				expr: &seqExpr{
					pos: position{line: 1043, col: 20, offset: 35730},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1043, col: 20, offset: 35730},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1043, col: 31, offset: 35741},
								expr: &ruleRefExpr{
									pos:  position{line: 1043, col: 32, offset: 35742},
									name: "Attributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1044, col: 5, offset: 35760},
							run: (*parser).callonSimpleParagraph6,
						},
						&labeledExpr{
							pos:   position{line: 1052, col: 5, offset: 36046},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 1052, col: 16, offset: 36057},
								name: "FirstParagraphRawLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1053, col: 5, offset: 36083},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1053, col: 16, offset: 36094},
								expr: &ruleRefExpr{
									pos:  position{line: 1053, col: 17, offset: 36095},
									name: "OtherParagraphRawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FirstParagraphRawLine",
			pos:  position{line: 1057, col: 1, offset: 36232},
			expr: &actionExpr{
				pos: position{line: 1058, col: 5, offset: 36262},
				run: (*parser).callonFirstParagraphRawLine1,
				expr: &seqExpr{
					pos: position{line: 1058, col: 5, offset: 36262},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1058, col: 5, offset: 36262},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 1058, col: 14, offset: 36271},
								run: (*parser).callonFirstParagraphRawLine4,
								expr: &seqExpr{
									pos: position{line: 1058, col: 14, offset: 36271},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 1058, col: 14, offset: 36271},
											label: "elements",
											expr: &ruleRefExpr{
												pos:  position{line: 1058, col: 23, offset: 36280},
												name: "Word",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 1058, col: 28, offset: 36285},
											expr: &charClassMatcher{
												pos:        position{line: 1058, col: 28, offset: 36285},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1058, col: 68, offset: 36325},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "OtherParagraphRawLine",
			pos:  position{line: 1062, col: 1, offset: 36381},
			expr: &ruleRefExpr{
				pos:  position{line: 1062, col: 26, offset: 36406},
				name: "RawParagraphLine",
			},
		},
		{
			name: "NormalParagraphContent",
			pos:  position{line: 1065, col: 1, offset: 36502},
			expr: &oneOrMoreExpr{
				pos: position{line: 1065, col: 27, offset: 36528},
				expr: &ruleRefExpr{
					pos:  position{line: 1065, col: 27, offset: 36528},
					name: "InlineElements",
				},
			},
		},
		{
			name: "ContinuedRawParagraph",
			pos:  position{line: 1072, col: 1, offset: 36739},
			expr: &choiceExpr{
				pos: position{line: 1074, col: 5, offset: 36798},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1074, col: 5, offset: 36798},
						run: (*parser).callonContinuedRawParagraph2,
						expr: &seqExpr{
							pos: position{line: 1074, col: 5, offset: 36798},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1074, col: 5, offset: 36798},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1074, col: 16, offset: 36809},
										expr: &ruleRefExpr{
											pos:  position{line: 1074, col: 17, offset: 36810},
											name: "Attributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1074, col: 30, offset: 36823},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 1074, col: 33, offset: 36826},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 1074, col: 49, offset: 36842},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 1074, col: 54, offset: 36847},
									label: "lines",
									expr: &ruleRefExpr{
										pos:  position{line: 1074, col: 61, offset: 36854},
										name: "ContinuedRawParagraphLines",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1078, col: 5, offset: 37057},
						run: (*parser).callonContinuedRawParagraph12,
						expr: &seqExpr{
							pos: position{line: 1078, col: 5, offset: 37057},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1078, col: 5, offset: 37057},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1078, col: 16, offset: 37068},
										expr: &ruleRefExpr{
											pos:  position{line: 1078, col: 17, offset: 37069},
											name: "Attributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1078, col: 30, offset: 37082},
									label: "lines",
									expr: &ruleRefExpr{
										pos:  position{line: 1078, col: 37, offset: 37089},
										name: "ContinuedRawParagraphLines",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ContinuedRawParagraphLines",
			pos:  position{line: 1082, col: 1, offset: 37193},
			expr: &actionExpr{
				pos: position{line: 1082, col: 31, offset: 37223},
				run: (*parser).callonContinuedRawParagraphLines1,
				expr: &seqExpr{
					pos: position{line: 1082, col: 31, offset: 37223},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1082, col: 31, offset: 37223},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 1082, col: 42, offset: 37234},
								name: "FirstParagraphRawLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1082, col: 65, offset: 37257},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1082, col: 76, offset: 37268},
								expr: &seqExpr{
									pos: position{line: 1082, col: 77, offset: 37269},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1082, col: 77, offset: 37269},
											expr: &ruleRefExpr{
												pos:  position{line: 1082, col: 78, offset: 37270},
												name: "ListItemContinuation",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1082, col: 99, offset: 37291},
											name: "OtherParagraphRawLine",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RawVerseParagraph",
			pos:  position{line: 1090, col: 1, offset: 37513},
			expr: &actionExpr{
				pos: position{line: 1091, col: 5, offset: 37539},
				run: (*parser).callonRawVerseParagraph1,
				expr: &seqExpr{
					pos: position{line: 1091, col: 5, offset: 37539},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1091, col: 5, offset: 37539},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1091, col: 16, offset: 37550},
								expr: &ruleRefExpr{
									pos:  position{line: 1091, col: 17, offset: 37551},
									name: "Attributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1092, col: 5, offset: 37568},
							run: (*parser).callonRawVerseParagraph6,
						},
						&labeledExpr{
							pos:   position{line: 1099, col: 5, offset: 37773},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 1099, col: 11, offset: 37779},
								expr: &ruleRefExpr{
									pos:  position{line: 1099, col: 12, offset: 37780},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElements",
			pos:  position{line: 1107, col: 1, offset: 37986},
			expr: &actionExpr{
				pos: position{line: 1107, col: 19, offset: 38004},
				run: (*parser).callonInlineElements1,
				expr: &seqExpr{
					pos: position{line: 1107, col: 19, offset: 38004},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1107, col: 19, offset: 38004},
							expr: &ruleRefExpr{
								pos:  position{line: 1107, col: 20, offset: 38005},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1108, col: 5, offset: 38019},
							label: "elements",
							expr: &choiceExpr{
								pos: position{line: 1108, col: 15, offset: 38029},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 1108, col: 15, offset: 38029},
										run: (*parser).callonInlineElements7,
										expr: &labeledExpr{
											pos:   position{line: 1108, col: 15, offset: 38029},
											label: "comment",
											expr: &ruleRefExpr{
												pos:  position{line: 1108, col: 24, offset: 38038},
												name: "SingleLineComment",
											},
										},
									},
									&actionExpr{
										pos: position{line: 1110, col: 9, offset: 38130},
										run: (*parser).callonInlineElements10,
										expr: &seqExpr{
											pos: position{line: 1110, col: 9, offset: 38130},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 1110, col: 9, offset: 38130},
													label: "elements",
													expr: &oneOrMoreExpr{
														pos: position{line: 1110, col: 18, offset: 38139},
														expr: &ruleRefExpr{
															pos:  position{line: 1110, col: 19, offset: 38140},
															name: "InlineElement",
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 1110, col: 35, offset: 38156},
													name: "EOL",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElement",
			pos:  position{line: 1116, col: 1, offset: 38273},
			expr: &actionExpr{
				pos: position{line: 1117, col: 5, offset: 38296},
				run: (*parser).callonInlineElement1,
				expr: &labeledExpr{
					pos:   position{line: 1117, col: 5, offset: 38296},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1117, col: 14, offset: 38305},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1117, col: 14, offset: 38305},
								name: "InlineWord",
							},
							&ruleRefExpr{
								pos:  position{line: 1118, col: 11, offset: 38356},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 1119, col: 11, offset: 38401},
								expr: &ruleRefExpr{
									pos:  position{line: 1119, col: 11, offset: 38401},
									name: "Space",
								},
							},
							&seqExpr{
								pos: position{line: 1120, col: 11, offset: 38419},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1120, col: 11, offset: 38419},
										expr: &ruleRefExpr{
											pos:  position{line: 1120, col: 12, offset: 38420},
											name: "EOL",
										},
									},
									&choiceExpr{
										pos: position{line: 1121, col: 13, offset: 38438},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1121, col: 13, offset: 38438},
												name: "QuotedString",
											},
											&ruleRefExpr{
												pos:  position{line: 1122, col: 15, offset: 38465},
												name: "QuotedText",
											},
											&ruleRefExpr{
												pos:  position{line: 1123, col: 15, offset: 38490},
												name: "InlineIcon",
											},
											&ruleRefExpr{
												pos:  position{line: 1124, col: 15, offset: 38515},
												name: "InlineImage",
											},
											&ruleRefExpr{
												pos:  position{line: 1125, col: 15, offset: 38542},
												name: "Link",
											},
											&ruleRefExpr{
												pos:  position{line: 1126, col: 15, offset: 38562},
												name: "InlinePassthrough",
											},
											&ruleRefExpr{
												pos:  position{line: 1127, col: 15, offset: 38655},
												name: "InlineFootnote",
											},
											&ruleRefExpr{
												pos:  position{line: 1128, col: 15, offset: 38685},
												name: "CrossReference",
											},
											&ruleRefExpr{
												pos:  position{line: 1129, col: 15, offset: 38715},
												name: "SpecialCharacter",
											},
											&ruleRefExpr{
												pos:  position{line: 1130, col: 15, offset: 38746},
												name: "Symbol",
											},
											&ruleRefExpr{
												pos:  position{line: 1131, col: 15, offset: 38767},
												name: "InlineUserMacro",
											},
											&ruleRefExpr{
												pos:  position{line: 1132, col: 15, offset: 38798},
												name: "AttributeSubstitution",
											},
											&ruleRefExpr{
												pos:  position{line: 1133, col: 15, offset: 38835},
												name: "InlineElementID",
											},
											&ruleRefExpr{
												pos:  position{line: 1134, col: 15, offset: 38865},
												name: "ConcealedIndexTerm",
											},
											&ruleRefExpr{
												pos:  position{line: 1135, col: 15, offset: 38898},
												name: "IndexTerm",
											},
											&ruleRefExpr{
												pos:  position{line: 1136, col: 15, offset: 38922},
												name: "ImpliedApostrophe",
											},
											&ruleRefExpr{
												pos:  position{line: 1137, col: 15, offset: 38954},
												name: "AnyChar",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LineBreak",
			pos:  position{line: 1144, col: 1, offset: 39177},
			expr: &actionExpr{
				pos: position{line: 1144, col: 14, offset: 39190},
				run: (*parser).callonLineBreak1,
				expr: &seqExpr{
					pos: position{line: 1144, col: 14, offset: 39190},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1144, col: 14, offset: 39190},
							name: "Space",
						},
						&litMatcher{
							pos:        position{line: 1144, col: 20, offset: 39196},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1144, col: 24, offset: 39200},
							expr: &ruleRefExpr{
								pos:  position{line: 1144, col: 24, offset: 39200},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 1144, col: 31, offset: 39207},
							expr: &ruleRefExpr{
								pos:  position{line: 1144, col: 32, offset: 39208},
								name: "EOL",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedText",
			pos:  position{line: 1151, col: 1, offset: 39492},
			expr: &choiceExpr{
				pos: position{line: 1151, col: 15, offset: 39506},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1151, col: 15, offset: 39506},
						name: "UnconstrainedQuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1151, col: 41, offset: 39532},
						name: "ConstrainedQuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1151, col: 65, offset: 39556},
						name: "EscapedQuotedText",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedTextMarker",
			pos:  position{line: 1153, col: 1, offset: 39575},
			expr: &choiceExpr{
				pos: position{line: 1153, col: 32, offset: 39606},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1153, col: 32, offset: 39606},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1153, col: 32, offset: 39606},
								val:        "*",
								ignoreCase: false,
								want:       "\"*\"",
							},
							&notExpr{
								pos: position{line: 1153, col: 36, offset: 39610},
								expr: &litMatcher{
									pos:        position{line: 1153, col: 37, offset: 39611},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1153, col: 43, offset: 39617},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1153, col: 43, offset: 39617},
								val:        "_",
								ignoreCase: false,
								want:       "\"_\"",
							},
							&notExpr{
								pos: position{line: 1153, col: 47, offset: 39621},
								expr: &litMatcher{
									pos:        position{line: 1153, col: 48, offset: 39622},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1153, col: 54, offset: 39628},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1153, col: 54, offset: 39628},
								val:        "#",
								ignoreCase: false,
								want:       "\"#\"",
							},
							&notExpr{
								pos: position{line: 1153, col: 58, offset: 39632},
								expr: &litMatcher{
									pos:        position{line: 1153, col: 59, offset: 39633},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1153, col: 65, offset: 39639},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1153, col: 65, offset: 39639},
								val:        "`",
								ignoreCase: false,
								want:       "\"`\"",
							},
							&notExpr{
								pos: position{line: 1153, col: 69, offset: 39643},
								expr: &litMatcher{
									pos:        position{line: 1153, col: 70, offset: 39644},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedTextPrefix",
			pos:  position{line: 1155, col: 1, offset: 39649},
			expr: &choiceExpr{
				pos: position{line: 1155, col: 34, offset: 39682},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1155, col: 34, offset: 39682},
						val:        "**",
						ignoreCase: false,
						want:       "\"**\"",
					},
					&litMatcher{
						pos:        position{line: 1155, col: 41, offset: 39689},
						val:        "__",
						ignoreCase: false,
						want:       "\"__\"",
					},
					&litMatcher{
						pos:        position{line: 1155, col: 48, offset: 39696},
						val:        "``",
						ignoreCase: false,
						want:       "\"``\"",
					},
					&litMatcher{
						pos:        position{line: 1155, col: 55, offset: 39703},
						val:        "##",
						ignoreCase: false,
						want:       "\"##\"",
					},
					&litMatcher{
						pos:        position{line: 1155, col: 62, offset: 39710},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&litMatcher{
						pos:        position{line: 1155, col: 68, offset: 39716},
						val:        "~",
						ignoreCase: false,
						want:       "\"~\"",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedText",
			pos:  position{line: 1157, col: 1, offset: 39721},
			expr: &actionExpr{
				pos: position{line: 1157, col: 26, offset: 39746},
				run: (*parser).callonConstrainedQuotedText1,
				expr: &labeledExpr{
					pos:   position{line: 1157, col: 26, offset: 39746},
					label: "text",
					expr: &choiceExpr{
						pos: position{line: 1157, col: 32, offset: 39752},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1157, col: 32, offset: 39752},
								name: "SingleQuoteBoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 1158, col: 15, offset: 39787},
								name: "SingleQuoteItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 1159, col: 15, offset: 39823},
								name: "SingleQuoteMarkedText",
							},
							&ruleRefExpr{
								pos:  position{line: 1160, col: 15, offset: 39859},
								name: "SingleQuoteMonospaceText",
							},
							&ruleRefExpr{
								pos:  position{line: 1161, col: 15, offset: 39899},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1162, col: 15, offset: 39928},
								name: "SuperscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1163, col: 15, offset: 39959},
								name: "SubscriptOrSuperscriptPrefix",
							},
						},
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedText",
			pos:  position{line: 1167, col: 1, offset: 40113},
			expr: &choiceExpr{
				pos: position{line: 1167, col: 28, offset: 40140},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1167, col: 28, offset: 40140},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1168, col: 15, offset: 40174},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1169, col: 15, offset: 40210},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1170, col: 15, offset: 40246},
						name: "DoubleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "EscapedQuotedText",
			pos:  position{line: 1172, col: 1, offset: 40272},
			expr: &choiceExpr{
				pos: position{line: 1172, col: 22, offset: 40293},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1172, col: 22, offset: 40293},
						name: "EscapedBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1173, col: 15, offset: 40324},
						name: "EscapedItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1174, col: 15, offset: 40356},
						name: "EscapedMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1175, col: 15, offset: 40388},
						name: "EscapedMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1176, col: 15, offset: 40424},
						name: "EscapedSubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1177, col: 15, offset: 40460},
						name: "EscapedSuperscriptText",
					},
				},
			},
		},
		{
			name: "SubscriptOrSuperscriptPrefix",
			pos:  position{line: 1179, col: 1, offset: 40484},
			expr: &choiceExpr{
				pos: position{line: 1179, col: 33, offset: 40516},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1179, col: 33, offset: 40516},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&actionExpr{
						pos: position{line: 1179, col: 39, offset: 40522},
						run: (*parser).callonSubscriptOrSuperscriptPrefix3,
						expr: &litMatcher{
							pos:        position{line: 1179, col: 39, offset: 40522},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "OneOrMoreBackslashes",
			pos:  position{line: 1183, col: 1, offset: 40655},
			expr: &actionExpr{
				pos: position{line: 1183, col: 25, offset: 40679},
				run: (*parser).callonOneOrMoreBackslashes1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1183, col: 25, offset: 40679},
					expr: &litMatcher{
						pos:        position{line: 1183, col: 25, offset: 40679},
						val:        "\\",
						ignoreCase: false,
						want:       "\"\\\\\"",
					},
				},
			},
		},
		{
			name: "TwoOrMoreBackslashes",
			pos:  position{line: 1187, col: 1, offset: 40720},
			expr: &actionExpr{
				pos: position{line: 1187, col: 25, offset: 40744},
				run: (*parser).callonTwoOrMoreBackslashes1,
				expr: &seqExpr{
					pos: position{line: 1187, col: 25, offset: 40744},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1187, col: 25, offset: 40744},
							val:        "\\\\",
							ignoreCase: false,
							want:       "\"\\\\\\\\\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1187, col: 30, offset: 40749},
							expr: &litMatcher{
								pos:        position{line: 1187, col: 30, offset: 40749},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
					},
				},
			},
		},
		{
			name: "BoldText",
			pos:  position{line: 1195, col: 1, offset: 40846},
			expr: &choiceExpr{
				pos: position{line: 1195, col: 13, offset: 40858},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1195, col: 13, offset: 40858},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1195, col: 35, offset: 40880},
						name: "SingleQuoteBoldText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldText",
			pos:  position{line: 1197, col: 1, offset: 40947},
			expr: &actionExpr{
				pos: position{line: 1197, col: 24, offset: 40970},
				run: (*parser).callonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 1197, col: 24, offset: 40970},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1197, col: 24, offset: 40970},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1197, col: 30, offset: 40976},
								expr: &ruleRefExpr{
									pos:  position{line: 1197, col: 31, offset: 40977},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1197, col: 49, offset: 40995},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
						&labeledExpr{
							pos:   position{line: 1197, col: 54, offset: 41000},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1197, col: 64, offset: 41010},
								name: "DoubleQuoteBoldTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1197, col: 93, offset: 41039},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElements",
			pos:  position{line: 1201, col: 1, offset: 41126},
			expr: &seqExpr{
				pos: position{line: 1201, col: 32, offset: 41157},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1201, col: 32, offset: 41157},
						name: "DoubleQuoteBoldTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1201, col: 59, offset: 41184},
						expr: &seqExpr{
							pos: position{line: 1201, col: 60, offset: 41185},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1201, col: 60, offset: 41185},
									expr: &litMatcher{
										pos:        position{line: 1201, col: 62, offset: 41187},
										val:        "**",
										ignoreCase: false,
										want:       "\"**\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1201, col: 69, offset: 41194},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1201, col: 69, offset: 41194},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1201, col: 77, offset: 41202},
											name: "DoubleQuoteBoldTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElement",
			pos:  position{line: 1203, col: 1, offset: 41267},
			expr: &choiceExpr{
				pos: position{line: 1203, col: 31, offset: 41297},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1203, col: 31, offset: 41297},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1204, col: 11, offset: 41312},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1204, col: 11, offset: 41312},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1204, col: 19, offset: 41320},
								expr: &ruleRefExpr{
									pos:  position{line: 1204, col: 20, offset: 41321},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1205, col: 11, offset: 41339},
						name: "SingleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1206, col: 11, offset: 41369},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1207, col: 11, offset: 41392},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1208, col: 11, offset: 41413},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1209, col: 11, offset: 41434},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1210, col: 11, offset: 41458},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1211, col: 11, offset: 41482},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1212, col: 11, offset: 41508},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1213, col: 11, offset: 41597},
						name: "SpecialCharacter",
					},
					&ruleRefExpr{
						pos:  position{line: 1214, col: 11, offset: 41624},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 1215, col: 11, offset: 41641},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1216, col: 11, offset: 41662},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1217, col: 11, offset: 41684},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1218, col: 11, offset: 41699},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1219, col: 11, offset: 41731},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1220, col: 11, offset: 41759},
						name: "DoubleQuoteBoldTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 1223, col: 1, offset: 41798},
			expr: &choiceExpr{
				pos: position{line: 1224, col: 5, offset: 41842},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1224, col: 5, offset: 41842},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1225, col: 7, offset: 41939},
						run: (*parser).callonDoubleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1225, col: 7, offset: 41939},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1225, col: 7, offset: 41939},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1225, col: 12, offset: 41944},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldText",
			pos:  position{line: 1229, col: 1, offset: 42107},
			expr: &choiceExpr{
				pos: position{line: 1229, col: 24, offset: 42130},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1229, col: 24, offset: 42130},
						run: (*parser).callonSingleQuoteBoldText2,
						expr: &seqExpr{
							pos: position{line: 1229, col: 24, offset: 42130},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1229, col: 24, offset: 42130},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1229, col: 30, offset: 42136},
										expr: &ruleRefExpr{
											pos:  position{line: 1229, col: 31, offset: 42137},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1229, col: 51, offset: 42157},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1229, col: 51, offset: 42157},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 1229, col: 55, offset: 42161},
											expr: &litMatcher{
												pos:        position{line: 1229, col: 56, offset: 42162},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1229, col: 61, offset: 42167},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1229, col: 71, offset: 42177},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1229, col: 100, offset: 42206},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&andExpr{
									pos: position{line: 1229, col: 104, offset: 42210},
									expr: &notExpr{
										pos: position{line: 1229, col: 106, offset: 42212},
										expr: &ruleRefExpr{
											pos:  position{line: 1229, col: 107, offset: 42213},
											name: "Alphanum",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1231, col: 5, offset: 42407},
						run: (*parser).callonSingleQuoteBoldText17,
						expr: &seqExpr{
							pos: position{line: 1231, col: 5, offset: 42407},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1231, col: 5, offset: 42407},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1231, col: 11, offset: 42413},
										expr: &ruleRefExpr{
											pos:  position{line: 1231, col: 12, offset: 42414},
											name: "QuotedTextAttrs",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1231, col: 30, offset: 42432},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 1231, col: 34, offset: 42436},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1231, col: 44, offset: 42446},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1231, col: 44, offset: 42446},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1231, col: 48, offset: 42450},
												name: "SingleQuoteBoldTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1231, col: 77, offset: 42479},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElements",
			pos:  position{line: 1235, col: 1, offset: 42685},
			expr: &seqExpr{
				pos: position{line: 1235, col: 32, offset: 42716},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1235, col: 32, offset: 42716},
						expr: &ruleRefExpr{
							pos:  position{line: 1235, col: 33, offset: 42717},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1235, col: 39, offset: 42723},
						expr: &ruleRefExpr{
							pos:  position{line: 1235, col: 39, offset: 42723},
							name: "SingleQuoteBoldTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElement",
			pos:  position{line: 1237, col: 1, offset: 42752},
			expr: &choiceExpr{
				pos: position{line: 1237, col: 31, offset: 42782},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1237, col: 31, offset: 42782},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1238, col: 11, offset: 42797},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1238, col: 11, offset: 42797},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1238, col: 19, offset: 42805},
								expr: &ruleRefExpr{
									pos:  position{line: 1238, col: 20, offset: 42806},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1239, col: 11, offset: 42824},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1240, col: 11, offset: 42854},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1241, col: 11, offset: 42877},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1241, col: 11, offset: 42877},
								expr: &ruleRefExpr{
									pos:  position{line: 1241, col: 11, offset: 42877},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1241, col: 18, offset: 42884},
								expr: &seqExpr{
									pos: position{line: 1241, col: 19, offset: 42885},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1241, col: 19, offset: 42885},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 1241, col: 23, offset: 42889},
											expr: &litMatcher{
												pos:        position{line: 1241, col: 24, offset: 42890},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1242, col: 11, offset: 42906},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1243, col: 11, offset: 42927},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1244, col: 11, offset: 42948},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1245, col: 11, offset: 42972},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1246, col: 11, offset: 42996},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1247, col: 11, offset: 43022},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1248, col: 11, offset: 43111},
						name: "SpecialCharacter",
					},
					&ruleRefExpr{
						pos:  position{line: 1249, col: 11, offset: 43138},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 1250, col: 11, offset: 43155},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1251, col: 11, offset: 43176},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1252, col: 11, offset: 43199},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1253, col: 11, offset: 43216},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1254, col: 11, offset: 43248},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1255, col: 11, offset: 43276},
						name: "SingleQuoteBoldTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 1257, col: 1, offset: 43314},
			expr: &choiceExpr{
				pos: position{line: 1258, col: 5, offset: 43358},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1258, col: 5, offset: 43358},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1259, col: 7, offset: 43455},
						run: (*parser).callonSingleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1259, col: 7, offset: 43455},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1259, col: 7, offset: 43455},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1259, col: 11, offset: 43459},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedBoldText",
			pos:  position{line: 1263, col: 1, offset: 43622},
			expr: &choiceExpr{
				pos: position{line: 1264, col: 5, offset: 43646},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1264, col: 5, offset: 43646},
						run: (*parser).callonEscapedBoldText2,
						expr: &seqExpr{
							pos: position{line: 1264, col: 5, offset: 43646},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1264, col: 5, offset: 43646},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1264, col: 18, offset: 43659},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1264, col: 40, offset: 43681},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1264, col: 45, offset: 43686},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1264, col: 55, offset: 43696},
										name: "DoubleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1264, col: 84, offset: 43725},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1266, col: 9, offset: 43882},
						run: (*parser).callonEscapedBoldText10,
						expr: &seqExpr{
							pos: position{line: 1266, col: 9, offset: 43882},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1266, col: 9, offset: 43882},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1266, col: 22, offset: 43895},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1266, col: 44, offset: 43917},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1266, col: 49, offset: 43922},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1266, col: 59, offset: 43932},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1266, col: 88, offset: 43961},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1269, col: 9, offset: 44161},
						run: (*parser).callonEscapedBoldText18,
						expr: &seqExpr{
							pos: position{line: 1269, col: 9, offset: 44161},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1269, col: 9, offset: 44161},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1269, col: 22, offset: 44174},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1269, col: 44, offset: 44196},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 1269, col: 48, offset: 44200},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1269, col: 58, offset: 44210},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1269, col: 87, offset: 44239},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ItalicText",
			pos:  position{line: 1277, col: 1, offset: 44447},
			expr: &choiceExpr{
				pos: position{line: 1277, col: 15, offset: 44461},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1277, col: 15, offset: 44461},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1277, col: 39, offset: 44485},
						name: "SingleQuoteItalicText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicText",
			pos:  position{line: 1279, col: 1, offset: 44508},
			expr: &actionExpr{
				pos: position{line: 1279, col: 26, offset: 44533},
				run: (*parser).callonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 1279, col: 26, offset: 44533},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1279, col: 26, offset: 44533},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1279, col: 32, offset: 44539},
								expr: &ruleRefExpr{
									pos:  position{line: 1279, col: 33, offset: 44540},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1279, col: 51, offset: 44558},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
						&labeledExpr{
							pos:   position{line: 1279, col: 56, offset: 44563},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1279, col: 66, offset: 44573},
								name: "DoubleQuoteItalicTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1279, col: 97, offset: 44604},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElements",
			pos:  position{line: 1283, col: 1, offset: 44738},
			expr: &seqExpr{
				pos: position{line: 1283, col: 34, offset: 44771},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1283, col: 34, offset: 44771},
						name: "DoubleQuoteItalicTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1283, col: 63, offset: 44800},
						expr: &seqExpr{
							pos: position{line: 1283, col: 64, offset: 44801},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1283, col: 64, offset: 44801},
									expr: &litMatcher{
										pos:        position{line: 1283, col: 66, offset: 44803},
										val:        "__",
										ignoreCase: false,
										want:       "\"__\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1283, col: 73, offset: 44810},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1283, col: 73, offset: 44810},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1283, col: 81, offset: 44818},
											name: "DoubleQuoteItalicTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElement",
			pos:  position{line: 1285, col: 1, offset: 44885},
			expr: &choiceExpr{
				pos: position{line: 1285, col: 33, offset: 44917},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1285, col: 33, offset: 44917},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1286, col: 11, offset: 44932},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1286, col: 11, offset: 44932},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1286, col: 19, offset: 44940},
								expr: &ruleRefExpr{
									pos:  position{line: 1286, col: 20, offset: 44941},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1287, col: 11, offset: 44959},
						name: "SingleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1288, col: 11, offset: 44991},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1289, col: 11, offset: 45014},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1290, col: 11, offset: 45033},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1291, col: 11, offset: 45054},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1292, col: 11, offset: 45078},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1293, col: 11, offset: 45102},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1294, col: 11, offset: 45128},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1295, col: 11, offset: 45217},
						name: "SpecialCharacter",
					},
					&ruleRefExpr{
						pos:  position{line: 1296, col: 11, offset: 45244},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 1297, col: 11, offset: 45261},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1298, col: 11, offset: 45282},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1299, col: 11, offset: 45305},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1300, col: 11, offset: 45321},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1301, col: 11, offset: 45349},
						name: "DoubleQuoteItalicTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1303, col: 1, offset: 45389},
			expr: &choiceExpr{
				pos: position{line: 1304, col: 5, offset: 45435},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1304, col: 5, offset: 45435},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1305, col: 7, offset: 45534},
						run: (*parser).callonDoubleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1305, col: 7, offset: 45534},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1305, col: 7, offset: 45534},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1305, col: 12, offset: 45539},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicText",
			pos:  position{line: 1309, col: 1, offset: 45704},
			expr: &choiceExpr{
				pos: position{line: 1309, col: 26, offset: 45729},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1309, col: 26, offset: 45729},
						run: (*parser).callonSingleQuoteItalicText2,
						expr: &seqExpr{
							pos: position{line: 1309, col: 26, offset: 45729},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1309, col: 26, offset: 45729},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1309, col: 32, offset: 45735},
										expr: &ruleRefExpr{
											pos:  position{line: 1309, col: 33, offset: 45736},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1309, col: 52, offset: 45755},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1309, col: 52, offset: 45755},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1309, col: 56, offset: 45759},
											expr: &litMatcher{
												pos:        position{line: 1309, col: 57, offset: 45760},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1309, col: 62, offset: 45765},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1309, col: 72, offset: 45775},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1309, col: 103, offset: 45806},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1311, col: 5, offset: 45996},
						run: (*parser).callonSingleQuoteItalicText14,
						expr: &seqExpr{
							pos: position{line: 1311, col: 5, offset: 45996},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1311, col: 5, offset: 45996},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1311, col: 11, offset: 46002},
										expr: &ruleRefExpr{
											pos:  position{line: 1311, col: 12, offset: 46003},
											name: "QuotedTextAttrs",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1311, col: 30, offset: 46021},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1311, col: 34, offset: 46025},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1311, col: 44, offset: 46035},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1311, col: 44, offset: 46035},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1311, col: 48, offset: 46039},
												name: "SingleQuoteItalicTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1311, col: 79, offset: 46070},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElements",
			pos:  position{line: 1315, col: 1, offset: 46280},
			expr: &seqExpr{
				pos: position{line: 1315, col: 34, offset: 46313},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1315, col: 34, offset: 46313},
						expr: &ruleRefExpr{
							pos:  position{line: 1315, col: 35, offset: 46314},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1315, col: 41, offset: 46320},
						expr: &ruleRefExpr{
							pos:  position{line: 1315, col: 41, offset: 46320},
							name: "SingleQuoteItalicTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElement",
			pos:  position{line: 1317, col: 1, offset: 46351},
			expr: &choiceExpr{
				pos: position{line: 1317, col: 33, offset: 46383},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1317, col: 33, offset: 46383},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1318, col: 11, offset: 46398},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1318, col: 11, offset: 46398},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1318, col: 19, offset: 46406},
								expr: &ruleRefExpr{
									pos:  position{line: 1318, col: 20, offset: 46407},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1319, col: 11, offset: 46425},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1320, col: 11, offset: 46457},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1321, col: 11, offset: 46480},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1321, col: 11, offset: 46480},
								expr: &ruleRefExpr{
									pos:  position{line: 1321, col: 11, offset: 46480},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1321, col: 18, offset: 46487},
								expr: &seqExpr{
									pos: position{line: 1321, col: 19, offset: 46488},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1321, col: 19, offset: 46488},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1321, col: 23, offset: 46492},
											expr: &litMatcher{
												pos:        position{line: 1321, col: 24, offset: 46493},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1322, col: 11, offset: 46509},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1323, col: 11, offset: 46528},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1324, col: 11, offset: 46549},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1325, col: 11, offset: 46573},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1326, col: 11, offset: 46597},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1327, col: 11, offset: 46623},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1328, col: 11, offset: 46712},
						name: "SpecialCharacter",
					},
					&ruleRefExpr{
						pos:  position{line: 1329, col: 11, offset: 46739},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 1330, col: 11, offset: 46756},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1331, col: 11, offset: 46777},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1332, col: 11, offset: 46800},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1333, col: 11, offset: 46817},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1334, col: 11, offset: 46849},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1335, col: 11, offset: 46877},
						name: "SingleQuoteItalicTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1337, col: 1, offset: 46917},
			expr: &choiceExpr{
				pos: position{line: 1338, col: 5, offset: 46963},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1338, col: 5, offset: 46963},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1339, col: 7, offset: 47062},
						run: (*parser).callonSingleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1339, col: 7, offset: 47062},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1339, col: 7, offset: 47062},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1339, col: 11, offset: 47066},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedItalicText",
			pos:  position{line: 1343, col: 1, offset: 47232},
			expr: &choiceExpr{
				pos: position{line: 1344, col: 5, offset: 47258},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1344, col: 5, offset: 47258},
						run: (*parser).callonEscapedItalicText2,
						expr: &seqExpr{
							pos: position{line: 1344, col: 5, offset: 47258},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1344, col: 5, offset: 47258},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1344, col: 18, offset: 47271},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1344, col: 40, offset: 47293},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1344, col: 45, offset: 47298},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1344, col: 55, offset: 47308},
										name: "DoubleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1344, col: 86, offset: 47339},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1346, col: 9, offset: 47496},
						run: (*parser).callonEscapedItalicText10,
						expr: &seqExpr{
							pos: position{line: 1346, col: 9, offset: 47496},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1346, col: 9, offset: 47496},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1346, col: 22, offset: 47509},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1346, col: 44, offset: 47531},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1346, col: 49, offset: 47536},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1346, col: 59, offset: 47546},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1346, col: 90, offset: 47577},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1349, col: 9, offset: 47777},
						run: (*parser).callonEscapedItalicText18,
						expr: &seqExpr{
							pos: position{line: 1349, col: 9, offset: 47777},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1349, col: 9, offset: 47777},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1349, col: 22, offset: 47790},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1349, col: 44, offset: 47812},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1349, col: 48, offset: 47816},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1349, col: 58, offset: 47826},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1349, col: 89, offset: 47857},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MonospaceText",
			pos:  position{line: 1356, col: 1, offset: 48067},
			expr: &choiceExpr{
				pos: position{line: 1356, col: 18, offset: 48084},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1356, col: 18, offset: 48084},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1356, col: 45, offset: 48111},
						name: "SingleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceText",
			pos:  position{line: 1358, col: 1, offset: 48137},
			expr: &actionExpr{
				pos: position{line: 1358, col: 29, offset: 48165},
				run: (*parser).callonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1358, col: 29, offset: 48165},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1358, col: 29, offset: 48165},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1358, col: 35, offset: 48171},
								expr: &ruleRefExpr{
									pos:  position{line: 1358, col: 36, offset: 48172},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1358, col: 54, offset: 48190},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
						&labeledExpr{
							pos:   position{line: 1358, col: 59, offset: 48195},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1358, col: 69, offset: 48205},
								name: "DoubleQuoteMonospaceTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1358, col: 103, offset: 48239},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElements",
			pos:  position{line: 1362, col: 1, offset: 48376},
			expr: &seqExpr{
				pos: position{line: 1362, col: 37, offset: 48412},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1362, col: 37, offset: 48412},
						name: "DoubleQuoteMonospaceTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1362, col: 69, offset: 48444},
						expr: &seqExpr{
							pos: position{line: 1362, col: 70, offset: 48445},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1362, col: 70, offset: 48445},
									expr: &litMatcher{
										pos:        position{line: 1362, col: 72, offset: 48447},
										val:        "``",
										ignoreCase: false,
										want:       "\"``\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1362, col: 79, offset: 48454},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1362, col: 79, offset: 48454},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1362, col: 87, offset: 48462},
											name: "DoubleQuoteMonospaceTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElement",
			pos:  position{line: 1364, col: 1, offset: 48531},
			expr: &choiceExpr{
				pos: position{line: 1364, col: 36, offset: 48566},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1364, col: 36, offset: 48566},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1365, col: 11, offset: 48581},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1365, col: 11, offset: 48581},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1365, col: 19, offset: 48589},
								expr: &ruleRefExpr{
									pos:  position{line: 1365, col: 20, offset: 48590},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1366, col: 11, offset: 48608},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1367, col: 11, offset: 48631},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1368, col: 11, offset: 48720},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 1369, col: 11, offset: 48737},
						name: "SpecialCharacter",
					},
					&ruleRefExpr{
						pos:  position{line: 1370, col: 11, offset: 48764},
						name: "SingleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1371, col: 11, offset: 48799},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1372, col: 11, offset: 48818},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1373, col: 11, offset: 48839},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1374, col: 11, offset: 48860},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1375, col: 11, offset: 48884},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1376, col: 11, offset: 48910},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1377, col: 11, offset: 48931},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1378, col: 11, offset: 48953},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1379, col: 11, offset: 48968},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1380, col: 11, offset: 48996},
						name: "DoubleQuoteMonospaceTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1382, col: 1, offset: 49039},
			expr: &choiceExpr{
				pos: position{line: 1383, col: 5, offset: 49088},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1383, col: 5, offset: 49088},
						val:        "[^\\r\\n`]",
						chars:      []rune{'\r', '\n', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1384, col: 7, offset: 49190},
						run: (*parser).callonDoubleQuoteMonospaceTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1384, col: 7, offset: 49190},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1384, col: 7, offset: 49190},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1384, col: 12, offset: 49195},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceText",
			pos:  position{line: 1388, col: 1, offset: 49363},
			expr: &choiceExpr{
				pos: position{line: 1388, col: 29, offset: 49391},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1388, col: 29, offset: 49391},
						run: (*parser).callonSingleQuoteMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1388, col: 29, offset: 49391},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1388, col: 29, offset: 49391},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1388, col: 35, offset: 49397},
										expr: &ruleRefExpr{
											pos:  position{line: 1388, col: 36, offset: 49398},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1388, col: 55, offset: 49417},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1388, col: 55, offset: 49417},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1388, col: 59, offset: 49421},
											expr: &litMatcher{
												pos:        position{line: 1388, col: 60, offset: 49422},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1388, col: 65, offset: 49427},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1388, col: 75, offset: 49437},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1388, col: 109, offset: 49471},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1390, col: 5, offset: 49664},
						run: (*parser).callonSingleQuoteMonospaceText14,
						expr: &seqExpr{
							pos: position{line: 1390, col: 5, offset: 49664},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1390, col: 5, offset: 49664},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1390, col: 11, offset: 49670},
										expr: &ruleRefExpr{
											pos:  position{line: 1390, col: 12, offset: 49671},
											name: "QuotedTextAttrs",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1390, col: 30, offset: 49689},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1390, col: 34, offset: 49693},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1390, col: 44, offset: 49703},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1390, col: 44, offset: 49703},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1390, col: 48, offset: 49707},
												name: "SingleQuoteMonospaceTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1390, col: 82, offset: 49741},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElements",
			pos:  position{line: 1394, col: 1, offset: 49955},
			expr: &seqExpr{
				pos: position{line: 1394, col: 37, offset: 49991},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1394, col: 37, offset: 49991},
						expr: &ruleRefExpr{
							pos:  position{line: 1394, col: 38, offset: 49992},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1394, col: 44, offset: 49998},
						expr: &ruleRefExpr{
							pos:  position{line: 1394, col: 44, offset: 49998},
							name: "SingleQuoteMonospaceTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElement",
			pos:  position{line: 1396, col: 1, offset: 50032},
			expr: &choiceExpr{
				pos: position{line: 1396, col: 37, offset: 50068},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1396, col: 37, offset: 50068},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1397, col: 11, offset: 50083},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1397, col: 11, offset: 50083},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1397, col: 19, offset: 50091},
								expr: &ruleRefExpr{
									pos:  position{line: 1397, col: 20, offset: 50092},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1398, col: 11, offset: 50110},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1399, col: 11, offset: 50145},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1400, col: 11, offset: 50168},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1400, col: 11, offset: 50168},
								expr: &ruleRefExpr{
									pos:  position{line: 1400, col: 11, offset: 50168},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1400, col: 18, offset: 50175},
								expr: &seqExpr{
									pos: position{line: 1400, col: 19, offset: 50176},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1400, col: 19, offset: 50176},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1400, col: 23, offset: 50180},
											expr: &litMatcher{
												pos:        position{line: 1400, col: 24, offset: 50181},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1401, col: 11, offset: 50309},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1402, col: 11, offset: 50328},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1403, col: 11, offset: 50349},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1404, col: 11, offset: 50370},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1405, col: 11, offset: 50394},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1406, col: 11, offset: 50420},
						name: "InlinePassthrough",
					},
					&seqExpr{
						pos: position{line: 1407, col: 11, offset: 50509},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1407, col: 11, offset: 50509},
								expr: &litMatcher{
									pos:        position{line: 1407, col: 12, offset: 50510},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1407, col: 16, offset: 50514},
								name: "Symbol",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1408, col: 11, offset: 50531},
						name: "SpecialCharacter",
					},
					&ruleRefExpr{
						pos:  position{line: 1409, col: 11, offset: 50558},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1410, col: 11, offset: 50579},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1411, col: 11, offset: 50602},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1412, col: 11, offset: 50618},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1413, col: 11, offset: 50650},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1414, col: 11, offset: 50678},
						name: "SingleQuoteMonospaceTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1416, col: 1, offset: 50721},
			expr: &choiceExpr{
				pos: position{line: 1417, col: 5, offset: 50770},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1417, col: 5, offset: 50770},
						val:        "[^\\r\\n`]",
						chars:      []rune{'\r', '\n', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1418, col: 7, offset: 50872},
						run: (*parser).callonSingleQuoteMonospaceTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1418, col: 7, offset: 50872},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1418, col: 7, offset: 50872},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1418, col: 11, offset: 50876},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMonospaceText",
			pos:  position{line: 1422, col: 1, offset: 51045},
			expr: &choiceExpr{
				pos: position{line: 1423, col: 5, offset: 51074},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1423, col: 5, offset: 51074},
						run: (*parser).callonEscapedMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1423, col: 5, offset: 51074},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1423, col: 5, offset: 51074},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1423, col: 18, offset: 51087},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1423, col: 40, offset: 51109},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1423, col: 45, offset: 51114},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1423, col: 55, offset: 51124},
										name: "DoubleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1423, col: 89, offset: 51158},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1425, col: 9, offset: 51315},
						run: (*parser).callonEscapedMonospaceText10,
						expr: &seqExpr{
							pos: position{line: 1425, col: 9, offset: 51315},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1425, col: 9, offset: 51315},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1425, col: 22, offset: 51328},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1425, col: 44, offset: 51350},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1425, col: 49, offset: 51355},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1425, col: 59, offset: 51365},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1425, col: 93, offset: 51399},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1428, col: 9, offset: 51599},
						run: (*parser).callonEscapedMonospaceText18,
						expr: &seqExpr{
							pos: position{line: 1428, col: 9, offset: 51599},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1428, col: 9, offset: 51599},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1428, col: 22, offset: 51612},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1428, col: 44, offset: 51634},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1428, col: 48, offset: 51638},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1428, col: 58, offset: 51648},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1428, col: 92, offset: 51682},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkedText",
			pos:  position{line: 1436, col: 1, offset: 51890},
			expr: &choiceExpr{
				pos: position{line: 1436, col: 15, offset: 51904},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1436, col: 15, offset: 51904},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1436, col: 39, offset: 51928},
						name: "SingleQuoteMarkedText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedText",
			pos:  position{line: 1438, col: 1, offset: 51951},
			expr: &actionExpr{
				pos: position{line: 1438, col: 26, offset: 51976},
				run: (*parser).callonDoubleQuoteMarkedText1,
				expr: &seqExpr{
					pos: position{line: 1438, col: 26, offset: 51976},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1438, col: 26, offset: 51976},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1438, col: 32, offset: 51982},
								expr: &ruleRefExpr{
									pos:  position{line: 1438, col: 33, offset: 51983},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1438, col: 51, offset: 52001},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
						&labeledExpr{
							pos:   position{line: 1438, col: 56, offset: 52006},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1438, col: 66, offset: 52016},
								name: "DoubleQuoteMarkedTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1438, col: 97, offset: 52047},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElements",
			pos:  position{line: 1442, col: 1, offset: 52181},
			expr: &seqExpr{
				pos: position{line: 1442, col: 34, offset: 52214},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1442, col: 34, offset: 52214},
						name: "DoubleQuoteMarkedTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1442, col: 63, offset: 52243},
						expr: &seqExpr{
							pos: position{line: 1442, col: 64, offset: 52244},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1442, col: 64, offset: 52244},
									expr: &litMatcher{
										pos:        position{line: 1442, col: 66, offset: 52246},
										val:        "##",
										ignoreCase: false,
										want:       "\"##\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1442, col: 73, offset: 52253},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1442, col: 73, offset: 52253},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1442, col: 81, offset: 52261},
											name: "DoubleQuoteMarkedTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElement",
			pos:  position{line: 1444, col: 1, offset: 52328},
			expr: &choiceExpr{
				pos: position{line: 1444, col: 33, offset: 52360},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1444, col: 33, offset: 52360},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 1445, col: 11, offset: 52375},
						name: "SingleQuoteMarkedText",
					},
					&seqExpr{
						pos: position{line: 1446, col: 11, offset: 52407},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1446, col: 11, offset: 52407},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1446, col: 19, offset: 52415},
								expr: &ruleRefExpr{
									pos:  position{line: 1446, col: 20, offset: 52416},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1447, col: 11, offset: 52434},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1448, col: 11, offset: 52457},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1449, col: 11, offset: 52476},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1450, col: 11, offset: 52497},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1451, col: 11, offset: 52521},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1452, col: 11, offset: 52545},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1453, col: 11, offset: 52571},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1454, col: 11, offset: 52660},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 1455, col: 11, offset: 52677},
						name: "SpecialCharacter",
					},
					&ruleRefExpr{
						pos:  position{line: 1456, col: 11, offset: 52704},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1457, col: 11, offset: 52725},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1458, col: 11, offset: 52747},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1459, col: 11, offset: 52762},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1460, col: 11, offset: 52790},
						name: "DoubleQuoteMarkedTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextFallbackCharacter",
			pos:  position{line: 1462, col: 1, offset: 52830},
			expr: &choiceExpr{
				pos: position{line: 1463, col: 5, offset: 52876},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1463, col: 5, offset: 52876},
						val:        "[^\\r\\n#]",
						chars:      []rune{'\r', '\n', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1464, col: 7, offset: 52975},
						run: (*parser).callonDoubleQuoteMarkedTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1464, col: 7, offset: 52975},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1464, col: 7, offset: 52975},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1464, col: 12, offset: 52980},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedText",
			pos:  position{line: 1468, col: 1, offset: 53145},
			expr: &choiceExpr{
				pos: position{line: 1468, col: 26, offset: 53170},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1468, col: 26, offset: 53170},
						run: (*parser).callonSingleQuoteMarkedText2,
						expr: &seqExpr{
							pos: position{line: 1468, col: 26, offset: 53170},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1468, col: 26, offset: 53170},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1468, col: 32, offset: 53176},
										expr: &ruleRefExpr{
											pos:  position{line: 1468, col: 33, offset: 53177},
											name: "QuotedTextAttrs",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1468, col: 52, offset: 53196},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1468, col: 52, offset: 53196},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
										&notExpr{
											pos: position{line: 1468, col: 56, offset: 53200},
											expr: &litMatcher{
												pos:        position{line: 1468, col: 57, offset: 53201},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1468, col: 62, offset: 53206},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1468, col: 72, offset: 53216},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1468, col: 103, offset: 53247},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1470, col: 5, offset: 53437},
						run: (*parser).callonSingleQuoteMarkedText14,
						expr: &seqExpr{
							pos: position{line: 1470, col: 5, offset: 53437},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1470, col: 5, offset: 53437},
									label: "attrs",
									expr: &zeroOrOneExpr{
										pos: position{line: 1470, col: 11, offset: 53443},
										expr: &ruleRefExpr{
											pos:  position{line: 1470, col: 12, offset: 53444},
											name: "QuotedTextAttrs",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1470, col: 30, offset: 53462},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1470, col: 34, offset: 53466},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1470, col: 44, offset: 53476},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1470, col: 44, offset: 53476},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1470, col: 48, offset: 53480},
												name: "SingleQuoteMarkedTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1470, col: 79, offset: 53511},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElements",
			pos:  position{line: 1474, col: 1, offset: 53720},
			expr: &seqExpr{
				pos: position{line: 1474, col: 34, offset: 53753},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1474, col: 34, offset: 53753},
						expr: &ruleRefExpr{
							pos:  position{line: 1474, col: 35, offset: 53754},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1474, col: 41, offset: 53760},
						expr: &ruleRefExpr{
							pos:  position{line: 1474, col: 41, offset: 53760},
							name: "SingleQuoteMarkedTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElement",
			pos:  position{line: 1476, col: 1, offset: 53791},
			expr: &choiceExpr{
				pos: position{line: 1476, col: 33, offset: 53823},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1476, col: 33, offset: 53823},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 1477, col: 11, offset: 53838},
						name: "DoubleQuoteMarkedText",
					},
					&seqExpr{
						pos: position{line: 1478, col: 11, offset: 53870},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1478, col: 11, offset: 53870},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1478, col: 19, offset: 53878},
								expr: &ruleRefExpr{
									pos:  position{line: 1478, col: 20, offset: 53879},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1479, col: 11, offset: 53897},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1480, col: 11, offset: 53920},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1480, col: 11, offset: 53920},
								expr: &ruleRefExpr{
									pos:  position{line: 1480, col: 11, offset: 53920},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1480, col: 18, offset: 53927},
								expr: &seqExpr{
									pos: position{line: 1480, col: 19, offset: 53928},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1480, col: 19, offset: 53928},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
										&notExpr{
											pos: position{line: 1480, col: 23, offset: 53932},
											expr: &litMatcher{
												pos:        position{line: 1480, col: 24, offset: 53933},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1481, col: 11, offset: 53949},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1482, col: 11, offset: 53968},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1483, col: 11, offset: 53989},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1484, col: 11, offset: 54013},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1485, col: 11, offset: 54037},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1486, col: 11, offset: 54063},
						name: "Symbol",
					},
					&ruleRefExpr{
						pos:  position{line: 1487, col: 11, offset: 54080},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1488, col: 11, offset: 54169},
						name: "SpecialCharacter",
					},
					&ruleRefExpr{
						pos:  position{line: 1489, col: 11, offset: 54196},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1490, col: 11, offset: 54217},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1491, col: 11, offset: 54239},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1492, col: 11, offset: 54254},
						name: "AttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1493, col: 11, offset: 54286},
						name: "ImpliedApostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 1494, col: 11, offset: 54314},
						name: "SingleQuoteMarkedTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextFallbackCharacter",
			pos:  position{line: 1496, col: 1, offset: 54354},
			expr: &choiceExpr{
				pos: position{line: 1497, col: 5, offset: 54400},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1497, col: 5, offset: 54400},
						val:        "[^\\r\\n#]",
						chars:      []rune{'\r', '\n', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1498, col: 7, offset: 54497},
						run: (*parser).callonSingleQuoteMarkedTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1498, col: 7, offset: 54497},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1498, col: 7, offset: 54497},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1498, col: 11, offset: 54501},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMarkedText",
			pos:  position{line: 1502, col: 1, offset: 54664},
			expr: &choiceExpr{
				pos: position{line: 1503, col: 5, offset: 54689},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1503, col: 5, offset: 54689},
						run: (*parser).callonEscapedMarkedText2,
						expr: &seqExpr{
							pos: position{line: 1503, col: 5, offset: 54689},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1503, col: 5, offset: 54689},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1503, col: 18, offset: 54702},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1503, col: 40, offset: 54724},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 1503, col: 45, offset: 54729},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1503, col: 55, offset: 54739},
										name: "DoubleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1503, col: 86, offset: 54770},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1505, col: 9, offset: 54927},
						run: (*parser).callonEscapedMarkedText10,
						expr: &seqExpr{
							pos: position{line: 1505, col: 9, offset: 54927},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1505, col: 9, offset: 54927},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1505, col: 22, offset: 54940},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1505, col: 44, offset: 54962},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 1505, col: 49, offset: 54967},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1505, col: 59, offset: 54977},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1505, col: 90, offset: 55008},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1508, col: 9, offset: 55208},
						run: (*parser).callonEscapedMarkedText18,
						expr: &seqExpr{
							pos: position{line: 1508, col: 9, offset: 55208},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1508, col: 9, offset: 55208},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1508, col: 22, offset: 55221},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1508, col: 44, offset: 55243},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1508, col: 48, offset: 55247},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1508, col: 58, offset: 55257},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1508, col: 89, offset: 55288},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptText",
			pos:  position{line: 1513, col: 1, offset: 55438},
			expr: &actionExpr{
				pos: position{line: 1513, col: 18, offset: 55455},
				run: (*parser).callonSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1513, col: 18, offset: 55455},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1513, col: 18, offset: 55455},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1513, col: 24, offset: 55461},
								expr: &ruleRefExpr{
									pos:  position{line: 1513, col: 25, offset: 55462},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1513, col: 43, offset: 55480},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1513, col: 47, offset: 55484},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1513, col: 56, offset: 55493},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1513, col: 78, offset: 55515},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SubscriptTextElement",
			pos:  position{line: 1517, col: 1, offset: 55611},
			expr: &choiceExpr{
				pos: position{line: 1517, col: 25, offset: 55635},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1517, col: 25, offset: 55635},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1517, col: 38, offset: 55648},
						name: "NonSubscriptText",
					},
				},
			},
		},
		{
			name: "NonSubscriptText",
			pos:  position{line: 1519, col: 1, offset: 55667},
			expr: &actionExpr{
				pos: position{line: 1519, col: 21, offset: 55687},
				run: (*parser).callonNonSubscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1519, col: 21, offset: 55687},
					expr: &charClassMatcher{
						pos:        position{line: 1519, col: 21, offset: 55687},
						val:        "[^\\r\\n ~]",
						chars:      []rune{'\r', '\n', ' ', '~'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSubscriptText",
			pos:  position{line: 1523, col: 1, offset: 55764},
			expr: &actionExpr{
				pos: position{line: 1523, col: 25, offset: 55788},
				run: (*parser).callonEscapedSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1523, col: 25, offset: 55788},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1523, col: 25, offset: 55788},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1523, col: 38, offset: 55801},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1523, col: 60, offset: 55823},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1523, col: 64, offset: 55827},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1523, col: 73, offset: 55836},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1523, col: 95, offset: 55858},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptText",
			pos:  position{line: 1527, col: 1, offset: 55987},
			expr: &actionExpr{
				pos: position{line: 1527, col: 20, offset: 56006},
				run: (*parser).callonSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1527, col: 20, offset: 56006},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1527, col: 20, offset: 56006},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1527, col: 26, offset: 56012},
								expr: &ruleRefExpr{
									pos:  position{line: 1527, col: 27, offset: 56013},
									name: "QuotedTextAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1527, col: 45, offset: 56031},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1527, col: 49, offset: 56035},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1527, col: 58, offset: 56044},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1527, col: 82, offset: 56068},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptTextElement",
			pos:  position{line: 1531, col: 1, offset: 56166},
			expr: &choiceExpr{
				pos: position{line: 1531, col: 27, offset: 56192},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1531, col: 27, offset: 56192},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1531, col: 40, offset: 56205},
						name: "NonSuperscriptText",
					},
				},
			},
		},
		{
			name: "NonSuperscriptText",
			pos:  position{line: 1533, col: 1, offset: 56226},
			expr: &actionExpr{
				pos: position{line: 1533, col: 23, offset: 56248},
				run: (*parser).callonNonSuperscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1533, col: 23, offset: 56248},
					expr: &charClassMatcher{
						pos:        position{line: 1533, col: 23, offset: 56248},
						val:        "[^\\r\\n ^]",
						chars:      []rune{'\r', '\n', ' ', '^'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSuperscriptText",
			pos:  position{line: 1537, col: 1, offset: 56325},
			expr: &actionExpr{
				pos: position{line: 1537, col: 27, offset: 56351},
				run: (*parser).callonEscapedSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1537, col: 27, offset: 56351},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1537, col: 27, offset: 56351},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1537, col: 40, offset: 56364},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1537, col: 62, offset: 56386},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1537, col: 66, offset: 56390},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1537, col: 75, offset: 56399},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1537, col: 99, offset: 56423},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "InlinePassthrough",
			pos:  position{line: 1544, col: 1, offset: 56665},
			expr: &choiceExpr{
				pos: position{line: 1544, col: 22, offset: 56686},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1544, col: 22, offset: 56686},
						name: "TriplePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1544, col: 46, offset: 56710},
						name: "SinglePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1544, col: 70, offset: 56734},
						name: "PassthroughMacro",
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughPrefix",
			pos:  position{line: 1546, col: 1, offset: 56752},
			expr: &litMatcher{
				pos:        position{line: 1546, col: 32, offset: 56783},
				val:        "+",
				ignoreCase: false,
				want:       "\"+\"",
			},
		},
		{
			name: "SinglePlusPassthrough",
			pos:  position{line: 1548, col: 1, offset: 56788},
			expr: &actionExpr{
				pos: position{line: 1548, col: 26, offset: 56813},
				run: (*parser).callonSinglePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1548, col: 26, offset: 56813},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1548, col: 26, offset: 56813},
							name: "SinglePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1548, col: 54, offset: 56841},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1548, col: 63, offset: 56850},
								name: "SinglePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1548, col: 93, offset: 56880},
							name: "SinglePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1548, col: 121, offset: 56908},
							expr: &ruleRefExpr{
								pos:  position{line: 1548, col: 122, offset: 56909},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughContent",
			pos:  position{line: 1552, col: 1, offset: 57014},
			expr: &choiceExpr{
				pos: position{line: 1552, col: 33, offset: 57046},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1552, col: 34, offset: 57047},
						run: (*parser).callonSinglePlusPassthroughContent2,
						expr: &seqExpr{
							pos: position{line: 1552, col: 34, offset: 57047},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1552, col: 35, offset: 57048},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1552, col: 35, offset: 57048},
											expr: &ruleRefExpr{
												pos:  position{line: 1552, col: 36, offset: 57049},
												name: "SinglePlusPassthroughPrefix",
											},
										},
										&notExpr{
											pos: position{line: 1552, col: 64, offset: 57077},
											expr: &ruleRefExpr{
												pos:  position{line: 1552, col: 65, offset: 57078},
												name: "Space",
											},
										},
										&notExpr{
											pos: position{line: 1552, col: 71, offset: 57084},
											expr: &ruleRefExpr{
												pos:  position{line: 1552, col: 72, offset: 57085},
												name: "Newline",
											},
										},
										&anyMatcher{
											line: 1552, col: 80, offset: 57093,
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1552, col: 83, offset: 57096},
									expr: &seqExpr{
										pos: position{line: 1552, col: 84, offset: 57097},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1552, col: 84, offset: 57097},
												expr: &seqExpr{
													pos: position{line: 1552, col: 86, offset: 57099},
													exprs: []interface{}{
														&oneOrMoreExpr{
															pos: position{line: 1552, col: 86, offset: 57099},
															expr: &ruleRefExpr{
																pos:  position{line: 1552, col: 86, offset: 57099},
																name: "Space",
															},
														},
														&ruleRefExpr{
															pos:  position{line: 1552, col: 93, offset: 57106},
															name: "SinglePlusPassthroughPrefix",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 1552, col: 122, offset: 57135},
												expr: &ruleRefExpr{
													pos:  position{line: 1552, col: 123, offset: 57136},
													name: "SinglePlusPassthroughPrefix",
												},
											},
											&notExpr{
												pos: position{line: 1552, col: 151, offset: 57164},
												expr: &ruleRefExpr{
													pos:  position{line: 1552, col: 152, offset: 57165},
													name: "Newline",
												},
											},
											&anyMatcher{
												line: 1552, col: 160, offset: 57173,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1554, col: 7, offset: 57315},
						run: (*parser).callonSinglePlusPassthroughContent24,
						expr: &seqExpr{
							pos: position{line: 1554, col: 8, offset: 57316},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1554, col: 8, offset: 57316},
									expr: &ruleRefExpr{
										pos:  position{line: 1554, col: 9, offset: 57317},
										name: "Space",
									},
								},
								&notExpr{
									pos: position{line: 1554, col: 15, offset: 57323},
									expr: &ruleRefExpr{
										pos:  position{line: 1554, col: 16, offset: 57324},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 1554, col: 24, offset: 57332},
									expr: &ruleRefExpr{
										pos:  position{line: 1554, col: 25, offset: 57333},
										name: "SinglePlusPassthroughPrefix",
									},
								},
								&anyMatcher{
									line: 1554, col: 53, offset: 57361,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughPrefix",
			pos:  position{line: 1558, col: 1, offset: 57443},
			expr: &litMatcher{
				pos:        position{line: 1558, col: 32, offset: 57474},
				val:        "+++",
				ignoreCase: false,
				want:       "\"+++\"",
			},
		},
		{
			name: "TriplePlusPassthrough",
			pos:  position{line: 1560, col: 1, offset: 57481},
			expr: &actionExpr{
				pos: position{line: 1560, col: 26, offset: 57506},
				run: (*parser).callonTriplePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1560, col: 26, offset: 57506},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1560, col: 26, offset: 57506},
							name: "TriplePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1560, col: 54, offset: 57534},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1560, col: 63, offset: 57543},
								name: "TriplePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1560, col: 93, offset: 57573},
							name: "TriplePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1560, col: 121, offset: 57601},
							expr: &ruleRefExpr{
								pos:  position{line: 1560, col: 122, offset: 57602},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughContent",
			pos:  position{line: 1564, col: 1, offset: 57707},
			expr: &choiceExpr{
				pos: position{line: 1564, col: 33, offset: 57739},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1564, col: 34, offset: 57740},
						run: (*parser).callonTriplePlusPassthroughContent2,
						expr: &zeroOrMoreExpr{
							pos: position{line: 1564, col: 34, offset: 57740},
							expr: &seqExpr{
								pos: position{line: 1564, col: 35, offset: 57741},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1564, col: 35, offset: 57741},
										expr: &ruleRefExpr{
											pos:  position{line: 1564, col: 36, offset: 57742},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1564, col: 64, offset: 57770,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1566, col: 7, offset: 57935},
						run: (*parser).callonTriplePlusPassthroughContent8,
						expr: &zeroOrOneExpr{
							pos: position{line: 1566, col: 7, offset: 57935},
							expr: &seqExpr{
								pos: position{line: 1566, col: 8, offset: 57936},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1566, col: 8, offset: 57936},
										expr: &ruleRefExpr{
											pos:  position{line: 1566, col: 9, offset: 57937},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 1566, col: 15, offset: 57943},
										expr: &ruleRefExpr{
											pos:  position{line: 1566, col: 16, offset: 57944},
											name: "Newline",
										},
									},
									&notExpr{
										pos: position{line: 1566, col: 24, offset: 57952},
										expr: &ruleRefExpr{
											pos:  position{line: 1566, col: 25, offset: 57953},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1566, col: 53, offset: 57981,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacro",
			pos:  position{line: 1570, col: 1, offset: 58064},
			expr: &choiceExpr{
				pos: position{line: 1570, col: 21, offset: 58084},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1570, col: 21, offset: 58084},
						run: (*parser).callonPassthroughMacro2,
						expr: &seqExpr{
							pos: position{line: 1570, col: 21, offset: 58084},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1570, col: 21, offset: 58084},
									val:        "pass:[",
									ignoreCase: false,
									want:       "\"pass:[\"",
								},
								&labeledExpr{
									pos:   position{line: 1570, col: 30, offset: 58093},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1570, col: 38, offset: 58101},
										expr: &ruleRefExpr{
											pos:  position{line: 1570, col: 39, offset: 58102},
											name: "PassthroughMacroCharacter",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1570, col: 67, offset: 58130},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1572, col: 5, offset: 58226},
						run: (*parser).callonPassthroughMacro9,
						expr: &seqExpr{
							pos: position{line: 1572, col: 5, offset: 58226},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1572, col: 5, offset: 58226},
									val:        "pass:q[",
									ignoreCase: false,
									want:       "\"pass:q[\"",
								},
								&labeledExpr{
									pos:   position{line: 1572, col: 15, offset: 58236},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1572, col: 23, offset: 58244},
										expr: &choiceExpr{
											pos: position{line: 1572, col: 24, offset: 58245},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1572, col: 24, offset: 58245},
													name: "QuotedText",
												},
												&ruleRefExpr{
													pos:  position{line: 1572, col: 37, offset: 58258},
													name: "PassthroughMacroCharacter",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1572, col: 65, offset: 58286},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacroCharacter",
			pos:  position{line: 1576, col: 1, offset: 58382},
			expr: &actionExpr{
				pos: position{line: 1576, col: 30, offset: 58411},
				run: (*parser).callonPassthroughMacroCharacter1,
				expr: &charClassMatcher{
					pos:        position{line: 1576, col: 30, offset: 58411},
					val:        "[^\\]]",
					chars:      []rune{']'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "CrossReference",
			pos:  position{line: 1583, col: 1, offset: 58584},
			expr: &choiceExpr{
				pos: position{line: 1583, col: 19, offset: 58602},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1583, col: 19, offset: 58602},
						name: "InternalCrossReference",
					},
					&ruleRefExpr{
						pos:  position{line: 1583, col: 44, offset: 58627},
						name: "ExternalCrossReference",
					},
				},
			},
		},
		{
			name: "InternalCrossReference",
			pos:  position{line: 1585, col: 1, offset: 58652},
			expr: &choiceExpr{
				pos: position{line: 1585, col: 27, offset: 58678},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1585, col: 27, offset: 58678},
						run: (*parser).callonInternalCrossReference2,
						expr: &seqExpr{
							pos: position{line: 1585, col: 27, offset: 58678},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1585, col: 27, offset: 58678},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 1585, col: 32, offset: 58683},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1585, col: 36, offset: 58687},
										name: "ID",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1585, col: 40, offset: 58691},
									expr: &ruleRefExpr{
										pos:  position{line: 1585, col: 40, offset: 58691},
										name: "Space",
									},
								},
								&litMatcher{
									pos:        position{line: 1585, col: 47, offset: 58698},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&labeledExpr{
									pos:   position{line: 1585, col: 51, offset: 58702},
									label: "label",
									expr: &ruleRefExpr{
										pos:  position{line: 1585, col: 58, offset: 58709},
										name: "CrossReferenceLabel",
									},
								},
								&litMatcher{
									pos:        position{line: 1585, col: 79, offset: 58730},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1587, col: 5, offset: 58813},
						run: (*parser).callonInternalCrossReference13,
						expr: &seqExpr{
							pos: position{line: 1587, col: 5, offset: 58813},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1587, col: 5, offset: 58813},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 1587, col: 10, offset: 58818},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1587, col: 14, offset: 58822},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 1587, col: 18, offset: 58826},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalCrossReference",
			pos:  position{line: 1591, col: 1, offset: 58898},
			expr: &actionExpr{
				pos: position{line: 1591, col: 27, offset: 58924},
				run: (*parser).callonExternalCrossReference1,
				expr: &seqExpr{
					pos: position{line: 1591, col: 27, offset: 58924},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1591, col: 27, offset: 58924},
							val:        "xref:",
							ignoreCase: false,
							want:       "\"xref:\"",
						},
						&labeledExpr{
							pos:   position{line: 1591, col: 35, offset: 58932},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1591, col: 40, offset: 58937},
								name: "FileLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 1591, col: 54, offset: 58951},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1591, col: 72, offset: 58969},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReferenceLabel",
			pos:  position{line: 1595, col: 1, offset: 59092},
			expr: &ruleRefExpr{
				pos:  position{line: 1595, col: 24, offset: 59115},
				name: "ElementTitleContent",
			},
		},
		{
			name: "Link",
			pos:  position{line: 1600, col: 1, offset: 59237},
			expr: &choiceExpr{
				pos: position{line: 1600, col: 9, offset: 59245},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1600, col: 9, offset: 59245},
						name: "RelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1600, col: 24, offset: 59260},
						name: "ExternalLink",
					},
				},
			},
		},
		{
			name: "RelativeLink",
			pos:  position{line: 1603, col: 1, offset: 59341},
			expr: &actionExpr{
				pos: position{line: 1603, col: 17, offset: 59357},
				run: (*parser).callonRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1603, col: 17, offset: 59357},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1603, col: 17, offset: 59357},
							val:        "link:",
							ignoreCase: false,
							want:       "\"link:\"",
						},
						&labeledExpr{
							pos:   position{line: 1603, col: 25, offset: 59365},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1603, col: 30, offset: 59370},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1603, col: 40, offset: 59380},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1603, col: 58, offset: 59398},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalLink",
			pos:  position{line: 1607, col: 1, offset: 59509},
			expr: &actionExpr{
				pos: position{line: 1607, col: 17, offset: 59525},
				run: (*parser).callonExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1607, col: 17, offset: 59525},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1607, col: 17, offset: 59525},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1607, col: 22, offset: 59530},
								name: "LocationWithScheme",
							},
						},
						&labeledExpr{
							pos:   position{line: 1607, col: 42, offset: 59550},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1607, col: 59, offset: 59567},
								expr: &ruleRefExpr{
									pos:  position{line: 1607, col: 60, offset: 59568},
									name: "LinkAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LinkAttributes",
			pos:  position{line: 1611, col: 1, offset: 59661},
			expr: &actionExpr{
				pos: position{line: 1611, col: 19, offset: 59679},
				run: (*parser).callonLinkAttributes1,
				expr: &seqExpr{
					pos: position{line: 1611, col: 19, offset: 59679},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1611, col: 19, offset: 59679},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1611, col: 23, offset: 59683},
							label: "firstAttr",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1611, col: 33, offset: 59693},
								expr: &ruleRefExpr{
									pos:  position{line: 1611, col: 34, offset: 59694},
									name: "FirstLinkAttributeElement",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1612, col: 5, offset: 59726},
							expr: &ruleRefExpr{
								pos:  position{line: 1612, col: 5, offset: 59726},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1612, col: 12, offset: 59733},
							label: "otherattrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1612, col: 23, offset: 59744},
								expr: &ruleRefExpr{
									pos:  position{line: 1612, col: 24, offset: 59745},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1612, col: 43, offset: 59764},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FirstLinkAttributeElement",
			pos:  position{line: 1616, col: 1, offset: 59881},
			expr: &actionExpr{
				pos: position{line: 1616, col: 30, offset: 59910},
				run: (*parser).callonFirstLinkAttributeElement1,
				expr: &labeledExpr{
					pos:   position{line: 1616, col: 30, offset: 59910},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1618, col: 5, offset: 59961},
						alternatives: []interface{}{
							&actionExpr{
								pos: position{line: 1618, col: 6, offset: 59962},
								run: (*parser).callonFirstLinkAttributeElement4,
								expr: &seqExpr{
									pos: position{line: 1618, col: 6, offset: 59962},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1618, col: 6, offset: 59962},
											val:        "\"",
											ignoreCase: false,
											want:       "\"\\\"\"",
										},
										&labeledExpr{
											pos:   position{line: 1618, col: 11, offset: 59967},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 1618, col: 20, offset: 59976},
												expr: &choiceExpr{
													pos: position{line: 1618, col: 21, offset: 59977},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1618, col: 21, offset: 59977},
															name: "QuotedString",
														},
														&ruleRefExpr{
															pos:  position{line: 1618, col: 36, offset: 59992},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1618, col: 49, offset: 60005},
															name: "QuotedAttributeChar",
														},
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 1618, col: 71, offset: 60027},
											val:        "\"",
											ignoreCase: false,
											want:       "\"\\\"\"",
										},
										&andExpr{
											pos: position{line: 1618, col: 76, offset: 60032},
											expr: &notExpr{
												pos: position{line: 1618, col: 78, offset: 60034},
												expr: &litMatcher{
													pos:        position{line: 1618, col: 79, offset: 60035},
													val:        "=",
													ignoreCase: false,
													want:       "\"=\"",
												},
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 1618, col: 84, offset: 60040},
											expr: &litMatcher{
												pos:        position{line: 1618, col: 84, offset: 60040},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
										},
									},
								},
							},
							&actionExpr{
								pos: position{line: 1622, col: 6, offset: 60167},
								run: (*parser).callonFirstLinkAttributeElement19,
								expr: &seqExpr{
									pos: position{line: 1622, col: 6, offset: 60167},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 1622, col: 6, offset: 60167},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 1622, col: 15, offset: 60176},
												expr: &choiceExpr{
													pos: position{line: 1622, col: 16, offset: 60177},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1622, col: 16, offset: 60177},
															name: "QuotedString",
														},
														&ruleRefExpr{
															pos:  position{line: 1622, col: 31, offset: 60192},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1622, col: 44, offset: 60205},
															name: "UnquotedAttributeChar",
														},
													},
												},
											},
										},
										&andExpr{
											pos: position{line: 1622, col: 68, offset: 60229},
											expr: &notExpr{
												pos: position{line: 1622, col: 70, offset: 60231},
												expr: &litMatcher{
													pos:        position{line: 1622, col: 71, offset: 60232},
													val:        "=",
													ignoreCase: false,
													want:       "\"=\"",
												},
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 1622, col: 76, offset: 60237},
											expr: &litMatcher{
												pos:        position{line: 1622, col: 76, offset: 60237},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeChar",
			pos:  position{line: 1628, col: 1, offset: 60351},
			expr: &actionExpr{
				pos: position{line: 1628, col: 18, offset: 60368},
				run: (*parser).callonAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1628, col: 18, offset: 60368},
					val:        "[^\\r\\n\"=\\],]",
					chars:      []rune{'\r', '\n', '"', '=', ']', ','},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "QuotedAttributeChar",
			pos:  position{line: 1632, col: 1, offset: 60454},
			expr: &actionExpr{
				pos: position{line: 1632, col: 24, offset: 60477},
				run: (*parser).callonQuotedAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1632, col: 24, offset: 60477},
					val:        "[^\\r\\n\"=\\]]",
					chars:      []rune{'\r', '\n', '"', '=', ']'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "UnquotedAttributeChar",
			pos:  position{line: 1636, col: 1, offset: 60570},
			expr: &actionExpr{
				pos: position{line: 1636, col: 26, offset: 60595},
				run: (*parser).callonUnquotedAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1636, col: 26, offset: 60595},
					val:        "[^\\r\\n\"=\\],]",
					chars:      []rune{'\r', '\n', '"', '=', ']', ','},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "InlineLinks",
			pos:  position{line: 1641, col: 1, offset: 60751},
			expr: &actionExpr{
				pos: position{line: 1642, col: 5, offset: 60770},
				run: (*parser).callonInlineLinks1,
				expr: &seqExpr{
					pos: position{line: 1642, col: 5, offset: 60770},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1642, col: 5, offset: 60770},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1642, col: 14, offset: 60779},
								expr: &choiceExpr{
									pos: position{line: 1642, col: 15, offset: 60780},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1642, col: 15, offset: 60780},
											name: "Word",
										},
										&ruleRefExpr{
											pos:  position{line: 1643, col: 11, offset: 60795},
											name: "Symbol",
										},
										&ruleRefExpr{
											pos:  position{line: 1644, col: 11, offset: 60812},
											name: "SpecialCharacter",
										},
										&oneOrMoreExpr{
											pos: position{line: 1645, col: 11, offset: 60839},
											expr: &ruleRefExpr{
												pos:  position{line: 1645, col: 11, offset: 60839},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1646, col: 11, offset: 60857},
											name: "ResolvedLink",
										},
										&ruleRefExpr{
											pos:  position{line: 1647, col: 11, offset: 60881},
											name: "Parenthesis",
										},
										&ruleRefExpr{
											pos:  position{line: 1648, col: 11, offset: 60903},
											name: "ImpliedApostrophe",
										},
										&ruleRefExpr{
											pos:  position{line: 1649, col: 11, offset: 60931},
											name: "AnyChar",
										},
										&ruleRefExpr{
											pos:  position{line: 1650, col: 11, offset: 60949},
											name: "Newline",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1650, col: 21, offset: 60959},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "ResolvedLink",
			pos:  position{line: 1654, col: 1, offset: 61029},
			expr: &choiceExpr{
				pos: position{line: 1654, col: 17, offset: 61045},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1654, col: 17, offset: 61045},
						name: "ResolvedRelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1654, col: 40, offset: 61068},
						name: "ResolvedExternalLink",
					},
				},
			},
		},
		{
			name: "ResolvedRelativeLink",
			pos:  position{line: 1657, col: 1, offset: 61196},
			expr: &actionExpr{
				pos: position{line: 1657, col: 25, offset: 61220},
				run: (*parser).callonResolvedRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1657, col: 25, offset: 61220},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1657, col: 25, offset: 61220},
							val:        "link:",
							ignoreCase: false,
							want:       "\"link:\"",
						},
						&labeledExpr{
							pos:   position{line: 1657, col: 33, offset: 61228},
							label: "url",
							expr: &choiceExpr{
								pos: position{line: 1657, col: 38, offset: 61233},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1657, col: 38, offset: 61233},
										name: "ResolvedLocation",
									},
									&ruleRefExpr{
										pos:  position{line: 1657, col: 57, offset: 61252},
										name: "ResolvedFileLocation",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1657, col: 79, offset: 61274},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1657, col: 97, offset: 61292},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ResolvedExternalLink",
			pos:  position{line: 1661, col: 1, offset: 61403},
			expr: &actionExpr{
				pos: position{line: 1661, col: 25, offset: 61427},
				run: (*parser).callonResolvedExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1661, col: 25, offset: 61427},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1661, col: 25, offset: 61427},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1661, col: 30, offset: 61432},
								name: "ResolvedLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 1661, col: 48, offset: 61450},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1661, col: 65, offset: 61467},
								expr: &ruleRefExpr{
									pos:  position{line: 1661, col: 66, offset: 61468},
									name: "LinkAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageBlock",
			pos:  position{line: 1668, col: 1, offset: 61663},
			expr: &actionExpr{
				pos: position{line: 1668, col: 15, offset: 61677},
				run: (*parser).callonImageBlock1,
				expr: &seqExpr{
					pos: position{line: 1668, col: 15, offset: 61677},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1668, col: 15, offset: 61677},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1668, col: 26, offset: 61688},
								expr: &ruleRefExpr{
									pos:  position{line: 1668, col: 27, offset: 61689},
									name: "BlockImageAttrs",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1668, col: 45, offset: 61707},
							val:        "image::",
							ignoreCase: false,
							want:       "\"image::\"",
						},
						&labeledExpr{
							pos:   position{line: 1668, col: 55, offset: 61717},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1668, col: 61, offset: 61723},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1668, col: 71, offset: 61733},
							label: "inlineAttrs",
							expr: &ruleRefExpr{
								pos:  position{line: 1668, col: 84, offset: 61746},
								name: "InlineImageAttrs",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1668, col: 102, offset: 61764},
							expr: &ruleRefExpr{
								pos:  position{line: 1668, col: 102, offset: 61764},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1668, col: 109, offset: 61771},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "InlineImage",
			pos:  position{line: 1672, col: 1, offset: 61878},
			expr: &actionExpr{
				pos: position{line: 1672, col: 16, offset: 61893},
				run: (*parser).callonInlineImage1,
				expr: &seqExpr{
					pos: position{line: 1672, col: 16, offset: 61893},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1672, col: 16, offset: 61893},
							val:        "image:",
							ignoreCase: false,
							want:       "\"image:\"",
						},
						&notExpr{
							pos: position{line: 1672, col: 25, offset: 61902},
							expr: &litMatcher{
								pos:        position{line: 1672, col: 26, offset: 61903},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1672, col: 30, offset: 61907},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1672, col: 36, offset: 61913},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1672, col: 46, offset: 61923},
							label: "inlineAttrs",
							expr: &ruleRefExpr{
								pos:  position{line: 1672, col: 59, offset: 61936},
								name: "InlineImageAttrs",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineImageAttrs",
			pos:  position{line: 1676, col: 1, offset: 62046},
			expr: &actionExpr{
				pos: position{line: 1676, col: 21, offset: 62066},
				run: (*parser).callonInlineImageAttrs1,
				expr: &seqExpr{
					pos: position{line: 1676, col: 21, offset: 62066},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1676, col: 21, offset: 62066},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1676, col: 25, offset: 62070},
							label: "alt",
							expr: &ruleRefExpr{
								pos:  position{line: 1676, col: 29, offset: 62074},
								name: "ImageAltInline",
							},
						},
						&labeledExpr{
							pos:   position{line: 1676, col: 44, offset: 62089},
							label: "w",
							expr: &ruleRefExpr{
								pos:  position{line: 1676, col: 46, offset: 62091},
								name: "ImageWidth",
							},
						},
						&labeledExpr{
							pos:   position{line: 1676, col: 57, offset: 62102},
							label: "h",
							expr: &ruleRefExpr{
								pos:  position{line: 1676, col: 59, offset: 62104},
								name: "ImageHeight",
							},
						},
						&labeledExpr{
							pos:   position{line: 1676, col: 71, offset: 62116},
							label: "nv",
							expr: &ruleRefExpr{
								pos:  position{line: 1676, col: 74, offset: 62119},
								name: "NamedAttrs",
							},
						},
						&litMatcher{
							pos:        position{line: 1676, col: 85, offset: 62130},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "BlockImageAttrs",
			pos:  position{line: 1680, col: 1, offset: 62192},
			expr: &choiceExpr{
				pos: position{line: 1680, col: 20, offset: 62211},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1680, col: 20, offset: 62211},
						name: "ImageAttrList",
					},
					&ruleRefExpr{
						pos:  position{line: 1680, col: 36, offset: 62227},
						name: "ElementTitle",
					},
					&ruleRefExpr{
						pos:  position{line: 1680, col: 51, offset: 62242},
						name: "ElementID",
					},
				},
			},
		},
		{
			name: "ImageAttrList",
			pos:  position{line: 1682, col: 1, offset: 62253},
			expr: &actionExpr{
				pos: position{line: 1682, col: 18, offset: 62270},
				run: (*parser).callonImageAttrList1,
				expr: &seqExpr{
					pos: position{line: 1682, col: 18, offset: 62270},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1682, col: 18, offset: 62270},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1682, col: 22, offset: 62274},
							label: "attrs",
							expr: &seqExpr{
								pos: position{line: 1682, col: 29, offset: 62281},
								exprs: []interface{}{
									&zeroOrOneExpr{
										pos: position{line: 1682, col: 29, offset: 62281},
										expr: &ruleRefExpr{
											pos:  position{line: 1682, col: 29, offset: 62281},
											name: "ImageAltAttr",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 1682, col: 43, offset: 62295},
										expr: &ruleRefExpr{
											pos:  position{line: 1682, col: 43, offset: 62295},
											name: "ShortHandAttr",
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 1682, col: 58, offset: 62310},
										expr: &ruleRefExpr{
											pos:  position{line: 1682, col: 58, offset: 62310},
											name: "ImageWidthAttr",
										},
									},
									&zeroOrOneExpr{
										pos: position{line: 1682, col: 74, offset: 62326},
										expr: &ruleRefExpr{
											pos:  position{line: 1682, col: 74, offset: 62326},
											name: "ImageHeightAttr",
										},
									},
									&zeroOrMoreExpr{
										pos: position{line: 1682, col: 91, offset: 62343},
										expr: &ruleRefExpr{
											pos:  position{line: 1682, col: 91, offset: 62343},
											name: "NamedAttr",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1682, col: 103, offset: 62355},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1682, col: 107, offset: 62359},
							expr: &ruleRefExpr{
								pos:  position{line: 1682, col: 107, offset: 62359},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1682, col: 114, offset: 62366},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ImageAltInline",
			pos:  position{line: 1686, col: 1, offset: 62420},
			expr: &actionExpr{
				pos: position{line: 1686, col: 19, offset: 62438},
				run: (*parser).callonImageAltInline1,
				expr: &labeledExpr{
					pos:   position{line: 1686, col: 19, offset: 62438},
					label: "value",
					expr: &zeroOrOneExpr{
						pos: position{line: 1686, col: 25, offset: 62444},
						expr: &ruleRefExpr{
							pos:  position{line: 1686, col: 25, offset: 62444},
							name: "InlineVal",
						},
					},
				},
			},
		},
		{
			name: "ImageWidth",
			pos:  position{line: 1690, col: 1, offset: 62523},
			expr: &actionExpr{
				pos: position{line: 1690, col: 15, offset: 62537},
				run: (*parser).callonImageWidth1,
				expr: &seqExpr{
					pos: position{line: 1690, col: 15, offset: 62537},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1690, col: 15, offset: 62537},
							expr: &litMatcher{
								pos:        position{line: 1690, col: 15, offset: 62537},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1690, col: 20, offset: 62542},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 1690, col: 26, offset: 62548},
								expr: &ruleRefExpr{
									pos:  position{line: 1690, col: 26, offset: 62548},
									name: "InlineVal",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageHeight",
			pos:  position{line: 1694, col: 1, offset: 62624},
			expr: &actionExpr{
				pos: position{line: 1694, col: 16, offset: 62639},
				run: (*parser).callonImageHeight1,
				expr: &seqExpr{
					pos: position{line: 1694, col: 16, offset: 62639},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1694, col: 16, offset: 62639},
							expr: &litMatcher{
								pos:        position{line: 1694, col: 16, offset: 62639},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1694, col: 21, offset: 62644},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 1694, col: 27, offset: 62650},
								expr: &ruleRefExpr{
									pos:  position{line: 1694, col: 27, offset: 62650},
									name: "InlineVal",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageAltAttr",
			pos:  position{line: 1698, col: 1, offset: 62732},
			expr: &actionExpr{
				pos: position{line: 1698, col: 17, offset: 62748},
				run: (*parser).callonImageAltAttr1,
				expr: &seqExpr{
					pos: position{line: 1698, col: 17, offset: 62748},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 1698, col: 17, offset: 62748},
							expr: &ruleRefExpr{
								pos:  position{line: 1698, col: 17, offset: 62748},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1698, col: 24, offset: 62755},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 1698, col: 30, offset: 62761},
								name: "PositionalValue",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1698, col: 46, offset: 62777},
							expr: &ruleRefExpr{
								pos:  position{line: 1698, col: 46, offset: 62777},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "ImageWidthAttr",
			pos:  position{line: 1702, col: 1, offset: 62862},
			expr: &actionExpr{
				pos: position{line: 1702, col: 19, offset: 62880},
				run: (*parser).callonImageWidthAttr1,
				expr: &seqExpr{
					pos: position{line: 1702, col: 19, offset: 62880},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 1702, col: 19, offset: 62880},
							expr: &ruleRefExpr{
								pos:  position{line: 1702, col: 19, offset: 62880},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 1702, col: 26, offset: 62887},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1702, col: 30, offset: 62891},
							expr: &ruleRefExpr{
								pos:  position{line: 1702, col: 30, offset: 62891},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1702, col: 37, offset: 62898},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 1702, col: 43, offset: 62904},
								expr: &ruleRefExpr{
									pos:  position{line: 1702, col: 43, offset: 62904},
									name: "PositionalValue",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageHeightAttr",
			pos:  position{line: 1709, col: 1, offset: 63048},
			expr: &actionExpr{
				pos: position{line: 1709, col: 20, offset: 63067},
				run: (*parser).callonImageHeightAttr1,
				expr: &seqExpr{
					pos: position{line: 1709, col: 20, offset: 63067},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 1709, col: 20, offset: 63067},
							expr: &ruleRefExpr{
								pos:  position{line: 1709, col: 20, offset: 63067},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 1709, col: 27, offset: 63074},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1709, col: 31, offset: 63078},
							expr: &ruleRefExpr{
								pos:  position{line: 1709, col: 31, offset: 63078},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1709, col: 38, offset: 63085},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 1709, col: 44, offset: 63091},
								expr: &ruleRefExpr{
									pos:  position{line: 1709, col: 44, offset: 63091},
									name: "PositionalValue",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineIcon",
			pos:  position{line: 1720, col: 1, offset: 63434},
			expr: &actionExpr{
				pos: position{line: 1720, col: 15, offset: 63448},
				run: (*parser).callonInlineIcon1,
				expr: &seqExpr{
					pos: position{line: 1720, col: 15, offset: 63448},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1720, col: 15, offset: 63448},
							val:        "icon:",
							ignoreCase: false,
							want:       "\"icon:\"",
						},
						&labeledExpr{
							pos:   position{line: 1720, col: 23, offset: 63456},
							label: "icon",
							expr: &actionExpr{
								pos: position{line: 1720, col: 29, offset: 63462},
								run: (*parser).callonInlineIcon5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1720, col: 29, offset: 63462},
									expr: &charClassMatcher{
										pos:        position{line: 1720, col: 29, offset: 63462},
										val:        "[\\pL0-9_-]",
										chars:      []rune{'_', '-'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1720, col: 73, offset: 63506},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 1720, col: 80, offset: 63513},
								name: "IconAttrs",
							},
						},
					},
				},
			},
		},
		{
			name: "IconAttrs",
			pos:  position{line: 1724, col: 1, offset: 63595},
			expr: &actionExpr{
				pos: position{line: 1724, col: 14, offset: 63608},
				run: (*parser).callonIconAttrs1,
				expr: &seqExpr{
					pos: position{line: 1724, col: 14, offset: 63608},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1724, col: 14, offset: 63608},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1724, col: 18, offset: 63612},
							label: "size",
							expr: &ruleRefExpr{
								pos:  position{line: 1724, col: 23, offset: 63617},
								name: "IconSize",
							},
						},
						&labeledExpr{
							pos:   position{line: 1724, col: 32, offset: 63626},
							label: "nv",
							expr: &ruleRefExpr{
								pos:  position{line: 1724, col: 35, offset: 63629},
								name: "NamedAttrs",
							},
						},
						&litMatcher{
							pos:        position{line: 1724, col: 46, offset: 63640},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "IconSize",
			pos:  position{line: 1728, col: 1, offset: 63697},
			expr: &actionExpr{
				pos: position{line: 1728, col: 13, offset: 63709},
				run: (*parser).callonIconSize1,
				expr: &labeledExpr{
					pos:   position{line: 1728, col: 13, offset: 63709},
					label: "value",
					expr: &zeroOrOneExpr{
						pos: position{line: 1728, col: 19, offset: 63715},
						expr: &ruleRefExpr{
							pos:  position{line: 1728, col: 19, offset: 63715},
							name: "InlineVal",
						},
					},
				},
			},
		},
		{
			name: "InlineFootnote",
			pos:  position{line: 1735, col: 1, offset: 63991},
			expr: &choiceExpr{
				pos: position{line: 1735, col: 19, offset: 64009},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1735, col: 19, offset: 64009},
						run: (*parser).callonInlineFootnote2,
						expr: &seqExpr{
							pos: position{line: 1735, col: 19, offset: 64009},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1735, col: 19, offset: 64009},
									val:        "footnote:[",
									ignoreCase: false,
									want:       "\"footnote:[\"",
								},
								&labeledExpr{
									pos:   position{line: 1735, col: 32, offset: 64022},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1735, col: 41, offset: 64031},
										name: "FootnoteContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1735, col: 58, offset: 64048},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1737, col: 5, offset: 64116},
						run: (*parser).callonInlineFootnote8,
						expr: &seqExpr{
							pos: position{line: 1737, col: 5, offset: 64116},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1737, col: 5, offset: 64116},
									val:        "footnote:",
									ignoreCase: false,
									want:       "\"footnote:\"",
								},
								&labeledExpr{
									pos:   position{line: 1737, col: 17, offset: 64128},
									label: "ref",
									expr: &ruleRefExpr{
										pos:  position{line: 1737, col: 22, offset: 64133},
										name: "FootnoteRef",
									},
								},
								&litMatcher{
									pos:        position{line: 1737, col: 35, offset: 64146},
									val:        "[",
									ignoreCase: false,
									want:       "\"[\"",
								},
								&labeledExpr{
									pos:   position{line: 1737, col: 39, offset: 64150},
									label: "content",
									expr: &zeroOrOneExpr{
										pos: position{line: 1737, col: 47, offset: 64158},
										expr: &ruleRefExpr{
											pos:  position{line: 1737, col: 48, offset: 64159},
											name: "FootnoteContent",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1737, col: 66, offset: 64177},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FootnoteRef",
			pos:  position{line: 1741, col: 1, offset: 64238},
			expr: &ruleRefExpr{
				pos:  position{line: 1741, col: 16, offset: 64253},
				name: "Alphanums",
			},
		},
		{
			name: "FootnoteContent",
			pos:  position{line: 1743, col: 1, offset: 64264},
			expr: &actionExpr{
				pos: position{line: 1743, col: 20, offset: 64283},
				run: (*parser).callonFootnoteContent1,
				expr: &labeledExpr{
					pos:   position{line: 1743, col: 20, offset: 64283},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1743, col: 29, offset: 64292},
						expr: &seqExpr{
							pos: position{line: 1743, col: 30, offset: 64293},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1743, col: 30, offset: 64293},
									expr: &litMatcher{
										pos:        position{line: 1743, col: 31, offset: 64294},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1743, col: 35, offset: 64298},
									name: "InlineElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DelimitedBlock",
			pos:  position{line: 1750, col: 1, offset: 64622},
			expr: &actionExpr{
				pos: position{line: 1750, col: 19, offset: 64640},
				run: (*parser).callonDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 1750, col: 19, offset: 64640},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1750, col: 19, offset: 64640},
							expr: &ruleRefExpr{
								pos:  position{line: 1750, col: 20, offset: 64641},
								name: "Alphanum",
							},
						},
						&labeledExpr{
							pos:   position{line: 1751, col: 5, offset: 64729},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 1751, col: 12, offset: 64736},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1751, col: 12, offset: 64736},
										name: "FencedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1752, col: 11, offset: 64759},
										name: "ListingBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1753, col: 11, offset: 64783},
										name: "ExampleBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1754, col: 11, offset: 64807},
										name: "QuoteBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1755, col: 11, offset: 64828},
										name: "SidebarBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1756, col: 11, offset: 64851},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 1757, col: 11, offset: 64879},
										name: "PassthroughBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1758, col: 11, offset: 64906},
										name: "Table",
									},
									&ruleRefExpr{
										pos:  position{line: 1759, col: 11, offset: 64922},
										name: "CommentBlock",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockDelimiter",
			pos:  position{line: 1763, col: 1, offset: 64963},
			expr: &choiceExpr{
				pos: position{line: 1763, col: 19, offset: 64981},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1763, col: 19, offset: 64981},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1763, col: 19, offset: 64981},
								expr: &ruleRefExpr{
									pos:  position{line: 1763, col: 21, offset: 64983},
									name: "Alphanum",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1763, col: 31, offset: 64993},
								name: "LiteralBlockDelimiter",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1764, col: 19, offset: 65064},
						name: "FencedBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1765, col: 19, offset: 65104},
						name: "ListingBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1766, col: 19, offset: 65145},
						name: "ExampleBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1767, col: 19, offset: 65186},
						name: "CommentBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1768, col: 19, offset: 65227},
						name: "QuoteBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1769, col: 19, offset: 65265},
						name: "SidebarBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1770, col: 19, offset: 65305},
						name: "PassthroughBlockDelimiter",
					},
				},
			},
		},
		{
			name: "DelimitedBlockRawLine",
			pos:  position{line: 1772, col: 1, offset: 65332},
			expr: &choiceExpr{
				pos: position{line: 1772, col: 26, offset: 65357},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1772, col: 26, offset: 65357},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 1772, col: 42, offset: 65373},
						name: "RawLine",
					},
				},
			},
		},
		{
			name: "RawLine",
			pos:  position{line: 1774, col: 1, offset: 65382},
			expr: &actionExpr{
				pos: position{line: 1774, col: 12, offset: 65393},
				run: (*parser).callonRawLine1,
				expr: &seqExpr{
					pos: position{line: 1774, col: 12, offset: 65393},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1774, col: 12, offset: 65393},
							expr: &ruleRefExpr{
								pos:  position{line: 1774, col: 13, offset: 65394},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1774, col: 17, offset: 65398},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1774, col: 26, offset: 65407},
								name: "RawLineContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1774, col: 42, offset: 65423},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "RawLineContent",
			pos:  position{line: 1778, col: 1, offset: 65503},
			expr: &actionExpr{
				pos: position{line: 1778, col: 19, offset: 65521},
				run: (*parser).callonRawLineContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1778, col: 19, offset: 65521},
					expr: &charClassMatcher{
						pos:        position{line: 1778, col: 19, offset: 65521},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "VerbatimContent",
			pos:  position{line: 1782, col: 1, offset: 65568},
			expr: &ruleRefExpr{
				pos:  position{line: 1782, col: 20, offset: 65587},
				name: "VerbatimLine",
			},
		},
		{
			name: "VerbatimLine",
			pos:  position{line: 1784, col: 1, offset: 65601},
			expr: &actionExpr{
				pos: position{line: 1784, col: 17, offset: 65617},
				run: (*parser).callonVerbatimLine1,
				expr: &seqExpr{
					pos: position{line: 1784, col: 17, offset: 65617},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1784, col: 17, offset: 65617},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1784, col: 26, offset: 65626},
								name: "VerbatimLineContent",
							},
						},
						&labeledExpr{
							pos:   position{line: 1784, col: 47, offset: 65647},
							label: "callouts",
							expr: &zeroOrOneExpr{
								pos: position{line: 1784, col: 56, offset: 65656},
								expr: &ruleRefExpr{
									pos:  position{line: 1784, col: 57, offset: 65657},
									name: "Callouts",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1784, col: 68, offset: 65668},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "VerbatimLineContent",
			pos:  position{line: 1788, col: 1, offset: 65738},
			expr: &actionExpr{
				pos: position{line: 1788, col: 24, offset: 65761},
				run: (*parser).callonVerbatimLineContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1788, col: 24, offset: 65761},
					expr: &seqExpr{
						pos: position{line: 1788, col: 25, offset: 65762},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1788, col: 25, offset: 65762},
								expr: &ruleRefExpr{
									pos:  position{line: 1788, col: 26, offset: 65763},
									name: "Callouts",
								},
							},
							&choiceExpr{
								pos: position{line: 1788, col: 36, offset: 65773},
								alternatives: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 1788, col: 36, offset: 65773},
										expr: &ruleRefExpr{
											pos:  position{line: 1788, col: 36, offset: 65773},
											name: "Space",
										},
									},
									&oneOrMoreExpr{
										pos: position{line: 1788, col: 45, offset: 65782},
										expr: &charClassMatcher{
											pos:        position{line: 1788, col: 45, offset: 65782},
											val:        "[^ \\r\\n]",
											chars:      []rune{' ', '\r', '\n'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Callouts",
			pos:  position{line: 1792, col: 1, offset: 65832},
			expr: &oneOrMoreExpr{
				pos: position{line: 1792, col: 13, offset: 65844},
				expr: &ruleRefExpr{
					pos:  position{line: 1792, col: 13, offset: 65844},
					name: "Callout",
				},
			},
		},
		{
			name: "Callout",
			pos:  position{line: 1794, col: 1, offset: 65854},
			expr: &actionExpr{
				pos: position{line: 1794, col: 12, offset: 65865},
				run: (*parser).callonCallout1,
				expr: &seqExpr{
					pos: position{line: 1794, col: 12, offset: 65865},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1794, col: 12, offset: 65865},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 1794, col: 16, offset: 65869},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1794, col: 21, offset: 65874},
								run: (*parser).callonCallout5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1794, col: 21, offset: 65874},
									expr: &charClassMatcher{
										pos:        position{line: 1794, col: 21, offset: 65874},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1794, col: 69, offset: 65922},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1794, col: 73, offset: 65926},
							expr: &ruleRefExpr{
								pos:  position{line: 1794, col: 73, offset: 65926},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 1794, col: 80, offset: 65933},
							expr: &choiceExpr{
								pos: position{line: 1794, col: 82, offset: 65935},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1794, col: 82, offset: 65935},
										name: "EOL",
									},
									&ruleRefExpr{
										pos:  position{line: 1794, col: 88, offset: 65941},
										name: "Callout",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CalloutListItem",
			pos:  position{line: 1798, col: 1, offset: 65994},
			expr: &actionExpr{
				pos: position{line: 1798, col: 20, offset: 66013},
				run: (*parser).callonCalloutListItem1,
				expr: &seqExpr{
					pos: position{line: 1798, col: 20, offset: 66013},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1798, col: 20, offset: 66013},
							label: "ref",
							expr: &ruleRefExpr{
								pos:  position{line: 1798, col: 25, offset: 66018},
								name: "CalloutListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 1798, col: 48, offset: 66041},
							label: "description",
							expr: &oneOrMoreExpr{
								pos: position{line: 1798, col: 61, offset: 66054},
								expr: &ruleRefExpr{
									pos:  position{line: 1798, col: 61, offset: 66054},
									name: "ListParagraph",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CalloutListItemPrefix",
			pos:  position{line: 1802, col: 1, offset: 66151},
			expr: &actionExpr{
				pos: position{line: 1802, col: 26, offset: 66176},
				run: (*parser).callonCalloutListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 1802, col: 26, offset: 66176},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1802, col: 26, offset: 66176},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 1802, col: 30, offset: 66180},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1802, col: 35, offset: 66185},
								run: (*parser).callonCalloutListItemPrefix5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1802, col: 35, offset: 66185},
									expr: &charClassMatcher{
										pos:        position{line: 1802, col: 35, offset: 66185},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1802, col: 83, offset: 66233},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 1802, col: 87, offset: 66237},
							expr: &ruleRefExpr{
								pos:  position{line: 1802, col: 87, offset: 66237},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "FencedBlockDelimiter",
			pos:  position{line: 1809, col: 1, offset: 66464},
			expr: &seqExpr{
				pos: position{line: 1809, col: 25, offset: 66488},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1809, col: 25, offset: 66488},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1809, col: 31, offset: 66494},
						expr: &ruleRefExpr{
							pos:  position{line: 1809, col: 31, offset: 66494},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1809, col: 38, offset: 66501},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "FencedBlockStartDelimiter",
			pos:  position{line: 1811, col: 1, offset: 66561},
			expr: &seqExpr{
				pos: position{line: 1811, col: 30, offset: 66590},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1811, col: 30, offset: 66590},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1811, col: 36, offset: 66596},
						expr: &ruleRefExpr{
							pos:  position{line: 1811, col: 36, offset: 66596},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1811, col: 43, offset: 66603},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "FencedBlockEndDelimiter",
			pos:  position{line: 1813, col: 1, offset: 66608},
			expr: &choiceExpr{
				pos: position{line: 1813, col: 28, offset: 66635},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1813, col: 29, offset: 66636},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1813, col: 29, offset: 66636},
								val:        "```",
								ignoreCase: false,
								want:       "\"```\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1813, col: 35, offset: 66642},
								expr: &ruleRefExpr{
									pos:  position{line: 1813, col: 35, offset: 66642},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1813, col: 42, offset: 66649},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1813, col: 49, offset: 66656},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "FencedBlock",
			pos:  position{line: 1815, col: 1, offset: 66661},
			expr: &actionExpr{
				pos: position{line: 1815, col: 16, offset: 66676},
				run: (*parser).callonFencedBlock1,
				expr: &seqExpr{
					pos: position{line: 1815, col: 16, offset: 66676},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1815, col: 16, offset: 66676},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1815, col: 27, offset: 66687},
								expr: &ruleRefExpr{
									pos:  position{line: 1815, col: 28, offset: 66688},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1815, col: 41, offset: 66701},
							name: "FencedBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1815, col: 67, offset: 66727},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1815, col: 76, offset: 66736},
								name: "FencedBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1815, col: 99, offset: 66759},
							name: "FencedBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "FencedBlockRawContent",
			pos:  position{line: 1819, col: 1, offset: 66874},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1819, col: 26, offset: 66899},
				expr: &actionExpr{
					pos: position{line: 1819, col: 27, offset: 66900},
					run: (*parser).callonFencedBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1819, col: 27, offset: 66900},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1819, col: 27, offset: 66900},
								expr: &ruleRefExpr{
									pos:  position{line: 1819, col: 28, offset: 66901},
									name: "FencedBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1819, col: 52, offset: 66925},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1819, col: 58, offset: 66931},
									name: "DelimitedBlockRawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListingBlockDelimiter",
			pos:  position{line: 1826, col: 1, offset: 67271},
			expr: &seqExpr{
				pos: position{line: 1826, col: 26, offset: 67296},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1826, col: 26, offset: 67296},
						val:        "----",
						ignoreCase: false,
						want:       "\"----\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1826, col: 33, offset: 67303},
						expr: &ruleRefExpr{
							pos:  position{line: 1826, col: 33, offset: 67303},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1826, col: 40, offset: 67310},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ListingBlockStartDelimiter",
			pos:  position{line: 1828, col: 1, offset: 67315},
			expr: &seqExpr{
				pos: position{line: 1828, col: 31, offset: 67345},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1828, col: 31, offset: 67345},
						val:        "----",
						ignoreCase: false,
						want:       "\"----\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1828, col: 38, offset: 67352},
						expr: &ruleRefExpr{
							pos:  position{line: 1828, col: 38, offset: 67352},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1828, col: 45, offset: 67359},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ListingBlockEndDelimiter",
			pos:  position{line: 1830, col: 1, offset: 67364},
			expr: &choiceExpr{
				pos: position{line: 1830, col: 29, offset: 67392},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1830, col: 30, offset: 67393},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1830, col: 30, offset: 67393},
								val:        "----",
								ignoreCase: false,
								want:       "\"----\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1830, col: 37, offset: 67400},
								expr: &ruleRefExpr{
									pos:  position{line: 1830, col: 37, offset: 67400},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1830, col: 44, offset: 67407},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1830, col: 51, offset: 67414},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "ListingBlock",
			pos:  position{line: 1832, col: 1, offset: 67419},
			expr: &actionExpr{
				pos: position{line: 1832, col: 17, offset: 67435},
				run: (*parser).callonListingBlock1,
				expr: &seqExpr{
					pos: position{line: 1832, col: 17, offset: 67435},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1832, col: 17, offset: 67435},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1832, col: 28, offset: 67446},
								expr: &ruleRefExpr{
									pos:  position{line: 1832, col: 29, offset: 67447},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1832, col: 42, offset: 67460},
							name: "ListingBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1832, col: 69, offset: 67487},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1832, col: 78, offset: 67496},
								name: "ListingBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1832, col: 102, offset: 67520},
							name: "ListingBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "ListingBlockRawContent",
			pos:  position{line: 1836, col: 1, offset: 67637},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1836, col: 27, offset: 67663},
				expr: &actionExpr{
					pos: position{line: 1836, col: 28, offset: 67664},
					run: (*parser).callonListingBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1836, col: 28, offset: 67664},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1836, col: 28, offset: 67664},
								expr: &ruleRefExpr{
									pos:  position{line: 1836, col: 29, offset: 67665},
									name: "ListingBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1836, col: 54, offset: 67690},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1836, col: 60, offset: 67696},
									name: "DelimitedBlockRawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockDelimiter",
			pos:  position{line: 1843, col: 1, offset: 68036},
			expr: &seqExpr{
				pos: position{line: 1843, col: 26, offset: 68061},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1843, col: 26, offset: 68061},
						val:        "====",
						ignoreCase: false,
						want:       "\"====\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1843, col: 33, offset: 68068},
						expr: &ruleRefExpr{
							pos:  position{line: 1843, col: 33, offset: 68068},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1843, col: 40, offset: 68075},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ExampleBlockStartDelimiter",
			pos:  position{line: 1845, col: 1, offset: 68080},
			expr: &seqExpr{
				pos: position{line: 1845, col: 31, offset: 68110},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1845, col: 31, offset: 68110},
						val:        "====",
						ignoreCase: false,
						want:       "\"====\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1845, col: 38, offset: 68117},
						expr: &ruleRefExpr{
							pos:  position{line: 1845, col: 38, offset: 68117},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1845, col: 45, offset: 68124},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ExampleBlockEndDelimiter",
			pos:  position{line: 1847, col: 1, offset: 68129},
			expr: &choiceExpr{
				pos: position{line: 1847, col: 29, offset: 68157},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1847, col: 30, offset: 68158},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1847, col: 30, offset: 68158},
								val:        "====",
								ignoreCase: false,
								want:       "\"====\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1847, col: 37, offset: 68165},
								expr: &ruleRefExpr{
									pos:  position{line: 1847, col: 37, offset: 68165},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1847, col: 44, offset: 68172},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1847, col: 51, offset: 68179},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "ExampleBlock",
			pos:  position{line: 1849, col: 1, offset: 68184},
			expr: &actionExpr{
				pos: position{line: 1849, col: 17, offset: 68200},
				run: (*parser).callonExampleBlock1,
				expr: &seqExpr{
					pos: position{line: 1849, col: 17, offset: 68200},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1849, col: 17, offset: 68200},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1849, col: 28, offset: 68211},
								expr: &ruleRefExpr{
									pos:  position{line: 1849, col: 29, offset: 68212},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1849, col: 42, offset: 68225},
							name: "ExampleBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1849, col: 69, offset: 68252},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1849, col: 78, offset: 68261},
								name: "ExampleBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1849, col: 102, offset: 68285},
							name: "ExampleBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockRawContent",
			pos:  position{line: 1853, col: 1, offset: 68402},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1853, col: 27, offset: 68428},
				expr: &actionExpr{
					pos: position{line: 1853, col: 28, offset: 68429},
					run: (*parser).callonExampleBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1853, col: 28, offset: 68429},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1853, col: 28, offset: 68429},
								expr: &ruleRefExpr{
									pos:  position{line: 1853, col: 29, offset: 68430},
									name: "ExampleBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1853, col: 54, offset: 68455},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1853, col: 60, offset: 68461},
									name: "DelimitedBlockRawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockDelimiter",
			pos:  position{line: 1860, col: 1, offset: 68799},
			expr: &seqExpr{
				pos: position{line: 1860, col: 24, offset: 68822},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1860, col: 24, offset: 68822},
						val:        "____",
						ignoreCase: false,
						want:       "\"____\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1860, col: 31, offset: 68829},
						expr: &ruleRefExpr{
							pos:  position{line: 1860, col: 31, offset: 68829},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1860, col: 38, offset: 68836},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "QuoteBlockStartDelimiter",
			pos:  position{line: 1862, col: 1, offset: 68866},
			expr: &seqExpr{
				pos: position{line: 1862, col: 29, offset: 68894},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1862, col: 29, offset: 68894},
						val:        "____",
						ignoreCase: false,
						want:       "\"____\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1862, col: 36, offset: 68901},
						expr: &ruleRefExpr{
							pos:  position{line: 1862, col: 36, offset: 68901},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1862, col: 43, offset: 68908},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "QuoteBlockEndDelimiter",
			pos:  position{line: 1864, col: 1, offset: 68938},
			expr: &choiceExpr{
				pos: position{line: 1864, col: 27, offset: 68964},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1864, col: 28, offset: 68965},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1864, col: 28, offset: 68965},
								val:        "____",
								ignoreCase: false,
								want:       "\"____\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1864, col: 35, offset: 68972},
								expr: &ruleRefExpr{
									pos:  position{line: 1864, col: 35, offset: 68972},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1864, col: 42, offset: 68979},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1864, col: 49, offset: 68986},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "QuoteBlock",
			pos:  position{line: 1866, col: 1, offset: 69016},
			expr: &actionExpr{
				pos: position{line: 1866, col: 15, offset: 69030},
				run: (*parser).callonQuoteBlock1,
				expr: &seqExpr{
					pos: position{line: 1866, col: 15, offset: 69030},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1866, col: 15, offset: 69030},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1866, col: 26, offset: 69041},
								expr: &ruleRefExpr{
									pos:  position{line: 1866, col: 27, offset: 69042},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1866, col: 40, offset: 69055},
							name: "QuoteBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1866, col: 65, offset: 69080},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1866, col: 74, offset: 69089},
								name: "QuoteBlockVerbatimElement",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1866, col: 101, offset: 69116},
							name: "QuoteBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockVerbatimElement",
			pos:  position{line: 1870, col: 1, offset: 69229},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1870, col: 30, offset: 69258},
				expr: &actionExpr{
					pos: position{line: 1870, col: 31, offset: 69259},
					run: (*parser).callonQuoteBlockVerbatimElement2,
					expr: &seqExpr{
						pos: position{line: 1870, col: 31, offset: 69259},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1870, col: 31, offset: 69259},
								expr: &ruleRefExpr{
									pos:  position{line: 1870, col: 32, offset: 69260},
									name: "QuoteBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1870, col: 55, offset: 69283},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1870, col: 61, offset: 69289},
									name: "DelimitedBlockRawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockDelimiter",
			pos:  position{line: 1877, col: 1, offset: 69629},
			expr: &seqExpr{
				pos: position{line: 1877, col: 26, offset: 69654},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1877, col: 26, offset: 69654},
						val:        "****",
						ignoreCase: false,
						want:       "\"****\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1877, col: 33, offset: 69661},
						expr: &ruleRefExpr{
							pos:  position{line: 1877, col: 33, offset: 69661},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1877, col: 40, offset: 69668},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "SidebarBlockStartDelimiter",
			pos:  position{line: 1879, col: 1, offset: 69673},
			expr: &seqExpr{
				pos: position{line: 1879, col: 31, offset: 69703},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1879, col: 31, offset: 69703},
						val:        "****",
						ignoreCase: false,
						want:       "\"****\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1879, col: 38, offset: 69710},
						expr: &ruleRefExpr{
							pos:  position{line: 1879, col: 38, offset: 69710},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1879, col: 45, offset: 69717},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "SidebarBlockEndDelimiter",
			pos:  position{line: 1881, col: 1, offset: 69722},
			expr: &choiceExpr{
				pos: position{line: 1881, col: 29, offset: 69750},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1881, col: 30, offset: 69751},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1881, col: 30, offset: 69751},
								val:        "****",
								ignoreCase: false,
								want:       "\"****\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1881, col: 37, offset: 69758},
								expr: &ruleRefExpr{
									pos:  position{line: 1881, col: 37, offset: 69758},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1881, col: 44, offset: 69765},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1881, col: 51, offset: 69772},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "SidebarBlock",
			pos:  position{line: 1883, col: 1, offset: 69777},
			expr: &actionExpr{
				pos: position{line: 1883, col: 17, offset: 69793},
				run: (*parser).callonSidebarBlock1,
				expr: &seqExpr{
					pos: position{line: 1883, col: 17, offset: 69793},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1883, col: 17, offset: 69793},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1883, col: 28, offset: 69804},
								expr: &ruleRefExpr{
									pos:  position{line: 1883, col: 29, offset: 69805},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1883, col: 42, offset: 69818},
							name: "SidebarBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1883, col: 69, offset: 69845},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1883, col: 78, offset: 69854},
								name: "SidebarBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1883, col: 102, offset: 69878},
							name: "SidebarBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockRawContent",
			pos:  position{line: 1887, col: 1, offset: 69995},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1887, col: 27, offset: 70021},
				expr: &actionExpr{
					pos: position{line: 1887, col: 28, offset: 70022},
					run: (*parser).callonSidebarBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1887, col: 28, offset: 70022},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1887, col: 28, offset: 70022},
								expr: &ruleRefExpr{
									pos:  position{line: 1887, col: 29, offset: 70023},
									name: "SidebarBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1887, col: 54, offset: 70048},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1887, col: 60, offset: 70054},
									name: "DelimitedBlockRawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockDelimiter",
			pos:  position{line: 1894, col: 1, offset: 70398},
			expr: &seqExpr{
				pos: position{line: 1894, col: 30, offset: 70427},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1894, col: 30, offset: 70427},
						val:        "++++",
						ignoreCase: false,
						want:       "\"++++\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1894, col: 37, offset: 70434},
						expr: &ruleRefExpr{
							pos:  position{line: 1894, col: 37, offset: 70434},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1894, col: 44, offset: 70441},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "PassthroughBlockStartDelimiter",
			pos:  position{line: 1896, col: 1, offset: 70446},
			expr: &seqExpr{
				pos: position{line: 1896, col: 35, offset: 70480},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1896, col: 35, offset: 70480},
						val:        "++++",
						ignoreCase: false,
						want:       "\"++++\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1896, col: 42, offset: 70487},
						expr: &ruleRefExpr{
							pos:  position{line: 1896, col: 42, offset: 70487},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1896, col: 49, offset: 70494},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "PassthroughBlockEndDelimiter",
			pos:  position{line: 1898, col: 1, offset: 70499},
			expr: &choiceExpr{
				pos: position{line: 1898, col: 33, offset: 70531},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1898, col: 34, offset: 70532},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1898, col: 34, offset: 70532},
								val:        "++++",
								ignoreCase: false,
								want:       "\"++++\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1898, col: 41, offset: 70539},
								expr: &ruleRefExpr{
									pos:  position{line: 1898, col: 41, offset: 70539},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1898, col: 48, offset: 70546},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1898, col: 55, offset: 70553},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "PassthroughBlock",
			pos:  position{line: 1900, col: 1, offset: 70558},
			expr: &actionExpr{
				pos: position{line: 1900, col: 21, offset: 70578},
				run: (*parser).callonPassthroughBlock1,
				expr: &seqExpr{
					pos: position{line: 1900, col: 21, offset: 70578},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1900, col: 21, offset: 70578},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1900, col: 32, offset: 70589},
								expr: &ruleRefExpr{
									pos:  position{line: 1900, col: 33, offset: 70590},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1900, col: 46, offset: 70603},
							name: "PassthroughBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1900, col: 77, offset: 70634},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1900, col: 86, offset: 70643},
								name: "PassthroughBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1900, col: 114, offset: 70671},
							name: "PassthroughBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockRawContent",
			pos:  position{line: 1904, col: 1, offset: 70796},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1904, col: 31, offset: 70826},
				expr: &actionExpr{
					pos: position{line: 1904, col: 32, offset: 70827},
					run: (*parser).callonPassthroughBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1904, col: 32, offset: 70827},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1904, col: 32, offset: 70827},
								expr: &ruleRefExpr{
									pos:  position{line: 1904, col: 33, offset: 70828},
									name: "PassthroughBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1904, col: 62, offset: 70857},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1904, col: 68, offset: 70863},
									name: "DelimitedBlockRawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ThematicBreak",
			pos:  position{line: 1909, col: 1, offset: 71025},
			expr: &actionExpr{
				pos: position{line: 1909, col: 18, offset: 71042},
				run: (*parser).callonThematicBreak1,
				expr: &seqExpr{
					pos: position{line: 1909, col: 18, offset: 71042},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1909, col: 19, offset: 71043},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1909, col: 19, offset: 71043},
									val:        "***",
									ignoreCase: false,
									want:       "\"***\"",
								},
								&litMatcher{
									pos:        position{line: 1909, col: 27, offset: 71051},
									val:        "* * *",
									ignoreCase: false,
									want:       "\"* * *\"",
								},
								&litMatcher{
									pos:        position{line: 1909, col: 37, offset: 71061},
									val:        "---",
									ignoreCase: false,
									want:       "\"---\"",
								},
								&litMatcher{
									pos:        position{line: 1909, col: 45, offset: 71069},
									val:        "- - -",
									ignoreCase: false,
									want:       "\"- - -\"",
								},
								&litMatcher{
									pos:        position{line: 1909, col: 55, offset: 71079},
									val:        "___",
									ignoreCase: false,
									want:       "\"___\"",
								},
								&litMatcher{
									pos:        position{line: 1909, col: 63, offset: 71087},
									val:        "_ _ _",
									ignoreCase: false,
									want:       "\"_ _ _\"",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1909, col: 72, offset: 71096},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "NormalBlockContent",
			pos:  position{line: 1918, col: 1, offset: 71393},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1918, col: 23, offset: 71415},
				expr: &ruleRefExpr{
					pos:  position{line: 1918, col: 23, offset: 71415},
					name: "NormalElement",
				},
			},
		},
		{
			name: "NormalElement",
			pos:  position{line: 1920, col: 1, offset: 71431},
			expr: &actionExpr{
				pos: position{line: 1921, col: 5, offset: 71453},
				run: (*parser).callonNormalElement1,
				expr: &seqExpr{
					pos: position{line: 1921, col: 5, offset: 71453},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1921, col: 5, offset: 71453},
							expr: &ruleRefExpr{
								pos:  position{line: 1921, col: 6, offset: 71454},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1921, col: 10, offset: 71458},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1921, col: 19, offset: 71467},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1921, col: 19, offset: 71467},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 1922, col: 15, offset: 71492},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 1923, col: 15, offset: 71520},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1924, col: 15, offset: 71545},
										name: "ThematicBreak",
									},
									&ruleRefExpr{
										pos:  position{line: 1925, col: 15, offset: 71573},
										name: "OrderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 1926, col: 15, offset: 71604},
										name: "UnorderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 1927, col: 15, offset: 71637},
										name: "LabeledListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 1928, col: 15, offset: 71668},
										name: "ContinuedListItemElement",
									},
									&ruleRefExpr{
										pos:  position{line: 1929, col: 15, offset: 71707},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1930, col: 15, offset: 71736},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1931, col: 15, offset: 71764},
										name: "AttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 1932, col: 15, offset: 71800},
										name: "AttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 1933, col: 15, offset: 71830},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1934, col: 15, offset: 71871},
										name: "StandaloneAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 1935, col: 15, offset: 71906},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockContent",
			pos:  position{line: 1940, col: 1, offset: 72019},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1940, col: 22, offset: 72040},
				expr: &ruleRefExpr{
					pos:  position{line: 1940, col: 22, offset: 72040},
					name: "VerseBlockElement",
				},
			},
		},
		{
			name: "VerseBlockElement",
			pos:  position{line: 1942, col: 1, offset: 72060},
			expr: &actionExpr{
				pos: position{line: 1942, col: 22, offset: 72081},
				run: (*parser).callonVerseBlockElement1,
				expr: &seqExpr{
					pos: position{line: 1942, col: 22, offset: 72081},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1942, col: 22, offset: 72081},
							expr: &ruleRefExpr{
								pos:  position{line: 1942, col: 23, offset: 72082},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1942, col: 27, offset: 72086},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1942, col: 36, offset: 72095},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1942, col: 36, offset: 72095},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 1942, col: 48, offset: 72107},
										name: "VerseBlockParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraph",
			pos:  position{line: 1946, col: 1, offset: 72157},
			expr: &actionExpr{
				pos: position{line: 1946, col: 24, offset: 72180},
				run: (*parser).callonVerseBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1946, col: 24, offset: 72180},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1946, col: 30, offset: 72186},
						expr: &ruleRefExpr{
							pos:  position{line: 1946, col: 31, offset: 72187},
							name: "VerseBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraphLine",
			pos:  position{line: 1950, col: 1, offset: 72277},
			expr: &actionExpr{
				pos: position{line: 1950, col: 28, offset: 72304},
				run: (*parser).callonVerseBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1950, col: 28, offset: 72304},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1950, col: 28, offset: 72304},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1950, col: 37, offset: 72313},
								expr: &ruleRefExpr{
									pos:  position{line: 1950, col: 38, offset: 72314},
									name: "InlineElement",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1950, col: 54, offset: 72330},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "Table",
			pos:  position{line: 1957, col: 1, offset: 72572},
			expr: &actionExpr{
				pos: position{line: 1957, col: 10, offset: 72581},
				run: (*parser).callonTable1,
				expr: &seqExpr{
					pos: position{line: 1957, col: 10, offset: 72581},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1957, col: 10, offset: 72581},
							label: "attrs",
							expr: &zeroOrOneExpr{
								pos: position{line: 1957, col: 16, offset: 72587},
								expr: &zeroOrMoreExpr{
									pos: position{line: 1957, col: 17, offset: 72588},
									expr: &ruleRefExpr{
										pos:  position{line: 1957, col: 17, offset: 72588},
										name: "BlockAttrs",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1957, col: 31, offset: 72602},
							name: "TableDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1958, col: 5, offset: 72621},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 1958, col: 12, offset: 72628},
								expr: &ruleRefExpr{
									pos:  position{line: 1958, col: 13, offset: 72629},
									name: "TableLineHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1959, col: 5, offset: 72651},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1959, col: 11, offset: 72657},
								expr: &ruleRefExpr{
									pos:  position{line: 1959, col: 12, offset: 72658},
									name: "TableLine",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1960, col: 6, offset: 72675},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1960, col: 6, offset: 72675},
									name: "TableDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1960, col: 23, offset: 72692},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TableCellSeparator",
			pos:  position{line: 1964, col: 1, offset: 72802},
			expr: &seqExpr{
				pos: position{line: 1964, col: 23, offset: 72824},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1964, col: 23, offset: 72824},
						val:        "|",
						ignoreCase: false,
						want:       "\"|\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1964, col: 27, offset: 72828},
						expr: &ruleRefExpr{
							pos:  position{line: 1964, col: 27, offset: 72828},
							name: "Space",
						},
					},
				},
			},
		},
		{
			name: "TableDelimiter",
			pos:  position{line: 1966, col: 1, offset: 72836},
			expr: &seqExpr{
				pos: position{line: 1966, col: 19, offset: 72854},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1966, col: 19, offset: 72854},
						val:        "|===",
						ignoreCase: false,
						want:       "\"|===\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1966, col: 26, offset: 72861},
						expr: &ruleRefExpr{
							pos:  position{line: 1966, col: 26, offset: 72861},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1966, col: 33, offset: 72868},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "TableLineHeader",
			pos:  position{line: 1969, col: 1, offset: 72936},
			expr: &actionExpr{
				pos: position{line: 1969, col: 20, offset: 72955},
				run: (*parser).callonTableLineHeader1,
				expr: &seqExpr{
					pos: position{line: 1969, col: 20, offset: 72955},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1969, col: 20, offset: 72955},
							expr: &ruleRefExpr{
								pos:  position{line: 1969, col: 21, offset: 72956},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1969, col: 36, offset: 72971},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1969, col: 42, offset: 72977},
								expr: &ruleRefExpr{
									pos:  position{line: 1969, col: 43, offset: 72978},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1969, col: 55, offset: 72990},
							name: "EOL",
						},
						&ruleRefExpr{
							pos:  position{line: 1969, col: 59, offset: 72994},
							name: "BlankLine",
						},
					},
				},
			},
		},
		{
			name: "TableLine",
			pos:  position{line: 1973, col: 1, offset: 73062},
			expr: &actionExpr{
				pos: position{line: 1973, col: 14, offset: 73075},
				run: (*parser).callonTableLine1,
				expr: &seqExpr{
					pos: position{line: 1973, col: 14, offset: 73075},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1973, col: 14, offset: 73075},
							expr: &ruleRefExpr{
								pos:  position{line: 1973, col: 15, offset: 73076},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1973, col: 30, offset: 73091},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1973, col: 36, offset: 73097},
								expr: &ruleRefExpr{
									pos:  position{line: 1973, col: 37, offset: 73098},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1973, col: 49, offset: 73110},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1973, col: 53, offset: 73114},
							expr: &ruleRefExpr{
								pos:  position{line: 1973, col: 53, offset: 73114},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "TableCell",
			pos:  position{line: 1977, col: 1, offset: 73183},
			expr: &actionExpr{
				pos: position{line: 1977, col: 14, offset: 73196},
				run: (*parser).callonTableCell1,
				expr: &seqExpr{
					pos: position{line: 1977, col: 14, offset: 73196},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1977, col: 14, offset: 73196},
							name: "TableCellSeparator",
						},
						&labeledExpr{
							pos:   position{line: 1977, col: 33, offset: 73215},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1977, col: 42, offset: 73224},
								expr: &seqExpr{
									pos: position{line: 1977, col: 43, offset: 73225},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1977, col: 43, offset: 73225},
											expr: &ruleRefExpr{
												pos:  position{line: 1977, col: 44, offset: 73226},
												name: "TableCellSeparator",
											},
										},
										&notExpr{
											pos: position{line: 1977, col: 63, offset: 73245},
											expr: &ruleRefExpr{
												pos:  position{line: 1977, col: 64, offset: 73246},
												name: "EOL",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 1977, col: 68, offset: 73250},
											expr: &ruleRefExpr{
												pos:  position{line: 1977, col: 68, offset: 73250},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1977, col: 75, offset: 73257},
											name: "InlineElement",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1977, col: 89, offset: 73271},
											expr: &ruleRefExpr{
												pos:  position{line: 1977, col: 89, offset: 73271},
												name: "Space",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CommentBlockDelimiter",
			pos:  position{line: 1984, col: 1, offset: 73520},
			expr: &seqExpr{
				pos: position{line: 1984, col: 26, offset: 73545},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1984, col: 26, offset: 73545},
						val:        "////",
						ignoreCase: false,
						want:       "\"////\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1984, col: 33, offset: 73552},
						expr: &ruleRefExpr{
							pos:  position{line: 1984, col: 33, offset: 73552},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1984, col: 40, offset: 73559},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "CommentBlockStartDelimiter",
			pos:  position{line: 1986, col: 1, offset: 73564},
			expr: &seqExpr{
				pos: position{line: 1986, col: 31, offset: 73594},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1986, col: 31, offset: 73594},
						val:        "////",
						ignoreCase: false,
						want:       "\"////\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1986, col: 38, offset: 73601},
						expr: &ruleRefExpr{
							pos:  position{line: 1986, col: 38, offset: 73601},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1986, col: 45, offset: 73608},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "CommentBlockEndDelimiter",
			pos:  position{line: 1988, col: 1, offset: 73613},
			expr: &choiceExpr{
				pos: position{line: 1988, col: 29, offset: 73641},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1988, col: 30, offset: 73642},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1988, col: 30, offset: 73642},
								val:        "////",
								ignoreCase: false,
								want:       "\"////\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1988, col: 37, offset: 73649},
								expr: &ruleRefExpr{
									pos:  position{line: 1988, col: 37, offset: 73649},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1988, col: 44, offset: 73656},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1988, col: 51, offset: 73663},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "CommentBlock",
			pos:  position{line: 1990, col: 1, offset: 73668},
			expr: &actionExpr{
				pos: position{line: 1990, col: 17, offset: 73684},
				run: (*parser).callonCommentBlock1,
				expr: &seqExpr{
					pos: position{line: 1990, col: 17, offset: 73684},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1990, col: 17, offset: 73684},
							name: "CommentBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1990, col: 44, offset: 73711},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1990, col: 53, offset: 73720},
								name: "CommentBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1990, col: 78, offset: 73745},
							name: "CommentBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "CommentBlockRawContent",
			pos:  position{line: 1994, col: 1, offset: 73855},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1994, col: 27, offset: 73881},
				expr: &actionExpr{
					pos: position{line: 1994, col: 28, offset: 73882},
					run: (*parser).callonCommentBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1994, col: 28, offset: 73882},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1994, col: 28, offset: 73882},
								expr: &ruleRefExpr{
									pos:  position{line: 1994, col: 29, offset: 73883},
									name: "CommentBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1994, col: 54, offset: 73908},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1994, col: 60, offset: 73914},
									name: "DelimitedBlockRawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1998, col: 1, offset: 74058},
			expr: &actionExpr{
				pos: position{line: 1998, col: 22, offset: 74079},
				run: (*parser).callonSingleLineComment1,
				expr: &seqExpr{
					pos: position{line: 1998, col: 22, offset: 74079},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1998, col: 22, offset: 74079},
							expr: &ruleRefExpr{
								pos:  position{line: 1998, col: 23, offset: 74080},
								name: "CommentBlockDelimiter",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1998, col: 45, offset: 74102},
							expr: &ruleRefExpr{
								pos:  position{line: 1998, col: 45, offset: 74102},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 1998, col: 52, offset: 74109},
							val:        "//",
							ignoreCase: false,
							want:       "\"//\"",
						},
						&labeledExpr{
							pos:   position{line: 1998, col: 57, offset: 74114},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1998, col: 66, offset: 74123},
								name: "SingleLineCommentContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1998, col: 92, offset: 74149},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SingleLineCommentContent",
			pos:  position{line: 2002, col: 1, offset: 74214},
			expr: &actionExpr{
				pos: position{line: 2002, col: 29, offset: 74242},
				run: (*parser).callonSingleLineCommentContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 2002, col: 29, offset: 74242},
					expr: &charClassMatcher{
						pos:        position{line: 2002, col: 29, offset: 74242},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "LiteralBlock",
			pos:  position{line: 2010, col: 1, offset: 74555},
			expr: &choiceExpr{
				pos: position{line: 2010, col: 17, offset: 74571},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2010, col: 17, offset: 74571},
						name: "ParagraphWithLiteralAttribute",
					},
					&ruleRefExpr{
						pos:  position{line: 2010, col: 49, offset: 74603},
						name: "ParagraphWithHeadingSpaces",
					},
					&ruleRefExpr{
						pos:  position{line: 2010, col: 78, offset: 74632},
						name: "ParagraphWithLiteralBlockDelimiter",
					},
				},
			},
		},
		{
			name: "LiteralBlockDelimiter",
			pos:  position{line: 2012, col: 1, offset: 74668},
			expr: &litMatcher{
				pos:        position{line: 2012, col: 26, offset: 74693},
				val:        "....",
				ignoreCase: false,
				want:       "\"....\"",
			},
		},
		{
			name: "ParagraphWithHeadingSpaces",
			pos:  position{line: 2015, col: 1, offset: 74765},
			expr: &actionExpr{
				pos: position{line: 2015, col: 31, offset: 74795},
				run: (*parser).callonParagraphWithHeadingSpaces1,
				expr: &seqExpr{
					pos: position{line: 2015, col: 31, offset: 74795},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2015, col: 31, offset: 74795},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 2015, col: 42, offset: 74806},
								expr: &ruleRefExpr{
									pos:  position{line: 2015, col: 43, offset: 74807},
									name: "Attributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2015, col: 56, offset: 74820},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 2015, col: 63, offset: 74827},
								name: "ParagraphWithHeadingSpacesLines",
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithHeadingSpacesLines",
			pos:  position{line: 2020, col: 1, offset: 75057},
			expr: &actionExpr{
				pos: position{line: 2021, col: 5, offset: 75097},
				run: (*parser).callonParagraphWithHeadingSpacesLines1,
				expr: &seqExpr{
					pos: position{line: 2021, col: 5, offset: 75097},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2021, col: 5, offset: 75097},
							label: "firstLine",
							expr: &actionExpr{
								pos: position{line: 2021, col: 16, offset: 75108},
								run: (*parser).callonParagraphWithHeadingSpacesLines4,
								expr: &seqExpr{
									pos: position{line: 2021, col: 16, offset: 75108},
									exprs: []interface{}{
										&oneOrMoreExpr{
											pos: position{line: 2021, col: 16, offset: 75108},
											expr: &ruleRefExpr{
												pos:  position{line: 2021, col: 16, offset: 75108},
												name: "Space",
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 2021, col: 23, offset: 75115},
											expr: &charClassMatcher{
												pos:        position{line: 2021, col: 23, offset: 75115},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2023, col: 8, offset: 75168},
							name: "EOL",
						},
						&labeledExpr{
							pos:   position{line: 2024, col: 5, offset: 75231},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 2024, col: 16, offset: 75242},
								expr: &actionExpr{
									pos: position{line: 2025, col: 9, offset: 75252},
									run: (*parser).callonParagraphWithHeadingSpacesLines13,
									expr: &seqExpr{
										pos: position{line: 2025, col: 9, offset: 75252},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 2025, col: 9, offset: 75252},
												expr: &ruleRefExpr{
													pos:  position{line: 2025, col: 10, offset: 75253},
													name: "BlankLine",
												},
											},
											&labeledExpr{
												pos:   position{line: 2026, col: 9, offset: 75272},
												label: "otherLine",
												expr: &actionExpr{
													pos: position{line: 2026, col: 20, offset: 75283},
													run: (*parser).callonParagraphWithHeadingSpacesLines18,
													expr: &oneOrMoreExpr{
														pos: position{line: 2026, col: 20, offset: 75283},
														expr: &charClassMatcher{
															pos:        position{line: 2026, col: 20, offset: 75283},
															val:        "[^\\r\\n]",
															chars:      []rune{'\r', '\n'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 2028, col: 12, offset: 75344},
												name: "EOL",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiter",
			pos:  position{line: 2035, col: 1, offset: 75574},
			expr: &actionExpr{
				pos: position{line: 2035, col: 39, offset: 75612},
				run: (*parser).callonParagraphWithLiteralBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 2035, col: 39, offset: 75612},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2035, col: 39, offset: 75612},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 2035, col: 50, offset: 75623},
								expr: &ruleRefExpr{
									pos:  position{line: 2035, col: 51, offset: 75624},
									name: "Attributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2036, col: 9, offset: 75645},
							name: "LiteralBlockDelimiter",
						},
						&zeroOrMoreExpr{
							pos: position{line: 2036, col: 31, offset: 75667},
							expr: &ruleRefExpr{
								pos:  position{line: 2036, col: 31, offset: 75667},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2036, col: 38, offset: 75674},
							name: "Newline",
						},
						&labeledExpr{
							pos:   position{line: 2036, col: 46, offset: 75682},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 2036, col: 53, offset: 75689},
								name: "ParagraphWithLiteralBlockDelimiterLines",
							},
						},
						&choiceExpr{
							pos: position{line: 2036, col: 95, offset: 75731},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 2036, col: 96, offset: 75732},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 2036, col: 96, offset: 75732},
											name: "LiteralBlockDelimiter",
										},
										&zeroOrMoreExpr{
											pos: position{line: 2036, col: 118, offset: 75754},
											expr: &ruleRefExpr{
												pos:  position{line: 2036, col: 118, offset: 75754},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 2036, col: 125, offset: 75761},
											name: "EOL",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 2036, col: 132, offset: 75768},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLines",
			pos:  position{line: 2041, col: 1, offset: 75927},
			expr: &actionExpr{
				pos: position{line: 2041, col: 44, offset: 75970},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLines1,
				expr: &labeledExpr{
					pos:   position{line: 2041, col: 44, offset: 75970},
					label: "lines",
					expr: &zeroOrMoreExpr{
						pos: position{line: 2041, col: 50, offset: 75976},
						expr: &ruleRefExpr{
							pos:  position{line: 2041, col: 51, offset: 75977},
							name: "ParagraphWithLiteralBlockDelimiterLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLine",
			pos:  position{line: 2045, col: 1, offset: 76061},
			expr: &actionExpr{
				pos: position{line: 2046, col: 5, offset: 76116},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLine1,
				expr: &seqExpr{
					pos: position{line: 2046, col: 5, offset: 76116},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2046, col: 5, offset: 76116},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 2046, col: 11, offset: 76122},
								run: (*parser).callonParagraphWithLiteralBlockDelimiterLine4,
								expr: &seqExpr{
									pos: position{line: 2046, col: 11, offset: 76122},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 2046, col: 11, offset: 76122},
											expr: &ruleRefExpr{
												pos:  position{line: 2046, col: 12, offset: 76123},
												name: "LiteralBlockDelimiter",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 2046, col: 34, offset: 76145},
											expr: &charClassMatcher{
												pos:        position{line: 2046, col: 34, offset: 76145},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2048, col: 8, offset: 76198},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttribute",
			pos:  position{line: 2053, col: 1, offset: 76324},
			expr: &actionExpr{
				pos: position{line: 2054, col: 5, offset: 76362},
				run: (*parser).callonParagraphWithLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 2054, col: 5, offset: 76362},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2054, col: 5, offset: 76362},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 2054, col: 16, offset: 76373},
								expr: &ruleRefExpr{
									pos:  position{line: 2054, col: 17, offset: 76374},
									name: "Attributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 2055, col: 5, offset: 76391},
							run: (*parser).callonParagraphWithLiteralAttribute6,
						},
						&labeledExpr{
							pos:   position{line: 2062, col: 5, offset: 76598},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 2062, col: 12, offset: 76605},
								name: "ParagraphWithLiteralAttributeLines",
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralKind",
			pos:  position{line: 2066, col: 1, offset: 76755},
			expr: &actionExpr{
				pos: position{line: 2066, col: 16, offset: 76770},
				run: (*parser).callonLiteralKind1,
				expr: &litMatcher{
					pos:        position{line: 2066, col: 16, offset: 76770},
					val:        "literal",
					ignoreCase: false,
					want:       "\"literal\"",
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttributeLines",
			pos:  position{line: 2071, col: 1, offset: 76853},
			expr: &actionExpr{
				pos: position{line: 2071, col: 39, offset: 76891},
				run: (*parser).callonParagraphWithLiteralAttributeLines1,
				expr: &labeledExpr{
					pos:   position{line: 2071, col: 39, offset: 76891},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 2071, col: 45, offset: 76897},
						expr: &ruleRefExpr{
							pos:  position{line: 2071, col: 46, offset: 76898},
							name: "ParagraphWithLiteralAttributeLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttributeLine",
			pos:  position{line: 2075, col: 1, offset: 76978},
			expr: &actionExpr{
				pos: position{line: 2075, col: 38, offset: 77015},
				run: (*parser).callonParagraphWithLiteralAttributeLine1,
				expr: &seqExpr{
					pos: position{line: 2075, col: 38, offset: 77015},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2075, col: 38, offset: 77015},
							expr: &ruleRefExpr{
								pos:  position{line: 2075, col: 39, offset: 77016},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 2075, col: 49, offset: 77026},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 2075, col: 58, offset: 77035},
								run: (*parser).callonParagraphWithLiteralAttributeLine6,
								expr: &oneOrMoreExpr{
									pos: position{line: 2075, col: 58, offset: 77035},
									expr: &charClassMatcher{
										pos:        position{line: 2075, col: 58, offset: 77035},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2077, col: 4, offset: 77080},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IndexTerm",
			pos:  position{line: 2084, col: 1, offset: 77266},
			expr: &actionExpr{
				pos: position{line: 2084, col: 14, offset: 77279},
				run: (*parser).callonIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 2084, col: 14, offset: 77279},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2084, col: 14, offset: 77279},
							val:        "((",
							ignoreCase: false,
							want:       "\"((\"",
						},
						&labeledExpr{
							pos:   position{line: 2084, col: 19, offset: 77284},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 2084, col: 25, offset: 77290},
								name: "IndexTermContent",
							},
						},
						&litMatcher{
							pos:        position{line: 2084, col: 43, offset: 77308},
							val:        "))",
							ignoreCase: false,
							want:       "\"))\"",
						},
					},
				},
			},
		},
		{
			name: "IndexTermContent",
			pos:  position{line: 2088, col: 1, offset: 77373},
			expr: &actionExpr{
				pos: position{line: 2088, col: 21, offset: 77393},
				run: (*parser).callonIndexTermContent1,
				expr: &labeledExpr{
					pos:   position{line: 2088, col: 21, offset: 77393},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 2088, col: 30, offset: 77402},
						expr: &choiceExpr{
							pos: position{line: 2088, col: 31, offset: 77403},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 2088, col: 31, offset: 77403},
									name: "Word",
								},
								&ruleRefExpr{
									pos:  position{line: 2088, col: 38, offset: 77410},
									name: "QuotedString",
								},
								&ruleRefExpr{
									pos:  position{line: 2088, col: 53, offset: 77425},
									name: "QuotedText",
								},
								&ruleRefExpr{
									pos:  position{line: 2088, col: 66, offset: 77438},
									name: "Space",
								},
								&ruleRefExpr{
									pos:  position{line: 2088, col: 74, offset: 77446},
									name: "SpecialCharacter",
								},
								&actionExpr{
									pos: position{line: 2088, col: 93, offset: 77465},
									run: (*parser).callonIndexTermContent10,
									expr: &seqExpr{
										pos: position{line: 2088, col: 94, offset: 77466},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 2088, col: 94, offset: 77466},
												expr: &litMatcher{
													pos:        position{line: 2088, col: 95, offset: 77467},
													val:        "))",
													ignoreCase: false,
													want:       "\"))\"",
												},
											},
											&anyMatcher{
												line: 2088, col: 100, offset: 77472,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTerm",
			pos:  position{line: 2094, col: 1, offset: 77578},
			expr: &actionExpr{
				pos: position{line: 2094, col: 23, offset: 77600},
				run: (*parser).callonConcealedIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 2094, col: 23, offset: 77600},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2094, col: 23, offset: 77600},
							val:        "(((",
							ignoreCase: false,
							want:       "\"(((\"",
						},
						&labeledExpr{
							pos:   position{line: 2094, col: 29, offset: 77606},
							label: "term1",
							expr: &ruleRefExpr{
								pos:  position{line: 2094, col: 36, offset: 77613},
								name: "ConcealedIndexTermContent",
							},
						},
						&labeledExpr{
							pos:   position{line: 2095, col: 5, offset: 77645},
							label: "term2",
							expr: &zeroOrOneExpr{
								pos: position{line: 2095, col: 11, offset: 77651},
								expr: &actionExpr{
									pos: position{line: 2095, col: 12, offset: 77652},
									run: (*parser).callonConcealedIndexTerm8,
									expr: &seqExpr{
										pos: position{line: 2095, col: 12, offset: 77652},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 2095, col: 12, offset: 77652},
												expr: &ruleRefExpr{
													pos:  position{line: 2095, col: 12, offset: 77652},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 2095, col: 19, offset: 77659},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 2095, col: 23, offset: 77663},
												expr: &ruleRefExpr{
													pos:  position{line: 2095, col: 23, offset: 77663},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 2095, col: 30, offset: 77670},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 2095, col: 39, offset: 77679},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2096, col: 5, offset: 77737},
							label: "term3",
							expr: &zeroOrOneExpr{
								pos: position{line: 2096, col: 11, offset: 77743},
								expr: &actionExpr{
									pos: position{line: 2096, col: 12, offset: 77744},
									run: (*parser).callonConcealedIndexTerm19,
									expr: &seqExpr{
										pos: position{line: 2096, col: 12, offset: 77744},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 2096, col: 12, offset: 77744},
												expr: &ruleRefExpr{
													pos:  position{line: 2096, col: 12, offset: 77744},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 2096, col: 19, offset: 77751},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 2096, col: 23, offset: 77755},
												expr: &ruleRefExpr{
													pos:  position{line: 2096, col: 23, offset: 77755},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 2096, col: 30, offset: 77762},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 2096, col: 39, offset: 77771},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 2097, col: 5, offset: 77829},
							val:        ")))",
							ignoreCase: false,
							want:       "\")))\"",
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTermContent",
			pos:  position{line: 2101, col: 1, offset: 77908},
			expr: &actionExpr{
				pos: position{line: 2101, col: 30, offset: 77937},
				run: (*parser).callonConcealedIndexTermContent1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2101, col: 30, offset: 77937},
					expr: &choiceExpr{
						pos: position{line: 2101, col: 31, offset: 77938},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 2101, col: 31, offset: 77938},
								name: "Alphanum",
							},
							&ruleRefExpr{
								pos:  position{line: 2101, col: 42, offset: 77949},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "BlankLine",
			pos:  position{line: 2108, col: 1, offset: 78098},
			expr: &actionExpr{
				pos: position{line: 2108, col: 14, offset: 78111},
				run: (*parser).callonBlankLine1,
				expr: &seqExpr{
					pos: position{line: 2108, col: 14, offset: 78111},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2108, col: 14, offset: 78111},
							expr: &ruleRefExpr{
								pos:  position{line: 2108, col: 15, offset: 78112},
								name: "EOF",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 2108, col: 19, offset: 78116},
							expr: &ruleRefExpr{
								pos:  position{line: 2108, col: 19, offset: 78116},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2108, col: 26, offset: 78123},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "Symbol",
			pos:  position{line: 2116, col: 1, offset: 78268},
			expr: &choiceExpr{
				pos: position{line: 2116, col: 11, offset: 78278},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2116, col: 11, offset: 78278},
						name: "Apostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 2116, col: 24, offset: 78291},
						name: "Copyright",
					},
					&ruleRefExpr{
						pos:  position{line: 2116, col: 36, offset: 78303},
						name: "Trademark",
					},
					&ruleRefExpr{
						pos:  position{line: 2116, col: 48, offset: 78315},
						name: "Registered",
					},
					&ruleRefExpr{
						pos:  position{line: 2116, col: 61, offset: 78328},
						name: "Ellipsis",
					},
				},
			},
		},
		{
			name: "Apostrophe",
			pos:  position{line: 2118, col: 1, offset: 78338},
			expr: &actionExpr{
				pos: position{line: 2118, col: 15, offset: 78352},
				run: (*parser).callonApostrophe1,
				expr: &litMatcher{
					pos:        position{line: 2118, col: 15, offset: 78352},
					val:        "`'",
					ignoreCase: false,
					want:       "\"`'\"",
				},
			},
		},
		{
			name: "Copyright",
			pos:  position{line: 2121, col: 1, offset: 78405},
			expr: &actionExpr{
				pos: position{line: 2121, col: 14, offset: 78418},
				run: (*parser).callonCopyright1,
				expr: &litMatcher{
					pos:        position{line: 2121, col: 14, offset: 78418},
					val:        "(C)",
					ignoreCase: false,
					want:       "\"(C)\"",
				},
			},
		},
		{
			name: "Trademark",
			pos:  position{line: 2124, col: 1, offset: 78472},
			expr: &actionExpr{
				pos: position{line: 2124, col: 14, offset: 78485},
				run: (*parser).callonTrademark1,
				expr: &litMatcher{
					pos:        position{line: 2124, col: 14, offset: 78485},
					val:        "(TM)",
					ignoreCase: false,
					want:       "\"(TM)\"",
				},
			},
		},
		{
			name: "Registered",
			pos:  position{line: 2127, col: 1, offset: 78540},
			expr: &actionExpr{
				pos: position{line: 2127, col: 15, offset: 78554},
				run: (*parser).callonRegistered1,
				expr: &litMatcher{
					pos:        position{line: 2127, col: 15, offset: 78554},
					val:        "(R)",
					ignoreCase: false,
					want:       "\"(R)\"",
				},
			},
		},
		{
			name: "Ellipsis",
			pos:  position{line: 2130, col: 1, offset: 78608},
			expr: &actionExpr{
				pos: position{line: 2130, col: 13, offset: 78620},
				run: (*parser).callonEllipsis1,
				expr: &litMatcher{
					pos:        position{line: 2130, col: 13, offset: 78620},
					val:        "...",
					ignoreCase: false,
					want:       "\"...\"",
				},
			},
		},
		{
			name: "ImpliedApostrophe",
			pos:  position{line: 2138, col: 1, offset: 78897},
			expr: &actionExpr{
				pos: position{line: 2138, col: 22, offset: 78918},
				run: (*parser).callonImpliedApostrophe1,
				expr: &seqExpr{
					pos: position{line: 2138, col: 22, offset: 78918},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 2138, col: 22, offset: 78918},
							name: "Alphanum",
						},
						&litMatcher{
							pos:        position{line: 2138, col: 31, offset: 78927},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&andExpr{
							pos: position{line: 2138, col: 35, offset: 78931},
							expr: &charClassMatcher{
								pos:        position{line: 2138, col: 36, offset: 78932},
								val:        "[\\pL]",
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "SpecialCharacter",
			pos:  position{line: 2147, col: 1, offset: 79294},
			expr: &actionExpr{
				pos: position{line: 2147, col: 21, offset: 79314},
				run: (*parser).callonSpecialCharacter1,
				expr: &choiceExpr{
					pos: position{line: 2147, col: 22, offset: 79315},
					alternatives: []interface{}{
						&litMatcher{
							pos:        position{line: 2147, col: 22, offset: 79315},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&litMatcher{
							pos:        position{line: 2147, col: 28, offset: 79321},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&litMatcher{
							pos:        position{line: 2147, col: 34, offset: 79327},
							val:        "&",
							ignoreCase: false,
							want:       "\"&\"",
						},
						&litMatcher{
							pos:        position{line: 2147, col: 40, offset: 79333},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
					},
				},
			},
		},
		{
			name: "Alphanum",
			pos:  position{line: 2154, col: 1, offset: 79625},
			expr: &charClassMatcher{
				pos:        position{line: 2154, col: 13, offset: 79637},
				val:        "[\\pL0-9]",
				ranges:     []rune{'0', '9'},
				classes:    []*unicode.RangeTable{rangeTable("L")},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Parenthesis",
			pos:  position{line: 2156, col: 1, offset: 79647},
			expr: &choiceExpr{
				pos: position{line: 2156, col: 16, offset: 79662},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2156, col: 16, offset: 79662},
						val:        "(",
						ignoreCase: false,
						want:       "\"(\"",
					},
					&litMatcher{
						pos:        position{line: 2156, col: 22, offset: 79668},
						val:        ")",
						ignoreCase: false,
						want:       "\")\"",
					},
					&litMatcher{
						pos:        position{line: 2156, col: 28, offset: 79674},
						val:        "[",
						ignoreCase: false,
						want:       "\"[\"",
					},
					&litMatcher{
						pos:        position{line: 2156, col: 34, offset: 79680},
						val:        "]",
						ignoreCase: false,
						want:       "\"]\"",
					},
					&litMatcher{
						pos:        position{line: 2156, col: 40, offset: 79686},
						val:        "{",
						ignoreCase: false,
						want:       "\"{\"",
					},
					&litMatcher{
						pos:        position{line: 2156, col: 46, offset: 79692},
						val:        "}",
						ignoreCase: false,
						want:       "\"}\"",
					},
				},
			},
		},
		{
			name: "Alphanums",
			pos:  position{line: 2158, col: 1, offset: 79698},
			expr: &actionExpr{
				pos: position{line: 2158, col: 14, offset: 79711},
				run: (*parser).callonAlphanums1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2158, col: 14, offset: 79711},
					expr: &charClassMatcher{
						pos:        position{line: 2158, col: 14, offset: 79711},
						val:        "[\\pL0-9]",
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Word",
			pos:  position{line: 2162, col: 1, offset: 79757},
			expr: &choiceExpr{
				pos: position{line: 2166, col: 5, offset: 80084},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2166, col: 5, offset: 80084},
						run: (*parser).callonWord2,
						expr: &seqExpr{
							pos: position{line: 2166, col: 5, offset: 80084},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2166, col: 5, offset: 80084},
									expr: &charClassMatcher{
										pos:        position{line: 2166, col: 5, offset: 80084},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 2166, col: 15, offset: 80094},
									expr: &choiceExpr{
										pos: position{line: 2166, col: 17, offset: 80096},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2166, col: 17, offset: 80096},
												val:        "[\\r\\n ,\\]]",
												chars:      []rune{'\r', '\n', ' ', ',', ']'},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 2166, col: 30, offset: 80109},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2168, col: 9, offset: 80179},
						run: (*parser).callonWord10,
						expr: &seqExpr{
							pos: position{line: 2168, col: 9, offset: 80179},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2168, col: 9, offset: 80179},
									expr: &charClassMatcher{
										pos:        position{line: 2168, col: 9, offset: 80179},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 2168, col: 19, offset: 80189},
									expr: &seqExpr{
										pos: position{line: 2168, col: 20, offset: 80190},
										exprs: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2168, col: 20, offset: 80190},
												val:        "[=*_`]",
												chars:      []rune{'=', '*', '_', '`'},
												ignoreCase: false,
												inverted:   false,
											},
											&oneOrMoreExpr{
												pos: position{line: 2168, col: 27, offset: 80197},
												expr: &charClassMatcher{
													pos:        position{line: 2168, col: 27, offset: 80197},
													val:        "[\\pL0-9]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineWord",
			pos:  position{line: 2172, col: 1, offset: 80273},
			expr: &choiceExpr{
				pos: position{line: 2173, col: 5, offset: 80354},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2173, col: 5, offset: 80354},
						run: (*parser).callonInlineWord2,
						expr: &seqExpr{
							pos: position{line: 2173, col: 5, offset: 80354},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2173, col: 5, offset: 80354},
									expr: &charClassMatcher{
										pos:        position{line: 2173, col: 5, offset: 80354},
										val:        "[\\pL0-9,?!;]",
										chars:      []rune{',', '?', '!', ';'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 2173, col: 19, offset: 80368},
									expr: &choiceExpr{
										pos: position{line: 2173, col: 21, offset: 80370},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2173, col: 21, offset: 80370},
												val:        "[\\r\\n ]",
												chars:      []rune{'\r', '\n', ' '},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 2173, col: 31, offset: 80380},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2175, col: 9, offset: 80449},
						name: "Word",
					},
				},
			},
		},
		{
			name: "AnyChar",
			pos:  position{line: 2178, col: 1, offset: 80549},
			expr: &actionExpr{
				pos: position{line: 2178, col: 12, offset: 80560},
				run: (*parser).callonAnyChar1,
				expr: &charClassMatcher{
					pos:        position{line: 2178, col: 12, offset: 80560},
					val:        "[^\\r\\n]",
					chars:      []rune{'\r', '\n'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "FileLocation",
			pos:  position{line: 2182, col: 1, offset: 80625},
			expr: &actionExpr{
				pos: position{line: 2182, col: 17, offset: 80641},
				run: (*parser).callonFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 2182, col: 17, offset: 80641},
					label: "path",
					expr: &oneOrMoreExpr{
						pos: position{line: 2182, col: 22, offset: 80646},
						expr: &choiceExpr{
							pos: position{line: 2182, col: 23, offset: 80647},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 2182, col: 23, offset: 80647},
									name: "FILENAME",
								},
								&ruleRefExpr{
									pos:  position{line: 2182, col: 34, offset: 80658},
									name: "AttributeSubstitution",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ResolvedFileLocation",
			pos:  position{line: 2186, col: 1, offset: 80742},
			expr: &actionExpr{
				pos: position{line: 2186, col: 25, offset: 80766},
				run: (*parser).callonResolvedFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 2186, col: 25, offset: 80766},
					label: "path",
					expr: &oneOrMoreExpr{
						pos: position{line: 2186, col: 30, offset: 80771},
						expr: &charClassMatcher{
							pos:        position{line: 2186, col: 31, offset: 80772},
							val:        "[^\\r\\n []",
							chars:      []rune{'\r', '\n', ' ', '['},
							ignoreCase: false,
							inverted:   true,
						},
					},
				},
			},
		},
		{
			name: "Location",
			pos:  position{line: 2190, col: 1, offset: 80844},
			expr: &actionExpr{
				pos: position{line: 2190, col: 13, offset: 80856},
				run: (*parser).callonLocation1,
				expr: &seqExpr{
					pos: position{line: 2190, col: 13, offset: 80856},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2190, col: 13, offset: 80856},
							label: "scheme",
							expr: &zeroOrOneExpr{
								pos: position{line: 2190, col: 20, offset: 80863},
								expr: &ruleRefExpr{
									pos:  position{line: 2190, col: 21, offset: 80864},
									name: "URL_SCHEME",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2190, col: 34, offset: 80877},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 2190, col: 39, offset: 80882},
								expr: &choiceExpr{
									pos: position{line: 2190, col: 40, offset: 80883},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 2190, col: 40, offset: 80883},
											name: "FILENAME",
										},
										&ruleRefExpr{
											pos:  position{line: 2190, col: 51, offset: 80894},
											name: "AttributeSubstitution",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LocationWithScheme",
			pos:  position{line: 2194, col: 1, offset: 80982},
			expr: &actionExpr{
				pos: position{line: 2194, col: 23, offset: 81004},
				run: (*parser).callonLocationWithScheme1,
				expr: &seqExpr{
					pos: position{line: 2194, col: 23, offset: 81004},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2194, col: 23, offset: 81004},
							label: "scheme",
							expr: &ruleRefExpr{
								pos:  position{line: 2194, col: 31, offset: 81012},
								name: "URL_SCHEME",
							},
						},
						&labeledExpr{
							pos:   position{line: 2194, col: 43, offset: 81024},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 2194, col: 48, offset: 81029},
								expr: &choiceExpr{
									pos: position{line: 2194, col: 49, offset: 81030},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 2194, col: 49, offset: 81030},
											name: "FILENAME",
										},
										&ruleRefExpr{
											pos:  position{line: 2194, col: 60, offset: 81041},
											name: "AttributeSubstitution",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FILENAME",
			pos:  position{line: 2198, col: 1, offset: 81129},
			expr: &oneOrMoreExpr{
				pos: position{line: 2198, col: 13, offset: 81141},
				expr: &charClassMatcher{
					pos:        position{line: 2198, col: 14, offset: 81142},
					val:        "[^\\r\\n{}[\\] ]",
					chars:      []rune{'\r', '\n', '{', '}', '[', ']', ' '},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "ResolvedLocation",
			pos:  position{line: 2200, col: 1, offset: 81276},
			expr: &actionExpr{
				pos: position{line: 2200, col: 21, offset: 81296},
				run: (*parser).callonResolvedLocation1,
				expr: &seqExpr{
					pos: position{line: 2200, col: 21, offset: 81296},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2200, col: 21, offset: 81296},
							label: "scheme",
							expr: &ruleRefExpr{
								pos:  position{line: 2200, col: 29, offset: 81304},
								name: "URL_SCHEME",
							},
						},
						&labeledExpr{
							pos:   position{line: 2200, col: 41, offset: 81316},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 2200, col: 47, offset: 81322},
								name: "RESOLVED_FILENAME",
							},
						},
					},
				},
			},
		},
		{
			name: "RESOLVED_FILENAME",
			pos:  position{line: 2205, col: 1, offset: 81570},
			expr: &oneOrMoreExpr{
				pos: position{line: 2205, col: 22, offset: 81591},
				expr: &charClassMatcher{
					pos:        position{line: 2205, col: 23, offset: 81592},
					val:        "[^\\r\\n[\\] ]",
					chars:      []rune{'\r', '\n', '[', ']', ' '},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "URL",
			pos:  position{line: 2207, col: 1, offset: 81724},
			expr: &actionExpr{
				pos: position{line: 2207, col: 9, offset: 81732},
				run: (*parser).callonURL1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2207, col: 9, offset: 81732},
					expr: &charClassMatcher{
						pos:        position{line: 2207, col: 9, offset: 81732},
						val:        "[^\\r\\n[\\]]",
						chars:      []rune{'\r', '\n', '[', ']'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "URL_SCHEME",
			pos:  position{line: 2211, col: 1, offset: 81780},
			expr: &choiceExpr{
				pos: position{line: 2211, col: 15, offset: 81794},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2211, col: 15, offset: 81794},
						val:        "http://",
						ignoreCase: false,
						want:       "\"http://\"",
					},
					&litMatcher{
						pos:        position{line: 2211, col: 27, offset: 81806},
						val:        "https://",
						ignoreCase: false,
						want:       "\"https://\"",
					},
					&litMatcher{
						pos:        position{line: 2211, col: 40, offset: 81819},
						val:        "ftp://",
						ignoreCase: false,
						want:       "\"ftp://\"",
					},
					&litMatcher{
						pos:        position{line: 2211, col: 51, offset: 81830},
						val:        "irc://",
						ignoreCase: false,
						want:       "\"irc://\"",
					},
					&litMatcher{
						pos:        position{line: 2211, col: 62, offset: 81841},
						val:        "mailto:",
						ignoreCase: false,
						want:       "\"mailto:\"",
					},
				},
			},
		},
		{
			name: "ID",
			pos:  position{line: 2213, col: 1, offset: 81852},
			expr: &actionExpr{
				pos: position{line: 2213, col: 7, offset: 81858},
				run: (*parser).callonID1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2213, col: 7, offset: 81858},
					expr: &charClassMatcher{
						pos:        position{line: 2213, col: 7, offset: 81858},
						val:        "[^[\\]<>,]",
						chars:      []rune{'[', ']', '<', '>', ','},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DIGIT",
			pos:  position{line: 2217, col: 1, offset: 81983},
			expr: &actionExpr{
				pos: position{line: 2217, col: 10, offset: 81992},
				run: (*parser).callonDIGIT1,
				expr: &charClassMatcher{
					pos:        position{line: 2217, col: 10, offset: 81992},
					val:        "[0-9]",
					ranges:     []rune{'0', '9'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "NUMBER",
			pos:  position{line: 2221, col: 1, offset: 82034},
			expr: &actionExpr{
				pos: position{line: 2221, col: 11, offset: 82044},
				run: (*parser).callonNUMBER1,
				expr: &seqExpr{
					pos: position{line: 2221, col: 11, offset: 82044},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 2221, col: 11, offset: 82044},
							expr: &litMatcher{
								pos:        position{line: 2221, col: 11, offset: 82044},
								val:        "-",
								ignoreCase: false,
								want:       "\"-\"",
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 2221, col: 16, offset: 82049},
							expr: &ruleRefExpr{
								pos:  position{line: 2221, col: 16, offset: 82049},
								name: "DIGIT",
							},
						},
					},
				},
			},
		},
		{
			name: "Space",
			pos:  position{line: 2225, col: 1, offset: 82101},
			expr: &choiceExpr{
				pos: position{line: 2225, col: 10, offset: 82110},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2225, col: 10, offset: 82110},
						val:        " ",
						ignoreCase: false,
						want:       "\" \"",
					},
					&actionExpr{
						pos: position{line: 2225, col: 16, offset: 82116},
						run: (*parser).callonSpace3,
						expr: &litMatcher{
							pos:        position{line: 2225, col: 16, offset: 82116},
							val:        "\t",
							ignoreCase: false,
							want:       "\"\\t\"",
						},
					},
				},
			},
		},
		{
			name: "Newline",
			pos:  position{line: 2229, col: 1, offset: 82157},
			expr: &choiceExpr{
				pos: position{line: 2229, col: 12, offset: 82168},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2229, col: 12, offset: 82168},
						val:        "\r\n",
						ignoreCase: false,
						want:       "\"\\r\\n\"",
					},
					&litMatcher{
						pos:        position{line: 2229, col: 21, offset: 82177},
						val:        "\r",
						ignoreCase: false,
						want:       "\"\\r\"",
					},
					&litMatcher{
						pos:        position{line: 2229, col: 28, offset: 82184},
						val:        "\n",
						ignoreCase: false,
						want:       "\"\\n\"",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 2231, col: 1, offset: 82190},
			expr: &notExpr{
				pos: position{line: 2231, col: 8, offset: 82197},
				expr: &anyMatcher{
					line: 2231, col: 9, offset: 82198,
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 2233, col: 1, offset: 82201},
			expr: &choiceExpr{
				pos: position{line: 2233, col: 8, offset: 82208},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2233, col: 8, offset: 82208},
						name: "Newline",
					},
					&ruleRefExpr{
						pos:  position{line: 2233, col: 18, offset: 82218},
						name: "EOF",
					},
				},
			},
		},
	},
}

func (c *current) onAsciidocRawDocument1(frontmatter, blocks interface{}) (interface{}, error) {
	return types.NewRawDocument(frontmatter, blocks.([]interface{}))
}

func (p *parser) callonAsciidocRawDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsciidocRawDocument1(stack["frontmatter"], stack["blocks"])
}

func (c *current) onVerbatimDocument1(blocks interface{}) (interface{}, error) {
	return types.NewDraftDocument(nil, blocks.([]interface{}))
}

func (p *parser) callonVerbatimDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimDocument1(stack["blocks"])
}

func (c *current) onRawFile1(blocks interface{}) (interface{}, error) {
	return types.NewRawDocument(nil, blocks.([]interface{}))
}

func (p *parser) callonRawFile1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawFile1(stack["blocks"])
}

func (c *current) onTextDocument1(blocks interface{}) (interface{}, error) {
	return types.NewRawDocument(nil, blocks.([]interface{}))
}

func (p *parser) callonTextDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextDocument1(stack["blocks"])
}

func (c *current) onAsciidocDocumentRawBlocks1(header, others interface{}) (interface{}, error) {
	if header != nil && others != nil {
		return append([]interface{}{header}, others.([]interface{})...), nil
	} else if others != nil {
		return others.([]interface{}), nil
	}
	return []interface{}{}, nil
}

func (p *parser) callonAsciidocDocumentRawBlocks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsciidocDocumentRawBlocks1(stack["header"], stack["others"])
}

func (c *current) onDocumentBlockWithinDelimitedBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDocumentBlockWithinDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlockWithinDelimitedBlock1(stack["block"])
}

func (c *current) onTextDocumentBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonTextDocumentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextDocumentBlock1(stack["block"])
}

func (c *current) onYamlFrontMatter1(content interface{}) (interface{}, error) {
	return types.NewYamlFrontMatter(content.(string))
}

func (p *parser) callonYamlFrontMatter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatter1(stack["content"])
}

func (c *current) onYamlFrontMatterContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonYamlFrontMatterContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatterContent1()
}

func (c *current) onDocumentHeader1(title, id, authors, revision interface{}) (interface{}, error) {
	return types.NewDocumentHeader(title.([]interface{}), authors, revision)
}

func (p *parser) callonDocumentHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader1(stack["title"], stack["id"], stack["authors"], stack["revision"])
}

func (c *current) onDocumentAuthorsInlineForm1(authors interface{}) (interface{}, error) {
	return types.NewDocumentAuthors(authors.([]interface{}))
}

func (p *parser) callonDocumentAuthorsInlineForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsInlineForm1(stack["authors"])
}

func (c *current) onDocumentAuthorsAttributeForm1(author interface{}) (interface{}, error) {
	return []types.DocumentAuthor{author.(types.DocumentAuthor)}, nil
}

func (p *parser) callonDocumentAuthorsAttributeForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsAttributeForm1(stack["author"])
}

func (c *current) onDocumentAuthor1(fullname, email interface{}) (interface{}, error) {
	return types.NewDocumentAuthor(fullname, email)
}

func (p *parser) callonDocumentAuthor1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthor1(stack["fullname"], stack["email"])
}

func (c *current) onDocumentAuthorName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorName1()
}

func (c *current) onDocumentAuthorEmail5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorEmail5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail5()
}

func (c *current) onDocumentAuthorEmail1(email interface{}) (interface{}, error) {
	return email, nil
}

func (p *parser) callonDocumentAuthorEmail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail1(stack["email"])
}

func (c *current) onDocumentRevision9(revnumber, revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(revnumber, revdate, revremark)

}

func (p *parser) callonDocumentRevision9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision9(stack["revnumber"], stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision23(revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(nil, revdate, revremark)

}

func (p *parser) callonDocumentRevision23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision23(stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision1(revision interface{}) (interface{}, error) {
	return revision, nil
}

func (p *parser) callonDocumentRevision1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision1(stack["revision"])
}

func (c *current) onDocumentRevisionNumber2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber2()
}

func (c *current) onDocumentRevisionNumber8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber8()
}

func (c *current) onDocumentRevisionDate1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionDate1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionDate1()
}

func (c *current) onDocumentRevisionRemark1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionRemark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionRemark1()
}

func (c *current) onAttributeDeclaration9(value interface{}) (interface{}, error) {

	return value, nil

}

func (p *parser) callonAttributeDeclaration9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration9(stack["value"])
}

func (c *current) onAttributeDeclaration1(name, value interface{}) (interface{}, error) {
	return types.NewAttributeDeclaration(name.(string), value)
}

func (p *parser) callonAttributeDeclaration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration1(stack["name"], stack["value"])
}

func (c *current) onAttributeName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeName1()
}

func (c *current) onAttributeDeclarationValue1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeDeclarationValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue1()
}

func (c *current) onAttributeReset2(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonAttributeReset2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset2(stack["name"])
}

func (c *current) onAttributeReset11(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonAttributeReset11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset11(stack["name"])
}

func (c *current) onAttrSub1(name interface{}) (interface{}, error) {
	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonAttrSub1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrSub1(stack["name"])
}

func (c *current) onCounterSub11(name interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, nil)
}

func (p *parser) callonCounterSub11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSub11(stack["name"])
}

func (c *current) onCounterSub21(name interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonCounterSub21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSub21(stack["name"])
}

func (c *current) onCounterSubAlpha1(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonCounterSubAlpha1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubAlpha1(stack["name"], stack["start"])
}

func (c *current) onCounterSubAlpha21(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, start)
}

func (p *parser) callonCounterSubAlpha21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubAlpha21(stack["name"], stack["start"])
}

func (c *current) onCounterSubStart8() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCounterSubStart8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubStart8()
}

func (c *current) onCounterSubStart1(name, num interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, num.(int))
}

func (p *parser) callonCounterSubStart1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubStart1(stack["name"], stack["num"])
}

func (c *current) onCounterSubStart28() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCounterSubStart28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubStart28()
}

func (c *current) onCounterSubStart21(name, num interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, num.(int))
}

func (p *parser) callonCounterSubStart21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubStart21(stack["name"], stack["num"])
}

func (c *current) onAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewAttributes(attrs.([]interface{}))
}

func (p *parser) callonAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributes1(stack["attrs"])
}

func (c *current) onElementAttribute1(attr interface{}) (interface{}, error) {
	return attr, nil // avoid returning something like `[]interface{}{attr, EOL}`
}

func (p *parser) callonElementAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttribute1(stack["attr"])
}

func (c *current) onElementID1(id interface{}) (interface{}, error) {
	return types.NewElementID(id.(string))
}

func (p *parser) callonElementID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementID1(stack["id"])
}

func (c *current) onInlineElementID1(id interface{}) (interface{}, error) {
	// no EOL here since there can be multiple InlineElementID on the same line
	return types.NewInlineElementID(id.(string))
}

func (p *parser) callonInlineElementID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementID1(stack["id"])
}

func (c *current) onElementTitle1(title interface{}) (interface{}, error) {
	return types.NewElementTitle(title.(string))
}

func (p *parser) callonElementTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitle1(stack["title"])
}

func (c *current) onElementTitleContent1() (interface{}, error) {
	// "<" and ">" characters are not allowed as they are used as cross-reference markers
	return string(c.text), nil
}

func (p *parser) callonElementTitleContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitleContent1()
}

func (c *current) onElementShortHandAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewElementAttributes(attrs)
}

func (p *parser) callonElementShortHandAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementShortHandAttributes1(stack["attrs"])
}

func (c *current) onBlockAttrList1(attrs interface{}) (interface{}, error) {
	return types.NewElementAttributes(attrs)
}

func (p *parser) callonBlockAttrList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttrList1(stack["attrs"])
}

func (c *current) onBlockAttrStyle1(style interface{}) (interface{}, error) {
	return types.NewElementStyle(style.(string))
}

func (p *parser) callonBlockAttrStyle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttrStyle1(stack["style"])
}

func (c *current) onBlockAttrPositional21(value interface{}) (interface{}, error) {
	if value != nil {
		return types.NewElementNamedAttr(types.AttrPositional2, value.(string))
	}
	return nil, nil
}

func (p *parser) callonBlockAttrPositional21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttrPositional21(stack["value"])
}

func (c *current) onBlockAttrPositional31(value interface{}) (interface{}, error) {
	if value != nil {
		return types.NewElementNamedAttr(types.AttrPositional3, value.(string))
	}
	return nil, nil
}

func (p *parser) callonBlockAttrPositional31() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttrPositional31(stack["value"])
}

func (c *current) onLiteralAttribute1() (interface{}, error) {
	return types.NewLiteralAttribute()
}

func (p *parser) callonLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralAttribute1()
}

func (c *current) onPassthroughBlockAttribute1() (interface{}, error) {
	return types.NewPassthroughBlockAttribute()
}

func (p *parser) callonPassthroughBlockAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockAttribute1()
}

func (c *current) onAdmonitionMarkerAttribute1(k interface{}) (interface{}, error) {
	return types.NewAdmonitionAttribute(k.(types.AdmonitionKind))
}

func (p *parser) callonAdmonitionMarkerAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionMarkerAttribute1(stack["k"])
}

func (c *current) onSourceAttributes6(attr interface{}) (interface{}, error) {
	return attr, nil
}

func (p *parser) callonSourceAttributes6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes6(stack["attr"])
}

func (c *current) onSourceAttributes14(attr interface{}) (interface{}, error) {
	return attr, nil
}

func (p *parser) callonSourceAttributes14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes14(stack["attr"])
}

func (c *current) onSourceAttributes1(language, others interface{}) (interface{}, error) {
	return types.NewSourceAttributes(language, others.([]interface{})...)
}

func (p *parser) callonSourceAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes1(stack["language"], stack["others"])
}

func (c *current) onAttributeGroup1(attributes interface{}) (interface{}, error) {
	return types.NewAttributeGroup(attributes.([]interface{}))
}

func (p *parser) callonAttributeGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeGroup1(stack["attributes"])
}

func (c *current) onGenericAttributeWithValue1(key, value interface{}) (interface{}, error) {
	// value is (optionally) set
	return types.NewGenericAttribute(key.(string), value)
}

func (p *parser) callonGenericAttributeWithValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttributeWithValue1(stack["key"], stack["value"])
}

func (c *current) onGenericAttributeWithoutValue1(key interface{}) (interface{}, error) {
	// value is not set
	return types.NewGenericAttribute(key.(string), nil)
}

func (p *parser) callonGenericAttributeWithoutValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttributeWithoutValue1(stack["key"])
}

func (c *current) onAttributeKey1(key interface{}) (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeKey1(stack["key"])
}

func (c *current) onAttributeValue1(value interface{}) (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue1(stack["value"])
}

func (c *current) onStandaloneAttributeValue1(value interface{}) (interface{}, error) {
	// standalone attribute value cannot be followed by a `=`, otherwise it causes troubles for standalone values (eg: in images)
	return string(c.text), nil
}

func (p *parser) callonStandaloneAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStandaloneAttributeValue1(stack["value"])
}

func (c *current) onQuoteAttributes1(author, title interface{}) (interface{}, error) {
	return types.NewQuoteAttributes("quote", author, title)
}

func (p *parser) callonQuoteAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttributes1(stack["author"], stack["title"])
}

func (c *current) onVerseAttributes1(author, title interface{}) (interface{}, error) {
	return types.NewQuoteAttributes("verse", author.(string), title.(string))
}

func (p *parser) callonVerseAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseAttributes1(stack["author"], stack["title"])
}

func (c *current) onQuoteAttribute1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttribute1()
}

func (c *current) onQuotedTextAttrs1(attrs interface{}) (interface{}, error) {
	return types.NewElementAttributes(attrs)
}

func (p *parser) callonQuotedTextAttrs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextAttrs1(stack["attrs"])
}

func (c *current) onQuotedTextAttrRole1(role interface{}) (interface{}, error) {
	return types.NewElementRole(role.(string))
}

func (p *parser) callonQuotedTextAttrRole1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedTextAttrRole1(stack["role"])
}

func (c *current) onStandaloneAttributes1(attributes interface{}) (interface{}, error) {
	// standalone attributes, i.e., with nothing afterwards
	return types.NewAttributes(attributes)
}

func (p *parser) callonStandaloneAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStandaloneAttributes1(stack["attributes"])
}

func (c *current) onShortHandAttrOption1(option interface{}) (interface{}, error) {
	return types.NewElementOption(option.(string))
}

func (p *parser) callonShortHandAttrOption1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttrOption1(stack["option"])
}

func (c *current) onShortHandAttrID1(id interface{}) (interface{}, error) {
	return types.NewElementID(id.(string))
}

func (p *parser) callonShortHandAttrID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttrID1(stack["id"])
}

func (c *current) onShortHandAttrRole1(role interface{}) (interface{}, error) {
	return types.NewElementRole(role.(string))
}

func (p *parser) callonShortHandAttrRole1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttrRole1(stack["role"])
}

func (c *current) onPositionalValue1(value interface{}) (interface{}, error) {
	return value.(string), nil
}

func (p *parser) callonPositionalValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalValue1(stack["value"])
}

func (c *current) onNamedAttrs1(attrs interface{}) (interface{}, error) {
	return types.NewElementAttributes(attrs)
}

func (p *parser) callonNamedAttrs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttrs1(stack["attrs"])
}

func (c *current) onNamedAttrPair1(n, v interface{}) (interface{}, error) {
	return types.NewElementNamedAttr(n.(string), v.(string))
}

func (p *parser) callonNamedAttrPair1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttrPair1(stack["n"], stack["v"])
}

func (c *current) onAttrEmpty1() (interface{}, error) {
	return nil, nil
}

func (p *parser) callonAttrEmpty1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrEmpty1()
}

func (c *current) onAttrValSQ1(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonAttrValSQ1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValSQ1(stack["val"])
}

func (c *current) onAttrValSQin1(val interface{}) (interface{}, error) {
	return types.NewString(val)
}

func (p *parser) callonAttrValSQin1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValSQin1(stack["val"])
}

func (c *current) onAttrValSQEsc1() (interface{}, error) {
	return `'`, nil
}

func (p *parser) callonAttrValSQEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValSQEsc1()
}

func (c *current) onAttrValDQ1(val interface{}) (interface{}, error) {
	return val, nil
}

func (p *parser) callonAttrValDQ1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValDQ1(stack["val"])
}

func (c *current) onAttrValDQin1(val interface{}) (interface{}, error) {
	return types.NewString(val)
}

func (p *parser) callonAttrValDQin1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValDQin1(stack["val"])
}

func (c *current) onAttrValDQEsc1() (interface{}, error) {
	return `"`, nil
}

func (p *parser) callonAttrValDQEsc1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValDQEsc1()
}

func (c *current) onAttrValPosFB1() (interface{}, error) {
	return strings.TrimSpace(string(c.text)), nil
}

func (p *parser) callonAttrValPosFB1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValPosFB1()
}

func (c *current) onAttrValNamedFB1() (interface{}, error) {
	return strings.TrimSpace(string(c.text)), nil
}

func (p *parser) callonAttrValNamedFB1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValNamedFB1()
}

func (c *current) onShortHandValuePlain1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonShortHandValuePlain1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandValuePlain1()
}

func (c *current) onNamedAttr1(key, value interface{}) (interface{}, error) {
	return types.NewElementNamedAttr(key.(string), value.(string))
}

func (p *parser) callonNamedAttr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttr1(stack["key"], stack["value"])
}

func (c *current) onNamedAttrKey1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonNamedAttrKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttrKey1()
}

func (c *current) onAttrValuePlain1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttrValuePlain1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValuePlain1()
}

func (c *current) onAttrValueSingleQuoted1() (interface{}, error) {
	return string(c.text[1 : len(c.text)-1]), nil
}

func (p *parser) callonAttrValueSingleQuoted1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValueSingleQuoted1()
}

func (c *current) onAttrValueDoubleQuoted1() (interface{}, error) {
	return string(c.text[1 : len(c.text)-1]), nil
}

func (p *parser) callonAttrValueDoubleQuoted1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValueDoubleQuoted1()
}

func (c *current) onAttrValueNone1() (interface{}, error) {
	return "", nil
}

func (p *parser) callonAttrValueNone1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrValueNone1()
}

func (c *current) onSingleQuotedString1(elements interface{}) (interface{}, error) {
	return types.NewQuotedString(types.SingleQuote, elements.([]interface{}))
}

func (p *parser) callonSingleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedString1(stack["elements"])
}

func (c *current) onSingleQuotedStringElements1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonSingleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElements1(stack["elements"])
}

func (c *current) onSingleQuotedStringElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonSingleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement1(stack["element"])
}

func (c *current) onSingleQuotedStringFallbackCharacter3() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuotedStringFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringFallbackCharacter3()
}

func (c *current) onDoubleQuotedString1(elements interface{}) (interface{}, error) {
	return types.NewQuotedString(types.DoubleQuote, elements.([]interface{}))
}

func (p *parser) callonDoubleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedString1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElements1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonDoubleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElements1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonDoubleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement1(stack["element"])
}

func (c *current) onDoubleQuotedStringFallbackCharacter1() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuotedStringFallbackCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringFallbackCharacter1()
}

func (c *current) onSection7() (interface{}, error) {

	// `=` is level 0, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonSection7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection7()
}

func (c *current) onSection10(attributes, level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonSection10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection10(stack["attributes"], stack["level"])
}

func (c *current) onSection1(attributes, level, title, id interface{}) (interface{}, error) {
	return types.NewSection(level.(int), title.([]interface{}), id.([]interface{}), attributes)
}

func (p *parser) callonSection1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection1(stack["attributes"], stack["level"], stack["title"], stack["id"])
}

func (c *current) onTitleElements1(elements interface{}) (interface{}, error) {
	// absorbs heading and trailing spaces
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonTitleElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElements1(stack["elements"])
}

func (c *current) onTitleElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonTitleElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElement1(stack["element"])
}

func (c *current) onUserMacroBlock1(name, value, attrs interface{}) (interface{}, error) {
	return types.NewUserMacroBlock(name.(string), value.(string), attrs, string(c.text))
}

func (p *parser) callonUserMacroBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onInlineUserMacro1(name, value, attrs interface{}) (interface{}, error) {
	return types.NewInlineUserMacro(name.(string), value.(string), attrs, string(c.text))
}

func (p *parser) callonInlineUserMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onUserMacroName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUserMacroName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroName1()
}

func (c *current) onUserMacroValue1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUserMacroValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroValue1()
}

func (c *current) onUserMacroAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewAttributes(attrs.([]interface{}))
}

func (p *parser) callonUserMacroAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroAttributes1(stack["attrs"])
}

func (c *current) onFileInclusion4(path, inlineAttributes interface{}) (interface{}, error) {

	return types.NewFileInclusion(path.(types.Location), inlineAttributes.(types.Attributes), string(c.text))

}

func (p *parser) callonFileInclusion4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion4(stack["path"], stack["inlineAttributes"])
}

func (c *current) onFileInclusion1(incl interface{}) (interface{}, error) {
	return incl.(types.FileInclusion), nil
}

func (p *parser) callonFileInclusion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion1(stack["incl"])
}

func (c *current) onFileIncludeAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewAttributes(attrs.([]interface{}))
}

func (p *parser) callonFileIncludeAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileIncludeAttributes1(stack["attrs"])
}

func (c *current) onLineRangesAttribute1(lines interface{}) (interface{}, error) {

	return types.NewLineRangesAttribute(lines)
}

func (p *parser) callonLineRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttribute1(stack["lines"])
}

func (c *current) onLineRangesAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonLineRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleLineRanges9(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleLineRanges9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges9(stack["other"])
}

func (c *current) onMultipleLineRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultipleQuotedLineRanges10(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleQuotedLineRanges10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges10(stack["other"])
}

func (c *current) onMultipleQuotedLineRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleQuotedLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultiLineRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineRange1(stack["start"], stack["end"])
}

func (c *current) onMultiLineQuotedRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineQuotedRange1(stack["start"], stack["end"])
}

func (c *current) onSingleLineRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineRange1(stack["singleline"])
}

func (c *current) onSingleLineQuotedRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineQuotedRange1(stack["singleline"])
}

func (c *current) onUndefinedLineRange1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUndefinedLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUndefinedLineRange1()
}

func (c *current) onTagRangesAttribute1(tags interface{}) (interface{}, error) {
	//TODO: check if 'tags'/'tag' is allowed for both single and multiple values
	return types.NewTagRangesAttribute(tags.([]interface{}))
}

func (p *parser) callonTagRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttribute1(stack["tags"])
}

func (c *current) onTagRangesAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonTagRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleTagRanges7(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleTagRanges7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges7(stack["other"])
}

func (c *current) onMultipleTagRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleTagRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges1(stack["first"], stack["others"])
}

func (c *current) onTagRange2(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), true)
}

func (p *parser) callonTagRange2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange2(stack["tag"])
}

func (c *current) onTagRange7(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), false)
}

func (p *parser) callonTagRange7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange7(stack["tag"])
}

func (c *current) onTagWildcard4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagWildcard4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard4()
}

func (c *current) onTagWildcard7(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagWildcard7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard7(stack["stars"])
}

func (c *current) onTagWildcard1(stars interface{}) (interface{}, error) {
	return stars, nil
}

func (p *parser) callonTagWildcard1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard1(stack["stars"])
}

func (c *current) onVerbatimFileLine6() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonVerbatimFileLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimFileLine6()
}

func (c *current) onVerbatimFileLine1(content interface{}) (interface{}, error) {
	return types.NewVerbatimFileLine(content.(string))
}

func (p *parser) callonVerbatimFileLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimFileLine1(stack["content"])
}

func (c *current) onIncludedFileLine8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine8()
}

func (c *current) onIncludedFileLine1(content interface{}) (interface{}, error) {
	return types.NewIncludedFileLine(content.([]interface{}))
}

func (p *parser) callonIncludedFileLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine1(stack["content"])
}

func (c *current) onIncludedFileStartTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileStartTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag5()
}

func (c *current) onIncludedFileStartTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileStartTag(tag.(string))
}

func (p *parser) callonIncludedFileStartTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag1(stack["tag"])
}

func (c *current) onIncludedFileEndTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileEndTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag5()
}

func (c *current) onIncludedFileEndTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileEndTag(tag.(string))
}

func (p *parser) callonIncludedFileEndTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag1(stack["tag"])
}

func (c *current) onListParagraph2(comment interface{}) (interface{}, error) {
	return comment, nil

}

func (p *parser) callonListParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph2(stack["comment"])
}

func (c *current) onListParagraph5(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), nil)

}

func (p *parser) callonListParagraph5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph5(stack["lines"])
}

func (c *current) onListParagraphLine24(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonListParagraphLine24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine24(stack["elements"])
}

func (c *current) onListParagraphLine1(line interface{}) (interface{}, error) {

	return line, nil

}

func (p *parser) callonListParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine1(stack["line"])
}

func (c *current) onContinuedListItemElement1(element interface{}) (interface{}, error) {
	return types.NewContinuedListItemElement(element) // offset is negative
}

func (p *parser) callonContinuedListItemElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemElement1(stack["element"])
}

func (c *current) onContinuedListItemContent1(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonContinuedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent1(stack["content"])
}

func (c *current) onOrderedListItem1(attrs, prefix, content interface{}) (interface{}, error) {
	return types.NewOrderedListItem(prefix.(types.OrderedListItemPrefix), content.([]interface{}), attrs)
}

func (p *parser) callonOrderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItem1(stack["attrs"], stack["prefix"], stack["content"])
}

func (c *current) onOrderedListItemPrefix10() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonOrderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix10()
}

func (c *current) onOrderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonOrderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix13(stack["depth"])
}

func (c *current) onOrderedListItemPrefix7(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListItemPrefix(types.Arabic, 1)
	case 2:
		return types.NewOrderedListItemPrefix(types.LowerAlpha, 2)
	case 3:
		return types.NewOrderedListItemPrefix(types.LowerRoman, 3)
	case 4:
		return types.NewOrderedListItemPrefix(types.UpperAlpha, 4)
	default:
		return types.NewOrderedListItemPrefix(types.UpperRoman, 5)
	}

}

func (p *parser) callonOrderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix7(stack["depth"])
}

func (c *current) onOrderedListItemPrefix14() (interface{}, error) {
	// numbering style: "1."
	return types.NewOrderedListItemPrefix(types.Arabic, 1)

}

func (p *parser) callonOrderedListItemPrefix14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix14()
}

func (c *current) onOrderedListItemPrefix19() (interface{}, error) {
	// numbering style: "a."
	return types.NewOrderedListItemPrefix(types.LowerAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix19()
}

func (c *current) onOrderedListItemPrefix23() (interface{}, error) {
	// numbering style: "A."
	return types.NewOrderedListItemPrefix(types.UpperAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix23()
}

func (c *current) onOrderedListItemPrefix27() (interface{}, error) {
	// numbering style: "i)"
	return types.NewOrderedListItemPrefix(types.LowerRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix27()
}

func (c *current) onOrderedListItemPrefix32() (interface{}, error) {
	// numbering style: "I)"
	return types.NewOrderedListItemPrefix(types.UpperRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix32()
}

func (c *current) onOrderedListItemPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonOrderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix1(stack["prefix"])
}

func (c *current) onOrderedListItemContent1(elements interface{}) (interface{}, error) {
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonOrderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemContent1(stack["elements"])
}

func (c *current) onUnorderedListItem1(attrs, prefix, checkstyle, content interface{}) (interface{}, error) {
	return types.NewUnorderedListItem(prefix.(types.UnorderedListItemPrefix), checkstyle, content.([]interface{}), attrs)
}

func (p *parser) callonUnorderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItem1(stack["attrs"], stack["prefix"], stack["checkstyle"], stack["content"])
}

func (c *current) onUnorderedListItemPrefix10() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonUnorderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix10()
}

func (c *current) onUnorderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonUnorderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix13(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix7(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListItemPrefix(types.OneAsterisk, 1)
	case 2:
		return types.NewUnorderedListItemPrefix(types.TwoAsterisks, 2)
	case 3:
		return types.NewUnorderedListItemPrefix(types.ThreeAsterisks, 3)
	case 4:
		return types.NewUnorderedListItemPrefix(types.FourAsterisks, 4)
	default:
		return types.NewUnorderedListItemPrefix(types.FiveAsterisks, 5)
	}

}

func (p *parser) callonUnorderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix7(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix15() (interface{}, error) {
	return types.NewUnorderedListItemPrefix(types.Dash, 1)

}

func (p *parser) callonUnorderedListItemPrefix15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix15()
}

func (c *current) onUnorderedListItemPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonUnorderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix1(stack["prefix"])
}

func (c *current) onUnorderedListItemCheckStyle7() (interface{}, error) {
	return types.Unchecked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle7()
}

func (c *current) onUnorderedListItemCheckStyle9() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle9()
}

func (c *current) onUnorderedListItemCheckStyle11() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle11()
}

func (c *current) onUnorderedListItemCheckStyle1(style interface{}) (interface{}, error) {
	return style, nil

}

func (p *parser) callonUnorderedListItemCheckStyle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle1(stack["style"])
}

func (c *current) onUnorderedListItemContent1(elements interface{}) (interface{}, error) {
	// Another list or a literal paragraph immediately following a list item will be implicitly included in the list item
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonUnorderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemContent1(stack["elements"])
}

func (c *current) onLabeledListItem1(attrs, term, separator, description interface{}) (interface{}, error) {
	return types.NewLabeledListItem(len(separator.(string))-1, term.([]interface{}), description, attrs)
}

func (p *parser) callonLabeledListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItem1(stack["attrs"], stack["term"], stack["separator"], stack["description"])
}

func (c *current) onVerbatimLabeledListItemTerm3() (interface{}, error) {
	return types.NewStringElement(strings.TrimSpace(string(c.text)))
}

func (p *parser) callonVerbatimLabeledListItemTerm3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLabeledListItemTerm3()
}

func (c *current) onVerbatimLabeledListItemTerm1(content interface{}) (interface{}, error) {
	return types.NewInlineElements(content)
}

func (p *parser) callonVerbatimLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLabeledListItemTerm1(stack["content"])
}

func (c *current) onLabeledListItemTerm1(elements interface{}) (interface{}, error) {
	// rule as an extra entrypoint
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTerm1(stack["elements"])
}

func (c *current) onLabeledListItemTermElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonLabeledListItemTermElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTermElement1(stack["element"])
}

func (c *current) onLabeledListItemSeparator4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonLabeledListItemSeparator4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator4()
}

func (c *current) onLabeledListItemSeparator7(separator interface{}) (bool, error) {

	// use a predicate to make sure that only `::` to `::::` are allowed
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonLabeledListItemSeparator7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator7(stack["separator"])
}

func (c *current) onLabeledListItemSeparator1(separator interface{}) (interface{}, error) {
	return separator, nil
}

func (p *parser) callonLabeledListItemSeparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator1(stack["separator"])
}

func (c *current) onLabeledListItemDescription1(elements interface{}) (interface{}, error) {

	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemDescription1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemDescription1(stack["elements"])
}

func (c *current) onAdmonitionKind2() (interface{}, error) {
	return types.Tip, nil

}

func (p *parser) callonAdmonitionKind2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind2()
}

func (c *current) onAdmonitionKind4() (interface{}, error) {
	return types.Note, nil

}

func (p *parser) callonAdmonitionKind4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind4()
}

func (c *current) onAdmonitionKind6() (interface{}, error) {
	return types.Important, nil

}

func (p *parser) callonAdmonitionKind6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind6()
}

func (c *current) onAdmonitionKind8() (interface{}, error) {
	return types.Warning, nil

}

func (p *parser) callonAdmonitionKind8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind8()
}

func (c *current) onAdmonitionKind10() (interface{}, error) {
	return types.Caution, nil
}

func (p *parser) callonAdmonitionKind10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind10()
}

func (c *current) onRawParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonRawParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onRawParagraph13(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.MarkdownQuote, content.([]interface{}), attributes)

}

func (p *parser) callonRawParagraph13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph13(stack["attributes"], stack["content"])
}

func (c *current) onRawParagraph26(attributes interface{}) (bool, error) {

	// verify that one of the attributes is `passthrough`
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, exists := attrs[types.AttrKind]
		return exists && kind == types.Passthrough, nil
	}
	return false, nil

}

func (p *parser) callonRawParagraph26() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph26(stack["attributes"])
}

func (c *current) onRawParagraph21(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Passthrough, content.([]interface{}), attributes)

}

func (p *parser) callonRawParagraph21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph21(stack["attributes"], stack["content"])
}

func (c *current) onRawParagraph32(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)

}

func (p *parser) callonRawParagraph32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph32(stack["attributes"], stack["lines"])
}

func (c *current) onMarkdownQuoteBlockRawContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonMarkdownQuoteBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteBlockRawContent2(stack["content"])
}

func (c *current) onRawParagraphLine1(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))
}

func (p *parser) callonRawParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraphLine1(stack["content"])
}

func (c *current) onRawParagraphLineContent1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonRawParagraphLineContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraphLineContent1()
}

func (c *current) onParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onParagraph18(attributes interface{}) (bool, error) {

	// verify that one of the attributes is `passthrough`
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, exists := attrs[types.AttrKind]
		return exists && kind == types.Passthrough, nil
	}
	return false, nil

}

func (p *parser) callonParagraph18() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph18(stack["attributes"])
}

func (c *current) onParagraph13(attributes, content interface{}) (interface{}, error) {

	return types.NewDelimitedBlock(types.Passthrough, content.([]interface{}), attributes)

}

func (p *parser) callonParagraph13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph13(stack["attributes"], stack["content"])
}

func (c *current) onParagraph24(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)

}

func (p *parser) callonParagraph24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph24(stack["attributes"], stack["lines"])
}

func (c *current) onMarkdownQuoteBlockAttribution5() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonMarkdownQuoteBlockAttribution5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteBlockAttribution5()
}

func (c *current) onMarkdownQuoteBlockAttribution1(author interface{}) (interface{}, error) {
	return author, nil
}

func (p *parser) callonMarkdownQuoteBlockAttribution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteBlockAttribution1(stack["author"])
}

func (c *current) onOpenPassthroughParagraphContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonOpenPassthroughParagraphContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOpenPassthroughParagraphContent2(stack["content"])
}

func (c *current) onSimpleParagraph6(attributes interface{}) (bool, error) {
	// skip if the '[literal]' attribute was set on this paragraph
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, exists := attrs[types.AttrKind]
		return !exists || kind != types.Literal, nil
	}
	return true, nil

}

func (p *parser) callonSimpleParagraph6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleParagraph6(stack["attributes"])
}

func (c *current) onSimpleParagraph1(attributes, firstLine, otherLines interface{}) (interface{}, error) {

	return types.NewParagraph(append([]interface{}{firstLine}, otherLines.([]interface{})...), attributes)
}

func (p *parser) callonSimpleParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleParagraph1(stack["attributes"], stack["firstLine"], stack["otherLines"])
}

func (c *current) onFirstParagraphRawLine4(elements interface{}) (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonFirstParagraphRawLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstParagraphRawLine4(stack["elements"])
}

func (c *current) onFirstParagraphRawLine1(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))
}

func (p *parser) callonFirstParagraphRawLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstParagraphRawLine1(stack["content"])
}

func (c *current) onContinuedRawParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonContinuedRawParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedRawParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onContinuedRawParagraph12(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)
}

func (p *parser) callonContinuedRawParagraph12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedRawParagraph12(stack["attributes"], stack["lines"])
}

func (c *current) onContinuedRawParagraphLines1(firstLine, otherLines interface{}) (interface{}, error) {
	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonContinuedRawParagraphLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedRawParagraphLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onRawVerseParagraph6(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Verse, nil
	}
	return false, nil

}

func (p *parser) callonRawVerseParagraph6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawVerseParagraph6(stack["attributes"])
}

func (c *current) onRawVerseParagraph1(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)

}

func (p *parser) callonRawVerseParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawVerseParagraph1(stack["attributes"], stack["lines"])
}

func (c *current) onInlineElements7(comment interface{}) (interface{}, error) {
	return types.NewInlineElements([]interface{}{comment})

}

func (p *parser) callonInlineElements7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements7(stack["comment"])
}

func (c *current) onInlineElements10(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonInlineElements10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements10(stack["elements"])
}

func (c *current) onInlineElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonInlineElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements1(stack["elements"])
}

func (c *current) onInlineElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonInlineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement1(stack["element"])
}

func (c *current) onLineBreak1() (interface{}, error) {
	return types.NewLineBreak()
}

func (p *parser) callonLineBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineBreak1()
}

func (c *current) onConstrainedQuotedText1(text interface{}) (interface{}, error) {
	// if a '^' or '~' is alone (ie, badly formatted superscript or subscript, then accept it as-is)
	return text, nil
}

func (p *parser) callonConstrainedQuotedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstrainedQuotedText1(stack["text"])
}

func (c *current) onSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	// rule used withn `words` to detect superscript or subscript portions, eg in math formulae.
	return string(c.text), nil
}

func (p *parser) callonSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptOrSuperscriptPrefix3()
}

func (c *current) onOneOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonOneOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOneOrMoreBackslashes1()
}

func (c *current) onTwoOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonTwoOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTwoOrMoreBackslashes1()
}

func (c *current) onDoubleQuoteBoldText1(attrs, elements interface{}) (interface{}, error) {
	return types.NewQuotedText(types.Bold, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onSingleQuoteBoldText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '**' to emphazise a portion of a word)
	return types.NewQuotedText(types.Bold, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteBoldText17(attrs, elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation.
	return types.NewQuotedText(types.Bold, attrs, elements.([]interface{})) // include the second heading `*` as a regular StringElement in the bold content
}

func (p *parser) callonSingleQuoteBoldText17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText17(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onEscapedBoldText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "**", elements.([]interface{}))

}

func (p *parser) callonEscapedBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation
	result := append([]interface{}{"*"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "*", result)

}

func (p *parser) callonEscapedBoldText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "*", elements.([]interface{}))
}

func (p *parser) callonEscapedBoldText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicText1(attrs, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Italic, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or a italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onSingleQuoteItalicText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '__' to emphazise a portion of a word)
	return types.NewQuotedText(types.Italic, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteItalicText14(attrs, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation.
	return types.NewQuotedText(types.Italic, attrs, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content
}

func (p *parser) callonSingleQuoteItalicText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText14(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or an italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onEscapedItalicText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "__", elements.([]interface{}))

}

func (p *parser) callonEscapedItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation
	result := append([]interface{}{"_"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "_", result)

}

func (p *parser) callonEscapedItalicText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "_", elements.([]interface{}))
}

func (p *parser) callonEscapedItalicText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceText1(attrs, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Monospace, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	// or a monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextFallbackCharacter3()
}

func (c *current) onSingleQuoteMonospaceText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs "``" to emphazise a portion of a word)
	return types.NewQuotedText(types.Monospace, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMonospaceText14(attrs, elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation.
	return types.NewQuotedText(types.Monospace, attrs, elements.([]interface{})) // include the second heading "`" as a regular StringElement in the monospace content
}

func (p *parser) callonSingleQuoteMonospaceText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText14(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	// or an monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextFallbackCharacter3()
}

func (c *current) onEscapedMonospaceText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "``", elements.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation
	result := append([]interface{}{"`"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "`", result)

}

func (p *parser) callonEscapedMonospaceText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "`", elements.([]interface{}))
}

func (p *parser) callonEscapedMonospaceText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMarkedText1(attrs, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Marked, attrs, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteMarkedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedText1(stack["attrs"], stack["elements"])
}

func (c *current) onDoubleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	// or a marked delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextFallbackCharacter3()
}

func (c *current) onSingleQuoteMarkedText2(attrs, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '##' to emphazise a portion of a word)
	return types.NewQuotedText(types.Marked, attrs, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText2(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMarkedText14(attrs, elements interface{}) (interface{}, error) {
	// unbalanced `##` vs `#` punctuation.
	return types.NewQuotedText(types.Marked, attrs, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content
}

func (p *parser) callonSingleQuoteMarkedText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText14(stack["attrs"], stack["elements"])
}

func (c *current) onSingleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	// or a mark delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextFallbackCharacter3()
}

func (c *current) onEscapedMarkedText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "##", elements.([]interface{}))

}

func (p *parser) callonEscapedMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `##` vs `#` punctuation
	result := append([]interface{}{"#"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "#", result)

}

func (p *parser) callonEscapedMarkedText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "#", elements.([]interface{}))
}

func (p *parser) callonEscapedMarkedText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText18(stack["backslashes"], stack["elements"])
}

func (c *current) onSubscriptText1(attrs, element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Subscript, attrs, element)
}

func (p *parser) callonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptText1(stack["attrs"], stack["element"])
}

func (c *current) onNonSubscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '~'
	return c.text, nil
}

func (p *parser) callonNonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSubscriptText1()
}

func (c *current) onEscapedSubscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "~", element)
}

func (p *parser) callonEscapedSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSuperscriptText1(attrs, element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Superscript, attrs, element)
}

func (p *parser) callonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptText1(stack["attrs"], stack["element"])
}

func (c *current) onNonSuperscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '^'
	return c.text, nil
}

func (p *parser) callonNonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSuperscriptText1()
}

func (c *current) onEscapedSuperscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "^", element)
}

func (p *parser) callonEscapedSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSinglePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.SinglePlusPassthrough, []interface{}{content})
}

func (p *parser) callonSinglePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthrough1(stack["content"])
}

func (c *current) onSinglePlusPassthroughContent2() (interface{}, error) {
	// no space in the first or last position of the content, but allowed elsewhere
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent2()
}

func (c *current) onSinglePlusPassthroughContent24() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent24()
}

func (c *current) onTriplePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.TriplePlusPassthrough, []interface{}{content})
}

func (p *parser) callonTriplePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthrough1(stack["content"])
}

func (c *current) onTriplePlusPassthroughContent2() (interface{}, error) {
	// spaces and newlines are also allowed in the first or last position of the content and elsewhere too
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent2()
}

func (c *current) onTriplePlusPassthroughContent8() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent8()
}

func (c *current) onPassthroughMacro2(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.PassthroughMacro, []interface{}{content})
}

func (p *parser) callonPassthroughMacro2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro2(stack["content"])
}

func (c *current) onPassthroughMacro9(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.PassthroughMacro, content.([]interface{}))
}

func (p *parser) callonPassthroughMacro9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro9(stack["content"])
}

func (c *current) onPassthroughMacroCharacter1() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonPassthroughMacroCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacroCharacter1()
}

func (c *current) onInternalCrossReference2(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id.(string), label.(string))
}

func (p *parser) callonInternalCrossReference2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference2(stack["id"], stack["label"])
}

func (c *current) onInternalCrossReference13(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id.(string), nil)
}

func (p *parser) callonInternalCrossReference13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference13(stack["id"])
}

func (c *current) onExternalCrossReference1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewExternalCrossReference(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonExternalCrossReference1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onLinkAttributes1(firstAttr, otherattrs interface{}) (interface{}, error) {
	return types.NewInlineLinkAttributes(append(firstAttr.([]interface{}), otherattrs.([]interface{})...))
}

func (p *parser) callonLinkAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkAttributes1(stack["firstAttr"], stack["otherattrs"])
}

func (c *current) onFirstLinkAttributeElement4(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFirstLinkAttributeElement4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement4(stack["elements"])
}

func (c *current) onFirstLinkAttributeElement19(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFirstLinkAttributeElement19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement19(stack["elements"])
}

func (c *current) onFirstLinkAttributeElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonFirstLinkAttributeElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement1(stack["element"])
}

func (c *current) onAttributeChar1() (interface{}, error) {
	// excludes comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeChar1()
}

func (c *current) onQuotedAttributeChar1() (interface{}, error) {
	// does not exclude comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonQuotedAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedAttributeChar1()
}

func (c *current) onUnquotedAttributeChar1() (interface{}, error) {
	// excludes comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonUnquotedAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeChar1()
}

func (c *current) onInlineLinks1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonInlineLinks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineLinks1(stack["elements"])
}

func (c *current) onResolvedRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonResolvedRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onResolvedExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonResolvedExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onImageBlock1(attributes, path, inlineAttrs interface{}) (interface{}, error) {
	return types.NewImageBlock(path.(types.Location), inlineAttrs.(types.Attributes), attributes)
}

func (p *parser) callonImageBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock1(stack["attributes"], stack["path"], stack["inlineAttrs"])
}

func (c *current) onInlineImage1(path, inlineAttrs interface{}) (interface{}, error) {
	return types.NewInlineImage(path.(types.Location), inlineAttrs.(types.Attributes))
}

func (p *parser) callonInlineImage1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage1(stack["path"], stack["inlineAttrs"])
}

func (c *current) onInlineImageAttrs1(alt, w, h, nv interface{}) (interface{}, error) {
	return types.NewElementAttributes(alt, w, h, nv)
}

func (p *parser) callonInlineImageAttrs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImageAttrs1(stack["alt"], stack["w"], stack["h"], stack["nv"])
}

func (c *current) onImageAttrList1(attrs interface{}) (interface{}, error) {
	return types.NewElementAttributes(attrs)
}

func (p *parser) callonImageAttrList1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAttrList1(stack["attrs"])
}

func (c *current) onImageAltInline1(value interface{}) (interface{}, error) {
	return types.NewInlineAttribute(types.AttrImageAlt, value)
}

func (p *parser) callonImageAltInline1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAltInline1(stack["value"])
}

func (c *current) onImageWidth1(value interface{}) (interface{}, error) {
	return types.NewInlineAttribute(types.AttrWidth, value)
}

func (p *parser) callonImageWidth1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageWidth1(stack["value"])
}

func (c *current) onImageHeight1(value interface{}) (interface{}, error) {
	return types.NewInlineAttribute(types.AttrImageHeight, value)
}

func (p *parser) callonImageHeight1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageHeight1(stack["value"])
}

func (c *current) onImageAltAttr1(value interface{}) (interface{}, error) {
	return types.NewElementNamedAttr(types.AttrImageAlt, value.(string))
}

func (p *parser) callonImageAltAttr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAltAttr1(stack["value"])
}

func (c *current) onImageWidthAttr1(value interface{}) (interface{}, error) {
	if value != nil {
		return types.NewElementNamedAttr(types.AttrWidth, value.(string))
	}
	return nil, nil
}

func (p *parser) callonImageWidthAttr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageWidthAttr1(stack["value"])
}

func (c *current) onImageHeightAttr1(value interface{}) (interface{}, error) {
	if value != nil {
		return types.NewElementNamedAttr(types.AttrImageHeight, value.(string))
	}
	return nil, nil
}

func (p *parser) callonImageHeightAttr1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageHeightAttr1(stack["value"])
}

func (c *current) onInlineIcon5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineIcon5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon5()
}

func (c *current) onInlineIcon1(icon, attrs interface{}) (interface{}, error) {
	return types.NewIcon(icon.(string), attrs.(types.Attributes))
}

func (p *parser) callonInlineIcon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon1(stack["icon"], stack["attrs"])
}

func (c *current) onIconAttrs1(size, nv interface{}) (interface{}, error) {
	return types.NewElementAttributes(size, nv)
}

func (p *parser) callonIconAttrs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIconAttrs1(stack["size"], stack["nv"])
}

func (c *current) onIconSize1(value interface{}) (interface{}, error) {
	return types.NewInlineAttribute(types.AttrIconSize, value)
}

func (p *parser) callonIconSize1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIconSize1(stack["value"])
}

func (c *current) onInlineFootnote2(content interface{}) (interface{}, error) {
	return types.NewFootnote("", content.([]interface{}))
}

func (p *parser) callonInlineFootnote2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote2(stack["content"])
}

func (c *current) onInlineFootnote8(ref, content interface{}) (interface{}, error) {
	return types.NewFootnote(ref.(string), content)
}

func (p *parser) callonInlineFootnote8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote8(stack["ref"], stack["content"])
}

func (c *current) onFootnoteContent1(elements interface{}) (interface{}, error) {
	// footnote content may span multiple lines
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonFootnoteContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteContent1(stack["elements"])
}

func (c *current) onDelimitedBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock1(stack["block"])
}

func (c *current) onRawLine1(content interface{}) (interface{}, error) {
	// line MAY have content
	return types.NewRawLine(content.(string))
}

func (p *parser) callonRawLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawLine1(stack["content"])
}

func (c *current) onRawLineContent1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonRawLineContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawLineContent1()
}

func (c *current) onVerbatimLine1(content, callouts interface{}) (interface{}, error) {
	return types.NewVerbatimLine(content.(string), callouts)
}

func (p *parser) callonVerbatimLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLine1(stack["content"], stack["callouts"])
}

func (c *current) onVerbatimLineContent1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonVerbatimLineContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLineContent1()
}

func (c *current) onCallout5() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCallout5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout5()
}

func (c *current) onCallout1(ref interface{}) (interface{}, error) {
	return types.NewCallout(ref.(int))
}

func (p *parser) callonCallout1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout1(stack["ref"])
}

func (c *current) onCalloutListItem1(ref, description interface{}) (interface{}, error) {
	return types.NewCalloutListItem(ref.(int), description.([]interface{}))
}

func (p *parser) callonCalloutListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItem1(stack["ref"], stack["description"])
}

func (c *current) onCalloutListItemPrefix5() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCalloutListItemPrefix5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItemPrefix5()
}

func (c *current) onCalloutListItemPrefix1(ref interface{}) (interface{}, error) {
	return ref, nil
}

func (p *parser) callonCalloutListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItemPrefix1(stack["ref"])
}

func (c *current) onFencedBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Fenced, content.([]interface{}), attributes)
}

func (p *parser) callonFencedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlock1(stack["attributes"], stack["content"])
}

func (c *current) onFencedBlockRawContent2(line interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return line, nil
}

func (p *parser) callonFencedBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockRawContent2(stack["line"])
}

func (c *current) onListingBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Listing, content.([]interface{}), attributes)
}

func (p *parser) callonListingBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlock1(stack["attributes"], stack["content"])
}

func (c *current) onListingBlockRawContent2(line interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return line, nil
}

func (p *parser) callonListingBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockRawContent2(stack["line"])
}

func (c *current) onExampleBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Example, content.([]interface{}), attributes)
}

func (p *parser) callonExampleBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlock1(stack["attributes"], stack["content"])
}

func (c *current) onExampleBlockRawContent2(line interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return line, nil
}

func (p *parser) callonExampleBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent2(stack["line"])
}

func (c *current) onQuoteBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Quote, content.([]interface{}), attributes)
}

func (p *parser) callonQuoteBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlock1(stack["attributes"], stack["content"])
}

func (c *current) onQuoteBlockVerbatimElement2(line interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return line, nil
}

func (p *parser) callonQuoteBlockVerbatimElement2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockVerbatimElement2(stack["line"])
}

func (c *current) onSidebarBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Sidebar, content.([]interface{}), attributes)
}

func (p *parser) callonSidebarBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlock1(stack["attributes"], stack["content"])
}

func (c *current) onSidebarBlockRawContent2(line interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return line, nil
}

func (p *parser) callonSidebarBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent2(stack["line"])
}

func (c *current) onPassthroughBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Passthrough, content.([]interface{}), attributes)
}

func (p *parser) callonPassthroughBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlock1(stack["attributes"], stack["content"])
}

func (c *current) onPassthroughBlockRawContent2(line interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return line, nil
}

func (p *parser) callonPassthroughBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockRawContent2(stack["line"])
}

func (c *current) onThematicBreak1() (interface{}, error) {
	return types.NewThematicBreak()
}

func (p *parser) callonThematicBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onThematicBreak1()
}

func (c *current) onNormalElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonNormalElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalElement1(stack["element"])
}

func (c *current) onVerseBlockElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonVerseBlockElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockElement1(stack["element"])
}

func (c *current) onVerseBlockParagraph1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), nil)
}

func (p *parser) callonVerseBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraph1(stack["lines"])
}

func (c *current) onVerseBlockParagraphLine1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonVerseBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraphLine1(stack["elements"])
}

func (c *current) onTable1(attrs, header, lines interface{}) (interface{}, error) {
	// end delimiter or end of file
	return types.NewTable(header, lines.([]interface{}), attrs)
}

func (p *parser) callonTable1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTable1(stack["attrs"], stack["header"], stack["lines"])
}

func (c *current) onTableLineHeader1(cells interface{}) (interface{}, error) {
	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLineHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLineHeader1(stack["cells"])
}

func (c *current) onTableLine1(cells interface{}) (interface{}, error) {
	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLine1(stack["cells"])
}

func (c *current) onTableCell1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonTableCell1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCell1(stack["elements"])
}

func (c *current) onCommentBlock1(content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Comment, content.([]interface{}), nil)
}

func (p *parser) callonCommentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlock1(stack["content"])
}

func (c *current) onCommentBlockRawContent2(line interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return line, nil
}

func (p *parser) callonCommentBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlockRawContent2(stack["line"])
}

func (c *current) onSingleLineComment1(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))
}

func (p *parser) callonSingleLineComment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineComment1(stack["content"])
}

func (c *current) onSingleLineCommentContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleLineCommentContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineCommentContent1()
}

func (c *current) onParagraphWithHeadingSpaces1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithSpacesOnFirstLine, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithHeadingSpaces1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpaces1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithHeadingSpacesLines4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines4()
}

func (c *current) onParagraphWithHeadingSpacesLines18() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines18()
}

func (c *current) onParagraphWithHeadingSpacesLines13(otherLine interface{}) (interface{}, error) {
	return otherLine, nil // do not include the trailing 'EOL'

}

func (p *parser) callonParagraphWithHeadingSpacesLines13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines13(stack["otherLine"])
}

func (c *current) onParagraphWithHeadingSpacesLines1(firstLine, otherLines interface{}) (interface{}, error) {

	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonParagraphWithHeadingSpacesLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiter1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithDelimiter, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithLiteralBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiter1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLines1(lines interface{}) (interface{}, error) {
	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine4()
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine1(line interface{}) (interface{}, error) {

	return line, nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine1(stack["line"])
}

func (c *current) onParagraphWithLiteralAttribute6(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.Attributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Literal, nil
	}
	return false, nil

}

func (p *parser) callonParagraphWithLiteralAttribute6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute6(stack["attributes"])
}

func (c *current) onParagraphWithLiteralAttribute1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithAttribute, lines.([]interface{}), attributes)

}

func (p *parser) callonParagraphWithLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute1(stack["attributes"], stack["lines"])
}

func (c *current) onLiteralKind1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLiteralKind1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralKind1()
}

func (c *current) onParagraphWithLiteralAttributeLines1(lines interface{}) (interface{}, error) {

	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralAttributeLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralAttributeLine6() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonParagraphWithLiteralAttributeLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLine6()
}

func (c *current) onParagraphWithLiteralAttributeLine1(content interface{}) (interface{}, error) {
	return content.(string), nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralAttributeLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLine1(stack["content"])
}

func (c *current) onIndexTerm1(term interface{}) (interface{}, error) {
	return types.NewIndexTerm(term.([]interface{}))
}

func (p *parser) callonIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTerm1(stack["term"])
}

func (c *current) onIndexTermContent10() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIndexTermContent10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent10()
}

func (c *current) onIndexTermContent1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent1(stack["elements"])
}

func (c *current) onConcealedIndexTerm8(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm8(stack["content"])
}

func (c *current) onConcealedIndexTerm19(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm19(stack["content"])
}

func (c *current) onConcealedIndexTerm1(term1, term2, term3 interface{}) (interface{}, error) {
	return types.NewConcealedIndexTerm(term1, term2, term3)

}

func (p *parser) callonConcealedIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm1(stack["term1"], stack["term2"], stack["term3"])
}

func (c *current) onConcealedIndexTermContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonConcealedIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTermContent1()
}

func (c *current) onBlankLine1() (interface{}, error) {
	return types.NewBlankLine()
}

func (p *parser) callonBlankLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlankLine1()
}

func (c *current) onApostrophe1() (interface{}, error) {
	return types.NewStringElement("\u2019")
}

func (p *parser) callonApostrophe1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onApostrophe1()
}

func (c *current) onCopyright1() (interface{}, error) {
	return types.NewStringElement("\u00a9")
}

func (p *parser) callonCopyright1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCopyright1()
}

func (c *current) onTrademark1() (interface{}, error) {
	return types.NewStringElement("\u2122")
}

func (p *parser) callonTrademark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTrademark1()
}

func (c *current) onRegistered1() (interface{}, error) {
	return types.NewStringElement("\u00ae")
}

func (p *parser) callonRegistered1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegistered1()
}

func (c *current) onEllipsis1() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")
}

func (p *parser) callonEllipsis1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEllipsis1()
}

func (c *current) onImpliedApostrophe1() (interface{}, error) {
	return types.NewStringElement(string(c.text[:1]) + "\u2019")
}

func (p *parser) callonImpliedApostrophe1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImpliedApostrophe1()
}

func (c *current) onSpecialCharacter1() (interface{}, error) {
	// "+" is parsed here for the sake of HTML output compatibility with Asciidoctor which replaces it with the `&#43;` entity
	return types.NewSpecialCharacter(string(c.text))
}

func (p *parser) callonSpecialCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacter1()
}

func (c *current) onAlphanums1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAlphanums1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAlphanums1()
}

func (c *current) onWord2() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord2()
}

func (c *current) onWord10() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord10()
}

func (c *current) onInlineWord2() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineWord2()
}

func (c *current) onAnyChar1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonAnyChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyChar1()
}

func (c *current) onFileLocation1(path interface{}) (interface{}, error) {
	return types.NewLocation("", path.([]interface{}))
}

func (p *parser) callonFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation1(stack["path"])
}

func (c *current) onResolvedFileLocation1(path interface{}) (interface{}, error) {
	return types.NewLocation("", path.([]interface{}))
}

func (p *parser) callonResolvedFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedFileLocation1(stack["path"])
}

func (c *current) onLocation1(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocation1(stack["scheme"], stack["path"])
}

func (c *current) onLocationWithScheme1(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonLocationWithScheme1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocationWithScheme1(stack["scheme"], stack["path"])
}

func (c *current) onResolvedLocation1(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonResolvedLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedLocation1(stack["scheme"], stack["path"])
}

func (c *current) onURL1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonURL1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURL1()
}

func (c *current) onID1() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil
}

func (p *parser) callonID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onID1()
}

func (c *current) onDIGIT1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDIGIT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDIGIT1()
}

func (c *current) onNUMBER1() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonNUMBER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNUMBER1()
}

func (c *current) onSpace3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSpace3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpace3()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			return val, ok
		}
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}
