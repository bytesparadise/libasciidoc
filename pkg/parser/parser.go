// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/bytesparadise/libasciidoc/pkg/types"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "PreflightAsciidocDocument",
			pos:  position{line: 17, col: 1, offset: 328},
			expr: &actionExpr{
				pos: position{line: 17, col: 30, offset: 357},
				run: (*parser).callonPreflightAsciidocDocument1,
				expr: &seqExpr{
					pos: position{line: 17, col: 30, offset: 357},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 17, col: 30, offset: 357},
							label: "frontmatter",
							expr: &zeroOrOneExpr{
								pos: position{line: 17, col: 43, offset: 370},
								expr: &ruleRefExpr{
									pos:  position{line: 17, col: 43, offset: 370},
									name: "FrontMatter",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 17, col: 57, offset: 384},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 17, col: 65, offset: 392},
								name: "AsciidocDocumentBlocks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 17, col: 89, offset: 416},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "PreflightAsciidocDocumentWithinDelimitedBlock",
			pos:  position{line: 21, col: 1, offset: 500},
			expr: &actionExpr{
				pos: position{line: 21, col: 50, offset: 549},
				run: (*parser).callonPreflightAsciidocDocumentWithinDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 21, col: 50, offset: 549},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 21, col: 50, offset: 549},
							label: "frontmatter",
							expr: &zeroOrOneExpr{
								pos: position{line: 21, col: 63, offset: 562},
								expr: &ruleRefExpr{
									pos:  position{line: 21, col: 63, offset: 562},
									name: "FrontMatter",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 21, col: 77, offset: 576},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 21, col: 85, offset: 584},
								name: "AsciidocDocumentBlocksWithinDelimitedBlock",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 21, col: 129, offset: 628},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "PreflightTextDocument",
			pos:  position{line: 25, col: 1, offset: 712},
			expr: &actionExpr{
				pos: position{line: 25, col: 26, offset: 737},
				run: (*parser).callonPreflightTextDocument1,
				expr: &seqExpr{
					pos: position{line: 25, col: 26, offset: 737},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 25, col: 26, offset: 737},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 25, col: 34, offset: 745},
								name: "TextDocumentBlocks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 25, col: 54, offset: 765},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "AsciidocDocumentBlocks",
			pos:  position{line: 32, col: 1, offset: 952},
			expr: &actionExpr{
				pos: position{line: 32, col: 27, offset: 978},
				run: (*parser).callonAsciidocDocumentBlocks1,
				expr: &seqExpr{
					pos: position{line: 32, col: 27, offset: 978},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 32, col: 27, offset: 978},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 32, col: 35, offset: 986},
								expr: &ruleRefExpr{
									pos:  position{line: 32, col: 35, offset: 986},
									name: "DocumentHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 32, col: 52, offset: 1003},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 32, col: 60, offset: 1011},
								expr: &ruleRefExpr{
									pos:  position{line: 32, col: 60, offset: 1011},
									name: "DocumentBlock",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentBlock",
			pos:  position{line: 41, col: 1, offset: 1260},
			expr: &actionExpr{
				pos: position{line: 41, col: 18, offset: 1277},
				run: (*parser).callonDocumentBlock1,
				expr: &seqExpr{
					pos: position{line: 41, col: 18, offset: 1277},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 41, col: 18, offset: 1277},
							expr: &ruleRefExpr{
								pos:  position{line: 41, col: 19, offset: 1278},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 42, col: 5, offset: 1287},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 42, col: 12, offset: 1294},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 42, col: 12, offset: 1294},
										name: "SimpleParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 43, col: 11, offset: 1320},
										name: "Section",
									},
									&ruleRefExpr{
										pos:  position{line: 44, col: 11, offset: 1339},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 45, col: 11, offset: 1364},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 46, col: 11, offset: 1388},
										name: "VerseParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 47, col: 11, offset: 1442},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 48, col: 11, offset: 1464},
										name: "ListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 49, col: 11, offset: 1483},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 50, col: 11, offset: 1534},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 51, col: 11, offset: 1558},
										name: "DocumentAttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 52, col: 11, offset: 1598},
										name: "DocumentAttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 53, col: 11, offset: 1632},
										name: "TableOfContentsMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 54, col: 11, offset: 1663},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 55, col: 11, offset: 1688},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AsciidocDocumentBlocksWithinDelimitedBlock",
			pos:  position{line: 59, col: 1, offset: 1726},
			expr: &labeledExpr{
				pos:   position{line: 59, col: 47, offset: 1772},
				label: "blocks",
				expr: &zeroOrMoreExpr{
					pos: position{line: 59, col: 54, offset: 1779},
					expr: &ruleRefExpr{
						pos:  position{line: 59, col: 55, offset: 1780},
						name: "DocumentBlockWithinDelimitedBlock",
					},
				},
			},
		},
		{
			name: "DocumentBlockWithinDelimitedBlock",
			pos:  position{line: 61, col: 1, offset: 1817},
			expr: &actionExpr{
				pos: position{line: 61, col: 38, offset: 1854},
				run: (*parser).callonDocumentBlockWithinDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 61, col: 38, offset: 1854},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 61, col: 38, offset: 1854},
							expr: &ruleRefExpr{
								pos:  position{line: 61, col: 39, offset: 1855},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 62, col: 5, offset: 1864},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 62, col: 12, offset: 1871},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 62, col: 12, offset: 1871},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 63, col: 11, offset: 1896},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 64, col: 11, offset: 1920},
										name: "VerseParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 65, col: 11, offset: 1945},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 66, col: 11, offset: 1967},
										name: "ListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 67, col: 11, offset: 1986},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 68, col: 11, offset: 2037},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 69, col: 11, offset: 2061},
										name: "DocumentAttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 70, col: 11, offset: 2101},
										name: "DocumentAttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 71, col: 11, offset: 2135},
										name: "TableOfContentsMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 72, col: 11, offset: 2166},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 73, col: 11, offset: 2191},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TextDocumentBlocks",
			pos:  position{line: 77, col: 1, offset: 2229},
			expr: &labeledExpr{
				pos:   position{line: 77, col: 23, offset: 2251},
				label: "blocks",
				expr: &zeroOrMoreExpr{
					pos: position{line: 77, col: 30, offset: 2258},
					expr: &ruleRefExpr{
						pos:  position{line: 77, col: 31, offset: 2259},
						name: "TextDocumentBlock",
					},
				},
			},
		},
		{
			name: "TextDocumentBlock",
			pos:  position{line: 79, col: 1, offset: 2280},
			expr: &actionExpr{
				pos: position{line: 79, col: 22, offset: 2301},
				run: (*parser).callonTextDocumentBlock1,
				expr: &seqExpr{
					pos: position{line: 79, col: 22, offset: 2301},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 79, col: 22, offset: 2301},
							expr: &ruleRefExpr{
								pos:  position{line: 79, col: 23, offset: 2302},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 80, col: 5, offset: 2311},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 80, col: 12, offset: 2318},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 80, col: 12, offset: 2318},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 80, col: 24, offset: 2330},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FrontMatter",
			pos:  position{line: 87, col: 1, offset: 2476},
			expr: &ruleRefExpr{
				pos:  position{line: 87, col: 16, offset: 2491},
				name: "YamlFrontMatter",
			},
		},
		{
			name: "YamlFrontMatter",
			pos:  position{line: 89, col: 1, offset: 2509},
			expr: &actionExpr{
				pos: position{line: 89, col: 20, offset: 2528},
				run: (*parser).callonYamlFrontMatter1,
				expr: &seqExpr{
					pos: position{line: 89, col: 20, offset: 2528},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 89, col: 20, offset: 2528},
							name: "YamlFrontMatterToken",
						},
						&labeledExpr{
							pos:   position{line: 89, col: 41, offset: 2549},
							label: "content",
							expr: &zeroOrOneExpr{
								pos: position{line: 89, col: 49, offset: 2557},
								expr: &ruleRefExpr{
									pos:  position{line: 89, col: 50, offset: 2558},
									name: "YamlFrontMatterContent",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 89, col: 75, offset: 2583},
							name: "YamlFrontMatterToken",
						},
					},
				},
			},
		},
		{
			name: "YamlFrontMatterToken",
			pos:  position{line: 93, col: 1, offset: 2663},
			expr: &seqExpr{
				pos: position{line: 93, col: 26, offset: 2688},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 93, col: 26, offset: 2688},
						val:        "---",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 93, col: 32, offset: 2694},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "YamlFrontMatterContent",
			pos:  position{line: 95, col: 1, offset: 2700},
			expr: &actionExpr{
				pos: position{line: 95, col: 27, offset: 2726},
				run: (*parser).callonYamlFrontMatterContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 95, col: 27, offset: 2726},
					expr: &oneOrMoreExpr{
						pos: position{line: 95, col: 28, offset: 2727},
						expr: &seqExpr{
							pos: position{line: 95, col: 29, offset: 2728},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 95, col: 29, offset: 2728},
									expr: &ruleRefExpr{
										pos:  position{line: 95, col: 30, offset: 2729},
										name: "YamlFrontMatterToken",
									},
								},
								&anyMatcher{
									line: 95, col: 51, offset: 2750,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentHeader",
			pos:  position{line: 102, col: 1, offset: 2916},
			expr: &actionExpr{
				pos: position{line: 102, col: 19, offset: 2934},
				run: (*parser).callonDocumentHeader1,
				expr: &seqExpr{
					pos: position{line: 102, col: 19, offset: 2934},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 102, col: 19, offset: 2934},
							val:        "=",
							ignoreCase: false,
						},
						&oneOrMoreExpr{
							pos: position{line: 102, col: 23, offset: 2938},
							expr: &ruleRefExpr{
								pos:  position{line: 102, col: 23, offset: 2938},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 102, col: 27, offset: 2942},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 102, col: 34, offset: 2949},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 102, col: 49, offset: 2964},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 102, col: 53, offset: 2968},
								expr: &ruleRefExpr{
									pos:  position{line: 102, col: 53, offset: 2968},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 102, col: 71, offset: 2986},
							name: "EOL",
						},
						&labeledExpr{
							pos:   position{line: 103, col: 9, offset: 2998},
							label: "authors",
							expr: &zeroOrOneExpr{
								pos: position{line: 103, col: 18, offset: 3007},
								expr: &ruleRefExpr{
									pos:  position{line: 103, col: 18, offset: 3007},
									name: "DocumentAuthors",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 104, col: 9, offset: 3034},
							label: "revision",
							expr: &zeroOrOneExpr{
								pos: position{line: 104, col: 19, offset: 3044},
								expr: &ruleRefExpr{
									pos:  position{line: 104, col: 19, offset: 3044},
									name: "DocumentRevision",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthors",
			pos:  position{line: 109, col: 1, offset: 3153},
			expr: &choiceExpr{
				pos: position{line: 109, col: 20, offset: 3172},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 109, col: 20, offset: 3172},
						name: "DocumentAuthorsInlineForm",
					},
					&ruleRefExpr{
						pos:  position{line: 109, col: 48, offset: 3200},
						name: "DocumentAuthorsAttributeForm",
					},
				},
			},
		},
		{
			name: "DocumentAuthorsInlineForm",
			pos:  position{line: 111, col: 1, offset: 3230},
			expr: &actionExpr{
				pos: position{line: 111, col: 30, offset: 3259},
				run: (*parser).callonDocumentAuthorsInlineForm1,
				expr: &seqExpr{
					pos: position{line: 111, col: 30, offset: 3259},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 111, col: 30, offset: 3259},
							expr: &ruleRefExpr{
								pos:  position{line: 111, col: 30, offset: 3259},
								name: "WS",
							},
						},
						&notExpr{
							pos: position{line: 111, col: 34, offset: 3263},
							expr: &litMatcher{
								pos:        position{line: 111, col: 35, offset: 3264},
								val:        ":",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 111, col: 39, offset: 3268},
							label: "authors",
							expr: &oneOrMoreExpr{
								pos: position{line: 111, col: 48, offset: 3277},
								expr: &ruleRefExpr{
									pos:  position{line: 111, col: 48, offset: 3277},
									name: "DocumentAuthor",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 111, col: 65, offset: 3294},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorsAttributeForm",
			pos:  position{line: 115, col: 1, offset: 3364},
			expr: &actionExpr{
				pos: position{line: 115, col: 33, offset: 3396},
				run: (*parser).callonDocumentAuthorsAttributeForm1,
				expr: &seqExpr{
					pos: position{line: 115, col: 33, offset: 3396},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 115, col: 33, offset: 3396},
							expr: &ruleRefExpr{
								pos:  position{line: 115, col: 33, offset: 3396},
								name: "WS",
							},
						},
						&litMatcher{
							pos:        position{line: 115, col: 37, offset: 3400},
							val:        ":author:",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 115, col: 48, offset: 3411},
							label: "author",
							expr: &ruleRefExpr{
								pos:  position{line: 115, col: 56, offset: 3419},
								name: "DocumentAuthor",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 115, col: 72, offset: 3435},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthor",
			pos:  position{line: 119, col: 1, offset: 3514},
			expr: &actionExpr{
				pos: position{line: 119, col: 19, offset: 3532},
				run: (*parser).callonDocumentAuthor1,
				expr: &seqExpr{
					pos: position{line: 119, col: 19, offset: 3532},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 119, col: 19, offset: 3532},
							expr: &ruleRefExpr{
								pos:  position{line: 119, col: 19, offset: 3532},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 119, col: 23, offset: 3536},
							label: "fullname",
							expr: &ruleRefExpr{
								pos:  position{line: 119, col: 33, offset: 3546},
								name: "DocumentAuthorName",
							},
						},
						&labeledExpr{
							pos:   position{line: 119, col: 53, offset: 3566},
							label: "email",
							expr: &zeroOrOneExpr{
								pos: position{line: 119, col: 59, offset: 3572},
								expr: &ruleRefExpr{
									pos:  position{line: 119, col: 60, offset: 3573},
									name: "DocumentAuthorEmail",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 119, col: 82, offset: 3595},
							expr: &ruleRefExpr{
								pos:  position{line: 119, col: 82, offset: 3595},
								name: "WS",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 119, col: 86, offset: 3599},
							expr: &litMatcher{
								pos:        position{line: 119, col: 86, offset: 3599},
								val:        ";",
								ignoreCase: false,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 119, col: 91, offset: 3604},
							expr: &ruleRefExpr{
								pos:  position{line: 119, col: 91, offset: 3604},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorName",
			pos:  position{line: 124, col: 1, offset: 3746},
			expr: &actionExpr{
				pos: position{line: 124, col: 23, offset: 3768},
				run: (*parser).callonDocumentAuthorName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 124, col: 23, offset: 3768},
					expr: &choiceExpr{
						pos: position{line: 124, col: 24, offset: 3769},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 124, col: 24, offset: 3769},
								name: "Alphanums",
							},
							&seqExpr{
								pos: position{line: 124, col: 37, offset: 3782},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 124, col: 37, offset: 3782},
										expr: &litMatcher{
											pos:        position{line: 124, col: 38, offset: 3783},
											val:        "<",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 124, col: 42, offset: 3787},
										expr: &litMatcher{
											pos:        position{line: 124, col: 43, offset: 3788},
											val:        ";",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 124, col: 47, offset: 3792},
										expr: &ruleRefExpr{
											pos:  position{line: 124, col: 48, offset: 3793},
											name: "NEWLINE",
										},
									},
									&anyMatcher{
										line: 124, col: 56, offset: 3801,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorEmail",
			pos:  position{line: 128, col: 1, offset: 3842},
			expr: &actionExpr{
				pos: position{line: 128, col: 24, offset: 3865},
				run: (*parser).callonDocumentAuthorEmail1,
				expr: &seqExpr{
					pos: position{line: 128, col: 24, offset: 3865},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 128, col: 24, offset: 3865},
							val:        "<",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 128, col: 28, offset: 3869},
							label: "email",
							expr: &actionExpr{
								pos: position{line: 128, col: 35, offset: 3876},
								run: (*parser).callonDocumentAuthorEmail5,
								expr: &oneOrMoreExpr{
									pos: position{line: 128, col: 35, offset: 3876},
									expr: &choiceExpr{
										pos: position{line: 128, col: 36, offset: 3877},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 128, col: 36, offset: 3877},
												name: "Alphanums",
											},
											&seqExpr{
												pos: position{line: 128, col: 49, offset: 3890},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 128, col: 49, offset: 3890},
														expr: &litMatcher{
															pos:        position{line: 128, col: 50, offset: 3891},
															val:        ">",
															ignoreCase: false,
														},
													},
													&notExpr{
														pos: position{line: 128, col: 54, offset: 3895},
														expr: &ruleRefExpr{
															pos:  position{line: 128, col: 55, offset: 3896},
															name: "EOL",
														},
													},
													&anyMatcher{
														line: 128, col: 60, offset: 3901,
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 130, col: 4, offset: 3942},
							val:        ">",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "DocumentRevision",
			pos:  position{line: 136, col: 1, offset: 4103},
			expr: &actionExpr{
				pos: position{line: 136, col: 21, offset: 4123},
				run: (*parser).callonDocumentRevision1,
				expr: &seqExpr{
					pos: position{line: 136, col: 21, offset: 4123},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 136, col: 21, offset: 4123},
							expr: &ruleRefExpr{
								pos:  position{line: 136, col: 21, offset: 4123},
								name: "WS",
							},
						},
						&notExpr{
							pos: position{line: 136, col: 25, offset: 4127},
							expr: &litMatcher{
								pos:        position{line: 136, col: 26, offset: 4128},
								val:        ":",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 136, col: 30, offset: 4132},
							label: "revision",
							expr: &choiceExpr{
								pos: position{line: 137, col: 9, offset: 4151},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 137, col: 10, offset: 4152},
										run: (*parser).callonDocumentRevision9,
										expr: &seqExpr{
											pos: position{line: 137, col: 10, offset: 4152},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 137, col: 10, offset: 4152},
													label: "revnumber",
													expr: &ruleRefExpr{
														pos:  position{line: 137, col: 21, offset: 4163},
														name: "DocumentRevisionNumber",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 137, col: 45, offset: 4187},
													expr: &litMatcher{
														pos:        position{line: 137, col: 45, offset: 4187},
														val:        ",",
														ignoreCase: false,
													},
												},
												&labeledExpr{
													pos:   position{line: 137, col: 50, offset: 4192},
													label: "revdate",
													expr: &zeroOrOneExpr{
														pos: position{line: 137, col: 58, offset: 4200},
														expr: &ruleRefExpr{
															pos:  position{line: 137, col: 59, offset: 4201},
															name: "DocumentRevisionDate",
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 137, col: 82, offset: 4224},
													expr: &litMatcher{
														pos:        position{line: 137, col: 82, offset: 4224},
														val:        ":",
														ignoreCase: false,
													},
												},
												&labeledExpr{
													pos:   position{line: 137, col: 87, offset: 4229},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 137, col: 97, offset: 4239},
														expr: &ruleRefExpr{
															pos:  position{line: 137, col: 98, offset: 4240},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 139, col: 15, offset: 4357},
										run: (*parser).callonDocumentRevision23,
										expr: &seqExpr{
											pos: position{line: 139, col: 15, offset: 4357},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 139, col: 15, offset: 4357},
													label: "revdate",
													expr: &ruleRefExpr{
														pos:  position{line: 139, col: 24, offset: 4366},
														name: "DocumentRevisionDate",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 139, col: 46, offset: 4388},
													expr: &litMatcher{
														pos:        position{line: 139, col: 46, offset: 4388},
														val:        ":",
														ignoreCase: false,
													},
												},
												&labeledExpr{
													pos:   position{line: 139, col: 51, offset: 4393},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 139, col: 61, offset: 4403},
														expr: &ruleRefExpr{
															pos:  position{line: 139, col: 62, offset: 4404},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 141, col: 13, offset: 4513},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionNumber",
			pos:  position{line: 146, col: 1, offset: 4643},
			expr: &choiceExpr{
				pos: position{line: 146, col: 27, offset: 4669},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 146, col: 27, offset: 4669},
						run: (*parser).callonDocumentRevisionNumber2,
						expr: &seqExpr{
							pos: position{line: 146, col: 27, offset: 4669},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 146, col: 27, offset: 4669},
									val:        "v",
									ignoreCase: true,
								},
								&ruleRefExpr{
									pos:  position{line: 146, col: 32, offset: 4674},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 146, col: 39, offset: 4681},
									expr: &choiceExpr{
										pos: position{line: 146, col: 40, offset: 4682},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 146, col: 40, offset: 4682},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 146, col: 52, offset: 4694},
												name: "Spaces",
											},
											&seqExpr{
												pos: position{line: 146, col: 62, offset: 4704},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 146, col: 62, offset: 4704},
														expr: &ruleRefExpr{
															pos:  position{line: 146, col: 63, offset: 4705},
															name: "EOL",
														},
													},
													&notExpr{
														pos: position{line: 146, col: 67, offset: 4709},
														expr: &litMatcher{
															pos:        position{line: 146, col: 68, offset: 4710},
															val:        ",",
															ignoreCase: false,
														},
													},
													&notExpr{
														pos: position{line: 146, col: 72, offset: 4714},
														expr: &litMatcher{
															pos:        position{line: 146, col: 73, offset: 4715},
															val:        ":",
															ignoreCase: false,
														},
													},
													&anyMatcher{
														line: 146, col: 78, offset: 4720,
													},
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 148, col: 5, offset: 4762},
						run: (*parser).callonDocumentRevisionNumber18,
						expr: &seqExpr{
							pos: position{line: 148, col: 5, offset: 4762},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 148, col: 5, offset: 4762},
									expr: &litMatcher{
										pos:        position{line: 148, col: 5, offset: 4762},
										val:        "v",
										ignoreCase: true,
									},
								},
								&ruleRefExpr{
									pos:  position{line: 148, col: 11, offset: 4768},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 148, col: 18, offset: 4775},
									expr: &choiceExpr{
										pos: position{line: 148, col: 19, offset: 4776},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 148, col: 19, offset: 4776},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 148, col: 31, offset: 4788},
												name: "Spaces",
											},
											&seqExpr{
												pos: position{line: 148, col: 41, offset: 4798},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 148, col: 41, offset: 4798},
														expr: &ruleRefExpr{
															pos:  position{line: 148, col: 42, offset: 4799},
															name: "EOL",
														},
													},
													&notExpr{
														pos: position{line: 148, col: 46, offset: 4803},
														expr: &litMatcher{
															pos:        position{line: 148, col: 47, offset: 4804},
															val:        ",",
															ignoreCase: false,
														},
													},
													&notExpr{
														pos: position{line: 148, col: 51, offset: 4808},
														expr: &litMatcher{
															pos:        position{line: 148, col: 52, offset: 4809},
															val:        ":",
															ignoreCase: false,
														},
													},
													&anyMatcher{
														line: 148, col: 57, offset: 4814,
													},
												},
											},
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 148, col: 62, offset: 4819},
									expr: &ruleRefExpr{
										pos:  position{line: 148, col: 62, offset: 4819},
										name: "WS",
									},
								},
								&andExpr{
									pos: position{line: 148, col: 66, offset: 4823},
									expr: &litMatcher{
										pos:        position{line: 148, col: 67, offset: 4824},
										val:        ",",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionDate",
			pos:  position{line: 152, col: 1, offset: 4864},
			expr: &actionExpr{
				pos: position{line: 152, col: 25, offset: 4888},
				run: (*parser).callonDocumentRevisionDate1,
				expr: &oneOrMoreExpr{
					pos: position{line: 152, col: 25, offset: 4888},
					expr: &choiceExpr{
						pos: position{line: 152, col: 26, offset: 4889},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 152, col: 26, offset: 4889},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 152, col: 38, offset: 4901},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 152, col: 48, offset: 4911},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 152, col: 48, offset: 4911},
										expr: &ruleRefExpr{
											pos:  position{line: 152, col: 49, offset: 4912},
											name: "EOL",
										},
									},
									&notExpr{
										pos: position{line: 152, col: 53, offset: 4916},
										expr: &litMatcher{
											pos:        position{line: 152, col: 54, offset: 4917},
											val:        ":",
											ignoreCase: false,
										},
									},
									&anyMatcher{
										line: 152, col: 59, offset: 4922,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionRemark",
			pos:  position{line: 156, col: 1, offset: 4963},
			expr: &actionExpr{
				pos: position{line: 156, col: 27, offset: 4989},
				run: (*parser).callonDocumentRevisionRemark1,
				expr: &oneOrMoreExpr{
					pos: position{line: 156, col: 27, offset: 4989},
					expr: &choiceExpr{
						pos: position{line: 156, col: 28, offset: 4990},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 156, col: 28, offset: 4990},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 156, col: 40, offset: 5002},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 156, col: 50, offset: 5012},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 156, col: 50, offset: 5012},
										expr: &ruleRefExpr{
											pos:  position{line: 156, col: 51, offset: 5013},
											name: "EOL",
										},
									},
									&anyMatcher{
										line: 156, col: 56, offset: 5018,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeDeclaration",
			pos:  position{line: 163, col: 1, offset: 5174},
			expr: &actionExpr{
				pos: position{line: 163, col: 33, offset: 5206},
				run: (*parser).callonDocumentAttributeDeclaration1,
				expr: &seqExpr{
					pos: position{line: 163, col: 33, offset: 5206},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 163, col: 33, offset: 5206},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 163, col: 37, offset: 5210},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 163, col: 43, offset: 5216},
								name: "DocumentAttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 163, col: 66, offset: 5239},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 163, col: 70, offset: 5243},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 163, col: 76, offset: 5249},
								expr: &actionExpr{
									pos: position{line: 163, col: 77, offset: 5250},
									run: (*parser).callonDocumentAttributeDeclaration9,
									expr: &seqExpr{
										pos: position{line: 163, col: 78, offset: 5251},
										exprs: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 163, col: 78, offset: 5251},
												expr: &ruleRefExpr{
													pos:  position{line: 163, col: 78, offset: 5251},
													name: "WS",
												},
											},
											&labeledExpr{
												pos:   position{line: 163, col: 82, offset: 5255},
												label: "value",
												expr: &ruleRefExpr{
													pos:  position{line: 163, col: 89, offset: 5262},
													name: "DocumentAttributeValue",
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 163, col: 138, offset: 5311},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeName",
			pos:  position{line: 170, col: 1, offset: 5560},
			expr: &actionExpr{
				pos: position{line: 170, col: 26, offset: 5585},
				run: (*parser).callonDocumentAttributeName1,
				expr: &seqExpr{
					pos: position{line: 170, col: 26, offset: 5585},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 170, col: 27, offset: 5586},
							alternatives: []interface{}{
								&charClassMatcher{
									pos:        position{line: 170, col: 27, offset: 5586},
									val:        "[A-Z]",
									ranges:     []rune{'A', 'Z'},
									ignoreCase: false,
									inverted:   false,
								},
								&charClassMatcher{
									pos:        position{line: 170, col: 35, offset: 5594},
									val:        "[a-z]",
									ranges:     []rune{'a', 'z'},
									ignoreCase: false,
									inverted:   false,
								},
								&charClassMatcher{
									pos:        position{line: 170, col: 43, offset: 5602},
									val:        "[0-9]",
									ranges:     []rune{'0', '9'},
									ignoreCase: false,
									inverted:   false,
								},
								&litMatcher{
									pos:        position{line: 170, col: 51, offset: 5610},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 170, col: 56, offset: 5615},
							expr: &choiceExpr{
								pos: position{line: 170, col: 57, offset: 5616},
								alternatives: []interface{}{
									&charClassMatcher{
										pos:        position{line: 170, col: 57, offset: 5616},
										val:        "[A-Z]",
										ranges:     []rune{'A', 'Z'},
										ignoreCase: false,
										inverted:   false,
									},
									&charClassMatcher{
										pos:        position{line: 170, col: 65, offset: 5624},
										val:        "[a-z]",
										ranges:     []rune{'a', 'z'},
										ignoreCase: false,
										inverted:   false,
									},
									&charClassMatcher{
										pos:        position{line: 170, col: 73, offset: 5632},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
									&litMatcher{
										pos:        position{line: 170, col: 81, offset: 5640},
										val:        "-",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeValue",
			pos:  position{line: 174, col: 1, offset: 5682},
			expr: &actionExpr{
				pos: position{line: 174, col: 27, offset: 5708},
				run: (*parser).callonDocumentAttributeValue1,
				expr: &oneOrMoreExpr{
					pos: position{line: 174, col: 27, offset: 5708},
					expr: &seqExpr{
						pos: position{line: 174, col: 28, offset: 5709},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 174, col: 28, offset: 5709},
								expr: &ruleRefExpr{
									pos:  position{line: 174, col: 29, offset: 5710},
									name: "NEWLINE",
								},
							},
							&anyMatcher{
								line: 174, col: 37, offset: 5718,
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeReset",
			pos:  position{line: 178, col: 1, offset: 5758},
			expr: &choiceExpr{
				pos: position{line: 178, col: 27, offset: 5784},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 178, col: 27, offset: 5784},
						run: (*parser).callonDocumentAttributeReset2,
						expr: &seqExpr{
							pos: position{line: 178, col: 27, offset: 5784},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 178, col: 27, offset: 5784},
									val:        ":!",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 178, col: 32, offset: 5789},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 178, col: 38, offset: 5795},
										name: "DocumentAttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 178, col: 61, offset: 5818},
									val:        ":",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 178, col: 65, offset: 5822},
									name: "EOLS",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 180, col: 5, offset: 5891},
						run: (*parser).callonDocumentAttributeReset9,
						expr: &seqExpr{
							pos: position{line: 180, col: 5, offset: 5891},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 180, col: 5, offset: 5891},
									val:        ":",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 180, col: 9, offset: 5895},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 180, col: 15, offset: 5901},
										name: "DocumentAttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 180, col: 38, offset: 5924},
									val:        "!:",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 180, col: 43, offset: 5929},
									name: "EOLS",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeSubstitution",
			pos:  position{line: 184, col: 1, offset: 5997},
			expr: &actionExpr{
				pos: position{line: 184, col: 34, offset: 6030},
				run: (*parser).callonDocumentAttributeSubstitution1,
				expr: &seqExpr{
					pos: position{line: 184, col: 34, offset: 6030},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 184, col: 34, offset: 6030},
							val:        "{",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 184, col: 38, offset: 6034},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 184, col: 44, offset: 6040},
								name: "DocumentAttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 184, col: 67, offset: 6063},
							val:        "}",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "ElementAttributes",
			pos:  position{line: 191, col: 1, offset: 6251},
			expr: &actionExpr{
				pos: position{line: 191, col: 22, offset: 6272},
				run: (*parser).callonElementAttributes1,
				expr: &labeledExpr{
					pos:   position{line: 191, col: 22, offset: 6272},
					label: "attrs",
					expr: &oneOrMoreExpr{
						pos: position{line: 191, col: 28, offset: 6278},
						expr: &ruleRefExpr{
							pos:  position{line: 191, col: 29, offset: 6279},
							name: "ElementAttribute",
						},
					},
				},
			},
		},
		{
			name: "ElementAttribute",
			pos:  position{line: 195, col: 1, offset: 6369},
			expr: &actionExpr{
				pos: position{line: 195, col: 21, offset: 6389},
				run: (*parser).callonElementAttribute1,
				expr: &seqExpr{
					pos: position{line: 195, col: 21, offset: 6389},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 195, col: 21, offset: 6389},
							expr: &choiceExpr{
								pos: position{line: 195, col: 23, offset: 6391},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 195, col: 23, offset: 6391},
										val:        "[",
										ignoreCase: false,
									},
									&litMatcher{
										pos:        position{line: 195, col: 29, offset: 6397},
										val:        ".",
										ignoreCase: false,
									},
									&litMatcher{
										pos:        position{line: 195, col: 35, offset: 6403},
										val:        "#",
										ignoreCase: false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 196, col: 5, offset: 6479},
							label: "attr",
							expr: &choiceExpr{
								pos: position{line: 196, col: 11, offset: 6485},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 196, col: 11, offset: 6485},
										name: "ElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 197, col: 9, offset: 6506},
										name: "ElementTitle",
									},
									&ruleRefExpr{
										pos:  position{line: 198, col: 9, offset: 6530},
										name: "ElementRole",
									},
									&ruleRefExpr{
										pos:  position{line: 199, col: 9, offset: 6553},
										name: "LiteralAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 200, col: 9, offset: 6581},
										name: "SourceAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 201, col: 9, offset: 6609},
										name: "QuoteAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 202, col: 9, offset: 6636},
										name: "VerseAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 203, col: 9, offset: 6663},
										name: "AdmonitionMarkerAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 204, col: 9, offset: 6700},
										name: "HorizontalLayout",
									},
									&ruleRefExpr{
										pos:  position{line: 205, col: 9, offset: 6728},
										name: "AttributeGroup",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MasqueradeAttribute",
			pos:  position{line: 210, col: 1, offset: 6911},
			expr: &choiceExpr{
				pos: position{line: 210, col: 24, offset: 6934},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 210, col: 24, offset: 6934},
						name: "QuoteAttributes",
					},
					&ruleRefExpr{
						pos:  position{line: 210, col: 42, offset: 6952},
						name: "VerseAttributes",
					},
				},
			},
		},
		{
			name: "ElementID",
			pos:  position{line: 212, col: 1, offset: 6969},
			expr: &choiceExpr{
				pos: position{line: 212, col: 14, offset: 6982},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 212, col: 14, offset: 6982},
						run: (*parser).callonElementID2,
						expr: &seqExpr{
							pos: position{line: 212, col: 14, offset: 6982},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 212, col: 14, offset: 6982},
									val:        "[[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 212, col: 19, offset: 6987},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 212, col: 23, offset: 6991},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 212, col: 27, offset: 6995},
									val:        "]]",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 212, col: 32, offset: 7000},
									name: "EOLS",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 214, col: 5, offset: 7054},
						run: (*parser).callonElementID9,
						expr: &seqExpr{
							pos: position{line: 214, col: 5, offset: 7054},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 214, col: 5, offset: 7054},
									val:        "[#",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 214, col: 10, offset: 7059},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 214, col: 14, offset: 7063},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 214, col: 18, offset: 7067},
									val:        "]",
									ignoreCase: false,
								},
								&ruleRefExpr{
									pos:  position{line: 214, col: 23, offset: 7072},
									name: "EOLS",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElementID",
			pos:  position{line: 218, col: 1, offset: 7125},
			expr: &actionExpr{
				pos: position{line: 218, col: 20, offset: 7144},
				run: (*parser).callonInlineElementID1,
				expr: &seqExpr{
					pos: position{line: 218, col: 20, offset: 7144},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 218, col: 20, offset: 7144},
							val:        "[[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 218, col: 25, offset: 7149},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 218, col: 29, offset: 7153},
								name: "ID",
							},
						},
						&litMatcher{
							pos:        position{line: 218, col: 33, offset: 7157},
							val:        "]]",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 218, col: 38, offset: 7162},
							expr: &ruleRefExpr{
								pos:  position{line: 218, col: 38, offset: 7162},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "ElementTitle",
			pos:  position{line: 224, col: 1, offset: 7436},
			expr: &actionExpr{
				pos: position{line: 224, col: 17, offset: 7452},
				run: (*parser).callonElementTitle1,
				expr: &seqExpr{
					pos: position{line: 224, col: 17, offset: 7452},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 224, col: 17, offset: 7452},
							val:        ".",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 224, col: 21, offset: 7456},
							label: "title",
							expr: &actionExpr{
								pos: position{line: 224, col: 28, offset: 7463},
								run: (*parser).callonElementTitle5,
								expr: &seqExpr{
									pos: position{line: 224, col: 28, offset: 7463},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 224, col: 28, offset: 7463},
											name: "Alphanums",
										},
										&zeroOrMoreExpr{
											pos: position{line: 224, col: 38, offset: 7473},
											expr: &choiceExpr{
												pos: position{line: 224, col: 39, offset: 7474},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 224, col: 39, offset: 7474},
														name: "Alphanums",
													},
													&ruleRefExpr{
														pos:  position{line: 224, col: 51, offset: 7486},
														name: "Spaces",
													},
													&seqExpr{
														pos: position{line: 224, col: 61, offset: 7496},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 224, col: 61, offset: 7496},
																expr: &ruleRefExpr{
																	pos:  position{line: 224, col: 62, offset: 7497},
																	name: "NEWLINE",
																},
															},
															&anyMatcher{
																line: 224, col: 70, offset: 7505,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 226, col: 4, offset: 7546},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ElementRole",
			pos:  position{line: 232, col: 1, offset: 7698},
			expr: &actionExpr{
				pos: position{line: 232, col: 16, offset: 7713},
				run: (*parser).callonElementRole1,
				expr: &seqExpr{
					pos: position{line: 232, col: 16, offset: 7713},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 232, col: 16, offset: 7713},
							val:        "[.",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 232, col: 21, offset: 7718},
							label: "role",
							expr: &actionExpr{
								pos: position{line: 232, col: 27, offset: 7724},
								run: (*parser).callonElementRole5,
								expr: &seqExpr{
									pos: position{line: 232, col: 27, offset: 7724},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 232, col: 27, offset: 7724},
											name: "Alphanums",
										},
										&zeroOrMoreExpr{
											pos: position{line: 232, col: 37, offset: 7734},
											expr: &choiceExpr{
												pos: position{line: 232, col: 38, offset: 7735},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 232, col: 38, offset: 7735},
														name: "Alphanums",
													},
													&ruleRefExpr{
														pos:  position{line: 232, col: 50, offset: 7747},
														name: "Spaces",
													},
													&seqExpr{
														pos: position{line: 232, col: 60, offset: 7757},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 232, col: 60, offset: 7757},
																expr: &ruleRefExpr{
																	pos:  position{line: 232, col: 61, offset: 7758},
																	name: "NEWLINE",
																},
															},
															&notExpr{
																pos: position{line: 232, col: 69, offset: 7766},
																expr: &litMatcher{
																	pos:        position{line: 232, col: 70, offset: 7767},
																	val:        "]",
																	ignoreCase: false,
																},
															},
															&anyMatcher{
																line: 232, col: 74, offset: 7771,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 234, col: 4, offset: 7812},
							val:        "]",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 234, col: 8, offset: 7816},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "LiteralAttribute",
			pos:  position{line: 238, col: 1, offset: 7873},
			expr: &actionExpr{
				pos: position{line: 238, col: 21, offset: 7893},
				run: (*parser).callonLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 238, col: 21, offset: 7893},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 238, col: 21, offset: 7893},
							val:        "[literal]",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 238, col: 33, offset: 7905},
							expr: &ruleRefExpr{
								pos:  position{line: 238, col: 33, offset: 7905},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 238, col: 37, offset: 7909},
							name: "NEWLINE",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionMarkerAttribute",
			pos:  position{line: 243, col: 1, offset: 8041},
			expr: &actionExpr{
				pos: position{line: 243, col: 30, offset: 8070},
				run: (*parser).callonAdmonitionMarkerAttribute1,
				expr: &seqExpr{
					pos: position{line: 243, col: 30, offset: 8070},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 243, col: 30, offset: 8070},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 243, col: 34, offset: 8074},
							label: "k",
							expr: &ruleRefExpr{
								pos:  position{line: 243, col: 37, offset: 8077},
								name: "AdmonitionKind",
							},
						},
						&litMatcher{
							pos:        position{line: 243, col: 53, offset: 8093},
							val:        "]",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 243, col: 57, offset: 8097},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "SourceAttributes",
			pos:  position{line: 248, col: 1, offset: 8253},
			expr: &actionExpr{
				pos: position{line: 248, col: 21, offset: 8273},
				run: (*parser).callonSourceAttributes1,
				expr: &seqExpr{
					pos: position{line: 248, col: 21, offset: 8273},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 248, col: 21, offset: 8273},
							val:        "[source",
							ignoreCase: false,
						},
						&zeroOrOneExpr{
							pos: position{line: 248, col: 31, offset: 8283},
							expr: &litMatcher{
								pos:        position{line: 248, col: 31, offset: 8283},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 248, col: 36, offset: 8288},
							label: "language",
							expr: &zeroOrOneExpr{
								pos: position{line: 248, col: 45, offset: 8297},
								expr: &actionExpr{
									pos: position{line: 248, col: 46, offset: 8298},
									run: (*parser).callonSourceAttributes8,
									expr: &oneOrMoreExpr{
										pos: position{line: 248, col: 46, offset: 8298},
										expr: &choiceExpr{
											pos: position{line: 248, col: 47, offset: 8299},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 248, col: 47, offset: 8299},
													name: "Alphanums",
												},
												&ruleRefExpr{
													pos:  position{line: 248, col: 59, offset: 8311},
													name: "Spaces",
												},
												&seqExpr{
													pos: position{line: 248, col: 69, offset: 8321},
													exprs: []interface{}{
														&notExpr{
															pos: position{line: 248, col: 69, offset: 8321},
															expr: &ruleRefExpr{
																pos:  position{line: 248, col: 70, offset: 8322},
																name: "NEWLINE",
															},
														},
														&notExpr{
															pos: position{line: 248, col: 78, offset: 8330},
															expr: &litMatcher{
																pos:        position{line: 248, col: 79, offset: 8331},
																val:        "]",
																ignoreCase: false,
															},
														},
														&anyMatcher{
															line: 248, col: 83, offset: 8335,
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 250, col: 9, offset: 8385},
							val:        "]",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 250, col: 13, offset: 8389},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "AttributeGroup",
			pos:  position{line: 255, col: 1, offset: 8514},
			expr: &actionExpr{
				pos: position{line: 255, col: 19, offset: 8532},
				run: (*parser).callonAttributeGroup1,
				expr: &seqExpr{
					pos: position{line: 255, col: 19, offset: 8532},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 255, col: 19, offset: 8532},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 255, col: 23, offset: 8536},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 255, col: 34, offset: 8547},
								expr: &ruleRefExpr{
									pos:  position{line: 255, col: 35, offset: 8548},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 255, col: 54, offset: 8567},
							val:        "]",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 255, col: 58, offset: 8571},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "GenericAttribute",
			pos:  position{line: 259, col: 1, offset: 8644},
			expr: &choiceExpr{
				pos: position{line: 260, col: 5, offset: 8669},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 260, col: 5, offset: 8669},
						run: (*parser).callonGenericAttribute2,
						expr: &seqExpr{
							pos: position{line: 260, col: 5, offset: 8669},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 260, col: 5, offset: 8669},
									label: "key",
									expr: &ruleRefExpr{
										pos:  position{line: 260, col: 10, offset: 8674},
										name: "AttributeKey",
									},
								},
								&litMatcher{
									pos:        position{line: 260, col: 24, offset: 8688},
									val:        "=",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 260, col: 28, offset: 8692},
									label: "value",
									expr: &zeroOrOneExpr{
										pos: position{line: 260, col: 34, offset: 8698},
										expr: &ruleRefExpr{
											pos:  position{line: 260, col: 35, offset: 8699},
											name: "AttributeValue",
										},
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 260, col: 52, offset: 8716},
									expr: &litMatcher{
										pos:        position{line: 260, col: 52, offset: 8716},
										val:        ",",
										ignoreCase: false,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 260, col: 57, offset: 8721},
									expr: &ruleRefExpr{
										pos:  position{line: 260, col: 57, offset: 8721},
										name: "WS",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 262, col: 9, offset: 8826},
						run: (*parser).callonGenericAttribute14,
						expr: &seqExpr{
							pos: position{line: 262, col: 9, offset: 8826},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 262, col: 9, offset: 8826},
									label: "key",
									expr: &ruleRefExpr{
										pos:  position{line: 262, col: 14, offset: 8831},
										name: "AttributeKey",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 262, col: 28, offset: 8845},
									expr: &litMatcher{
										pos:        position{line: 262, col: 28, offset: 8845},
										val:        ",",
										ignoreCase: false,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 262, col: 33, offset: 8850},
									expr: &ruleRefExpr{
										pos:  position{line: 262, col: 33, offset: 8850},
										name: "WS",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeKey",
			pos:  position{line: 266, col: 1, offset: 8943},
			expr: &actionExpr{
				pos: position{line: 266, col: 17, offset: 8959},
				run: (*parser).callonAttributeKey1,
				expr: &seqExpr{
					pos: position{line: 266, col: 17, offset: 8959},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 266, col: 17, offset: 8959},
							expr: &litMatcher{
								pos:        position{line: 266, col: 18, offset: 8960},
								val:        "quote",
								ignoreCase: false,
							},
						},
						&notExpr{
							pos: position{line: 266, col: 26, offset: 8968},
							expr: &litMatcher{
								pos:        position{line: 266, col: 27, offset: 8969},
								val:        "verse",
								ignoreCase: false,
							},
						},
						&notExpr{
							pos: position{line: 266, col: 35, offset: 8977},
							expr: &litMatcher{
								pos:        position{line: 266, col: 36, offset: 8978},
								val:        "literal",
								ignoreCase: false,
							},
						},
						&notExpr{
							pos: position{line: 266, col: 46, offset: 8988},
							expr: &ruleRefExpr{
								pos:  position{line: 266, col: 47, offset: 8989},
								name: "Spaces",
							},
						},
						&labeledExpr{
							pos:   position{line: 266, col: 54, offset: 8996},
							label: "key",
							expr: &oneOrMoreExpr{
								pos: position{line: 266, col: 58, offset: 9000},
								expr: &choiceExpr{
									pos: position{line: 266, col: 59, offset: 9001},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 266, col: 59, offset: 9001},
											name: "Alphanums",
										},
										&ruleRefExpr{
											pos:  position{line: 266, col: 71, offset: 9013},
											name: "OtherAttributeChar",
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 266, col: 92, offset: 9034},
							expr: &ruleRefExpr{
								pos:  position{line: 266, col: 92, offset: 9034},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeValue",
			pos:  position{line: 270, col: 1, offset: 9074},
			expr: &actionExpr{
				pos: position{line: 270, col: 19, offset: 9092},
				run: (*parser).callonAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 270, col: 19, offset: 9092},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 270, col: 19, offset: 9092},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 270, col: 25, offset: 9098},
								expr: &choiceExpr{
									pos: position{line: 270, col: 26, offset: 9099},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 270, col: 26, offset: 9099},
											name: "Alphanums",
										},
										&ruleRefExpr{
											pos:  position{line: 270, col: 38, offset: 9111},
											name: "Spaces",
										},
										&ruleRefExpr{
											pos:  position{line: 270, col: 47, offset: 9120},
											name: "OtherAttributeChar",
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 270, col: 68, offset: 9141},
							expr: &litMatcher{
								pos:        position{line: 270, col: 69, offset: 9142},
								val:        "=",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "OtherAttributeChar",
			pos:  position{line: 274, col: 1, offset: 9297},
			expr: &seqExpr{
				pos: position{line: 274, col: 24, offset: 9320},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 274, col: 24, offset: 9320},
						expr: &litMatcher{
							pos:        position{line: 274, col: 25, offset: 9321},
							val:        "=",
							ignoreCase: false,
						},
					},
					&notExpr{
						pos: position{line: 274, col: 29, offset: 9325},
						expr: &litMatcher{
							pos:        position{line: 274, col: 30, offset: 9326},
							val:        ",",
							ignoreCase: false,
						},
					},
					&notExpr{
						pos: position{line: 274, col: 34, offset: 9330},
						expr: &litMatcher{
							pos:        position{line: 274, col: 35, offset: 9331},
							val:        "]",
							ignoreCase: false,
						},
					},
					&anyMatcher{
						line: 274, col: 39, offset: 9335,
					},
				},
			},
		},
		{
			name: "HorizontalLayout",
			pos:  position{line: 276, col: 1, offset: 9339},
			expr: &actionExpr{
				pos: position{line: 276, col: 21, offset: 9359},
				run: (*parser).callonHorizontalLayout1,
				expr: &seqExpr{
					pos: position{line: 276, col: 21, offset: 9359},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 276, col: 21, offset: 9359},
							val:        "[horizontal]",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 276, col: 36, offset: 9374},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "QuoteAttributes",
			pos:  position{line: 280, col: 1, offset: 9448},
			expr: &actionExpr{
				pos: position{line: 280, col: 20, offset: 9467},
				run: (*parser).callonQuoteAttributes1,
				expr: &seqExpr{
					pos: position{line: 280, col: 20, offset: 9467},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 280, col: 20, offset: 9467},
							val:        "[quote",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 280, col: 29, offset: 9476},
							expr: &ruleRefExpr{
								pos:  position{line: 280, col: 29, offset: 9476},
								name: "WS",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 280, col: 33, offset: 9480},
							expr: &litMatcher{
								pos:        position{line: 280, col: 33, offset: 9480},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 280, col: 38, offset: 9485},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 280, col: 45, offset: 9492},
								expr: &ruleRefExpr{
									pos:  position{line: 280, col: 46, offset: 9493},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 280, col: 63, offset: 9510},
							expr: &litMatcher{
								pos:        position{line: 280, col: 63, offset: 9510},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 280, col: 68, offset: 9515},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 280, col: 74, offset: 9521},
								expr: &ruleRefExpr{
									pos:  position{line: 280, col: 75, offset: 9522},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 280, col: 92, offset: 9539},
							val:        "]",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 280, col: 96, offset: 9543},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "VerseAttributes",
			pos:  position{line: 284, col: 1, offset: 9613},
			expr: &actionExpr{
				pos: position{line: 284, col: 20, offset: 9632},
				run: (*parser).callonVerseAttributes1,
				expr: &seqExpr{
					pos: position{line: 284, col: 20, offset: 9632},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 284, col: 20, offset: 9632},
							val:        "[verse",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 284, col: 29, offset: 9641},
							expr: &ruleRefExpr{
								pos:  position{line: 284, col: 29, offset: 9641},
								name: "WS",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 284, col: 33, offset: 9645},
							expr: &litMatcher{
								pos:        position{line: 284, col: 33, offset: 9645},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 284, col: 38, offset: 9650},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 284, col: 45, offset: 9657},
								expr: &ruleRefExpr{
									pos:  position{line: 284, col: 46, offset: 9658},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 284, col: 63, offset: 9675},
							expr: &litMatcher{
								pos:        position{line: 284, col: 63, offset: 9675},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 284, col: 68, offset: 9680},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 284, col: 74, offset: 9686},
								expr: &ruleRefExpr{
									pos:  position{line: 284, col: 75, offset: 9687},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 284, col: 92, offset: 9704},
							val:        "]",
							ignoreCase: false,
						},
						&ruleRefExpr{
							pos:  position{line: 284, col: 96, offset: 9708},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "QuoteAttribute",
			pos:  position{line: 288, col: 1, offset: 9796},
			expr: &actionExpr{
				pos: position{line: 288, col: 19, offset: 9814},
				run: (*parser).callonQuoteAttribute1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 288, col: 19, offset: 9814},
					expr: &choiceExpr{
						pos: position{line: 288, col: 20, offset: 9815},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 288, col: 20, offset: 9815},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 288, col: 32, offset: 9827},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 288, col: 42, offset: 9837},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 288, col: 42, offset: 9837},
										expr: &litMatcher{
											pos:        position{line: 288, col: 43, offset: 9838},
											val:        ",",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 288, col: 47, offset: 9842},
										expr: &litMatcher{
											pos:        position{line: 288, col: 48, offset: 9843},
											val:        "]",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 288, col: 52, offset: 9847},
										expr: &ruleRefExpr{
											pos:  position{line: 288, col: 53, offset: 9848},
											name: "EOL",
										},
									},
									&anyMatcher{
										line: 288, col: 57, offset: 9852,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineAttributes",
			pos:  position{line: 292, col: 1, offset: 9893},
			expr: &actionExpr{
				pos: position{line: 292, col: 21, offset: 9913},
				run: (*parser).callonInlineAttributes1,
				expr: &seqExpr{
					pos: position{line: 292, col: 21, offset: 9913},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 292, col: 21, offset: 9913},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 292, col: 25, offset: 9917},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 292, col: 31, offset: 9923},
								expr: &ruleRefExpr{
									pos:  position{line: 292, col: 32, offset: 9924},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 292, col: 51, offset: 9943},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Section",
			pos:  position{line: 299, col: 1, offset: 10117},
			expr: &actionExpr{
				pos: position{line: 299, col: 12, offset: 10128},
				run: (*parser).callonSection1,
				expr: &seqExpr{
					pos: position{line: 299, col: 12, offset: 10128},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 299, col: 12, offset: 10128},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 299, col: 23, offset: 10139},
								expr: &ruleRefExpr{
									pos:  position{line: 299, col: 24, offset: 10140},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 300, col: 5, offset: 10164},
							label: "level",
							expr: &actionExpr{
								pos: position{line: 300, col: 12, offset: 10171},
								run: (*parser).callonSection7,
								expr: &oneOrMoreExpr{
									pos: position{line: 300, col: 12, offset: 10171},
									expr: &litMatcher{
										pos:        position{line: 300, col: 13, offset: 10172},
										val:        "=",
										ignoreCase: false,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 304, col: 5, offset: 10263},
							run: (*parser).callonSection10,
						},
						&oneOrMoreExpr{
							pos: position{line: 308, col: 5, offset: 10415},
							expr: &ruleRefExpr{
								pos:  position{line: 308, col: 5, offset: 10415},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 308, col: 9, offset: 10419},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 308, col: 16, offset: 10426},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 308, col: 31, offset: 10441},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 308, col: 35, offset: 10445},
								expr: &ruleRefExpr{
									pos:  position{line: 308, col: 35, offset: 10445},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 308, col: 53, offset: 10463},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "TitleElements",
			pos:  position{line: 312, col: 1, offset: 10576},
			expr: &actionExpr{
				pos: position{line: 312, col: 18, offset: 10593},
				run: (*parser).callonTitleElements1,
				expr: &labeledExpr{
					pos:   position{line: 312, col: 18, offset: 10593},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 312, col: 27, offset: 10602},
						expr: &seqExpr{
							pos: position{line: 312, col: 28, offset: 10603},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 312, col: 28, offset: 10603},
									expr: &ruleRefExpr{
										pos:  position{line: 312, col: 29, offset: 10604},
										name: "NEWLINE",
									},
								},
								&notExpr{
									pos: position{line: 312, col: 37, offset: 10612},
									expr: &ruleRefExpr{
										pos:  position{line: 312, col: 38, offset: 10613},
										name: "InlineElementID",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 312, col: 54, offset: 10629},
									name: "TitleElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TitleElement",
			pos:  position{line: 316, col: 1, offset: 10750},
			expr: &actionExpr{
				pos: position{line: 316, col: 17, offset: 10766},
				run: (*parser).callonTitleElement1,
				expr: &labeledExpr{
					pos:   position{line: 316, col: 17, offset: 10766},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 316, col: 26, offset: 10775},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 316, col: 26, offset: 10775},
								name: "SimpleWord",
							},
							&ruleRefExpr{
								pos:  position{line: 317, col: 11, offset: 10796},
								name: "Spaces",
							},
							&ruleRefExpr{
								pos:  position{line: 318, col: 11, offset: 10814},
								name: "CrossReference",
							},
							&ruleRefExpr{
								pos:  position{line: 319, col: 11, offset: 10839},
								name: "Passthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 320, col: 11, offset: 10861},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 321, col: 11, offset: 10884},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 322, col: 11, offset: 10899},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 323, col: 11, offset: 10924},
								name: "QuotedText",
							},
							&ruleRefExpr{
								pos:  position{line: 324, col: 11, offset: 10945},
								name: "DocumentAttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 325, col: 11, offset: 10985},
								name: "LineBreak",
							},
							&ruleRefExpr{
								pos:  position{line: 326, col: 11, offset: 11005},
								name: "OtherWord",
							},
						},
					},
				},
			},
		},
		{
			name: "TableOfContentsMacro",
			pos:  position{line: 333, col: 1, offset: 11158},
			expr: &seqExpr{
				pos: position{line: 333, col: 25, offset: 11182},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 333, col: 25, offset: 11182},
						val:        "toc::[]",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 333, col: 35, offset: 11192},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "UserMacroBlock",
			pos:  position{line: 338, col: 1, offset: 11303},
			expr: &actionExpr{
				pos: position{line: 338, col: 19, offset: 11321},
				run: (*parser).callonUserMacroBlock1,
				expr: &seqExpr{
					pos: position{line: 338, col: 19, offset: 11321},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 338, col: 19, offset: 11321},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 338, col: 25, offset: 11327},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 338, col: 40, offset: 11342},
							val:        "::",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 338, col: 45, offset: 11347},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 338, col: 52, offset: 11354},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 338, col: 68, offset: 11370},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 338, col: 75, offset: 11377},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineUserMacro",
			pos:  position{line: 342, col: 1, offset: 11518},
			expr: &actionExpr{
				pos: position{line: 342, col: 20, offset: 11537},
				run: (*parser).callonInlineUserMacro1,
				expr: &seqExpr{
					pos: position{line: 342, col: 20, offset: 11537},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 342, col: 20, offset: 11537},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 342, col: 26, offset: 11543},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 342, col: 41, offset: 11558},
							val:        ":",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 342, col: 45, offset: 11562},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 342, col: 52, offset: 11569},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 342, col: 68, offset: 11585},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 342, col: 75, offset: 11592},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroName",
			pos:  position{line: 346, col: 1, offset: 11734},
			expr: &actionExpr{
				pos: position{line: 346, col: 18, offset: 11751},
				run: (*parser).callonUserMacroName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 346, col: 18, offset: 11751},
					expr: &choiceExpr{
						pos: position{line: 346, col: 19, offset: 11752},
						alternatives: []interface{}{
							&charClassMatcher{
								pos:        position{line: 346, col: 19, offset: 11752},
								val:        "[a-zA-Z0-9]",
								ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
							&litMatcher{
								pos:        position{line: 346, col: 33, offset: 11766},
								val:        "_",
								ignoreCase: false,
							},
							&litMatcher{
								pos:        position{line: 346, col: 39, offset: 11772},
								val:        "-",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroValue",
			pos:  position{line: 350, col: 1, offset: 11814},
			expr: &actionExpr{
				pos: position{line: 350, col: 19, offset: 11832},
				run: (*parser).callonUserMacroValue1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 350, col: 19, offset: 11832},
					expr: &choiceExpr{
						pos: position{line: 350, col: 20, offset: 11833},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 350, col: 20, offset: 11833},
								name: "Alphanums",
							},
							&seqExpr{
								pos: position{line: 350, col: 33, offset: 11846},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 350, col: 33, offset: 11846},
										expr: &ruleRefExpr{
											pos:  position{line: 350, col: 34, offset: 11847},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 350, col: 37, offset: 11850},
										expr: &litMatcher{
											pos:        position{line: 350, col: 38, offset: 11851},
											val:        ":",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 350, col: 42, offset: 11855},
										expr: &litMatcher{
											pos:        position{line: 350, col: 43, offset: 11856},
											val:        "[",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 350, col: 47, offset: 11860},
										expr: &ruleRefExpr{
											pos:  position{line: 350, col: 48, offset: 11861},
											name: "EOL",
										},
									},
									&anyMatcher{
										line: 350, col: 52, offset: 11865,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroAttributes",
			pos:  position{line: 354, col: 1, offset: 11906},
			expr: &actionExpr{
				pos: position{line: 354, col: 24, offset: 11929},
				run: (*parser).callonUserMacroAttributes1,
				expr: &seqExpr{
					pos: position{line: 354, col: 24, offset: 11929},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 354, col: 24, offset: 11929},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 354, col: 28, offset: 11933},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 354, col: 34, offset: 11939},
								expr: &ruleRefExpr{
									pos:  position{line: 354, col: 35, offset: 11940},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 354, col: 54, offset: 11959},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "FileInclusion",
			pos:  position{line: 361, col: 1, offset: 12139},
			expr: &actionExpr{
				pos: position{line: 361, col: 18, offset: 12156},
				run: (*parser).callonFileInclusion1,
				expr: &seqExpr{
					pos: position{line: 361, col: 18, offset: 12156},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 361, col: 18, offset: 12156},
							label: "incl",
							expr: &actionExpr{
								pos: position{line: 361, col: 24, offset: 12162},
								run: (*parser).callonFileInclusion4,
								expr: &seqExpr{
									pos: position{line: 361, col: 24, offset: 12162},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 361, col: 24, offset: 12162},
											val:        "include::",
											ignoreCase: false,
										},
										&labeledExpr{
											pos:   position{line: 361, col: 36, offset: 12174},
											label: "path",
											expr: &ruleRefExpr{
												pos:  position{line: 361, col: 42, offset: 12180},
												name: "FileLocation",
											},
										},
										&labeledExpr{
											pos:   position{line: 361, col: 56, offset: 12194},
											label: "inlineAttributes",
											expr: &ruleRefExpr{
												pos:  position{line: 361, col: 74, offset: 12212},
												name: "FileIncludeAttributes",
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 363, col: 8, offset: 12366},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "FileIncludeAttributes",
			pos:  position{line: 367, col: 1, offset: 12419},
			expr: &actionExpr{
				pos: position{line: 367, col: 26, offset: 12444},
				run: (*parser).callonFileIncludeAttributes1,
				expr: &seqExpr{
					pos: position{line: 367, col: 26, offset: 12444},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 367, col: 26, offset: 12444},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 367, col: 30, offset: 12448},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 367, col: 36, offset: 12454},
								expr: &choiceExpr{
									pos: position{line: 367, col: 37, offset: 12455},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 367, col: 37, offset: 12455},
											name: "LineRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 367, col: 59, offset: 12477},
											name: "TagRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 367, col: 80, offset: 12498},
											name: "GenericAttribute",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 367, col: 99, offset: 12517},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttribute",
			pos:  position{line: 371, col: 1, offset: 12587},
			expr: &actionExpr{
				pos: position{line: 371, col: 24, offset: 12610},
				run: (*parser).callonLineRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 371, col: 24, offset: 12610},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 371, col: 24, offset: 12610},
							val:        "lines=",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 371, col: 33, offset: 12619},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 371, col: 40, offset: 12626},
								name: "LineRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 371, col: 66, offset: 12652},
							expr: &litMatcher{
								pos:        position{line: 371, col: 66, offset: 12652},
								val:        ",",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttributeValue",
			pos:  position{line: 375, col: 1, offset: 12711},
			expr: &actionExpr{
				pos: position{line: 375, col: 29, offset: 12739},
				run: (*parser).callonLineRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 375, col: 29, offset: 12739},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 375, col: 29, offset: 12739},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 375, col: 36, offset: 12746},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 375, col: 36, offset: 12746},
										name: "MultipleLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 376, col: 11, offset: 12863},
										name: "MultipleQuotedLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 377, col: 11, offset: 12899},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 378, col: 11, offset: 12925},
										name: "MultiLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 379, col: 11, offset: 12957},
										name: "SingleLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 380, col: 11, offset: 12989},
										name: "SingleLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 381, col: 11, offset: 13016},
										name: "UndefinedLineRange",
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 381, col: 31, offset: 13036},
							expr: &ruleRefExpr{
								pos:  position{line: 381, col: 31, offset: 13036},
								name: "WS",
							},
						},
						&choiceExpr{
							pos: position{line: 381, col: 36, offset: 13041},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 381, col: 36, offset: 13041},
									expr: &litMatcher{
										pos:        position{line: 381, col: 37, offset: 13042},
										val:        ",",
										ignoreCase: false,
									},
								},
								&andExpr{
									pos: position{line: 381, col: 43, offset: 13048},
									expr: &litMatcher{
										pos:        position{line: 381, col: 44, offset: 13049},
										val:        "]",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleLineRanges",
			pos:  position{line: 385, col: 1, offset: 13081},
			expr: &actionExpr{
				pos: position{line: 385, col: 23, offset: 13103},
				run: (*parser).callonMultipleLineRanges1,
				expr: &seqExpr{
					pos: position{line: 385, col: 23, offset: 13103},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 385, col: 23, offset: 13103},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 385, col: 30, offset: 13110},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 385, col: 30, offset: 13110},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 385, col: 47, offset: 13127},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 386, col: 5, offset: 13149},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 386, col: 12, offset: 13156},
								expr: &actionExpr{
									pos: position{line: 386, col: 13, offset: 13157},
									run: (*parser).callonMultipleLineRanges9,
									expr: &seqExpr{
										pos: position{line: 386, col: 13, offset: 13157},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 386, col: 13, offset: 13157},
												val:        ";",
												ignoreCase: false,
											},
											&labeledExpr{
												pos:   position{line: 386, col: 17, offset: 13161},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 386, col: 24, offset: 13168},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 386, col: 24, offset: 13168},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 386, col: 41, offset: 13185},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleQuotedLineRanges",
			pos:  position{line: 392, col: 1, offset: 13323},
			expr: &actionExpr{
				pos: position{line: 392, col: 29, offset: 13351},
				run: (*parser).callonMultipleQuotedLineRanges1,
				expr: &seqExpr{
					pos: position{line: 392, col: 29, offset: 13351},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 392, col: 29, offset: 13351},
							val:        "\"",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 392, col: 34, offset: 13356},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 392, col: 41, offset: 13363},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 392, col: 41, offset: 13363},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 392, col: 58, offset: 13380},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 393, col: 5, offset: 13402},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 393, col: 12, offset: 13409},
								expr: &actionExpr{
									pos: position{line: 393, col: 13, offset: 13410},
									run: (*parser).callonMultipleQuotedLineRanges10,
									expr: &seqExpr{
										pos: position{line: 393, col: 13, offset: 13410},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 393, col: 13, offset: 13410},
												val:        ",",
												ignoreCase: false,
											},
											&labeledExpr{
												pos:   position{line: 393, col: 17, offset: 13414},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 393, col: 24, offset: 13421},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 393, col: 24, offset: 13421},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 393, col: 41, offset: 13438},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 395, col: 9, offset: 13491},
							val:        "\"",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "MultiLineRange",
			pos:  position{line: 399, col: 1, offset: 13581},
			expr: &actionExpr{
				pos: position{line: 399, col: 19, offset: 13599},
				run: (*parser).callonMultiLineRange1,
				expr: &seqExpr{
					pos: position{line: 399, col: 19, offset: 13599},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 399, col: 19, offset: 13599},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 399, col: 26, offset: 13606},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 399, col: 34, offset: 13614},
							val:        "..",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 399, col: 39, offset: 13619},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 399, col: 44, offset: 13624},
								name: "NUMBER",
							},
						},
					},
				},
			},
		},
		{
			name: "MultiLineQuotedRange",
			pos:  position{line: 403, col: 1, offset: 13712},
			expr: &actionExpr{
				pos: position{line: 403, col: 25, offset: 13736},
				run: (*parser).callonMultiLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 403, col: 25, offset: 13736},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 403, col: 25, offset: 13736},
							val:        "\"",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 403, col: 30, offset: 13741},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 403, col: 37, offset: 13748},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 403, col: 45, offset: 13756},
							val:        "..",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 403, col: 50, offset: 13761},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 403, col: 55, offset: 13766},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 403, col: 63, offset: 13774},
							val:        "\"",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SingleLineRange",
			pos:  position{line: 407, col: 1, offset: 13859},
			expr: &actionExpr{
				pos: position{line: 407, col: 20, offset: 13878},
				run: (*parser).callonSingleLineRange1,
				expr: &labeledExpr{
					pos:   position{line: 407, col: 20, offset: 13878},
					label: "singleline",
					expr: &ruleRefExpr{
						pos:  position{line: 407, col: 32, offset: 13890},
						name: "NUMBER",
					},
				},
			},
		},
		{
			name: "SingleLineQuotedRange",
			pos:  position{line: 411, col: 1, offset: 13985},
			expr: &actionExpr{
				pos: position{line: 411, col: 26, offset: 14010},
				run: (*parser).callonSingleLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 411, col: 26, offset: 14010},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 411, col: 26, offset: 14010},
							val:        "\"",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 411, col: 31, offset: 14015},
							label: "singleline",
							expr: &ruleRefExpr{
								pos:  position{line: 411, col: 43, offset: 14027},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 411, col: 51, offset: 14035},
							val:        "\"",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "UndefinedLineRange",
			pos:  position{line: 415, col: 1, offset: 14127},
			expr: &actionExpr{
				pos: position{line: 415, col: 23, offset: 14149},
				run: (*parser).callonUndefinedLineRange1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 415, col: 23, offset: 14149},
					expr: &seqExpr{
						pos: position{line: 415, col: 24, offset: 14150},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 415, col: 24, offset: 14150},
								expr: &litMatcher{
									pos:        position{line: 415, col: 25, offset: 14151},
									val:        "]",
									ignoreCase: false,
								},
							},
							&notExpr{
								pos: position{line: 415, col: 29, offset: 14155},
								expr: &litMatcher{
									pos:        position{line: 415, col: 30, offset: 14156},
									val:        ",",
									ignoreCase: false,
								},
							},
							&notExpr{
								pos: position{line: 415, col: 34, offset: 14160},
								expr: &ruleRefExpr{
									pos:  position{line: 415, col: 35, offset: 14161},
									name: "WS",
								},
							},
							&anyMatcher{
								line: 415, col: 38, offset: 14164,
							},
						},
					},
				},
			},
		},
		{
			name: "TagRangesAttribute",
			pos:  position{line: 419, col: 1, offset: 14204},
			expr: &actionExpr{
				pos: position{line: 419, col: 23, offset: 14226},
				run: (*parser).callonTagRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 419, col: 23, offset: 14226},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 419, col: 24, offset: 14227},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 419, col: 24, offset: 14227},
									val:        "tags=",
									ignoreCase: false,
								},
								&litMatcher{
									pos:        position{line: 419, col: 34, offset: 14237},
									val:        "tag=",
									ignoreCase: false,
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 419, col: 42, offset: 14245},
							label: "tags",
							expr: &ruleRefExpr{
								pos:  position{line: 419, col: 48, offset: 14251},
								name: "TagRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 419, col: 73, offset: 14276},
							expr: &litMatcher{
								pos:        position{line: 419, col: 73, offset: 14276},
								val:        ",",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "TagRangesAttributeValue",
			pos:  position{line: 423, col: 1, offset: 14425},
			expr: &actionExpr{
				pos: position{line: 423, col: 28, offset: 14452},
				run: (*parser).callonTagRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 423, col: 28, offset: 14452},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 423, col: 28, offset: 14452},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 423, col: 35, offset: 14459},
								name: "MultipleTagRanges",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 423, col: 54, offset: 14478},
							expr: &ruleRefExpr{
								pos:  position{line: 423, col: 54, offset: 14478},
								name: "WS",
							},
						},
						&choiceExpr{
							pos: position{line: 423, col: 59, offset: 14483},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 423, col: 59, offset: 14483},
									expr: &litMatcher{
										pos:        position{line: 423, col: 60, offset: 14484},
										val:        ",",
										ignoreCase: false,
									},
								},
								&andExpr{
									pos: position{line: 423, col: 66, offset: 14490},
									expr: &litMatcher{
										pos:        position{line: 423, col: 67, offset: 14491},
										val:        "]",
										ignoreCase: false,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleTagRanges",
			pos:  position{line: 427, col: 1, offset: 14523},
			expr: &actionExpr{
				pos: position{line: 427, col: 22, offset: 14544},
				run: (*parser).callonMultipleTagRanges1,
				expr: &seqExpr{
					pos: position{line: 427, col: 22, offset: 14544},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 427, col: 22, offset: 14544},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 427, col: 29, offset: 14551},
								name: "TagRange",
							},
						},
						&labeledExpr{
							pos:   position{line: 428, col: 5, offset: 14565},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 428, col: 12, offset: 14572},
								expr: &actionExpr{
									pos: position{line: 428, col: 13, offset: 14573},
									run: (*parser).callonMultipleTagRanges7,
									expr: &seqExpr{
										pos: position{line: 428, col: 13, offset: 14573},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 428, col: 13, offset: 14573},
												val:        ";",
												ignoreCase: false,
											},
											&labeledExpr{
												pos:   position{line: 428, col: 17, offset: 14577},
												label: "other",
												expr: &ruleRefExpr{
													pos:  position{line: 428, col: 24, offset: 14584},
													name: "TagRange",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagRange",
			pos:  position{line: 434, col: 1, offset: 14715},
			expr: &choiceExpr{
				pos: position{line: 434, col: 13, offset: 14727},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 434, col: 13, offset: 14727},
						run: (*parser).callonTagRange2,
						expr: &labeledExpr{
							pos:   position{line: 434, col: 13, offset: 14727},
							label: "tag",
							expr: &choiceExpr{
								pos: position{line: 434, col: 18, offset: 14732},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 434, col: 18, offset: 14732},
										name: "Alphanums",
									},
									&ruleRefExpr{
										pos:  position{line: 434, col: 30, offset: 14744},
										name: "TagWildcard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 436, col: 5, offset: 14812},
						run: (*parser).callonTagRange7,
						expr: &seqExpr{
							pos: position{line: 436, col: 5, offset: 14812},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 436, col: 5, offset: 14812},
									val:        "!",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 436, col: 9, offset: 14816},
									label: "tag",
									expr: &choiceExpr{
										pos: position{line: 436, col: 14, offset: 14821},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 436, col: 14, offset: 14821},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 436, col: 26, offset: 14833},
												name: "TagWildcard",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagWildcard",
			pos:  position{line: 440, col: 1, offset: 14901},
			expr: &actionExpr{
				pos: position{line: 440, col: 16, offset: 14916},
				run: (*parser).callonTagWildcard1,
				expr: &seqExpr{
					pos: position{line: 440, col: 16, offset: 14916},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 440, col: 16, offset: 14916},
							label: "stars",
							expr: &actionExpr{
								pos: position{line: 440, col: 23, offset: 14923},
								run: (*parser).callonTagWildcard4,
								expr: &oneOrMoreExpr{
									pos: position{line: 440, col: 23, offset: 14923},
									expr: &litMatcher{
										pos:        position{line: 440, col: 24, offset: 14924},
										val:        "*",
										ignoreCase: false,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 443, col: 5, offset: 14978},
							run: (*parser).callonTagWildcard7,
						},
					},
				},
			},
		},
		{
			name: "IncludedFileLine",
			pos:  position{line: 453, col: 1, offset: 15272},
			expr: &actionExpr{
				pos: position{line: 453, col: 21, offset: 15292},
				run: (*parser).callonIncludedFileLine1,
				expr: &seqExpr{
					pos: position{line: 453, col: 21, offset: 15292},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 453, col: 21, offset: 15292},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 453, col: 29, offset: 15300},
								expr: &choiceExpr{
									pos: position{line: 453, col: 30, offset: 15301},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 453, col: 30, offset: 15301},
											name: "IncludedFileStartTag",
										},
										&ruleRefExpr{
											pos:  position{line: 453, col: 53, offset: 15324},
											name: "IncludedFileEndTag",
										},
										&actionExpr{
											pos: position{line: 453, col: 74, offset: 15345},
											run: (*parser).callonIncludedFileLine8,
											expr: &anyMatcher{
												line: 453, col: 74, offset: 15345,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 453, col: 107, offset: 15378},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileStartTag",
			pos:  position{line: 457, col: 1, offset: 15449},
			expr: &actionExpr{
				pos: position{line: 457, col: 25, offset: 15473},
				run: (*parser).callonIncludedFileStartTag1,
				expr: &seqExpr{
					pos: position{line: 457, col: 25, offset: 15473},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 457, col: 25, offset: 15473},
							val:        "tag::",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 457, col: 33, offset: 15481},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 457, col: 38, offset: 15486},
								run: (*parser).callonIncludedFileStartTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 457, col: 38, offset: 15486},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 457, col: 78, offset: 15526},
							val:        "[]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "IncludedFileEndTag",
			pos:  position{line: 461, col: 1, offset: 15591},
			expr: &actionExpr{
				pos: position{line: 461, col: 23, offset: 15613},
				run: (*parser).callonIncludedFileEndTag1,
				expr: &seqExpr{
					pos: position{line: 461, col: 23, offset: 15613},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 461, col: 23, offset: 15613},
							val:        "end::",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 461, col: 31, offset: 15621},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 461, col: 36, offset: 15626},
								run: (*parser).callonIncludedFileEndTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 461, col: 36, offset: 15626},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 461, col: 76, offset: 15666},
							val:        "[]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "ListItems",
			pos:  position{line: 468, col: 1, offset: 15830},
			expr: &oneOrMoreExpr{
				pos: position{line: 468, col: 14, offset: 15843},
				expr: &ruleRefExpr{
					pos:  position{line: 468, col: 14, offset: 15843},
					name: "ListItem",
				},
			},
		},
		{
			name: "ListItem",
			pos:  position{line: 470, col: 1, offset: 15854},
			expr: &choiceExpr{
				pos: position{line: 470, col: 13, offset: 15866},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 470, col: 13, offset: 15866},
						name: "OrderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 470, col: 31, offset: 15884},
						name: "UnorderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 470, col: 51, offset: 15904},
						name: "LabeledListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 470, col: 69, offset: 15922},
						name: "ContinuedListItemElement",
					},
				},
			},
		},
		{
			name: "ListParagraph",
			pos:  position{line: 472, col: 1, offset: 15948},
			expr: &choiceExpr{
				pos: position{line: 472, col: 18, offset: 15965},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 472, col: 18, offset: 15965},
						run: (*parser).callonListParagraph2,
						expr: &labeledExpr{
							pos:   position{line: 472, col: 18, offset: 15965},
							label: "comment",
							expr: &ruleRefExpr{
								pos:  position{line: 472, col: 27, offset: 15974},
								name: "SingleLineComment",
							},
						},
					},
					&actionExpr{
						pos: position{line: 474, col: 9, offset: 16031},
						run: (*parser).callonListParagraph5,
						expr: &labeledExpr{
							pos:   position{line: 474, col: 9, offset: 16031},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 474, col: 15, offset: 16037},
								expr: &ruleRefExpr{
									pos:  position{line: 474, col: 16, offset: 16038},
									name: "ListParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListParagraphLine",
			pos:  position{line: 478, col: 1, offset: 16130},
			expr: &actionExpr{
				pos: position{line: 478, col: 22, offset: 16151},
				run: (*parser).callonListParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 478, col: 22, offset: 16151},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 478, col: 22, offset: 16151},
							expr: &ruleRefExpr{
								pos:  position{line: 478, col: 23, offset: 16152},
								name: "EOF",
							},
						},
						&notExpr{
							pos: position{line: 479, col: 5, offset: 16160},
							expr: &ruleRefExpr{
								pos:  position{line: 479, col: 6, offset: 16161},
								name: "BlankLine",
							},
						},
						&notExpr{
							pos: position{line: 480, col: 5, offset: 16176},
							expr: &ruleRefExpr{
								pos:  position{line: 480, col: 6, offset: 16177},
								name: "SingleLineComment",
							},
						},
						&notExpr{
							pos: position{line: 481, col: 5, offset: 16199},
							expr: &ruleRefExpr{
								pos:  position{line: 481, col: 6, offset: 16200},
								name: "OrderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 482, col: 5, offset: 16226},
							expr: &ruleRefExpr{
								pos:  position{line: 482, col: 6, offset: 16227},
								name: "UnorderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 483, col: 5, offset: 16255},
							expr: &seqExpr{
								pos: position{line: 483, col: 7, offset: 16257},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 483, col: 7, offset: 16257},
										name: "LabeledListItemTerm",
									},
									&ruleRefExpr{
										pos:  position{line: 483, col: 27, offset: 16277},
										name: "LabeledListItemSeparator",
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 484, col: 5, offset: 16308},
							expr: &ruleRefExpr{
								pos:  position{line: 484, col: 6, offset: 16309},
								name: "ListItemContinuation",
							},
						},
						&notExpr{
							pos: position{line: 485, col: 5, offset: 16334},
							expr: &ruleRefExpr{
								pos:  position{line: 485, col: 6, offset: 16335},
								name: "ElementAttribute",
							},
						},
						&notExpr{
							pos: position{line: 486, col: 5, offset: 16356},
							expr: &ruleRefExpr{
								pos:  position{line: 486, col: 6, offset: 16357},
								name: "BlockDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 487, col: 5, offset: 16376},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 488, col: 9, offset: 16391},
								run: (*parser).callonListParagraphLine24,
								expr: &seqExpr{
									pos: position{line: 488, col: 9, offset: 16391},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 488, col: 9, offset: 16391},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 488, col: 18, offset: 16400},
												expr: &ruleRefExpr{
													pos:  position{line: 488, col: 19, offset: 16401},
													name: "InlineElement",
												},
											},
										},
										&labeledExpr{
											pos:   position{line: 488, col: 35, offset: 16417},
											label: "linebreak",
											expr: &zeroOrOneExpr{
												pos: position{line: 488, col: 45, offset: 16427},
												expr: &ruleRefExpr{
													pos:  position{line: 488, col: 46, offset: 16428},
													name: "LineBreak",
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 490, col: 12, offset: 16580},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ListItemContinuation",
			pos:  position{line: 494, col: 1, offset: 16627},
			expr: &seqExpr{
				pos: position{line: 494, col: 25, offset: 16651},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 494, col: 25, offset: 16651},
						val:        "+",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 494, col: 29, offset: 16655},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "ContinuedListItemElement",
			pos:  position{line: 496, col: 1, offset: 16662},
			expr: &actionExpr{
				pos: position{line: 496, col: 29, offset: 16690},
				run: (*parser).callonContinuedListItemElement1,
				expr: &seqExpr{
					pos: position{line: 496, col: 29, offset: 16690},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 496, col: 29, offset: 16690},
							label: "blanklines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 496, col: 41, offset: 16702},
								expr: &ruleRefExpr{
									pos:  position{line: 496, col: 41, offset: 16702},
									name: "BlankLine",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 496, col: 53, offset: 16714},
							name: "ListItemContinuation",
						},
						&labeledExpr{
							pos:   position{line: 496, col: 74, offset: 16735},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 496, col: 82, offset: 16743},
								name: "DocumentBlock",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItem",
			pos:  position{line: 503, col: 1, offset: 16985},
			expr: &actionExpr{
				pos: position{line: 503, col: 20, offset: 17004},
				run: (*parser).callonOrderedListItem1,
				expr: &seqExpr{
					pos: position{line: 503, col: 20, offset: 17004},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 503, col: 20, offset: 17004},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 503, col: 31, offset: 17015},
								expr: &ruleRefExpr{
									pos:  position{line: 503, col: 32, offset: 17016},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 503, col: 52, offset: 17036},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 503, col: 60, offset: 17044},
								name: "OrderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 503, col: 83, offset: 17067},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 503, col: 92, offset: 17076},
								name: "OrderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemPrefix",
			pos:  position{line: 507, col: 1, offset: 17216},
			expr: &actionExpr{
				pos: position{line: 508, col: 5, offset: 17246},
				run: (*parser).callonOrderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 508, col: 5, offset: 17246},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 508, col: 5, offset: 17246},
							expr: &ruleRefExpr{
								pos:  position{line: 508, col: 5, offset: 17246},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 508, col: 9, offset: 17250},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 510, col: 9, offset: 17313},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 510, col: 9, offset: 17313},
										run: (*parser).callonOrderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 510, col: 9, offset: 17313},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 510, col: 9, offset: 17313},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 510, col: 16, offset: 17320},
														run: (*parser).callonOrderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 510, col: 16, offset: 17320},
															expr: &litMatcher{
																pos:        position{line: 510, col: 17, offset: 17321},
																val:        ".",
																ignoreCase: false,
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 514, col: 9, offset: 17421},
													run: (*parser).callonOrderedListItemPrefix13,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 533, col: 11, offset: 18138},
										run: (*parser).callonOrderedListItemPrefix14,
										expr: &seqExpr{
											pos: position{line: 533, col: 11, offset: 18138},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 533, col: 11, offset: 18138},
													expr: &charClassMatcher{
														pos:        position{line: 533, col: 12, offset: 18139},
														val:        "[0-9]",
														ranges:     []rune{'0', '9'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 533, col: 20, offset: 18147},
													val:        ".",
													ignoreCase: false,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 535, col: 13, offset: 18258},
										run: (*parser).callonOrderedListItemPrefix19,
										expr: &seqExpr{
											pos: position{line: 535, col: 13, offset: 18258},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 535, col: 14, offset: 18259},
													val:        "[a-z]",
													ranges:     []rune{'a', 'z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 535, col: 21, offset: 18266},
													val:        ".",
													ignoreCase: false,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 537, col: 13, offset: 18380},
										run: (*parser).callonOrderedListItemPrefix23,
										expr: &seqExpr{
											pos: position{line: 537, col: 13, offset: 18380},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 537, col: 14, offset: 18381},
													val:        "[A-Z]",
													ranges:     []rune{'A', 'Z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 537, col: 21, offset: 18388},
													val:        ".",
													ignoreCase: false,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 539, col: 13, offset: 18502},
										run: (*parser).callonOrderedListItemPrefix27,
										expr: &seqExpr{
											pos: position{line: 539, col: 13, offset: 18502},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 539, col: 13, offset: 18502},
													expr: &charClassMatcher{
														pos:        position{line: 539, col: 14, offset: 18503},
														val:        "[a-z]",
														ranges:     []rune{'a', 'z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 539, col: 22, offset: 18511},
													val:        ")",
													ignoreCase: false,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 541, col: 13, offset: 18625},
										run: (*parser).callonOrderedListItemPrefix32,
										expr: &seqExpr{
											pos: position{line: 541, col: 13, offset: 18625},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 541, col: 13, offset: 18625},
													expr: &charClassMatcher{
														pos:        position{line: 541, col: 14, offset: 18626},
														val:        "[A-Z]",
														ranges:     []rune{'A', 'Z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 541, col: 22, offset: 18634},
													val:        ")",
													ignoreCase: false,
												},
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 543, col: 12, offset: 18747},
							expr: &ruleRefExpr{
								pos:  position{line: 543, col: 12, offset: 18747},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemContent",
			pos:  position{line: 547, col: 1, offset: 18779},
			expr: &actionExpr{
				pos: position{line: 547, col: 27, offset: 18805},
				run: (*parser).callonOrderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 547, col: 27, offset: 18805},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 547, col: 37, offset: 18815},
						expr: &ruleRefExpr{
							pos:  position{line: 547, col: 37, offset: 18815},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItem",
			pos:  position{line: 554, col: 1, offset: 19015},
			expr: &actionExpr{
				pos: position{line: 554, col: 22, offset: 19036},
				run: (*parser).callonUnorderedListItem1,
				expr: &seqExpr{
					pos: position{line: 554, col: 22, offset: 19036},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 554, col: 22, offset: 19036},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 554, col: 33, offset: 19047},
								expr: &ruleRefExpr{
									pos:  position{line: 554, col: 34, offset: 19048},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 554, col: 54, offset: 19068},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 554, col: 62, offset: 19076},
								name: "UnorderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 554, col: 87, offset: 19101},
							label: "checkstyle",
							expr: &zeroOrOneExpr{
								pos: position{line: 554, col: 98, offset: 19112},
								expr: &ruleRefExpr{
									pos:  position{line: 554, col: 99, offset: 19113},
									name: "UnorderedListItemCheckStyle",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 554, col: 129, offset: 19143},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 554, col: 138, offset: 19152},
								name: "UnorderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemPrefix",
			pos:  position{line: 558, col: 1, offset: 19310},
			expr: &actionExpr{
				pos: position{line: 559, col: 5, offset: 19342},
				run: (*parser).callonUnorderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 559, col: 5, offset: 19342},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 559, col: 5, offset: 19342},
							expr: &ruleRefExpr{
								pos:  position{line: 559, col: 5, offset: 19342},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 559, col: 9, offset: 19346},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 559, col: 17, offset: 19354},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 561, col: 9, offset: 19411},
										run: (*parser).callonUnorderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 561, col: 9, offset: 19411},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 561, col: 9, offset: 19411},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 561, col: 16, offset: 19418},
														run: (*parser).callonUnorderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 561, col: 16, offset: 19418},
															expr: &litMatcher{
																pos:        position{line: 561, col: 17, offset: 19419},
																val:        "*",
																ignoreCase: false,
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 565, col: 9, offset: 19519},
													run: (*parser).callonUnorderedListItemPrefix13,
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 582, col: 14, offset: 20226},
										label: "depth",
										expr: &actionExpr{
											pos: position{line: 582, col: 21, offset: 20233},
											run: (*parser).callonUnorderedListItemPrefix15,
											expr: &litMatcher{
												pos:        position{line: 582, col: 22, offset: 20234},
												val:        "-",
												ignoreCase: false,
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 584, col: 13, offset: 20320},
							expr: &ruleRefExpr{
								pos:  position{line: 584, col: 13, offset: 20320},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemCheckStyle",
			pos:  position{line: 588, col: 1, offset: 20353},
			expr: &actionExpr{
				pos: position{line: 588, col: 32, offset: 20384},
				run: (*parser).callonUnorderedListItemCheckStyle1,
				expr: &seqExpr{
					pos: position{line: 588, col: 32, offset: 20384},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 588, col: 32, offset: 20384},
							expr: &litMatcher{
								pos:        position{line: 588, col: 33, offset: 20385},
								val:        "[",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 588, col: 37, offset: 20389},
							label: "style",
							expr: &choiceExpr{
								pos: position{line: 589, col: 7, offset: 20403},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 589, col: 7, offset: 20403},
										run: (*parser).callonUnorderedListItemCheckStyle7,
										expr: &litMatcher{
											pos:        position{line: 589, col: 7, offset: 20403},
											val:        "[ ]",
											ignoreCase: false,
										},
									},
									&actionExpr{
										pos: position{line: 590, col: 7, offset: 20448},
										run: (*parser).callonUnorderedListItemCheckStyle9,
										expr: &litMatcher{
											pos:        position{line: 590, col: 7, offset: 20448},
											val:        "[*]",
											ignoreCase: false,
										},
									},
									&actionExpr{
										pos: position{line: 591, col: 7, offset: 20491},
										run: (*parser).callonUnorderedListItemCheckStyle11,
										expr: &litMatcher{
											pos:        position{line: 591, col: 7, offset: 20491},
											val:        "[x]",
											ignoreCase: false,
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 592, col: 7, offset: 20533},
							expr: &ruleRefExpr{
								pos:  position{line: 592, col: 7, offset: 20533},
								name: "WS",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemContent",
			pos:  position{line: 596, col: 1, offset: 20572},
			expr: &actionExpr{
				pos: position{line: 596, col: 29, offset: 20600},
				run: (*parser).callonUnorderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 596, col: 29, offset: 20600},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 596, col: 39, offset: 20610},
						expr: &ruleRefExpr{
							pos:  position{line: 596, col: 39, offset: 20610},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "LabeledListItem",
			pos:  position{line: 603, col: 1, offset: 20926},
			expr: &actionExpr{
				pos: position{line: 603, col: 20, offset: 20945},
				run: (*parser).callonLabeledListItem1,
				expr: &seqExpr{
					pos: position{line: 603, col: 20, offset: 20945},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 603, col: 20, offset: 20945},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 603, col: 31, offset: 20956},
								expr: &ruleRefExpr{
									pos:  position{line: 603, col: 32, offset: 20957},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 603, col: 52, offset: 20977},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 603, col: 58, offset: 20983},
								name: "LabeledListItemTerm",
							},
						},
						&labeledExpr{
							pos:   position{line: 603, col: 79, offset: 21004},
							label: "separator",
							expr: &ruleRefExpr{
								pos:  position{line: 603, col: 90, offset: 21015},
								name: "LabeledListItemSeparator",
							},
						},
						&labeledExpr{
							pos:   position{line: 603, col: 116, offset: 21041},
							label: "description",
							expr: &zeroOrOneExpr{
								pos: position{line: 603, col: 128, offset: 21053},
								expr: &ruleRefExpr{
									pos:  position{line: 603, col: 129, offset: 21054},
									name: "LabeledListItemDescription",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTerm",
			pos:  position{line: 607, col: 1, offset: 21193},
			expr: &actionExpr{
				pos: position{line: 607, col: 24, offset: 21216},
				run: (*parser).callonLabeledListItemTerm1,
				expr: &oneOrMoreExpr{
					pos: position{line: 607, col: 24, offset: 21216},
					expr: &choiceExpr{
						pos: position{line: 607, col: 25, offset: 21217},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 607, col: 25, offset: 21217},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 607, col: 37, offset: 21229},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 607, col: 47, offset: 21239},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 607, col: 47, offset: 21239},
										expr: &ruleRefExpr{
											pos:  position{line: 607, col: 48, offset: 21240},
											name: "NEWLINE",
										},
									},
									&notExpr{
										pos: position{line: 607, col: 56, offset: 21248},
										expr: &litMatcher{
											pos:        position{line: 607, col: 57, offset: 21249},
											val:        "::",
											ignoreCase: false,
										},
									},
									&anyMatcher{
										line: 607, col: 62, offset: 21254,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemSeparator",
			pos:  position{line: 611, col: 1, offset: 21296},
			expr: &actionExpr{
				pos: position{line: 612, col: 5, offset: 21329},
				run: (*parser).callonLabeledListItemSeparator1,
				expr: &seqExpr{
					pos: position{line: 612, col: 5, offset: 21329},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 612, col: 5, offset: 21329},
							label: "separator",
							expr: &actionExpr{
								pos: position{line: 612, col: 16, offset: 21340},
								run: (*parser).callonLabeledListItemSeparator4,
								expr: &oneOrMoreExpr{
									pos: position{line: 612, col: 16, offset: 21340},
									expr: &litMatcher{
										pos:        position{line: 612, col: 17, offset: 21341},
										val:        ":",
										ignoreCase: false,
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 615, col: 5, offset: 21399},
							run: (*parser).callonLabeledListItemSeparator7,
						},
						&choiceExpr{
							pos: position{line: 619, col: 6, offset: 21575},
							alternatives: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 619, col: 6, offset: 21575},
									expr: &choiceExpr{
										pos: position{line: 619, col: 7, offset: 21576},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 619, col: 7, offset: 21576},
												name: "WS",
											},
											&ruleRefExpr{
												pos:  position{line: 619, col: 12, offset: 21581},
												name: "NEWLINE",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 619, col: 24, offset: 21593},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemDescription",
			pos:  position{line: 623, col: 1, offset: 21633},
			expr: &actionExpr{
				pos: position{line: 623, col: 31, offset: 21663},
				run: (*parser).callonLabeledListItemDescription1,
				expr: &labeledExpr{
					pos:   position{line: 623, col: 31, offset: 21663},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 623, col: 40, offset: 21672},
						expr: &ruleRefExpr{
							pos:  position{line: 623, col: 41, offset: 21673},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionKind",
			pos:  position{line: 630, col: 1, offset: 21864},
			expr: &choiceExpr{
				pos: position{line: 630, col: 19, offset: 21882},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 630, col: 19, offset: 21882},
						run: (*parser).callonAdmonitionKind2,
						expr: &litMatcher{
							pos:        position{line: 630, col: 19, offset: 21882},
							val:        "TIP",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 632, col: 9, offset: 21928},
						run: (*parser).callonAdmonitionKind4,
						expr: &litMatcher{
							pos:        position{line: 632, col: 9, offset: 21928},
							val:        "NOTE",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 634, col: 9, offset: 21976},
						run: (*parser).callonAdmonitionKind6,
						expr: &litMatcher{
							pos:        position{line: 634, col: 9, offset: 21976},
							val:        "IMPORTANT",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 636, col: 9, offset: 22034},
						run: (*parser).callonAdmonitionKind8,
						expr: &litMatcher{
							pos:        position{line: 636, col: 9, offset: 22034},
							val:        "WARNING",
							ignoreCase: false,
						},
					},
					&actionExpr{
						pos: position{line: 638, col: 9, offset: 22088},
						run: (*parser).callonAdmonitionKind10,
						expr: &litMatcher{
							pos:        position{line: 638, col: 9, offset: 22088},
							val:        "CAUTION",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Paragraph",
			pos:  position{line: 647, col: 1, offset: 22395},
			expr: &choiceExpr{
				pos: position{line: 649, col: 5, offset: 22442},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 649, col: 5, offset: 22442},
						run: (*parser).callonParagraph2,
						expr: &seqExpr{
							pos: position{line: 649, col: 5, offset: 22442},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 649, col: 5, offset: 22442},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 649, col: 16, offset: 22453},
										expr: &ruleRefExpr{
											pos:  position{line: 649, col: 17, offset: 22454},
											name: "ElementAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 649, col: 37, offset: 22474},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 649, col: 40, offset: 22477},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 649, col: 56, offset: 22493},
									val:        ": ",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 649, col: 61, offset: 22498},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 649, col: 67, offset: 22504},
										expr: &ruleRefExpr{
											pos:  position{line: 649, col: 68, offset: 22505},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 653, col: 5, offset: 22697},
						run: (*parser).callonParagraph13,
						expr: &seqExpr{
							pos: position{line: 653, col: 5, offset: 22697},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 653, col: 5, offset: 22697},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 653, col: 16, offset: 22708},
										expr: &ruleRefExpr{
											pos:  position{line: 653, col: 17, offset: 22709},
											name: "ElementAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 653, col: 37, offset: 22729},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 653, col: 43, offset: 22735},
										expr: &ruleRefExpr{
											pos:  position{line: 653, col: 44, offset: 22736},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SimpleParagraph",
			pos:  position{line: 658, col: 1, offset: 22901},
			expr: &actionExpr{
				pos: position{line: 658, col: 20, offset: 22920},
				run: (*parser).callonSimpleParagraph1,
				expr: &seqExpr{
					pos: position{line: 658, col: 20, offset: 22920},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 658, col: 20, offset: 22920},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 658, col: 31, offset: 22931},
								expr: &ruleRefExpr{
									pos:  position{line: 658, col: 32, offset: 22932},
									name: "ElementAttributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 659, col: 5, offset: 22957},
							run: (*parser).callonSimpleParagraph6,
						},
						&labeledExpr{
							pos:   position{line: 667, col: 5, offset: 23248},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 667, col: 16, offset: 23259},
								name: "FirstParagraphLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 668, col: 5, offset: 23282},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 668, col: 16, offset: 23293},
								expr: &ruleRefExpr{
									pos:  position{line: 668, col: 17, offset: 23294},
									name: "OtherParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphLines",
			pos:  position{line: 672, col: 1, offset: 23428},
			expr: &actionExpr{
				pos: position{line: 672, col: 19, offset: 23446},
				run: (*parser).callonParagraphLines1,
				expr: &seqExpr{
					pos: position{line: 672, col: 19, offset: 23446},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 672, col: 19, offset: 23446},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 672, col: 30, offset: 23457},
								name: "FirstParagraphLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 672, col: 50, offset: 23477},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 672, col: 61, offset: 23488},
								expr: &ruleRefExpr{
									pos:  position{line: 672, col: 62, offset: 23489},
									name: "OtherParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FirstParagraphLine",
			pos:  position{line: 676, col: 1, offset: 23595},
			expr: &actionExpr{
				pos: position{line: 676, col: 23, offset: 23617},
				run: (*parser).callonFirstParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 676, col: 23, offset: 23617},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 676, col: 23, offset: 23617},
							expr: &seqExpr{
								pos: position{line: 676, col: 25, offset: 23619},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 676, col: 25, offset: 23619},
										name: "LabeledListItemTerm",
									},
									&ruleRefExpr{
										pos:  position{line: 676, col: 45, offset: 23639},
										name: "LabeledListItemSeparator",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 677, col: 5, offset: 23669},
							label: "elements",
							expr: &seqExpr{
								pos: position{line: 677, col: 15, offset: 23679},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 677, col: 15, offset: 23679},
										name: "SimpleWord",
									},
									&zeroOrMoreExpr{
										pos: position{line: 677, col: 26, offset: 23690},
										expr: &ruleRefExpr{
											pos:  position{line: 677, col: 26, offset: 23690},
											name: "InlineElement",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 677, col: 42, offset: 23706},
							label: "linebreak",
							expr: &zeroOrOneExpr{
								pos: position{line: 677, col: 52, offset: 23716},
								expr: &ruleRefExpr{
									pos:  position{line: 677, col: 53, offset: 23717},
									name: "LineBreak",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 677, col: 65, offset: 23729},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "OtherParagraphLine",
			pos:  position{line: 681, col: 1, offset: 23819},
			expr: &actionExpr{
				pos: position{line: 681, col: 23, offset: 23841},
				run: (*parser).callonOtherParagraphLine1,
				expr: &labeledExpr{
					pos:   position{line: 681, col: 23, offset: 23841},
					label: "elements",
					expr: &ruleRefExpr{
						pos:  position{line: 681, col: 33, offset: 23851},
						name: "InlineElements",
					},
				},
			},
		},
		{
			name: "VerseParagraph",
			pos:  position{line: 685, col: 1, offset: 23897},
			expr: &choiceExpr{
				pos: position{line: 687, col: 5, offset: 23949},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 687, col: 5, offset: 23949},
						run: (*parser).callonVerseParagraph2,
						expr: &seqExpr{
							pos: position{line: 687, col: 5, offset: 23949},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 687, col: 5, offset: 23949},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 687, col: 16, offset: 23960},
										expr: &ruleRefExpr{
											pos:  position{line: 687, col: 17, offset: 23961},
											name: "ElementAttributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 688, col: 5, offset: 23985},
									run: (*parser).callonVerseParagraph7,
								},
								&labeledExpr{
									pos:   position{line: 695, col: 5, offset: 24197},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 695, col: 8, offset: 24200},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 695, col: 24, offset: 24216},
									val:        ": ",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 695, col: 29, offset: 24221},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 695, col: 35, offset: 24227},
										expr: &ruleRefExpr{
											pos:  position{line: 695, col: 36, offset: 24228},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 699, col: 5, offset: 24420},
						run: (*parser).callonVerseParagraph14,
						expr: &seqExpr{
							pos: position{line: 699, col: 5, offset: 24420},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 699, col: 5, offset: 24420},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 699, col: 16, offset: 24431},
										expr: &ruleRefExpr{
											pos:  position{line: 699, col: 17, offset: 24432},
											name: "ElementAttributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 700, col: 5, offset: 24456},
									run: (*parser).callonVerseParagraph19,
								},
								&labeledExpr{
									pos:   position{line: 707, col: 5, offset: 24668},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 707, col: 11, offset: 24674},
										expr: &ruleRefExpr{
											pos:  position{line: 707, col: 12, offset: 24675},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElements",
			pos:  position{line: 711, col: 1, offset: 24776},
			expr: &actionExpr{
				pos: position{line: 711, col: 19, offset: 24794},
				run: (*parser).callonInlineElements1,
				expr: &seqExpr{
					pos: position{line: 711, col: 19, offset: 24794},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 711, col: 19, offset: 24794},
							expr: &ruleRefExpr{
								pos:  position{line: 711, col: 20, offset: 24795},
								name: "EOF",
							},
						},
						&notExpr{
							pos: position{line: 711, col: 24, offset: 24799},
							expr: &ruleRefExpr{
								pos:  position{line: 711, col: 25, offset: 24800},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 712, col: 5, offset: 24814},
							label: "elements",
							expr: &choiceExpr{
								pos: position{line: 712, col: 15, offset: 24824},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 712, col: 15, offset: 24824},
										run: (*parser).callonInlineElements9,
										expr: &labeledExpr{
											pos:   position{line: 712, col: 15, offset: 24824},
											label: "comment",
											expr: &ruleRefExpr{
												pos:  position{line: 712, col: 24, offset: 24833},
												name: "SingleLineComment",
											},
										},
									},
									&actionExpr{
										pos: position{line: 714, col: 9, offset: 24925},
										run: (*parser).callonInlineElements12,
										expr: &seqExpr{
											pos: position{line: 714, col: 9, offset: 24925},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 714, col: 9, offset: 24925},
													expr: &ruleRefExpr{
														pos:  position{line: 714, col: 10, offset: 24926},
														name: "BlockDelimiter",
													},
												},
												&labeledExpr{
													pos:   position{line: 714, col: 25, offset: 24941},
													label: "elements",
													expr: &oneOrMoreExpr{
														pos: position{line: 714, col: 34, offset: 24950},
														expr: &ruleRefExpr{
															pos:  position{line: 714, col: 35, offset: 24951},
															name: "InlineElement",
														},
													},
												},
												&labeledExpr{
													pos:   position{line: 714, col: 51, offset: 24967},
													label: "linebreak",
													expr: &zeroOrOneExpr{
														pos: position{line: 714, col: 61, offset: 24977},
														expr: &ruleRefExpr{
															pos:  position{line: 714, col: 62, offset: 24978},
															name: "LineBreak",
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 714, col: 74, offset: 24990},
													name: "EOL",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElement",
			pos:  position{line: 720, col: 1, offset: 25126},
			expr: &actionExpr{
				pos: position{line: 720, col: 18, offset: 25143},
				run: (*parser).callonInlineElement1,
				expr: &seqExpr{
					pos: position{line: 720, col: 18, offset: 25143},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 720, col: 18, offset: 25143},
							expr: &ruleRefExpr{
								pos:  position{line: 720, col: 19, offset: 25144},
								name: "EOL",
							},
						},
						&notExpr{
							pos: position{line: 720, col: 23, offset: 25148},
							expr: &ruleRefExpr{
								pos:  position{line: 720, col: 24, offset: 25149},
								name: "LineBreak",
							},
						},
						&labeledExpr{
							pos:   position{line: 721, col: 5, offset: 25164},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 721, col: 14, offset: 25173},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 721, col: 14, offset: 25173},
										name: "SimpleWord",
									},
									&ruleRefExpr{
										pos:  position{line: 722, col: 11, offset: 25194},
										name: "Spaces",
									},
									&ruleRefExpr{
										pos:  position{line: 723, col: 11, offset: 25212},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 724, col: 11, offset: 25235},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 725, col: 11, offset: 25251},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 726, col: 11, offset: 25274},
										name: "InlineFootnote",
									},
									&ruleRefExpr{
										pos:  position{line: 727, col: 11, offset: 25300},
										name: "InlineUserMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 728, col: 11, offset: 25327},
										name: "QuotedText",
									},
									&ruleRefExpr{
										pos:  position{line: 729, col: 11, offset: 25349},
										name: "CrossReference",
									},
									&ruleRefExpr{
										pos:  position{line: 730, col: 11, offset: 25375},
										name: "DocumentAttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 731, col: 11, offset: 25416},
										name: "InlineElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 732, col: 11, offset: 25443},
										name: "OtherWord",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElementsWithoutSubtitution",
			pos:  position{line: 739, col: 1, offset: 25703},
			expr: &actionExpr{
				pos: position{line: 739, col: 37, offset: 25739},
				run: (*parser).callonInlineElementsWithoutSubtitution1,
				expr: &seqExpr{
					pos: position{line: 739, col: 37, offset: 25739},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 739, col: 37, offset: 25739},
							expr: &ruleRefExpr{
								pos:  position{line: 739, col: 38, offset: 25740},
								name: "BlankLine",
							},
						},
						&notExpr{
							pos: position{line: 739, col: 48, offset: 25750},
							expr: &ruleRefExpr{
								pos:  position{line: 739, col: 49, offset: 25751},
								name: "BlockDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 739, col: 64, offset: 25766},
							label: "elements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 739, col: 73, offset: 25775},
								expr: &ruleRefExpr{
									pos:  position{line: 739, col: 74, offset: 25776},
									name: "InlineElementWithoutSubtitution",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 739, col: 108, offset: 25810},
							label: "linebreak",
							expr: &zeroOrOneExpr{
								pos: position{line: 739, col: 118, offset: 25820},
								expr: &ruleRefExpr{
									pos:  position{line: 739, col: 119, offset: 25821},
									name: "LineBreak",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 739, col: 131, offset: 25833},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "InlineElementWithoutSubtitution",
			pos:  position{line: 743, col: 1, offset: 25924},
			expr: &actionExpr{
				pos: position{line: 743, col: 36, offset: 25959},
				run: (*parser).callonInlineElementWithoutSubtitution1,
				expr: &seqExpr{
					pos: position{line: 743, col: 36, offset: 25959},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 743, col: 36, offset: 25959},
							expr: &ruleRefExpr{
								pos:  position{line: 743, col: 37, offset: 25960},
								name: "EOL",
							},
						},
						&notExpr{
							pos: position{line: 743, col: 41, offset: 25964},
							expr: &ruleRefExpr{
								pos:  position{line: 743, col: 42, offset: 25965},
								name: "LineBreak",
							},
						},
						&labeledExpr{
							pos:   position{line: 744, col: 5, offset: 25980},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 744, col: 14, offset: 25989},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 744, col: 14, offset: 25989},
										name: "SimpleWord",
									},
									&ruleRefExpr{
										pos:  position{line: 745, col: 11, offset: 26010},
										name: "Spaces",
									},
									&ruleRefExpr{
										pos:  position{line: 746, col: 11, offset: 26028},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 747, col: 11, offset: 26051},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 748, col: 11, offset: 26067},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 749, col: 11, offset: 26090},
										name: "QuotedText",
									},
									&ruleRefExpr{
										pos:  position{line: 750, col: 11, offset: 26112},
										name: "CrossReference",
									},
									&ruleRefExpr{
										pos:  position{line: 751, col: 11, offset: 26138},
										name: "InlineElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 752, col: 11, offset: 26164},
										name: "OtherWord",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerbatimBlock",
			pos:  position{line: 757, col: 1, offset: 26298},
			expr: &actionExpr{
				pos: position{line: 757, col: 18, offset: 26315},
				run: (*parser).callonVerbatimBlock1,
				expr: &seqExpr{
					pos: position{line: 757, col: 18, offset: 26315},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 757, col: 18, offset: 26315},
							label: "elements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 757, col: 27, offset: 26324},
								expr: &choiceExpr{
									pos: position{line: 757, col: 28, offset: 26325},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 757, col: 28, offset: 26325},
											name: "BlankLine",
										},
										&ruleRefExpr{
											pos:  position{line: 757, col: 40, offset: 26337},
											name: "FileInclusion",
										},
										&ruleRefExpr{
											pos:  position{line: 757, col: 56, offset: 26353},
											name: "VerbatimParagraph",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 757, col: 76, offset: 26373},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "VerbatimParagraph",
			pos:  position{line: 761, col: 1, offset: 26407},
			expr: &actionExpr{
				pos: position{line: 761, col: 22, offset: 26428},
				run: (*parser).callonVerbatimParagraph1,
				expr: &seqExpr{
					pos: position{line: 761, col: 22, offset: 26428},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 761, col: 22, offset: 26428},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 761, col: 33, offset: 26439},
								expr: &ruleRefExpr{
									pos:  position{line: 761, col: 34, offset: 26440},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 761, col: 54, offset: 26460},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 761, col: 60, offset: 26466},
								expr: &actionExpr{
									pos: position{line: 761, col: 61, offset: 26467},
									run: (*parser).callonVerbatimParagraph8,
									expr: &seqExpr{
										pos: position{line: 761, col: 61, offset: 26467},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 761, col: 61, offset: 26467},
												expr: &ruleRefExpr{
													pos:  position{line: 761, col: 62, offset: 26468},
													name: "EOF",
												},
											},
											&labeledExpr{
												pos:   position{line: 761, col: 66, offset: 26472},
												label: "line",
												expr: &ruleRefExpr{
													pos:  position{line: 761, col: 72, offset: 26478},
													name: "VerbatimParagraphLine",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerbatimParagraphLine",
			pos:  position{line: 767, col: 1, offset: 26598},
			expr: &actionExpr{
				pos: position{line: 767, col: 26, offset: 26623},
				run: (*parser).callonVerbatimParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 767, col: 26, offset: 26623},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 767, col: 26, offset: 26623},
							expr: &ruleRefExpr{
								pos:  position{line: 767, col: 27, offset: 26624},
								name: "BlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 767, col: 42, offset: 26639},
							expr: &ruleRefExpr{
								pos:  position{line: 767, col: 43, offset: 26640},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 767, col: 53, offset: 26650},
							label: "elements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 767, col: 62, offset: 26659},
								expr: &ruleRefExpr{
									pos:  position{line: 767, col: 63, offset: 26660},
									name: "VerbatimParagraphLineElement",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 767, col: 94, offset: 26691},
							label: "linebreak",
							expr: &zeroOrOneExpr{
								pos: position{line: 767, col: 104, offset: 26701},
								expr: &ruleRefExpr{
									pos:  position{line: 767, col: 105, offset: 26702},
									name: "LineBreak",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 767, col: 117, offset: 26714},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "VerbatimParagraphLineElement",
			pos:  position{line: 771, col: 1, offset: 26805},
			expr: &actionExpr{
				pos: position{line: 771, col: 33, offset: 26837},
				run: (*parser).callonVerbatimParagraphLineElement1,
				expr: &oneOrMoreExpr{
					pos: position{line: 771, col: 33, offset: 26837},
					expr: &seqExpr{
						pos: position{line: 771, col: 34, offset: 26838},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 771, col: 34, offset: 26838},
								expr: &ruleRefExpr{
									pos:  position{line: 771, col: 35, offset: 26839},
									name: "EOL",
								},
							},
							&notExpr{
								pos: position{line: 771, col: 39, offset: 26843},
								expr: &ruleRefExpr{
									pos:  position{line: 771, col: 40, offset: 26844},
									name: "LineBreak",
								},
							},
							&anyMatcher{
								line: 771, col: 50, offset: 26854,
							},
						},
					},
				},
			},
		},
		{
			name: "LineBreak",
			pos:  position{line: 778, col: 1, offset: 27078},
			expr: &actionExpr{
				pos: position{line: 778, col: 14, offset: 27091},
				run: (*parser).callonLineBreak1,
				expr: &seqExpr{
					pos: position{line: 778, col: 14, offset: 27091},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 778, col: 14, offset: 27091},
							name: "WS",
						},
						&litMatcher{
							pos:        position{line: 778, col: 17, offset: 27094},
							val:        "+",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 778, col: 21, offset: 27098},
							expr: &ruleRefExpr{
								pos:  position{line: 778, col: 21, offset: 27098},
								name: "WS",
							},
						},
						&andExpr{
							pos: position{line: 778, col: 25, offset: 27102},
							expr: &ruleRefExpr{
								pos:  position{line: 778, col: 26, offset: 27103},
								name: "EOL",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedText",
			pos:  position{line: 785, col: 1, offset: 27387},
			expr: &actionExpr{
				pos: position{line: 785, col: 15, offset: 27401},
				run: (*parser).callonQuotedText1,
				expr: &seqExpr{
					pos: position{line: 785, col: 15, offset: 27401},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 785, col: 15, offset: 27401},
							expr: &ruleRefExpr{
								pos:  position{line: 785, col: 16, offset: 27402},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 785, col: 19, offset: 27405},
							label: "text",
							expr: &choiceExpr{
								pos: position{line: 785, col: 25, offset: 27411},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 785, col: 25, offset: 27411},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 786, col: 15, offset: 27435},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 787, col: 15, offset: 27461},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 788, col: 15, offset: 27490},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 789, col: 15, offset: 27519},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 790, col: 15, offset: 27550},
										name: "EscapedBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 791, col: 15, offset: 27581},
										name: "EscapedItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 792, col: 15, offset: 27614},
										name: "EscapedMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 793, col: 15, offset: 27650},
										name: "EscapedSubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 794, col: 15, offset: 27686},
										name: "EscapedSuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 795, col: 15, offset: 27723},
										name: "SubscriptOrSuperscriptPrefix",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedTextPrefix",
			pos:  position{line: 799, col: 1, offset: 27877},
			expr: &choiceExpr{
				pos: position{line: 799, col: 21, offset: 27897},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 799, col: 21, offset: 27897},
						val:        "**",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 799, col: 28, offset: 27904},
						val:        "*",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 799, col: 34, offset: 27910},
						val:        "__",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 799, col: 41, offset: 27917},
						val:        "_",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 799, col: 47, offset: 27923},
						val:        "``",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 799, col: 54, offset: 27930},
						val:        "`",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 799, col: 60, offset: 27936},
						val:        "^",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 799, col: 66, offset: 27942},
						val:        "~",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "SubscriptOrSuperscriptPrefix",
			pos:  position{line: 801, col: 1, offset: 27947},
			expr: &choiceExpr{
				pos: position{line: 801, col: 33, offset: 27979},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 801, col: 33, offset: 27979},
						val:        "^",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 801, col: 39, offset: 27985},
						run: (*parser).callonSubscriptOrSuperscriptPrefix3,
						expr: &litMatcher{
							pos:        position{line: 801, col: 39, offset: 27985},
							val:        "~",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "OneOrMoreBackslashes",
			pos:  position{line: 805, col: 1, offset: 28118},
			expr: &actionExpr{
				pos: position{line: 805, col: 25, offset: 28142},
				run: (*parser).callonOneOrMoreBackslashes1,
				expr: &oneOrMoreExpr{
					pos: position{line: 805, col: 25, offset: 28142},
					expr: &litMatcher{
						pos:        position{line: 805, col: 25, offset: 28142},
						val:        "\\",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "TwoOrMoreBackslashes",
			pos:  position{line: 809, col: 1, offset: 28183},
			expr: &actionExpr{
				pos: position{line: 809, col: 25, offset: 28207},
				run: (*parser).callonTwoOrMoreBackslashes1,
				expr: &seqExpr{
					pos: position{line: 809, col: 25, offset: 28207},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 809, col: 25, offset: 28207},
							val:        "\\\\",
							ignoreCase: false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 809, col: 30, offset: 28212},
							expr: &litMatcher{
								pos:        position{line: 809, col: 30, offset: 28212},
								val:        "\\",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "BoldText",
			pos:  position{line: 817, col: 1, offset: 28309},
			expr: &choiceExpr{
				pos: position{line: 817, col: 13, offset: 28321},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 817, col: 13, offset: 28321},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 817, col: 35, offset: 28343},
						name: "SingleQuoteBoldText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldText",
			pos:  position{line: 819, col: 1, offset: 28364},
			expr: &actionExpr{
				pos: position{line: 819, col: 24, offset: 28387},
				run: (*parser).callonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 819, col: 24, offset: 28387},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 819, col: 24, offset: 28387},
							expr: &litMatcher{
								pos:        position{line: 819, col: 25, offset: 28388},
								val:        "\\\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 819, col: 30, offset: 28393},
							val:        "**",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 819, col: 35, offset: 28398},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 819, col: 44, offset: 28407},
								name: "DoubleQuoteBoldTextContent",
							},
						},
						&litMatcher{
							pos:        position{line: 819, col: 72, offset: 28435},
							val:        "**",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextContent",
			pos:  position{line: 823, col: 1, offset: 28560},
			expr: &seqExpr{
				pos: position{line: 823, col: 31, offset: 28590},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 823, col: 31, offset: 28590},
						name: "DoubleQuoteBoldTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 823, col: 58, offset: 28617},
						expr: &actionExpr{
							pos: position{line: 823, col: 59, offset: 28618},
							run: (*parser).callonDoubleQuoteBoldTextContent4,
							expr: &seqExpr{
								pos: position{line: 823, col: 59, offset: 28618},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 823, col: 59, offset: 28618},
										expr: &litMatcher{
											pos:        position{line: 823, col: 61, offset: 28620},
											val:        "**",
											ignoreCase: false,
										},
									},
									&labeledExpr{
										pos:   position{line: 823, col: 67, offset: 28626},
										label: "element",
										expr: &choiceExpr{
											pos: position{line: 823, col: 76, offset: 28635},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 823, col: 76, offset: 28635},
													name: "WS",
												},
												&ruleRefExpr{
													pos:  position{line: 823, col: 81, offset: 28640},
													name: "DoubleQuoteBoldTextElement",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElement",
			pos:  position{line: 827, col: 1, offset: 28732},
			expr: &actionExpr{
				pos: position{line: 827, col: 31, offset: 28762},
				run: (*parser).callonDoubleQuoteBoldTextElement1,
				expr: &seqExpr{
					pos: position{line: 827, col: 31, offset: 28762},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 827, col: 31, offset: 28762},
							expr: &ruleRefExpr{
								pos:  position{line: 827, col: 32, offset: 28763},
								name: "NEWLINE",
							},
						},
						&labeledExpr{
							pos:   position{line: 827, col: 40, offset: 28771},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 827, col: 49, offset: 28780},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 827, col: 49, offset: 28780},
										name: "SingleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 828, col: 11, offset: 28811},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 829, col: 11, offset: 28833},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 830, col: 11, offset: 28857},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 831, col: 11, offset: 28881},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 832, col: 11, offset: 28907},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 833, col: 11, offset: 28930},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 834, col: 11, offset: 28946},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 835, col: 11, offset: 28969},
										name: "NonDoubleQuoteBoldText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonDoubleQuoteBoldText",
			pos:  position{line: 839, col: 1, offset: 29125},
			expr: &actionExpr{
				pos: position{line: 839, col: 27, offset: 29151},
				run: (*parser).callonNonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 839, col: 27, offset: 29151},
					exprs: []interface{}{
						&anyMatcher{
							line: 839, col: 28, offset: 29152,
						},
						&zeroOrMoreExpr{
							pos: position{line: 839, col: 31, offset: 29155},
							expr: &seqExpr{
								pos: position{line: 839, col: 32, offset: 29156},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 839, col: 32, offset: 29156},
										expr: &litMatcher{
											pos:        position{line: 839, col: 33, offset: 29157},
											val:        "**",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 839, col: 38, offset: 29162},
										expr: &ruleRefExpr{
											pos:  position{line: 839, col: 39, offset: 29163},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 839, col: 42, offset: 29166},
										expr: &litMatcher{
											pos:        position{line: 839, col: 43, offset: 29167},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 839, col: 47, offset: 29171},
										expr: &litMatcher{
											pos:        position{line: 839, col: 48, offset: 29172},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 839, col: 52, offset: 29176},
										expr: &ruleRefExpr{
											pos:  position{line: 839, col: 53, offset: 29177},
											name: "NEWLINE",
										},
									},
									&anyMatcher{
										line: 839, col: 61, offset: 29185,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldText",
			pos:  position{line: 843, col: 1, offset: 29245},
			expr: &choiceExpr{
				pos: position{line: 843, col: 24, offset: 29268},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 843, col: 24, offset: 29268},
						run: (*parser).callonSingleQuoteBoldText2,
						expr: &seqExpr{
							pos: position{line: 843, col: 24, offset: 29268},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 843, col: 24, offset: 29268},
									expr: &litMatcher{
										pos:        position{line: 843, col: 25, offset: 29269},
										val:        "\\",
										ignoreCase: false,
									},
								},
								&notExpr{
									pos: position{line: 843, col: 29, offset: 29273},
									expr: &litMatcher{
										pos:        position{line: 843, col: 30, offset: 29274},
										val:        "**",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 843, col: 35, offset: 29279},
									val:        "*",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 843, col: 39, offset: 29283},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 843, col: 48, offset: 29292},
										name: "SingleQuoteBoldTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 843, col: 76, offset: 29320},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 845, col: 5, offset: 29500},
						run: (*parser).callonSingleQuoteBoldText12,
						expr: &seqExpr{
							pos: position{line: 845, col: 5, offset: 29500},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 845, col: 5, offset: 29500},
									expr: &litMatcher{
										pos:        position{line: 845, col: 6, offset: 29501},
										val:        "\\\\",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 845, col: 11, offset: 29506},
									val:        "**",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 845, col: 16, offset: 29511},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 845, col: 25, offset: 29520},
										name: "SingleQuoteBoldTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 845, col: 53, offset: 29548},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextContent",
			pos:  position{line: 849, col: 1, offset: 29806},
			expr: &seqExpr{
				pos: position{line: 849, col: 31, offset: 29836},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 849, col: 31, offset: 29836},
						expr: &ruleRefExpr{
							pos:  position{line: 849, col: 32, offset: 29837},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 849, col: 35, offset: 29840},
						name: "SingleQuoteBoldTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 849, col: 62, offset: 29867},
						expr: &actionExpr{
							pos: position{line: 849, col: 63, offset: 29868},
							run: (*parser).callonSingleQuoteBoldTextContent6,
							expr: &seqExpr{
								pos: position{line: 849, col: 63, offset: 29868},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 849, col: 63, offset: 29868},
										expr: &seqExpr{
											pos: position{line: 849, col: 65, offset: 29870},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 849, col: 65, offset: 29870},
													val:        "*",
													ignoreCase: false,
												},
												&notExpr{
													pos: position{line: 849, col: 69, offset: 29874},
													expr: &ruleRefExpr{
														pos:  position{line: 849, col: 70, offset: 29875},
														name: "Alphanum",
													},
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 849, col: 80, offset: 29885},
										label: "spaces",
										expr: &zeroOrMoreExpr{
											pos: position{line: 849, col: 88, offset: 29893},
											expr: &ruleRefExpr{
												pos:  position{line: 849, col: 88, offset: 29893},
												name: "WS",
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 849, col: 93, offset: 29898},
										label: "element",
										expr: &ruleRefExpr{
											pos:  position{line: 849, col: 102, offset: 29907},
											name: "SingleQuoteBoldTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElement",
			pos:  position{line: 853, col: 1, offset: 29998},
			expr: &actionExpr{
				pos: position{line: 853, col: 31, offset: 30028},
				run: (*parser).callonSingleQuoteBoldTextElement1,
				expr: &seqExpr{
					pos: position{line: 853, col: 31, offset: 30028},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 853, col: 31, offset: 30028},
							expr: &ruleRefExpr{
								pos:  position{line: 853, col: 32, offset: 30029},
								name: "NEWLINE",
							},
						},
						&labeledExpr{
							pos:   position{line: 853, col: 40, offset: 30037},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 853, col: 49, offset: 30046},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 853, col: 49, offset: 30046},
										name: "DoubleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 854, col: 11, offset: 30076},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 855, col: 11, offset: 30098},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 856, col: 11, offset: 30122},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 857, col: 11, offset: 30146},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 858, col: 11, offset: 30172},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 859, col: 11, offset: 30195},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 860, col: 11, offset: 30211},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 861, col: 11, offset: 30234},
										name: "NonSingleQuoteBoldText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonSingleQuoteBoldText",
			pos:  position{line: 865, col: 1, offset: 30390},
			expr: &actionExpr{
				pos: position{line: 865, col: 27, offset: 30416},
				run: (*parser).callonNonSingleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 865, col: 27, offset: 30416},
					exprs: []interface{}{
						&anyMatcher{
							line: 865, col: 28, offset: 30417,
						},
						&zeroOrMoreExpr{
							pos: position{line: 865, col: 31, offset: 30420},
							expr: &seqExpr{
								pos: position{line: 865, col: 32, offset: 30421},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 865, col: 32, offset: 30421},
										expr: &litMatcher{
											pos:        position{line: 865, col: 33, offset: 30422},
											val:        "*",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 865, col: 37, offset: 30426},
										expr: &ruleRefExpr{
											pos:  position{line: 865, col: 38, offset: 30427},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 865, col: 41, offset: 30430},
										expr: &litMatcher{
											pos:        position{line: 865, col: 42, offset: 30431},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 865, col: 46, offset: 30435},
										expr: &litMatcher{
											pos:        position{line: 865, col: 47, offset: 30436},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 865, col: 51, offset: 30440},
										expr: &ruleRefExpr{
											pos:  position{line: 865, col: 52, offset: 30441},
											name: "NEWLINE",
										},
									},
									&anyMatcher{
										line: 865, col: 60, offset: 30449,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedBoldText",
			pos:  position{line: 869, col: 1, offset: 30509},
			expr: &choiceExpr{
				pos: position{line: 870, col: 5, offset: 30533},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 870, col: 5, offset: 30533},
						run: (*parser).callonEscapedBoldText2,
						expr: &seqExpr{
							pos: position{line: 870, col: 5, offset: 30533},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 870, col: 5, offset: 30533},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 870, col: 18, offset: 30546},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 870, col: 40, offset: 30568},
									val:        "**",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 870, col: 45, offset: 30573},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 870, col: 54, offset: 30582},
										name: "DoubleQuoteBoldTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 870, col: 82, offset: 30610},
									val:        "**",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 872, col: 9, offset: 30766},
						run: (*parser).callonEscapedBoldText10,
						expr: &seqExpr{
							pos: position{line: 872, col: 9, offset: 30766},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 872, col: 9, offset: 30766},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 872, col: 22, offset: 30779},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 872, col: 44, offset: 30801},
									val:        "**",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 872, col: 49, offset: 30806},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 872, col: 58, offset: 30815},
										name: "SingleQuoteBoldTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 872, col: 86, offset: 30843},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 875, col: 9, offset: 31042},
						run: (*parser).callonEscapedBoldText18,
						expr: &seqExpr{
							pos: position{line: 875, col: 9, offset: 31042},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 875, col: 9, offset: 31042},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 875, col: 22, offset: 31055},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 875, col: 44, offset: 31077},
									val:        "*",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 875, col: 48, offset: 31081},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 875, col: 57, offset: 31090},
										name: "SingleQuoteBoldTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 875, col: 85, offset: 31118},
									val:        "*",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ItalicText",
			pos:  position{line: 883, col: 1, offset: 31325},
			expr: &choiceExpr{
				pos: position{line: 883, col: 15, offset: 31339},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 883, col: 15, offset: 31339},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 883, col: 39, offset: 31363},
						name: "SingleQuoteItalicText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicText",
			pos:  position{line: 885, col: 1, offset: 31386},
			expr: &actionExpr{
				pos: position{line: 885, col: 26, offset: 31411},
				run: (*parser).callonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 885, col: 26, offset: 31411},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 885, col: 26, offset: 31411},
							expr: &litMatcher{
								pos:        position{line: 885, col: 27, offset: 31412},
								val:        "\\\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 885, col: 32, offset: 31417},
							val:        "__",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 885, col: 37, offset: 31422},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 885, col: 46, offset: 31431},
								name: "DoubleQuoteItalicTextContent",
							},
						},
						&litMatcher{
							pos:        position{line: 885, col: 76, offset: 31461},
							val:        "__",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextContent",
			pos:  position{line: 889, col: 1, offset: 31587},
			expr: &seqExpr{
				pos: position{line: 889, col: 33, offset: 31619},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 889, col: 33, offset: 31619},
						name: "DoubleQuoteItalicTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 889, col: 62, offset: 31648},
						expr: &actionExpr{
							pos: position{line: 889, col: 63, offset: 31649},
							run: (*parser).callonDoubleQuoteItalicTextContent4,
							expr: &seqExpr{
								pos: position{line: 889, col: 63, offset: 31649},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 889, col: 63, offset: 31649},
										expr: &litMatcher{
											pos:        position{line: 889, col: 65, offset: 31651},
											val:        "__",
											ignoreCase: false,
										},
									},
									&labeledExpr{
										pos:   position{line: 889, col: 71, offset: 31657},
										label: "element",
										expr: &choiceExpr{
											pos: position{line: 889, col: 80, offset: 31666},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 889, col: 80, offset: 31666},
													name: "WS",
												},
												&ruleRefExpr{
													pos:  position{line: 889, col: 85, offset: 31671},
													name: "DoubleQuoteItalicTextElement",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElement",
			pos:  position{line: 893, col: 1, offset: 31765},
			expr: &actionExpr{
				pos: position{line: 893, col: 33, offset: 31797},
				run: (*parser).callonDoubleQuoteItalicTextElement1,
				expr: &seqExpr{
					pos: position{line: 893, col: 33, offset: 31797},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 893, col: 33, offset: 31797},
							expr: &ruleRefExpr{
								pos:  position{line: 893, col: 34, offset: 31798},
								name: "NEWLINE",
							},
						},
						&labeledExpr{
							pos:   position{line: 893, col: 42, offset: 31806},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 893, col: 51, offset: 31815},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 893, col: 51, offset: 31815},
										name: "SingleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 894, col: 11, offset: 31848},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 895, col: 11, offset: 31868},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 896, col: 11, offset: 31892},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 897, col: 11, offset: 31916},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 898, col: 11, offset: 31942},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 899, col: 11, offset: 31965},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 900, col: 11, offset: 31981},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 901, col: 11, offset: 32004},
										name: "NonDoubleQuoteItalicText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonDoubleQuoteItalicText",
			pos:  position{line: 905, col: 1, offset: 32162},
			expr: &actionExpr{
				pos: position{line: 905, col: 29, offset: 32190},
				run: (*parser).callonNonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 905, col: 29, offset: 32190},
					exprs: []interface{}{
						&anyMatcher{
							line: 905, col: 30, offset: 32191,
						},
						&zeroOrMoreExpr{
							pos: position{line: 905, col: 33, offset: 32194},
							expr: &seqExpr{
								pos: position{line: 905, col: 34, offset: 32195},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 905, col: 34, offset: 32195},
										expr: &litMatcher{
											pos:        position{line: 905, col: 35, offset: 32196},
											val:        "__",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 905, col: 40, offset: 32201},
										expr: &litMatcher{
											pos:        position{line: 905, col: 41, offset: 32202},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 905, col: 45, offset: 32206},
										expr: &litMatcher{
											pos:        position{line: 905, col: 46, offset: 32207},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 905, col: 50, offset: 32211},
										expr: &ruleRefExpr{
											pos:  position{line: 905, col: 51, offset: 32212},
											name: "NEWLINE",
										},
									},
									&anyMatcher{
										line: 905, col: 59, offset: 32220,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicText",
			pos:  position{line: 909, col: 1, offset: 32280},
			expr: &choiceExpr{
				pos: position{line: 909, col: 26, offset: 32305},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 909, col: 26, offset: 32305},
						run: (*parser).callonSingleQuoteItalicText2,
						expr: &seqExpr{
							pos: position{line: 909, col: 26, offset: 32305},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 909, col: 26, offset: 32305},
									expr: &litMatcher{
										pos:        position{line: 909, col: 27, offset: 32306},
										val:        "\\",
										ignoreCase: false,
									},
								},
								&notExpr{
									pos: position{line: 909, col: 31, offset: 32310},
									expr: &litMatcher{
										pos:        position{line: 909, col: 32, offset: 32311},
										val:        "__",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 909, col: 37, offset: 32316},
									val:        "_",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 909, col: 41, offset: 32320},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 909, col: 50, offset: 32329},
										name: "SingleQuoteItalicTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 909, col: 80, offset: 32359},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 911, col: 5, offset: 32541},
						run: (*parser).callonSingleQuoteItalicText12,
						expr: &seqExpr{
							pos: position{line: 911, col: 5, offset: 32541},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 911, col: 5, offset: 32541},
									expr: &litMatcher{
										pos:        position{line: 911, col: 6, offset: 32542},
										val:        "\\\\",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 911, col: 11, offset: 32547},
									val:        "__",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 911, col: 16, offset: 32552},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 911, col: 25, offset: 32561},
										name: "SingleQuoteItalicTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 911, col: 55, offset: 32591},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextContent",
			pos:  position{line: 915, col: 1, offset: 32853},
			expr: &seqExpr{
				pos: position{line: 915, col: 33, offset: 32885},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 915, col: 33, offset: 32885},
						expr: &ruleRefExpr{
							pos:  position{line: 915, col: 34, offset: 32886},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 915, col: 37, offset: 32889},
						name: "SingleQuoteItalicTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 915, col: 66, offset: 32918},
						expr: &actionExpr{
							pos: position{line: 915, col: 67, offset: 32919},
							run: (*parser).callonSingleQuoteItalicTextContent6,
							expr: &seqExpr{
								pos: position{line: 915, col: 67, offset: 32919},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 915, col: 67, offset: 32919},
										expr: &seqExpr{
											pos: position{line: 915, col: 69, offset: 32921},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 915, col: 69, offset: 32921},
													val:        "_",
													ignoreCase: false,
												},
												&notExpr{
													pos: position{line: 915, col: 73, offset: 32925},
													expr: &ruleRefExpr{
														pos:  position{line: 915, col: 74, offset: 32926},
														name: "Alphanum",
													},
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 915, col: 84, offset: 32936},
										label: "spaces",
										expr: &zeroOrMoreExpr{
											pos: position{line: 915, col: 92, offset: 32944},
											expr: &ruleRefExpr{
												pos:  position{line: 915, col: 92, offset: 32944},
												name: "WS",
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 915, col: 97, offset: 32949},
										label: "element",
										expr: &ruleRefExpr{
											pos:  position{line: 915, col: 106, offset: 32958},
											name: "SingleQuoteItalicTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElement",
			pos:  position{line: 919, col: 1, offset: 33051},
			expr: &actionExpr{
				pos: position{line: 919, col: 33, offset: 33083},
				run: (*parser).callonSingleQuoteItalicTextElement1,
				expr: &seqExpr{
					pos: position{line: 919, col: 33, offset: 33083},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 919, col: 33, offset: 33083},
							expr: &ruleRefExpr{
								pos:  position{line: 919, col: 34, offset: 33084},
								name: "NEWLINE",
							},
						},
						&labeledExpr{
							pos:   position{line: 919, col: 42, offset: 33092},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 919, col: 51, offset: 33101},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 919, col: 51, offset: 33101},
										name: "DoubleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 920, col: 11, offset: 33133},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 921, col: 11, offset: 33153},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 922, col: 11, offset: 33177},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 923, col: 11, offset: 33201},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 924, col: 11, offset: 33227},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 925, col: 11, offset: 33250},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 926, col: 11, offset: 33266},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 927, col: 11, offset: 33289},
										name: "NonSingleQuoteItalicText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonSingleQuoteItalicText",
			pos:  position{line: 931, col: 1, offset: 33447},
			expr: &actionExpr{
				pos: position{line: 931, col: 29, offset: 33475},
				run: (*parser).callonNonSingleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 931, col: 29, offset: 33475},
					exprs: []interface{}{
						&anyMatcher{
							line: 931, col: 30, offset: 33476,
						},
						&zeroOrMoreExpr{
							pos: position{line: 931, col: 33, offset: 33479},
							expr: &seqExpr{
								pos: position{line: 931, col: 34, offset: 33480},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 931, col: 34, offset: 33480},
										expr: &litMatcher{
											pos:        position{line: 931, col: 35, offset: 33481},
											val:        "_",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 931, col: 39, offset: 33485},
										expr: &ruleRefExpr{
											pos:  position{line: 931, col: 40, offset: 33486},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 931, col: 43, offset: 33489},
										expr: &litMatcher{
											pos:        position{line: 931, col: 44, offset: 33490},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 931, col: 48, offset: 33494},
										expr: &litMatcher{
											pos:        position{line: 931, col: 49, offset: 33495},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 931, col: 53, offset: 33499},
										expr: &ruleRefExpr{
											pos:  position{line: 931, col: 54, offset: 33500},
											name: "NEWLINE",
										},
									},
									&anyMatcher{
										line: 931, col: 62, offset: 33508,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedItalicText",
			pos:  position{line: 935, col: 1, offset: 33568},
			expr: &choiceExpr{
				pos: position{line: 936, col: 5, offset: 33594},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 936, col: 5, offset: 33594},
						run: (*parser).callonEscapedItalicText2,
						expr: &seqExpr{
							pos: position{line: 936, col: 5, offset: 33594},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 936, col: 5, offset: 33594},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 936, col: 18, offset: 33607},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 936, col: 40, offset: 33629},
									val:        "__",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 936, col: 45, offset: 33634},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 936, col: 54, offset: 33643},
										name: "DoubleQuoteItalicTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 936, col: 84, offset: 33673},
									val:        "__",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 938, col: 9, offset: 33829},
						run: (*parser).callonEscapedItalicText10,
						expr: &seqExpr{
							pos: position{line: 938, col: 9, offset: 33829},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 938, col: 9, offset: 33829},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 938, col: 22, offset: 33842},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 938, col: 44, offset: 33864},
									val:        "__",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 938, col: 49, offset: 33869},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 938, col: 58, offset: 33878},
										name: "SingleQuoteItalicTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 938, col: 88, offset: 33908},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 941, col: 9, offset: 34107},
						run: (*parser).callonEscapedItalicText18,
						expr: &seqExpr{
							pos: position{line: 941, col: 9, offset: 34107},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 941, col: 9, offset: 34107},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 941, col: 22, offset: 34120},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 941, col: 44, offset: 34142},
									val:        "_",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 941, col: 48, offset: 34146},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 941, col: 57, offset: 34155},
										name: "SingleQuoteItalicTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 941, col: 87, offset: 34185},
									val:        "_",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MonospaceText",
			pos:  position{line: 948, col: 1, offset: 34394},
			expr: &choiceExpr{
				pos: position{line: 948, col: 18, offset: 34411},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 948, col: 18, offset: 34411},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 948, col: 45, offset: 34438},
						name: "SingleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceText",
			pos:  position{line: 950, col: 1, offset: 34464},
			expr: &actionExpr{
				pos: position{line: 950, col: 29, offset: 34492},
				run: (*parser).callonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 950, col: 29, offset: 34492},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 950, col: 29, offset: 34492},
							expr: &litMatcher{
								pos:        position{line: 950, col: 30, offset: 34493},
								val:        "\\\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 950, col: 35, offset: 34498},
							val:        "``",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 950, col: 40, offset: 34503},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 950, col: 49, offset: 34512},
								name: "DoubleQuoteMonospaceTextContent",
							},
						},
						&litMatcher{
							pos:        position{line: 950, col: 82, offset: 34545},
							val:        "``",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextContent",
			pos:  position{line: 954, col: 1, offset: 34674},
			expr: &seqExpr{
				pos: position{line: 954, col: 36, offset: 34709},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 954, col: 36, offset: 34709},
						name: "DoubleQuoteMonospaceTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 954, col: 68, offset: 34741},
						expr: &actionExpr{
							pos: position{line: 954, col: 69, offset: 34742},
							run: (*parser).callonDoubleQuoteMonospaceTextContent4,
							expr: &seqExpr{
								pos: position{line: 954, col: 69, offset: 34742},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 954, col: 69, offset: 34742},
										expr: &litMatcher{
											pos:        position{line: 954, col: 71, offset: 34744},
											val:        "``",
											ignoreCase: false,
										},
									},
									&labeledExpr{
										pos:   position{line: 954, col: 77, offset: 34750},
										label: "element",
										expr: &choiceExpr{
											pos: position{line: 954, col: 86, offset: 34759},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 954, col: 86, offset: 34759},
													name: "WS",
												},
												&ruleRefExpr{
													pos:  position{line: 954, col: 91, offset: 34764},
													name: "DoubleQuoteMonospaceTextElement",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElement",
			pos:  position{line: 958, col: 1, offset: 34861},
			expr: &actionExpr{
				pos: position{line: 958, col: 36, offset: 34896},
				run: (*parser).callonDoubleQuoteMonospaceTextElement1,
				expr: &seqExpr{
					pos: position{line: 958, col: 36, offset: 34896},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 958, col: 36, offset: 34896},
							expr: &ruleRefExpr{
								pos:  position{line: 958, col: 37, offset: 34897},
								name: "NEWLINE",
							},
						},
						&labeledExpr{
							pos:   position{line: 958, col: 45, offset: 34905},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 958, col: 54, offset: 34914},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 958, col: 54, offset: 34914},
										name: "SingleQuoteMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 959, col: 11, offset: 34950},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 960, col: 11, offset: 34969},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 961, col: 11, offset: 34991},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 962, col: 11, offset: 35015},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 963, col: 11, offset: 35041},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 964, col: 11, offset: 35064},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 965, col: 11, offset: 35080},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 966, col: 11, offset: 35103},
										name: "NonDoubleQuoteMonospaceText",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NonDoubleQuoteMonospaceText",
			pos:  position{line: 970, col: 1, offset: 35264},
			expr: &actionExpr{
				pos: position{line: 970, col: 32, offset: 35295},
				run: (*parser).callonNonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 970, col: 32, offset: 35295},
					exprs: []interface{}{
						&anyMatcher{
							line: 970, col: 33, offset: 35296,
						},
						&zeroOrMoreExpr{
							pos: position{line: 970, col: 36, offset: 35299},
							expr: &seqExpr{
								pos: position{line: 970, col: 37, offset: 35300},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 970, col: 37, offset: 35300},
										expr: &litMatcher{
											pos:        position{line: 970, col: 38, offset: 35301},
											val:        "``",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 970, col: 43, offset: 35306},
										expr: &ruleRefExpr{
											pos:  position{line: 970, col: 44, offset: 35307},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 970, col: 47, offset: 35310},
										expr: &litMatcher{
											pos:        position{line: 970, col: 48, offset: 35311},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 970, col: 52, offset: 35315},
										expr: &litMatcher{
											pos:        position{line: 970, col: 53, offset: 35316},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 970, col: 57, offset: 35320},
										expr: &ruleRefExpr{
											pos:  position{line: 970, col: 58, offset: 35321},
											name: "NEWLINE",
										},
									},
									&anyMatcher{
										line: 970, col: 66, offset: 35329,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceText",
			pos:  position{line: 974, col: 1, offset: 35389},
			expr: &choiceExpr{
				pos: position{line: 974, col: 29, offset: 35417},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 974, col: 29, offset: 35417},
						run: (*parser).callonSingleQuoteMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 974, col: 29, offset: 35417},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 974, col: 29, offset: 35417},
									expr: &litMatcher{
										pos:        position{line: 974, col: 30, offset: 35418},
										val:        "\\",
										ignoreCase: false,
									},
								},
								&notExpr{
									pos: position{line: 974, col: 34, offset: 35422},
									expr: &litMatcher{
										pos:        position{line: 974, col: 35, offset: 35423},
										val:        "``",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 974, col: 40, offset: 35428},
									val:        "`",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 974, col: 44, offset: 35432},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 974, col: 53, offset: 35441},
										name: "SingleQuoteMonospaceTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 974, col: 86, offset: 35474},
									val:        "`",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 976, col: 5, offset: 35659},
						run: (*parser).callonSingleQuoteMonospaceText12,
						expr: &seqExpr{
							pos: position{line: 976, col: 5, offset: 35659},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 976, col: 5, offset: 35659},
									expr: &litMatcher{
										pos:        position{line: 976, col: 6, offset: 35660},
										val:        "\\\\",
										ignoreCase: false,
									},
								},
								&litMatcher{
									pos:        position{line: 976, col: 11, offset: 35665},
									val:        "``",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 976, col: 16, offset: 35670},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 976, col: 25, offset: 35679},
										name: "SingleQuoteMonospaceTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 976, col: 58, offset: 35712},
									val:        "`",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextContent",
			pos:  position{line: 980, col: 1, offset: 35980},
			expr: &seqExpr{
				pos: position{line: 980, col: 36, offset: 36015},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 980, col: 36, offset: 36015},
						expr: &ruleRefExpr{
							pos:  position{line: 980, col: 37, offset: 36016},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 980, col: 40, offset: 36019},
						name: "SingleQuoteMonospaceTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 980, col: 72, offset: 36051},
						expr: &actionExpr{
							pos: position{line: 980, col: 73, offset: 36052},
							run: (*parser).callonSingleQuoteMonospaceTextContent6,
							expr: &seqExpr{
								pos: position{line: 980, col: 73, offset: 36052},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 980, col: 73, offset: 36052},
										expr: &seqExpr{
											pos: position{line: 980, col: 75, offset: 36054},
											exprs: []interface{}{
												&litMatcher{
													pos:        position{line: 980, col: 75, offset: 36054},
													val:        "`",
													ignoreCase: false,
												},
												&notExpr{
													pos: position{line: 980, col: 79, offset: 36058},
													expr: &ruleRefExpr{
														pos:  position{line: 980, col: 80, offset: 36059},
														name: "Alphanum",
													},
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 980, col: 90, offset: 36069},
										label: "spaces",
										expr: &zeroOrMoreExpr{
											pos: position{line: 980, col: 98, offset: 36077},
											expr: &ruleRefExpr{
												pos:  position{line: 980, col: 98, offset: 36077},
												name: "WS",
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 980, col: 103, offset: 36082},
										label: "element",
										expr: &ruleRefExpr{
											pos:  position{line: 980, col: 112, offset: 36091},
											name: "SingleQuoteMonospaceTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElement",
			pos:  position{line: 984, col: 1, offset: 36187},
			expr: &actionExpr{
				pos: position{line: 984, col: 37, offset: 36223},
				run: (*parser).callonSingleQuoteMonospaceTextElement1,
				expr: &labeledExpr{
					pos:   position{line: 984, col: 37, offset: 36223},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 984, col: 46, offset: 36232},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 984, col: 46, offset: 36232},
								name: "NEWLINE",
							},
							&ruleRefExpr{
								pos:  position{line: 985, col: 11, offset: 36270},
								name: "DoubleQuoteMonospaceText",
							},
							&ruleRefExpr{
								pos:  position{line: 986, col: 11, offset: 36306},
								name: "BoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 987, col: 11, offset: 36326},
								name: "ItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 988, col: 11, offset: 36347},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 989, col: 11, offset: 36371},
								name: "SuperscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 990, col: 11, offset: 36397},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 991, col: 11, offset: 36420},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 992, col: 11, offset: 36436},
								name: "Passthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 993, col: 11, offset: 36459},
								name: "NonSingleQuoteMonospaceText",
							},
						},
					},
				},
			},
		},
		{
			name: "NonSingleQuoteMonospaceText",
			pos:  position{line: 997, col: 1, offset: 36620},
			expr: &actionExpr{
				pos: position{line: 997, col: 32, offset: 36651},
				run: (*parser).callonNonSingleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 997, col: 32, offset: 36651},
					exprs: []interface{}{
						&anyMatcher{
							line: 997, col: 33, offset: 36652,
						},
						&zeroOrMoreExpr{
							pos: position{line: 997, col: 36, offset: 36655},
							expr: &seqExpr{
								pos: position{line: 997, col: 37, offset: 36656},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 997, col: 37, offset: 36656},
										expr: &ruleRefExpr{
											pos:  position{line: 997, col: 38, offset: 36657},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 997, col: 41, offset: 36660},
										expr: &litMatcher{
											pos:        position{line: 997, col: 42, offset: 36661},
											val:        "`",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 997, col: 46, offset: 36665},
										expr: &litMatcher{
											pos:        position{line: 997, col: 47, offset: 36666},
											val:        "^",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 997, col: 51, offset: 36670},
										expr: &litMatcher{
											pos:        position{line: 997, col: 52, offset: 36671},
											val:        "~",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 997, col: 56, offset: 36675},
										expr: &ruleRefExpr{
											pos:  position{line: 997, col: 57, offset: 36676},
											name: "NEWLINE",
										},
									},
									&anyMatcher{
										line: 997, col: 65, offset: 36684,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMonospaceText",
			pos:  position{line: 1001, col: 1, offset: 36765},
			expr: &choiceExpr{
				pos: position{line: 1002, col: 5, offset: 36794},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1002, col: 5, offset: 36794},
						run: (*parser).callonEscapedMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1002, col: 5, offset: 36794},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1002, col: 5, offset: 36794},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1002, col: 18, offset: 36807},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1002, col: 40, offset: 36829},
									val:        "``",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1002, col: 45, offset: 36834},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1002, col: 54, offset: 36843},
										name: "DoubleQuoteMonospaceTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1002, col: 87, offset: 36876},
									val:        "``",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1004, col: 9, offset: 37032},
						run: (*parser).callonEscapedMonospaceText10,
						expr: &seqExpr{
							pos: position{line: 1004, col: 9, offset: 37032},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1004, col: 9, offset: 37032},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1004, col: 22, offset: 37045},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1004, col: 44, offset: 37067},
									val:        "``",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1004, col: 49, offset: 37072},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1004, col: 58, offset: 37081},
										name: "SingleQuoteMonospaceTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1004, col: 91, offset: 37114},
									val:        "`",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1007, col: 9, offset: 37313},
						run: (*parser).callonEscapedMonospaceText18,
						expr: &seqExpr{
							pos: position{line: 1007, col: 9, offset: 37313},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1007, col: 9, offset: 37313},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1007, col: 22, offset: 37326},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1007, col: 44, offset: 37348},
									val:        "`",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1007, col: 48, offset: 37352},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1007, col: 57, offset: 37361},
										name: "SingleQuoteMonospaceTextContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1007, col: 90, offset: 37394},
									val:        "`",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptText",
			pos:  position{line: 1011, col: 1, offset: 37543},
			expr: &actionExpr{
				pos: position{line: 1011, col: 18, offset: 37560},
				run: (*parser).callonSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1011, col: 18, offset: 37560},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1011, col: 18, offset: 37560},
							expr: &litMatcher{
								pos:        position{line: 1011, col: 19, offset: 37561},
								val:        "\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 1011, col: 23, offset: 37565},
							val:        "~",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1011, col: 27, offset: 37569},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1011, col: 36, offset: 37578},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1011, col: 58, offset: 37600},
							val:        "~",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SubscriptTextElement",
			pos:  position{line: 1015, col: 1, offset: 37689},
			expr: &choiceExpr{
				pos: position{line: 1015, col: 25, offset: 37713},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1015, col: 25, offset: 37713},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1015, col: 38, offset: 37726},
						name: "NonSubscriptText",
					},
				},
			},
		},
		{
			name: "NonSubscriptText",
			pos:  position{line: 1017, col: 1, offset: 37745},
			expr: &actionExpr{
				pos: position{line: 1017, col: 21, offset: 37765},
				run: (*parser).callonNonSubscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1017, col: 21, offset: 37765},
					expr: &seqExpr{
						pos: position{line: 1017, col: 22, offset: 37766},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1017, col: 22, offset: 37766},
								expr: &ruleRefExpr{
									pos:  position{line: 1017, col: 23, offset: 37767},
									name: "NEWLINE",
								},
							},
							&notExpr{
								pos: position{line: 1017, col: 31, offset: 37775},
								expr: &ruleRefExpr{
									pos:  position{line: 1017, col: 32, offset: 37776},
									name: "WS",
								},
							},
							&notExpr{
								pos: position{line: 1017, col: 35, offset: 37779},
								expr: &litMatcher{
									pos:        position{line: 1017, col: 36, offset: 37780},
									val:        "~",
									ignoreCase: false,
								},
							},
							&anyMatcher{
								line: 1017, col: 40, offset: 37784,
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedSubscriptText",
			pos:  position{line: 1021, col: 1, offset: 37817},
			expr: &actionExpr{
				pos: position{line: 1021, col: 25, offset: 37841},
				run: (*parser).callonEscapedSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1021, col: 25, offset: 37841},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1021, col: 25, offset: 37841},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1021, col: 38, offset: 37854},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1021, col: 60, offset: 37876},
							val:        "~",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1021, col: 64, offset: 37880},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1021, col: 73, offset: 37889},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1021, col: 95, offset: 37911},
							val:        "~",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SuperscriptText",
			pos:  position{line: 1025, col: 1, offset: 38040},
			expr: &actionExpr{
				pos: position{line: 1025, col: 20, offset: 38059},
				run: (*parser).callonSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1025, col: 20, offset: 38059},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1025, col: 20, offset: 38059},
							expr: &litMatcher{
								pos:        position{line: 1025, col: 21, offset: 38060},
								val:        "\\",
								ignoreCase: false,
							},
						},
						&litMatcher{
							pos:        position{line: 1025, col: 25, offset: 38064},
							val:        "^",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1025, col: 29, offset: 38068},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1025, col: 38, offset: 38077},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1025, col: 62, offset: 38101},
							val:        "^",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "SuperscriptTextElement",
			pos:  position{line: 1029, col: 1, offset: 38192},
			expr: &choiceExpr{
				pos: position{line: 1029, col: 27, offset: 38218},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1029, col: 27, offset: 38218},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1029, col: 40, offset: 38231},
						name: "NonSuperscriptText",
					},
				},
			},
		},
		{
			name: "NonSuperscriptText",
			pos:  position{line: 1031, col: 1, offset: 38252},
			expr: &actionExpr{
				pos: position{line: 1031, col: 23, offset: 38274},
				run: (*parser).callonNonSuperscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1031, col: 23, offset: 38274},
					expr: &seqExpr{
						pos: position{line: 1031, col: 24, offset: 38275},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1031, col: 24, offset: 38275},
								expr: &ruleRefExpr{
									pos:  position{line: 1031, col: 25, offset: 38276},
									name: "NEWLINE",
								},
							},
							&notExpr{
								pos: position{line: 1031, col: 33, offset: 38284},
								expr: &ruleRefExpr{
									pos:  position{line: 1031, col: 34, offset: 38285},
									name: "WS",
								},
							},
							&notExpr{
								pos: position{line: 1031, col: 37, offset: 38288},
								expr: &litMatcher{
									pos:        position{line: 1031, col: 38, offset: 38289},
									val:        "^",
									ignoreCase: false,
								},
							},
							&anyMatcher{
								line: 1031, col: 42, offset: 38293,
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedSuperscriptText",
			pos:  position{line: 1035, col: 1, offset: 38326},
			expr: &actionExpr{
				pos: position{line: 1035, col: 27, offset: 38352},
				run: (*parser).callonEscapedSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1035, col: 27, offset: 38352},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1035, col: 27, offset: 38352},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1035, col: 40, offset: 38365},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1035, col: 62, offset: 38387},
							val:        "^",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1035, col: 66, offset: 38391},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1035, col: 75, offset: 38400},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1035, col: 99, offset: 38424},
							val:        "^",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "Passthrough",
			pos:  position{line: 1042, col: 1, offset: 38660},
			expr: &choiceExpr{
				pos: position{line: 1042, col: 16, offset: 38675},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1042, col: 16, offset: 38675},
						name: "TriplePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1042, col: 40, offset: 38699},
						name: "SinglePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1042, col: 64, offset: 38723},
						name: "PassthroughMacro",
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughPrefix",
			pos:  position{line: 1044, col: 1, offset: 38741},
			expr: &litMatcher{
				pos:        position{line: 1044, col: 32, offset: 38772},
				val:        "+",
				ignoreCase: false,
			},
		},
		{
			name: "SinglePlusPassthrough",
			pos:  position{line: 1046, col: 1, offset: 38777},
			expr: &actionExpr{
				pos: position{line: 1046, col: 26, offset: 38802},
				run: (*parser).callonSinglePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1046, col: 26, offset: 38802},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1046, col: 26, offset: 38802},
							name: "SinglePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1046, col: 54, offset: 38830},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1046, col: 63, offset: 38839},
								name: "SinglePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1046, col: 93, offset: 38869},
							name: "SinglePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1046, col: 121, offset: 38897},
							expr: &ruleRefExpr{
								pos:  position{line: 1046, col: 122, offset: 38898},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughContent",
			pos:  position{line: 1050, col: 1, offset: 38997},
			expr: &choiceExpr{
				pos: position{line: 1050, col: 33, offset: 39029},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1050, col: 34, offset: 39030},
						run: (*parser).callonSinglePlusPassthroughContent2,
						expr: &seqExpr{
							pos: position{line: 1050, col: 34, offset: 39030},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1050, col: 35, offset: 39031},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1050, col: 35, offset: 39031},
											expr: &ruleRefExpr{
												pos:  position{line: 1050, col: 36, offset: 39032},
												name: "SinglePlusPassthroughPrefix",
											},
										},
										&notExpr{
											pos: position{line: 1050, col: 64, offset: 39060},
											expr: &ruleRefExpr{
												pos:  position{line: 1050, col: 65, offset: 39061},
												name: "WS",
											},
										},
										&notExpr{
											pos: position{line: 1050, col: 68, offset: 39064},
											expr: &ruleRefExpr{
												pos:  position{line: 1050, col: 69, offset: 39065},
												name: "NEWLINE",
											},
										},
										&anyMatcher{
											line: 1050, col: 77, offset: 39073,
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1050, col: 80, offset: 39076},
									expr: &seqExpr{
										pos: position{line: 1050, col: 81, offset: 39077},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1050, col: 81, offset: 39077},
												expr: &seqExpr{
													pos: position{line: 1050, col: 83, offset: 39079},
													exprs: []interface{}{
														&oneOrMoreExpr{
															pos: position{line: 1050, col: 83, offset: 39079},
															expr: &ruleRefExpr{
																pos:  position{line: 1050, col: 83, offset: 39079},
																name: "WS",
															},
														},
														&ruleRefExpr{
															pos:  position{line: 1050, col: 87, offset: 39083},
															name: "SinglePlusPassthroughPrefix",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 1050, col: 116, offset: 39112},
												expr: &ruleRefExpr{
													pos:  position{line: 1050, col: 117, offset: 39113},
													name: "SinglePlusPassthroughPrefix",
												},
											},
											&notExpr{
												pos: position{line: 1050, col: 145, offset: 39141},
												expr: &ruleRefExpr{
													pos:  position{line: 1050, col: 146, offset: 39142},
													name: "NEWLINE",
												},
											},
											&anyMatcher{
												line: 1050, col: 154, offset: 39150,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1052, col: 7, offset: 39292},
						run: (*parser).callonSinglePlusPassthroughContent24,
						expr: &seqExpr{
							pos: position{line: 1052, col: 8, offset: 39293},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1052, col: 8, offset: 39293},
									expr: &ruleRefExpr{
										pos:  position{line: 1052, col: 9, offset: 39294},
										name: "WS",
									},
								},
								&notExpr{
									pos: position{line: 1052, col: 12, offset: 39297},
									expr: &ruleRefExpr{
										pos:  position{line: 1052, col: 13, offset: 39298},
										name: "NEWLINE",
									},
								},
								&notExpr{
									pos: position{line: 1052, col: 21, offset: 39306},
									expr: &ruleRefExpr{
										pos:  position{line: 1052, col: 22, offset: 39307},
										name: "SinglePlusPassthroughPrefix",
									},
								},
								&anyMatcher{
									line: 1052, col: 50, offset: 39335,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughPrefix",
			pos:  position{line: 1056, col: 1, offset: 39417},
			expr: &litMatcher{
				pos:        position{line: 1056, col: 32, offset: 39448},
				val:        "+++",
				ignoreCase: false,
			},
		},
		{
			name: "TriplePlusPassthrough",
			pos:  position{line: 1058, col: 1, offset: 39455},
			expr: &actionExpr{
				pos: position{line: 1058, col: 26, offset: 39480},
				run: (*parser).callonTriplePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1058, col: 26, offset: 39480},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1058, col: 26, offset: 39480},
							name: "TriplePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1058, col: 54, offset: 39508},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1058, col: 63, offset: 39517},
								name: "TriplePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1058, col: 93, offset: 39547},
							name: "TriplePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1058, col: 121, offset: 39575},
							expr: &ruleRefExpr{
								pos:  position{line: 1058, col: 122, offset: 39576},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughContent",
			pos:  position{line: 1062, col: 1, offset: 39675},
			expr: &choiceExpr{
				pos: position{line: 1062, col: 33, offset: 39707},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1062, col: 34, offset: 39708},
						run: (*parser).callonTriplePlusPassthroughContent2,
						expr: &zeroOrMoreExpr{
							pos: position{line: 1062, col: 34, offset: 39708},
							expr: &seqExpr{
								pos: position{line: 1062, col: 35, offset: 39709},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1062, col: 35, offset: 39709},
										expr: &ruleRefExpr{
											pos:  position{line: 1062, col: 36, offset: 39710},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1062, col: 64, offset: 39738,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1064, col: 7, offset: 39903},
						run: (*parser).callonTriplePlusPassthroughContent8,
						expr: &zeroOrOneExpr{
							pos: position{line: 1064, col: 7, offset: 39903},
							expr: &seqExpr{
								pos: position{line: 1064, col: 8, offset: 39904},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1064, col: 8, offset: 39904},
										expr: &ruleRefExpr{
											pos:  position{line: 1064, col: 9, offset: 39905},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 1064, col: 12, offset: 39908},
										expr: &ruleRefExpr{
											pos:  position{line: 1064, col: 13, offset: 39909},
											name: "NEWLINE",
										},
									},
									&notExpr{
										pos: position{line: 1064, col: 21, offset: 39917},
										expr: &ruleRefExpr{
											pos:  position{line: 1064, col: 22, offset: 39918},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1064, col: 50, offset: 39946,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacro",
			pos:  position{line: 1068, col: 1, offset: 40029},
			expr: &choiceExpr{
				pos: position{line: 1068, col: 21, offset: 40049},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1068, col: 21, offset: 40049},
						run: (*parser).callonPassthroughMacro2,
						expr: &seqExpr{
							pos: position{line: 1068, col: 21, offset: 40049},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1068, col: 21, offset: 40049},
									val:        "pass:[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1068, col: 30, offset: 40058},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1068, col: 38, offset: 40066},
										expr: &ruleRefExpr{
											pos:  position{line: 1068, col: 39, offset: 40067},
											name: "PassthroughMacroCharacter",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1068, col: 67, offset: 40095},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1070, col: 5, offset: 40185},
						run: (*parser).callonPassthroughMacro9,
						expr: &seqExpr{
							pos: position{line: 1070, col: 5, offset: 40185},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1070, col: 5, offset: 40185},
									val:        "pass:q[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1070, col: 15, offset: 40195},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1070, col: 23, offset: 40203},
										expr: &choiceExpr{
											pos: position{line: 1070, col: 24, offset: 40204},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1070, col: 24, offset: 40204},
													name: "QuotedText",
												},
												&ruleRefExpr{
													pos:  position{line: 1070, col: 37, offset: 40217},
													name: "PassthroughMacroCharacter",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1070, col: 65, offset: 40245},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacroCharacter",
			pos:  position{line: 1074, col: 1, offset: 40335},
			expr: &choiceExpr{
				pos: position{line: 1074, col: 31, offset: 40365},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1074, col: 31, offset: 40365},
						name: "Alphanums",
					},
					&ruleRefExpr{
						pos:  position{line: 1074, col: 43, offset: 40377},
						name: "Spaces",
					},
					&actionExpr{
						pos: position{line: 1074, col: 52, offset: 40386},
						run: (*parser).callonPassthroughMacroCharacter4,
						expr: &seqExpr{
							pos: position{line: 1074, col: 53, offset: 40387},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1074, col: 53, offset: 40387},
									expr: &litMatcher{
										pos:        position{line: 1074, col: 54, offset: 40388},
										val:        "]",
										ignoreCase: false,
									},
								},
								&anyMatcher{
									line: 1074, col: 58, offset: 40392,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReference",
			pos:  position{line: 1081, col: 1, offset: 40562},
			expr: &choiceExpr{
				pos: position{line: 1081, col: 19, offset: 40580},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1081, col: 19, offset: 40580},
						run: (*parser).callonCrossReference2,
						expr: &seqExpr{
							pos: position{line: 1081, col: 19, offset: 40580},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1081, col: 19, offset: 40580},
									val:        "<<",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1081, col: 24, offset: 40585},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1081, col: 28, offset: 40589},
										name: "ID",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1081, col: 32, offset: 40593},
									expr: &ruleRefExpr{
										pos:  position{line: 1081, col: 32, offset: 40593},
										name: "WS",
									},
								},
								&litMatcher{
									pos:        position{line: 1081, col: 36, offset: 40597},
									val:        ",",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1081, col: 40, offset: 40601},
									label: "label",
									expr: &ruleRefExpr{
										pos:  position{line: 1081, col: 47, offset: 40608},
										name: "CrossReferenceLabel",
									},
								},
								&litMatcher{
									pos:        position{line: 1081, col: 68, offset: 40629},
									val:        ">>",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1083, col: 5, offset: 40704},
						run: (*parser).callonCrossReference13,
						expr: &seqExpr{
							pos: position{line: 1083, col: 5, offset: 40704},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1083, col: 5, offset: 40704},
									val:        "<<",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1083, col: 10, offset: 40709},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1083, col: 14, offset: 40713},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 1083, col: 18, offset: 40717},
									val:        ">>",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReferenceLabel",
			pos:  position{line: 1087, col: 1, offset: 40780},
			expr: &actionExpr{
				pos: position{line: 1087, col: 24, offset: 40803},
				run: (*parser).callonCrossReferenceLabel1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1087, col: 24, offset: 40803},
					expr: &choiceExpr{
						pos: position{line: 1087, col: 25, offset: 40804},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1087, col: 25, offset: 40804},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 1087, col: 37, offset: 40816},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 1087, col: 47, offset: 40826},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1087, col: 47, offset: 40826},
										expr: &litMatcher{
											pos:        position{line: 1087, col: 48, offset: 40827},
											val:        ">>",
											ignoreCase: false,
										},
									},
									&anyMatcher{
										line: 1087, col: 54, offset: 40833,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Link",
			pos:  position{line: 1094, col: 1, offset: 40975},
			expr: &actionExpr{
				pos: position{line: 1094, col: 9, offset: 40983},
				run: (*parser).callonLink1,
				expr: &labeledExpr{
					pos:   position{line: 1094, col: 9, offset: 40983},
					label: "link",
					expr: &choiceExpr{
						pos: position{line: 1094, col: 15, offset: 40989},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1094, col: 15, offset: 40989},
								name: "RelativeLink",
							},
							&ruleRefExpr{
								pos:  position{line: 1094, col: 30, offset: 41004},
								name: "ExternalLink",
							},
						},
					},
				},
			},
		},
		{
			name: "RelativeLink",
			pos:  position{line: 1099, col: 1, offset: 41111},
			expr: &actionExpr{
				pos: position{line: 1099, col: 17, offset: 41127},
				run: (*parser).callonRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1099, col: 17, offset: 41127},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1099, col: 17, offset: 41127},
							val:        "link:",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1099, col: 25, offset: 41135},
							label: "url",
							expr: &choiceExpr{
								pos: position{line: 1099, col: 30, offset: 41140},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1099, col: 30, offset: 41140},
										name: "Location",
									},
									&ruleRefExpr{
										pos:  position{line: 1099, col: 41, offset: 41151},
										name: "FileLocation",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1099, col: 55, offset: 41165},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1099, col: 73, offset: 41183},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalLink",
			pos:  position{line: 1103, col: 1, offset: 41301},
			expr: &actionExpr{
				pos: position{line: 1103, col: 17, offset: 41317},
				run: (*parser).callonExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1103, col: 17, offset: 41317},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1103, col: 17, offset: 41317},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1103, col: 22, offset: 41322},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1103, col: 32, offset: 41332},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1103, col: 49, offset: 41349},
								expr: &ruleRefExpr{
									pos:  position{line: 1103, col: 50, offset: 41350},
									name: "LinkAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LinkAttributes",
			pos:  position{line: 1107, col: 1, offset: 41443},
			expr: &choiceExpr{
				pos: position{line: 1107, col: 19, offset: 41461},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1107, col: 19, offset: 41461},
						name: "TextOnlyLinkAttributes",
					},
					&ruleRefExpr{
						pos:  position{line: 1107, col: 44, offset: 41486},
						name: "TextAndMoreLinkAttributes",
					},
				},
			},
		},
		{
			name: "TextOnlyLinkAttributes",
			pos:  position{line: 1109, col: 1, offset: 41513},
			expr: &actionExpr{
				pos: position{line: 1109, col: 27, offset: 41539},
				run: (*parser).callonTextOnlyLinkAttributes1,
				expr: &seqExpr{
					pos: position{line: 1109, col: 27, offset: 41539},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1109, col: 27, offset: 41539},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1109, col: 31, offset: 41543},
							label: "text",
							expr: &zeroOrOneExpr{
								pos: position{line: 1109, col: 36, offset: 41548},
								expr: &ruleRefExpr{
									pos:  position{line: 1109, col: 37, offset: 41549},
									name: "LinkTextWithCommaAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1109, col: 66, offset: 41578},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "LinkTextWithCommaAttribute",
			pos:  position{line: 1113, col: 1, offset: 41640},
			expr: &choiceExpr{
				pos: position{line: 1115, col: 5, offset: 41712},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1115, col: 5, offset: 41712},
						run: (*parser).callonLinkTextWithCommaAttribute2,
						expr: &seqExpr{
							pos: position{line: 1115, col: 5, offset: 41712},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1115, col: 5, offset: 41712},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1115, col: 10, offset: 41717},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 1115, col: 19, offset: 41726},
										expr: &seqExpr{
											pos: position{line: 1115, col: 20, offset: 41727},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1115, col: 20, offset: 41727},
													expr: &litMatcher{
														pos:        position{line: 1115, col: 21, offset: 41728},
														val:        "=",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 1115, col: 25, offset: 41732},
													expr: &litMatcher{
														pos:        position{line: 1115, col: 26, offset: 41733},
														val:        "]",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 1115, col: 30, offset: 41737},
													expr: &litMatcher{
														pos:        position{line: 1115, col: 31, offset: 41738},
														val:        "\"",
														ignoreCase: false,
													},
												},
												&choiceExpr{
													pos: position{line: 1115, col: 37, offset: 41744},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1115, col: 37, offset: 41744},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1115, col: 50, offset: 41757},
															name: "SimpleWord",
														},
														&ruleRefExpr{
															pos:  position{line: 1115, col: 63, offset: 41770},
															name: "Spaces",
														},
														&actionExpr{
															pos: position{line: 1115, col: 73, offset: 41780},
															run: (*parser).callonLinkTextWithCommaAttribute18,
															expr: &seqExpr{
																pos: position{line: 1115, col: 74, offset: 41781},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1115, col: 74, offset: 41781},
																		expr: &ruleRefExpr{
																			pos:  position{line: 1115, col: 75, offset: 41782},
																			name: "QuotedTextPrefix",
																		},
																	},
																	&anyMatcher{
																		line: 1115, col: 92, offset: 41799,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1117, col: 11, offset: 41868},
									val:        "\"",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 1117, col: 16, offset: 41873},
									expr: &ruleRefExpr{
										pos:  position{line: 1117, col: 16, offset: 41873},
										name: "Spaces",
									},
								},
								&andExpr{
									pos: position{line: 1117, col: 24, offset: 41881},
									expr: &notExpr{
										pos: position{line: 1117, col: 26, offset: 41883},
										expr: &litMatcher{
											pos:        position{line: 1117, col: 27, offset: 41884},
											val:        "=",
											ignoreCase: false,
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1121, col: 5, offset: 42009},
						run: (*parser).callonLinkTextWithCommaAttribute29,
						expr: &seqExpr{
							pos: position{line: 1121, col: 5, offset: 42009},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1121, col: 5, offset: 42009},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 1121, col: 14, offset: 42018},
										expr: &seqExpr{
											pos: position{line: 1121, col: 15, offset: 42019},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1121, col: 15, offset: 42019},
													expr: &litMatcher{
														pos:        position{line: 1121, col: 16, offset: 42020},
														val:        "=",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 1121, col: 20, offset: 42024},
													expr: &litMatcher{
														pos:        position{line: 1121, col: 21, offset: 42025},
														val:        "]",
														ignoreCase: false,
													},
												},
												&choiceExpr{
													pos: position{line: 1121, col: 26, offset: 42030},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1121, col: 26, offset: 42030},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1121, col: 39, offset: 42043},
															name: "SimpleWord",
														},
														&ruleRefExpr{
															pos:  position{line: 1121, col: 52, offset: 42056},
															name: "Spaces",
														},
														&actionExpr{
															pos: position{line: 1121, col: 62, offset: 42066},
															run: (*parser).callonLinkTextWithCommaAttribute42,
															expr: &seqExpr{
																pos: position{line: 1121, col: 63, offset: 42067},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1121, col: 63, offset: 42067},
																		expr: &ruleRefExpr{
																			pos:  position{line: 1121, col: 64, offset: 42068},
																			name: "QuotedTextPrefix",
																		},
																	},
																	&anyMatcher{
																		line: 1121, col: 81, offset: 42085,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&andExpr{
									pos: position{line: 1123, col: 11, offset: 42154},
									expr: &notExpr{
										pos: position{line: 1123, col: 13, offset: 42156},
										expr: &litMatcher{
											pos:        position{line: 1123, col: 14, offset: 42157},
											val:        "=",
											ignoreCase: false,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TextAndMoreLinkAttributes",
			pos:  position{line: 1128, col: 1, offset: 42237},
			expr: &actionExpr{
				pos: position{line: 1128, col: 30, offset: 42266},
				run: (*parser).callonTextAndMoreLinkAttributes1,
				expr: &seqExpr{
					pos: position{line: 1128, col: 30, offset: 42266},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1128, col: 30, offset: 42266},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1128, col: 34, offset: 42270},
							label: "text",
							expr: &zeroOrOneExpr{
								pos: position{line: 1128, col: 39, offset: 42275},
								expr: &ruleRefExpr{
									pos:  position{line: 1128, col: 40, offset: 42276},
									name: "LinkTextAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1128, col: 60, offset: 42296},
							expr: &litMatcher{
								pos:        position{line: 1128, col: 60, offset: 42296},
								val:        ",",
								ignoreCase: false,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1128, col: 65, offset: 42301},
							expr: &ruleRefExpr{
								pos:  position{line: 1128, col: 65, offset: 42301},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 1128, col: 69, offset: 42305},
							label: "otherattrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1128, col: 80, offset: 42316},
								expr: &ruleRefExpr{
									pos:  position{line: 1128, col: 81, offset: 42317},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1128, col: 100, offset: 42336},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "LinkTextAttribute",
			pos:  position{line: 1132, col: 1, offset: 42421},
			expr: &choiceExpr{
				pos: position{line: 1134, col: 5, offset: 42484},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1134, col: 5, offset: 42484},
						run: (*parser).callonLinkTextAttribute2,
						expr: &seqExpr{
							pos: position{line: 1134, col: 5, offset: 42484},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1134, col: 5, offset: 42484},
									val:        "\"",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1134, col: 10, offset: 42489},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 1134, col: 19, offset: 42498},
										expr: &seqExpr{
											pos: position{line: 1134, col: 20, offset: 42499},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1134, col: 20, offset: 42499},
													expr: &litMatcher{
														pos:        position{line: 1134, col: 21, offset: 42500},
														val:        "=",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 1134, col: 25, offset: 42504},
													expr: &litMatcher{
														pos:        position{line: 1134, col: 26, offset: 42505},
														val:        "]",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 1134, col: 30, offset: 42509},
													expr: &litMatcher{
														pos:        position{line: 1134, col: 31, offset: 42510},
														val:        "\"",
														ignoreCase: false,
													},
												},
												&choiceExpr{
													pos: position{line: 1134, col: 37, offset: 42516},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1134, col: 37, offset: 42516},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1134, col: 50, offset: 42529},
															name: "SimpleWord",
														},
														&ruleRefExpr{
															pos:  position{line: 1134, col: 63, offset: 42542},
															name: "Spaces",
														},
														&actionExpr{
															pos: position{line: 1134, col: 73, offset: 42552},
															run: (*parser).callonLinkTextAttribute18,
															expr: &seqExpr{
																pos: position{line: 1134, col: 74, offset: 42553},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1134, col: 74, offset: 42553},
																		expr: &ruleRefExpr{
																			pos:  position{line: 1134, col: 75, offset: 42554},
																			name: "QuotedTextPrefix",
																		},
																	},
																	&anyMatcher{
																		line: 1134, col: 92, offset: 42571,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1136, col: 11, offset: 42640},
									val:        "\"",
									ignoreCase: false,
								},
								&zeroOrMoreExpr{
									pos: position{line: 1136, col: 16, offset: 42645},
									expr: &ruleRefExpr{
										pos:  position{line: 1136, col: 16, offset: 42645},
										name: "Spaces",
									},
								},
								&andExpr{
									pos: position{line: 1136, col: 24, offset: 42653},
									expr: &notExpr{
										pos: position{line: 1136, col: 26, offset: 42655},
										expr: &litMatcher{
											pos:        position{line: 1136, col: 27, offset: 42656},
											val:        "=",
											ignoreCase: false,
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1140, col: 5, offset: 42781},
						run: (*parser).callonLinkTextAttribute29,
						expr: &seqExpr{
							pos: position{line: 1140, col: 5, offset: 42781},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1140, col: 5, offset: 42781},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 1140, col: 14, offset: 42790},
										expr: &seqExpr{
											pos: position{line: 1140, col: 15, offset: 42791},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1140, col: 15, offset: 42791},
													expr: &litMatcher{
														pos:        position{line: 1140, col: 16, offset: 42792},
														val:        "=",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 1140, col: 20, offset: 42796},
													expr: &litMatcher{
														pos:        position{line: 1140, col: 21, offset: 42797},
														val:        ",",
														ignoreCase: false,
													},
												},
												&notExpr{
													pos: position{line: 1140, col: 25, offset: 42801},
													expr: &litMatcher{
														pos:        position{line: 1140, col: 26, offset: 42802},
														val:        "]",
														ignoreCase: false,
													},
												},
												&choiceExpr{
													pos: position{line: 1140, col: 31, offset: 42807},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1140, col: 31, offset: 42807},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1140, col: 44, offset: 42820},
															name: "SimpleWord",
														},
														&ruleRefExpr{
															pos:  position{line: 1140, col: 57, offset: 42833},
															name: "Spaces",
														},
														&actionExpr{
															pos: position{line: 1140, col: 67, offset: 42843},
															run: (*parser).callonLinkTextAttribute44,
															expr: &seqExpr{
																pos: position{line: 1140, col: 68, offset: 42844},
																exprs: []interface{}{
																	&notExpr{
																		pos: position{line: 1140, col: 68, offset: 42844},
																		expr: &ruleRefExpr{
																			pos:  position{line: 1140, col: 69, offset: 42845},
																			name: "QuotedTextPrefix",
																		},
																	},
																	&anyMatcher{
																		line: 1140, col: 86, offset: 42862,
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
								&andExpr{
									pos: position{line: 1142, col: 11, offset: 42931},
									expr: &notExpr{
										pos: position{line: 1142, col: 13, offset: 42933},
										expr: &litMatcher{
											pos:        position{line: 1142, col: 14, offset: 42934},
											val:        "=",
											ignoreCase: false,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageBlock",
			pos:  position{line: 1149, col: 1, offset: 43115},
			expr: &actionExpr{
				pos: position{line: 1149, col: 15, offset: 43129},
				run: (*parser).callonImageBlock1,
				expr: &seqExpr{
					pos: position{line: 1149, col: 15, offset: 43129},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1149, col: 15, offset: 43129},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1149, col: 26, offset: 43140},
								expr: &ruleRefExpr{
									pos:  position{line: 1149, col: 27, offset: 43141},
									name: "ElementAttributes",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1149, col: 47, offset: 43161},
							val:        "image::",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1149, col: 57, offset: 43171},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1149, col: 63, offset: 43177},
								name: "URL",
							},
						},
						&labeledExpr{
							pos:   position{line: 1149, col: 68, offset: 43182},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1149, col: 86, offset: 43200},
								name: "ImageAttributes",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1149, col: 103, offset: 43217},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "InlineImage",
			pos:  position{line: 1153, col: 1, offset: 43329},
			expr: &actionExpr{
				pos: position{line: 1153, col: 16, offset: 43344},
				run: (*parser).callonInlineImage1,
				expr: &seqExpr{
					pos: position{line: 1153, col: 16, offset: 43344},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1153, col: 16, offset: 43344},
							val:        "image:",
							ignoreCase: false,
						},
						&notExpr{
							pos: position{line: 1153, col: 25, offset: 43353},
							expr: &litMatcher{
								pos:        position{line: 1153, col: 26, offset: 43354},
								val:        ":",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 1153, col: 30, offset: 43358},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1153, col: 36, offset: 43364},
								name: "URL",
							},
						},
						&labeledExpr{
							pos:   position{line: 1153, col: 41, offset: 43369},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1153, col: 59, offset: 43387},
								name: "ImageAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ImageAttributes",
			pos:  position{line: 1157, col: 1, offset: 43500},
			expr: &actionExpr{
				pos: position{line: 1157, col: 20, offset: 43519},
				run: (*parser).callonImageAttributes1,
				expr: &seqExpr{
					pos: position{line: 1157, col: 20, offset: 43519},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1157, col: 20, offset: 43519},
							val:        "[",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1157, col: 24, offset: 43523},
							label: "alt",
							expr: &zeroOrOneExpr{
								pos: position{line: 1157, col: 28, offset: 43527},
								expr: &ruleRefExpr{
									pos:  position{line: 1157, col: 29, offset: 43528},
									name: "AttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1157, col: 46, offset: 43545},
							expr: &litMatcher{
								pos:        position{line: 1157, col: 46, offset: 43545},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 1157, col: 51, offset: 43550},
							label: "width",
							expr: &zeroOrOneExpr{
								pos: position{line: 1157, col: 57, offset: 43556},
								expr: &ruleRefExpr{
									pos:  position{line: 1157, col: 58, offset: 43557},
									name: "AttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1157, col: 75, offset: 43574},
							expr: &litMatcher{
								pos:        position{line: 1157, col: 75, offset: 43574},
								val:        ",",
								ignoreCase: false,
							},
						},
						&labeledExpr{
							pos:   position{line: 1157, col: 80, offset: 43579},
							label: "height",
							expr: &zeroOrOneExpr{
								pos: position{line: 1157, col: 87, offset: 43586},
								expr: &ruleRefExpr{
									pos:  position{line: 1157, col: 88, offset: 43587},
									name: "AttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1157, col: 105, offset: 43604},
							expr: &litMatcher{
								pos:        position{line: 1157, col: 105, offset: 43604},
								val:        ",",
								ignoreCase: false,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1157, col: 110, offset: 43609},
							expr: &ruleRefExpr{
								pos:  position{line: 1157, col: 110, offset: 43609},
								name: "WS",
							},
						},
						&labeledExpr{
							pos:   position{line: 1157, col: 114, offset: 43613},
							label: "otherattrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1157, col: 125, offset: 43624},
								expr: &ruleRefExpr{
									pos:  position{line: 1157, col: 126, offset: 43625},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1157, col: 145, offset: 43644},
							val:        "]",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "InlineFootnote",
			pos:  position{line: 1164, col: 1, offset: 43934},
			expr: &choiceExpr{
				pos: position{line: 1164, col: 19, offset: 43952},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1164, col: 19, offset: 43952},
						run: (*parser).callonInlineFootnote2,
						expr: &seqExpr{
							pos: position{line: 1164, col: 19, offset: 43952},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1164, col: 19, offset: 43952},
									val:        "footnote:[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1164, col: 32, offset: 43965},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1164, col: 41, offset: 43974},
										name: "FootnoteContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1164, col: 58, offset: 43991},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1166, col: 5, offset: 44066},
						run: (*parser).callonInlineFootnote8,
						expr: &seqExpr{
							pos: position{line: 1166, col: 5, offset: 44066},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1166, col: 5, offset: 44066},
									val:        "footnoteref:[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1166, col: 21, offset: 44082},
									label: "ref",
									expr: &ruleRefExpr{
										pos:  position{line: 1166, col: 26, offset: 44087},
										name: "FootnoteRef",
									},
								},
								&litMatcher{
									pos:        position{line: 1166, col: 39, offset: 44100},
									val:        ",",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1166, col: 43, offset: 44104},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1166, col: 52, offset: 44113},
										name: "FootnoteContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1166, col: 69, offset: 44130},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1168, col: 5, offset: 44215},
						run: (*parser).callonInlineFootnote17,
						expr: &seqExpr{
							pos: position{line: 1168, col: 5, offset: 44215},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1168, col: 5, offset: 44215},
									val:        "footnoteref:[",
									ignoreCase: false,
								},
								&labeledExpr{
									pos:   position{line: 1168, col: 21, offset: 44231},
									label: "ref",
									expr: &ruleRefExpr{
										pos:  position{line: 1168, col: 26, offset: 44236},
										name: "FootnoteRef",
									},
								},
								&litMatcher{
									pos:        position{line: 1168, col: 39, offset: 44249},
									val:        "]",
									ignoreCase: false,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FootnoteRef",
			pos:  position{line: 1172, col: 1, offset: 44364},
			expr: &actionExpr{
				pos: position{line: 1172, col: 16, offset: 44379},
				run: (*parser).callonFootnoteRef1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1172, col: 16, offset: 44379},
					expr: &choiceExpr{
						pos: position{line: 1172, col: 17, offset: 44380},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1172, col: 17, offset: 44380},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 1172, col: 29, offset: 44392},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 1172, col: 39, offset: 44402},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1172, col: 39, offset: 44402},
										expr: &litMatcher{
											pos:        position{line: 1172, col: 40, offset: 44403},
											val:        ",",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1172, col: 44, offset: 44407},
										expr: &litMatcher{
											pos:        position{line: 1172, col: 45, offset: 44408},
											val:        "]",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1172, col: 49, offset: 44412},
										expr: &ruleRefExpr{
											pos:  position{line: 1172, col: 50, offset: 44413},
											name: "EOL",
										},
									},
									&anyMatcher{
										line: 1172, col: 55, offset: 44418,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FootnoteContent",
			pos:  position{line: 1176, col: 1, offset: 44503},
			expr: &actionExpr{
				pos: position{line: 1176, col: 20, offset: 44522},
				run: (*parser).callonFootnoteContent1,
				expr: &labeledExpr{
					pos:   position{line: 1176, col: 20, offset: 44522},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1176, col: 29, offset: 44531},
						expr: &seqExpr{
							pos: position{line: 1176, col: 30, offset: 44532},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1176, col: 30, offset: 44532},
									expr: &litMatcher{
										pos:        position{line: 1176, col: 31, offset: 44533},
										val:        "]",
										ignoreCase: false,
									},
								},
								&notExpr{
									pos: position{line: 1176, col: 35, offset: 44537},
									expr: &ruleRefExpr{
										pos:  position{line: 1176, col: 36, offset: 44538},
										name: "EOL",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1176, col: 40, offset: 44542},
									expr: &ruleRefExpr{
										pos:  position{line: 1176, col: 40, offset: 44542},
										name: "WS",
									},
								},
								&notExpr{
									pos: position{line: 1176, col: 44, offset: 44546},
									expr: &ruleRefExpr{
										pos:  position{line: 1176, col: 45, offset: 44547},
										name: "InlineElementID",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1176, col: 61, offset: 44563},
									name: "InlineElement",
								},
								&zeroOrMoreExpr{
									pos: position{line: 1176, col: 75, offset: 44577},
									expr: &ruleRefExpr{
										pos:  position{line: 1176, col: 75, offset: 44577},
										name: "WS",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DelimitedBlock",
			pos:  position{line: 1183, col: 1, offset: 44891},
			expr: &actionExpr{
				pos: position{line: 1183, col: 19, offset: 44909},
				run: (*parser).callonDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 1183, col: 19, offset: 44909},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1183, col: 19, offset: 44909},
							expr: &ruleRefExpr{
								pos:  position{line: 1183, col: 20, offset: 44910},
								name: "Alphanum",
							},
						},
						&labeledExpr{
							pos:   position{line: 1184, col: 5, offset: 44939},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 1184, col: 12, offset: 44946},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1184, col: 12, offset: 44946},
										name: "FencedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1185, col: 11, offset: 44969},
										name: "ListingBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1186, col: 11, offset: 44993},
										name: "ExampleBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1187, col: 11, offset: 45017},
										name: "VerseBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1188, col: 11, offset: 45039},
										name: "QuoteBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1189, col: 11, offset: 45061},
										name: "SidebarBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1190, col: 11, offset: 45084},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 1191, col: 11, offset: 45112},
										name: "Table",
									},
									&ruleRefExpr{
										pos:  position{line: 1192, col: 11, offset: 45128},
										name: "CommentBlock",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockDelimiter",
			pos:  position{line: 1196, col: 1, offset: 45169},
			expr: &choiceExpr{
				pos: position{line: 1196, col: 19, offset: 45187},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1196, col: 19, offset: 45187},
						name: "LiteralBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1197, col: 19, offset: 45228},
						name: "FencedBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1198, col: 19, offset: 45268},
						name: "ListingBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1199, col: 19, offset: 45309},
						name: "ExampleBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1200, col: 19, offset: 45350},
						name: "CommentBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1201, col: 19, offset: 45391},
						name: "QuoteBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1202, col: 19, offset: 45429},
						name: "SidebarBlockDelimiter",
					},
				},
			},
		},
		{
			name: "FencedBlockDelimiter",
			pos:  position{line: 1208, col: 1, offset: 45648},
			expr: &seqExpr{
				pos: position{line: 1208, col: 25, offset: 45672},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1208, col: 25, offset: 45672},
						val:        "```",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1208, col: 31, offset: 45678},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "FencedBlock",
			pos:  position{line: 1210, col: 1, offset: 45684},
			expr: &actionExpr{
				pos: position{line: 1210, col: 16, offset: 45699},
				run: (*parser).callonFencedBlock1,
				expr: &seqExpr{
					pos: position{line: 1210, col: 16, offset: 45699},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1210, col: 16, offset: 45699},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1210, col: 27, offset: 45710},
								expr: &ruleRefExpr{
									pos:  position{line: 1210, col: 28, offset: 45711},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1210, col: 48, offset: 45731},
							name: "FencedBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1210, col: 69, offset: 45752},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1210, col: 77, offset: 45760},
								expr: &ruleRefExpr{
									pos:  position{line: 1210, col: 78, offset: 45761},
									name: "FencedBlockContent",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1210, col: 100, offset: 45783},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1210, col: 100, offset: 45783},
									name: "FencedBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1210, col: 123, offset: 45806},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FencedBlockContent",
			pos:  position{line: 1214, col: 1, offset: 45914},
			expr: &choiceExpr{
				pos: position{line: 1214, col: 23, offset: 45936},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1214, col: 23, offset: 45936},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 1214, col: 35, offset: 45948},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 1214, col: 51, offset: 45964},
						name: "ListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 1214, col: 62, offset: 45975},
						name: "FencedBlockParagraph",
					},
				},
			},
		},
		{
			name: "FencedBlockParagraph",
			pos:  position{line: 1217, col: 1, offset: 46015},
			expr: &actionExpr{
				pos: position{line: 1217, col: 25, offset: 46039},
				run: (*parser).callonFencedBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1217, col: 25, offset: 46039},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1217, col: 31, offset: 46045},
						expr: &ruleRefExpr{
							pos:  position{line: 1217, col: 32, offset: 46046},
							name: "FencedBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "FencedBlockParagraphLine",
			pos:  position{line: 1221, col: 1, offset: 46159},
			expr: &actionExpr{
				pos: position{line: 1221, col: 29, offset: 46187},
				run: (*parser).callonFencedBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1221, col: 29, offset: 46187},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1221, col: 29, offset: 46187},
							expr: &ruleRefExpr{
								pos:  position{line: 1221, col: 30, offset: 46188},
								name: "FencedBlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 1221, col: 51, offset: 46209},
							expr: &ruleRefExpr{
								pos:  position{line: 1221, col: 52, offset: 46210},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1221, col: 62, offset: 46220},
							label: "line",
							expr: &ruleRefExpr{
								pos:  position{line: 1221, col: 68, offset: 46226},
								name: "InlineElements",
							},
						},
					},
				},
			},
		},
		{
			name: "ListingBlockDelimiter",
			pos:  position{line: 1228, col: 1, offset: 46464},
			expr: &seqExpr{
				pos: position{line: 1228, col: 26, offset: 46489},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1228, col: 26, offset: 46489},
						val:        "----",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1228, col: 33, offset: 46496},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "ListingBlock",
			pos:  position{line: 1231, col: 1, offset: 46537},
			expr: &actionExpr{
				pos: position{line: 1231, col: 17, offset: 46553},
				run: (*parser).callonListingBlock1,
				expr: &seqExpr{
					pos: position{line: 1231, col: 17, offset: 46553},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1231, col: 17, offset: 46553},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1231, col: 28, offset: 46564},
								expr: &ruleRefExpr{
									pos:  position{line: 1231, col: 29, offset: 46565},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1231, col: 49, offset: 46585},
							name: "ListingBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1231, col: 71, offset: 46607},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1231, col: 79, offset: 46615},
								expr: &ruleRefExpr{
									pos:  position{line: 1231, col: 80, offset: 46616},
									name: "ListingBlockElement",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1231, col: 103, offset: 46639},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1231, col: 103, offset: 46639},
									name: "ListingBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1231, col: 127, offset: 46663},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListingBlockElement",
			pos:  position{line: 1235, col: 1, offset: 46772},
			expr: &choiceExpr{
				pos: position{line: 1235, col: 24, offset: 46795},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1235, col: 24, offset: 46795},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 1235, col: 40, offset: 46811},
						name: "ListingBlockParagraph",
					},
				},
			},
		},
		{
			name: "ListingBlockParagraph",
			pos:  position{line: 1237, col: 1, offset: 46834},
			expr: &actionExpr{
				pos: position{line: 1237, col: 26, offset: 46859},
				run: (*parser).callonListingBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1237, col: 26, offset: 46859},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1237, col: 32, offset: 46865},
						expr: &ruleRefExpr{
							pos:  position{line: 1237, col: 33, offset: 46866},
							name: "ListingBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "ListingBlockParagraphLine",
			pos:  position{line: 1241, col: 1, offset: 46985},
			expr: &actionExpr{
				pos: position{line: 1241, col: 30, offset: 47014},
				run: (*parser).callonListingBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1241, col: 30, offset: 47014},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1241, col: 30, offset: 47014},
							expr: &ruleRefExpr{
								pos:  position{line: 1241, col: 31, offset: 47015},
								name: "ListingBlockDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1241, col: 53, offset: 47037},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1241, col: 59, offset: 47043},
								run: (*parser).callonListingBlockParagraphLine6,
								expr: &seqExpr{
									pos: position{line: 1241, col: 59, offset: 47043},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1241, col: 59, offset: 47043},
											expr: &ruleRefExpr{
												pos:  position{line: 1241, col: 60, offset: 47044},
												name: "EOF",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 1241, col: 64, offset: 47048},
											expr: &choiceExpr{
												pos: position{line: 1241, col: 65, offset: 47049},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 1241, col: 65, offset: 47049},
														name: "Alphanums",
													},
													&ruleRefExpr{
														pos:  position{line: 1241, col: 77, offset: 47061},
														name: "Spaces",
													},
													&seqExpr{
														pos: position{line: 1241, col: 87, offset: 47071},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 1241, col: 87, offset: 47071},
																expr: &ruleRefExpr{
																	pos:  position{line: 1241, col: 88, offset: 47072},
																	name: "EOL",
																},
															},
															&anyMatcher{
																line: 1241, col: 92, offset: 47076,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1241, col: 128, offset: 47112},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockDelimiter",
			pos:  position{line: 1248, col: 1, offset: 47438},
			expr: &seqExpr{
				pos: position{line: 1248, col: 26, offset: 47463},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1248, col: 26, offset: 47463},
						val:        "====",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1248, col: 33, offset: 47470},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "ExampleBlock",
			pos:  position{line: 1250, col: 1, offset: 47476},
			expr: &actionExpr{
				pos: position{line: 1250, col: 17, offset: 47492},
				run: (*parser).callonExampleBlock1,
				expr: &seqExpr{
					pos: position{line: 1250, col: 17, offset: 47492},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1250, col: 17, offset: 47492},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1250, col: 28, offset: 47503},
								expr: &ruleRefExpr{
									pos:  position{line: 1250, col: 29, offset: 47504},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1250, col: 49, offset: 47524},
							name: "ExampleBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1250, col: 71, offset: 47546},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1250, col: 79, offset: 47554},
								expr: &choiceExpr{
									pos: position{line: 1250, col: 80, offset: 47555},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1250, col: 80, offset: 47555},
											name: "BlankLine",
										},
										&ruleRefExpr{
											pos:  position{line: 1250, col: 92, offset: 47567},
											name: "FileInclusion",
										},
										&ruleRefExpr{
											pos:  position{line: 1250, col: 108, offset: 47583},
											name: "ListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1250, col: 119, offset: 47594},
											name: "ExampleBlockParagraph",
										},
									},
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1250, col: 145, offset: 47620},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1250, col: 145, offset: 47620},
									name: "ExampleBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1250, col: 169, offset: 47644},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockParagraph",
			pos:  position{line: 1255, col: 1, offset: 47771},
			expr: &actionExpr{
				pos: position{line: 1255, col: 26, offset: 47796},
				run: (*parser).callonExampleBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1255, col: 26, offset: 47796},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1255, col: 32, offset: 47802},
						expr: &ruleRefExpr{
							pos:  position{line: 1255, col: 33, offset: 47803},
							name: "ExampleBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockParagraphLine",
			pos:  position{line: 1259, col: 1, offset: 47917},
			expr: &actionExpr{
				pos: position{line: 1259, col: 30, offset: 47946},
				run: (*parser).callonExampleBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1259, col: 30, offset: 47946},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1259, col: 30, offset: 47946},
							expr: &ruleRefExpr{
								pos:  position{line: 1259, col: 31, offset: 47947},
								name: "ExampleBlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 1259, col: 53, offset: 47969},
							expr: &ruleRefExpr{
								pos:  position{line: 1259, col: 54, offset: 47970},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1259, col: 64, offset: 47980},
							label: "line",
							expr: &ruleRefExpr{
								pos:  position{line: 1259, col: 70, offset: 47986},
								name: "InlineElements",
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockDelimiter",
			pos:  position{line: 1266, col: 1, offset: 48222},
			expr: &seqExpr{
				pos: position{line: 1266, col: 24, offset: 48245},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1266, col: 24, offset: 48245},
						val:        "____",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1266, col: 31, offset: 48252},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "QuoteBlock",
			pos:  position{line: 1268, col: 1, offset: 48283},
			expr: &actionExpr{
				pos: position{line: 1268, col: 15, offset: 48297},
				run: (*parser).callonQuoteBlock1,
				expr: &seqExpr{
					pos: position{line: 1268, col: 15, offset: 48297},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1268, col: 15, offset: 48297},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1268, col: 26, offset: 48308},
								expr: &ruleRefExpr{
									pos:  position{line: 1268, col: 27, offset: 48309},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1268, col: 47, offset: 48329},
							name: "QuoteBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1268, col: 67, offset: 48349},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1268, col: 75, offset: 48357},
								expr: &ruleRefExpr{
									pos:  position{line: 1268, col: 76, offset: 48358},
									name: "QuoteBlockElement",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1268, col: 97, offset: 48379},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1268, col: 97, offset: 48379},
									name: "QuoteBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1268, col: 119, offset: 48401},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockElement",
			pos:  position{line: 1272, col: 1, offset: 48508},
			expr: &actionExpr{
				pos: position{line: 1273, col: 5, offset: 48534},
				run: (*parser).callonQuoteBlockElement1,
				expr: &seqExpr{
					pos: position{line: 1273, col: 5, offset: 48534},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1273, col: 5, offset: 48534},
							expr: &ruleRefExpr{
								pos:  position{line: 1273, col: 6, offset: 48535},
								name: "QuoteBlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 1273, col: 26, offset: 48555},
							expr: &ruleRefExpr{
								pos:  position{line: 1273, col: 27, offset: 48556},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1273, col: 31, offset: 48560},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1273, col: 40, offset: 48569},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1273, col: 40, offset: 48569},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 1274, col: 15, offset: 48594},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 1275, col: 15, offset: 48622},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1276, col: 15, offset: 48648},
										name: "ListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 1277, col: 15, offset: 48671},
										name: "FencedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1278, col: 15, offset: 48697},
										name: "ListingBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1279, col: 15, offset: 48724},
										name: "ExampleBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1280, col: 15, offset: 48751},
										name: "CommentBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1281, col: 15, offset: 48778},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 1282, col: 15, offset: 48810},
										name: "QuoteBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1283, col: 15, offset: 48836},
										name: "SidebarBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1284, col: 15, offset: 48863},
										name: "Table",
									},
									&ruleRefExpr{
										pos:  position{line: 1285, col: 15, offset: 48884},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1286, col: 15, offset: 48912},
										name: "DocumentAttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 1287, col: 15, offset: 48956},
										name: "DocumentAttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 1288, col: 15, offset: 48994},
										name: "TableOfContentsMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 1289, col: 15, offset: 49029},
										name: "QuoteBlockParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockParagraph",
			pos:  position{line: 1293, col: 1, offset: 49088},
			expr: &actionExpr{
				pos: position{line: 1293, col: 24, offset: 49111},
				run: (*parser).callonQuoteBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1293, col: 24, offset: 49111},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1293, col: 30, offset: 49117},
						expr: &ruleRefExpr{
							pos:  position{line: 1293, col: 31, offset: 49118},
							name: "InlineElements",
						},
					},
				},
			},
		},
		{
			name: "VerseBlock",
			pos:  position{line: 1302, col: 1, offset: 49464},
			expr: &actionExpr{
				pos: position{line: 1302, col: 15, offset: 49478},
				run: (*parser).callonVerseBlock1,
				expr: &seqExpr{
					pos: position{line: 1302, col: 15, offset: 49478},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1302, col: 15, offset: 49478},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1302, col: 27, offset: 49490},
								name: "ElementAttributes",
							},
						},
						&andCodeExpr{
							pos: position{line: 1303, col: 5, offset: 49514},
							run: (*parser).callonVerseBlock5,
						},
						&ruleRefExpr{
							pos:  position{line: 1307, col: 5, offset: 49700},
							name: "QuoteBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1307, col: 25, offset: 49720},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1307, col: 33, offset: 49728},
								expr: &ruleRefExpr{
									pos:  position{line: 1307, col: 34, offset: 49729},
									name: "VerseBlockElement",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1307, col: 55, offset: 49750},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1307, col: 55, offset: 49750},
									name: "QuoteBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1307, col: 77, offset: 49772},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockElement",
			pos:  position{line: 1311, col: 1, offset: 49887},
			expr: &choiceExpr{
				pos: position{line: 1311, col: 22, offset: 49908},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1311, col: 22, offset: 49908},
						name: "VerseFileInclude",
					},
					&ruleRefExpr{
						pos:  position{line: 1311, col: 41, offset: 49927},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 1311, col: 53, offset: 49939},
						name: "VerseBlockParagraph",
					},
				},
			},
		},
		{
			name: "VerseFileInclude",
			pos:  position{line: 1313, col: 1, offset: 49960},
			expr: &actionExpr{
				pos: position{line: 1313, col: 21, offset: 49980},
				run: (*parser).callonVerseFileInclude1,
				expr: &seqExpr{
					pos: position{line: 1313, col: 21, offset: 49980},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1313, col: 21, offset: 49980},
							expr: &ruleRefExpr{
								pos:  position{line: 1313, col: 22, offset: 49981},
								name: "QuoteBlockDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1313, col: 42, offset: 50001},
							label: "include",
							expr: &ruleRefExpr{
								pos:  position{line: 1313, col: 51, offset: 50010},
								name: "FileInclusion",
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraph",
			pos:  position{line: 1318, col: 1, offset: 50072},
			expr: &actionExpr{
				pos: position{line: 1318, col: 24, offset: 50095},
				run: (*parser).callonVerseBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1318, col: 24, offset: 50095},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1318, col: 30, offset: 50101},
						expr: &ruleRefExpr{
							pos:  position{line: 1318, col: 31, offset: 50102},
							name: "VerseBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraphLine",
			pos:  position{line: 1322, col: 1, offset: 50192},
			expr: &actionExpr{
				pos: position{line: 1322, col: 28, offset: 50219},
				run: (*parser).callonVerseBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1322, col: 28, offset: 50219},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1322, col: 28, offset: 50219},
							expr: &ruleRefExpr{
								pos:  position{line: 1322, col: 29, offset: 50220},
								name: "QuoteBlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 1322, col: 49, offset: 50240},
							expr: &ruleRefExpr{
								pos:  position{line: 1322, col: 50, offset: 50241},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1322, col: 60, offset: 50251},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1322, col: 66, offset: 50257},
								run: (*parser).callonVerseBlockParagraphLine8,
								expr: &seqExpr{
									pos: position{line: 1322, col: 66, offset: 50257},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 1322, col: 66, offset: 50257},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 1322, col: 75, offset: 50266},
												expr: &ruleRefExpr{
													pos:  position{line: 1322, col: 76, offset: 50267},
													name: "VerseBlockParagraphLineElement",
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1322, col: 109, offset: 50300},
											name: "EOL",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraphLineElement",
			pos:  position{line: 1328, col: 1, offset: 50396},
			expr: &actionExpr{
				pos: position{line: 1328, col: 35, offset: 50430},
				run: (*parser).callonVerseBlockParagraphLineElement1,
				expr: &seqExpr{
					pos: position{line: 1328, col: 35, offset: 50430},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1328, col: 35, offset: 50430},
							expr: &ruleRefExpr{
								pos:  position{line: 1328, col: 36, offset: 50431},
								name: "EOL",
							},
						},
						&notExpr{
							pos: position{line: 1328, col: 40, offset: 50435},
							expr: &ruleRefExpr{
								pos:  position{line: 1328, col: 41, offset: 50436},
								name: "LineBreak",
							},
						},
						&labeledExpr{
							pos:   position{line: 1329, col: 5, offset: 50451},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1329, col: 14, offset: 50460},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1329, col: 14, offset: 50460},
										name: "Spaces",
									},
									&ruleRefExpr{
										pos:  position{line: 1330, col: 11, offset: 50478},
										name: "InlineImage",
									},
									&ruleRefExpr{
										pos:  position{line: 1331, col: 11, offset: 50501},
										name: "Link",
									},
									&ruleRefExpr{
										pos:  position{line: 1332, col: 11, offset: 50517},
										name: "Passthrough",
									},
									&ruleRefExpr{
										pos:  position{line: 1333, col: 11, offset: 50540},
										name: "InlineFootnote",
									},
									&ruleRefExpr{
										pos:  position{line: 1334, col: 11, offset: 50566},
										name: "InlineUserMacro",
									},
									&ruleRefExpr{
										pos:  position{line: 1335, col: 11, offset: 50593},
										name: "QuotedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1336, col: 11, offset: 50615},
										name: "CrossReference",
									},
									&ruleRefExpr{
										pos:  position{line: 1337, col: 11, offset: 50641},
										name: "DocumentAttributeSubstitution",
									},
									&ruleRefExpr{
										pos:  position{line: 1338, col: 11, offset: 50682},
										name: "InlineElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 1339, col: 11, offset: 50709},
										name: "OtherWord",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockDelimiter",
			pos:  position{line: 1346, col: 1, offset: 50939},
			expr: &seqExpr{
				pos: position{line: 1346, col: 26, offset: 50964},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1346, col: 26, offset: 50964},
						val:        "****",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1346, col: 33, offset: 50971},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "SidebarBlock",
			pos:  position{line: 1348, col: 1, offset: 50977},
			expr: &actionExpr{
				pos: position{line: 1348, col: 17, offset: 50993},
				run: (*parser).callonSidebarBlock1,
				expr: &seqExpr{
					pos: position{line: 1348, col: 17, offset: 50993},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1348, col: 17, offset: 50993},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1348, col: 28, offset: 51004},
								expr: &ruleRefExpr{
									pos:  position{line: 1348, col: 29, offset: 51005},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1348, col: 49, offset: 51025},
							name: "SidebarBlockDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1348, col: 71, offset: 51047},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1348, col: 79, offset: 51055},
								expr: &ruleRefExpr{
									pos:  position{line: 1348, col: 80, offset: 51056},
									name: "SidebarBlockContent",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1348, col: 104, offset: 51080},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1348, col: 104, offset: 51080},
									name: "SidebarBlockDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1348, col: 128, offset: 51104},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockContent",
			pos:  position{line: 1352, col: 1, offset: 51213},
			expr: &choiceExpr{
				pos: position{line: 1352, col: 24, offset: 51236},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1352, col: 24, offset: 51236},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 1352, col: 36, offset: 51248},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 1352, col: 52, offset: 51264},
						name: "ListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 1352, col: 63, offset: 51275},
						name: "NonSidebarBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 1352, col: 81, offset: 51293},
						name: "SidebarBlockParagraph",
					},
				},
			},
		},
		{
			name: "NonSidebarBlock",
			pos:  position{line: 1354, col: 1, offset: 51316},
			expr: &actionExpr{
				pos: position{line: 1354, col: 20, offset: 51335},
				run: (*parser).callonNonSidebarBlock1,
				expr: &seqExpr{
					pos: position{line: 1354, col: 20, offset: 51335},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1354, col: 20, offset: 51335},
							expr: &ruleRefExpr{
								pos:  position{line: 1354, col: 21, offset: 51336},
								name: "SidebarBlock",
							},
						},
						&labeledExpr{
							pos:   position{line: 1354, col: 34, offset: 51349},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1354, col: 43, offset: 51358},
								name: "DelimitedBlock",
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockParagraph",
			pos:  position{line: 1359, col: 1, offset: 51421},
			expr: &actionExpr{
				pos: position{line: 1359, col: 26, offset: 51446},
				run: (*parser).callonSidebarBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1359, col: 26, offset: 51446},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1359, col: 32, offset: 51452},
						expr: &ruleRefExpr{
							pos:  position{line: 1359, col: 33, offset: 51453},
							name: "SidebarBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockParagraphLine",
			pos:  position{line: 1363, col: 1, offset: 51567},
			expr: &actionExpr{
				pos: position{line: 1363, col: 30, offset: 51596},
				run: (*parser).callonSidebarBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1363, col: 30, offset: 51596},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1363, col: 30, offset: 51596},
							expr: &ruleRefExpr{
								pos:  position{line: 1363, col: 31, offset: 51597},
								name: "SidebarBlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 1363, col: 53, offset: 51619},
							expr: &ruleRefExpr{
								pos:  position{line: 1363, col: 54, offset: 51620},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1363, col: 64, offset: 51630},
							label: "line",
							expr: &ruleRefExpr{
								pos:  position{line: 1363, col: 70, offset: 51636},
								name: "InlineElements",
							},
						},
					},
				},
			},
		},
		{
			name: "Table",
			pos:  position{line: 1371, col: 1, offset: 51867},
			expr: &actionExpr{
				pos: position{line: 1371, col: 10, offset: 51876},
				run: (*parser).callonTable1,
				expr: &seqExpr{
					pos: position{line: 1371, col: 10, offset: 51876},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1371, col: 10, offset: 51876},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1371, col: 21, offset: 51887},
								expr: &ruleRefExpr{
									pos:  position{line: 1371, col: 22, offset: 51888},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1371, col: 42, offset: 51908},
							name: "TableDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1372, col: 5, offset: 51927},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 1372, col: 12, offset: 51934},
								expr: &ruleRefExpr{
									pos:  position{line: 1372, col: 13, offset: 51935},
									name: "TableLineHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1373, col: 5, offset: 51957},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1373, col: 11, offset: 51963},
								expr: &ruleRefExpr{
									pos:  position{line: 1373, col: 12, offset: 51964},
									name: "TableLine",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1374, col: 6, offset: 51981},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1374, col: 6, offset: 51981},
									name: "TableDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1374, col: 23, offset: 51998},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TableCellSeparator",
			pos:  position{line: 1378, col: 1, offset: 52113},
			expr: &seqExpr{
				pos: position{line: 1378, col: 23, offset: 52135},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1378, col: 23, offset: 52135},
						val:        "|",
						ignoreCase: false,
					},
					&zeroOrMoreExpr{
						pos: position{line: 1378, col: 27, offset: 52139},
						expr: &ruleRefExpr{
							pos:  position{line: 1378, col: 27, offset: 52139},
							name: "WS",
						},
					},
				},
			},
		},
		{
			name: "TableDelimiter",
			pos:  position{line: 1380, col: 1, offset: 52144},
			expr: &seqExpr{
				pos: position{line: 1380, col: 19, offset: 52162},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1380, col: 19, offset: 52162},
						val:        "|===",
						ignoreCase: false,
					},
					&ruleRefExpr{
						pos:  position{line: 1380, col: 26, offset: 52169},
						name: "EOLS",
					},
				},
			},
		},
		{
			name: "TableLineHeader",
			pos:  position{line: 1383, col: 1, offset: 52238},
			expr: &actionExpr{
				pos: position{line: 1383, col: 20, offset: 52257},
				run: (*parser).callonTableLineHeader1,
				expr: &seqExpr{
					pos: position{line: 1383, col: 20, offset: 52257},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1383, col: 20, offset: 52257},
							expr: &ruleRefExpr{
								pos:  position{line: 1383, col: 21, offset: 52258},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1383, col: 36, offset: 52273},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1383, col: 42, offset: 52279},
								expr: &ruleRefExpr{
									pos:  position{line: 1383, col: 43, offset: 52280},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1383, col: 55, offset: 52292},
							name: "EOL",
						},
						&ruleRefExpr{
							pos:  position{line: 1383, col: 59, offset: 52296},
							name: "BlankLine",
						},
					},
				},
			},
		},
		{
			name: "TableLine",
			pos:  position{line: 1387, col: 1, offset: 52364},
			expr: &actionExpr{
				pos: position{line: 1387, col: 14, offset: 52377},
				run: (*parser).callonTableLine1,
				expr: &seqExpr{
					pos: position{line: 1387, col: 14, offset: 52377},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1387, col: 14, offset: 52377},
							expr: &ruleRefExpr{
								pos:  position{line: 1387, col: 15, offset: 52378},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1387, col: 30, offset: 52393},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1387, col: 36, offset: 52399},
								expr: &ruleRefExpr{
									pos:  position{line: 1387, col: 37, offset: 52400},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1387, col: 49, offset: 52412},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1387, col: 53, offset: 52416},
							expr: &ruleRefExpr{
								pos:  position{line: 1387, col: 53, offset: 52416},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "TableCell",
			pos:  position{line: 1391, col: 1, offset: 52485},
			expr: &actionExpr{
				pos: position{line: 1391, col: 14, offset: 52498},
				run: (*parser).callonTableCell1,
				expr: &seqExpr{
					pos: position{line: 1391, col: 14, offset: 52498},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1391, col: 14, offset: 52498},
							name: "TableCellSeparator",
						},
						&labeledExpr{
							pos:   position{line: 1391, col: 33, offset: 52517},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1391, col: 42, offset: 52526},
								expr: &seqExpr{
									pos: position{line: 1391, col: 43, offset: 52527},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1391, col: 43, offset: 52527},
											expr: &ruleRefExpr{
												pos:  position{line: 1391, col: 44, offset: 52528},
												name: "TableCellSeparator",
											},
										},
										&notExpr{
											pos: position{line: 1391, col: 63, offset: 52547},
											expr: &ruleRefExpr{
												pos:  position{line: 1391, col: 64, offset: 52548},
												name: "EOL",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 1391, col: 68, offset: 52552},
											expr: &ruleRefExpr{
												pos:  position{line: 1391, col: 68, offset: 52552},
												name: "WS",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1391, col: 72, offset: 52556},
											name: "InlineElement",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1391, col: 86, offset: 52570},
											expr: &ruleRefExpr{
												pos:  position{line: 1391, col: 86, offset: 52570},
												name: "WS",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CommentBlockDelimiter",
			pos:  position{line: 1398, col: 1, offset: 52816},
			expr: &litMatcher{
				pos:        position{line: 1398, col: 26, offset: 52841},
				val:        "////",
				ignoreCase: false,
			},
		},
		{
			name: "CommentBlock",
			pos:  position{line: 1400, col: 1, offset: 52849},
			expr: &actionExpr{
				pos: position{line: 1400, col: 17, offset: 52865},
				run: (*parser).callonCommentBlock1,
				expr: &seqExpr{
					pos: position{line: 1400, col: 17, offset: 52865},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1400, col: 17, offset: 52865},
							name: "CommentBlockDelimiter",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1400, col: 39, offset: 52887},
							expr: &ruleRefExpr{
								pos:  position{line: 1400, col: 39, offset: 52887},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1400, col: 43, offset: 52891},
							name: "NEWLINE",
						},
						&labeledExpr{
							pos:   position{line: 1400, col: 51, offset: 52899},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1400, col: 59, offset: 52907},
								expr: &ruleRefExpr{
									pos:  position{line: 1400, col: 60, offset: 52908},
									name: "CommentBlockLine",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1400, col: 81, offset: 52929},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 1400, col: 82, offset: 52930},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1400, col: 82, offset: 52930},
											name: "CommentBlockDelimiter",
										},
										&ruleRefExpr{
											pos:  position{line: 1400, col: 104, offset: 52952},
											name: "EOLS",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1400, col: 112, offset: 52960},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CommentBlockLine",
			pos:  position{line: 1404, col: 1, offset: 53066},
			expr: &actionExpr{
				pos: position{line: 1404, col: 21, offset: 53086},
				run: (*parser).callonCommentBlockLine1,
				expr: &seqExpr{
					pos: position{line: 1404, col: 21, offset: 53086},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 1404, col: 21, offset: 53086},
							expr: &choiceExpr{
								pos: position{line: 1404, col: 22, offset: 53087},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1404, col: 22, offset: 53087},
										name: "Alphanums",
									},
									&ruleRefExpr{
										pos:  position{line: 1404, col: 34, offset: 53099},
										name: "Spaces",
									},
									&seqExpr{
										pos: position{line: 1404, col: 44, offset: 53109},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1404, col: 44, offset: 53109},
												expr: &ruleRefExpr{
													pos:  position{line: 1404, col: 45, offset: 53110},
													name: "CommentBlockDelimiter",
												},
											},
											&notExpr{
												pos: position{line: 1404, col: 67, offset: 53132},
												expr: &ruleRefExpr{
													pos:  position{line: 1404, col: 68, offset: 53133},
													name: "EOL",
												},
											},
											&anyMatcher{
												line: 1404, col: 73, offset: 53138,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1404, col: 78, offset: 53143},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1408, col: 1, offset: 53183},
			expr: &actionExpr{
				pos: position{line: 1408, col: 22, offset: 53204},
				run: (*parser).callonSingleLineComment1,
				expr: &seqExpr{
					pos: position{line: 1408, col: 22, offset: 53204},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1408, col: 22, offset: 53204},
							expr: &ruleRefExpr{
								pos:  position{line: 1408, col: 23, offset: 53205},
								name: "CommentBlockDelimiter",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1408, col: 45, offset: 53227},
							expr: &ruleRefExpr{
								pos:  position{line: 1408, col: 45, offset: 53227},
								name: "WS",
							},
						},
						&litMatcher{
							pos:        position{line: 1408, col: 49, offset: 53231},
							val:        "//",
							ignoreCase: false,
						},
						&labeledExpr{
							pos:   position{line: 1408, col: 54, offset: 53236},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1408, col: 63, offset: 53245},
								name: "SingleLineCommentContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1408, col: 89, offset: 53271},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SingleLineCommentContent",
			pos:  position{line: 1412, col: 1, offset: 53336},
			expr: &actionExpr{
				pos: position{line: 1412, col: 29, offset: 53364},
				run: (*parser).callonSingleLineCommentContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1412, col: 29, offset: 53364},
					expr: &choiceExpr{
						pos: position{line: 1412, col: 30, offset: 53365},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1412, col: 30, offset: 53365},
								name: "Alphanums",
							},
							&ruleRefExpr{
								pos:  position{line: 1412, col: 42, offset: 53377},
								name: "Spaces",
							},
							&seqExpr{
								pos: position{line: 1412, col: 52, offset: 53387},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1412, col: 52, offset: 53387},
										expr: &ruleRefExpr{
											pos:  position{line: 1412, col: 53, offset: 53388},
											name: "EOL",
										},
									},
									&anyMatcher{
										line: 1412, col: 58, offset: 53393,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralBlock",
			pos:  position{line: 1420, col: 1, offset: 53702},
			expr: &choiceExpr{
				pos: position{line: 1420, col: 17, offset: 53718},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1420, col: 17, offset: 53718},
						name: "ParagraphWithLiteralAttribute",
					},
					&ruleRefExpr{
						pos:  position{line: 1420, col: 49, offset: 53750},
						name: "ParagraphWithHeadingSpaces",
					},
					&ruleRefExpr{
						pos:  position{line: 1420, col: 78, offset: 53779},
						name: "ParagraphWithLiteralBlockDelimiter",
					},
				},
			},
		},
		{
			name: "LiteralBlockDelimiter",
			pos:  position{line: 1422, col: 1, offset: 53815},
			expr: &litMatcher{
				pos:        position{line: 1422, col: 26, offset: 53840},
				val:        "....",
				ignoreCase: false,
			},
		},
		{
			name: "ParagraphWithHeadingSpaces",
			pos:  position{line: 1425, col: 1, offset: 53912},
			expr: &actionExpr{
				pos: position{line: 1425, col: 31, offset: 53942},
				run: (*parser).callonParagraphWithHeadingSpaces1,
				expr: &seqExpr{
					pos: position{line: 1425, col: 31, offset: 53942},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1425, col: 31, offset: 53942},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1425, col: 42, offset: 53953},
								expr: &ruleRefExpr{
									pos:  position{line: 1425, col: 43, offset: 53954},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1425, col: 63, offset: 53974},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1425, col: 70, offset: 53981},
								name: "ParagraphWithHeadingSpacesLines",
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithHeadingSpacesLines",
			pos:  position{line: 1430, col: 1, offset: 54211},
			expr: &actionExpr{
				pos: position{line: 1431, col: 5, offset: 54251},
				run: (*parser).callonParagraphWithHeadingSpacesLines1,
				expr: &seqExpr{
					pos: position{line: 1431, col: 5, offset: 54251},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1431, col: 5, offset: 54251},
							label: "firstLine",
							expr: &actionExpr{
								pos: position{line: 1431, col: 16, offset: 54262},
								run: (*parser).callonParagraphWithHeadingSpacesLines4,
								expr: &seqExpr{
									pos: position{line: 1431, col: 16, offset: 54262},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1431, col: 16, offset: 54262},
											name: "WS",
										},
										&oneOrMoreExpr{
											pos: position{line: 1431, col: 19, offset: 54265},
											expr: &choiceExpr{
												pos: position{line: 1431, col: 20, offset: 54266},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 1431, col: 20, offset: 54266},
														name: "Alphanums",
													},
													&ruleRefExpr{
														pos:  position{line: 1431, col: 32, offset: 54278},
														name: "Spaces",
													},
													&actionExpr{
														pos: position{line: 1431, col: 41, offset: 54287},
														run: (*parser).callonParagraphWithHeadingSpacesLines11,
														expr: &seqExpr{
															pos: position{line: 1431, col: 42, offset: 54288},
															exprs: []interface{}{
																&notExpr{
																	pos: position{line: 1431, col: 42, offset: 54288},
																	expr: &ruleRefExpr{
																		pos:  position{line: 1431, col: 43, offset: 54289},
																		name: "EOL",
																	},
																},
																&anyMatcher{
																	line: 1431, col: 48, offset: 54294,
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1435, col: 8, offset: 54385},
							name: "EOL",
						},
						&labeledExpr{
							pos:   position{line: 1436, col: 5, offset: 54448},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1436, col: 16, offset: 54459},
								expr: &actionExpr{
									pos: position{line: 1437, col: 9, offset: 54469},
									run: (*parser).callonParagraphWithHeadingSpacesLines19,
									expr: &seqExpr{
										pos: position{line: 1437, col: 9, offset: 54469},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1437, col: 9, offset: 54469},
												expr: &ruleRefExpr{
													pos:  position{line: 1437, col: 10, offset: 54470},
													name: "BlankLine",
												},
											},
											&labeledExpr{
												pos:   position{line: 1438, col: 9, offset: 54489},
												label: "otherLine",
												expr: &actionExpr{
													pos: position{line: 1438, col: 20, offset: 54500},
													run: (*parser).callonParagraphWithHeadingSpacesLines24,
													expr: &oneOrMoreExpr{
														pos: position{line: 1438, col: 20, offset: 54500},
														expr: &choiceExpr{
															pos: position{line: 1438, col: 21, offset: 54501},
															alternatives: []interface{}{
																&ruleRefExpr{
																	pos:  position{line: 1438, col: 21, offset: 54501},
																	name: "Alphanums",
																},
																&ruleRefExpr{
																	pos:  position{line: 1438, col: 33, offset: 54513},
																	name: "Spaces",
																},
																&seqExpr{
																	pos: position{line: 1438, col: 43, offset: 54523},
																	exprs: []interface{}{
																		&notExpr{
																			pos: position{line: 1438, col: 43, offset: 54523},
																			expr: &ruleRefExpr{
																				pos:  position{line: 1438, col: 44, offset: 54524},
																				name: "EOL",
																			},
																		},
																		&anyMatcher{
																			line: 1438, col: 49, offset: 54529,
																		},
																	},
																},
															},
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 1440, col: 12, offset: 54586},
												name: "EOL",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiter",
			pos:  position{line: 1447, col: 1, offset: 54816},
			expr: &actionExpr{
				pos: position{line: 1447, col: 39, offset: 54854},
				run: (*parser).callonParagraphWithLiteralBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1447, col: 39, offset: 54854},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1447, col: 39, offset: 54854},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1447, col: 50, offset: 54865},
								expr: &ruleRefExpr{
									pos:  position{line: 1447, col: 51, offset: 54866},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1448, col: 9, offset: 54894},
							name: "LiteralBlockDelimiter",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1448, col: 31, offset: 54916},
							expr: &ruleRefExpr{
								pos:  position{line: 1448, col: 31, offset: 54916},
								name: "WS",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1448, col: 35, offset: 54920},
							name: "NEWLINE",
						},
						&labeledExpr{
							pos:   position{line: 1448, col: 43, offset: 54928},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1448, col: 50, offset: 54935},
								name: "ParagraphWithLiteralBlockDelimiterLines",
							},
						},
						&choiceExpr{
							pos: position{line: 1448, col: 92, offset: 54977},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 1448, col: 93, offset: 54978},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1448, col: 93, offset: 54978},
											name: "LiteralBlockDelimiter",
										},
										&ruleRefExpr{
											pos:  position{line: 1448, col: 115, offset: 55000},
											name: "EOLS",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1448, col: 123, offset: 55008},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLines",
			pos:  position{line: 1453, col: 1, offset: 55167},
			expr: &actionExpr{
				pos: position{line: 1453, col: 44, offset: 55210},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLines1,
				expr: &labeledExpr{
					pos:   position{line: 1453, col: 44, offset: 55210},
					label: "lines",
					expr: &zeroOrMoreExpr{
						pos: position{line: 1453, col: 50, offset: 55216},
						expr: &ruleRefExpr{
							pos:  position{line: 1453, col: 51, offset: 55217},
							name: "ParagraphWithLiteralBlockDelimiterLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLine",
			pos:  position{line: 1457, col: 1, offset: 55301},
			expr: &actionExpr{
				pos: position{line: 1458, col: 5, offset: 55356},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLine1,
				expr: &seqExpr{
					pos: position{line: 1458, col: 5, offset: 55356},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1458, col: 5, offset: 55356},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1458, col: 11, offset: 55362},
								run: (*parser).callonParagraphWithLiteralBlockDelimiterLine4,
								expr: &zeroOrMoreExpr{
									pos: position{line: 1458, col: 11, offset: 55362},
									expr: &choiceExpr{
										pos: position{line: 1458, col: 12, offset: 55363},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1458, col: 12, offset: 55363},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 1458, col: 24, offset: 55375},
												name: "Spaces",
											},
											&seqExpr{
												pos: position{line: 1458, col: 34, offset: 55385},
												exprs: []interface{}{
													&notExpr{
														pos: position{line: 1458, col: 34, offset: 55385},
														expr: &ruleRefExpr{
															pos:  position{line: 1458, col: 35, offset: 55386},
															name: "LiteralBlockDelimiter",
														},
													},
													&notExpr{
														pos: position{line: 1458, col: 57, offset: 55408},
														expr: &ruleRefExpr{
															pos:  position{line: 1458, col: 58, offset: 55409},
															name: "EOL",
														},
													},
													&anyMatcher{
														line: 1458, col: 62, offset: 55413,
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1460, col: 8, offset: 55462},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttribute",
			pos:  position{line: 1465, col: 1, offset: 55588},
			expr: &actionExpr{
				pos: position{line: 1466, col: 5, offset: 55626},
				run: (*parser).callonParagraphWithLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 1466, col: 5, offset: 55626},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1466, col: 5, offset: 55626},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1466, col: 16, offset: 55637},
								expr: &ruleRefExpr{
									pos:  position{line: 1466, col: 17, offset: 55638},
									name: "ElementAttributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1467, col: 5, offset: 55662},
							run: (*parser).callonParagraphWithLiteralAttribute6,
						},
						&labeledExpr{
							pos:   position{line: 1474, col: 5, offset: 55876},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1474, col: 12, offset: 55883},
								name: "ParagraphWithLiteralAttributeLines",
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralKind",
			pos:  position{line: 1478, col: 1, offset: 56033},
			expr: &actionExpr{
				pos: position{line: 1478, col: 16, offset: 56048},
				run: (*parser).callonLiteralKind1,
				expr: &litMatcher{
					pos:        position{line: 1478, col: 16, offset: 56048},
					val:        "literal",
					ignoreCase: false,
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttributeLines",
			pos:  position{line: 1483, col: 1, offset: 56131},
			expr: &actionExpr{
				pos: position{line: 1483, col: 39, offset: 56169},
				run: (*parser).callonParagraphWithLiteralAttributeLines1,
				expr: &labeledExpr{
					pos:   position{line: 1483, col: 39, offset: 56169},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1483, col: 45, offset: 56175},
						expr: &ruleRefExpr{
							pos:  position{line: 1483, col: 46, offset: 56176},
							name: "ParagraphWithLiteralAttributeLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttributeLine",
			pos:  position{line: 1487, col: 1, offset: 56256},
			expr: &actionExpr{
				pos: position{line: 1487, col: 38, offset: 56293},
				run: (*parser).callonParagraphWithLiteralAttributeLine1,
				expr: &seqExpr{
					pos: position{line: 1487, col: 38, offset: 56293},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1487, col: 38, offset: 56293},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1487, col: 44, offset: 56299},
								run: (*parser).callonParagraphWithLiteralAttributeLine4,
								expr: &seqExpr{
									pos: position{line: 1487, col: 44, offset: 56299},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1487, col: 44, offset: 56299},
											expr: &ruleRefExpr{
												pos:  position{line: 1487, col: 46, offset: 56301},
												name: "BlankLine",
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 1487, col: 57, offset: 56312},
											expr: &choiceExpr{
												pos: position{line: 1487, col: 58, offset: 56313},
												alternatives: []interface{}{
													&ruleRefExpr{
														pos:  position{line: 1487, col: 58, offset: 56313},
														name: "Alphanums",
													},
													&ruleRefExpr{
														pos:  position{line: 1487, col: 70, offset: 56325},
														name: "Spaces",
													},
													&seqExpr{
														pos: position{line: 1487, col: 80, offset: 56335},
														exprs: []interface{}{
															&notExpr{
																pos: position{line: 1487, col: 80, offset: 56335},
																expr: &ruleRefExpr{
																	pos:  position{line: 1487, col: 81, offset: 56336},
																	name: "EOL",
																},
															},
															&anyMatcher{
																line: 1487, col: 86, offset: 56341,
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1489, col: 4, offset: 56382},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "BlankLine",
			pos:  position{line: 1496, col: 1, offset: 56554},
			expr: &actionExpr{
				pos: position{line: 1496, col: 14, offset: 56567},
				run: (*parser).callonBlankLine1,
				expr: &seqExpr{
					pos: position{line: 1496, col: 14, offset: 56567},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1496, col: 14, offset: 56567},
							expr: &ruleRefExpr{
								pos:  position{line: 1496, col: 15, offset: 56568},
								name: "EOF",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1496, col: 19, offset: 56572},
							name: "EOLS",
						},
					},
				},
			},
		},
		{
			name: "Alphanum",
			pos:  position{line: 1503, col: 1, offset: 56720},
			expr: &charClassMatcher{
				pos:        position{line: 1503, col: 13, offset: 56732},
				val:        "[\\pL0-9]",
				ranges:     []rune{'0', '9'},
				classes:    []*unicode.RangeTable{rangeTable("L")},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Parenthesis",
			pos:  position{line: 1505, col: 1, offset: 56742},
			expr: &choiceExpr{
				pos: position{line: 1505, col: 16, offset: 56757},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1505, col: 16, offset: 56757},
						val:        "(",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1505, col: 22, offset: 56763},
						val:        ")",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1505, col: 28, offset: 56769},
						val:        "[",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1505, col: 34, offset: 56775},
						val:        "]",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "Alphanums",
			pos:  position{line: 1507, col: 1, offset: 56780},
			expr: &actionExpr{
				pos: position{line: 1507, col: 14, offset: 56793},
				run: (*parser).callonAlphanums1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1507, col: 14, offset: 56793},
					expr: &charClassMatcher{
						pos:        position{line: 1507, col: 14, offset: 56793},
						val:        "[\\pL0-9]",
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Dot",
			pos:  position{line: 1511, col: 1, offset: 56839},
			expr: &litMatcher{
				pos:        position{line: 1511, col: 8, offset: 56846},
				val:        ".",
				ignoreCase: false,
			},
		},
		{
			name: "SimpleWord",
			pos:  position{line: 1513, col: 1, offset: 56851},
			expr: &actionExpr{
				pos: position{line: 1513, col: 15, offset: 56865},
				run: (*parser).callonSimpleWord1,
				expr: &seqExpr{
					pos: position{line: 1513, col: 15, offset: 56865},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1513, col: 15, offset: 56865},
							name: "Alphanums",
						},
						&andExpr{
							pos: position{line: 1513, col: 25, offset: 56875},
							expr: &choiceExpr{
								pos: position{line: 1513, col: 27, offset: 56877},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1513, col: 27, offset: 56877},
										name: "WS",
									},
									&ruleRefExpr{
										pos:  position{line: 1513, col: 32, offset: 56882},
										name: "EOL",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OtherWord",
			pos:  position{line: 1518, col: 1, offset: 57147},
			expr: &actionExpr{
				pos: position{line: 1518, col: 14, offset: 57160},
				run: (*parser).callonOtherWord1,
				expr: &choiceExpr{
					pos: position{line: 1518, col: 15, offset: 57161},
					alternatives: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1518, col: 15, offset: 57161},
							name: "Alphanums",
						},
						&ruleRefExpr{
							pos:  position{line: 1518, col: 27, offset: 57173},
							name: "QuotedTextPrefix",
						},
						&ruleRefExpr{
							pos:  position{line: 1518, col: 46, offset: 57192},
							name: "Parenthesis",
						},
						&oneOrMoreExpr{
							pos: position{line: 1518, col: 60, offset: 57206},
							expr: &actionExpr{
								pos: position{line: 1518, col: 61, offset: 57207},
								run: (*parser).callonOtherWord7,
								expr: &seqExpr{
									pos: position{line: 1518, col: 61, offset: 57207},
									exprs: []interface{}{
										&seqExpr{
											pos: position{line: 1518, col: 62, offset: 57208},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1518, col: 62, offset: 57208},
													expr: &ruleRefExpr{
														pos:  position{line: 1518, col: 63, offset: 57209},
														name: "NEWLINE",
													},
												},
												&notExpr{
													pos: position{line: 1518, col: 71, offset: 57217},
													expr: &ruleRefExpr{
														pos:  position{line: 1518, col: 72, offset: 57218},
														name: "WS",
													},
												},
												&notExpr{
													pos: position{line: 1518, col: 75, offset: 57221},
													expr: &ruleRefExpr{
														pos:  position{line: 1518, col: 76, offset: 57222},
														name: "Dot",
													},
												},
												&notExpr{
													pos: position{line: 1518, col: 80, offset: 57226},
													expr: &ruleRefExpr{
														pos:  position{line: 1518, col: 81, offset: 57227},
														name: "QuotedTextPrefix",
													},
												},
												&anyMatcher{
													line: 1518, col: 98, offset: 57244,
												},
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 1518, col: 101, offset: 57247},
											expr: &ruleRefExpr{
												pos:  position{line: 1518, col: 101, offset: 57247},
												name: "Dot",
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1520, col: 7, offset: 57356},
							expr: &litMatcher{
								pos:        position{line: 1520, col: 7, offset: 57356},
								val:        ".",
								ignoreCase: false,
							},
						},
					},
				},
			},
		},
		{
			name: "Spaces",
			pos:  position{line: 1524, col: 1, offset: 57537},
			expr: &oneOrMoreExpr{
				pos: position{line: 1524, col: 11, offset: 57547},
				expr: &ruleRefExpr{
					pos:  position{line: 1524, col: 11, offset: 57547},
					name: "WS",
				},
			},
		},
		{
			name: "FileLocation",
			pos:  position{line: 1526, col: 1, offset: 57553},
			expr: &actionExpr{
				pos: position{line: 1526, col: 17, offset: 57569},
				run: (*parser).callonFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 1526, col: 17, offset: 57569},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1526, col: 26, offset: 57578},
						expr: &choiceExpr{
							pos: position{line: 1526, col: 27, offset: 57579},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1526, col: 27, offset: 57579},
									name: "FILENAME",
								},
								&ruleRefExpr{
									pos:  position{line: 1526, col: 38, offset: 57590},
									name: "DocumentAttributeSubstitution",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Location",
			pos:  position{line: 1530, col: 1, offset: 57682},
			expr: &actionExpr{
				pos: position{line: 1530, col: 13, offset: 57694},
				run: (*parser).callonLocation1,
				expr: &labeledExpr{
					pos:   position{line: 1530, col: 13, offset: 57694},
					label: "elements",
					expr: &seqExpr{
						pos: position{line: 1530, col: 23, offset: 57704},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1530, col: 23, offset: 57704},
								name: "URL_SCHEME",
							},
							&oneOrMoreExpr{
								pos: position{line: 1530, col: 34, offset: 57715},
								expr: &choiceExpr{
									pos: position{line: 1530, col: 35, offset: 57716},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1530, col: 35, offset: 57716},
											name: "FILENAME",
										},
										&ruleRefExpr{
											pos:  position{line: 1530, col: 46, offset: 57727},
											name: "DocumentAttributeSubstitution",
										},
										&seqExpr{
											pos: position{line: 1530, col: 78, offset: 57759},
											exprs: []interface{}{
												&notExpr{
													pos: position{line: 1530, col: 78, offset: 57759},
													expr: &ruleRefExpr{
														pos:  position{line: 1530, col: 79, offset: 57760},
														name: "EOL",
													},
												},
												&notExpr{
													pos: position{line: 1530, col: 83, offset: 57764},
													expr: &litMatcher{
														pos:        position{line: 1530, col: 84, offset: 57765},
														val:        "[",
														ignoreCase: false,
													},
												},
												&anyMatcher{
													line: 1530, col: 88, offset: 57769,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FILENAME",
			pos:  position{line: 1534, col: 1, offset: 57834},
			expr: &oneOrMoreExpr{
				pos: position{line: 1534, col: 13, offset: 57846},
				expr: &choiceExpr{
					pos: position{line: 1534, col: 14, offset: 57847},
					alternatives: []interface{}{
						&charClassMatcher{
							pos:        position{line: 1534, col: 14, offset: 57847},
							val:        "[ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789~:/?#@!$&;=()*+,_%]",
							chars:      []rune{'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '~', ':', '/', '?', '#', '@', '!', '$', '&', ';', '=', '(', ')', '*', '+', ',', '_', '%'},
							ignoreCase: false,
							inverted:   false,
						},
						&litMatcher{
							pos:        position{line: 1534, col: 99, offset: 57932},
							val:        "-",
							ignoreCase: false,
						},
						&litMatcher{
							pos:        position{line: 1534, col: 105, offset: 57938},
							val:        ".",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "URL",
			pos:  position{line: 1536, col: 1, offset: 57979},
			expr: &actionExpr{
				pos: position{line: 1536, col: 8, offset: 57986},
				run: (*parser).callonURL1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1536, col: 8, offset: 57986},
					expr: &choiceExpr{
						pos: position{line: 1536, col: 9, offset: 57987},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1536, col: 9, offset: 57987},
								name: "Alphanums",
							},
							&seqExpr{
								pos: position{line: 1536, col: 22, offset: 58000},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1536, col: 22, offset: 58000},
										expr: &ruleRefExpr{
											pos:  position{line: 1536, col: 23, offset: 58001},
											name: "NEWLINE",
										},
									},
									&notExpr{
										pos: position{line: 1536, col: 31, offset: 58009},
										expr: &ruleRefExpr{
											pos:  position{line: 1536, col: 32, offset: 58010},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 1536, col: 35, offset: 58013},
										expr: &litMatcher{
											pos:        position{line: 1536, col: 36, offset: 58014},
											val:        "[",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1536, col: 40, offset: 58018},
										expr: &litMatcher{
											pos:        position{line: 1536, col: 41, offset: 58019},
											val:        "]",
											ignoreCase: false,
										},
									},
									&anyMatcher{
										line: 1536, col: 46, offset: 58024,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "URL_SCHEME",
			pos:  position{line: 1540, col: 1, offset: 58065},
			expr: &choiceExpr{
				pos: position{line: 1540, col: 15, offset: 58079},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1540, col: 15, offset: 58079},
						val:        "http://",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1540, col: 27, offset: 58091},
						val:        "https://",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1540, col: 40, offset: 58104},
						val:        "ftp://",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1540, col: 51, offset: 58115},
						val:        "irc://",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1540, col: 62, offset: 58126},
						val:        "mailto:",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "ID",
			pos:  position{line: 1542, col: 1, offset: 58137},
			expr: &actionExpr{
				pos: position{line: 1542, col: 7, offset: 58143},
				run: (*parser).callonID1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1542, col: 7, offset: 58143},
					expr: &choiceExpr{
						pos: position{line: 1542, col: 8, offset: 58144},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1542, col: 8, offset: 58144},
								name: "Alphanums",
							},
							&seqExpr{
								pos: position{line: 1542, col: 21, offset: 58157},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1542, col: 21, offset: 58157},
										expr: &ruleRefExpr{
											pos:  position{line: 1542, col: 22, offset: 58158},
											name: "NEWLINE",
										},
									},
									&notExpr{
										pos: position{line: 1542, col: 30, offset: 58166},
										expr: &ruleRefExpr{
											pos:  position{line: 1542, col: 31, offset: 58167},
											name: "WS",
										},
									},
									&notExpr{
										pos: position{line: 1542, col: 34, offset: 58170},
										expr: &litMatcher{
											pos:        position{line: 1542, col: 35, offset: 58171},
											val:        "[",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1542, col: 39, offset: 58175},
										expr: &litMatcher{
											pos:        position{line: 1542, col: 40, offset: 58176},
											val:        "]",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1542, col: 44, offset: 58180},
										expr: &litMatcher{
											pos:        position{line: 1542, col: 45, offset: 58181},
											val:        "<<",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1542, col: 50, offset: 58186},
										expr: &litMatcher{
											pos:        position{line: 1542, col: 51, offset: 58187},
											val:        ">>",
											ignoreCase: false,
										},
									},
									&notExpr{
										pos: position{line: 1542, col: 56, offset: 58192},
										expr: &litMatcher{
											pos:        position{line: 1542, col: 57, offset: 58193},
											val:        ",",
											ignoreCase: false,
										},
									},
									&anyMatcher{
										line: 1542, col: 62, offset: 58198,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DIGIT",
			pos:  position{line: 1546, col: 1, offset: 58239},
			expr: &actionExpr{
				pos: position{line: 1546, col: 10, offset: 58248},
				run: (*parser).callonDIGIT1,
				expr: &charClassMatcher{
					pos:        position{line: 1546, col: 10, offset: 58248},
					val:        "[0-9]",
					ranges:     []rune{'0', '9'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "NUMBER",
			pos:  position{line: 1550, col: 1, offset: 58290},
			expr: &actionExpr{
				pos: position{line: 1550, col: 11, offset: 58300},
				run: (*parser).callonNUMBER1,
				expr: &seqExpr{
					pos: position{line: 1550, col: 11, offset: 58300},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1550, col: 11, offset: 58300},
							expr: &litMatcher{
								pos:        position{line: 1550, col: 11, offset: 58300},
								val:        "-",
								ignoreCase: false,
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1550, col: 16, offset: 58305},
							expr: &ruleRefExpr{
								pos:  position{line: 1550, col: 16, offset: 58305},
								name: "DIGIT",
							},
						},
					},
				},
			},
		},
		{
			name: "WS",
			pos:  position{line: 1554, col: 1, offset: 58357},
			expr: &choiceExpr{
				pos: position{line: 1554, col: 7, offset: 58363},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1554, col: 7, offset: 58363},
						val:        " ",
						ignoreCase: false,
					},
					&actionExpr{
						pos: position{line: 1554, col: 13, offset: 58369},
						run: (*parser).callonWS3,
						expr: &litMatcher{
							pos:        position{line: 1554, col: 13, offset: 58369},
							val:        "\t",
							ignoreCase: false,
						},
					},
				},
			},
		},
		{
			name: "NEWLINE",
			pos:  position{line: 1558, col: 1, offset: 58410},
			expr: &choiceExpr{
				pos: position{line: 1558, col: 12, offset: 58421},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1558, col: 12, offset: 58421},
						val:        "\r\n",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1558, col: 21, offset: 58430},
						val:        "\r",
						ignoreCase: false,
					},
					&litMatcher{
						pos:        position{line: 1558, col: 28, offset: 58437},
						val:        "\n",
						ignoreCase: false,
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 1560, col: 1, offset: 58443},
			expr: &notExpr{
				pos: position{line: 1560, col: 8, offset: 58450},
				expr: &anyMatcher{
					line: 1560, col: 9, offset: 58451,
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 1562, col: 1, offset: 58454},
			expr: &choiceExpr{
				pos: position{line: 1562, col: 8, offset: 58461},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1562, col: 8, offset: 58461},
						name: "NEWLINE",
					},
					&ruleRefExpr{
						pos:  position{line: 1562, col: 18, offset: 58471},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "EOLS",
			pos:  position{line: 1564, col: 1, offset: 58476},
			expr: &seqExpr{
				pos: position{line: 1564, col: 9, offset: 58484},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1564, col: 9, offset: 58484},
						expr: &ruleRefExpr{
							pos:  position{line: 1564, col: 9, offset: 58484},
							name: "WS",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1564, col: 13, offset: 58488},
						name: "EOL",
					},
				},
			},
		},
	},
}

func (c *current) onPreflightAsciidocDocument1(frontmatter, blocks interface{}) (interface{}, error) {
	return types.NewPreflightDocument(frontmatter, blocks.([]interface{}))
}

func (p *parser) callonPreflightAsciidocDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPreflightAsciidocDocument1(stack["frontmatter"], stack["blocks"])
}

func (c *current) onPreflightAsciidocDocumentWithinDelimitedBlock1(frontmatter, blocks interface{}) (interface{}, error) {
	return types.NewPreflightDocument(frontmatter, blocks.([]interface{}))
}

func (p *parser) callonPreflightAsciidocDocumentWithinDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPreflightAsciidocDocumentWithinDelimitedBlock1(stack["frontmatter"], stack["blocks"])
}

func (c *current) onPreflightTextDocument1(blocks interface{}) (interface{}, error) {
	return types.NewPreflightDocument(nil, blocks.([]interface{}))
}

func (p *parser) callonPreflightTextDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPreflightTextDocument1(stack["blocks"])
}

func (c *current) onAsciidocDocumentBlocks1(header, others interface{}) (interface{}, error) {
	if header != nil && others != nil {
		return append([]interface{}{header}, others.([]interface{})...), nil
	} else if others != nil {
		return others.([]interface{}), nil
	}
	return []interface{}{}, nil
}

func (p *parser) callonAsciidocDocumentBlocks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsciidocDocumentBlocks1(stack["header"], stack["others"])
}

func (c *current) onDocumentBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDocumentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlock1(stack["block"])
}

func (c *current) onDocumentBlockWithinDelimitedBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDocumentBlockWithinDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlockWithinDelimitedBlock1(stack["block"])
}

func (c *current) onTextDocumentBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonTextDocumentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextDocumentBlock1(stack["block"])
}

func (c *current) onYamlFrontMatter1(content interface{}) (interface{}, error) {
	return types.NewYamlFrontMatter(content.(string))
}

func (p *parser) callonYamlFrontMatter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatter1(stack["content"])
}

func (c *current) onYamlFrontMatterContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonYamlFrontMatterContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatterContent1()
}

func (c *current) onDocumentHeader1(title, id, authors, revision interface{}) (interface{}, error) {
	return types.NewDocumentHeader(title.(types.InlineElements), authors, revision)
}

func (p *parser) callonDocumentHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader1(stack["title"], stack["id"], stack["authors"], stack["revision"])
}

func (c *current) onDocumentAuthorsInlineForm1(authors interface{}) (interface{}, error) {
	return types.NewDocumentAuthors(authors.([]interface{}))
}

func (p *parser) callonDocumentAuthorsInlineForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsInlineForm1(stack["authors"])
}

func (c *current) onDocumentAuthorsAttributeForm1(author interface{}) (interface{}, error) {
	return []types.DocumentAuthor{author.(types.DocumentAuthor)}, nil
}

func (p *parser) callonDocumentAuthorsAttributeForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsAttributeForm1(stack["author"])
}

func (c *current) onDocumentAuthor1(fullname, email interface{}) (interface{}, error) {
	return types.NewDocumentAuthor(fullname, email)
}

func (p *parser) callonDocumentAuthor1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthor1(stack["fullname"], stack["email"])
}

func (c *current) onDocumentAuthorName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorName1()
}

func (c *current) onDocumentAuthorEmail5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorEmail5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail5()
}

func (c *current) onDocumentAuthorEmail1(email interface{}) (interface{}, error) {
	return email, nil
}

func (p *parser) callonDocumentAuthorEmail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail1(stack["email"])
}

func (c *current) onDocumentRevision9(revnumber, revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(revnumber, revdate, revremark)

}

func (p *parser) callonDocumentRevision9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision9(stack["revnumber"], stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision23(revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(nil, revdate, revremark)

}

func (p *parser) callonDocumentRevision23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision23(stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision1(revision interface{}) (interface{}, error) {
	return revision, nil
}

func (p *parser) callonDocumentRevision1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision1(stack["revision"])
}

func (c *current) onDocumentRevisionNumber2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber2()
}

func (c *current) onDocumentRevisionNumber18() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber18()
}

func (c *current) onDocumentRevisionDate1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionDate1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionDate1()
}

func (c *current) onDocumentRevisionRemark1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionRemark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionRemark1()
}

func (c *current) onDocumentAttributeDeclaration9(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonDocumentAttributeDeclaration9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeDeclaration9(stack["value"])
}

func (c *current) onDocumentAttributeDeclaration1(name, value interface{}) (interface{}, error) {
	return types.NewDocumentAttributeDeclaration(name.(string), value)
}

func (p *parser) callonDocumentAttributeDeclaration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeDeclaration1(stack["name"], stack["value"])
}

func (c *current) onDocumentAttributeName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAttributeName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeName1()
}

func (c *current) onDocumentAttributeValue1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeValue1()
}

func (c *current) onDocumentAttributeReset2(name interface{}) (interface{}, error) {
	return types.NewDocumentAttributeReset(name.(string))
}

func (p *parser) callonDocumentAttributeReset2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeReset2(stack["name"])
}

func (c *current) onDocumentAttributeReset9(name interface{}) (interface{}, error) {
	return types.NewDocumentAttributeReset(name.(string))
}

func (p *parser) callonDocumentAttributeReset9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeReset9(stack["name"])
}

func (c *current) onDocumentAttributeSubstitution1(name interface{}) (interface{}, error) {
	return types.NewDocumentAttributeSubstitution(name.(string))
}

func (p *parser) callonDocumentAttributeSubstitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeSubstitution1(stack["name"])
}

func (c *current) onElementAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewElementAttributes(attrs.([]interface{})), nil
}

func (p *parser) callonElementAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributes1(stack["attrs"])
}

func (c *current) onElementAttribute1(attr interface{}) (interface{}, error) {
	return attr, nil // avoid returning something like `[]interface{}{attr, EOL}`
}

func (p *parser) callonElementAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttribute1(stack["attr"])
}

func (c *current) onElementID2(id interface{}) (interface{}, error) {
	return types.NewElementID(id.(string))
}

func (p *parser) callonElementID2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementID2(stack["id"])
}

func (c *current) onElementID9(id interface{}) (interface{}, error) {
	return types.NewElementID(id.(string))
}

func (p *parser) callonElementID9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementID9(stack["id"])
}

func (c *current) onInlineElementID1(id interface{}) (interface{}, error) {
	// no EOL here since there can be multiple InlineElementID on the same line
	return types.NewInlineElementID(id.(string))
}

func (p *parser) callonInlineElementID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementID1(stack["id"])
}

func (c *current) onElementTitle5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonElementTitle5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitle5()
}

func (c *current) onElementTitle1(title interface{}) (interface{}, error) {
	return types.NewElementTitle(title.(string))
}

func (p *parser) callonElementTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitle1(stack["title"])
}

func (c *current) onElementRole5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonElementRole5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementRole5()
}

func (c *current) onElementRole1(role interface{}) (interface{}, error) {
	return types.NewElementRole(role.(string))
}

func (p *parser) callonElementRole1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementRole1(stack["role"])
}

func (c *current) onLiteralAttribute1() (interface{}, error) {
	return types.NewLiteralAttribute()
}

func (p *parser) callonLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralAttribute1()
}

func (c *current) onAdmonitionMarkerAttribute1(k interface{}) (interface{}, error) {
	return types.NewAdmonitionAttribute(k.(types.AdmonitionKind))
}

func (p *parser) callonAdmonitionMarkerAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionMarkerAttribute1(stack["k"])
}

func (c *current) onSourceAttributes8() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonSourceAttributes8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes8()
}

func (c *current) onSourceAttributes1(language interface{}) (interface{}, error) {
	return types.NewSourceAttributes(language)
}

func (p *parser) callonSourceAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes1(stack["language"])
}

func (c *current) onAttributeGroup1(attributes interface{}) (interface{}, error) {
	return types.NewAttributeGroup(attributes.([]interface{}))
}

func (p *parser) callonAttributeGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeGroup1(stack["attributes"])
}

func (c *current) onGenericAttribute2(key, value interface{}) (interface{}, error) {
	// value is (optionally) set
	return types.NewGenericAttribute(key.(string), value)

}

func (p *parser) callonGenericAttribute2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttribute2(stack["key"], stack["value"])
}

func (c *current) onGenericAttribute14(key interface{}) (interface{}, error) {
	// value is not set
	return types.NewGenericAttribute(key.(string), nil)

}

func (p *parser) callonGenericAttribute14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttribute14(stack["key"])
}

func (c *current) onAttributeKey1(key interface{}) (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeKey1(stack["key"])
}

func (c *current) onAttributeValue1(value interface{}) (interface{}, error) {
	// attribute value cannot be followed by a `=`, otherwise it causes troubles for standalone values (eg: in images)
	return string(c.text), nil
}

func (p *parser) callonAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue1(stack["value"])
}

func (c *current) onHorizontalLayout1() (interface{}, error) {
	return types.ElementAttributes{"layout": "horizontal"}, nil
}

func (p *parser) callonHorizontalLayout1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHorizontalLayout1()
}

func (c *current) onQuoteAttributes1(author, title interface{}) (interface{}, error) {
	return types.NewQuoteAttributes("quote", author, title)
}

func (p *parser) callonQuoteAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttributes1(stack["author"], stack["title"])
}

func (c *current) onVerseAttributes1(author, title interface{}) (interface{}, error) {
	return types.NewQuoteAttributes("verse", author.(string), title.(string))
}

func (p *parser) callonVerseAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseAttributes1(stack["author"], stack["title"])
}

func (c *current) onQuoteAttribute1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttribute1()
}

func (c *current) onInlineAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewInlineAttributes(attrs.([]interface{}))
}

func (p *parser) callonInlineAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAttributes1(stack["attrs"])
}

func (c *current) onSection7() (interface{}, error) {

	// `=` is level 0, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonSection7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection7()
}

func (c *current) onSection10(attributes, level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonSection10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection10(stack["attributes"], stack["level"])
}

func (c *current) onSection1(attributes, level, title, id interface{}) (interface{}, error) {
	return types.NewSection(level.(int), title.(types.InlineElements), id.([]interface{}), attributes)
}

func (p *parser) callonSection1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection1(stack["attributes"], stack["level"], stack["title"], stack["id"])
}

func (c *current) onTitleElements1(elements interface{}) (interface{}, error) {
	// absorbs heading and trailing spaces
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonTitleElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElements1(stack["elements"])
}

func (c *current) onTitleElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonTitleElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElement1(stack["element"])
}

func (c *current) onUserMacroBlock1(name, value, attrs interface{}) (interface{}, error) {
	return types.NewUserMacroBlock(name.(string), value.(string), attrs.(types.ElementAttributes), string(c.text))
}

func (p *parser) callonUserMacroBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onInlineUserMacro1(name, value, attrs interface{}) (interface{}, error) {
	return types.NewInlineUserMacro(name.(string), value.(string), attrs.(types.ElementAttributes), string(c.text))
}

func (p *parser) callonInlineUserMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onUserMacroName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUserMacroName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroName1()
}

func (c *current) onUserMacroValue1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUserMacroValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroValue1()
}

func (c *current) onUserMacroAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewInlineAttributes(attrs.([]interface{}))
}

func (p *parser) callonUserMacroAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroAttributes1(stack["attrs"])
}

func (c *current) onFileInclusion4(path, inlineAttributes interface{}) (interface{}, error) {

	return types.NewFileInclusion(path.(types.Location), inlineAttributes.(types.ElementAttributes), string(c.text))

}

func (p *parser) callonFileInclusion4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion4(stack["path"], stack["inlineAttributes"])
}

func (c *current) onFileInclusion1(incl interface{}) (interface{}, error) {
	return incl.(types.FileInclusion), nil
}

func (p *parser) callonFileInclusion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion1(stack["incl"])
}

func (c *current) onFileIncludeAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewInlineAttributes(attrs.([]interface{}))
}

func (p *parser) callonFileIncludeAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileIncludeAttributes1(stack["attrs"])
}

func (c *current) onLineRangesAttribute1(lines interface{}) (interface{}, error) {

	return types.NewLineRangesAttribute(lines)
}

func (p *parser) callonLineRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttribute1(stack["lines"])
}

func (c *current) onLineRangesAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonLineRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleLineRanges9(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleLineRanges9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges9(stack["other"])
}

func (c *current) onMultipleLineRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultipleQuotedLineRanges10(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleQuotedLineRanges10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges10(stack["other"])
}

func (c *current) onMultipleQuotedLineRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleQuotedLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultiLineRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineRange1(stack["start"], stack["end"])
}

func (c *current) onMultiLineQuotedRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineQuotedRange1(stack["start"], stack["end"])
}

func (c *current) onSingleLineRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineRange1(stack["singleline"])
}

func (c *current) onSingleLineQuotedRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineQuotedRange1(stack["singleline"])
}

func (c *current) onUndefinedLineRange1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUndefinedLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUndefinedLineRange1()
}

func (c *current) onTagRangesAttribute1(tags interface{}) (interface{}, error) {
	//TODO: check if 'tags'/'tag' is allowed for both single and multiple values
	return types.NewTagRangesAttribute(tags.([]interface{}))
}

func (p *parser) callonTagRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttribute1(stack["tags"])
}

func (c *current) onTagRangesAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonTagRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleTagRanges7(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleTagRanges7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges7(stack["other"])
}

func (c *current) onMultipleTagRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleTagRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges1(stack["first"], stack["others"])
}

func (c *current) onTagRange2(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), true)
}

func (p *parser) callonTagRange2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange2(stack["tag"])
}

func (c *current) onTagRange7(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), false)
}

func (p *parser) callonTagRange7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange7(stack["tag"])
}

func (c *current) onTagWildcard4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagWildcard4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard4()
}

func (c *current) onTagWildcard7(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagWildcard7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard7(stack["stars"])
}

func (c *current) onTagWildcard1(stars interface{}) (interface{}, error) {
	return stars, nil
}

func (p *parser) callonTagWildcard1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard1(stack["stars"])
}

func (c *current) onIncludedFileLine8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine8()
}

func (c *current) onIncludedFileLine1(content interface{}) (interface{}, error) {
	return types.NewIncludedFileLine(content.([]interface{}))
}

func (p *parser) callonIncludedFileLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine1(stack["content"])
}

func (c *current) onIncludedFileStartTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileStartTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag5()
}

func (c *current) onIncludedFileStartTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileStartTag(tag.(string))
}

func (p *parser) callonIncludedFileStartTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag1(stack["tag"])
}

func (c *current) onIncludedFileEndTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileEndTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag5()
}

func (c *current) onIncludedFileEndTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileEndTag(tag.(string))
}

func (p *parser) callonIncludedFileEndTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag1(stack["tag"])
}

func (c *current) onListParagraph2(comment interface{}) (interface{}, error) {
	return comment, nil

}

func (p *parser) callonListParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph2(stack["comment"])
}

func (c *current) onListParagraph5(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), nil)

}

func (p *parser) callonListParagraph5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph5(stack["lines"])
}

func (c *current) onListParagraphLine24(elements, linebreak interface{}) (interface{}, error) {
	// absorbs heading and trailing spaces
	return types.NewInlineElements(append(elements.([]interface{}), linebreak))

}

func (p *parser) callonListParagraphLine24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine24(stack["elements"], stack["linebreak"])
}

func (c *current) onListParagraphLine1(line interface{}) (interface{}, error) {

	return line, nil

}

func (p *parser) callonListParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine1(stack["line"])
}

func (c *current) onContinuedListItemElement1(blanklines, element interface{}) (interface{}, error) {
	return types.NewContinuedListItemElement(-len(blanklines.([]interface{})), element) // offset is negative
}

func (p *parser) callonContinuedListItemElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemElement1(stack["blanklines"], stack["element"])
}

func (c *current) onOrderedListItem1(attributes, prefix, content interface{}) (interface{}, error) {
	return types.NewOrderedListItem(prefix.(types.OrderedListItemPrefix), content.([]interface{}), attributes)
}

func (p *parser) callonOrderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItem1(stack["attributes"], stack["prefix"], stack["content"])
}

func (c *current) onOrderedListItemPrefix10() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonOrderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix10()
}

func (c *current) onOrderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonOrderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix13(stack["depth"])
}

func (c *current) onOrderedListItemPrefix7(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListItemPrefix(types.Arabic, 1)
	case 2:
		return types.NewOrderedListItemPrefix(types.LowerAlpha, 2)
	case 3:
		return types.NewOrderedListItemPrefix(types.LowerRoman, 3)
	case 4:
		return types.NewOrderedListItemPrefix(types.UpperAlpha, 4)
	default:
		return types.NewOrderedListItemPrefix(types.UpperRoman, 5)
	}

}

func (p *parser) callonOrderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix7(stack["depth"])
}

func (c *current) onOrderedListItemPrefix14() (interface{}, error) {
	// numbering style: "1."
	return types.NewOrderedListItemPrefix(types.Arabic, 1)

}

func (p *parser) callonOrderedListItemPrefix14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix14()
}

func (c *current) onOrderedListItemPrefix19() (interface{}, error) {
	// numbering style: "a."
	return types.NewOrderedListItemPrefix(types.LowerAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix19()
}

func (c *current) onOrderedListItemPrefix23() (interface{}, error) {
	// numbering style: "A."
	return types.NewOrderedListItemPrefix(types.UpperAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix23()
}

func (c *current) onOrderedListItemPrefix27() (interface{}, error) {
	// numbering style: "i)"
	return types.NewOrderedListItemPrefix(types.LowerRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix27()
}

func (c *current) onOrderedListItemPrefix32() (interface{}, error) {
	// numbering style: "I)"
	return types.NewOrderedListItemPrefix(types.UpperRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix32()
}

func (c *current) onOrderedListItemPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonOrderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix1(stack["prefix"])
}

func (c *current) onOrderedListItemContent1(elements interface{}) (interface{}, error) {
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonOrderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemContent1(stack["elements"])
}

func (c *current) onUnorderedListItem1(attributes, prefix, checkstyle, content interface{}) (interface{}, error) {
	return types.NewUnorderedListItem(prefix.(types.UnorderedListItemPrefix), checkstyle, content.([]interface{}), attributes)
}

func (p *parser) callonUnorderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItem1(stack["attributes"], stack["prefix"], stack["checkstyle"], stack["content"])
}

func (c *current) onUnorderedListItemPrefix10() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonUnorderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix10()
}

func (c *current) onUnorderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonUnorderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix13(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix7(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListItemPrefix(types.OneAsterisk, 1)
	case 2:
		return types.NewUnorderedListItemPrefix(types.TwoAsterisks, 2)
	case 3:
		return types.NewUnorderedListItemPrefix(types.ThreeAsterisks, 3)
	case 4:
		return types.NewUnorderedListItemPrefix(types.FourAsterisks, 4)
	default:
		return types.NewUnorderedListItemPrefix(types.FiveAsterisks, 5)
	}

}

func (p *parser) callonUnorderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix7(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix15() (interface{}, error) {
	return types.NewUnorderedListItemPrefix(types.Dash, 1)

}

func (p *parser) callonUnorderedListItemPrefix15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix15()
}

func (c *current) onUnorderedListItemPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonUnorderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix1(stack["prefix"])
}

func (c *current) onUnorderedListItemCheckStyle7() (interface{}, error) {
	return types.Unchecked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle7()
}

func (c *current) onUnorderedListItemCheckStyle9() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle9()
}

func (c *current) onUnorderedListItemCheckStyle11() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle11()
}

func (c *current) onUnorderedListItemCheckStyle1(style interface{}) (interface{}, error) {
	return style, nil

}

func (p *parser) callonUnorderedListItemCheckStyle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle1(stack["style"])
}

func (c *current) onUnorderedListItemContent1(elements interface{}) (interface{}, error) {
	// Another list or a literal paragraph immediately following a list item will be implicitly included in the list item
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonUnorderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemContent1(stack["elements"])
}

func (c *current) onLabeledListItem1(attributes, term, separator, description interface{}) (interface{}, error) {
	return types.NewLabeledListItem(len(separator.(string))-1, term.(string), description, attributes)
}

func (p *parser) callonLabeledListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItem1(stack["attributes"], stack["term"], stack["separator"], stack["description"])
}

func (c *current) onLabeledListItemTerm1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTerm1()
}

func (c *current) onLabeledListItemSeparator4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonLabeledListItemSeparator4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator4()
}

func (c *current) onLabeledListItemSeparator7(separator interface{}) (bool, error) {

	// use a predicate to make sure that only `::` to `::::` are allowed
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonLabeledListItemSeparator7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator7(stack["separator"])
}

func (c *current) onLabeledListItemSeparator1(separator interface{}) (interface{}, error) {
	return separator, nil
}

func (p *parser) callonLabeledListItemSeparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator1(stack["separator"])
}

func (c *current) onLabeledListItemDescription1(elements interface{}) (interface{}, error) {

	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemDescription1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemDescription1(stack["elements"])
}

func (c *current) onAdmonitionKind2() (interface{}, error) {
	return types.Tip, nil

}

func (p *parser) callonAdmonitionKind2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind2()
}

func (c *current) onAdmonitionKind4() (interface{}, error) {
	return types.Note, nil

}

func (p *parser) callonAdmonitionKind4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind4()
}

func (c *current) onAdmonitionKind6() (interface{}, error) {
	return types.Important, nil

}

func (p *parser) callonAdmonitionKind6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind6()
}

func (c *current) onAdmonitionKind8() (interface{}, error) {
	return types.Warning, nil

}

func (p *parser) callonAdmonitionKind8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind8()
}

func (c *current) onAdmonitionKind10() (interface{}, error) {
	return types.Caution, nil
}

func (p *parser) callonAdmonitionKind10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind10()
}

func (c *current) onParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onParagraph13(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)
}

func (p *parser) callonParagraph13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph13(stack["attributes"], stack["lines"])
}

func (c *current) onSimpleParagraph6(attributes interface{}) (bool, error) {
	// skip if the '[literal]' attribute was set on this paragraph
	if attrs, ok := attributes.(types.ElementAttributes); ok {
		kind, found := attrs[types.AttrKind]
		return !found || kind != types.Literal, nil
	}
	return true, nil

}

func (p *parser) callonSimpleParagraph6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleParagraph6(stack["attributes"])
}

func (c *current) onSimpleParagraph1(attributes, firstLine, otherLines interface{}) (interface{}, error) {

	return types.NewParagraph(append([]interface{}{firstLine}, otherLines.([]interface{})...), attributes)
}

func (p *parser) callonSimpleParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleParagraph1(stack["attributes"], stack["firstLine"], stack["otherLines"])
}

func (c *current) onParagraphLines1(firstLine, otherLines interface{}) (interface{}, error) {
	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonParagraphLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onFirstParagraphLine1(elements, linebreak interface{}) (interface{}, error) {

	return types.NewInlineElements(append(elements.([]interface{}), linebreak))
}

func (p *parser) callonFirstParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstParagraphLine1(stack["elements"], stack["linebreak"])
}

func (c *current) onOtherParagraphLine1(elements interface{}) (interface{}, error) {
	return elements, nil
}

func (p *parser) callonOtherParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherParagraphLine1(stack["elements"])
}

func (c *current) onVerseParagraph7(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.ElementAttributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Verse, nil
	}
	return false, nil

}

func (p *parser) callonVerseParagraph7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph7(stack["attributes"])
}

func (c *current) onVerseParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonVerseParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onVerseParagraph19(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.ElementAttributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Verse, nil
	}
	return false, nil

}

func (p *parser) callonVerseParagraph19() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph19(stack["attributes"])
}

func (c *current) onVerseParagraph14(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)

}

func (p *parser) callonVerseParagraph14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph14(stack["attributes"], stack["lines"])
}

func (c *current) onInlineElements9(comment interface{}) (interface{}, error) {
	return types.NewInlineElements([]interface{}{comment})

}

func (p *parser) callonInlineElements9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements9(stack["comment"])
}

func (c *current) onInlineElements12(elements, linebreak interface{}) (interface{}, error) {

	return types.NewInlineElements(append(elements.([]interface{}), linebreak))

}

func (p *parser) callonInlineElements12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements12(stack["elements"], stack["linebreak"])
}

func (c *current) onInlineElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonInlineElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements1(stack["elements"])
}

func (c *current) onInlineElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonInlineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement1(stack["element"])
}

func (c *current) onInlineElementsWithoutSubtitution1(elements, linebreak interface{}) (interface{}, error) {

	return types.NewInlineElements(append(elements.([]interface{}), linebreak))
}

func (p *parser) callonInlineElementsWithoutSubtitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementsWithoutSubtitution1(stack["elements"], stack["linebreak"])
}

func (c *current) onInlineElementWithoutSubtitution1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonInlineElementWithoutSubtitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementWithoutSubtitution1(stack["element"])
}

func (c *current) onVerbatimBlock1(elements interface{}) (interface{}, error) {
	return elements, nil
}

func (p *parser) callonVerbatimBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimBlock1(stack["elements"])
}

func (c *current) onVerbatimParagraph8(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonVerbatimParagraph8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimParagraph8(stack["line"])
}

func (c *current) onVerbatimParagraph1(attributes, lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), attributes)
}

func (p *parser) callonVerbatimParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimParagraph1(stack["attributes"], stack["lines"])
}

func (c *current) onVerbatimParagraphLine1(elements, linebreak interface{}) (interface{}, error) {

	return types.NewInlineElements(append(elements.([]interface{}), linebreak))
}

func (p *parser) callonVerbatimParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimParagraphLine1(stack["elements"], stack["linebreak"])
}

func (c *current) onVerbatimParagraphLineElement1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonVerbatimParagraphLineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimParagraphLineElement1()
}

func (c *current) onLineBreak1() (interface{}, error) {
	return types.NewLineBreak()
}

func (p *parser) callonLineBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineBreak1()
}

func (c *current) onQuotedText1(text interface{}) (interface{}, error) {
	// if a '^' or '~' is alone (ie, badly formatted superscript or subscript, then accept it as-is)
	return text, nil
}

func (p *parser) callonQuotedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedText1(stack["text"])
}

func (c *current) onSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	// rule used withn `words` to detect superscript or subscript portions, eg in math formulae.
	return string(c.text), nil
}

func (p *parser) callonSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptOrSuperscriptPrefix3()
}

func (c *current) onOneOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonOneOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOneOrMoreBackslashes1()
}

func (c *current) onTwoOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonTwoOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTwoOrMoreBackslashes1()
}

func (c *current) onDoubleQuoteBoldText1(content interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Bold, content.([]interface{}))
}

func (p *parser) callonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldText1(stack["content"])
}

func (c *current) onDoubleQuoteBoldTextContent4(element interface{}) (interface{}, error) {
	// may start and end with spaces
	return element, nil
}

func (p *parser) callonDoubleQuoteBoldTextContent4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextContent4(stack["element"])
}

func (c *current) onDoubleQuoteBoldTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonDoubleQuoteBoldTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement1(stack["element"])
}

func (c *current) onNonDoubleQuoteBoldText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonDoubleQuoteBoldText1()
}

func (c *current) onSingleQuoteBoldText2(content interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '**' to emphazise a portion of a word)
	return types.NewQuotedText(types.Bold, content.([]interface{}))
}

func (p *parser) callonSingleQuoteBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText2(stack["content"])
}

func (c *current) onSingleQuoteBoldText12(content interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation.
	return types.NewQuotedText(types.Bold, append([]interface{}{types.StringElement{Content: "*"}}, content.([]interface{})...)) // include the second heading `*` as a regular StringElement in the bold content
}

func (p *parser) callonSingleQuoteBoldText12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText12(stack["content"])
}

func (c *current) onSingleQuoteBoldTextContent6(spaces, element interface{}) (interface{}, error) {
	return append(spaces.([]interface{}), element), nil
}

func (p *parser) callonSingleQuoteBoldTextContent6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextContent6(stack["spaces"], stack["element"])
}

func (c *current) onSingleQuoteBoldTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonSingleQuoteBoldTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextElement1(stack["element"])
}

func (c *current) onNonSingleQuoteBoldText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonSingleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSingleQuoteBoldText1()
}

func (c *current) onEscapedBoldText2(backslashes, content interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "**", content.([]interface{}))

}

func (p *parser) callonEscapedBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText2(stack["backslashes"], stack["content"])
}

func (c *current) onEscapedBoldText10(backslashes, content interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation
	result := append([]interface{}{"*"}, content.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "*", result)

}

func (p *parser) callonEscapedBoldText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText10(stack["backslashes"], stack["content"])
}

func (c *current) onEscapedBoldText18(backslashes, content interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "*", content.([]interface{}))
}

func (p *parser) callonEscapedBoldText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText18(stack["backslashes"], stack["content"])
}

func (c *current) onDoubleQuoteItalicText1(content interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Italic, content.([]interface{}))
}

func (p *parser) callonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicText1(stack["content"])
}

func (c *current) onDoubleQuoteItalicTextContent4(element interface{}) (interface{}, error) {
	// may start and end with spaces
	return element, nil
}

func (p *parser) callonDoubleQuoteItalicTextContent4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextContent4(stack["element"])
}

func (c *current) onDoubleQuoteItalicTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonDoubleQuoteItalicTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement1(stack["element"])
}

func (c *current) onNonDoubleQuoteItalicText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonDoubleQuoteItalicText1()
}

func (c *current) onSingleQuoteItalicText2(content interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '__' to emphazise a portion of a word)
	return types.NewQuotedText(types.Italic, content.([]interface{}))
}

func (p *parser) callonSingleQuoteItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText2(stack["content"])
}

func (c *current) onSingleQuoteItalicText12(content interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation.
	return types.NewQuotedText(types.Italic, append([]interface{}{types.StringElement{Content: "_"}}, content.([]interface{})...)) // include the second heading `_` as a regular StringElement in the italic content
}

func (p *parser) callonSingleQuoteItalicText12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText12(stack["content"])
}

func (c *current) onSingleQuoteItalicTextContent6(spaces, element interface{}) (interface{}, error) {
	return append(spaces.([]interface{}), element), nil
}

func (p *parser) callonSingleQuoteItalicTextContent6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextContent6(stack["spaces"], stack["element"])
}

func (c *current) onSingleQuoteItalicTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonSingleQuoteItalicTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextElement1(stack["element"])
}

func (c *current) onNonSingleQuoteItalicText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonSingleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSingleQuoteItalicText1()
}

func (c *current) onEscapedItalicText2(backslashes, content interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "__", content.([]interface{}))

}

func (p *parser) callonEscapedItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText2(stack["backslashes"], stack["content"])
}

func (c *current) onEscapedItalicText10(backslashes, content interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation
	result := append([]interface{}{"_"}, content.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "_", result)

}

func (p *parser) callonEscapedItalicText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText10(stack["backslashes"], stack["content"])
}

func (c *current) onEscapedItalicText18(backslashes, content interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "_", content.([]interface{}))
}

func (p *parser) callonEscapedItalicText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText18(stack["backslashes"], stack["content"])
}

func (c *current) onDoubleQuoteMonospaceText1(content interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Monospace, content.([]interface{}))
}

func (p *parser) callonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceText1(stack["content"])
}

func (c *current) onDoubleQuoteMonospaceTextContent4(element interface{}) (interface{}, error) {
	// may start and end with spaces
	return element, nil
}

func (p *parser) callonDoubleQuoteMonospaceTextContent4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextContent4(stack["element"])
}

func (c *current) onDoubleQuoteMonospaceTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonDoubleQuoteMonospaceTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement1(stack["element"])
}

func (c *current) onNonDoubleQuoteMonospaceText1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonDoubleQuoteMonospaceText1()
}

func (c *current) onSingleQuoteMonospaceText2(content interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs "``" to emphazise a portion of a word)
	return types.NewQuotedText(types.Monospace, content.([]interface{}))
}

func (p *parser) callonSingleQuoteMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText2(stack["content"])
}

func (c *current) onSingleQuoteMonospaceText12(content interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation.
	return types.NewQuotedText(types.Monospace, append([]interface{}{types.StringElement{Content: "`"}}, content.([]interface{})...)) // include the second heading "`" as a regular StringElement in the monospace content
}

func (p *parser) callonSingleQuoteMonospaceText12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText12(stack["content"])
}

func (c *current) onSingleQuoteMonospaceTextContent6(spaces, element interface{}) (interface{}, error) {
	return append(spaces.([]interface{}), element), nil
}

func (p *parser) callonSingleQuoteMonospaceTextContent6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextContent6(stack["spaces"], stack["element"])
}

func (c *current) onSingleQuoteMonospaceTextElement1(element interface{}) (interface{}, error) {
	// word with quote punctuation is only accepted if nothing matched before, so we have a chance to stop
	return element, nil
}

func (p *parser) callonSingleQuoteMonospaceTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement1(stack["element"])
}

func (c *current) onNonSingleQuoteMonospaceText1() (interface{}, error) {
	// break at multiline
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonNonSingleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSingleQuoteMonospaceText1()
}

func (c *current) onEscapedMonospaceText2(backslashes, content interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "``", content.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText2(stack["backslashes"], stack["content"])
}

func (c *current) onEscapedMonospaceText10(backslashes, content interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation
	result := append([]interface{}{"`"}, content.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "`", result)

}

func (p *parser) callonEscapedMonospaceText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText10(stack["backslashes"], stack["content"])
}

func (c *current) onEscapedMonospaceText18(backslashes, content interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "`", content.([]interface{}))
}

func (p *parser) callonEscapedMonospaceText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText18(stack["backslashes"], stack["content"])
}

func (c *current) onSubscriptText1(content interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Subscript, content)
}

func (p *parser) callonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptText1(stack["content"])
}

func (c *current) onNonSubscriptText1() (interface{}, error) {

	return c.text, nil
}

func (p *parser) callonNonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSubscriptText1()
}

func (c *current) onEscapedSubscriptText1(backslashes, content interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "~", content)
}

func (p *parser) callonEscapedSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscriptText1(stack["backslashes"], stack["content"])
}

func (c *current) onSuperscriptText1(content interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Superscript, content)
}

func (p *parser) callonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptText1(stack["content"])
}

func (c *current) onNonSuperscriptText1() (interface{}, error) {

	return c.text, nil
}

func (p *parser) callonNonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSuperscriptText1()
}

func (c *current) onEscapedSuperscriptText1(backslashes, content interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "^", content)
}

func (p *parser) callonEscapedSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscriptText1(stack["backslashes"], stack["content"])
}

func (c *current) onSinglePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewPassthrough(types.SinglePlusPassthrough, []interface{}{content})
}

func (p *parser) callonSinglePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthrough1(stack["content"])
}

func (c *current) onSinglePlusPassthroughContent2() (interface{}, error) {
	// no space in the first or last position of the content, but allowed elsewhere
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent2()
}

func (c *current) onSinglePlusPassthroughContent24() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent24()
}

func (c *current) onTriplePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewPassthrough(types.TriplePlusPassthrough, []interface{}{content})
}

func (p *parser) callonTriplePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthrough1(stack["content"])
}

func (c *current) onTriplePlusPassthroughContent2() (interface{}, error) {
	// spaces and newlines are also allowed in the first or last position of the content and elsewhere too
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent2()
}

func (c *current) onTriplePlusPassthroughContent8() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent8()
}

func (c *current) onPassthroughMacro2(content interface{}) (interface{}, error) {
	return types.NewPassthrough(types.PassthroughMacro, []interface{}{content})
}

func (p *parser) callonPassthroughMacro2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro2(stack["content"])
}

func (c *current) onPassthroughMacro9(content interface{}) (interface{}, error) {
	return types.NewPassthrough(types.PassthroughMacro, content.([]interface{}))
}

func (p *parser) callonPassthroughMacro9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro9(stack["content"])
}

func (c *current) onPassthroughMacroCharacter4() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonPassthroughMacroCharacter4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacroCharacter4()
}

func (c *current) onCrossReference2(id, label interface{}) (interface{}, error) {
	return types.NewCrossReference(id.(string), label.(string))
}

func (p *parser) callonCrossReference2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference2(stack["id"], stack["label"])
}

func (c *current) onCrossReference13(id interface{}) (interface{}, error) {
	return types.NewCrossReference(id.(string), nil)
}

func (p *parser) callonCrossReference13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReference13(stack["id"])
}

func (c *current) onCrossReferenceLabel1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonCrossReferenceLabel1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReferenceLabel1()
}

func (c *current) onLink1(link interface{}) (interface{}, error) {
	return link, nil
}

func (p *parser) callonLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLink1(stack["link"])
}

func (c *current) onRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.ElementAttributes))
}

func (p *parser) callonRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onTextOnlyLinkAttributes1(text interface{}) (interface{}, error) {
	return types.NewInlineLinkAttributes(text, nil)
}

func (p *parser) callonTextOnlyLinkAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextOnlyLinkAttributes1(stack["text"])
}

func (c *current) onLinkTextWithCommaAttribute18() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLinkTextWithCommaAttribute18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextWithCommaAttribute18()
}

func (c *current) onLinkTextWithCommaAttribute2(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonLinkTextWithCommaAttribute2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextWithCommaAttribute2(stack["elements"])
}

func (c *current) onLinkTextWithCommaAttribute42() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLinkTextWithCommaAttribute42() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextWithCommaAttribute42()
}

func (c *current) onLinkTextWithCommaAttribute29(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonLinkTextWithCommaAttribute29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextWithCommaAttribute29(stack["elements"])
}

func (c *current) onTextAndMoreLinkAttributes1(text, otherattrs interface{}) (interface{}, error) {
	return types.NewInlineLinkAttributes(text, otherattrs.([]interface{}))
}

func (p *parser) callonTextAndMoreLinkAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextAndMoreLinkAttributes1(stack["text"], stack["otherattrs"])
}

func (c *current) onLinkTextAttribute18() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLinkTextAttribute18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextAttribute18()
}

func (c *current) onLinkTextAttribute2(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonLinkTextAttribute2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextAttribute2(stack["elements"])
}

func (c *current) onLinkTextAttribute44() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonLinkTextAttribute44() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextAttribute44()
}

func (c *current) onLinkTextAttribute29(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonLinkTextAttribute29() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkTextAttribute29(stack["elements"])
}

func (c *current) onImageBlock1(attributes, path, inlineAttributes interface{}) (interface{}, error) {
	return types.NewImageBlock(path.(string), inlineAttributes.(types.ElementAttributes), attributes)
}

func (p *parser) callonImageBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock1(stack["attributes"], stack["path"], stack["inlineAttributes"])
}

func (c *current) onInlineImage1(path, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineImage(path.(string), inlineAttributes.(types.ElementAttributes))
}

func (p *parser) callonInlineImage1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage1(stack["path"], stack["inlineAttributes"])
}

func (c *current) onImageAttributes1(alt, width, height, otherattrs interface{}) (interface{}, error) {
	return types.NewImageAttributes(alt, width, height, otherattrs.([]interface{}))
}

func (p *parser) callonImageAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAttributes1(stack["alt"], stack["width"], stack["height"], stack["otherattrs"])
}

func (c *current) onInlineFootnote2(content interface{}) (interface{}, error) {
	return types.NewFootnote("", content.(types.InlineElements))
}

func (p *parser) callonInlineFootnote2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote2(stack["content"])
}

func (c *current) onInlineFootnote8(ref, content interface{}) (interface{}, error) {
	return types.NewFootnote(ref.(string), content.(types.InlineElements))
}

func (p *parser) callonInlineFootnote8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote8(stack["ref"], stack["content"])
}

func (c *current) onInlineFootnote17(ref interface{}) (interface{}, error) {
	return types.NewFootnote(ref.(string), types.InlineElements{}) // foot note referring to another note
}

func (p *parser) callonInlineFootnote17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote17(stack["ref"])
}

func (c *current) onFootnoteRef1() (interface{}, error) {
	// footnote ID not may span multiple lines
	return string(c.text), nil
}

func (p *parser) callonFootnoteRef1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteRef1()
}

func (c *current) onFootnoteContent1(elements interface{}) (interface{}, error) {
	// footnote content may span multiple lines
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonFootnoteContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteContent1(stack["elements"])
}

func (c *current) onDelimitedBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock1(stack["block"])
}

func (c *current) onFencedBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Fenced, content.([]interface{}), types.None, attributes)
}

func (p *parser) callonFencedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlock1(stack["attributes"], stack["content"])
}

func (c *current) onFencedBlockParagraph1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), types.ElementAttributes{})
}

func (p *parser) callonFencedBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockParagraph1(stack["lines"])
}

func (c *current) onFencedBlockParagraphLine1(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonFencedBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockParagraphLine1(stack["line"])
}

func (c *current) onListingBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Listing, content.([]interface{}), types.None, attributes)
}

func (p *parser) callonListingBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlock1(stack["attributes"], stack["content"])
}

func (c *current) onListingBlockParagraph1(lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), nil) // no attributes supported
}

func (p *parser) callonListingBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockParagraph1(stack["lines"])
}

func (c *current) onListingBlockParagraphLine6() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonListingBlockParagraphLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockParagraphLine6()
}

func (c *current) onListingBlockParagraphLine1(line interface{}) (interface{}, error) {
	// skip EOL in line content, and stop when quote block delimiter is encountered
	return types.NewInlineElements(line)
}

func (p *parser) callonListingBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockParagraphLine1(stack["line"])
}

func (c *current) onExampleBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Example, content.([]interface{}), types.None, attributes)
}

func (p *parser) callonExampleBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlock1(stack["attributes"], stack["content"])
}

func (c *current) onExampleBlockParagraph1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), types.ElementAttributes{})
}

func (p *parser) callonExampleBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockParagraph1(stack["lines"])
}

func (c *current) onExampleBlockParagraphLine1(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonExampleBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockParagraphLine1(stack["line"])
}

func (c *current) onQuoteBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Quote, content.([]interface{}), types.None, attributes)
}

func (p *parser) callonQuoteBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlock1(stack["attributes"], stack["content"])
}

func (c *current) onQuoteBlockElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonQuoteBlockElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockElement1(stack["element"])
}

func (c *current) onQuoteBlockParagraph1(lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), types.ElementAttributes{})
}

func (p *parser) callonQuoteBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockParagraph1(stack["lines"])
}

func (c *current) onVerseBlock5(attributes interface{}) (bool, error) {

	kind := attributes.(types.ElementAttributes).GetAsString("kind") // once we got the attributes, check that `[verse]`  was set
	return kind == "verse", nil

}

func (p *parser) callonVerseBlock5() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlock5(stack["attributes"])
}

func (c *current) onVerseBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Verse, content.([]interface{}), types.None, attributes)

}

func (p *parser) callonVerseBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlock1(stack["attributes"], stack["content"])
}

func (c *current) onVerseFileInclude1(include interface{}) (interface{}, error) {
	return include, nil
}

func (p *parser) callonVerseFileInclude1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseFileInclude1(stack["include"])
}

func (c *current) onVerseBlockParagraph1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), nil)
}

func (p *parser) callonVerseBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraph1(stack["lines"])
}

func (c *current) onVerseBlockParagraphLine8(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonVerseBlockParagraphLine8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraphLine8(stack["elements"])
}

func (c *current) onVerseBlockParagraphLine1(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonVerseBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraphLine1(stack["line"])
}

func (c *current) onVerseBlockParagraphLineElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonVerseBlockParagraphLineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraphLineElement1(stack["element"])
}

func (c *current) onSidebarBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Sidebar, content.([]interface{}), types.None, attributes)
}

func (p *parser) callonSidebarBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlock1(stack["attributes"], stack["content"])
}

func (c *current) onNonSidebarBlock1(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonNonSidebarBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSidebarBlock1(stack["content"])
}

func (c *current) onSidebarBlockParagraph1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), types.ElementAttributes{})
}

func (p *parser) callonSidebarBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockParagraph1(stack["lines"])
}

func (c *current) onSidebarBlockParagraphLine1(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonSidebarBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockParagraphLine1(stack["line"])
}

func (c *current) onTable1(attributes, header, lines interface{}) (interface{}, error) {
	// end delimiter or end of file
	return types.NewTable(header, lines.([]interface{}), attributes)
}

func (p *parser) callonTable1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTable1(stack["attributes"], stack["header"], stack["lines"])
}

func (c *current) onTableLineHeader1(cells interface{}) (interface{}, error) {
	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLineHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLineHeader1(stack["cells"])
}

func (c *current) onTableLine1(cells interface{}) (interface{}, error) {
	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLine1(stack["cells"])
}

func (c *current) onTableCell1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonTableCell1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCell1(stack["elements"])
}

func (c *current) onCommentBlock1(content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Comment, content.([]interface{}), types.Verbatim, nil)
}

func (p *parser) callonCommentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlock1(stack["content"])
}

func (c *current) onCommentBlockLine1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonCommentBlockLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlockLine1()
}

func (c *current) onSingleLineComment1(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))
}

func (p *parser) callonSingleLineComment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineComment1(stack["content"])
}

func (c *current) onSingleLineCommentContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleLineCommentContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineCommentContent1()
}

func (c *current) onParagraphWithHeadingSpaces1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithSpacesOnFirstLine, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithHeadingSpaces1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpaces1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithHeadingSpacesLines11() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines11()
}

func (c *current) onParagraphWithHeadingSpacesLines4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines4()
}

func (c *current) onParagraphWithHeadingSpacesLines24() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines24()
}

func (c *current) onParagraphWithHeadingSpacesLines19(otherLine interface{}) (interface{}, error) {
	return otherLine, nil // do not include the trailing 'EOL'

}

func (p *parser) callonParagraphWithHeadingSpacesLines19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines19(stack["otherLine"])
}

func (c *current) onParagraphWithHeadingSpacesLines1(firstLine, otherLines interface{}) (interface{}, error) {

	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonParagraphWithHeadingSpacesLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiter1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithDelimiter, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithLiteralBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiter1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLines1(lines interface{}) (interface{}, error) {
	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine4()
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine1(line interface{}) (interface{}, error) {

	return line, nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine1(stack["line"])
}

func (c *current) onParagraphWithLiteralAttribute6(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.ElementAttributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Literal, nil
	}
	return false, nil

}

func (p *parser) callonParagraphWithLiteralAttribute6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute6(stack["attributes"])
}

func (c *current) onParagraphWithLiteralAttribute1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithAttribute, lines.([]interface{}), attributes)

}

func (p *parser) callonParagraphWithLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute1(stack["attributes"], stack["lines"])
}

func (c *current) onLiteralKind1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLiteralKind1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralKind1()
}

func (c *current) onParagraphWithLiteralAttributeLines1(lines interface{}) (interface{}, error) {

	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralAttributeLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralAttributeLine4() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonParagraphWithLiteralAttributeLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLine4()
}

func (c *current) onParagraphWithLiteralAttributeLine1(line interface{}) (interface{}, error) {
	return line, nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralAttributeLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLine1(stack["line"])
}

func (c *current) onBlankLine1() (interface{}, error) {
	return types.NewBlankLine()
}

func (p *parser) callonBlankLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlankLine1()
}

func (c *current) onAlphanums1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAlphanums1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAlphanums1()
}

func (c *current) onSimpleWord1() (interface{}, error) {
	// very straightforward content: alphanums followed by spaces but not the "+" signs because it needs a heading space to become a LineBreak element
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSimpleWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleWord1()
}

func (c *current) onOtherWord7() (interface{}, error) {
	// TODO: remove check on parenthesis and dot?
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonOtherWord7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherWord7()
}

func (c *current) onOtherWord1() (interface{}, error) {
	// word cannot contain parenthesis. Dots and ellipsis are treated as independent words (but will be combined afterwards)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonOtherWord1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherWord1()
}

func (c *current) onFileLocation1(elements interface{}) (interface{}, error) {
	return types.NewLocation(elements.([]interface{}))
}

func (p *parser) callonFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation1(stack["elements"])
}

func (c *current) onLocation1(elements interface{}) (interface{}, error) {
	return types.NewLocation(elements.([]interface{}))
}

func (p *parser) callonLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocation1(stack["elements"])
}

func (c *current) onURL1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonURL1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURL1()
}

func (c *current) onID1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onID1()
}

func (c *current) onDIGIT1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDIGIT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDIGIT1()
}

func (c *current) onNUMBER1() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonNUMBER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNUMBER1()
}

func (c *current) onWS3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonWS3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWS3()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			return val, ok
		}
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	ignoreCase := ""
	if lit.ignoreCase {
		ignoreCase = "i"
	}
	val := string(strconv.AppendQuote([]byte{}, lit.val)) + ignoreCase // wrap 'lit.val' with double quotes
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, val)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, val)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}
