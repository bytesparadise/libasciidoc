// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"sync"
	"unicode"
	"unicode/utf8"

	"github.com/bytesparadise/libasciidoc/pkg/types"
	log "github.com/sirupsen/logrus"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "RawSource",
			pos:  position{line: 17, col: 1, offset: 336},
			expr: &actionExpr{
				pos: position{line: 17, col: 14, offset: 349},
				run: (*parser).callonRawSource1,
				expr: &labeledExpr{
					pos:   position{line: 17, col: 14, offset: 349},
					label: "lines",
					expr: &zeroOrMoreExpr{
						pos: position{line: 17, col: 20, offset: 355},
						expr: &choiceExpr{
							pos: position{line: 17, col: 21, offset: 356},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 17, col: 21, offset: 356},
									name: "AttributeDeclaration",
								},
								&ruleRefExpr{
									pos:  position{line: 17, col: 44, offset: 379},
									name: "RawSection",
								},
								&ruleRefExpr{
									pos:  position{line: 17, col: 57, offset: 392},
									name: "FileInclusion",
								},
								&ruleRefExpr{
									pos:  position{line: 17, col: 73, offset: 408},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RawSection",
			pos:  position{line: 22, col: 1, offset: 553},
			expr: &actionExpr{
				pos: position{line: 23, col: 5, offset: 572},
				run: (*parser).callonRawSection1,
				expr: &seqExpr{
					pos: position{line: 23, col: 5, offset: 572},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 23, col: 5, offset: 572},
							label: "level",
							expr: &actionExpr{
								pos: position{line: 23, col: 12, offset: 579},
								run: (*parser).callonRawSection4,
								expr: &oneOrMoreExpr{
									pos: position{line: 23, col: 12, offset: 579},
									expr: &litMatcher{
										pos:        position{line: 23, col: 13, offset: 580},
										val:        "=",
										ignoreCase: false,
										want:       "\"=\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 27, col: 5, offset: 671},
							run: (*parser).callonRawSection7,
						},
						&oneOrMoreExpr{
							pos: position{line: 31, col: 5, offset: 823},
							expr: &ruleRefExpr{
								pos:  position{line: 31, col: 5, offset: 823},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 31, col: 12, offset: 830},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 31, col: 19, offset: 837},
								name: "RawSectionTitle",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 31, col: 36, offset: 854},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "RawSectionTitle",
			pos:  position{line: 35, col: 1, offset: 924},
			expr: &actionExpr{
				pos: position{line: 35, col: 20, offset: 943},
				run: (*parser).callonRawSectionTitle1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 35, col: 20, offset: 943},
					expr: &charClassMatcher{
						pos:        position{line: 35, col: 20, offset: 943},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "RawLine",
			pos:  position{line: 39, col: 1, offset: 990},
			expr: &actionExpr{
				pos: position{line: 39, col: 12, offset: 1001},
				run: (*parser).callonRawLine1,
				expr: &seqExpr{
					pos: position{line: 39, col: 12, offset: 1001},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 39, col: 12, offset: 1001},
							expr: &ruleRefExpr{
								pos:  position{line: 39, col: 13, offset: 1002},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 39, col: 17, offset: 1006},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 39, col: 26, offset: 1015},
								run: (*parser).callonRawLine6,
								expr: &zeroOrMoreExpr{
									pos: position{line: 39, col: 26, offset: 1015},
									expr: &charClassMatcher{
										pos:        position{line: 39, col: 26, offset: 1015},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 41, col: 8, offset: 1070},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "RawDocument",
			pos:  position{line: 48, col: 1, offset: 1349},
			expr: &actionExpr{
				pos: position{line: 48, col: 16, offset: 1364},
				run: (*parser).callonRawDocument1,
				expr: &seqExpr{
					pos: position{line: 48, col: 16, offset: 1364},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 48, col: 16, offset: 1364},
							label: "frontmatter",
							expr: &zeroOrOneExpr{
								pos: position{line: 48, col: 29, offset: 1377},
								expr: &ruleRefExpr{
									pos:  position{line: 48, col: 29, offset: 1377},
									name: "FrontMatter",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 48, col: 43, offset: 1391},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 48, col: 51, offset: 1399},
								name: "RawBlocks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 48, col: 62, offset: 1410},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "RawBlocks",
			pos:  position{line: 55, col: 1, offset: 1599},
			expr: &actionExpr{
				pos: position{line: 55, col: 14, offset: 1612},
				run: (*parser).callonRawBlocks1,
				expr: &seqExpr{
					pos: position{line: 55, col: 14, offset: 1612},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 55, col: 14, offset: 1612},
							expr: &ruleRefExpr{
								pos:  position{line: 55, col: 14, offset: 1612},
								name: "Newline",
							},
						},
						&labeledExpr{
							pos:   position{line: 55, col: 23, offset: 1621},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 55, col: 31, offset: 1629},
								expr: &ruleRefExpr{
									pos:  position{line: 55, col: 31, offset: 1629},
									name: "DocumentHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 55, col: 48, offset: 1646},
							label: "blocks",
							expr: &zeroOrMoreExpr{
								pos: position{line: 55, col: 56, offset: 1654},
								expr: &ruleRefExpr{
									pos:  position{line: 55, col: 56, offset: 1654},
									name: "DocumentRawBlock",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRawBlock",
			pos:  position{line: 64, col: 1, offset: 1906},
			expr: &actionExpr{
				pos: position{line: 65, col: 9, offset: 1935},
				run: (*parser).callonDocumentRawBlock1,
				expr: &labeledExpr{
					pos:   position{line: 65, col: 9, offset: 1935},
					label: "block",
					expr: &choiceExpr{
						pos: position{line: 65, col: 16, offset: 1942},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 65, col: 16, offset: 1942},
								name: "LabeledListItem",
							},
							&ruleRefExpr{
								pos:  position{line: 66, col: 11, offset: 2007},
								name: "SimpleRawParagraph",
							},
							&ruleRefExpr{
								pos:  position{line: 67, col: 11, offset: 2036},
								name: "BlankLine",
							},
							&ruleRefExpr{
								pos:  position{line: 68, col: 11, offset: 2088},
								name: "Section",
							},
							&ruleRefExpr{
								pos:  position{line: 69, col: 11, offset: 2106},
								name: "DelimitedBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 70, col: 11, offset: 2131},
								name: "ImageBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 71, col: 11, offset: 2152},
								name: "SingleLineComment",
							},
							&ruleRefExpr{
								pos:  position{line: 72, col: 11, offset: 2180},
								name: "Table",
							},
							&ruleRefExpr{
								pos:  position{line: 73, col: 11, offset: 2196},
								name: "ThematicBreak",
							},
							&ruleRefExpr{
								pos:  position{line: 74, col: 11, offset: 2220},
								name: "OrderedListItem",
							},
							&ruleRefExpr{
								pos:  position{line: 75, col: 11, offset: 2246},
								name: "UnorderedListItem",
							},
							&ruleRefExpr{
								pos:  position{line: 76, col: 11, offset: 2275},
								name: "CalloutListItem",
							},
							&ruleRefExpr{
								pos:  position{line: 77, col: 11, offset: 2301},
								name: "ContinuedListItemElement",
							},
							&ruleRefExpr{
								pos:  position{line: 78, col: 11, offset: 2336},
								name: "LiteralBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 79, col: 11, offset: 2360},
								name: "AttributeDeclaration",
							},
							&ruleRefExpr{
								pos:  position{line: 80, col: 11, offset: 2392},
								name: "AttributeReset",
							},
							&ruleRefExpr{
								pos:  position{line: 81, col: 11, offset: 2418},
								name: "TableOfContentsPlaceHolder",
							},
							&ruleRefExpr{
								pos:  position{line: 82, col: 11, offset: 2455},
								name: "UserMacroBlock",
							},
							&ruleRefExpr{
								pos:  position{line: 83, col: 11, offset: 2480},
								name: "RawParagraph",
							},
							&ruleRefExpr{
								pos:  position{line: 84, col: 11, offset: 2503},
								name: "StandaloneAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "FrontMatter",
			pos:  position{line: 92, col: 1, offset: 2712},
			expr: &ruleRefExpr{
				pos:  position{line: 92, col: 16, offset: 2727},
				name: "YamlFrontMatter",
			},
		},
		{
			name: "YamlFrontMatter",
			pos:  position{line: 94, col: 1, offset: 2745},
			expr: &actionExpr{
				pos: position{line: 94, col: 20, offset: 2764},
				run: (*parser).callonYamlFrontMatter1,
				expr: &seqExpr{
					pos: position{line: 94, col: 20, offset: 2764},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 94, col: 20, offset: 2764},
							name: "YamlFrontMatterToken",
						},
						&labeledExpr{
							pos:   position{line: 94, col: 41, offset: 2785},
							label: "content",
							expr: &zeroOrOneExpr{
								pos: position{line: 94, col: 49, offset: 2793},
								expr: &ruleRefExpr{
									pos:  position{line: 94, col: 50, offset: 2794},
									name: "YamlFrontMatterContent",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 94, col: 75, offset: 2819},
							name: "YamlFrontMatterToken",
						},
					},
				},
			},
		},
		{
			name: "YamlFrontMatterToken",
			pos:  position{line: 98, col: 1, offset: 2899},
			expr: &seqExpr{
				pos: position{line: 98, col: 26, offset: 2924},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 98, col: 26, offset: 2924},
						val:        "---",
						ignoreCase: false,
						want:       "\"---\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 98, col: 32, offset: 2930},
						expr: &ruleRefExpr{
							pos:  position{line: 98, col: 32, offset: 2930},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 98, col: 39, offset: 2937},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "YamlFrontMatterContent",
			pos:  position{line: 100, col: 1, offset: 2942},
			expr: &actionExpr{
				pos: position{line: 100, col: 27, offset: 2968},
				run: (*parser).callonYamlFrontMatterContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 100, col: 27, offset: 2968},
					expr: &oneOrMoreExpr{
						pos: position{line: 100, col: 28, offset: 2969},
						expr: &seqExpr{
							pos: position{line: 100, col: 29, offset: 2970},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 100, col: 29, offset: 2970},
									expr: &ruleRefExpr{
										pos:  position{line: 100, col: 30, offset: 2971},
										name: "YamlFrontMatterToken",
									},
								},
								&anyMatcher{
									line: 100, col: 51, offset: 2992,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentHeader",
			pos:  position{line: 107, col: 1, offset: 3158},
			expr: &actionExpr{
				pos: position{line: 107, col: 19, offset: 3176},
				run: (*parser).callonDocumentHeader1,
				expr: &seqExpr{
					pos: position{line: 107, col: 19, offset: 3176},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 107, col: 19, offset: 3176},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 107, col: 23, offset: 3180},
							expr: &ruleRefExpr{
								pos:  position{line: 107, col: 23, offset: 3180},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 107, col: 30, offset: 3187},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 107, col: 37, offset: 3194},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 107, col: 52, offset: 3209},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 107, col: 56, offset: 3213},
								expr: &ruleRefExpr{
									pos:  position{line: 107, col: 56, offset: 3213},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 107, col: 74, offset: 3231},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 108, col: 9, offset: 3243},
							expr: &choiceExpr{
								pos: position{line: 108, col: 10, offset: 3244},
								alternatives: []interface{}{
									&seqExpr{
										pos: position{line: 108, col: 10, offset: 3244},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 108, col: 10, offset: 3244},
												expr: &ruleRefExpr{
													pos:  position{line: 108, col: 10, offset: 3244},
													name: "Space",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 108, col: 17, offset: 3251},
												name: "SingleLineComment",
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 108, col: 37, offset: 3271},
										name: "CommentBlock",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 109, col: 9, offset: 3294},
							label: "authors",
							expr: &zeroOrOneExpr{
								pos: position{line: 109, col: 18, offset: 3303},
								expr: &ruleRefExpr{
									pos:  position{line: 109, col: 18, offset: 3303},
									name: "DocumentAuthors",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 110, col: 9, offset: 3330},
							expr: &choiceExpr{
								pos: position{line: 110, col: 10, offset: 3331},
								alternatives: []interface{}{
									&seqExpr{
										pos: position{line: 110, col: 10, offset: 3331},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 110, col: 10, offset: 3331},
												expr: &ruleRefExpr{
													pos:  position{line: 110, col: 10, offset: 3331},
													name: "Space",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 110, col: 17, offset: 3338},
												name: "SingleLineComment",
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 110, col: 37, offset: 3358},
										name: "CommentBlock",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 111, col: 9, offset: 3381},
							label: "revision",
							expr: &zeroOrOneExpr{
								pos: position{line: 111, col: 19, offset: 3391},
								expr: &ruleRefExpr{
									pos:  position{line: 111, col: 19, offset: 3391},
									name: "DocumentRevision",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthors",
			pos:  position{line: 115, col: 1, offset: 3492},
			expr: &choiceExpr{
				pos: position{line: 115, col: 20, offset: 3511},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 115, col: 20, offset: 3511},
						name: "DocumentAuthorsInlineForm",
					},
					&ruleRefExpr{
						pos:  position{line: 115, col: 48, offset: 3539},
						name: "DocumentAuthorsAttributeForm",
					},
				},
			},
		},
		{
			name: "DocumentAuthorsInlineForm",
			pos:  position{line: 117, col: 1, offset: 3569},
			expr: &actionExpr{
				pos: position{line: 117, col: 30, offset: 3598},
				run: (*parser).callonDocumentAuthorsInlineForm1,
				expr: &seqExpr{
					pos: position{line: 117, col: 30, offset: 3598},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 117, col: 30, offset: 3598},
							expr: &ruleRefExpr{
								pos:  position{line: 117, col: 30, offset: 3598},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 117, col: 37, offset: 3605},
							expr: &litMatcher{
								pos:        position{line: 117, col: 38, offset: 3606},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 117, col: 42, offset: 3610},
							label: "authors",
							expr: &oneOrMoreExpr{
								pos: position{line: 117, col: 51, offset: 3619},
								expr: &ruleRefExpr{
									pos:  position{line: 117, col: 51, offset: 3619},
									name: "DocumentAuthor",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 117, col: 68, offset: 3636},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorsAttributeForm",
			pos:  position{line: 121, col: 1, offset: 3706},
			expr: &actionExpr{
				pos: position{line: 121, col: 33, offset: 3738},
				run: (*parser).callonDocumentAuthorsAttributeForm1,
				expr: &seqExpr{
					pos: position{line: 121, col: 33, offset: 3738},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 121, col: 33, offset: 3738},
							expr: &ruleRefExpr{
								pos:  position{line: 121, col: 33, offset: 3738},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 121, col: 40, offset: 3745},
							val:        ":author:",
							ignoreCase: false,
							want:       "\":author:\"",
						},
						&labeledExpr{
							pos:   position{line: 121, col: 51, offset: 3756},
							label: "author",
							expr: &ruleRefExpr{
								pos:  position{line: 121, col: 59, offset: 3764},
								name: "DocumentAuthor",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 121, col: 75, offset: 3780},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthor",
			pos:  position{line: 125, col: 1, offset: 3859},
			expr: &actionExpr{
				pos: position{line: 125, col: 19, offset: 3877},
				run: (*parser).callonDocumentAuthor1,
				expr: &seqExpr{
					pos: position{line: 125, col: 19, offset: 3877},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 125, col: 19, offset: 3877},
							expr: &ruleRefExpr{
								pos:  position{line: 125, col: 19, offset: 3877},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 125, col: 26, offset: 3884},
							label: "fullname",
							expr: &ruleRefExpr{
								pos:  position{line: 125, col: 36, offset: 3894},
								name: "DocumentAuthorName",
							},
						},
						&labeledExpr{
							pos:   position{line: 125, col: 56, offset: 3914},
							label: "email",
							expr: &zeroOrOneExpr{
								pos: position{line: 125, col: 62, offset: 3920},
								expr: &ruleRefExpr{
									pos:  position{line: 125, col: 63, offset: 3921},
									name: "DocumentAuthorEmail",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 125, col: 85, offset: 3943},
							expr: &ruleRefExpr{
								pos:  position{line: 125, col: 85, offset: 3943},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 125, col: 92, offset: 3950},
							expr: &litMatcher{
								pos:        position{line: 125, col: 92, offset: 3950},
								val:        ";",
								ignoreCase: false,
								want:       "\";\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 125, col: 97, offset: 3955},
							expr: &ruleRefExpr{
								pos:  position{line: 125, col: 97, offset: 3955},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorName",
			pos:  position{line: 130, col: 1, offset: 4100},
			expr: &actionExpr{
				pos: position{line: 130, col: 23, offset: 4122},
				run: (*parser).callonDocumentAuthorName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 130, col: 23, offset: 4122},
					expr: &charClassMatcher{
						pos:        position{line: 130, col: 23, offset: 4122},
						val:        "[^<;\\r\\n]",
						chars:      []rune{'<', ';', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentAuthorEmail",
			pos:  position{line: 134, col: 1, offset: 4169},
			expr: &actionExpr{
				pos: position{line: 134, col: 24, offset: 4192},
				run: (*parser).callonDocumentAuthorEmail1,
				expr: &seqExpr{
					pos: position{line: 134, col: 24, offset: 4192},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 134, col: 24, offset: 4192},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 134, col: 28, offset: 4196},
							label: "email",
							expr: &actionExpr{
								pos: position{line: 134, col: 35, offset: 4203},
								run: (*parser).callonDocumentAuthorEmail5,
								expr: &oneOrMoreExpr{
									pos: position{line: 134, col: 36, offset: 4204},
									expr: &charClassMatcher{
										pos:        position{line: 134, col: 36, offset: 4204},
										val:        "[^>\\r\\n]",
										chars:      []rune{'>', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 136, col: 4, offset: 4251},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevision",
			pos:  position{line: 142, col: 1, offset: 4412},
			expr: &actionExpr{
				pos: position{line: 142, col: 21, offset: 4432},
				run: (*parser).callonDocumentRevision1,
				expr: &seqExpr{
					pos: position{line: 142, col: 21, offset: 4432},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 142, col: 21, offset: 4432},
							expr: &ruleRefExpr{
								pos:  position{line: 142, col: 21, offset: 4432},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 142, col: 28, offset: 4439},
							expr: &litMatcher{
								pos:        position{line: 142, col: 29, offset: 4440},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 142, col: 33, offset: 4444},
							label: "revision",
							expr: &choiceExpr{
								pos: position{line: 143, col: 9, offset: 4463},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 143, col: 10, offset: 4464},
										run: (*parser).callonDocumentRevision9,
										expr: &seqExpr{
											pos: position{line: 143, col: 10, offset: 4464},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 143, col: 10, offset: 4464},
													label: "revnumber",
													expr: &ruleRefExpr{
														pos:  position{line: 143, col: 21, offset: 4475},
														name: "DocumentRevisionNumber",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 143, col: 45, offset: 4499},
													expr: &litMatcher{
														pos:        position{line: 143, col: 45, offset: 4499},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 143, col: 50, offset: 4504},
													label: "revdate",
													expr: &zeroOrOneExpr{
														pos: position{line: 143, col: 58, offset: 4512},
														expr: &ruleRefExpr{
															pos:  position{line: 143, col: 59, offset: 4513},
															name: "DocumentRevisionDate",
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 143, col: 82, offset: 4536},
													expr: &litMatcher{
														pos:        position{line: 143, col: 82, offset: 4536},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 143, col: 87, offset: 4541},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 143, col: 97, offset: 4551},
														expr: &ruleRefExpr{
															pos:  position{line: 143, col: 98, offset: 4552},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 145, col: 15, offset: 4669},
										run: (*parser).callonDocumentRevision23,
										expr: &seqExpr{
											pos: position{line: 145, col: 15, offset: 4669},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 145, col: 15, offset: 4669},
													label: "revdate",
													expr: &ruleRefExpr{
														pos:  position{line: 145, col: 24, offset: 4678},
														name: "DocumentRevisionDate",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 145, col: 46, offset: 4700},
													expr: &litMatcher{
														pos:        position{line: 145, col: 46, offset: 4700},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 145, col: 51, offset: 4705},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 145, col: 61, offset: 4715},
														expr: &ruleRefExpr{
															pos:  position{line: 145, col: 62, offset: 4716},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 147, col: 13, offset: 4825},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionNumber",
			pos:  position{line: 152, col: 1, offset: 4955},
			expr: &choiceExpr{
				pos: position{line: 152, col: 27, offset: 4981},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 152, col: 27, offset: 4981},
						run: (*parser).callonDocumentRevisionNumber2,
						expr: &seqExpr{
							pos: position{line: 152, col: 27, offset: 4981},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 152, col: 27, offset: 4981},
									val:        "v",
									ignoreCase: true,
									want:       "\"v\"i",
								},
								&ruleRefExpr{
									pos:  position{line: 152, col: 32, offset: 4986},
									name: "Digit",
								},
								&oneOrMoreExpr{
									pos: position{line: 152, col: 39, offset: 4993},
									expr: &charClassMatcher{
										pos:        position{line: 152, col: 39, offset: 4993},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 154, col: 5, offset: 5041},
						run: (*parser).callonDocumentRevisionNumber8,
						expr: &seqExpr{
							pos: position{line: 154, col: 5, offset: 5041},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 154, col: 5, offset: 5041},
									expr: &litMatcher{
										pos:        position{line: 154, col: 5, offset: 5041},
										val:        "v",
										ignoreCase: true,
										want:       "\"v\"i",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 154, col: 11, offset: 5047},
									name: "Digit",
								},
								&oneOrMoreExpr{
									pos: position{line: 154, col: 18, offset: 5054},
									expr: &charClassMatcher{
										pos:        position{line: 154, col: 18, offset: 5054},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 154, col: 29, offset: 5065},
									expr: &ruleRefExpr{
										pos:  position{line: 154, col: 29, offset: 5065},
										name: "Space",
									},
								},
								&andExpr{
									pos: position{line: 154, col: 36, offset: 5072},
									expr: &litMatcher{
										pos:        position{line: 154, col: 37, offset: 5073},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionDate",
			pos:  position{line: 158, col: 1, offset: 5113},
			expr: &actionExpr{
				pos: position{line: 158, col: 25, offset: 5137},
				run: (*parser).callonDocumentRevisionDate1,
				expr: &oneOrMoreExpr{
					pos: position{line: 158, col: 25, offset: 5137},
					expr: &charClassMatcher{
						pos:        position{line: 158, col: 25, offset: 5137},
						val:        "[^:\\r\\n]",
						chars:      []rune{':', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentRevisionRemark",
			pos:  position{line: 162, col: 1, offset: 5183},
			expr: &actionExpr{
				pos: position{line: 162, col: 27, offset: 5209},
				run: (*parser).callonDocumentRevisionRemark1,
				expr: &oneOrMoreExpr{
					pos: position{line: 162, col: 27, offset: 5209},
					expr: &charClassMatcher{
						pos:        position{line: 162, col: 27, offset: 5209},
						val:        "[^\\r\\r\\n]",
						chars:      []rune{'\r', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "AttributeDeclaration",
			pos:  position{line: 169, col: 1, offset: 5362},
			expr: &actionExpr{
				pos: position{line: 169, col: 25, offset: 5386},
				run: (*parser).callonAttributeDeclaration1,
				expr: &seqExpr{
					pos: position{line: 169, col: 25, offset: 5386},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 169, col: 25, offset: 5386},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 169, col: 29, offset: 5390},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 169, col: 35, offset: 5396},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 169, col: 50, offset: 5411},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 170, col: 9, offset: 5424},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 170, col: 15, offset: 5430},
								expr: &ruleRefExpr{
									pos:  position{line: 170, col: 16, offset: 5431},
									name: "AttributeDeclarationValue",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 170, col: 44, offset: 5459},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "AttributeName",
			pos:  position{line: 177, col: 1, offset: 5732},
			expr: &actionExpr{
				pos: position{line: 177, col: 18, offset: 5749},
				run: (*parser).callonAttributeName1,
				expr: &seqExpr{
					pos: position{line: 177, col: 18, offset: 5749},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 177, col: 18, offset: 5749},
							val:        "[\\pL0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 177, col: 28, offset: 5759},
							expr: &charClassMatcher{
								pos:        position{line: 177, col: 29, offset: 5760},
								val:        "[\\pL0-9-]",
								chars:      []rune{'-'},
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeDeclarationValue",
			pos:  position{line: 181, col: 1, offset: 5808},
			expr: &actionExpr{
				pos: position{line: 181, col: 30, offset: 5837},
				run: (*parser).callonAttributeDeclarationValue1,
				expr: &seqExpr{
					pos: position{line: 181, col: 30, offset: 5837},
					exprs: []interface{}{
						&oneOrMoreExpr{
							pos: position{line: 181, col: 30, offset: 5837},
							expr: &ruleRefExpr{
								pos:  position{line: 181, col: 30, offset: 5837},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 181, col: 37, offset: 5844},
							label: "elements",
							expr: &zeroOrMoreExpr{
								pos: position{line: 181, col: 46, offset: 5853},
								expr: &choiceExpr{
									pos: position{line: 182, col: 5, offset: 5859},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 182, col: 6, offset: 5860},
											run: (*parser).callonAttributeDeclarationValue8,
											expr: &oneOrMoreExpr{
												pos: position{line: 182, col: 6, offset: 5860},
												expr: &charClassMatcher{
													pos:        position{line: 182, col: 6, offset: 5860},
													val:        "[^\\r\\n{]",
													chars:      []rune{'\r', '\n', '{'},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 185, col: 5, offset: 5939},
											name: "AttributeSubstitution",
										},
										&actionExpr{
											pos: position{line: 186, col: 6, offset: 5968},
											run: (*parser).callonAttributeDeclarationValue12,
											expr: &litMatcher{
												pos:        position{line: 186, col: 6, offset: 5968},
												val:        "{",
												ignoreCase: false,
												want:       "\"{\"",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeReset",
			pos:  position{line: 193, col: 1, offset: 6135},
			expr: &choiceExpr{
				pos: position{line: 193, col: 19, offset: 6153},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 193, col: 19, offset: 6153},
						run: (*parser).callonAttributeReset2,
						expr: &seqExpr{
							pos: position{line: 193, col: 19, offset: 6153},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 193, col: 19, offset: 6153},
									val:        ":!",
									ignoreCase: false,
									want:       "\":!\"",
								},
								&labeledExpr{
									pos:   position{line: 193, col: 24, offset: 6158},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 193, col: 30, offset: 6164},
										name: "AttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 193, col: 45, offset: 6179},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 193, col: 49, offset: 6183},
									expr: &ruleRefExpr{
										pos:  position{line: 193, col: 49, offset: 6183},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 193, col: 56, offset: 6190},
									name: "EOL",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 195, col: 5, offset: 6250},
						run: (*parser).callonAttributeReset11,
						expr: &seqExpr{
							pos: position{line: 195, col: 5, offset: 6250},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 195, col: 5, offset: 6250},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&labeledExpr{
									pos:   position{line: 195, col: 9, offset: 6254},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 195, col: 15, offset: 6260},
										name: "AttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 195, col: 30, offset: 6275},
									val:        "!:",
									ignoreCase: false,
									want:       "\"!:\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 195, col: 35, offset: 6280},
									expr: &ruleRefExpr{
										pos:  position{line: 195, col: 35, offset: 6280},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 195, col: 42, offset: 6287},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeSubstitution",
			pos:  position{line: 199, col: 1, offset: 6346},
			expr: &choiceExpr{
				pos: position{line: 199, col: 26, offset: 6371},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 199, col: 26, offset: 6371},
						name: "CounterSub",
					},
					&ruleRefExpr{
						pos:  position{line: 199, col: 39, offset: 6384},
						name: "AttrSub",
					},
				},
			},
		},
		{
			name: "AttrSub",
			pos:  position{line: 201, col: 1, offset: 6393},
			expr: &actionExpr{
				pos: position{line: 201, col: 12, offset: 6404},
				run: (*parser).callonAttrSub1,
				expr: &seqExpr{
					pos: position{line: 201, col: 12, offset: 6404},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 201, col: 12, offset: 6404},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&labeledExpr{
							pos:   position{line: 201, col: 16, offset: 6408},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 201, col: 21, offset: 6413},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 201, col: 35, offset: 6427},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSub",
			pos:  position{line: 206, col: 1, offset: 6542},
			expr: &choiceExpr{
				pos: position{line: 206, col: 15, offset: 6556},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 206, col: 15, offset: 6556},
						name: "CounterSub1",
					},
					&ruleRefExpr{
						pos:  position{line: 206, col: 29, offset: 6570},
						name: "CounterSub2",
					},
					&ruleRefExpr{
						pos:  position{line: 206, col: 43, offset: 6584},
						name: "CounterSubAlpha",
					},
					&ruleRefExpr{
						pos:  position{line: 206, col: 61, offset: 6602},
						name: "CounterSubAlpha2",
					},
					&ruleRefExpr{
						pos:  position{line: 206, col: 80, offset: 6621},
						name: "CounterSubStart",
					},
					&ruleRefExpr{
						pos:  position{line: 206, col: 98, offset: 6639},
						name: "CounterSubStart2",
					},
				},
			},
		},
		{
			name: "CounterSub1",
			pos:  position{line: 208, col: 1, offset: 6657},
			expr: &actionExpr{
				pos: position{line: 208, col: 16, offset: 6672},
				run: (*parser).callonCounterSub11,
				expr: &seqExpr{
					pos: position{line: 208, col: 16, offset: 6672},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 208, col: 16, offset: 6672},
							val:        "{counter:",
							ignoreCase: false,
							want:       "\"{counter:\"",
						},
						&labeledExpr{
							pos:   position{line: 208, col: 28, offset: 6684},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 208, col: 33, offset: 6689},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 208, col: 47, offset: 6703},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSub2",
			pos:  position{line: 212, col: 1, offset: 6779},
			expr: &actionExpr{
				pos: position{line: 212, col: 16, offset: 6794},
				run: (*parser).callonCounterSub21,
				expr: &seqExpr{
					pos: position{line: 212, col: 16, offset: 6794},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 212, col: 16, offset: 6794},
							val:        "{counter2:",
							ignoreCase: false,
							want:       "\"{counter2:\"",
						},
						&labeledExpr{
							pos:   position{line: 212, col: 29, offset: 6807},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 212, col: 34, offset: 6812},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 212, col: 48, offset: 6826},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubAlpha",
			pos:  position{line: 216, col: 1, offset: 6901},
			expr: &actionExpr{
				pos: position{line: 216, col: 20, offset: 6920},
				run: (*parser).callonCounterSubAlpha1,
				expr: &seqExpr{
					pos: position{line: 216, col: 20, offset: 6920},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 216, col: 20, offset: 6920},
							val:        "{counter:",
							ignoreCase: false,
							want:       "\"{counter:\"",
						},
						&labeledExpr{
							pos:   position{line: 216, col: 32, offset: 6932},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 216, col: 37, offset: 6937},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 216, col: 51, offset: 6951},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 216, col: 55, offset: 6955},
							label: "start",
							expr: &charClassMatcher{
								pos:        position{line: 216, col: 61, offset: 6961},
								val:        "[A-Za-z]",
								ranges:     []rune{'A', 'Z', 'a', 'z'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&litMatcher{
							pos:        position{line: 216, col: 70, offset: 6970},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubAlpha2",
			pos:  position{line: 220, col: 1, offset: 7048},
			expr: &actionExpr{
				pos: position{line: 220, col: 21, offset: 7068},
				run: (*parser).callonCounterSubAlpha21,
				expr: &seqExpr{
					pos: position{line: 220, col: 21, offset: 7068},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 220, col: 21, offset: 7068},
							val:        "{counter2:",
							ignoreCase: false,
							want:       "\"{counter2:\"",
						},
						&labeledExpr{
							pos:   position{line: 220, col: 34, offset: 7081},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 220, col: 39, offset: 7086},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 220, col: 53, offset: 7100},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 220, col: 57, offset: 7104},
							label: "start",
							expr: &charClassMatcher{
								pos:        position{line: 220, col: 63, offset: 7110},
								val:        "[A-Za-z]",
								ranges:     []rune{'A', 'Z', 'a', 'z'},
								ignoreCase: false,
								inverted:   false,
							},
						},
						&litMatcher{
							pos:        position{line: 220, col: 72, offset: 7119},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubStart",
			pos:  position{line: 224, col: 1, offset: 7196},
			expr: &actionExpr{
				pos: position{line: 224, col: 20, offset: 7215},
				run: (*parser).callonCounterSubStart1,
				expr: &seqExpr{
					pos: position{line: 224, col: 20, offset: 7215},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 224, col: 20, offset: 7215},
							val:        "{counter:",
							ignoreCase: false,
							want:       "\"{counter:\"",
						},
						&labeledExpr{
							pos:   position{line: 224, col: 32, offset: 7227},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 224, col: 37, offset: 7232},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 224, col: 51, offset: 7246},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 224, col: 55, offset: 7250},
							label: "num",
							expr: &actionExpr{
								pos: position{line: 224, col: 60, offset: 7255},
								run: (*parser).callonCounterSubStart8,
								expr: &oneOrMoreExpr{
									pos: position{line: 224, col: 60, offset: 7255},
									expr: &charClassMatcher{
										pos:        position{line: 224, col: 60, offset: 7255},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 224, col: 108, offset: 7303},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "CounterSubStart2",
			pos:  position{line: 228, col: 1, offset: 7385},
			expr: &actionExpr{
				pos: position{line: 228, col: 21, offset: 7405},
				run: (*parser).callonCounterSubStart21,
				expr: &seqExpr{
					pos: position{line: 228, col: 21, offset: 7405},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 228, col: 21, offset: 7405},
							val:        "{counter2:",
							ignoreCase: false,
							want:       "\"{counter2:\"",
						},
						&labeledExpr{
							pos:   position{line: 228, col: 34, offset: 7418},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 228, col: 39, offset: 7423},
								name: "AttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 228, col: 53, offset: 7437},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 228, col: 57, offset: 7441},
							label: "num",
							expr: &actionExpr{
								pos: position{line: 228, col: 62, offset: 7446},
								run: (*parser).callonCounterSubStart28,
								expr: &oneOrMoreExpr{
									pos: position{line: 228, col: 62, offset: 7446},
									expr: &charClassMatcher{
										pos:        position{line: 228, col: 62, offset: 7446},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 228, col: 110, offset: 7494},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "InlineElementID",
			pos:  position{line: 232, col: 1, offset: 7575},
			expr: &actionExpr{
				pos: position{line: 232, col: 20, offset: 7594},
				run: (*parser).callonInlineElementID1,
				expr: &seqExpr{
					pos: position{line: 232, col: 20, offset: 7594},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 232, col: 20, offset: 7594},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 232, col: 25, offset: 7599},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 232, col: 29, offset: 7603},
								name: "Id",
							},
						},
						&litMatcher{
							pos:        position{line: 232, col: 33, offset: 7607},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 232, col: 38, offset: 7612},
							expr: &ruleRefExpr{
								pos:  position{line: 232, col: 38, offset: 7612},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "StandaloneAttributeKey",
			pos:  position{line: 236, col: 1, offset: 7751},
			expr: &actionExpr{
				pos: position{line: 236, col: 27, offset: 7777},
				run: (*parser).callonStandaloneAttributeKey1,
				expr: &seqExpr{
					pos: position{line: 236, col: 27, offset: 7777},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 236, col: 27, offset: 7777},
							expr: &litMatcher{
								pos:        position{line: 236, col: 28, offset: 7778},
								val:        "quote",
								ignoreCase: false,
								want:       "\"quote\"",
							},
						},
						&notExpr{
							pos: position{line: 236, col: 36, offset: 7786},
							expr: &litMatcher{
								pos:        position{line: 236, col: 37, offset: 7787},
								val:        "verse",
								ignoreCase: false,
								want:       "\"verse\"",
							},
						},
						&notExpr{
							pos: position{line: 236, col: 45, offset: 7795},
							expr: &litMatcher{
								pos:        position{line: 236, col: 46, offset: 7796},
								val:        "literal",
								ignoreCase: false,
								want:       "\"literal\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 236, col: 56, offset: 7806},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 236, col: 61, offset: 7811},
								name: "NamedAttributeKey",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 236, col: 80, offset: 7830},
							expr: &seqExpr{
								pos: position{line: 236, col: 81, offset: 7831},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 236, col: 81, offset: 7831},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 236, col: 85, offset: 7835},
										expr: &ruleRefExpr{
											pos:  position{line: 236, col: 85, offset: 7835},
											name: "Space",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockAttributes",
			pos:  position{line: 243, col: 1, offset: 8045},
			expr: &actionExpr{
				pos: position{line: 244, col: 5, offset: 8069},
				run: (*parser).callonBlockAttributes1,
				expr: &labeledExpr{
					pos:   position{line: 244, col: 5, offset: 8069},
					label: "attributes",
					expr: &oneOrMoreExpr{
						pos: position{line: 244, col: 16, offset: 8080},
						expr: &choiceExpr{
							pos: position{line: 246, col: 9, offset: 8147},
							alternatives: []interface{}{
								&actionExpr{
									pos: position{line: 246, col: 10, offset: 8148},
									run: (*parser).callonBlockAttributes5,
									expr: &seqExpr{
										pos: position{line: 246, col: 10, offset: 8148},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 246, col: 10, offset: 8148},
												label: "anchor",
												expr: &ruleRefExpr{
													pos:  position{line: 246, col: 18, offset: 8156},
													name: "ShortHandAnchor",
												},
											},
											&oneOrMoreExpr{
												pos: position{line: 246, col: 35, offset: 8173},
												expr: &seqExpr{
													pos: position{line: 246, col: 36, offset: 8174},
													exprs: []interface{}{
														&zeroOrMoreExpr{
															pos: position{line: 246, col: 36, offset: 8174},
															expr: &ruleRefExpr{
																pos:  position{line: 246, col: 36, offset: 8174},
																name: "Space",
															},
														},
														&ruleRefExpr{
															pos:  position{line: 246, col: 43, offset: 8181},
															name: "Newline",
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 250, col: 12, offset: 8301},
									run: (*parser).callonBlockAttributes14,
									expr: &seqExpr{
										pos: position{line: 250, col: 12, offset: 8301},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 250, col: 12, offset: 8301},
												label: "title",
												expr: &ruleRefExpr{
													pos:  position{line: 250, col: 19, offset: 8308},
													name: "ShortHandTitle",
												},
											},
											&oneOrMoreExpr{
												pos: position{line: 250, col: 35, offset: 8324},
												expr: &seqExpr{
													pos: position{line: 250, col: 36, offset: 8325},
													exprs: []interface{}{
														&zeroOrMoreExpr{
															pos: position{line: 250, col: 36, offset: 8325},
															expr: &ruleRefExpr{
																pos:  position{line: 250, col: 36, offset: 8325},
																name: "Space",
															},
														},
														&ruleRefExpr{
															pos:  position{line: 250, col: 43, offset: 8332},
															name: "Newline",
														},
													},
												},
											},
										},
									},
								},
								&actionExpr{
									pos: position{line: 254, col: 12, offset: 8422},
									run: (*parser).callonBlockAttributes23,
									expr: &seqExpr{
										pos: position{line: 254, col: 12, offset: 8422},
										exprs: []interface{}{
											&labeledExpr{
												pos:   position{line: 254, col: 12, offset: 8422},
												label: "attributes",
												expr: &ruleRefExpr{
													pos:  position{line: 254, col: 24, offset: 8434},
													name: "LongHandAttributes",
												},
											},
											&oneOrMoreExpr{
												pos: position{line: 254, col: 44, offset: 8454},
												expr: &seqExpr{
													pos: position{line: 254, col: 45, offset: 8455},
													exprs: []interface{}{
														&zeroOrMoreExpr{
															pos: position{line: 254, col: 45, offset: 8455},
															expr: &ruleRefExpr{
																pos:  position{line: 254, col: 45, offset: 8455},
																name: "Space",
															},
														},
														&ruleRefExpr{
															pos:  position{line: 254, col: 52, offset: 8462},
															name: "Newline",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineAttributes",
			pos:  position{line: 261, col: 1, offset: 8602},
			expr: &actionExpr{
				pos: position{line: 262, col: 5, offset: 8626},
				run: (*parser).callonInlineAttributes1,
				expr: &seqExpr{
					pos: position{line: 262, col: 5, offset: 8626},
					exprs: []interface{}{
						&stateCodeExpr{
							pos: position{line: 262, col: 5, offset: 8626},
							run: (*parser).callonInlineAttributes3,
						},
						&litMatcher{
							pos:        position{line: 265, col: 5, offset: 8677},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 266, col: 5, offset: 8685},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 266, col: 16, offset: 8696},
								expr: &choiceExpr{
									pos: position{line: 266, col: 17, offset: 8697},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 266, col: 17, offset: 8697},
											name: "PositionalAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 266, col: 37, offset: 8717},
											name: "NamedAttribute",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 267, col: 5, offset: 8738},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "StandaloneAttributes",
			pos:  position{line: 272, col: 1, offset: 8872},
			expr: &actionExpr{
				pos: position{line: 272, col: 25, offset: 8896},
				run: (*parser).callonStandaloneAttributes1,
				expr: &seqExpr{
					pos: position{line: 272, col: 25, offset: 8896},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 272, col: 25, offset: 8896},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 272, col: 37, offset: 8908},
								name: "BlockAttributes",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 272, col: 54, offset: 8925},
							expr: &ruleRefExpr{
								pos:  position{line: 272, col: 54, offset: 8925},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAnchor",
			pos:  position{line: 277, col: 1, offset: 9018},
			expr: &actionExpr{
				pos: position{line: 278, col: 4, offset: 9040},
				run: (*parser).callonShortHandAnchor1,
				expr: &seqExpr{
					pos: position{line: 278, col: 4, offset: 9040},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 278, col: 4, offset: 9040},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 279, col: 5, offset: 9050},
							label: "id",
							expr: &actionExpr{
								pos: position{line: 280, col: 9, offset: 9063},
								run: (*parser).callonShortHandAnchor5,
								expr: &labeledExpr{
									pos:   position{line: 280, col: 9, offset: 9063},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 280, col: 18, offset: 9072},
										expr: &choiceExpr{
											pos: position{line: 281, col: 13, offset: 9086},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 281, col: 14, offset: 9087},
													run: (*parser).callonShortHandAnchor9,
													expr: &oneOrMoreExpr{
														pos: position{line: 281, col: 14, offset: 9087},
														expr: &charClassMatcher{
															pos:        position{line: 281, col: 14, offset: 9087},
															val:        "[^=\\r\\n\\uFFFD{\\]]",
															chars:      []rune{'=', '\r', '\n', '�', '{', ']'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 284, col: 13, offset: 9254},
													name: "ElementPlaceHolder",
												},
												&ruleRefExpr{
													pos:  position{line: 285, col: 13, offset: 9287},
													name: "AttrSub",
												},
												&actionExpr{
													pos: position{line: 286, col: 14, offset: 9310},
													run: (*parser).callonShortHandAnchor14,
													expr: &litMatcher{
														pos:        position{line: 286, col: 14, offset: 9310},
														val:        "{",
														ignoreCase: false,
														want:       "\"{\"",
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 292, col: 5, offset: 9496},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
					},
				},
			},
		},
		{
			name: "ShortHandTitle",
			pos:  position{line: 297, col: 1, offset: 9597},
			expr: &actionExpr{
				pos: position{line: 297, col: 19, offset: 9615},
				run: (*parser).callonShortHandTitle1,
				expr: &seqExpr{
					pos: position{line: 297, col: 19, offset: 9615},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 297, col: 19, offset: 9615},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 297, col: 23, offset: 9619},
							label: "title",
							expr: &actionExpr{
								pos: position{line: 298, col: 5, offset: 9631},
								run: (*parser).callonShortHandTitle5,
								expr: &seqExpr{
									pos: position{line: 298, col: 5, offset: 9631},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 298, col: 5, offset: 9631},
											expr: &charClassMatcher{
												pos:        position{line: 298, col: 6, offset: 9632},
												val:        "[. ]",
												chars:      []rune{'.', ' '},
												ignoreCase: false,
												inverted:   false,
											},
										},
										&labeledExpr{
											pos:   position{line: 299, col: 5, offset: 9744},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 299, col: 14, offset: 9753},
												expr: &choiceExpr{
													pos: position{line: 300, col: 9, offset: 9763},
													alternatives: []interface{}{
														&actionExpr{
															pos: position{line: 300, col: 10, offset: 9764},
															run: (*parser).callonShortHandTitle12,
															expr: &oneOrMoreExpr{
																pos: position{line: 300, col: 10, offset: 9764},
																expr: &charClassMatcher{
																	pos:        position{line: 300, col: 10, offset: 9764},
																	val:        "[^\\r\\n\\uFFFD{]",
																	chars:      []rune{'\r', '\n', '�', '{'},
																	ignoreCase: false,
																	inverted:   true,
																},
															},
														},
														&ruleRefExpr{
															pos:  position{line: 303, col: 9, offset: 9862},
															name: "ElementPlaceHolder",
														},
														&ruleRefExpr{
															pos:  position{line: 304, col: 9, offset: 9891},
															name: "AttrSub",
														},
														&actionExpr{
															pos: position{line: 305, col: 10, offset: 9910},
															run: (*parser).callonShortHandTitle17,
															expr: &litMatcher{
																pos:        position{line: 305, col: 10, offset: 9910},
																val:        "{",
																ignoreCase: false,
																want:       "\"{\"",
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LongHandAttributes",
			pos:  position{line: 316, col: 1, offset: 10310},
			expr: &actionExpr{
				pos: position{line: 317, col: 5, offset: 10336},
				run: (*parser).callonLongHandAttributes1,
				expr: &seqExpr{
					pos: position{line: 317, col: 5, offset: 10336},
					exprs: []interface{}{
						&stateCodeExpr{
							pos: position{line: 317, col: 5, offset: 10336},
							run: (*parser).callonLongHandAttributes3,
						},
						&litMatcher{
							pos:        position{line: 320, col: 5, offset: 10387},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 322, col: 5, offset: 10453},
							label: "firstPositionalAttribute",
							expr: &zeroOrOneExpr{
								pos: position{line: 322, col: 30, offset: 10478},
								expr: &ruleRefExpr{
									pos:  position{line: 322, col: 31, offset: 10479},
									name: "FirstPositionalAttribute",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 323, col: 5, offset: 10510},
							label: "otherAttributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 323, col: 21, offset: 10526},
								expr: &choiceExpr{
									pos: position{line: 323, col: 22, offset: 10527},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 323, col: 22, offset: 10527},
											name: "PositionalAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 323, col: 44, offset: 10549},
											name: "NamedAttribute",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 324, col: 5, offset: 10570},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FirstPositionalAttribute",
			pos:  position{line: 335, col: 1, offset: 11027},
			expr: &actionExpr{
				pos: position{line: 336, col: 5, offset: 11060},
				run: (*parser).callonFirstPositionalAttribute1,
				expr: &seqExpr{
					pos: position{line: 336, col: 5, offset: 11060},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 336, col: 5, offset: 11060},
							label: "main",
							expr: &zeroOrOneExpr{
								pos: position{line: 336, col: 10, offset: 11065},
								expr: &ruleRefExpr{
									pos:  position{line: 337, col: 9, offset: 11075},
									name: "ShortHandAttribute",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 339, col: 5, offset: 11105},
							label: "extras",
							expr: &zeroOrMoreExpr{
								pos: position{line: 339, col: 12, offset: 11112},
								expr: &choiceExpr{
									pos: position{line: 340, col: 9, offset: 11123},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 340, col: 9, offset: 11123},
											name: "ShortHandIDAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 341, col: 11, offset: 11155},
											name: "ShortHandOptionAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 342, col: 11, offset: 11190},
											name: "ShortHandDotRoleAttribute",
										},
									},
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 343, col: 8, offset: 11223},
							expr: &seqExpr{
								pos: position{line: 343, col: 9, offset: 11224},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 343, col: 9, offset: 11224},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 343, col: 13, offset: 11228},
										expr: &ruleRefExpr{
											pos:  position{line: 343, col: 13, offset: 11228},
											name: "Space",
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 344, col: 5, offset: 11242},
							run: (*parser).callonFirstPositionalAttribute17,
						},
					},
				},
			},
		},
		{
			name: "ShortHandIDAttribute",
			pos:  position{line: 358, col: 1, offset: 11599},
			expr: &actionExpr{
				pos: position{line: 358, col: 25, offset: 11623},
				run: (*parser).callonShortHandIDAttribute1,
				expr: &seqExpr{
					pos: position{line: 358, col: 25, offset: 11623},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 358, col: 25, offset: 11623},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&labeledExpr{
							pos:   position{line: 358, col: 29, offset: 11627},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 358, col: 33, offset: 11631},
								name: "ShortHandAttributeValue",
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttribute",
			pos:  position{line: 366, col: 1, offset: 11794},
			expr: &actionExpr{
				pos: position{line: 366, col: 23, offset: 11816},
				run: (*parser).callonShortHandAttribute1,
				expr: &labeledExpr{
					pos:   position{line: 366, col: 23, offset: 11816},
					label: "value",
					expr: &ruleRefExpr{
						pos:  position{line: 366, col: 30, offset: 11823},
						name: "ShortHandAttributeValue",
					},
				},
			},
		},
		{
			name: "ShortHandDotRoleAttribute",
			pos:  position{line: 375, col: 1, offset: 12041},
			expr: &actionExpr{
				pos: position{line: 375, col: 30, offset: 12070},
				run: (*parser).callonShortHandDotRoleAttribute1,
				expr: &seqExpr{
					pos: position{line: 375, col: 30, offset: 12070},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 375, col: 30, offset: 12070},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 375, col: 34, offset: 12074},
							label: "role",
							expr: &ruleRefExpr{
								pos:  position{line: 375, col: 40, offset: 12080},
								name: "ShortHandAttributeValue",
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandOptionAttribute",
			pos:  position{line: 380, col: 1, offset: 12194},
			expr: &actionExpr{
				pos: position{line: 380, col: 29, offset: 12222},
				run: (*parser).callonShortHandOptionAttribute1,
				expr: &seqExpr{
					pos: position{line: 380, col: 29, offset: 12222},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 380, col: 29, offset: 12222},
							val:        "%",
							ignoreCase: false,
							want:       "\"%\"",
						},
						&labeledExpr{
							pos:   position{line: 380, col: 33, offset: 12226},
							label: "option",
							expr: &ruleRefExpr{
								pos:  position{line: 380, col: 41, offset: 12234},
								name: "ShortHandAttributeValue",
							},
						},
					},
				},
			},
		},
		{
			name: "ShortHandAttributeValue",
			pos:  position{line: 385, col: 1, offset: 12339},
			expr: &choiceExpr{
				pos: position{line: 386, col: 5, offset: 12371},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 386, col: 5, offset: 12371},
						name: "SingleQuotedAttributeValue",
					},
					&ruleRefExpr{
						pos:  position{line: 387, col: 7, offset: 12405},
						name: "DoubleQuotedAttributeValue",
					},
					&actionExpr{
						pos: position{line: 388, col: 7, offset: 12439},
						run: (*parser).callonShortHandAttributeValue4,
						expr: &seqExpr{
							pos: position{line: 388, col: 7, offset: 12439},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 388, col: 7, offset: 12439},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 388, col: 16, offset: 12448},
										expr: &choiceExpr{
											pos: position{line: 391, col: 5, offset: 12618},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 391, col: 6, offset: 12619},
													run: (*parser).callonShortHandAttributeValue9,
													expr: &oneOrMoreExpr{
														pos: position{line: 391, col: 6, offset: 12619},
														expr: &charClassMatcher{
															pos:        position{line: 391, col: 6, offset: 12619},
															val:        "[^,=.%# \\r\\n\\uFFFD{\\]]",
															chars:      []rune{',', '=', '.', '%', '#', ' ', '\r', '\n', '�', '{', ']'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 394, col: 5, offset: 12713},
													name: "ElementPlaceHolder",
												},
												&ruleRefExpr{
													pos:  position{line: 395, col: 5, offset: 12738},
													name: "AttrSub",
												},
												&actionExpr{
													pos: position{line: 396, col: 6, offset: 12753},
													run: (*parser).callonShortHandAttributeValue14,
													expr: &litMatcher{
														pos:        position{line: 396, col: 6, offset: 12753},
														val:        "{",
														ignoreCase: false,
														want:       "\"{\"",
													},
												},
											},
										},
									},
								},
								&andExpr{
									pos: position{line: 398, col: 10, offset: 12823},
									expr: &charClassMatcher{
										pos:        position{line: 398, col: 11, offset: 12824},
										val:        "[^=]",
										chars:      []rune{'='},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PositionalAttribute",
			pos:  position{line: 402, col: 1, offset: 12900},
			expr: &choiceExpr{
				pos: position{line: 402, col: 24, offset: 12923},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 403, col: 5, offset: 12929},
						run: (*parser).callonPositionalAttribute2,
						expr: &seqExpr{
							pos: position{line: 403, col: 5, offset: 12929},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 403, col: 5, offset: 12929},
									label: "value",
									expr: &ruleRefExpr{
										pos:  position{line: 403, col: 12, offset: 12936},
										name: "AttributeValue",
									},
								},
								&choiceExpr{
									pos: position{line: 403, col: 29, offset: 12953},
									alternatives: []interface{}{
										&zeroOrOneExpr{
											pos: position{line: 403, col: 29, offset: 12953},
											expr: &seqExpr{
												pos: position{line: 403, col: 30, offset: 12954},
												exprs: []interface{}{
													&litMatcher{
														pos:        position{line: 403, col: 30, offset: 12954},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
													&zeroOrMoreExpr{
														pos: position{line: 403, col: 34, offset: 12958},
														expr: &ruleRefExpr{
															pos:  position{line: 403, col: 34, offset: 12958},
															name: "Space",
														},
													},
												},
											},
										},
										&andExpr{
											pos: position{line: 403, col: 45, offset: 12969},
											expr: &litMatcher{
												pos:        position{line: 403, col: 46, offset: 12970},
												val:        "]",
												ignoreCase: false,
												want:       "\"]\"",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 412, col: 6, offset: 13221},
						run: (*parser).callonPositionalAttribute14,
						expr: &seqExpr{
							pos: position{line: 412, col: 6, offset: 13221},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 412, col: 6, offset: 13221},
									label: "value",
									expr: &seqExpr{
										pos: position{line: 412, col: 13, offset: 13228},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 412, col: 13, offset: 13228},
												expr: &ruleRefExpr{
													pos:  position{line: 412, col: 13, offset: 13228},
													name: "Space",
												},
											},
											&choiceExpr{
												pos: position{line: 412, col: 21, offset: 13236},
												alternatives: []interface{}{
													&seqExpr{
														pos: position{line: 412, col: 22, offset: 13237},
														exprs: []interface{}{
															&litMatcher{
																pos:        position{line: 412, col: 22, offset: 13237},
																val:        ",",
																ignoreCase: false,
																want:       "\",\"",
															},
															&zeroOrMoreExpr{
																pos: position{line: 412, col: 26, offset: 13241},
																expr: &ruleRefExpr{
																	pos:  position{line: 412, col: 26, offset: 13241},
																	name: "Space",
																},
															},
														},
													},
													&andExpr{
														pos: position{line: 412, col: 36, offset: 13251},
														expr: &litMatcher{
															pos:        position{line: 412, col: 37, offset: 13252},
															val:        "]",
															ignoreCase: false,
															want:       "\"]\"",
														},
													},
												},
											},
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 413, col: 5, offset: 13262},
									run: (*parser).callonPositionalAttribute27,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttribute",
			pos:  position{line: 428, col: 1, offset: 13697},
			expr: &actionExpr{
				pos: position{line: 428, col: 19, offset: 13715},
				run: (*parser).callonNamedAttribute1,
				expr: &seqExpr{
					pos: position{line: 428, col: 19, offset: 13715},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 428, col: 19, offset: 13715},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 428, col: 24, offset: 13720},
								name: "NamedAttributeKey",
							},
						},
						&litMatcher{
							pos:        position{line: 428, col: 43, offset: 13739},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 428, col: 47, offset: 13743},
							expr: &ruleRefExpr{
								pos:  position{line: 428, col: 47, offset: 13743},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 428, col: 54, offset: 13750},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 428, col: 61, offset: 13757},
								name: "AttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 428, col: 77, offset: 13773},
							expr: &seqExpr{
								pos: position{line: 428, col: 78, offset: 13774},
								exprs: []interface{}{
									&litMatcher{
										pos:        position{line: 428, col: 78, offset: 13774},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
									&zeroOrMoreExpr{
										pos: position{line: 428, col: 82, offset: 13778},
										expr: &ruleRefExpr{
											pos:  position{line: 428, col: 82, offset: 13778},
											name: "Space",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NamedAttributeKey",
			pos:  position{line: 437, col: 1, offset: 14091},
			expr: &actionExpr{
				pos: position{line: 437, col: 22, offset: 14112},
				run: (*parser).callonNamedAttributeKey1,
				expr: &seqExpr{
					pos: position{line: 437, col: 22, offset: 14112},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 437, col: 22, offset: 14112},
							expr: &ruleRefExpr{
								pos:  position{line: 437, col: 23, offset: 14113},
								name: "Space",
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 437, col: 29, offset: 14119},
							expr: &charClassMatcher{
								pos:        position{line: 437, col: 29, offset: 14119},
								val:        "[^\\r\\n=,\\]]",
								chars:      []rune{'\r', '\n', '=', ',', ']'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 437, col: 42, offset: 14132},
							expr: &ruleRefExpr{
								pos:  position{line: 437, col: 42, offset: 14132},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeValue",
			pos:  position{line: 441, col: 1, offset: 14194},
			expr: &actionExpr{
				pos: position{line: 442, col: 5, offset: 14217},
				run: (*parser).callonAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 442, col: 5, offset: 14217},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 442, col: 5, offset: 14217},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 443, col: 9, offset: 14233},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 443, col: 9, offset: 14233},
										name: "SingleQuotedAttributeValue",
									},
									&ruleRefExpr{
										pos:  position{line: 444, col: 11, offset: 14271},
										name: "DoubleQuotedAttributeValue",
									},
									&ruleRefExpr{
										pos:  position{line: 445, col: 11, offset: 14309},
										name: "UnquotedAttributeValue",
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 447, col: 5, offset: 14343},
							expr: &notExpr{
								pos: position{line: 447, col: 7, offset: 14345},
								expr: &seqExpr{
									pos: position{line: 447, col: 9, offset: 14347},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 447, col: 9, offset: 14347},
											expr: &ruleRefExpr{
												pos:  position{line: 447, col: 9, offset: 14347},
												name: "Space",
											},
										},
										&litMatcher{
											pos:        position{line: 447, col: 16, offset: 14354},
											val:        "=",
											ignoreCase: false,
											want:       "\"=\"",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedAttributeValue",
			pos:  position{line: 451, col: 1, offset: 14395},
			expr: &actionExpr{
				pos: position{line: 452, col: 5, offset: 14430},
				run: (*parser).callonSingleQuotedAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 452, col: 5, offset: 14430},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 452, col: 5, offset: 14430},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&labeledExpr{
							pos:   position{line: 453, col: 5, offset: 14439},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 453, col: 14, offset: 14448},
								expr: &choiceExpr{
									pos: position{line: 454, col: 9, offset: 14458},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 454, col: 10, offset: 14459},
											run: (*parser).callonSingleQuotedAttributeValue7,
											expr: &oneOrMoreExpr{
												pos: position{line: 454, col: 10, offset: 14459},
												expr: &charClassMatcher{
													pos:        position{line: 454, col: 10, offset: 14459},
													val:        "[^'\\r\\n\\uFFFD\\\\{]",
													chars:      []rune{'\'', '\r', '\n', '�', '\\', '{'},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 457, col: 11, offset: 14605},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 458, col: 11, offset: 14634},
											name: "AttrSub",
										},
										&choiceExpr{
											pos: position{line: 459, col: 12, offset: 14653},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 459, col: 12, offset: 14653},
													run: (*parser).callonSingleQuotedAttributeValue13,
													expr: &litMatcher{
														pos:        position{line: 459, col: 12, offset: 14653},
														val:        "\\'",
														ignoreCase: false,
														want:       "\"\\\\'\"",
													},
												},
												&litMatcher{
													pos:        position{line: 462, col: 11, offset: 14745},
													val:        "{",
													ignoreCase: false,
													want:       "\"{\"",
												},
												&actionExpr{
													pos: position{line: 462, col: 17, offset: 14751},
													run: (*parser).callonSingleQuotedAttributeValue16,
													expr: &litMatcher{
														pos:        position{line: 462, col: 17, offset: 14751},
														val:        "\\",
														ignoreCase: false,
														want:       "\"\\\\\"",
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 466, col: 5, offset: 14840},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedAttributeValue",
			pos:  position{line: 470, col: 1, offset: 14896},
			expr: &actionExpr{
				pos: position{line: 471, col: 5, offset: 14931},
				run: (*parser).callonDoubleQuotedAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 471, col: 5, offset: 14931},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 471, col: 5, offset: 14931},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 472, col: 5, offset: 14941},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 472, col: 14, offset: 14950},
								expr: &choiceExpr{
									pos: position{line: 473, col: 9, offset: 14960},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 473, col: 10, offset: 14961},
											run: (*parser).callonDoubleQuotedAttributeValue7,
											expr: &oneOrMoreExpr{
												pos: position{line: 473, col: 10, offset: 14961},
												expr: &charClassMatcher{
													pos:        position{line: 473, col: 10, offset: 14961},
													val:        "[^\\r\\n\\uFFFD\"\\\\{]",
													chars:      []rune{'\r', '\n', '�', '"', '\\', '{'},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 476, col: 11, offset: 15107},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 477, col: 11, offset: 15136},
											name: "AttrSub",
										},
										&choiceExpr{
											pos: position{line: 478, col: 12, offset: 15155},
											alternatives: []interface{}{
												&actionExpr{
													pos: position{line: 478, col: 12, offset: 15155},
													run: (*parser).callonDoubleQuotedAttributeValue13,
													expr: &litMatcher{
														pos:        position{line: 478, col: 12, offset: 15155},
														val:        "\\\"",
														ignoreCase: false,
														want:       "\"\\\\\\\"\"",
													},
												},
												&litMatcher{
													pos:        position{line: 481, col: 11, offset: 15247},
													val:        "{",
													ignoreCase: false,
													want:       "\"{\"",
												},
												&actionExpr{
													pos: position{line: 481, col: 17, offset: 15253},
													run: (*parser).callonDoubleQuotedAttributeValue16,
													expr: &litMatcher{
														pos:        position{line: 481, col: 17, offset: 15253},
														val:        "\\",
														ignoreCase: false,
														want:       "\"\\\\\"",
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 485, col: 5, offset: 15342},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "UnquotedAttributeValue",
			pos:  position{line: 490, col: 1, offset: 15477},
			expr: &actionExpr{
				pos: position{line: 491, col: 5, offset: 15508},
				run: (*parser).callonUnquotedAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 491, col: 5, offset: 15508},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 491, col: 5, offset: 15508},
							expr: &ruleRefExpr{
								pos:  position{line: 491, col: 6, offset: 15509},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 492, col: 5, offset: 15519},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 492, col: 14, offset: 15528},
								expr: &choiceExpr{
									pos: position{line: 493, col: 9, offset: 15538},
									alternatives: []interface{}{
										&actionExpr{
											pos: position{line: 493, col: 10, offset: 15539},
											run: (*parser).callonUnquotedAttributeValue8,
											expr: &oneOrMoreExpr{
												pos: position{line: 493, col: 10, offset: 15539},
												expr: &charClassMatcher{
													pos:        position{line: 493, col: 10, offset: 15539},
													val:        "[^,=\\r\\n\\uFFFD{\\]]",
													chars:      []rune{',', '=', '\r', '\n', '�', '{', ']'},
													ignoreCase: false,
													inverted:   true,
												},
											},
										},
										&ruleRefExpr{
											pos:  position{line: 496, col: 11, offset: 15641},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 497, col: 11, offset: 15670},
											name: "AttrSub",
										},
										&actionExpr{
											pos: position{line: 498, col: 12, offset: 15689},
											run: (*parser).callonUnquotedAttributeValue13,
											expr: &litMatcher{
												pos:        position{line: 498, col: 12, offset: 15689},
												val:        "{",
												ignoreCase: false,
												want:       "\"{\"",
											},
										},
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 502, col: 5, offset: 15777},
							run: (*parser).callonUnquotedAttributeValue15,
						},
					},
				},
			},
		},
		{
			name: "Section",
			pos:  position{line: 513, col: 1, offset: 16078},
			expr: &actionExpr{
				pos: position{line: 513, col: 12, offset: 16089},
				run: (*parser).callonSection1,
				expr: &seqExpr{
					pos: position{line: 513, col: 12, offset: 16089},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 513, col: 12, offset: 16089},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 513, col: 23, offset: 16100},
								expr: &ruleRefExpr{
									pos:  position{line: 513, col: 24, offset: 16101},
									name: "BlockAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 514, col: 5, offset: 16123},
							label: "level",
							expr: &actionExpr{
								pos: position{line: 514, col: 12, offset: 16130},
								run: (*parser).callonSection7,
								expr: &oneOrMoreExpr{
									pos: position{line: 514, col: 12, offset: 16130},
									expr: &litMatcher{
										pos:        position{line: 514, col: 13, offset: 16131},
										val:        "=",
										ignoreCase: false,
										want:       "\"=\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 518, col: 5, offset: 16222},
							run: (*parser).callonSection10,
						},
						&oneOrMoreExpr{
							pos: position{line: 522, col: 5, offset: 16374},
							expr: &ruleRefExpr{
								pos:  position{line: 522, col: 5, offset: 16374},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 522, col: 12, offset: 16381},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 522, col: 19, offset: 16388},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 522, col: 34, offset: 16403},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 522, col: 38, offset: 16407},
								expr: &ruleRefExpr{
									pos:  position{line: 522, col: 38, offset: 16407},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 522, col: 56, offset: 16425},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "TitleElements",
			pos:  position{line: 526, col: 1, offset: 16531},
			expr: &actionExpr{
				pos: position{line: 526, col: 18, offset: 16548},
				run: (*parser).callonTitleElements1,
				expr: &labeledExpr{
					pos:   position{line: 526, col: 18, offset: 16548},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 526, col: 27, offset: 16557},
						expr: &seqExpr{
							pos: position{line: 526, col: 28, offset: 16558},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 526, col: 28, offset: 16558},
									expr: &ruleRefExpr{
										pos:  position{line: 526, col: 29, offset: 16559},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 526, col: 37, offset: 16567},
									expr: &ruleRefExpr{
										pos:  position{line: 526, col: 38, offset: 16568},
										name: "InlineElementID",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 526, col: 54, offset: 16584},
									name: "TitleElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TitleElement",
			pos:  position{line: 530, col: 1, offset: 16705},
			expr: &actionExpr{
				pos: position{line: 530, col: 17, offset: 16721},
				run: (*parser).callonTitleElement1,
				expr: &labeledExpr{
					pos:   position{line: 530, col: 17, offset: 16721},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 530, col: 26, offset: 16730},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 530, col: 26, offset: 16730},
								name: "Word",
							},
							&ruleRefExpr{
								pos:  position{line: 531, col: 11, offset: 16745},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 532, col: 11, offset: 16790},
								expr: &ruleRefExpr{
									pos:  position{line: 532, col: 11, offset: 16790},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 533, col: 11, offset: 16808},
								name: "ElementPlaceHolder",
							},
							&ruleRefExpr{
								pos:  position{line: 534, col: 11, offset: 16837},
								name: "AnyChar",
							},
						},
					},
				},
			},
		},
		{
			name: "TableOfContentsPlaceHolder",
			pos:  position{line: 541, col: 1, offset: 16988},
			expr: &seqExpr{
				pos: position{line: 541, col: 31, offset: 17018},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 541, col: 31, offset: 17018},
						val:        "toc::[]",
						ignoreCase: false,
						want:       "\"toc::[]\"",
					},
					&ruleRefExpr{
						pos:  position{line: 541, col: 41, offset: 17028},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "UserMacroBlock",
			pos:  position{line: 546, col: 1, offset: 17139},
			expr: &actionExpr{
				pos: position{line: 546, col: 19, offset: 17157},
				run: (*parser).callonUserMacroBlock1,
				expr: &seqExpr{
					pos: position{line: 546, col: 19, offset: 17157},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 546, col: 19, offset: 17157},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 546, col: 25, offset: 17163},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 546, col: 40, offset: 17178},
							val:        "::",
							ignoreCase: false,
							want:       "\"::\"",
						},
						&labeledExpr{
							pos:   position{line: 546, col: 45, offset: 17183},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 546, col: 52, offset: 17190},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 546, col: 68, offset: 17206},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 546, col: 86, offset: 17224},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineUserMacro",
			pos:  position{line: 550, col: 1, offset: 17347},
			expr: &actionExpr{
				pos: position{line: 550, col: 20, offset: 17366},
				run: (*parser).callonInlineUserMacro1,
				expr: &seqExpr{
					pos: position{line: 550, col: 20, offset: 17366},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 550, col: 20, offset: 17366},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 550, col: 26, offset: 17372},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 550, col: 41, offset: 17387},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 550, col: 45, offset: 17391},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 550, col: 52, offset: 17398},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 550, col: 68, offset: 17414},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 550, col: 86, offset: 17432},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroName",
			pos:  position{line: 554, col: 1, offset: 17556},
			expr: &actionExpr{
				pos: position{line: 554, col: 18, offset: 17573},
				run: (*parser).callonUserMacroName1,
				expr: &seqExpr{
					pos: position{line: 554, col: 18, offset: 17573},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 554, col: 18, offset: 17573},
							expr: &litMatcher{
								pos:        position{line: 554, col: 19, offset: 17574},
								val:        "include",
								ignoreCase: false,
								want:       "\"include\"",
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 554, col: 30, offset: 17585},
							expr: &charClassMatcher{
								pos:        position{line: 554, col: 30, offset: 17585},
								val:        "[\\pL0-9_-]",
								chars:      []rune{'_', '-'},
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroValue",
			pos:  position{line: 558, col: 1, offset: 17634},
			expr: &actionExpr{
				pos: position{line: 558, col: 19, offset: 17652},
				run: (*parser).callonUserMacroValue1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 558, col: 19, offset: 17652},
					expr: &charClassMatcher{
						pos:        position{line: 558, col: 19, offset: 17652},
						val:        "[^:[ \\r\\n]",
						chars:      []rune{':', '[', ' ', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "FileInclusion",
			pos:  position{line: 565, col: 1, offset: 17811},
			expr: &actionExpr{
				pos: position{line: 566, col: 5, offset: 17833},
				run: (*parser).callonFileInclusion1,
				expr: &seqExpr{
					pos: position{line: 566, col: 5, offset: 17833},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 566, col: 5, offset: 17833},
							label: "incl",
							expr: &actionExpr{
								pos: position{line: 567, col: 9, offset: 17848},
								run: (*parser).callonFileInclusion4,
								expr: &seqExpr{
									pos: position{line: 567, col: 9, offset: 17848},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 567, col: 9, offset: 17848},
											val:        "include::",
											ignoreCase: false,
											want:       "\"include::\"",
										},
										&labeledExpr{
											pos:   position{line: 568, col: 9, offset: 17869},
											label: "path",
											expr: &ruleRefExpr{
												pos:  position{line: 568, col: 15, offset: 17875},
												name: "FileLocation",
											},
										},
										&labeledExpr{
											pos:   position{line: 569, col: 9, offset: 17898},
											label: "inlineAttributes",
											expr: &ruleRefExpr{
												pos:  position{line: 569, col: 27, offset: 17916},
												name: "InlineAttributes",
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 573, col: 5, offset: 18076},
							expr: &ruleRefExpr{
								pos:  position{line: 573, col: 5, offset: 18076},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 573, col: 12, offset: 18083},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "FileIncludeAttributes",
			pos:  position{line: 577, col: 1, offset: 18143},
			expr: &ruleRefExpr{
				pos:  position{line: 577, col: 26, offset: 18168},
				name: "LongHandAttributes",
			},
		},
		{
			name: "LineRanges",
			pos:  position{line: 580, col: 1, offset: 18208},
			expr: &actionExpr{
				pos: position{line: 580, col: 15, offset: 18222},
				run: (*parser).callonLineRanges1,
				expr: &seqExpr{
					pos: position{line: 580, col: 15, offset: 18222},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 580, col: 15, offset: 18222},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 580, col: 22, offset: 18229},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 580, col: 22, offset: 18229},
										name: "MultipleLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 581, col: 11, offset: 18259},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 582, col: 11, offset: 18285},
										name: "SingleLineRange",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 583, col: 11, offset: 18312},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "MultipleLineRanges",
			pos:  position{line: 587, col: 1, offset: 18394},
			expr: &actionExpr{
				pos: position{line: 587, col: 23, offset: 18416},
				run: (*parser).callonMultipleLineRanges1,
				expr: &seqExpr{
					pos: position{line: 587, col: 23, offset: 18416},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 587, col: 23, offset: 18416},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 587, col: 30, offset: 18423},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 587, col: 30, offset: 18423},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 587, col: 47, offset: 18440},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 588, col: 5, offset: 18462},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 588, col: 12, offset: 18469},
								expr: &actionExpr{
									pos: position{line: 589, col: 9, offset: 18479},
									run: (*parser).callonMultipleLineRanges9,
									expr: &seqExpr{
										pos: position{line: 589, col: 9, offset: 18479},
										exprs: []interface{}{
											&choiceExpr{
												pos: position{line: 589, col: 10, offset: 18480},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 589, col: 10, offset: 18480},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
													&litMatcher{
														pos:        position{line: 589, col: 16, offset: 18486},
														val:        ";",
														ignoreCase: false,
														want:       "\";\"",
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 590, col: 9, offset: 18597},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 590, col: 16, offset: 18604},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 590, col: 16, offset: 18604},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 590, col: 33, offset: 18621},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultiLineRange",
			pos:  position{line: 596, col: 1, offset: 18763},
			expr: &actionExpr{
				pos: position{line: 596, col: 19, offset: 18781},
				run: (*parser).callonMultiLineRange1,
				expr: &seqExpr{
					pos: position{line: 596, col: 19, offset: 18781},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 596, col: 19, offset: 18781},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 596, col: 26, offset: 18788},
								name: "Number",
							},
						},
						&litMatcher{
							pos:        position{line: 596, col: 34, offset: 18796},
							val:        "..",
							ignoreCase: false,
							want:       "\"..\"",
						},
						&labeledExpr{
							pos:   position{line: 596, col: 39, offset: 18801},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 596, col: 44, offset: 18806},
								name: "Number",
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineRange",
			pos:  position{line: 600, col: 1, offset: 18894},
			expr: &actionExpr{
				pos: position{line: 600, col: 20, offset: 18913},
				run: (*parser).callonSingleLineRange1,
				expr: &labeledExpr{
					pos:   position{line: 600, col: 20, offset: 18913},
					label: "singleline",
					expr: &ruleRefExpr{
						pos:  position{line: 600, col: 32, offset: 18925},
						name: "Number",
					},
				},
			},
		},
		{
			name: "TagRanges",
			pos:  position{line: 605, col: 1, offset: 19040},
			expr: &actionExpr{
				pos: position{line: 605, col: 14, offset: 19053},
				run: (*parser).callonTagRanges1,
				expr: &seqExpr{
					pos: position{line: 605, col: 14, offset: 19053},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 605, col: 14, offset: 19053},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 605, col: 21, offset: 19060},
								name: "MultipleTagRanges",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 605, col: 40, offset: 19079},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "MultipleTagRanges",
			pos:  position{line: 609, col: 1, offset: 19161},
			expr: &actionExpr{
				pos: position{line: 609, col: 22, offset: 19182},
				run: (*parser).callonMultipleTagRanges1,
				expr: &seqExpr{
					pos: position{line: 609, col: 22, offset: 19182},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 609, col: 22, offset: 19182},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 609, col: 29, offset: 19189},
								name: "TagRange",
							},
						},
						&labeledExpr{
							pos:   position{line: 610, col: 5, offset: 19203},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 610, col: 12, offset: 19210},
								expr: &actionExpr{
									pos: position{line: 611, col: 9, offset: 19220},
									run: (*parser).callonMultipleTagRanges7,
									expr: &seqExpr{
										pos: position{line: 611, col: 9, offset: 19220},
										exprs: []interface{}{
											&choiceExpr{
												pos: position{line: 611, col: 10, offset: 19221},
												alternatives: []interface{}{
													&litMatcher{
														pos:        position{line: 611, col: 10, offset: 19221},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
													&litMatcher{
														pos:        position{line: 611, col: 16, offset: 19227},
														val:        ";",
														ignoreCase: false,
														want:       "\";\"",
													},
												},
											},
											&labeledExpr{
												pos:   position{line: 612, col: 9, offset: 19338},
												label: "other",
												expr: &ruleRefExpr{
													pos:  position{line: 612, col: 16, offset: 19345},
													name: "TagRange",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagRange",
			pos:  position{line: 618, col: 1, offset: 19480},
			expr: &choiceExpr{
				pos: position{line: 618, col: 13, offset: 19492},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 618, col: 13, offset: 19492},
						run: (*parser).callonTagRange2,
						expr: &labeledExpr{
							pos:   position{line: 618, col: 13, offset: 19492},
							label: "tag",
							expr: &choiceExpr{
								pos: position{line: 618, col: 18, offset: 19497},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 618, col: 18, offset: 19497},
										name: "Alphanums",
									},
									&ruleRefExpr{
										pos:  position{line: 618, col: 30, offset: 19509},
										name: "TagWildcard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 620, col: 5, offset: 19577},
						run: (*parser).callonTagRange7,
						expr: &seqExpr{
							pos: position{line: 620, col: 5, offset: 19577},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 620, col: 5, offset: 19577},
									val:        "!",
									ignoreCase: false,
									want:       "\"!\"",
								},
								&labeledExpr{
									pos:   position{line: 620, col: 9, offset: 19581},
									label: "tag",
									expr: &choiceExpr{
										pos: position{line: 620, col: 14, offset: 19586},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 620, col: 14, offset: 19586},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 620, col: 26, offset: 19598},
												name: "TagWildcard",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagWildcard",
			pos:  position{line: 624, col: 1, offset: 19666},
			expr: &actionExpr{
				pos: position{line: 624, col: 16, offset: 19681},
				run: (*parser).callonTagWildcard1,
				expr: &seqExpr{
					pos: position{line: 624, col: 16, offset: 19681},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 624, col: 16, offset: 19681},
							label: "stars",
							expr: &actionExpr{
								pos: position{line: 624, col: 23, offset: 19688},
								run: (*parser).callonTagWildcard4,
								expr: &oneOrMoreExpr{
									pos: position{line: 624, col: 23, offset: 19688},
									expr: &litMatcher{
										pos:        position{line: 624, col: 24, offset: 19689},
										val:        "*",
										ignoreCase: false,
										want:       "\"*\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 627, col: 5, offset: 19743},
							run: (*parser).callonTagWildcard7,
						},
					},
				},
			},
		},
		{
			name: "IncludedFileLine",
			pos:  position{line: 637, col: 1, offset: 20037},
			expr: &actionExpr{
				pos: position{line: 637, col: 21, offset: 20057},
				run: (*parser).callonIncludedFileLine1,
				expr: &seqExpr{
					pos: position{line: 637, col: 21, offset: 20057},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 637, col: 21, offset: 20057},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 637, col: 29, offset: 20065},
								expr: &choiceExpr{
									pos: position{line: 637, col: 30, offset: 20066},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 637, col: 30, offset: 20066},
											name: "IncludedFileStartTag",
										},
										&ruleRefExpr{
											pos:  position{line: 637, col: 53, offset: 20089},
											name: "IncludedFileEndTag",
										},
										&actionExpr{
											pos: position{line: 637, col: 74, offset: 20110},
											run: (*parser).callonIncludedFileLine8,
											expr: &anyMatcher{
												line: 637, col: 74, offset: 20110,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 637, col: 107, offset: 20143},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileStartTag",
			pos:  position{line: 641, col: 1, offset: 20214},
			expr: &actionExpr{
				pos: position{line: 641, col: 25, offset: 20238},
				run: (*parser).callonIncludedFileStartTag1,
				expr: &seqExpr{
					pos: position{line: 641, col: 25, offset: 20238},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 641, col: 25, offset: 20238},
							val:        "tag::",
							ignoreCase: false,
							want:       "\"tag::\"",
						},
						&labeledExpr{
							pos:   position{line: 641, col: 33, offset: 20246},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 641, col: 38, offset: 20251},
								run: (*parser).callonIncludedFileStartTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 641, col: 38, offset: 20251},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 641, col: 78, offset: 20291},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileEndTag",
			pos:  position{line: 645, col: 1, offset: 20356},
			expr: &actionExpr{
				pos: position{line: 645, col: 23, offset: 20378},
				run: (*parser).callonIncludedFileEndTag1,
				expr: &seqExpr{
					pos: position{line: 645, col: 23, offset: 20378},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 645, col: 23, offset: 20378},
							val:        "end::",
							ignoreCase: false,
							want:       "\"end::\"",
						},
						&labeledExpr{
							pos:   position{line: 645, col: 31, offset: 20386},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 645, col: 36, offset: 20391},
								run: (*parser).callonIncludedFileEndTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 645, col: 36, offset: 20391},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 645, col: 76, offset: 20431},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "ListParagraph",
			pos:  position{line: 652, col: 1, offset: 20595},
			expr: &choiceExpr{
				pos: position{line: 652, col: 18, offset: 20612},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 652, col: 18, offset: 20612},
						run: (*parser).callonListParagraph2,
						expr: &labeledExpr{
							pos:   position{line: 652, col: 18, offset: 20612},
							label: "comment",
							expr: &ruleRefExpr{
								pos:  position{line: 652, col: 27, offset: 20621},
								name: "SingleLineComment",
							},
						},
					},
					&actionExpr{
						pos: position{line: 654, col: 9, offset: 20678},
						run: (*parser).callonListParagraph5,
						expr: &labeledExpr{
							pos:   position{line: 654, col: 9, offset: 20678},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 654, col: 15, offset: 20684},
								expr: &ruleRefExpr{
									pos:  position{line: 654, col: 16, offset: 20685},
									name: "ListParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListParagraphLine",
			pos:  position{line: 658, col: 1, offset: 20777},
			expr: &actionExpr{
				pos: position{line: 658, col: 22, offset: 20798},
				run: (*parser).callonListParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 658, col: 22, offset: 20798},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 658, col: 22, offset: 20798},
							expr: &ruleRefExpr{
								pos:  position{line: 658, col: 23, offset: 20799},
								name: "EOF",
							},
						},
						&notExpr{
							pos: position{line: 659, col: 5, offset: 20807},
							expr: &ruleRefExpr{
								pos:  position{line: 659, col: 6, offset: 20808},
								name: "BlankLine",
							},
						},
						&notExpr{
							pos: position{line: 660, col: 5, offset: 20822},
							expr: &ruleRefExpr{
								pos:  position{line: 660, col: 6, offset: 20823},
								name: "SingleLineComment",
							},
						},
						&notExpr{
							pos: position{line: 661, col: 5, offset: 20845},
							expr: &ruleRefExpr{
								pos:  position{line: 661, col: 6, offset: 20846},
								name: "OrderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 662, col: 5, offset: 20872},
							expr: &ruleRefExpr{
								pos:  position{line: 662, col: 6, offset: 20873},
								name: "UnorderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 663, col: 5, offset: 20901},
							expr: &ruleRefExpr{
								pos:  position{line: 663, col: 6, offset: 20902},
								name: "CalloutListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 664, col: 5, offset: 20928},
							expr: &ruleRefExpr{
								pos:  position{line: 664, col: 6, offset: 20929},
								name: "ListItemContinuation",
							},
						},
						&notExpr{
							pos: position{line: 665, col: 5, offset: 20954},
							expr: &ruleRefExpr{
								pos:  position{line: 665, col: 6, offset: 20955},
								name: "BlockAttributes",
							},
						},
						&notExpr{
							pos: position{line: 666, col: 5, offset: 20975},
							expr: &ruleRefExpr{
								pos:  position{line: 666, col: 6, offset: 20976},
								name: "BlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 667, col: 5, offset: 20995},
							expr: &ruleRefExpr{
								pos:  position{line: 667, col: 6, offset: 20996},
								name: "LabeledListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 668, col: 5, offset: 21023},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 668, col: 11, offset: 21029},
								run: (*parser).callonListParagraphLine24,
								expr: &seqExpr{
									pos: position{line: 668, col: 11, offset: 21029},
									exprs: []interface{}{
										&zeroOrMoreExpr{
											pos: position{line: 668, col: 11, offset: 21029},
											expr: &ruleRefExpr{
												pos:  position{line: 668, col: 11, offset: 21029},
												name: "Space",
											},
										},
										&labeledExpr{
											pos:   position{line: 668, col: 18, offset: 21036},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 668, col: 27, offset: 21045},
												expr: &ruleRefExpr{
													pos:  position{line: 668, col: 28, offset: 21046},
													name: "InlineElement",
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 670, col: 12, offset: 21145},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ListItemContinuation",
			pos:  position{line: 674, col: 1, offset: 21184},
			expr: &seqExpr{
				pos: position{line: 674, col: 25, offset: 21208},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 674, col: 25, offset: 21208},
						val:        "+",
						ignoreCase: false,
						want:       "\"+\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 674, col: 29, offset: 21212},
						expr: &ruleRefExpr{
							pos:  position{line: 674, col: 29, offset: 21212},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 674, col: 36, offset: 21219},
						name: "Newline",
					},
				},
			},
		},
		{
			name: "ContinuedListItemElement",
			pos:  position{line: 676, col: 1, offset: 21291},
			expr: &actionExpr{
				pos: position{line: 676, col: 29, offset: 21319},
				run: (*parser).callonContinuedListItemElement1,
				expr: &seqExpr{
					pos: position{line: 676, col: 29, offset: 21319},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 676, col: 29, offset: 21319},
							name: "ListItemContinuation",
						},
						&labeledExpr{
							pos:   position{line: 676, col: 50, offset: 21340},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 676, col: 58, offset: 21348},
								name: "ContinuedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "ContinuedListItemContent",
			pos:  position{line: 680, col: 1, offset: 21454},
			expr: &actionExpr{
				pos: position{line: 680, col: 29, offset: 21482},
				run: (*parser).callonContinuedListItemContent1,
				expr: &seqExpr{
					pos: position{line: 680, col: 29, offset: 21482},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 680, col: 29, offset: 21482},
							expr: &ruleRefExpr{
								pos:  position{line: 680, col: 30, offset: 21483},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 681, col: 5, offset: 21492},
							label: "content",
							expr: &choiceExpr{
								pos: position{line: 681, col: 14, offset: 21501},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 681, col: 14, offset: 21501},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 682, col: 11, offset: 21526},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 683, col: 11, offset: 21554},
										name: "Table",
									},
									&ruleRefExpr{
										pos:  position{line: 684, col: 11, offset: 21570},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 685, col: 11, offset: 21591},
										name: "ThematicBreak",
									},
									&ruleRefExpr{
										pos:  position{line: 686, col: 11, offset: 21615},
										name: "OrderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 687, col: 11, offset: 21642},
										name: "UnorderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 688, col: 11, offset: 21671},
										name: "LabeledListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 689, col: 11, offset: 21698},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 690, col: 11, offset: 21749},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 691, col: 11, offset: 21773},
										name: "AttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 692, col: 11, offset: 21805},
										name: "AttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 693, col: 11, offset: 21831},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 694, col: 11, offset: 21868},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 695, col: 11, offset: 21893},
										name: "ContinuedRawParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItem",
			pos:  position{line: 702, col: 1, offset: 22059},
			expr: &actionExpr{
				pos: position{line: 702, col: 20, offset: 22078},
				run: (*parser).callonOrderedListItem1,
				expr: &seqExpr{
					pos: position{line: 702, col: 20, offset: 22078},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 702, col: 20, offset: 22078},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 702, col: 31, offset: 22089},
								expr: &ruleRefExpr{
									pos:  position{line: 702, col: 32, offset: 22090},
									name: "BlockAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 702, col: 50, offset: 22108},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 702, col: 58, offset: 22116},
								name: "OrderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 702, col: 81, offset: 22139},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 702, col: 90, offset: 22148},
								name: "OrderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemPrefix",
			pos:  position{line: 706, col: 1, offset: 22288},
			expr: &actionExpr{
				pos: position{line: 707, col: 5, offset: 22318},
				run: (*parser).callonOrderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 707, col: 5, offset: 22318},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 707, col: 5, offset: 22318},
							expr: &ruleRefExpr{
								pos:  position{line: 707, col: 5, offset: 22318},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 707, col: 12, offset: 22325},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 709, col: 9, offset: 22388},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 709, col: 9, offset: 22388},
										run: (*parser).callonOrderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 709, col: 9, offset: 22388},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 709, col: 9, offset: 22388},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 709, col: 16, offset: 22395},
														run: (*parser).callonOrderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 709, col: 16, offset: 22395},
															expr: &litMatcher{
																pos:        position{line: 709, col: 17, offset: 22396},
																val:        ".",
																ignoreCase: false,
																want:       "\".\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 713, col: 9, offset: 22496},
													run: (*parser).callonOrderedListItemPrefix13,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 732, col: 11, offset: 23213},
										run: (*parser).callonOrderedListItemPrefix14,
										expr: &seqExpr{
											pos: position{line: 732, col: 11, offset: 23213},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 732, col: 11, offset: 23213},
													expr: &charClassMatcher{
														pos:        position{line: 732, col: 12, offset: 23214},
														val:        "[0-9]",
														ranges:     []rune{'0', '9'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 732, col: 20, offset: 23222},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 734, col: 13, offset: 23333},
										run: (*parser).callonOrderedListItemPrefix19,
										expr: &seqExpr{
											pos: position{line: 734, col: 13, offset: 23333},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 734, col: 14, offset: 23334},
													val:        "[a-z]",
													ranges:     []rune{'a', 'z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 734, col: 21, offset: 23341},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 736, col: 13, offset: 23455},
										run: (*parser).callonOrderedListItemPrefix23,
										expr: &seqExpr{
											pos: position{line: 736, col: 13, offset: 23455},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 736, col: 14, offset: 23456},
													val:        "[A-Z]",
													ranges:     []rune{'A', 'Z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 736, col: 21, offset: 23463},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 738, col: 13, offset: 23577},
										run: (*parser).callonOrderedListItemPrefix27,
										expr: &seqExpr{
											pos: position{line: 738, col: 13, offset: 23577},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 738, col: 13, offset: 23577},
													expr: &charClassMatcher{
														pos:        position{line: 738, col: 14, offset: 23578},
														val:        "[ivxdlcm]",
														chars:      []rune{'i', 'v', 'x', 'd', 'l', 'c', 'm'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 738, col: 26, offset: 23590},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 740, col: 13, offset: 23704},
										run: (*parser).callonOrderedListItemPrefix32,
										expr: &seqExpr{
											pos: position{line: 740, col: 13, offset: 23704},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 740, col: 13, offset: 23704},
													expr: &charClassMatcher{
														pos:        position{line: 740, col: 14, offset: 23705},
														val:        "[IVXDLCM]",
														chars:      []rune{'I', 'V', 'X', 'D', 'L', 'C', 'M'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 740, col: 26, offset: 23717},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 742, col: 12, offset: 23830},
							expr: &ruleRefExpr{
								pos:  position{line: 742, col: 12, offset: 23830},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemContent",
			pos:  position{line: 746, col: 1, offset: 23865},
			expr: &actionExpr{
				pos: position{line: 746, col: 27, offset: 23891},
				run: (*parser).callonOrderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 746, col: 27, offset: 23891},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 746, col: 37, offset: 23901},
						expr: &ruleRefExpr{
							pos:  position{line: 746, col: 37, offset: 23901},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItem",
			pos:  position{line: 753, col: 1, offset: 24101},
			expr: &actionExpr{
				pos: position{line: 753, col: 22, offset: 24122},
				run: (*parser).callonUnorderedListItem1,
				expr: &seqExpr{
					pos: position{line: 753, col: 22, offset: 24122},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 753, col: 22, offset: 24122},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 753, col: 33, offset: 24133},
								expr: &ruleRefExpr{
									pos:  position{line: 753, col: 34, offset: 24134},
									name: "BlockAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 753, col: 52, offset: 24152},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 753, col: 60, offset: 24160},
								name: "UnorderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 753, col: 85, offset: 24185},
							label: "checkstyle",
							expr: &zeroOrOneExpr{
								pos: position{line: 753, col: 96, offset: 24196},
								expr: &ruleRefExpr{
									pos:  position{line: 753, col: 97, offset: 24197},
									name: "UnorderedListItemCheckStyle",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 753, col: 127, offset: 24227},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 753, col: 136, offset: 24236},
								name: "UnorderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemPrefix",
			pos:  position{line: 757, col: 1, offset: 24394},
			expr: &actionExpr{
				pos: position{line: 758, col: 5, offset: 24426},
				run: (*parser).callonUnorderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 758, col: 5, offset: 24426},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 758, col: 5, offset: 24426},
							expr: &ruleRefExpr{
								pos:  position{line: 758, col: 5, offset: 24426},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 758, col: 12, offset: 24433},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 758, col: 20, offset: 24441},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 760, col: 9, offset: 24498},
										run: (*parser).callonUnorderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 760, col: 9, offset: 24498},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 760, col: 9, offset: 24498},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 760, col: 16, offset: 24505},
														run: (*parser).callonUnorderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 760, col: 16, offset: 24505},
															expr: &litMatcher{
																pos:        position{line: 760, col: 17, offset: 24506},
																val:        "*",
																ignoreCase: false,
																want:       "\"*\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 764, col: 9, offset: 24606},
													run: (*parser).callonUnorderedListItemPrefix13,
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 781, col: 14, offset: 25313},
										label: "depth",
										expr: &actionExpr{
											pos: position{line: 781, col: 21, offset: 25320},
											run: (*parser).callonUnorderedListItemPrefix15,
											expr: &litMatcher{
												pos:        position{line: 781, col: 22, offset: 25321},
												val:        "-",
												ignoreCase: false,
												want:       "\"-\"",
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 783, col: 13, offset: 25407},
							expr: &ruleRefExpr{
								pos:  position{line: 783, col: 13, offset: 25407},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemCheckStyle",
			pos:  position{line: 787, col: 1, offset: 25443},
			expr: &actionExpr{
				pos: position{line: 787, col: 32, offset: 25474},
				run: (*parser).callonUnorderedListItemCheckStyle1,
				expr: &seqExpr{
					pos: position{line: 787, col: 32, offset: 25474},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 787, col: 32, offset: 25474},
							expr: &litMatcher{
								pos:        position{line: 787, col: 33, offset: 25475},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 787, col: 37, offset: 25479},
							label: "style",
							expr: &choiceExpr{
								pos: position{line: 788, col: 7, offset: 25493},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 788, col: 7, offset: 25493},
										run: (*parser).callonUnorderedListItemCheckStyle7,
										expr: &litMatcher{
											pos:        position{line: 788, col: 7, offset: 25493},
											val:        "[ ]",
											ignoreCase: false,
											want:       "\"[ ]\"",
										},
									},
									&actionExpr{
										pos: position{line: 789, col: 7, offset: 25538},
										run: (*parser).callonUnorderedListItemCheckStyle9,
										expr: &litMatcher{
											pos:        position{line: 789, col: 7, offset: 25538},
											val:        "[*]",
											ignoreCase: false,
											want:       "\"[*]\"",
										},
									},
									&actionExpr{
										pos: position{line: 790, col: 7, offset: 25581},
										run: (*parser).callonUnorderedListItemCheckStyle11,
										expr: &litMatcher{
											pos:        position{line: 790, col: 7, offset: 25581},
											val:        "[x]",
											ignoreCase: false,
											want:       "\"[x]\"",
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 791, col: 7, offset: 25623},
							expr: &ruleRefExpr{
								pos:  position{line: 791, col: 7, offset: 25623},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemContent",
			pos:  position{line: 795, col: 1, offset: 25665},
			expr: &actionExpr{
				pos: position{line: 795, col: 29, offset: 25693},
				run: (*parser).callonUnorderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 795, col: 29, offset: 25693},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 795, col: 39, offset: 25703},
						expr: &ruleRefExpr{
							pos:  position{line: 795, col: 39, offset: 25703},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "LabeledListItem",
			pos:  position{line: 802, col: 1, offset: 26019},
			expr: &actionExpr{
				pos: position{line: 802, col: 20, offset: 26038},
				run: (*parser).callonLabeledListItem1,
				expr: &seqExpr{
					pos: position{line: 802, col: 20, offset: 26038},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 802, col: 20, offset: 26038},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 802, col: 31, offset: 26049},
								expr: &ruleRefExpr{
									pos:  position{line: 802, col: 32, offset: 26050},
									name: "BlockAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 802, col: 50, offset: 26068},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 802, col: 56, offset: 26074},
								name: "VerbatimLabeledListItemTerm",
							},
						},
						&labeledExpr{
							pos:   position{line: 802, col: 85, offset: 26103},
							label: "separator",
							expr: &ruleRefExpr{
								pos:  position{line: 802, col: 96, offset: 26114},
								name: "LabeledListItemSeparator",
							},
						},
						&labeledExpr{
							pos:   position{line: 802, col: 122, offset: 26140},
							label: "description",
							expr: &zeroOrOneExpr{
								pos: position{line: 802, col: 134, offset: 26152},
								expr: &ruleRefExpr{
									pos:  position{line: 802, col: 135, offset: 26153},
									name: "LabeledListItemDescription",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemPrefix",
			pos:  position{line: 806, col: 1, offset: 26299},
			expr: &seqExpr{
				pos: position{line: 806, col: 26, offset: 26324},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 806, col: 26, offset: 26324},
						name: "VerbatimLabeledListItemTerm",
					},
					&ruleRefExpr{
						pos:  position{line: 806, col: 54, offset: 26352},
						name: "LabeledListItemSeparator",
					},
				},
			},
		},
		{
			name: "VerbatimLabeledListItemChars",
			pos:  position{line: 808, col: 1, offset: 26378},
			expr: &choiceExpr{
				pos: position{line: 808, col: 33, offset: 26410},
				alternatives: []interface{}{
					&oneOrMoreExpr{
						pos: position{line: 808, col: 33, offset: 26410},
						expr: &charClassMatcher{
							pos:        position{line: 808, col: 33, offset: 26410},
							val:        "[^:\\r\\n]",
							chars:      []rune{':', '\r', '\n'},
							ignoreCase: false,
							inverted:   true,
						},
					},
					&seqExpr{
						pos: position{line: 808, col: 45, offset: 26422},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 808, col: 45, offset: 26422},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
							&notExpr{
								pos: position{line: 808, col: 49, offset: 26426},
								expr: &litMatcher{
									pos:        position{line: 808, col: 50, offset: 26427},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerbatimLabeledListItemTerm",
			pos:  position{line: 809, col: 1, offset: 26431},
			expr: &actionExpr{
				pos: position{line: 809, col: 32, offset: 26462},
				run: (*parser).callonVerbatimLabeledListItemTerm1,
				expr: &labeledExpr{
					pos:   position{line: 809, col: 32, offset: 26462},
					label: "content",
					expr: &actionExpr{
						pos: position{line: 809, col: 42, offset: 26472},
						run: (*parser).callonVerbatimLabeledListItemTerm3,
						expr: &oneOrMoreExpr{
							pos: position{line: 809, col: 42, offset: 26472},
							expr: &ruleRefExpr{
								pos:  position{line: 809, col: 42, offset: 26472},
								name: "VerbatimLabeledListItemChars",
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTerm",
			pos:  position{line: 816, col: 1, offset: 26647},
			expr: &actionExpr{
				pos: position{line: 816, col: 24, offset: 26670},
				run: (*parser).callonLabeledListItemTerm1,
				expr: &labeledExpr{
					pos:   position{line: 816, col: 24, offset: 26670},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 816, col: 33, offset: 26679},
						expr: &seqExpr{
							pos: position{line: 816, col: 34, offset: 26680},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 816, col: 34, offset: 26680},
									expr: &ruleRefExpr{
										pos:  position{line: 816, col: 35, offset: 26681},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 816, col: 43, offset: 26689},
									expr: &litMatcher{
										pos:        position{line: 816, col: 44, offset: 26690},
										val:        "::",
										ignoreCase: false,
										want:       "\"::\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 816, col: 49, offset: 26695},
									name: "LabeledListItemTermElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTermElement",
			pos:  position{line: 820, col: 1, offset: 26792},
			expr: &actionExpr{
				pos: position{line: 820, col: 31, offset: 26822},
				run: (*parser).callonLabeledListItemTermElement1,
				expr: &labeledExpr{
					pos:   position{line: 820, col: 31, offset: 26822},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 820, col: 40, offset: 26831},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 820, col: 40, offset: 26831},
								name: "Word",
							},
							&ruleRefExpr{
								pos:  position{line: 821, col: 11, offset: 26846},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 822, col: 11, offset: 26895},
								expr: &ruleRefExpr{
									pos:  position{line: 822, col: 11, offset: 26895},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 823, col: 11, offset: 26913},
								name: "CrossReference",
							},
							&ruleRefExpr{
								pos:  position{line: 824, col: 11, offset: 26938},
								name: "ConcealedIndexTerm",
							},
							&ruleRefExpr{
								pos:  position{line: 825, col: 11, offset: 26967},
								name: "IndexTerm",
							},
							&ruleRefExpr{
								pos:  position{line: 826, col: 11, offset: 26987},
								name: "InlinePassthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 827, col: 11, offset: 27076},
								name: "InlineIcon",
							},
							&ruleRefExpr{
								pos:  position{line: 828, col: 11, offset: 27097},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 829, col: 11, offset: 27120},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 830, col: 11, offset: 27135},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 831, col: 11, offset: 27160},
								name: "QuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 832, col: 11, offset: 27183},
								name: "QuotedText",
							},
							&ruleRefExpr{
								pos:  position{line: 833, col: 11, offset: 27204},
								name: "SpecialCharacter",
							},
							&ruleRefExpr{
								pos:  position{line: 834, col: 11, offset: 27231},
								name: "Symbol",
							},
							&ruleRefExpr{
								pos:  position{line: 835, col: 11, offset: 27248},
								name: "AttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 836, col: 11, offset: 27280},
								name: "AnyChar",
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemSeparator",
			pos:  position{line: 840, col: 1, offset: 27319},
			expr: &actionExpr{
				pos: position{line: 841, col: 5, offset: 27352},
				run: (*parser).callonLabeledListItemSeparator1,
				expr: &seqExpr{
					pos: position{line: 841, col: 5, offset: 27352},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 841, col: 5, offset: 27352},
							label: "separator",
							expr: &actionExpr{
								pos: position{line: 841, col: 16, offset: 27363},
								run: (*parser).callonLabeledListItemSeparator4,
								expr: &oneOrMoreExpr{
									pos: position{line: 841, col: 16, offset: 27363},
									expr: &litMatcher{
										pos:        position{line: 841, col: 17, offset: 27364},
										val:        ":",
										ignoreCase: false,
										want:       "\":\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 844, col: 5, offset: 27422},
							run: (*parser).callonLabeledListItemSeparator7,
						},
						&choiceExpr{
							pos: position{line: 848, col: 6, offset: 27598},
							alternatives: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 848, col: 6, offset: 27598},
									expr: &choiceExpr{
										pos: position{line: 848, col: 7, offset: 27599},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 848, col: 7, offset: 27599},
												name: "Space",
											},
											&ruleRefExpr{
												pos:  position{line: 848, col: 15, offset: 27607},
												name: "Newline",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 848, col: 27, offset: 27619},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemDescription",
			pos:  position{line: 852, col: 1, offset: 27659},
			expr: &actionExpr{
				pos: position{line: 852, col: 31, offset: 27689},
				run: (*parser).callonLabeledListItemDescription1,
				expr: &labeledExpr{
					pos:   position{line: 852, col: 31, offset: 27689},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 852, col: 40, offset: 27698},
						expr: &ruleRefExpr{
							pos:  position{line: 852, col: 41, offset: 27699},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionKind",
			pos:  position{line: 859, col: 1, offset: 27890},
			expr: &choiceExpr{
				pos: position{line: 859, col: 19, offset: 27908},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 859, col: 19, offset: 27908},
						run: (*parser).callonAdmonitionKind2,
						expr: &litMatcher{
							pos:        position{line: 859, col: 19, offset: 27908},
							val:        "TIP",
							ignoreCase: false,
							want:       "\"TIP\"",
						},
					},
					&actionExpr{
						pos: position{line: 861, col: 5, offset: 27946},
						run: (*parser).callonAdmonitionKind4,
						expr: &litMatcher{
							pos:        position{line: 861, col: 5, offset: 27946},
							val:        "NOTE",
							ignoreCase: false,
							want:       "\"NOTE\"",
						},
					},
					&actionExpr{
						pos: position{line: 863, col: 5, offset: 27986},
						run: (*parser).callonAdmonitionKind6,
						expr: &litMatcher{
							pos:        position{line: 863, col: 5, offset: 27986},
							val:        "IMPORTANT",
							ignoreCase: false,
							want:       "\"IMPORTANT\"",
						},
					},
					&actionExpr{
						pos: position{line: 865, col: 5, offset: 28036},
						run: (*parser).callonAdmonitionKind8,
						expr: &litMatcher{
							pos:        position{line: 865, col: 5, offset: 28036},
							val:        "WARNING",
							ignoreCase: false,
							want:       "\"WARNING\"",
						},
					},
					&actionExpr{
						pos: position{line: 867, col: 5, offset: 28082},
						run: (*parser).callonAdmonitionKind10,
						expr: &litMatcher{
							pos:        position{line: 867, col: 5, offset: 28082},
							val:        "CAUTION",
							ignoreCase: false,
							want:       "\"CAUTION\"",
						},
					},
				},
			},
		},
		{
			name: "RawParagraph",
			pos:  position{line: 879, col: 1, offset: 28462},
			expr: &choiceExpr{
				pos: position{line: 881, col: 6, offset: 28513},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 881, col: 6, offset: 28513},
						run: (*parser).callonRawParagraph2,
						expr: &seqExpr{
							pos: position{line: 881, col: 6, offset: 28513},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 881, col: 6, offset: 28513},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 881, col: 17, offset: 28524},
										expr: &ruleRefExpr{
											pos:  position{line: 881, col: 18, offset: 28525},
											name: "BlockAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 881, col: 36, offset: 28543},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 881, col: 39, offset: 28546},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 881, col: 55, offset: 28562},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 881, col: 60, offset: 28567},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 881, col: 66, offset: 28573},
										expr: &choiceExpr{
											pos: position{line: 881, col: 67, offset: 28574},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 881, col: 67, offset: 28574},
													name: "SingleLineComment",
												},
												&ruleRefExpr{
													pos:  position{line: 881, col: 87, offset: 28594},
													name: "RawParagraphLine",
												},
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 886, col: 5, offset: 28815},
						run: (*parser).callonRawParagraph15,
						expr: &seqExpr{
							pos: position{line: 886, col: 5, offset: 28815},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 886, col: 5, offset: 28815},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 886, col: 16, offset: 28826},
										expr: &ruleRefExpr{
											pos:  position{line: 886, col: 17, offset: 28827},
											name: "BlockAttributes",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 886, col: 35, offset: 28845},
									val:        "> ",
									ignoreCase: false,
									want:       "\"> \"",
								},
								&labeledExpr{
									pos:   position{line: 886, col: 40, offset: 28850},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 886, col: 49, offset: 28859},
										name: "MarkdownQuoteBlockRawContent",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 890, col: 5, offset: 29032},
						run: (*parser).callonRawParagraph23,
						expr: &seqExpr{
							pos: position{line: 890, col: 5, offset: 29032},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 890, col: 5, offset: 29032},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 890, col: 16, offset: 29043},
										expr: &ruleRefExpr{
											pos:  position{line: 890, col: 17, offset: 29044},
											name: "BlockAttributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 890, col: 35, offset: 29062},
									run: (*parser).callonRawParagraph28,
								},
								&labeledExpr{
									pos:   position{line: 893, col: 7, offset: 29240},
									label: "content",
									expr: &oneOrMoreExpr{
										pos: position{line: 893, col: 15, offset: 29248},
										expr: &ruleRefExpr{
											pos:  position{line: 893, col: 16, offset: 29249},
											name: "RawParagraphLine",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 897, col: 5, offset: 29415},
						run: (*parser).callonRawParagraph32,
						expr: &seqExpr{
							pos: position{line: 897, col: 5, offset: 29415},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 897, col: 5, offset: 29415},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 897, col: 16, offset: 29426},
										expr: &ruleRefExpr{
											pos:  position{line: 897, col: 17, offset: 29427},
											name: "BlockAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 897, col: 35, offset: 29445},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 897, col: 41, offset: 29451},
										expr: &choiceExpr{
											pos: position{line: 897, col: 42, offset: 29452},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 897, col: 42, offset: 29452},
													name: "SingleLineComment",
												},
												&ruleRefExpr{
													pos:  position{line: 897, col: 62, offset: 29472},
													name: "RawParagraphLine",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkdownQuoteBlockRawContent",
			pos:  position{line: 901, col: 1, offset: 29570},
			expr: &oneOrMoreExpr{
				pos: position{line: 901, col: 33, offset: 29602},
				expr: &actionExpr{
					pos: position{line: 901, col: 34, offset: 29603},
					run: (*parser).callonMarkdownQuoteBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 901, col: 34, offset: 29603},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 901, col: 34, offset: 29603},
								expr: &ruleRefExpr{
									pos:  position{line: 901, col: 35, offset: 29604},
									name: "BlankLine",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 901, col: 45, offset: 29614},
								expr: &litMatcher{
									pos:        position{line: 901, col: 45, offset: 29614},
									val:        "> ",
									ignoreCase: false,
									want:       "\"> \"",
								},
							},
							&labeledExpr{
								pos:   position{line: 901, col: 51, offset: 29620},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 901, col: 60, offset: 29629},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RawParagraphLine",
			pos:  position{line: 905, col: 1, offset: 29670},
			expr: &actionExpr{
				pos: position{line: 905, col: 21, offset: 29690},
				run: (*parser).callonRawParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 905, col: 21, offset: 29690},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 905, col: 21, offset: 29690},
							expr: &ruleRefExpr{
								pos:  position{line: 905, col: 22, offset: 29691},
								name: "BlockDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 906, col: 5, offset: 29711},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 906, col: 14, offset: 29720},
								name: "RawParagraphLineContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 906, col: 39, offset: 29745},
							name: "EOL",
						},
						&andCodeExpr{
							pos: position{line: 906, col: 43, offset: 29749},
							run: (*parser).callonRawParagraphLine8,
						},
					},
				},
			},
		},
		{
			name: "RawParagraphLineContent",
			pos:  position{line: 916, col: 1, offset: 29984},
			expr: &actionExpr{
				pos: position{line: 916, col: 28, offset: 30011},
				run: (*parser).callonRawParagraphLineContent1,
				expr: &oneOrMoreExpr{
					pos: position{line: 916, col: 28, offset: 30011},
					expr: &charClassMatcher{
						pos:        position{line: 916, col: 28, offset: 30011},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "SimpleRawParagraph",
			pos:  position{line: 921, col: 1, offset: 30128},
			expr: &actionExpr{
				pos: position{line: 921, col: 23, offset: 30150},
				run: (*parser).callonSimpleRawParagraph1,
				expr: &seqExpr{
					pos: position{line: 921, col: 23, offset: 30150},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 921, col: 23, offset: 30150},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 921, col: 34, offset: 30161},
								expr: &ruleRefExpr{
									pos:  position{line: 921, col: 35, offset: 30162},
									name: "BlockAttributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 922, col: 5, offset: 30185},
							run: (*parser).callonSimpleRawParagraph6,
						},
						&labeledExpr{
							pos:   position{line: 925, col: 5, offset: 30297},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 925, col: 16, offset: 30308},
								name: "FirstParagraphRawLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 926, col: 5, offset: 30334},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 926, col: 16, offset: 30345},
								expr: &choiceExpr{
									pos: position{line: 926, col: 17, offset: 30346},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 926, col: 17, offset: 30346},
											name: "SingleLineComment",
										},
										&ruleRefExpr{
											pos:  position{line: 926, col: 37, offset: 30366},
											name: "RawParagraphLine",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FirstParagraphRawLine",
			pos:  position{line: 930, col: 1, offset: 30498},
			expr: &actionExpr{
				pos: position{line: 931, col: 5, offset: 30528},
				run: (*parser).callonFirstParagraphRawLine1,
				expr: &seqExpr{
					pos: position{line: 931, col: 5, offset: 30528},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 931, col: 5, offset: 30528},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 931, col: 14, offset: 30537},
								run: (*parser).callonFirstParagraphRawLine4,
								expr: &seqExpr{
									pos: position{line: 931, col: 14, offset: 30537},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 931, col: 14, offset: 30537},
											label: "elements",
											expr: &ruleRefExpr{
												pos:  position{line: 931, col: 23, offset: 30546},
												name: "Word",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 931, col: 28, offset: 30551},
											expr: &charClassMatcher{
												pos:        position{line: 931, col: 28, offset: 30551},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 931, col: 68, offset: 30591},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ContinuedRawParagraph",
			pos:  position{line: 942, col: 1, offset: 30843},
			expr: &choiceExpr{
				pos: position{line: 944, col: 5, offset: 30902},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 944, col: 5, offset: 30902},
						run: (*parser).callonContinuedRawParagraph2,
						expr: &seqExpr{
							pos: position{line: 944, col: 5, offset: 30902},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 944, col: 5, offset: 30902},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 944, col: 16, offset: 30913},
										expr: &ruleRefExpr{
											pos:  position{line: 944, col: 17, offset: 30914},
											name: "BlockAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 944, col: 35, offset: 30932},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 944, col: 38, offset: 30935},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 944, col: 54, offset: 30951},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 944, col: 59, offset: 30956},
									label: "lines",
									expr: &ruleRefExpr{
										pos:  position{line: 944, col: 66, offset: 30963},
										name: "ContinuedRawParagraphLines",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 948, col: 5, offset: 31152},
						run: (*parser).callonContinuedRawParagraph12,
						expr: &seqExpr{
							pos: position{line: 948, col: 5, offset: 31152},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 948, col: 5, offset: 31152},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 948, col: 16, offset: 31163},
										expr: &ruleRefExpr{
											pos:  position{line: 948, col: 17, offset: 31164},
											name: "BlockAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 948, col: 35, offset: 31182},
									label: "lines",
									expr: &ruleRefExpr{
										pos:  position{line: 948, col: 42, offset: 31189},
										name: "ContinuedRawParagraphLines",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ContinuedRawParagraphLines",
			pos:  position{line: 952, col: 1, offset: 31293},
			expr: &actionExpr{
				pos: position{line: 952, col: 31, offset: 31323},
				run: (*parser).callonContinuedRawParagraphLines1,
				expr: &seqExpr{
					pos: position{line: 952, col: 31, offset: 31323},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 952, col: 31, offset: 31323},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 952, col: 42, offset: 31334},
								name: "FirstParagraphRawLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 952, col: 65, offset: 31357},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 952, col: 76, offset: 31368},
								expr: &actionExpr{
									pos: position{line: 952, col: 77, offset: 31369},
									run: (*parser).callonContinuedRawParagraphLines7,
									expr: &seqExpr{
										pos: position{line: 952, col: 77, offset: 31369},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 952, col: 77, offset: 31369},
												expr: &ruleRefExpr{
													pos:  position{line: 952, col: 78, offset: 31370},
													name: "ListItemContinuation",
												},
											},
											&labeledExpr{
												pos:   position{line: 952, col: 99, offset: 31391},
												label: "line",
												expr: &choiceExpr{
													pos: position{line: 952, col: 105, offset: 31397},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 952, col: 105, offset: 31397},
															name: "SingleLineComment",
														},
														&ruleRefExpr{
															pos:  position{line: 952, col: 125, offset: 31417},
															name: "RawParagraphLine",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElements",
			pos:  position{line: 960, col: 1, offset: 31659},
			expr: &actionExpr{
				pos: position{line: 960, col: 19, offset: 31677},
				run: (*parser).callonInlineElements1,
				expr: &seqExpr{
					pos: position{line: 960, col: 19, offset: 31677},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 960, col: 19, offset: 31677},
							expr: &ruleRefExpr{
								pos:  position{line: 960, col: 20, offset: 31678},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 961, col: 5, offset: 31692},
							label: "elements",
							expr: &choiceExpr{
								pos: position{line: 961, col: 15, offset: 31702},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 961, col: 15, offset: 31702},
										run: (*parser).callonInlineElements7,
										expr: &labeledExpr{
											pos:   position{line: 961, col: 15, offset: 31702},
											label: "comment",
											expr: &ruleRefExpr{
												pos:  position{line: 961, col: 24, offset: 31711},
												name: "SingleLineComment",
											},
										},
									},
									&actionExpr{
										pos: position{line: 963, col: 9, offset: 31803},
										run: (*parser).callonInlineElements10,
										expr: &seqExpr{
											pos: position{line: 963, col: 9, offset: 31803},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 963, col: 9, offset: 31803},
													label: "elements",
													expr: &oneOrMoreExpr{
														pos: position{line: 963, col: 18, offset: 31812},
														expr: &ruleRefExpr{
															pos:  position{line: 963, col: 19, offset: 31813},
															name: "InlineElement",
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 963, col: 35, offset: 31829},
													name: "EOL",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElement",
			pos:  position{line: 969, col: 1, offset: 31946},
			expr: &actionExpr{
				pos: position{line: 970, col: 5, offset: 31969},
				run: (*parser).callonInlineElement1,
				expr: &labeledExpr{
					pos:   position{line: 970, col: 5, offset: 31969},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 970, col: 14, offset: 31978},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 970, col: 14, offset: 31978},
								name: "InlineWord",
							},
							&ruleRefExpr{
								pos:  position{line: 971, col: 11, offset: 32039},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 972, col: 11, offset: 32084},
								expr: &ruleRefExpr{
									pos:  position{line: 972, col: 11, offset: 32084},
									name: "Space",
								},
							},
							&seqExpr{
								pos: position{line: 973, col: 11, offset: 32102},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 973, col: 11, offset: 32102},
										expr: &ruleRefExpr{
											pos:  position{line: 973, col: 12, offset: 32103},
											name: "EOL",
										},
									},
									&choiceExpr{
										pos: position{line: 974, col: 13, offset: 32121},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 974, col: 13, offset: 32121},
												name: "QuotedString",
											},
											&ruleRefExpr{
												pos:  position{line: 975, col: 15, offset: 32148},
												name: "QuotedText",
											},
											&ruleRefExpr{
												pos:  position{line: 976, col: 15, offset: 32173},
												name: "InlineIcon",
											},
											&ruleRefExpr{
												pos:  position{line: 977, col: 15, offset: 32198},
												name: "InlineImage",
											},
											&ruleRefExpr{
												pos:  position{line: 978, col: 15, offset: 32225},
												name: "Link",
											},
											&ruleRefExpr{
												pos:  position{line: 979, col: 15, offset: 32245},
												name: "InlinePassthrough",
											},
											&ruleRefExpr{
												pos:  position{line: 980, col: 15, offset: 32338},
												name: "InlineFootnote",
											},
											&ruleRefExpr{
												pos:  position{line: 981, col: 15, offset: 32368},
												name: "CrossReference",
											},
											&ruleRefExpr{
												pos:  position{line: 982, col: 15, offset: 32436},
												name: "SpecialCharacter",
											},
											&ruleRefExpr{
												pos:  position{line: 983, col: 15, offset: 32467},
												name: "Symbol",
											},
											&ruleRefExpr{
												pos:  position{line: 984, col: 15, offset: 32488},
												name: "InlineUserMacro",
											},
											&ruleRefExpr{
												pos:  position{line: 985, col: 15, offset: 32519},
												name: "AttributeSubstitution",
											},
											&ruleRefExpr{
												pos:  position{line: 986, col: 15, offset: 32556},
												name: "InlineElementID",
											},
											&ruleRefExpr{
												pos:  position{line: 987, col: 15, offset: 32586},
												name: "ConcealedIndexTerm",
											},
											&ruleRefExpr{
												pos:  position{line: 988, col: 15, offset: 32619},
												name: "IndexTerm",
											},
											&ruleRefExpr{
												pos:  position{line: 989, col: 15, offset: 32643},
												name: "ElementPlaceHolder",
											},
											&ruleRefExpr{
												pos:  position{line: 990, col: 15, offset: 32676},
												name: "AnyChar",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LineBreak",
			pos:  position{line: 997, col: 1, offset: 32899},
			expr: &actionExpr{
				pos: position{line: 997, col: 14, offset: 32912},
				run: (*parser).callonLineBreak1,
				expr: &seqExpr{
					pos: position{line: 997, col: 14, offset: 32912},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 997, col: 14, offset: 32912},
							name: "Space",
						},
						&litMatcher{
							pos:        position{line: 997, col: 20, offset: 32918},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 997, col: 24, offset: 32922},
							expr: &ruleRefExpr{
								pos:  position{line: 997, col: 24, offset: 32922},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 997, col: 31, offset: 32929},
							expr: &ruleRefExpr{
								pos:  position{line: 997, col: 32, offset: 32930},
								name: "EOL",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedText",
			pos:  position{line: 1004, col: 1, offset: 33214},
			expr: &choiceExpr{
				pos: position{line: 1004, col: 15, offset: 33228},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1004, col: 15, offset: 33228},
						name: "UnconstrainedQuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1004, col: 41, offset: 33254},
						name: "ConstrainedQuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1004, col: 65, offset: 33278},
						name: "EscapedQuotedText",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedTextMarker",
			pos:  position{line: 1006, col: 1, offset: 33297},
			expr: &choiceExpr{
				pos: position{line: 1006, col: 32, offset: 33328},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1006, col: 32, offset: 33328},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1006, col: 32, offset: 33328},
								val:        "*",
								ignoreCase: false,
								want:       "\"*\"",
							},
							&notExpr{
								pos: position{line: 1006, col: 36, offset: 33332},
								expr: &litMatcher{
									pos:        position{line: 1006, col: 37, offset: 33333},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1006, col: 43, offset: 33339},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1006, col: 43, offset: 33339},
								val:        "_",
								ignoreCase: false,
								want:       "\"_\"",
							},
							&notExpr{
								pos: position{line: 1006, col: 47, offset: 33343},
								expr: &litMatcher{
									pos:        position{line: 1006, col: 48, offset: 33344},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1006, col: 54, offset: 33350},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1006, col: 54, offset: 33350},
								val:        "#",
								ignoreCase: false,
								want:       "\"#\"",
							},
							&notExpr{
								pos: position{line: 1006, col: 58, offset: 33354},
								expr: &litMatcher{
									pos:        position{line: 1006, col: 59, offset: 33355},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 1006, col: 65, offset: 33361},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1006, col: 65, offset: 33361},
								val:        "`",
								ignoreCase: false,
								want:       "\"`\"",
							},
							&notExpr{
								pos: position{line: 1006, col: 69, offset: 33365},
								expr: &litMatcher{
									pos:        position{line: 1006, col: 70, offset: 33366},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedTextPrefix",
			pos:  position{line: 1008, col: 1, offset: 33371},
			expr: &choiceExpr{
				pos: position{line: 1008, col: 34, offset: 33404},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1008, col: 34, offset: 33404},
						val:        "**",
						ignoreCase: false,
						want:       "\"**\"",
					},
					&litMatcher{
						pos:        position{line: 1008, col: 41, offset: 33411},
						val:        "__",
						ignoreCase: false,
						want:       "\"__\"",
					},
					&litMatcher{
						pos:        position{line: 1008, col: 48, offset: 33418},
						val:        "``",
						ignoreCase: false,
						want:       "\"``\"",
					},
					&litMatcher{
						pos:        position{line: 1008, col: 55, offset: 33425},
						val:        "##",
						ignoreCase: false,
						want:       "\"##\"",
					},
					&litMatcher{
						pos:        position{line: 1008, col: 62, offset: 33432},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&litMatcher{
						pos:        position{line: 1008, col: 68, offset: 33438},
						val:        "~",
						ignoreCase: false,
						want:       "\"~\"",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedText",
			pos:  position{line: 1010, col: 1, offset: 33443},
			expr: &actionExpr{
				pos: position{line: 1010, col: 26, offset: 33468},
				run: (*parser).callonConstrainedQuotedText1,
				expr: &labeledExpr{
					pos:   position{line: 1010, col: 26, offset: 33468},
					label: "text",
					expr: &choiceExpr{
						pos: position{line: 1010, col: 32, offset: 33474},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1010, col: 32, offset: 33474},
								name: "SingleQuoteBoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 1011, col: 15, offset: 33509},
								name: "SingleQuoteItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 1012, col: 15, offset: 33545},
								name: "SingleQuoteMarkedText",
							},
							&ruleRefExpr{
								pos:  position{line: 1013, col: 15, offset: 33581},
								name: "SingleQuoteMonospaceText",
							},
							&ruleRefExpr{
								pos:  position{line: 1014, col: 15, offset: 33621},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1015, col: 15, offset: 33650},
								name: "SuperscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1016, col: 15, offset: 33681},
								name: "SubscriptOrSuperscriptPrefix",
							},
						},
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedText",
			pos:  position{line: 1020, col: 1, offset: 33835},
			expr: &choiceExpr{
				pos: position{line: 1020, col: 28, offset: 33862},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1020, col: 28, offset: 33862},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1021, col: 15, offset: 33896},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1022, col: 15, offset: 33932},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1023, col: 15, offset: 33968},
						name: "DoubleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "EscapedQuotedText",
			pos:  position{line: 1025, col: 1, offset: 33994},
			expr: &choiceExpr{
				pos: position{line: 1025, col: 22, offset: 34015},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1025, col: 22, offset: 34015},
						name: "EscapedBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1026, col: 15, offset: 34046},
						name: "EscapedItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1027, col: 15, offset: 34078},
						name: "EscapedMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1028, col: 15, offset: 34110},
						name: "EscapedMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1029, col: 15, offset: 34146},
						name: "EscapedSubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1030, col: 15, offset: 34182},
						name: "EscapedSuperscriptText",
					},
				},
			},
		},
		{
			name: "SubscriptOrSuperscriptPrefix",
			pos:  position{line: 1032, col: 1, offset: 34206},
			expr: &choiceExpr{
				pos: position{line: 1032, col: 33, offset: 34238},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1032, col: 33, offset: 34238},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&actionExpr{
						pos: position{line: 1032, col: 39, offset: 34244},
						run: (*parser).callonSubscriptOrSuperscriptPrefix3,
						expr: &litMatcher{
							pos:        position{line: 1032, col: 39, offset: 34244},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "OneOrMoreBackslashes",
			pos:  position{line: 1036, col: 1, offset: 34377},
			expr: &actionExpr{
				pos: position{line: 1036, col: 25, offset: 34401},
				run: (*parser).callonOneOrMoreBackslashes1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1036, col: 25, offset: 34401},
					expr: &litMatcher{
						pos:        position{line: 1036, col: 25, offset: 34401},
						val:        "\\",
						ignoreCase: false,
						want:       "\"\\\\\"",
					},
				},
			},
		},
		{
			name: "TwoOrMoreBackslashes",
			pos:  position{line: 1040, col: 1, offset: 34442},
			expr: &actionExpr{
				pos: position{line: 1040, col: 25, offset: 34466},
				run: (*parser).callonTwoOrMoreBackslashes1,
				expr: &seqExpr{
					pos: position{line: 1040, col: 25, offset: 34466},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1040, col: 25, offset: 34466},
							val:        "\\\\",
							ignoreCase: false,
							want:       "\"\\\\\\\\\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1040, col: 30, offset: 34471},
							expr: &litMatcher{
								pos:        position{line: 1040, col: 30, offset: 34471},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
					},
				},
			},
		},
		{
			name: "BoldText",
			pos:  position{line: 1048, col: 1, offset: 34568},
			expr: &choiceExpr{
				pos: position{line: 1048, col: 13, offset: 34580},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1048, col: 13, offset: 34580},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1048, col: 35, offset: 34602},
						name: "SingleQuoteBoldText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldText",
			pos:  position{line: 1050, col: 1, offset: 34669},
			expr: &actionExpr{
				pos: position{line: 1050, col: 24, offset: 34692},
				run: (*parser).callonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 1050, col: 24, offset: 34692},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1050, col: 24, offset: 34692},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1050, col: 35, offset: 34703},
								expr: &ruleRefExpr{
									pos:  position{line: 1050, col: 36, offset: 34704},
									name: "LongHandAttributes",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1050, col: 57, offset: 34725},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
						&labeledExpr{
							pos:   position{line: 1050, col: 62, offset: 34730},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1050, col: 72, offset: 34740},
								name: "DoubleQuoteBoldTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1050, col: 101, offset: 34769},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElements",
			pos:  position{line: 1054, col: 1, offset: 34861},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1054, col: 32, offset: 34892},
				expr: &ruleRefExpr{
					pos:  position{line: 1054, col: 32, offset: 34892},
					name: "DoubleQuoteBoldTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElement",
			pos:  position{line: 1056, col: 1, offset: 34923},
			expr: &actionExpr{
				pos: position{line: 1056, col: 31, offset: 34953},
				run: (*parser).callonDoubleQuoteBoldTextElement1,
				expr: &seqExpr{
					pos: position{line: 1056, col: 31, offset: 34953},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1056, col: 31, offset: 34953},
							expr: &litMatcher{
								pos:        position{line: 1056, col: 33, offset: 34955},
								val:        "**",
								ignoreCase: false,
								want:       "\"**\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1056, col: 39, offset: 34961},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1056, col: 48, offset: 34970},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1056, col: 48, offset: 34970},
										name: "Word",
									},
									&ruleRefExpr{
										pos:  position{line: 1057, col: 11, offset: 34985},
										name: "Space",
									},
									&seqExpr{
										pos: position{line: 1058, col: 11, offset: 35034},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1058, col: 11, offset: 35034},
												name: "Newline",
											},
											&notExpr{
												pos: position{line: 1058, col: 19, offset: 35042},
												expr: &ruleRefExpr{
													pos:  position{line: 1058, col: 20, offset: 35043},
													name: "Newline",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1059, col: 11, offset: 35061},
										name: "SingleQuoteBoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1060, col: 11, offset: 35091},
										name: "QuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 1061, col: 11, offset: 35114},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1062, col: 11, offset: 35135},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1063, col: 11, offset: 35156},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1064, col: 11, offset: 35180},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1065, col: 11, offset: 35204},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1066, col: 11, offset: 35230},
										name: "ElementPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1067, col: 11, offset: 35259},
										name: "DoubleQuoteBoldTextFallbackCharacter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 1071, col: 1, offset: 35326},
			expr: &choiceExpr{
				pos: position{line: 1072, col: 5, offset: 35370},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1072, col: 5, offset: 35370},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1073, col: 7, offset: 35467},
						run: (*parser).callonDoubleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1073, col: 7, offset: 35467},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1073, col: 7, offset: 35467},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1073, col: 12, offset: 35472},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldText",
			pos:  position{line: 1077, col: 1, offset: 35635},
			expr: &choiceExpr{
				pos: position{line: 1077, col: 24, offset: 35658},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1077, col: 24, offset: 35658},
						run: (*parser).callonSingleQuoteBoldText2,
						expr: &seqExpr{
							pos: position{line: 1077, col: 24, offset: 35658},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1077, col: 24, offset: 35658},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1077, col: 35, offset: 35669},
										expr: &ruleRefExpr{
											pos:  position{line: 1077, col: 36, offset: 35670},
											name: "LongHandAttributes",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1077, col: 59, offset: 35693},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1077, col: 59, offset: 35693},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 1077, col: 63, offset: 35697},
											expr: &litMatcher{
												pos:        position{line: 1077, col: 64, offset: 35698},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1077, col: 69, offset: 35703},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1077, col: 79, offset: 35713},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1077, col: 108, offset: 35742},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&andExpr{
									pos: position{line: 1077, col: 112, offset: 35746},
									expr: &notExpr{
										pos: position{line: 1077, col: 114, offset: 35748},
										expr: &ruleRefExpr{
											pos:  position{line: 1077, col: 115, offset: 35749},
											name: "Alphanum",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1079, col: 5, offset: 35948},
						run: (*parser).callonSingleQuoteBoldText17,
						expr: &seqExpr{
							pos: position{line: 1079, col: 5, offset: 35948},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1079, col: 5, offset: 35948},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1079, col: 16, offset: 35959},
										expr: &ruleRefExpr{
											pos:  position{line: 1079, col: 17, offset: 35960},
											name: "LongHandAttributes",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1079, col: 38, offset: 35981},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 1079, col: 42, offset: 35985},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1079, col: 52, offset: 35995},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1079, col: 52, offset: 35995},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1079, col: 56, offset: 35999},
												name: "SingleQuoteBoldTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1079, col: 85, offset: 36028},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElements",
			pos:  position{line: 1083, col: 1, offset: 36239},
			expr: &seqExpr{
				pos: position{line: 1083, col: 32, offset: 36270},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1083, col: 32, offset: 36270},
						expr: &ruleRefExpr{
							pos:  position{line: 1083, col: 33, offset: 36271},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1083, col: 39, offset: 36277},
						expr: &ruleRefExpr{
							pos:  position{line: 1083, col: 39, offset: 36277},
							name: "SingleQuoteBoldTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElement",
			pos:  position{line: 1085, col: 1, offset: 36306},
			expr: &choiceExpr{
				pos: position{line: 1085, col: 31, offset: 36336},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1085, col: 31, offset: 36336},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1086, col: 11, offset: 36351},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1086, col: 11, offset: 36351},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1086, col: 19, offset: 36359},
								expr: &ruleRefExpr{
									pos:  position{line: 1086, col: 20, offset: 36360},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1087, col: 11, offset: 36378},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1088, col: 11, offset: 36408},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1089, col: 11, offset: 36431},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1089, col: 11, offset: 36431},
								expr: &ruleRefExpr{
									pos:  position{line: 1089, col: 11, offset: 36431},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1089, col: 18, offset: 36438},
								expr: &seqExpr{
									pos: position{line: 1089, col: 19, offset: 36439},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1089, col: 19, offset: 36439},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 1089, col: 23, offset: 36443},
											expr: &litMatcher{
												pos:        position{line: 1089, col: 24, offset: 36444},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1090, col: 11, offset: 36460},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1091, col: 11, offset: 36481},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1092, col: 11, offset: 36502},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1093, col: 11, offset: 36526},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1094, col: 11, offset: 36550},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1095, col: 11, offset: 36576},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1096, col: 11, offset: 36605},
						name: "SingleQuoteBoldTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 1098, col: 1, offset: 36643},
			expr: &choiceExpr{
				pos: position{line: 1099, col: 5, offset: 36687},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1099, col: 5, offset: 36687},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1100, col: 7, offset: 36784},
						run: (*parser).callonSingleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1100, col: 7, offset: 36784},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1100, col: 7, offset: 36784},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1100, col: 11, offset: 36788},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedBoldText",
			pos:  position{line: 1104, col: 1, offset: 36951},
			expr: &choiceExpr{
				pos: position{line: 1105, col: 5, offset: 36975},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1105, col: 5, offset: 36975},
						run: (*parser).callonEscapedBoldText2,
						expr: &seqExpr{
							pos: position{line: 1105, col: 5, offset: 36975},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1105, col: 5, offset: 36975},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1105, col: 18, offset: 36988},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1105, col: 40, offset: 37010},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1105, col: 45, offset: 37015},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1105, col: 55, offset: 37025},
										name: "DoubleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1105, col: 84, offset: 37054},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1107, col: 9, offset: 37211},
						run: (*parser).callonEscapedBoldText10,
						expr: &seqExpr{
							pos: position{line: 1107, col: 9, offset: 37211},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1107, col: 9, offset: 37211},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1107, col: 22, offset: 37224},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1107, col: 44, offset: 37246},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 1107, col: 49, offset: 37251},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1107, col: 59, offset: 37261},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1107, col: 88, offset: 37290},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1110, col: 9, offset: 37490},
						run: (*parser).callonEscapedBoldText18,
						expr: &seqExpr{
							pos: position{line: 1110, col: 9, offset: 37490},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1110, col: 9, offset: 37490},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1110, col: 22, offset: 37503},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1110, col: 44, offset: 37525},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 1110, col: 48, offset: 37529},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1110, col: 58, offset: 37539},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1110, col: 87, offset: 37568},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ItalicText",
			pos:  position{line: 1118, col: 1, offset: 37776},
			expr: &choiceExpr{
				pos: position{line: 1118, col: 15, offset: 37790},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1118, col: 15, offset: 37790},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1118, col: 39, offset: 37814},
						name: "SingleQuoteItalicText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicText",
			pos:  position{line: 1120, col: 1, offset: 37837},
			expr: &actionExpr{
				pos: position{line: 1120, col: 26, offset: 37862},
				run: (*parser).callonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 1120, col: 26, offset: 37862},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1120, col: 26, offset: 37862},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1120, col: 37, offset: 37873},
								expr: &ruleRefExpr{
									pos:  position{line: 1120, col: 38, offset: 37874},
									name: "LongHandAttributes",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1120, col: 59, offset: 37895},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
						&labeledExpr{
							pos:   position{line: 1120, col: 64, offset: 37900},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1120, col: 74, offset: 37910},
								name: "DoubleQuoteItalicTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1120, col: 105, offset: 37941},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElements",
			pos:  position{line: 1124, col: 1, offset: 38080},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1124, col: 34, offset: 38113},
				expr: &ruleRefExpr{
					pos:  position{line: 1124, col: 34, offset: 38113},
					name: "DoubleQuoteItalicTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElement",
			pos:  position{line: 1126, col: 1, offset: 38145},
			expr: &actionExpr{
				pos: position{line: 1126, col: 33, offset: 38177},
				run: (*parser).callonDoubleQuoteItalicTextElement1,
				expr: &seqExpr{
					pos: position{line: 1126, col: 33, offset: 38177},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1126, col: 33, offset: 38177},
							expr: &litMatcher{
								pos:        position{line: 1126, col: 35, offset: 38179},
								val:        "__",
								ignoreCase: false,
								want:       "\"__\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1126, col: 41, offset: 38185},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1126, col: 50, offset: 38194},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1126, col: 50, offset: 38194},
										name: "Word",
									},
									&ruleRefExpr{
										pos:  position{line: 1127, col: 11, offset: 38209},
										name: "Space",
									},
									&seqExpr{
										pos: position{line: 1128, col: 11, offset: 38258},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1128, col: 11, offset: 38258},
												name: "Newline",
											},
											&notExpr{
												pos: position{line: 1128, col: 19, offset: 38266},
												expr: &ruleRefExpr{
													pos:  position{line: 1128, col: 20, offset: 38267},
													name: "Newline",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1129, col: 11, offset: 38285},
										name: "SingleQuoteItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1130, col: 11, offset: 38317},
										name: "QuotedString",
									},
									&ruleRefExpr{
										pos:  position{line: 1131, col: 11, offset: 38340},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1132, col: 11, offset: 38359},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1133, col: 11, offset: 38380},
										name: "MonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1134, col: 11, offset: 38404},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1135, col: 11, offset: 38428},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1136, col: 11, offset: 38454},
										name: "ElementPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1137, col: 11, offset: 38483},
										name: "DoubleQuoteItalicTextFallbackCharacter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1141, col: 1, offset: 38552},
			expr: &choiceExpr{
				pos: position{line: 1142, col: 5, offset: 38598},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1142, col: 5, offset: 38598},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1143, col: 7, offset: 38697},
						run: (*parser).callonDoubleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1143, col: 7, offset: 38697},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1143, col: 7, offset: 38697},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1143, col: 12, offset: 38702},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicText",
			pos:  position{line: 1147, col: 1, offset: 38867},
			expr: &choiceExpr{
				pos: position{line: 1147, col: 26, offset: 38892},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1147, col: 26, offset: 38892},
						run: (*parser).callonSingleQuoteItalicText2,
						expr: &seqExpr{
							pos: position{line: 1147, col: 26, offset: 38892},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1147, col: 26, offset: 38892},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1147, col: 37, offset: 38903},
										expr: &ruleRefExpr{
											pos:  position{line: 1147, col: 38, offset: 38904},
											name: "LongHandAttributes",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1147, col: 60, offset: 38926},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1147, col: 60, offset: 38926},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1147, col: 64, offset: 38930},
											expr: &litMatcher{
												pos:        position{line: 1147, col: 65, offset: 38931},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1147, col: 70, offset: 38936},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1147, col: 80, offset: 38946},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1147, col: 111, offset: 38977},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1149, col: 5, offset: 39172},
						run: (*parser).callonSingleQuoteItalicText14,
						expr: &seqExpr{
							pos: position{line: 1149, col: 5, offset: 39172},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1149, col: 5, offset: 39172},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1149, col: 16, offset: 39183},
										expr: &ruleRefExpr{
											pos:  position{line: 1149, col: 17, offset: 39184},
											name: "LongHandAttributes",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1149, col: 38, offset: 39205},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1149, col: 42, offset: 39209},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1149, col: 52, offset: 39219},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1149, col: 52, offset: 39219},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1149, col: 56, offset: 39223},
												name: "SingleQuoteItalicTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1149, col: 87, offset: 39254},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElements",
			pos:  position{line: 1153, col: 1, offset: 39469},
			expr: &seqExpr{
				pos: position{line: 1153, col: 34, offset: 39502},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1153, col: 34, offset: 39502},
						expr: &ruleRefExpr{
							pos:  position{line: 1153, col: 35, offset: 39503},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1153, col: 41, offset: 39509},
						expr: &ruleRefExpr{
							pos:  position{line: 1153, col: 41, offset: 39509},
							name: "SingleQuoteItalicTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElement",
			pos:  position{line: 1155, col: 1, offset: 39540},
			expr: &choiceExpr{
				pos: position{line: 1155, col: 33, offset: 39572},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1155, col: 33, offset: 39572},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1156, col: 11, offset: 39587},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1156, col: 11, offset: 39587},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1156, col: 19, offset: 39595},
								expr: &ruleRefExpr{
									pos:  position{line: 1156, col: 20, offset: 39596},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1157, col: 11, offset: 39614},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1158, col: 11, offset: 39646},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1159, col: 11, offset: 39669},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1159, col: 11, offset: 39669},
								expr: &ruleRefExpr{
									pos:  position{line: 1159, col: 11, offset: 39669},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1159, col: 18, offset: 39676},
								expr: &seqExpr{
									pos: position{line: 1159, col: 19, offset: 39677},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1159, col: 19, offset: 39677},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 1159, col: 23, offset: 39681},
											expr: &litMatcher{
												pos:        position{line: 1159, col: 24, offset: 39682},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1160, col: 11, offset: 39698},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1161, col: 11, offset: 39717},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1162, col: 11, offset: 39738},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1163, col: 11, offset: 39762},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1164, col: 11, offset: 39786},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1165, col: 11, offset: 39812},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1166, col: 11, offset: 39841},
						name: "SingleQuoteItalicTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1168, col: 1, offset: 39881},
			expr: &choiceExpr{
				pos: position{line: 1169, col: 5, offset: 39927},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1169, col: 5, offset: 39927},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1170, col: 7, offset: 40026},
						run: (*parser).callonSingleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1170, col: 7, offset: 40026},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1170, col: 7, offset: 40026},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1170, col: 11, offset: 40030},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedItalicText",
			pos:  position{line: 1174, col: 1, offset: 40196},
			expr: &choiceExpr{
				pos: position{line: 1175, col: 5, offset: 40222},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1175, col: 5, offset: 40222},
						run: (*parser).callonEscapedItalicText2,
						expr: &seqExpr{
							pos: position{line: 1175, col: 5, offset: 40222},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1175, col: 5, offset: 40222},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1175, col: 18, offset: 40235},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1175, col: 40, offset: 40257},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1175, col: 45, offset: 40262},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1175, col: 55, offset: 40272},
										name: "DoubleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1175, col: 86, offset: 40303},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1177, col: 9, offset: 40460},
						run: (*parser).callonEscapedItalicText10,
						expr: &seqExpr{
							pos: position{line: 1177, col: 9, offset: 40460},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1177, col: 9, offset: 40460},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1177, col: 22, offset: 40473},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1177, col: 44, offset: 40495},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1177, col: 49, offset: 40500},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1177, col: 59, offset: 40510},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1177, col: 90, offset: 40541},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1180, col: 9, offset: 40741},
						run: (*parser).callonEscapedItalicText18,
						expr: &seqExpr{
							pos: position{line: 1180, col: 9, offset: 40741},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1180, col: 9, offset: 40741},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1180, col: 22, offset: 40754},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1180, col: 44, offset: 40776},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1180, col: 48, offset: 40780},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1180, col: 58, offset: 40790},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1180, col: 89, offset: 40821},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MonospaceText",
			pos:  position{line: 1187, col: 1, offset: 41031},
			expr: &choiceExpr{
				pos: position{line: 1187, col: 18, offset: 41048},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1187, col: 18, offset: 41048},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1187, col: 45, offset: 41075},
						name: "SingleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceText",
			pos:  position{line: 1189, col: 1, offset: 41101},
			expr: &actionExpr{
				pos: position{line: 1189, col: 29, offset: 41129},
				run: (*parser).callonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1189, col: 29, offset: 41129},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1189, col: 29, offset: 41129},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1189, col: 40, offset: 41140},
								expr: &ruleRefExpr{
									pos:  position{line: 1189, col: 41, offset: 41141},
									name: "LongHandAttributes",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1189, col: 62, offset: 41162},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
						&labeledExpr{
							pos:   position{line: 1189, col: 67, offset: 41167},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1189, col: 77, offset: 41177},
								name: "DoubleQuoteMonospaceTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1189, col: 111, offset: 41211},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElements",
			pos:  position{line: 1193, col: 1, offset: 41353},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1193, col: 37, offset: 41389},
				expr: &ruleRefExpr{
					pos:  position{line: 1193, col: 37, offset: 41389},
					name: "DoubleQuoteMonospaceTextElement",
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElement",
			pos:  position{line: 1195, col: 1, offset: 41456},
			expr: &actionExpr{
				pos: position{line: 1195, col: 36, offset: 41491},
				run: (*parser).callonDoubleQuoteMonospaceTextElement1,
				expr: &seqExpr{
					pos: position{line: 1195, col: 36, offset: 41491},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1195, col: 36, offset: 41491},
							expr: &litMatcher{
								pos:        position{line: 1195, col: 38, offset: 41493},
								val:        "``",
								ignoreCase: false,
								want:       "\"``\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1195, col: 44, offset: 41499},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1195, col: 53, offset: 41508},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1195, col: 53, offset: 41508},
										name: "Word",
									},
									&ruleRefExpr{
										pos:  position{line: 1196, col: 11, offset: 41523},
										name: "Space",
									},
									&seqExpr{
										pos: position{line: 1197, col: 11, offset: 41572},
										exprs: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 1197, col: 11, offset: 41572},
												name: "Newline",
											},
											&notExpr{
												pos: position{line: 1197, col: 19, offset: 41580},
												expr: &ruleRefExpr{
													pos:  position{line: 1197, col: 20, offset: 41581},
													name: "Newline",
												},
											},
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1198, col: 11, offset: 41599},
										name: "QuotedString",
									},
									&actionExpr{
										pos: position{line: 1199, col: 11, offset: 41622},
										run: (*parser).callonDoubleQuoteMonospaceTextElement14,
										expr: &ruleRefExpr{
											pos:  position{line: 1199, col: 11, offset: 41622},
											name: "Apostrophe",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1203, col: 11, offset: 41806},
										name: "SingleQuoteMonospaceText",
									},
									&ruleRefExpr{
										pos:  position{line: 1204, col: 11, offset: 41841},
										name: "BoldText",
									},
									&ruleRefExpr{
										pos:  position{line: 1205, col: 11, offset: 41860},
										name: "ItalicText",
									},
									&ruleRefExpr{
										pos:  position{line: 1206, col: 11, offset: 41881},
										name: "MarkedText",
									},
									&ruleRefExpr{
										pos:  position{line: 1207, col: 11, offset: 41902},
										name: "SubscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1208, col: 11, offset: 41926},
										name: "SuperscriptText",
									},
									&ruleRefExpr{
										pos:  position{line: 1209, col: 11, offset: 41952},
										name: "ElementPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1210, col: 11, offset: 41981},
										name: "DoubleQuoteMonospaceTextFallbackCharacter",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1214, col: 1, offset: 42053},
			expr: &choiceExpr{
				pos: position{line: 1215, col: 5, offset: 42102},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1215, col: 5, offset: 42102},
						val:        "[^\\r\\n`]",
						chars:      []rune{'\r', '\n', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1216, col: 7, offset: 42204},
						run: (*parser).callonDoubleQuoteMonospaceTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1216, col: 7, offset: 42204},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1216, col: 7, offset: 42204},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1216, col: 12, offset: 42209},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceText",
			pos:  position{line: 1220, col: 1, offset: 42377},
			expr: &choiceExpr{
				pos: position{line: 1220, col: 29, offset: 42405},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1220, col: 29, offset: 42405},
						run: (*parser).callonSingleQuoteMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1220, col: 29, offset: 42405},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1220, col: 29, offset: 42405},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1220, col: 40, offset: 42416},
										expr: &ruleRefExpr{
											pos:  position{line: 1220, col: 41, offset: 42417},
											name: "LongHandAttributes",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1220, col: 63, offset: 42439},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1220, col: 63, offset: 42439},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1220, col: 67, offset: 42443},
											expr: &litMatcher{
												pos:        position{line: 1220, col: 68, offset: 42444},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1220, col: 73, offset: 42449},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1220, col: 83, offset: 42459},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1220, col: 117, offset: 42493},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1222, col: 5, offset: 42691},
						run: (*parser).callonSingleQuoteMonospaceText14,
						expr: &seqExpr{
							pos: position{line: 1222, col: 5, offset: 42691},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1222, col: 5, offset: 42691},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1222, col: 16, offset: 42702},
										expr: &ruleRefExpr{
											pos:  position{line: 1222, col: 17, offset: 42703},
											name: "LongHandAttributes",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1222, col: 38, offset: 42724},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1222, col: 42, offset: 42728},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1222, col: 52, offset: 42738},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1222, col: 52, offset: 42738},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1222, col: 56, offset: 42742},
												name: "SingleQuoteMonospaceTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1222, col: 90, offset: 42776},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElements",
			pos:  position{line: 1226, col: 1, offset: 42995},
			expr: &seqExpr{
				pos: position{line: 1226, col: 37, offset: 43031},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1226, col: 37, offset: 43031},
						expr: &ruleRefExpr{
							pos:  position{line: 1226, col: 38, offset: 43032},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1226, col: 44, offset: 43038},
						expr: &ruleRefExpr{
							pos:  position{line: 1226, col: 44, offset: 43038},
							name: "SingleQuoteMonospaceTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElement",
			pos:  position{line: 1228, col: 1, offset: 43072},
			expr: &choiceExpr{
				pos: position{line: 1228, col: 37, offset: 43108},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1228, col: 37, offset: 43108},
						name: "Word",
					},
					&seqExpr{
						pos: position{line: 1229, col: 11, offset: 43123},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1229, col: 11, offset: 43123},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1229, col: 19, offset: 43131},
								expr: &ruleRefExpr{
									pos:  position{line: 1229, col: 20, offset: 43132},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1230, col: 11, offset: 43150},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1231, col: 11, offset: 43185},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1232, col: 11, offset: 43208},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1232, col: 11, offset: 43208},
								expr: &ruleRefExpr{
									pos:  position{line: 1232, col: 11, offset: 43208},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1232, col: 18, offset: 43215},
								expr: &seqExpr{
									pos: position{line: 1232, col: 19, offset: 43216},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1232, col: 19, offset: 43216},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1232, col: 23, offset: 43220},
											expr: &litMatcher{
												pos:        position{line: 1232, col: 24, offset: 43221},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1233, col: 11, offset: 43349},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1234, col: 11, offset: 43368},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1235, col: 11, offset: 43389},
						name: "MarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1236, col: 11, offset: 43410},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1237, col: 11, offset: 43434},
						name: "SuperscriptText",
					},
					&actionExpr{
						pos: position{line: 1238, col: 11, offset: 43460},
						run: (*parser).callonSingleQuoteMonospaceTextElement22,
						expr: &ruleRefExpr{
							pos:  position{line: 1238, col: 11, offset: 43460},
							name: "Apostrophe",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1242, col: 11, offset: 43601},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1243, col: 11, offset: 43630},
						name: "SingleQuoteMonospaceTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1245, col: 1, offset: 43673},
			expr: &choiceExpr{
				pos: position{line: 1246, col: 5, offset: 43722},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1246, col: 5, offset: 43722},
						val:        "[^\\r\\n`]",
						chars:      []rune{'\r', '\n', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1247, col: 7, offset: 43824},
						run: (*parser).callonSingleQuoteMonospaceTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1247, col: 7, offset: 43824},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1247, col: 7, offset: 43824},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1247, col: 11, offset: 43828},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMonospaceText",
			pos:  position{line: 1251, col: 1, offset: 43997},
			expr: &choiceExpr{
				pos: position{line: 1252, col: 5, offset: 44026},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1252, col: 5, offset: 44026},
						run: (*parser).callonEscapedMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1252, col: 5, offset: 44026},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1252, col: 5, offset: 44026},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1252, col: 18, offset: 44039},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1252, col: 40, offset: 44061},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1252, col: 45, offset: 44066},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1252, col: 55, offset: 44076},
										name: "DoubleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1252, col: 89, offset: 44110},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1254, col: 9, offset: 44267},
						run: (*parser).callonEscapedMonospaceText10,
						expr: &seqExpr{
							pos: position{line: 1254, col: 9, offset: 44267},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1254, col: 9, offset: 44267},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1254, col: 22, offset: 44280},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1254, col: 44, offset: 44302},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1254, col: 49, offset: 44307},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1254, col: 59, offset: 44317},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1254, col: 93, offset: 44351},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1257, col: 9, offset: 44551},
						run: (*parser).callonEscapedMonospaceText18,
						expr: &seqExpr{
							pos: position{line: 1257, col: 9, offset: 44551},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1257, col: 9, offset: 44551},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1257, col: 22, offset: 44564},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1257, col: 44, offset: 44586},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1257, col: 48, offset: 44590},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1257, col: 58, offset: 44600},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1257, col: 92, offset: 44634},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedString",
			pos:  position{line: 1265, col: 1, offset: 44959},
			expr: &choiceExpr{
				pos: position{line: 1265, col: 17, offset: 44975},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1265, col: 17, offset: 44975},
						name: "SingleQuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1265, col: 38, offset: 44996},
						name: "DoubleQuotedString",
					},
				},
			},
		},
		{
			name: "SingleQuotedString",
			pos:  position{line: 1267, col: 1, offset: 45016},
			expr: &actionExpr{
				pos: position{line: 1267, col: 23, offset: 45038},
				run: (*parser).callonSingleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 1267, col: 23, offset: 45038},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1267, col: 23, offset: 45038},
							name: "SingleQuoteStringStart",
						},
						&labeledExpr{
							pos:   position{line: 1267, col: 46, offset: 45061},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1267, col: 55, offset: 45070},
								name: "SingleQuotedStringElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1267, col: 82, offset: 45097},
							name: "SingleQuoteStringEnd",
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringElements",
			pos:  position{line: 1271, col: 1, offset: 45201},
			expr: &actionExpr{
				pos: position{line: 1271, col: 31, offset: 45231},
				run: (*parser).callonSingleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 1271, col: 31, offset: 45231},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1271, col: 41, offset: 45241},
						expr: &ruleRefExpr{
							pos:  position{line: 1271, col: 41, offset: 45241},
							name: "SingleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteStringStart",
			pos:  position{line: 1275, col: 1, offset: 45319},
			expr: &seqExpr{
				pos: position{line: 1275, col: 27, offset: 45345},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1275, col: 27, offset: 45345},
						val:        "'`",
						ignoreCase: false,
						want:       "\"'`\"",
					},
					&notExpr{
						pos: position{line: 1275, col: 32, offset: 45350},
						expr: &charClassMatcher{
							pos:        position{line: 1275, col: 33, offset: 45351},
							val:        "[ \\t\\r\\n]",
							chars:      []rune{' ', '\t', '\r', '\n'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteStringEnd",
			pos:  position{line: 1277, col: 1, offset: 45362},
			expr: &litMatcher{
				pos:        position{line: 1277, col: 25, offset: 45386},
				val:        "`'",
				ignoreCase: false,
				want:       "\"`'\"",
			},
		},
		{
			name: "SingleQuotedStringElement",
			pos:  position{line: 1280, col: 1, offset: 45474},
			expr: &actionExpr{
				pos: position{line: 1280, col: 30, offset: 45503},
				run: (*parser).callonSingleQuotedStringElement1,
				expr: &labeledExpr{
					pos:   position{line: 1280, col: 30, offset: 45503},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1281, col: 9, offset: 45521},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 1281, col: 9, offset: 45521},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1281, col: 9, offset: 45521},
										name: "LineBreak",
									},
									&notExpr{
										pos: position{line: 1281, col: 19, offset: 45531},
										expr: &ruleRefExpr{
											pos:  position{line: 1281, col: 20, offset: 45532},
											name: "SingleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 1282, col: 11, offset: 45588},
								exprs: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 1282, col: 11, offset: 45588},
										expr: &ruleRefExpr{
											pos:  position{line: 1282, col: 11, offset: 45588},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 1282, col: 18, offset: 45595},
										expr: &ruleRefExpr{
											pos:  position{line: 1282, col: 19, offset: 45596},
											name: "SingleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 1283, col: 11, offset: 45627},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1283, col: 11, offset: 45627},
										expr: &litMatcher{
											pos:        position{line: 1283, col: 12, offset: 45628},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1283, col: 16, offset: 45632},
										name: "Symbol",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1284, col: 11, offset: 45680},
								name: "BoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 1285, col: 11, offset: 45699},
								name: "ItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 1286, col: 11, offset: 45720},
								name: "MarkedText",
							},
							&ruleRefExpr{
								pos:  position{line: 1287, col: 11, offset: 45741},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1288, col: 11, offset: 45765},
								name: "SuperscriptText",
							},
							&seqExpr{
								pos: position{line: 1289, col: 11, offset: 45791},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1289, col: 11, offset: 45791},
										expr: &litMatcher{
											pos:        position{line: 1289, col: 12, offset: 45792},
											val:        "`'",
											ignoreCase: false,
											want:       "\"`'\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1289, col: 17, offset: 45797},
										name: "MonospaceText",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1290, col: 11, offset: 45821},
								name: "DoubleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 1291, col: 11, offset: 45850},
								name: "SingleQuotedStringFallbackCharacter",
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuotedStringFallbackCharacter",
			pos:  position{line: 1295, col: 1, offset: 45916},
			expr: &choiceExpr{
				pos: position{line: 1295, col: 41, offset: 45956},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1295, col: 41, offset: 45956},
						val:        "[^\\r\\n\\t `]",
						chars:      []rune{'\r', '\n', '\t', ' ', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1295, col: 55, offset: 45970},
						run: (*parser).callonSingleQuotedStringFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1295, col: 55, offset: 45970},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1295, col: 55, offset: 45970},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&notExpr{
									pos: position{line: 1295, col: 59, offset: 45974},
									expr: &litMatcher{
										pos:        position{line: 1295, col: 60, offset: 45975},
										val:        "'",
										ignoreCase: false,
										want:       "\"'\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedString",
			pos:  position{line: 1299, col: 1, offset: 46034},
			expr: &actionExpr{
				pos: position{line: 1299, col: 23, offset: 46056},
				run: (*parser).callonDoubleQuotedString1,
				expr: &seqExpr{
					pos: position{line: 1299, col: 23, offset: 46056},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1299, col: 23, offset: 46056},
							name: "DoubleQuoteStringStart",
						},
						&labeledExpr{
							pos:   position{line: 1299, col: 46, offset: 46079},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1299, col: 55, offset: 46088},
								name: "DoubleQuotedStringElements",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1299, col: 82, offset: 46115},
							name: "DoubleQuoteStringEnd",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElements",
			pos:  position{line: 1303, col: 1, offset: 46219},
			expr: &actionExpr{
				pos: position{line: 1303, col: 31, offset: 46249},
				run: (*parser).callonDoubleQuotedStringElements1,
				expr: &labeledExpr{
					pos:   position{line: 1303, col: 31, offset: 46249},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1303, col: 41, offset: 46259},
						expr: &ruleRefExpr{
							pos:  position{line: 1303, col: 41, offset: 46259},
							name: "DoubleQuotedStringElement",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuotedStringElement",
			pos:  position{line: 1308, col: 1, offset: 46419},
			expr: &actionExpr{
				pos: position{line: 1308, col: 30, offset: 46448},
				run: (*parser).callonDoubleQuotedStringElement1,
				expr: &labeledExpr{
					pos:   position{line: 1308, col: 30, offset: 46448},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1309, col: 9, offset: 46466},
						alternatives: []interface{}{
							&seqExpr{
								pos: position{line: 1309, col: 9, offset: 46466},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1309, col: 9, offset: 46466},
										name: "LineBreak",
									},
									&notExpr{
										pos: position{line: 1309, col: 19, offset: 46476},
										expr: &ruleRefExpr{
											pos:  position{line: 1309, col: 20, offset: 46477},
											name: "DoubleQuoteStringEnd",
										},
									},
								},
							},
							&seqExpr{
								pos: position{line: 1310, col: 11, offset: 46533},
								exprs: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 1310, col: 11, offset: 46533},
										expr: &ruleRefExpr{
											pos:  position{line: 1310, col: 11, offset: 46533},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 1310, col: 18, offset: 46540},
										expr: &ruleRefExpr{
											pos:  position{line: 1310, col: 19, offset: 46541},
											name: "DoubleQuoteStringEnd",
										},
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1311, col: 11, offset: 46572},
								name: "BoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 1312, col: 11, offset: 46591},
								name: "ItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 1313, col: 11, offset: 46612},
								name: "MarkedText",
							},
							&ruleRefExpr{
								pos:  position{line: 1314, col: 11, offset: 46633},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 1315, col: 11, offset: 46657},
								name: "SuperscriptText",
							},
							&seqExpr{
								pos: position{line: 1316, col: 11, offset: 46683},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1316, col: 11, offset: 46683},
										expr: &litMatcher{
											pos:        position{line: 1316, col: 12, offset: 46684},
											val:        "`\"",
											ignoreCase: false,
											want:       "\"`\\\"\"",
										},
									},
									&ruleRefExpr{
										pos:  position{line: 1316, col: 18, offset: 46690},
										name: "MonospaceText",
									},
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1317, col: 10, offset: 46713},
								name: "SingleQuotedString",
							},
							&ruleRefExpr{
								pos:  position{line: 1318, col: 11, offset: 46742},
								name: "DoubleQuotedStringFallbackCharacter",
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteStringStart",
			pos:  position{line: 1322, col: 1, offset: 46816},
			expr: &seqExpr{
				pos: position{line: 1322, col: 27, offset: 46842},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1322, col: 27, offset: 46842},
						val:        "\"`",
						ignoreCase: false,
						want:       "\"\\\"`\"",
					},
					&notExpr{
						pos: position{line: 1322, col: 33, offset: 46848},
						expr: &charClassMatcher{
							pos:        position{line: 1322, col: 34, offset: 46849},
							val:        "[ \\t\\r\\n]",
							chars:      []rune{' ', '\t', '\r', '\n'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteStringEnd",
			pos:  position{line: 1324, col: 1, offset: 46860},
			expr: &litMatcher{
				pos:        position{line: 1324, col: 25, offset: 46884},
				val:        "`\"",
				ignoreCase: false,
				want:       "\"`\\\"\"",
			},
		},
		{
			name: "DoubleQuotedStringFallbackCharacter",
			pos:  position{line: 1326, col: 1, offset: 46891},
			expr: &actionExpr{
				pos: position{line: 1326, col: 41, offset: 46931},
				run: (*parser).callonDoubleQuotedStringFallbackCharacter1,
				expr: &choiceExpr{
					pos: position{line: 1326, col: 42, offset: 46932},
					alternatives: []interface{}{
						&charClassMatcher{
							pos:        position{line: 1326, col: 42, offset: 46932},
							val:        "[^\\r\\n\\t `]",
							chars:      []rune{'\r', '\n', '\t', ' ', '`'},
							ignoreCase: false,
							inverted:   true,
						},
						&seqExpr{
							pos: position{line: 1326, col: 56, offset: 46946},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1326, col: 56, offset: 46946},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&notExpr{
									pos: position{line: 1326, col: 60, offset: 46950},
									expr: &litMatcher{
										pos:        position{line: 1326, col: 61, offset: 46951},
										val:        "\"",
										ignoreCase: false,
										want:       "\"\\\"\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkedText",
			pos:  position{line: 1335, col: 1, offset: 47071},
			expr: &choiceExpr{
				pos: position{line: 1335, col: 15, offset: 47085},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1335, col: 15, offset: 47085},
						name: "DoubleQuoteMarkedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1335, col: 39, offset: 47109},
						name: "SingleQuoteMarkedText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedText",
			pos:  position{line: 1337, col: 1, offset: 47132},
			expr: &actionExpr{
				pos: position{line: 1337, col: 26, offset: 47157},
				run: (*parser).callonDoubleQuoteMarkedText1,
				expr: &seqExpr{
					pos: position{line: 1337, col: 26, offset: 47157},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1337, col: 26, offset: 47157},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1337, col: 37, offset: 47168},
								expr: &ruleRefExpr{
									pos:  position{line: 1337, col: 38, offset: 47169},
									name: "LongHandAttributes",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1337, col: 59, offset: 47190},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
						&labeledExpr{
							pos:   position{line: 1337, col: 64, offset: 47195},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1337, col: 74, offset: 47205},
								name: "DoubleQuoteMarkedTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1337, col: 105, offset: 47236},
							val:        "##",
							ignoreCase: false,
							want:       "\"##\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElements",
			pos:  position{line: 1341, col: 1, offset: 47375},
			expr: &seqExpr{
				pos: position{line: 1341, col: 34, offset: 47408},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1341, col: 34, offset: 47408},
						name: "DoubleQuoteMarkedTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1341, col: 63, offset: 47437},
						expr: &seqExpr{
							pos: position{line: 1341, col: 64, offset: 47438},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1341, col: 64, offset: 47438},
									expr: &litMatcher{
										pos:        position{line: 1341, col: 66, offset: 47440},
										val:        "##",
										ignoreCase: false,
										want:       "\"##\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1341, col: 73, offset: 47447},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1341, col: 73, offset: 47447},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1341, col: 81, offset: 47455},
											name: "DoubleQuoteMarkedTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextElement",
			pos:  position{line: 1343, col: 1, offset: 47522},
			expr: &choiceExpr{
				pos: position{line: 1343, col: 33, offset: 47554},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1343, col: 33, offset: 47554},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 1344, col: 11, offset: 47569},
						name: "SingleQuoteMarkedText",
					},
					&seqExpr{
						pos: position{line: 1345, col: 11, offset: 47601},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1345, col: 11, offset: 47601},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1345, col: 19, offset: 47609},
								expr: &ruleRefExpr{
									pos:  position{line: 1345, col: 20, offset: 47610},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1346, col: 11, offset: 47628},
						name: "QuotedString",
					},
					&ruleRefExpr{
						pos:  position{line: 1347, col: 11, offset: 47651},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1348, col: 11, offset: 47670},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1349, col: 11, offset: 47691},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1350, col: 11, offset: 47715},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1351, col: 11, offset: 47739},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1352, col: 11, offset: 47765},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1353, col: 11, offset: 47794},
						name: "DoubleQuoteMarkedTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMarkedTextFallbackCharacter",
			pos:  position{line: 1355, col: 1, offset: 47834},
			expr: &choiceExpr{
				pos: position{line: 1356, col: 5, offset: 47880},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1356, col: 5, offset: 47880},
						val:        "[^\\r\\n#]",
						chars:      []rune{'\r', '\n', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1357, col: 7, offset: 47979},
						run: (*parser).callonDoubleQuoteMarkedTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1357, col: 7, offset: 47979},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1357, col: 7, offset: 47979},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1357, col: 12, offset: 47984},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedText",
			pos:  position{line: 1361, col: 1, offset: 48149},
			expr: &choiceExpr{
				pos: position{line: 1361, col: 26, offset: 48174},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1361, col: 26, offset: 48174},
						run: (*parser).callonSingleQuoteMarkedText2,
						expr: &seqExpr{
							pos: position{line: 1361, col: 26, offset: 48174},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1361, col: 26, offset: 48174},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1361, col: 37, offset: 48185},
										expr: &ruleRefExpr{
											pos:  position{line: 1361, col: 38, offset: 48186},
											name: "LongHandAttributes",
										},
									},
								},
								&seqExpr{
									pos: position{line: 1361, col: 60, offset: 48208},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1361, col: 60, offset: 48208},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
										&notExpr{
											pos: position{line: 1361, col: 64, offset: 48212},
											expr: &litMatcher{
												pos:        position{line: 1361, col: 65, offset: 48213},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1361, col: 70, offset: 48218},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1361, col: 80, offset: 48228},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1361, col: 111, offset: 48259},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1363, col: 5, offset: 48454},
						run: (*parser).callonSingleQuoteMarkedText14,
						expr: &seqExpr{
							pos: position{line: 1363, col: 5, offset: 48454},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1363, col: 5, offset: 48454},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 1363, col: 16, offset: 48465},
										expr: &ruleRefExpr{
											pos:  position{line: 1363, col: 17, offset: 48466},
											name: "LongHandAttributes",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1363, col: 38, offset: 48487},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1363, col: 42, offset: 48491},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1363, col: 52, offset: 48501},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1363, col: 52, offset: 48501},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1363, col: 56, offset: 48505},
												name: "SingleQuoteMarkedTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1363, col: 87, offset: 48536},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElements",
			pos:  position{line: 1367, col: 1, offset: 48750},
			expr: &seqExpr{
				pos: position{line: 1367, col: 34, offset: 48783},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1367, col: 34, offset: 48783},
						expr: &ruleRefExpr{
							pos:  position{line: 1367, col: 35, offset: 48784},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1367, col: 41, offset: 48790},
						expr: &ruleRefExpr{
							pos:  position{line: 1367, col: 41, offset: 48790},
							name: "SingleQuoteMarkedTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextElement",
			pos:  position{line: 1369, col: 1, offset: 48821},
			expr: &choiceExpr{
				pos: position{line: 1369, col: 33, offset: 48853},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1369, col: 33, offset: 48853},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 1370, col: 11, offset: 48868},
						name: "DoubleQuoteMarkedText",
					},
					&seqExpr{
						pos: position{line: 1371, col: 11, offset: 48900},
						exprs: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1371, col: 11, offset: 48900},
								name: "Newline",
							},
							&notExpr{
								pos: position{line: 1371, col: 19, offset: 48908},
								expr: &ruleRefExpr{
									pos:  position{line: 1371, col: 20, offset: 48909},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1372, col: 11, offset: 48927},
						name: "QuotedString",
					},
					&seqExpr{
						pos: position{line: 1373, col: 11, offset: 48950},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1373, col: 11, offset: 48950},
								expr: &ruleRefExpr{
									pos:  position{line: 1373, col: 11, offset: 48950},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1373, col: 18, offset: 48957},
								expr: &seqExpr{
									pos: position{line: 1373, col: 19, offset: 48958},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1373, col: 19, offset: 48958},
											val:        "#",
											ignoreCase: false,
											want:       "\"#\"",
										},
										&notExpr{
											pos: position{line: 1373, col: 23, offset: 48962},
											expr: &litMatcher{
												pos:        position{line: 1373, col: 24, offset: 48963},
												val:        "#",
												ignoreCase: false,
												want:       "\"#\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1374, col: 11, offset: 48979},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1375, col: 11, offset: 48998},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1376, col: 11, offset: 49019},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1377, col: 11, offset: 49043},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1378, col: 11, offset: 49067},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1379, col: 11, offset: 49093},
						name: "ElementPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 1380, col: 11, offset: 49122},
						name: "SingleQuoteMarkedTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteMarkedTextFallbackCharacter",
			pos:  position{line: 1382, col: 1, offset: 49162},
			expr: &choiceExpr{
				pos: position{line: 1383, col: 5, offset: 49208},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1383, col: 5, offset: 49208},
						val:        "[^\\r\\n#]",
						chars:      []rune{'\r', '\n', '#'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1384, col: 7, offset: 49305},
						run: (*parser).callonSingleQuoteMarkedTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1384, col: 7, offset: 49305},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1384, col: 7, offset: 49305},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1384, col: 11, offset: 49309},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMarkedText",
			pos:  position{line: 1388, col: 1, offset: 49472},
			expr: &choiceExpr{
				pos: position{line: 1389, col: 5, offset: 49497},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1389, col: 5, offset: 49497},
						run: (*parser).callonEscapedMarkedText2,
						expr: &seqExpr{
							pos: position{line: 1389, col: 5, offset: 49497},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1389, col: 5, offset: 49497},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1389, col: 18, offset: 49510},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1389, col: 40, offset: 49532},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 1389, col: 45, offset: 49537},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1389, col: 55, offset: 49547},
										name: "DoubleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1389, col: 86, offset: 49578},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1391, col: 9, offset: 49735},
						run: (*parser).callonEscapedMarkedText10,
						expr: &seqExpr{
							pos: position{line: 1391, col: 9, offset: 49735},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1391, col: 9, offset: 49735},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1391, col: 22, offset: 49748},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1391, col: 44, offset: 49770},
									val:        "##",
									ignoreCase: false,
									want:       "\"##\"",
								},
								&labeledExpr{
									pos:   position{line: 1391, col: 49, offset: 49775},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1391, col: 59, offset: 49785},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1391, col: 90, offset: 49816},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1394, col: 9, offset: 50016},
						run: (*parser).callonEscapedMarkedText18,
						expr: &seqExpr{
							pos: position{line: 1394, col: 9, offset: 50016},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1394, col: 9, offset: 50016},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1394, col: 22, offset: 50029},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1394, col: 44, offset: 50051},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
								&labeledExpr{
									pos:   position{line: 1394, col: 48, offset: 50055},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1394, col: 58, offset: 50065},
										name: "SingleQuoteMarkedTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1394, col: 89, offset: 50096},
									val:        "#",
									ignoreCase: false,
									want:       "\"#\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptText",
			pos:  position{line: 1399, col: 1, offset: 50246},
			expr: &actionExpr{
				pos: position{line: 1399, col: 18, offset: 50263},
				run: (*parser).callonSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1399, col: 18, offset: 50263},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1399, col: 18, offset: 50263},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1399, col: 29, offset: 50274},
								expr: &ruleRefExpr{
									pos:  position{line: 1399, col: 30, offset: 50275},
									name: "LongHandAttributes",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1399, col: 51, offset: 50296},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1399, col: 55, offset: 50300},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1399, col: 64, offset: 50309},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1399, col: 86, offset: 50331},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SubscriptTextElement",
			pos:  position{line: 1403, col: 1, offset: 50432},
			expr: &choiceExpr{
				pos: position{line: 1403, col: 25, offset: 50456},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1403, col: 25, offset: 50456},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1403, col: 38, offset: 50469},
						name: "NonSubscriptText",
					},
				},
			},
		},
		{
			name: "NonSubscriptText",
			pos:  position{line: 1405, col: 1, offset: 50488},
			expr: &actionExpr{
				pos: position{line: 1405, col: 21, offset: 50508},
				run: (*parser).callonNonSubscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1405, col: 21, offset: 50508},
					expr: &charClassMatcher{
						pos:        position{line: 1405, col: 21, offset: 50508},
						val:        "[^\\r\\n ~]",
						chars:      []rune{'\r', '\n', ' ', '~'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSubscriptText",
			pos:  position{line: 1409, col: 1, offset: 50585},
			expr: &actionExpr{
				pos: position{line: 1409, col: 25, offset: 50609},
				run: (*parser).callonEscapedSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1409, col: 25, offset: 50609},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1409, col: 25, offset: 50609},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1409, col: 38, offset: 50622},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1409, col: 60, offset: 50644},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1409, col: 64, offset: 50648},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1409, col: 73, offset: 50657},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1409, col: 95, offset: 50679},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptText",
			pos:  position{line: 1413, col: 1, offset: 50808},
			expr: &actionExpr{
				pos: position{line: 1413, col: 20, offset: 50827},
				run: (*parser).callonSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1413, col: 20, offset: 50827},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1413, col: 20, offset: 50827},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1413, col: 31, offset: 50838},
								expr: &ruleRefExpr{
									pos:  position{line: 1413, col: 32, offset: 50839},
									name: "LongHandAttributes",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1413, col: 53, offset: 50860},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1413, col: 57, offset: 50864},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1413, col: 66, offset: 50873},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1413, col: 90, offset: 50897},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptTextElement",
			pos:  position{line: 1417, col: 1, offset: 51000},
			expr: &choiceExpr{
				pos: position{line: 1417, col: 27, offset: 51026},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1417, col: 27, offset: 51026},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1417, col: 40, offset: 51039},
						name: "NonSuperscriptText",
					},
				},
			},
		},
		{
			name: "NonSuperscriptText",
			pos:  position{line: 1419, col: 1, offset: 51060},
			expr: &actionExpr{
				pos: position{line: 1419, col: 23, offset: 51082},
				run: (*parser).callonNonSuperscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1419, col: 23, offset: 51082},
					expr: &charClassMatcher{
						pos:        position{line: 1419, col: 23, offset: 51082},
						val:        "[^\\r\\n ^]",
						chars:      []rune{'\r', '\n', ' ', '^'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSuperscriptText",
			pos:  position{line: 1423, col: 1, offset: 51159},
			expr: &actionExpr{
				pos: position{line: 1423, col: 27, offset: 51185},
				run: (*parser).callonEscapedSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1423, col: 27, offset: 51185},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1423, col: 27, offset: 51185},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1423, col: 40, offset: 51198},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1423, col: 62, offset: 51220},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1423, col: 66, offset: 51224},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1423, col: 75, offset: 51233},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1423, col: 99, offset: 51257},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "InlinePassthrough",
			pos:  position{line: 1430, col: 1, offset: 51499},
			expr: &choiceExpr{
				pos: position{line: 1430, col: 22, offset: 51520},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1430, col: 22, offset: 51520},
						name: "TriplePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1430, col: 46, offset: 51544},
						name: "SinglePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1430, col: 70, offset: 51568},
						name: "PassthroughMacro",
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughPrefix",
			pos:  position{line: 1432, col: 1, offset: 51586},
			expr: &litMatcher{
				pos:        position{line: 1432, col: 32, offset: 51617},
				val:        "+",
				ignoreCase: false,
				want:       "\"+\"",
			},
		},
		{
			name: "SinglePlusPassthrough",
			pos:  position{line: 1434, col: 1, offset: 51622},
			expr: &actionExpr{
				pos: position{line: 1434, col: 26, offset: 51647},
				run: (*parser).callonSinglePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1434, col: 26, offset: 51647},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1434, col: 26, offset: 51647},
							name: "SinglePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1434, col: 54, offset: 51675},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1434, col: 63, offset: 51684},
								name: "SinglePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1434, col: 93, offset: 51714},
							name: "SinglePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1434, col: 121, offset: 51742},
							expr: &ruleRefExpr{
								pos:  position{line: 1434, col: 122, offset: 51743},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughContent",
			pos:  position{line: 1438, col: 1, offset: 51848},
			expr: &choiceExpr{
				pos: position{line: 1438, col: 33, offset: 51880},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1438, col: 34, offset: 51881},
						run: (*parser).callonSinglePlusPassthroughContent2,
						expr: &seqExpr{
							pos: position{line: 1438, col: 34, offset: 51881},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1438, col: 35, offset: 51882},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1438, col: 35, offset: 51882},
											expr: &ruleRefExpr{
												pos:  position{line: 1438, col: 36, offset: 51883},
												name: "SinglePlusPassthroughPrefix",
											},
										},
										&notExpr{
											pos: position{line: 1438, col: 64, offset: 51911},
											expr: &ruleRefExpr{
												pos:  position{line: 1438, col: 65, offset: 51912},
												name: "Space",
											},
										},
										&notExpr{
											pos: position{line: 1438, col: 71, offset: 51918},
											expr: &ruleRefExpr{
												pos:  position{line: 1438, col: 72, offset: 51919},
												name: "Newline",
											},
										},
										&anyMatcher{
											line: 1438, col: 80, offset: 51927,
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1438, col: 83, offset: 51930},
									expr: &seqExpr{
										pos: position{line: 1438, col: 84, offset: 51931},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1438, col: 84, offset: 51931},
												expr: &seqExpr{
													pos: position{line: 1438, col: 86, offset: 51933},
													exprs: []interface{}{
														&oneOrMoreExpr{
															pos: position{line: 1438, col: 86, offset: 51933},
															expr: &ruleRefExpr{
																pos:  position{line: 1438, col: 86, offset: 51933},
																name: "Space",
															},
														},
														&ruleRefExpr{
															pos:  position{line: 1438, col: 93, offset: 51940},
															name: "SinglePlusPassthroughPrefix",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 1438, col: 122, offset: 51969},
												expr: &ruleRefExpr{
													pos:  position{line: 1438, col: 123, offset: 51970},
													name: "SinglePlusPassthroughPrefix",
												},
											},
											&notExpr{
												pos: position{line: 1438, col: 151, offset: 51998},
												expr: &ruleRefExpr{
													pos:  position{line: 1438, col: 152, offset: 51999},
													name: "Newline",
												},
											},
											&anyMatcher{
												line: 1438, col: 160, offset: 52007,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1440, col: 7, offset: 52149},
						run: (*parser).callonSinglePlusPassthroughContent24,
						expr: &seqExpr{
							pos: position{line: 1440, col: 8, offset: 52150},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1440, col: 8, offset: 52150},
									expr: &ruleRefExpr{
										pos:  position{line: 1440, col: 9, offset: 52151},
										name: "Space",
									},
								},
								&notExpr{
									pos: position{line: 1440, col: 15, offset: 52157},
									expr: &ruleRefExpr{
										pos:  position{line: 1440, col: 16, offset: 52158},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 1440, col: 24, offset: 52166},
									expr: &ruleRefExpr{
										pos:  position{line: 1440, col: 25, offset: 52167},
										name: "SinglePlusPassthroughPrefix",
									},
								},
								&anyMatcher{
									line: 1440, col: 53, offset: 52195,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughPrefix",
			pos:  position{line: 1444, col: 1, offset: 52277},
			expr: &litMatcher{
				pos:        position{line: 1444, col: 32, offset: 52308},
				val:        "+++",
				ignoreCase: false,
				want:       "\"+++\"",
			},
		},
		{
			name: "TriplePlusPassthrough",
			pos:  position{line: 1446, col: 1, offset: 52315},
			expr: &actionExpr{
				pos: position{line: 1446, col: 26, offset: 52340},
				run: (*parser).callonTriplePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1446, col: 26, offset: 52340},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1446, col: 26, offset: 52340},
							name: "TriplePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1446, col: 54, offset: 52368},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1446, col: 63, offset: 52377},
								name: "TriplePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1446, col: 93, offset: 52407},
							name: "TriplePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1446, col: 121, offset: 52435},
							expr: &ruleRefExpr{
								pos:  position{line: 1446, col: 122, offset: 52436},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughContent",
			pos:  position{line: 1450, col: 1, offset: 52541},
			expr: &choiceExpr{
				pos: position{line: 1450, col: 33, offset: 52573},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1450, col: 34, offset: 52574},
						run: (*parser).callonTriplePlusPassthroughContent2,
						expr: &zeroOrMoreExpr{
							pos: position{line: 1450, col: 34, offset: 52574},
							expr: &seqExpr{
								pos: position{line: 1450, col: 35, offset: 52575},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1450, col: 35, offset: 52575},
										expr: &ruleRefExpr{
											pos:  position{line: 1450, col: 36, offset: 52576},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1450, col: 64, offset: 52604,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1452, col: 7, offset: 52769},
						run: (*parser).callonTriplePlusPassthroughContent8,
						expr: &zeroOrOneExpr{
							pos: position{line: 1452, col: 7, offset: 52769},
							expr: &seqExpr{
								pos: position{line: 1452, col: 8, offset: 52770},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1452, col: 8, offset: 52770},
										expr: &ruleRefExpr{
											pos:  position{line: 1452, col: 9, offset: 52771},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 1452, col: 15, offset: 52777},
										expr: &ruleRefExpr{
											pos:  position{line: 1452, col: 16, offset: 52778},
											name: "Newline",
										},
									},
									&notExpr{
										pos: position{line: 1452, col: 24, offset: 52786},
										expr: &ruleRefExpr{
											pos:  position{line: 1452, col: 25, offset: 52787},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1452, col: 53, offset: 52815,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacro",
			pos:  position{line: 1456, col: 1, offset: 52898},
			expr: &choiceExpr{
				pos: position{line: 1456, col: 21, offset: 52918},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1456, col: 21, offset: 52918},
						run: (*parser).callonPassthroughMacro2,
						expr: &seqExpr{
							pos: position{line: 1456, col: 21, offset: 52918},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1456, col: 21, offset: 52918},
									val:        "pass:[",
									ignoreCase: false,
									want:       "\"pass:[\"",
								},
								&labeledExpr{
									pos:   position{line: 1456, col: 30, offset: 52927},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1456, col: 38, offset: 52935},
										expr: &ruleRefExpr{
											pos:  position{line: 1456, col: 39, offset: 52936},
											name: "PassthroughMacroCharacter",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1456, col: 67, offset: 52964},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1458, col: 5, offset: 53060},
						run: (*parser).callonPassthroughMacro9,
						expr: &seqExpr{
							pos: position{line: 1458, col: 5, offset: 53060},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1458, col: 5, offset: 53060},
									val:        "pass:q[",
									ignoreCase: false,
									want:       "\"pass:q[\"",
								},
								&labeledExpr{
									pos:   position{line: 1458, col: 15, offset: 53070},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1458, col: 23, offset: 53078},
										expr: &choiceExpr{
											pos: position{line: 1458, col: 24, offset: 53079},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1458, col: 24, offset: 53079},
													name: "QuotedText",
												},
												&ruleRefExpr{
													pos:  position{line: 1458, col: 37, offset: 53092},
													name: "PassthroughMacroCharacter",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1458, col: 65, offset: 53120},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacroCharacter",
			pos:  position{line: 1462, col: 1, offset: 53216},
			expr: &actionExpr{
				pos: position{line: 1462, col: 30, offset: 53245},
				run: (*parser).callonPassthroughMacroCharacter1,
				expr: &charClassMatcher{
					pos:        position{line: 1462, col: 30, offset: 53245},
					val:        "[^\\]]",
					chars:      []rune{']'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "CrossReference",
			pos:  position{line: 1469, col: 1, offset: 53418},
			expr: &choiceExpr{
				pos: position{line: 1469, col: 19, offset: 53436},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1469, col: 19, offset: 53436},
						name: "InternalCrossReference",
					},
					&ruleRefExpr{
						pos:  position{line: 1469, col: 44, offset: 53461},
						name: "ExternalCrossReference",
					},
				},
			},
		},
		{
			name: "InternalCrossReference",
			pos:  position{line: 1471, col: 1, offset: 53486},
			expr: &choiceExpr{
				pos: position{line: 1471, col: 27, offset: 53512},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1471, col: 27, offset: 53512},
						run: (*parser).callonInternalCrossReference2,
						expr: &seqExpr{
							pos: position{line: 1471, col: 27, offset: 53512},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1471, col: 27, offset: 53512},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 1471, col: 32, offset: 53517},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1471, col: 36, offset: 53521},
										name: "Id",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1471, col: 40, offset: 53525},
									expr: &ruleRefExpr{
										pos:  position{line: 1471, col: 40, offset: 53525},
										name: "Space",
									},
								},
								&litMatcher{
									pos:        position{line: 1471, col: 47, offset: 53532},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&labeledExpr{
									pos:   position{line: 1471, col: 51, offset: 53536},
									label: "label",
									expr: &ruleRefExpr{
										pos:  position{line: 1471, col: 58, offset: 53543},
										name: "CrossReferenceLabel",
									},
								},
								&litMatcher{
									pos:        position{line: 1471, col: 79, offset: 53564},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1473, col: 5, offset: 53629},
						run: (*parser).callonInternalCrossReference13,
						expr: &seqExpr{
							pos: position{line: 1473, col: 5, offset: 53629},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1473, col: 5, offset: 53629},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 1473, col: 10, offset: 53634},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1473, col: 14, offset: 53638},
										name: "Id",
									},
								},
								&litMatcher{
									pos:        position{line: 1473, col: 18, offset: 53642},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalCrossReference",
			pos:  position{line: 1477, col: 1, offset: 53705},
			expr: &actionExpr{
				pos: position{line: 1477, col: 27, offset: 53731},
				run: (*parser).callonExternalCrossReference1,
				expr: &seqExpr{
					pos: position{line: 1477, col: 27, offset: 53731},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1477, col: 27, offset: 53731},
							val:        "xref:",
							ignoreCase: false,
							want:       "\"xref:\"",
						},
						&labeledExpr{
							pos:   position{line: 1477, col: 35, offset: 53739},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1477, col: 40, offset: 53744},
								name: "FileLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 1477, col: 54, offset: 53758},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1477, col: 72, offset: 53776},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReferenceLabel",
			pos:  position{line: 1481, col: 1, offset: 53901},
			expr: &oneOrMoreExpr{
				pos: position{line: 1481, col: 24, offset: 53924},
				expr: &choiceExpr{
					pos: position{line: 1482, col: 5, offset: 53930},
					alternatives: []interface{}{
						&actionExpr{
							pos: position{line: 1482, col: 6, offset: 53931},
							run: (*parser).callonCrossReferenceLabel3,
							expr: &seqExpr{
								pos: position{line: 1482, col: 6, offset: 53931},
								exprs: []interface{}{
									&charClassMatcher{
										pos:        position{line: 1482, col: 6, offset: 53931},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
									&oneOrMoreExpr{
										pos: position{line: 1482, col: 14, offset: 53939},
										expr: &charClassMatcher{
											pos:        position{line: 1482, col: 14, offset: 53939},
											val:        "[^\\r\\n{<>]",
											chars:      []rune{'\r', '\n', '{', '<', '>'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1485, col: 5, offset: 54134},
							name: "AttrSub",
						},
						&actionExpr{
							pos: position{line: 1486, col: 6, offset: 54149},
							run: (*parser).callonCrossReferenceLabel9,
							expr: &litMatcher{
								pos:        position{line: 1486, col: 6, offset: 54149},
								val:        "{",
								ignoreCase: false,
								want:       "\"{\"",
							},
						},
					},
				},
			},
		},
		{
			name: "Link",
			pos:  position{line: 1494, col: 1, offset: 54326},
			expr: &choiceExpr{
				pos: position{line: 1494, col: 9, offset: 54334},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1494, col: 9, offset: 54334},
						name: "RelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1494, col: 24, offset: 54349},
						name: "ExternalLink",
					},
				},
			},
		},
		{
			name: "RelativeLink",
			pos:  position{line: 1497, col: 1, offset: 54430},
			expr: &actionExpr{
				pos: position{line: 1497, col: 17, offset: 54446},
				run: (*parser).callonRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1497, col: 17, offset: 54446},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1497, col: 17, offset: 54446},
							val:        "link:",
							ignoreCase: false,
							want:       "\"link:\"",
						},
						&labeledExpr{
							pos:   position{line: 1497, col: 25, offset: 54454},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1497, col: 30, offset: 54459},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1497, col: 40, offset: 54469},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1497, col: 58, offset: 54487},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalLink",
			pos:  position{line: 1501, col: 1, offset: 54600},
			expr: &actionExpr{
				pos: position{line: 1501, col: 17, offset: 54616},
				run: (*parser).callonExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1501, col: 17, offset: 54616},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1501, col: 17, offset: 54616},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1501, col: 22, offset: 54621},
								name: "LocationWithScheme",
							},
						},
						&labeledExpr{
							pos:   position{line: 1501, col: 42, offset: 54641},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1501, col: 59, offset: 54658},
								expr: &ruleRefExpr{
									pos:  position{line: 1501, col: 60, offset: 54659},
									name: "InlineAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageBlock",
			pos:  position{line: 1508, col: 1, offset: 54856},
			expr: &actionExpr{
				pos: position{line: 1509, col: 5, offset: 54875},
				run: (*parser).callonImageBlock1,
				expr: &seqExpr{
					pos: position{line: 1509, col: 5, offset: 54875},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1509, col: 5, offset: 54875},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1509, col: 16, offset: 54886},
								expr: &ruleRefExpr{
									pos:  position{line: 1509, col: 17, offset: 54887},
									name: "BlockAttributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1510, col: 5, offset: 54910},
							run: (*parser).callonImageBlock6,
						},
						&litMatcher{
							pos:        position{line: 1514, col: 5, offset: 55043},
							val:        "image::",
							ignoreCase: false,
							want:       "\"image::\"",
						},
						&labeledExpr{
							pos:   position{line: 1514, col: 15, offset: 55053},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1514, col: 21, offset: 55059},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1514, col: 31, offset: 55069},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1514, col: 49, offset: 55087},
								name: "InlineAttributes",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1514, col: 67, offset: 55105},
							expr: &ruleRefExpr{
								pos:  position{line: 1514, col: 67, offset: 55105},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1514, col: 74, offset: 55112},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "InlineImage",
			pos:  position{line: 1519, col: 1, offset: 55327},
			expr: &actionExpr{
				pos: position{line: 1519, col: 16, offset: 55342},
				run: (*parser).callonInlineImage1,
				expr: &seqExpr{
					pos: position{line: 1519, col: 16, offset: 55342},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1519, col: 16, offset: 55342},
							val:        "image:",
							ignoreCase: false,
							want:       "\"image:\"",
						},
						&notExpr{
							pos: position{line: 1519, col: 25, offset: 55351},
							expr: &litMatcher{
								pos:        position{line: 1519, col: 26, offset: 55352},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1519, col: 30, offset: 55356},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1519, col: 36, offset: 55362},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1519, col: 46, offset: 55372},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1519, col: 64, offset: 55390},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineIcon",
			pos:  position{line: 1526, col: 1, offset: 55725},
			expr: &actionExpr{
				pos: position{line: 1526, col: 15, offset: 55739},
				run: (*parser).callonInlineIcon1,
				expr: &seqExpr{
					pos: position{line: 1526, col: 15, offset: 55739},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1526, col: 15, offset: 55739},
							val:        "icon:",
							ignoreCase: false,
							want:       "\"icon:\"",
						},
						&labeledExpr{
							pos:   position{line: 1526, col: 23, offset: 55747},
							label: "icon",
							expr: &actionExpr{
								pos: position{line: 1526, col: 29, offset: 55753},
								run: (*parser).callonInlineIcon5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1526, col: 29, offset: 55753},
									expr: &charClassMatcher{
										pos:        position{line: 1526, col: 29, offset: 55753},
										val:        "[\\pL0-9_-]",
										chars:      []rune{'_', '-'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1526, col: 73, offset: 55797},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1526, col: 85, offset: 55809},
								name: "InlineAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineFootnote",
			pos:  position{line: 1533, col: 1, offset: 56081},
			expr: &choiceExpr{
				pos: position{line: 1533, col: 19, offset: 56099},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1533, col: 19, offset: 56099},
						run: (*parser).callonInlineFootnote2,
						expr: &seqExpr{
							pos: position{line: 1533, col: 19, offset: 56099},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1533, col: 19, offset: 56099},
									val:        "footnote:[",
									ignoreCase: false,
									want:       "\"footnote:[\"",
								},
								&labeledExpr{
									pos:   position{line: 1533, col: 32, offset: 56112},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1533, col: 41, offset: 56121},
										name: "FootnoteContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1533, col: 58, offset: 56138},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1535, col: 5, offset: 56206},
						run: (*parser).callonInlineFootnote8,
						expr: &seqExpr{
							pos: position{line: 1535, col: 5, offset: 56206},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1535, col: 5, offset: 56206},
									val:        "footnote:",
									ignoreCase: false,
									want:       "\"footnote:\"",
								},
								&labeledExpr{
									pos:   position{line: 1535, col: 17, offset: 56218},
									label: "ref",
									expr: &ruleRefExpr{
										pos:  position{line: 1535, col: 22, offset: 56223},
										name: "FootnoteRef",
									},
								},
								&litMatcher{
									pos:        position{line: 1535, col: 35, offset: 56236},
									val:        "[",
									ignoreCase: false,
									want:       "\"[\"",
								},
								&labeledExpr{
									pos:   position{line: 1535, col: 39, offset: 56240},
									label: "content",
									expr: &zeroOrOneExpr{
										pos: position{line: 1535, col: 47, offset: 56248},
										expr: &ruleRefExpr{
											pos:  position{line: 1535, col: 48, offset: 56249},
											name: "FootnoteContent",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1535, col: 66, offset: 56267},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FootnoteRef",
			pos:  position{line: 1539, col: 1, offset: 56328},
			expr: &ruleRefExpr{
				pos:  position{line: 1539, col: 16, offset: 56343},
				name: "Alphanums",
			},
		},
		{
			name: "FootnoteContent",
			pos:  position{line: 1541, col: 1, offset: 56354},
			expr: &actionExpr{
				pos: position{line: 1541, col: 20, offset: 56373},
				run: (*parser).callonFootnoteContent1,
				expr: &labeledExpr{
					pos:   position{line: 1541, col: 20, offset: 56373},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1541, col: 29, offset: 56382},
						expr: &seqExpr{
							pos: position{line: 1541, col: 30, offset: 56383},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1541, col: 30, offset: 56383},
									expr: &litMatcher{
										pos:        position{line: 1541, col: 31, offset: 56384},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1541, col: 35, offset: 56388},
									name: "InlineElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Callout",
			pos:  position{line: 1549, col: 1, offset: 56704},
			expr: &actionExpr{
				pos: position{line: 1549, col: 12, offset: 56715},
				run: (*parser).callonCallout1,
				expr: &seqExpr{
					pos: position{line: 1549, col: 12, offset: 56715},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1549, col: 12, offset: 56715},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 1549, col: 16, offset: 56719},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1549, col: 21, offset: 56724},
								run: (*parser).callonCallout5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1549, col: 21, offset: 56724},
									expr: &charClassMatcher{
										pos:        position{line: 1549, col: 21, offset: 56724},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1549, col: 69, offset: 56772},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1549, col: 73, offset: 56776},
							expr: &ruleRefExpr{
								pos:  position{line: 1549, col: 73, offset: 56776},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 1549, col: 80, offset: 56783},
							expr: &choiceExpr{
								pos: position{line: 1549, col: 82, offset: 56785},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1549, col: 82, offset: 56785},
										name: "EOL",
									},
									&ruleRefExpr{
										pos:  position{line: 1549, col: 88, offset: 56791},
										name: "Callout",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CalloutListItem",
			pos:  position{line: 1553, col: 1, offset: 56844},
			expr: &actionExpr{
				pos: position{line: 1553, col: 20, offset: 56863},
				run: (*parser).callonCalloutListItem1,
				expr: &seqExpr{
					pos: position{line: 1553, col: 20, offset: 56863},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1553, col: 20, offset: 56863},
							label: "ref",
							expr: &ruleRefExpr{
								pos:  position{line: 1553, col: 25, offset: 56868},
								name: "CalloutListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 1553, col: 48, offset: 56891},
							label: "description",
							expr: &oneOrMoreExpr{
								pos: position{line: 1553, col: 61, offset: 56904},
								expr: &ruleRefExpr{
									pos:  position{line: 1553, col: 61, offset: 56904},
									name: "ListParagraph",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CalloutListItemPrefix",
			pos:  position{line: 1557, col: 1, offset: 57001},
			expr: &actionExpr{
				pos: position{line: 1557, col: 26, offset: 57026},
				run: (*parser).callonCalloutListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 1557, col: 26, offset: 57026},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1557, col: 26, offset: 57026},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 1557, col: 30, offset: 57030},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1557, col: 35, offset: 57035},
								run: (*parser).callonCalloutListItemPrefix5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1557, col: 35, offset: 57035},
									expr: &charClassMatcher{
										pos:        position{line: 1557, col: 35, offset: 57035},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1557, col: 83, offset: 57083},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 1557, col: 87, offset: 57087},
							expr: &ruleRefExpr{
								pos:  position{line: 1557, col: 87, offset: 57087},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "ThematicBreak",
			pos:  position{line: 1566, col: 1, offset: 57334},
			expr: &actionExpr{
				pos: position{line: 1566, col: 18, offset: 57351},
				run: (*parser).callonThematicBreak1,
				expr: &seqExpr{
					pos: position{line: 1566, col: 18, offset: 57351},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 1566, col: 19, offset: 57352},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 1566, col: 19, offset: 57352},
									val:        "***",
									ignoreCase: false,
									want:       "\"***\"",
								},
								&litMatcher{
									pos:        position{line: 1566, col: 27, offset: 57360},
									val:        "* * *",
									ignoreCase: false,
									want:       "\"* * *\"",
								},
								&litMatcher{
									pos:        position{line: 1566, col: 37, offset: 57370},
									val:        "---",
									ignoreCase: false,
									want:       "\"---\"",
								},
								&litMatcher{
									pos:        position{line: 1566, col: 45, offset: 57378},
									val:        "- - -",
									ignoreCase: false,
									want:       "\"- - -\"",
								},
								&litMatcher{
									pos:        position{line: 1566, col: 55, offset: 57388},
									val:        "___",
									ignoreCase: false,
									want:       "\"___\"",
								},
								&litMatcher{
									pos:        position{line: 1566, col: 63, offset: 57396},
									val:        "_ _ _",
									ignoreCase: false,
									want:       "\"_ _ _\"",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1566, col: 72, offset: 57405},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DelimitedBlock",
			pos:  position{line: 1576, col: 1, offset: 57655},
			expr: &actionExpr{
				pos: position{line: 1576, col: 19, offset: 57673},
				run: (*parser).callonDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 1576, col: 19, offset: 57673},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1576, col: 19, offset: 57673},
							expr: &ruleRefExpr{
								pos:  position{line: 1576, col: 20, offset: 57674},
								name: "Alphanum",
							},
						},
						&labeledExpr{
							pos:   position{line: 1577, col: 5, offset: 57762},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 1577, col: 12, offset: 57769},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1577, col: 12, offset: 57769},
										name: "FencedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1578, col: 11, offset: 57792},
										name: "ListingBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1579, col: 11, offset: 57816},
										name: "ExampleBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1580, col: 11, offset: 57840},
										name: "VerseBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1581, col: 11, offset: 57861},
										name: "QuoteBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1582, col: 11, offset: 57882},
										name: "SidebarBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1583, col: 11, offset: 57905},
										name: "PassthroughBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1584, col: 11, offset: 57932},
										name: "CommentBlock",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockDelimiter",
			pos:  position{line: 1588, col: 1, offset: 57973},
			expr: &choiceExpr{
				pos: position{line: 1588, col: 19, offset: 57991},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1588, col: 19, offset: 57991},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1588, col: 19, offset: 57991},
								expr: &ruleRefExpr{
									pos:  position{line: 1588, col: 21, offset: 57993},
									name: "Alphanum",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1588, col: 31, offset: 58003},
								name: "LiteralBlockDelimiter",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1589, col: 19, offset: 58074},
						name: "FencedBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1590, col: 19, offset: 58114},
						name: "ListingBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1591, col: 19, offset: 58155},
						name: "ExampleBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1592, col: 19, offset: 58196},
						name: "CommentBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1593, col: 19, offset: 58237},
						name: "QuoteBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1594, col: 19, offset: 58275},
						name: "SidebarBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1595, col: 19, offset: 58315},
						name: "PassthroughBlockDelimiter",
					},
				},
			},
		},
		{
			name: "ExampleBlock",
			pos:  position{line: 1600, col: 1, offset: 58538},
			expr: &actionExpr{
				pos: position{line: 1600, col: 17, offset: 58554},
				run: (*parser).callonExampleBlock1,
				expr: &seqExpr{
					pos: position{line: 1600, col: 17, offset: 58554},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1600, col: 17, offset: 58554},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1600, col: 28, offset: 58565},
								expr: &ruleRefExpr{
									pos:  position{line: 1600, col: 29, offset: 58566},
									name: "BlockAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1600, col: 47, offset: 58584},
							name: "ExampleBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1600, col: 74, offset: 58611},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 1600, col: 82, offset: 58619},
								name: "ExampleBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1600, col: 106, offset: 58643},
							name: "ExampleBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockDelimiter",
			pos:  position{line: 1604, col: 1, offset: 58742},
			expr: &seqExpr{
				pos: position{line: 1604, col: 26, offset: 58767},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1604, col: 26, offset: 58767},
						val:        "====",
						ignoreCase: false,
						want:       "\"====\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1604, col: 33, offset: 58774},
						expr: &ruleRefExpr{
							pos:  position{line: 1604, col: 33, offset: 58774},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1604, col: 40, offset: 58781},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ExampleBlockStartDelimiter",
			pos:  position{line: 1606, col: 1, offset: 58786},
			expr: &seqExpr{
				pos: position{line: 1606, col: 31, offset: 58816},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1606, col: 31, offset: 58816},
						val:        "====",
						ignoreCase: false,
						want:       "\"====\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1606, col: 38, offset: 58823},
						expr: &ruleRefExpr{
							pos:  position{line: 1606, col: 38, offset: 58823},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1606, col: 45, offset: 58830},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ExampleBlockEndDelimiter",
			pos:  position{line: 1608, col: 1, offset: 58835},
			expr: &choiceExpr{
				pos: position{line: 1608, col: 29, offset: 58863},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1608, col: 30, offset: 58864},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1608, col: 30, offset: 58864},
								val:        "====",
								ignoreCase: false,
								want:       "\"====\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1608, col: 37, offset: 58871},
								expr: &ruleRefExpr{
									pos:  position{line: 1608, col: 37, offset: 58871},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1608, col: 44, offset: 58878},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1608, col: 51, offset: 58885},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "ExampleBlockRawContent",
			pos:  position{line: 1610, col: 1, offset: 58890},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1610, col: 27, offset: 58916},
				expr: &actionExpr{
					pos: position{line: 1611, col: 8, offset: 58925},
					run: (*parser).callonExampleBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1611, col: 8, offset: 58925},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1611, col: 8, offset: 58925},
								expr: &ruleRefExpr{
									pos:  position{line: 1611, col: 9, offset: 58926},
									name: "ExampleBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1612, col: 8, offset: 58959},
								label: "element",
								expr: &choiceExpr{
									pos: position{line: 1612, col: 17, offset: 58968},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1612, col: 17, offset: 58968},
											name: "BlankLine",
										},
										&ruleRefExpr{
											pos:  position{line: 1613, col: 15, offset: 58992},
											name: "ImageBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1614, col: 15, offset: 59017},
											name: "ThematicBreak",
										},
										&ruleRefExpr{
											pos:  position{line: 1615, col: 15, offset: 59045},
											name: "OrderedListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1616, col: 15, offset: 59076},
											name: "UnorderedListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1617, col: 15, offset: 59109},
											name: "LabeledListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1618, col: 15, offset: 59140},
											name: "ContinuedListItemElement",
										},
										&ruleRefExpr{
											pos:  position{line: 1619, col: 15, offset: 59179},
											name: "FencedBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1620, col: 15, offset: 59206},
											name: "ListingBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1621, col: 15, offset: 59234},
											name: "VerseBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1622, col: 15, offset: 59259},
											name: "QuoteBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1623, col: 15, offset: 59284},
											name: "SidebarBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1624, col: 15, offset: 59311},
											name: "SingleLineComment",
										},
										&ruleRefExpr{
											pos:  position{line: 1625, col: 15, offset: 59343},
											name: "PassthroughBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1626, col: 15, offset: 59374},
											name: "Table",
										},
										&ruleRefExpr{
											pos:  position{line: 1627, col: 15, offset: 59394},
											name: "CommentBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1628, col: 15, offset: 59421},
											name: "LiteralBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1629, col: 15, offset: 59449},
											name: "RawParagraph",
										},
										&ruleRefExpr{
											pos:  position{line: 1630, col: 15, offset: 59476},
											name: "StandaloneAttributes",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlock",
			pos:  position{line: 1637, col: 1, offset: 59732},
			expr: &actionExpr{
				pos: position{line: 1637, col: 15, offset: 59746},
				run: (*parser).callonQuoteBlock1,
				expr: &seqExpr{
					pos: position{line: 1637, col: 15, offset: 59746},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1637, col: 15, offset: 59746},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1637, col: 26, offset: 59757},
								expr: &ruleRefExpr{
									pos:  position{line: 1637, col: 27, offset: 59758},
									name: "BlockAttributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1638, col: 5, offset: 59781},
							run: (*parser).callonQuoteBlock6,
						},
						&ruleRefExpr{
							pos:  position{line: 1646, col: 5, offset: 60091},
							name: "QuoteBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1646, col: 30, offset: 60116},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1646, col: 39, offset: 60125},
								name: "QuoteBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1646, col: 61, offset: 60147},
							name: "QuoteBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockDelimiter",
			pos:  position{line: 1650, col: 1, offset: 60251},
			expr: &seqExpr{
				pos: position{line: 1650, col: 24, offset: 60274},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1650, col: 24, offset: 60274},
						val:        "____",
						ignoreCase: false,
						want:       "\"____\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1650, col: 31, offset: 60281},
						expr: &ruleRefExpr{
							pos:  position{line: 1650, col: 31, offset: 60281},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1650, col: 38, offset: 60288},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "QuoteBlockStartDelimiter",
			pos:  position{line: 1652, col: 1, offset: 60318},
			expr: &seqExpr{
				pos: position{line: 1652, col: 29, offset: 60346},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1652, col: 29, offset: 60346},
						val:        "____",
						ignoreCase: false,
						want:       "\"____\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1652, col: 36, offset: 60353},
						expr: &ruleRefExpr{
							pos:  position{line: 1652, col: 36, offset: 60353},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1652, col: 43, offset: 60360},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "QuoteBlockEndDelimiter",
			pos:  position{line: 1654, col: 1, offset: 60390},
			expr: &choiceExpr{
				pos: position{line: 1654, col: 27, offset: 60416},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1654, col: 28, offset: 60417},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1654, col: 28, offset: 60417},
								val:        "____",
								ignoreCase: false,
								want:       "\"____\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1654, col: 35, offset: 60424},
								expr: &ruleRefExpr{
									pos:  position{line: 1654, col: 35, offset: 60424},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1654, col: 42, offset: 60431},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1654, col: 49, offset: 60438},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "QuoteBlockRawContent",
			pos:  position{line: 1656, col: 1, offset: 60468},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1656, col: 25, offset: 60492},
				expr: &actionExpr{
					pos: position{line: 1657, col: 8, offset: 60501},
					run: (*parser).callonQuoteBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1657, col: 8, offset: 60501},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1657, col: 8, offset: 60501},
								expr: &ruleRefExpr{
									pos:  position{line: 1657, col: 9, offset: 60502},
									name: "QuoteBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1658, col: 8, offset: 60533},
								label: "element",
								expr: &choiceExpr{
									pos: position{line: 1658, col: 17, offset: 60542},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1658, col: 17, offset: 60542},
											name: "BlankLine",
										},
										&ruleRefExpr{
											pos:  position{line: 1659, col: 15, offset: 60566},
											name: "ImageBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1660, col: 15, offset: 60591},
											name: "ThematicBreak",
										},
										&ruleRefExpr{
											pos:  position{line: 1661, col: 15, offset: 60619},
											name: "OrderedListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1662, col: 15, offset: 60650},
											name: "UnorderedListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1663, col: 15, offset: 60683},
											name: "LabeledListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1664, col: 15, offset: 60714},
											name: "ContinuedListItemElement",
										},
										&ruleRefExpr{
											pos:  position{line: 1665, col: 15, offset: 60753},
											name: "FencedBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1666, col: 15, offset: 60780},
											name: "ListingBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1667, col: 15, offset: 60808},
											name: "VerseBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1668, col: 15, offset: 60833},
											name: "ExampleBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1669, col: 15, offset: 60860},
											name: "SidebarBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1670, col: 15, offset: 60887},
											name: "SingleLineComment",
										},
										&ruleRefExpr{
											pos:  position{line: 1671, col: 15, offset: 60919},
											name: "PassthroughBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1672, col: 15, offset: 60950},
											name: "Table",
										},
										&ruleRefExpr{
											pos:  position{line: 1673, col: 15, offset: 60970},
											name: "CommentBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1674, col: 15, offset: 60997},
											name: "LiteralBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1675, col: 15, offset: 61025},
											name: "RawParagraph",
										},
										&ruleRefExpr{
											pos:  position{line: 1676, col: 15, offset: 61052},
											name: "StandaloneAttributes",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlock",
			pos:  position{line: 1683, col: 1, offset: 61310},
			expr: &actionExpr{
				pos: position{line: 1683, col: 17, offset: 61326},
				run: (*parser).callonSidebarBlock1,
				expr: &seqExpr{
					pos: position{line: 1683, col: 17, offset: 61326},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1683, col: 17, offset: 61326},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1683, col: 28, offset: 61337},
								expr: &ruleRefExpr{
									pos:  position{line: 1683, col: 29, offset: 61338},
									name: "BlockAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1683, col: 47, offset: 61356},
							name: "SidebarBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1683, col: 74, offset: 61383},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1683, col: 83, offset: 61392},
								name: "SidebarBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1683, col: 107, offset: 61416},
							name: "SidebarBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockDelimiter",
			pos:  position{line: 1687, col: 1, offset: 61516},
			expr: &seqExpr{
				pos: position{line: 1687, col: 26, offset: 61541},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1687, col: 26, offset: 61541},
						val:        "****",
						ignoreCase: false,
						want:       "\"****\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1687, col: 33, offset: 61548},
						expr: &ruleRefExpr{
							pos:  position{line: 1687, col: 33, offset: 61548},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1687, col: 40, offset: 61555},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "SidebarBlockStartDelimiter",
			pos:  position{line: 1689, col: 1, offset: 61560},
			expr: &seqExpr{
				pos: position{line: 1689, col: 31, offset: 61590},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1689, col: 31, offset: 61590},
						val:        "****",
						ignoreCase: false,
						want:       "\"****\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1689, col: 38, offset: 61597},
						expr: &ruleRefExpr{
							pos:  position{line: 1689, col: 38, offset: 61597},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1689, col: 45, offset: 61604},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "SidebarBlockEndDelimiter",
			pos:  position{line: 1691, col: 1, offset: 61609},
			expr: &choiceExpr{
				pos: position{line: 1691, col: 29, offset: 61637},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1691, col: 30, offset: 61638},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1691, col: 30, offset: 61638},
								val:        "****",
								ignoreCase: false,
								want:       "\"****\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1691, col: 37, offset: 61645},
								expr: &ruleRefExpr{
									pos:  position{line: 1691, col: 37, offset: 61645},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1691, col: 44, offset: 61652},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1691, col: 51, offset: 61659},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "SidebarBlockRawContent",
			pos:  position{line: 1693, col: 1, offset: 61664},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1693, col: 27, offset: 61690},
				expr: &actionExpr{
					pos: position{line: 1694, col: 8, offset: 61699},
					run: (*parser).callonSidebarBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1694, col: 8, offset: 61699},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1694, col: 8, offset: 61699},
								expr: &ruleRefExpr{
									pos:  position{line: 1694, col: 9, offset: 61700},
									name: "SidebarBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1695, col: 8, offset: 61733},
								label: "element",
								expr: &choiceExpr{
									pos: position{line: 1695, col: 17, offset: 61742},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1695, col: 17, offset: 61742},
											name: "BlankLine",
										},
										&ruleRefExpr{
											pos:  position{line: 1696, col: 15, offset: 61766},
											name: "ImageBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1697, col: 15, offset: 61791},
											name: "ThematicBreak",
										},
										&ruleRefExpr{
											pos:  position{line: 1698, col: 15, offset: 61819},
											name: "OrderedListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1699, col: 15, offset: 61850},
											name: "UnorderedListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1700, col: 15, offset: 61883},
											name: "LabeledListItem",
										},
										&ruleRefExpr{
											pos:  position{line: 1701, col: 15, offset: 61914},
											name: "ContinuedListItemElement",
										},
										&ruleRefExpr{
											pos:  position{line: 1702, col: 15, offset: 61953},
											name: "FencedBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1703, col: 15, offset: 61980},
											name: "ListingBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1704, col: 15, offset: 62007},
											name: "VerseBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1705, col: 15, offset: 62033},
											name: "ExampleBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1706, col: 15, offset: 62060},
											name: "QuoteBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1707, col: 15, offset: 62085},
											name: "SingleLineComment",
										},
										&ruleRefExpr{
											pos:  position{line: 1708, col: 15, offset: 62117},
											name: "PassthroughBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1709, col: 15, offset: 62148},
											name: "Table",
										},
										&ruleRefExpr{
											pos:  position{line: 1710, col: 15, offset: 62168},
											name: "CommentBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1711, col: 15, offset: 62195},
											name: "LiteralBlock",
										},
										&ruleRefExpr{
											pos:  position{line: 1712, col: 15, offset: 62223},
											name: "RawParagraph",
										},
										&ruleRefExpr{
											pos:  position{line: 1713, col: 15, offset: 62250},
											name: "StandaloneAttributes",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FencedBlock",
			pos:  position{line: 1720, col: 1, offset: 62507},
			expr: &actionExpr{
				pos: position{line: 1720, col: 16, offset: 62522},
				run: (*parser).callonFencedBlock1,
				expr: &seqExpr{
					pos: position{line: 1720, col: 16, offset: 62522},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1720, col: 16, offset: 62522},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1720, col: 27, offset: 62533},
								expr: &ruleRefExpr{
									pos:  position{line: 1720, col: 28, offset: 62534},
									name: "BlockAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1720, col: 46, offset: 62552},
							name: "FencedBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1720, col: 72, offset: 62578},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1720, col: 81, offset: 62587},
								name: "FencedBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1720, col: 104, offset: 62610},
							name: "FencedBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "FencedBlockDelimiter",
			pos:  position{line: 1724, col: 1, offset: 62708},
			expr: &seqExpr{
				pos: position{line: 1724, col: 25, offset: 62732},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1724, col: 25, offset: 62732},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1724, col: 31, offset: 62738},
						expr: &ruleRefExpr{
							pos:  position{line: 1724, col: 31, offset: 62738},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1724, col: 38, offset: 62745},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "FencedBlockStartDelimiter",
			pos:  position{line: 1726, col: 1, offset: 62805},
			expr: &seqExpr{
				pos: position{line: 1726, col: 30, offset: 62834},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1726, col: 30, offset: 62834},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1726, col: 36, offset: 62840},
						expr: &ruleRefExpr{
							pos:  position{line: 1726, col: 36, offset: 62840},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1726, col: 43, offset: 62847},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "FencedBlockEndDelimiter",
			pos:  position{line: 1728, col: 1, offset: 62852},
			expr: &choiceExpr{
				pos: position{line: 1728, col: 28, offset: 62879},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1728, col: 29, offset: 62880},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1728, col: 29, offset: 62880},
								val:        "```",
								ignoreCase: false,
								want:       "\"```\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1728, col: 35, offset: 62886},
								expr: &ruleRefExpr{
									pos:  position{line: 1728, col: 35, offset: 62886},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1728, col: 42, offset: 62893},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1728, col: 49, offset: 62900},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "FencedBlockRawContent",
			pos:  position{line: 1730, col: 1, offset: 62905},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1730, col: 26, offset: 62930},
				expr: &actionExpr{
					pos: position{line: 1730, col: 27, offset: 62931},
					run: (*parser).callonFencedBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1730, col: 27, offset: 62931},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1730, col: 27, offset: 62931},
								expr: &ruleRefExpr{
									pos:  position{line: 1730, col: 28, offset: 62932},
									name: "FencedBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1730, col: 52, offset: 62956},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1730, col: 58, offset: 62962},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListingBlock",
			pos:  position{line: 1737, col: 1, offset: 63196},
			expr: &actionExpr{
				pos: position{line: 1737, col: 17, offset: 63212},
				run: (*parser).callonListingBlock1,
				expr: &seqExpr{
					pos: position{line: 1737, col: 17, offset: 63212},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1737, col: 17, offset: 63212},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1737, col: 28, offset: 63223},
								expr: &ruleRefExpr{
									pos:  position{line: 1737, col: 29, offset: 63224},
									name: "BlockAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1737, col: 47, offset: 63242},
							name: "ListingBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1737, col: 74, offset: 63269},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1737, col: 83, offset: 63278},
								name: "ListingBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1737, col: 107, offset: 63302},
							name: "ListingBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "ListingBlockDelimiter",
			pos:  position{line: 1741, col: 1, offset: 63402},
			expr: &seqExpr{
				pos: position{line: 1741, col: 26, offset: 63427},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1741, col: 26, offset: 63427},
						val:        "----",
						ignoreCase: false,
						want:       "\"----\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1741, col: 33, offset: 63434},
						expr: &ruleRefExpr{
							pos:  position{line: 1741, col: 33, offset: 63434},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1741, col: 40, offset: 63441},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ListingBlockStartDelimiter",
			pos:  position{line: 1743, col: 1, offset: 63446},
			expr: &seqExpr{
				pos: position{line: 1743, col: 31, offset: 63476},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1743, col: 31, offset: 63476},
						val:        "----",
						ignoreCase: false,
						want:       "\"----\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1743, col: 38, offset: 63483},
						expr: &ruleRefExpr{
							pos:  position{line: 1743, col: 38, offset: 63483},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1743, col: 45, offset: 63490},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ListingBlockEndDelimiter",
			pos:  position{line: 1745, col: 1, offset: 63495},
			expr: &choiceExpr{
				pos: position{line: 1745, col: 29, offset: 63523},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1745, col: 30, offset: 63524},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1745, col: 30, offset: 63524},
								val:        "----",
								ignoreCase: false,
								want:       "\"----\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1745, col: 37, offset: 63531},
								expr: &ruleRefExpr{
									pos:  position{line: 1745, col: 37, offset: 63531},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1745, col: 44, offset: 63538},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1745, col: 51, offset: 63545},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "ListingBlockRawContent",
			pos:  position{line: 1747, col: 1, offset: 63550},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1747, col: 27, offset: 63576},
				expr: &actionExpr{
					pos: position{line: 1747, col: 28, offset: 63577},
					run: (*parser).callonListingBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1747, col: 28, offset: 63577},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1747, col: 28, offset: 63577},
								expr: &ruleRefExpr{
									pos:  position{line: 1747, col: 29, offset: 63578},
									name: "ListingBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1747, col: 54, offset: 63603},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1747, col: 60, offset: 63609},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlock",
			pos:  position{line: 1754, col: 1, offset: 63841},
			expr: &actionExpr{
				pos: position{line: 1754, col: 15, offset: 63855},
				run: (*parser).callonVerseBlock1,
				expr: &seqExpr{
					pos: position{line: 1754, col: 15, offset: 63855},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1754, col: 15, offset: 63855},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1754, col: 26, offset: 63866},
								expr: &ruleRefExpr{
									pos:  position{line: 1754, col: 27, offset: 63867},
									name: "BlockAttributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1755, col: 5, offset: 63890},
							run: (*parser).callonVerseBlock6,
						},
						&ruleRefExpr{
							pos:  position{line: 1759, col: 5, offset: 64051},
							name: "QuoteBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1759, col: 30, offset: 64076},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1759, col: 39, offset: 64085},
								name: "VerseBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1759, col: 61, offset: 64107},
							name: "QuoteBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "VerseBlockRawContent",
			pos:  position{line: 1763, col: 1, offset: 64211},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1763, col: 25, offset: 64235},
				expr: &actionExpr{
					pos: position{line: 1763, col: 26, offset: 64236},
					run: (*parser).callonVerseBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1763, col: 26, offset: 64236},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1763, col: 26, offset: 64236},
								expr: &ruleRefExpr{
									pos:  position{line: 1763, col: 27, offset: 64237},
									name: "QuoteBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1763, col: 50, offset: 64260},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1763, col: 56, offset: 64266},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlock",
			pos:  position{line: 1770, col: 1, offset: 64504},
			expr: &actionExpr{
				pos: position{line: 1770, col: 21, offset: 64524},
				run: (*parser).callonPassthroughBlock1,
				expr: &seqExpr{
					pos: position{line: 1770, col: 21, offset: 64524},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1770, col: 21, offset: 64524},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1770, col: 32, offset: 64535},
								expr: &ruleRefExpr{
									pos:  position{line: 1770, col: 33, offset: 64536},
									name: "BlockAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1770, col: 51, offset: 64554},
							name: "PassthroughBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1770, col: 82, offset: 64585},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1770, col: 91, offset: 64594},
								name: "PassthroughBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1770, col: 119, offset: 64622},
							name: "PassthroughBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "PassthroughBlockDelimiter",
			pos:  position{line: 1774, col: 1, offset: 64730},
			expr: &seqExpr{
				pos: position{line: 1774, col: 30, offset: 64759},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1774, col: 30, offset: 64759},
						val:        "++++",
						ignoreCase: false,
						want:       "\"++++\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1774, col: 37, offset: 64766},
						expr: &ruleRefExpr{
							pos:  position{line: 1774, col: 37, offset: 64766},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1774, col: 44, offset: 64773},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "PassthroughBlockStartDelimiter",
			pos:  position{line: 1776, col: 1, offset: 64778},
			expr: &seqExpr{
				pos: position{line: 1776, col: 35, offset: 64812},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1776, col: 35, offset: 64812},
						val:        "++++",
						ignoreCase: false,
						want:       "\"++++\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1776, col: 42, offset: 64819},
						expr: &ruleRefExpr{
							pos:  position{line: 1776, col: 42, offset: 64819},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1776, col: 49, offset: 64826},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "PassthroughBlockEndDelimiter",
			pos:  position{line: 1778, col: 1, offset: 64831},
			expr: &choiceExpr{
				pos: position{line: 1778, col: 33, offset: 64863},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1778, col: 34, offset: 64864},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1778, col: 34, offset: 64864},
								val:        "++++",
								ignoreCase: false,
								want:       "\"++++\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1778, col: 41, offset: 64871},
								expr: &ruleRefExpr{
									pos:  position{line: 1778, col: 41, offset: 64871},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1778, col: 48, offset: 64878},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1778, col: 55, offset: 64885},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "PassthroughBlockRawContent",
			pos:  position{line: 1780, col: 1, offset: 64890},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1780, col: 31, offset: 64920},
				expr: &actionExpr{
					pos: position{line: 1780, col: 32, offset: 64921},
					run: (*parser).callonPassthroughBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1780, col: 32, offset: 64921},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1780, col: 32, offset: 64921},
								expr: &ruleRefExpr{
									pos:  position{line: 1780, col: 33, offset: 64922},
									name: "PassthroughBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1780, col: 62, offset: 64951},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1780, col: 68, offset: 64957},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CommentBlockDelimiter",
			pos:  position{line: 1787, col: 1, offset: 65191},
			expr: &seqExpr{
				pos: position{line: 1787, col: 26, offset: 65216},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1787, col: 26, offset: 65216},
						val:        "////",
						ignoreCase: false,
						want:       "\"////\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1787, col: 33, offset: 65223},
						expr: &ruleRefExpr{
							pos:  position{line: 1787, col: 33, offset: 65223},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1787, col: 40, offset: 65230},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "CommentBlockStartDelimiter",
			pos:  position{line: 1789, col: 1, offset: 65235},
			expr: &seqExpr{
				pos: position{line: 1789, col: 31, offset: 65265},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1789, col: 31, offset: 65265},
						val:        "////",
						ignoreCase: false,
						want:       "\"////\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1789, col: 38, offset: 65272},
						expr: &ruleRefExpr{
							pos:  position{line: 1789, col: 38, offset: 65272},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1789, col: 45, offset: 65279},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "CommentBlockEndDelimiter",
			pos:  position{line: 1791, col: 1, offset: 65284},
			expr: &choiceExpr{
				pos: position{line: 1791, col: 29, offset: 65312},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1791, col: 30, offset: 65313},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1791, col: 30, offset: 65313},
								val:        "////",
								ignoreCase: false,
								want:       "\"////\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1791, col: 37, offset: 65320},
								expr: &ruleRefExpr{
									pos:  position{line: 1791, col: 37, offset: 65320},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1791, col: 44, offset: 65327},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1791, col: 51, offset: 65334},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "CommentBlock",
			pos:  position{line: 1793, col: 1, offset: 65339},
			expr: &actionExpr{
				pos: position{line: 1793, col: 17, offset: 65355},
				run: (*parser).callonCommentBlock1,
				expr: &seqExpr{
					pos: position{line: 1793, col: 17, offset: 65355},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1793, col: 17, offset: 65355},
							name: "CommentBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1793, col: 44, offset: 65382},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1793, col: 53, offset: 65391},
								name: "CommentBlockRawContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1793, col: 78, offset: 65416},
							name: "CommentBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "CommentBlockRawContent",
			pos:  position{line: 1797, col: 1, offset: 65509},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1797, col: 27, offset: 65535},
				expr: &actionExpr{
					pos: position{line: 1797, col: 28, offset: 65536},
					run: (*parser).callonCommentBlockRawContent2,
					expr: &seqExpr{
						pos: position{line: 1797, col: 28, offset: 65536},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1797, col: 28, offset: 65536},
								expr: &ruleRefExpr{
									pos:  position{line: 1797, col: 29, offset: 65537},
									name: "CommentBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1797, col: 54, offset: 65562},
								label: "line",
								expr: &ruleRefExpr{
									pos:  position{line: 1797, col: 60, offset: 65568},
									name: "RawLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1801, col: 1, offset: 65606},
			expr: &actionExpr{
				pos: position{line: 1801, col: 22, offset: 65627},
				run: (*parser).callonSingleLineComment1,
				expr: &seqExpr{
					pos: position{line: 1801, col: 22, offset: 65627},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1801, col: 22, offset: 65627},
							expr: &ruleRefExpr{
								pos:  position{line: 1801, col: 23, offset: 65628},
								name: "CommentBlockDelimiter",
							},
						},
						&litMatcher{
							pos:        position{line: 1801, col: 45, offset: 65650},
							val:        "//",
							ignoreCase: false,
							want:       "\"//\"",
						},
						&labeledExpr{
							pos:   position{line: 1801, col: 50, offset: 65655},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1801, col: 59, offset: 65664},
								name: "SingleLineCommentContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1801, col: 85, offset: 65690},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SingleLineCommentContent",
			pos:  position{line: 1805, col: 1, offset: 65755},
			expr: &actionExpr{
				pos: position{line: 1805, col: 29, offset: 65783},
				run: (*parser).callonSingleLineCommentContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1805, col: 29, offset: 65783},
					expr: &charClassMatcher{
						pos:        position{line: 1805, col: 29, offset: 65783},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "InlineMacros",
			pos:  position{line: 1813, col: 1, offset: 66072},
			expr: &choiceExpr{
				pos: position{line: 1813, col: 17, offset: 66088},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1813, col: 17, offset: 66088},
						name: "InlineIcon",
					},
					&ruleRefExpr{
						pos:  position{line: 1814, col: 19, offset: 66117},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1815, col: 19, offset: 66148},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1816, col: 19, offset: 66172},
						name: "InlinePassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1817, col: 19, offset: 66209},
						name: "InlineFootnote",
					},
					&ruleRefExpr{
						pos:  position{line: 1818, col: 19, offset: 66243},
						name: "CrossReference",
					},
					&ruleRefExpr{
						pos:  position{line: 1819, col: 19, offset: 66277},
						name: "InlineUserMacro",
					},
					&ruleRefExpr{
						pos:  position{line: 1820, col: 19, offset: 66312},
						name: "InlineElementID",
					},
					&ruleRefExpr{
						pos:  position{line: 1821, col: 19, offset: 66346},
						name: "ConcealedIndexTerm",
					},
					&ruleRefExpr{
						pos:  position{line: 1822, col: 19, offset: 66383},
						name: "IndexTerm",
					},
				},
			},
		},
		{
			name: "ElementPlaceHolder",
			pos:  position{line: 1824, col: 1, offset: 66394},
			expr: &actionExpr{
				pos: position{line: 1824, col: 23, offset: 66416},
				run: (*parser).callonElementPlaceHolder1,
				expr: &seqExpr{
					pos: position{line: 1824, col: 23, offset: 66416},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1824, col: 23, offset: 66416},
							val:        "�",
							ignoreCase: false,
							want:       "\"�\"",
						},
						&labeledExpr{
							pos:   position{line: 1824, col: 32, offset: 66425},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1824, col: 37, offset: 66430},
								run: (*parser).callonElementPlaceHolder5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1824, col: 37, offset: 66430},
									expr: &charClassMatcher{
										pos:        position{line: 1824, col: 37, offset: 66430},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1824, col: 76, offset: 66469},
							val:        "�",
							ignoreCase: false,
							want:       "\"�\"",
						},
					},
				},
			},
		},
		{
			name: "InlinePassthroughSubs",
			pos:  position{line: 1829, col: 1, offset: 66621},
			expr: &seqExpr{
				pos: position{line: 1830, col: 5, offset: 66651},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1830, col: 5, offset: 66651},
						expr: &choiceExpr{
							pos: position{line: 1830, col: 6, offset: 66652},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1830, col: 6, offset: 66652},
									name: "InlinePassthrough",
								},
								&ruleRefExpr{
									pos:  position{line: 1831, col: 11, offset: 66681},
									name: "InlineWord",
								},
								&ruleRefExpr{
									pos:  position{line: 1832, col: 11, offset: 66742},
									name: "ElementPlaceHolder",
								},
								&oneOrMoreExpr{
									pos: position{line: 1833, col: 11, offset: 66771},
									expr: &ruleRefExpr{
										pos:  position{line: 1833, col: 11, offset: 66771},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1834, col: 11, offset: 66789},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1835, col: 11, offset: 66807},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1835, col: 21, offset: 66817},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "SpecialCharacterSubs",
			pos:  position{line: 1838, col: 1, offset: 66938},
			expr: &seqExpr{
				pos: position{line: 1839, col: 5, offset: 66967},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1839, col: 5, offset: 66967},
						expr: &choiceExpr{
							pos: position{line: 1839, col: 6, offset: 66968},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1839, col: 6, offset: 66968},
									name: "InlineWord",
								},
								&ruleRefExpr{
									pos:  position{line: 1840, col: 11, offset: 67029},
									name: "SpecialCharacter",
								},
								&ruleRefExpr{
									pos:  position{line: 1841, col: 11, offset: 67056},
									name: "ElementPlaceHolder",
								},
								&oneOrMoreExpr{
									pos: position{line: 1842, col: 11, offset: 67085},
									expr: &ruleRefExpr{
										pos:  position{line: 1842, col: 11, offset: 67085},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1843, col: 11, offset: 67102},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1844, col: 11, offset: 67120},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1844, col: 21, offset: 67130},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "QuotedTextSubs",
			pos:  position{line: 1847, col: 1, offset: 67184},
			expr: &seqExpr{
				pos: position{line: 1848, col: 5, offset: 67207},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1848, col: 5, offset: 67207},
						expr: &choiceExpr{
							pos: position{line: 1848, col: 6, offset: 67208},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1848, col: 6, offset: 67208},
									name: "InlineWord",
								},
								&oneOrMoreExpr{
									pos: position{line: 1849, col: 11, offset: 67269},
									expr: &ruleRefExpr{
										pos:  position{line: 1849, col: 11, offset: 67269},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1850, col: 11, offset: 67287},
									name: "QuotedText",
								},
								&ruleRefExpr{
									pos:  position{line: 1851, col: 11, offset: 67309},
									name: "QuotedString",
								},
								&ruleRefExpr{
									pos:  position{line: 1852, col: 11, offset: 67332},
									name: "ElementPlaceHolder",
								},
								&ruleRefExpr{
									pos:  position{line: 1853, col: 11, offset: 67361},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1854, col: 11, offset: 67379},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1854, col: 21, offset: 67389},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "AttributeSubs",
			pos:  position{line: 1857, col: 1, offset: 67447},
			expr: &seqExpr{
				pos: position{line: 1858, col: 5, offset: 67469},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1858, col: 5, offset: 67469},
						expr: &choiceExpr{
							pos: position{line: 1858, col: 6, offset: 67470},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1858, col: 6, offset: 67470},
									name: "InlineWord",
								},
								&oneOrMoreExpr{
									pos: position{line: 1859, col: 11, offset: 67531},
									expr: &ruleRefExpr{
										pos:  position{line: 1859, col: 11, offset: 67531},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1860, col: 11, offset: 67549},
									name: "AttributeSubstitution",
								},
								&ruleRefExpr{
									pos:  position{line: 1861, col: 11, offset: 67581},
									name: "ElementPlaceHolder",
								},
								&ruleRefExpr{
									pos:  position{line: 1862, col: 11, offset: 67610},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1863, col: 11, offset: 67628},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1863, col: 21, offset: 67638},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "InlineMacroSubs",
			pos:  position{line: 1866, col: 1, offset: 67692},
			expr: &seqExpr{
				pos: position{line: 1867, col: 5, offset: 67716},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1867, col: 5, offset: 67716},
						expr: &choiceExpr{
							pos: position{line: 1867, col: 6, offset: 67717},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1867, col: 6, offset: 67717},
									name: "InlineWord",
								},
								&oneOrMoreExpr{
									pos: position{line: 1868, col: 11, offset: 67778},
									expr: &ruleRefExpr{
										pos:  position{line: 1868, col: 11, offset: 67778},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1869, col: 11, offset: 67796},
									name: "InlineMacros",
								},
								&ruleRefExpr{
									pos:  position{line: 1870, col: 11, offset: 67819},
									name: "ElementPlaceHolder",
								},
								&ruleRefExpr{
									pos:  position{line: 1871, col: 11, offset: 67848},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1872, col: 11, offset: 67866},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1872, col: 21, offset: 67876},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "MarkdownQuoteMacroSubs",
			pos:  position{line: 1875, col: 1, offset: 67956},
			expr: &actionExpr{
				pos: position{line: 1875, col: 27, offset: 67982},
				run: (*parser).callonMarkdownQuoteMacroSubs1,
				expr: &seqExpr{
					pos: position{line: 1875, col: 27, offset: 67982},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1875, col: 27, offset: 67982},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1875, col: 33, offset: 67988},
								expr: &ruleRefExpr{
									pos:  position{line: 1875, col: 34, offset: 67989},
									name: "MarkdownQuoteLine",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1875, col: 54, offset: 68009},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "MarkdownQuoteLine",
			pos:  position{line: 1879, col: 1, offset: 68076},
			expr: &actionExpr{
				pos: position{line: 1880, col: 5, offset: 68102},
				run: (*parser).callonMarkdownQuoteLine1,
				expr: &seqExpr{
					pos: position{line: 1880, col: 5, offset: 68102},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1880, col: 5, offset: 68102},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1880, col: 14, offset: 68111},
								expr: &choiceExpr{
									pos: position{line: 1880, col: 15, offset: 68112},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1880, col: 15, offset: 68112},
											name: "InlineWord",
										},
										&oneOrMoreExpr{
											pos: position{line: 1881, col: 11, offset: 68173},
											expr: &ruleRefExpr{
												pos:  position{line: 1881, col: 11, offset: 68173},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1882, col: 11, offset: 68191},
											name: "InlineMacros",
										},
										&ruleRefExpr{
											pos:  position{line: 1883, col: 11, offset: 68214},
											name: "ElementPlaceHolder",
										},
										&ruleRefExpr{
											pos:  position{line: 1884, col: 11, offset: 68243},
											name: "AnyChar",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1884, col: 21, offset: 68253},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "MarkdownQuoteAttribution",
			pos:  position{line: 1888, col: 1, offset: 68324},
			expr: &actionExpr{
				pos: position{line: 1888, col: 29, offset: 68352},
				run: (*parser).callonMarkdownQuoteAttribution1,
				expr: &seqExpr{
					pos: position{line: 1888, col: 29, offset: 68352},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1888, col: 29, offset: 68352},
							val:        "-- ",
							ignoreCase: false,
							want:       "\"-- \"",
						},
						&labeledExpr{
							pos:   position{line: 1888, col: 35, offset: 68358},
							label: "author",
							expr: &actionExpr{
								pos: position{line: 1888, col: 43, offset: 68366},
								run: (*parser).callonMarkdownQuoteAttribution5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1888, col: 44, offset: 68367},
									expr: &charClassMatcher{
										pos:        position{line: 1888, col: 44, offset: 68367},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1890, col: 8, offset: 68417},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ReplacementSubs",
			pos:  position{line: 1895, col: 1, offset: 68504},
			expr: &seqExpr{
				pos: position{line: 1896, col: 5, offset: 68528},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1896, col: 5, offset: 68528},
						expr: &choiceExpr{
							pos: position{line: 1896, col: 6, offset: 68529},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1896, col: 6, offset: 68529},
									name: "InlineWord",
								},
								&oneOrMoreExpr{
									pos: position{line: 1897, col: 11, offset: 68590},
									expr: &ruleRefExpr{
										pos:  position{line: 1897, col: 11, offset: 68590},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1898, col: 11, offset: 68608},
									name: "Symbol",
								},
								&ruleRefExpr{
									pos:  position{line: 1899, col: 11, offset: 68626},
									name: "ElementPlaceHolder",
								},
								&ruleRefExpr{
									pos:  position{line: 1900, col: 11, offset: 68655},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1901, col: 11, offset: 68673},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1901, col: 21, offset: 68683},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "PostReplacementSubs",
			pos:  position{line: 1905, col: 1, offset: 68831},
			expr: &seqExpr{
				pos: position{line: 1905, col: 24, offset: 68854},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1905, col: 24, offset: 68854},
						expr: &choiceExpr{
							pos: position{line: 1906, col: 5, offset: 68860},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1906, col: 5, offset: 68860},
									name: "InlineWord",
								},
								&ruleRefExpr{
									pos:  position{line: 1907, col: 7, offset: 68917},
									name: "ElementPlaceHolder",
								},
								&ruleRefExpr{
									pos:  position{line: 1908, col: 7, offset: 68942},
									name: "LineBreak",
								},
								&oneOrMoreExpr{
									pos: position{line: 1909, col: 7, offset: 68985},
									expr: &ruleRefExpr{
										pos:  position{line: 1909, col: 7, offset: 68985},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1910, col: 7, offset: 68999},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1911, col: 7, offset: 69013},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1911, col: 17, offset: 69023},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "CalloutSubs",
			pos:  position{line: 1914, col: 1, offset: 69080},
			expr: &seqExpr{
				pos: position{line: 1915, col: 5, offset: 69100},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1915, col: 5, offset: 69100},
						expr: &choiceExpr{
							pos: position{line: 1915, col: 6, offset: 69101},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1915, col: 6, offset: 69101},
									name: "InlineWord",
								},
								&ruleRefExpr{
									pos:  position{line: 1916, col: 11, offset: 69162},
									name: "ElementPlaceHolder",
								},
								&oneOrMoreExpr{
									pos: position{line: 1917, col: 11, offset: 69191},
									expr: &ruleRefExpr{
										pos:  position{line: 1917, col: 11, offset: 69191},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1918, col: 11, offset: 69208},
									name: "Callout",
								},
								&ruleRefExpr{
									pos:  position{line: 1919, col: 11, offset: 69226},
									name: "AnyChar",
								},
								&ruleRefExpr{
									pos:  position{line: 1920, col: 11, offset: 69244},
									name: "Newline",
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1920, col: 21, offset: 69254},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "NoneSubs",
			pos:  position{line: 1923, col: 1, offset: 69306},
			expr: &seqExpr{
				pos: position{line: 1923, col: 13, offset: 69318},
				exprs: []interface{}{
					&zeroOrMoreExpr{
						pos: position{line: 1923, col: 13, offset: 69318},
						expr: &choiceExpr{
							pos: position{line: 1924, col: 5, offset: 69324},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1924, col: 5, offset: 69324},
									name: "ElementPlaceHolder",
								},
								&actionExpr{
									pos: position{line: 1925, col: 8, offset: 69351},
									run: (*parser).callonNoneSubs5,
									expr: &seqExpr{
										pos: position{line: 1925, col: 8, offset: 69351},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1925, col: 8, offset: 69351},
												expr: &ruleRefExpr{
													pos:  position{line: 1925, col: 9, offset: 69352},
													name: "EOF",
												},
											},
											&zeroOrMoreExpr{
												pos: position{line: 1925, col: 13, offset: 69356},
												expr: &charClassMatcher{
													pos:        position{line: 1925, col: 13, offset: 69356},
													val:        "[^\\r\\n]",
													chars:      []rune{'\r', '\n'},
													ignoreCase: false,
													inverted:   true,
												},
											},
											&ruleRefExpr{
												pos:  position{line: 1925, col: 22, offset: 69365},
												name: "EOL",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1927, col: 10, offset: 69470},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "Table",
			pos:  position{line: 1932, col: 1, offset: 69663},
			expr: &actionExpr{
				pos: position{line: 1932, col: 10, offset: 69672},
				run: (*parser).callonTable1,
				expr: &seqExpr{
					pos: position{line: 1932, col: 10, offset: 69672},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1932, col: 10, offset: 69672},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1932, col: 21, offset: 69683},
								expr: &ruleRefExpr{
									pos:  position{line: 1932, col: 22, offset: 69684},
									name: "BlockAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1932, col: 40, offset: 69702},
							name: "TableDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1933, col: 5, offset: 69721},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 1933, col: 12, offset: 69728},
								expr: &ruleRefExpr{
									pos:  position{line: 1933, col: 13, offset: 69729},
									name: "TableLineHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1934, col: 5, offset: 69751},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1934, col: 11, offset: 69757},
								expr: &ruleRefExpr{
									pos:  position{line: 1934, col: 12, offset: 69758},
									name: "TableLine",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1935, col: 6, offset: 69775},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1935, col: 6, offset: 69775},
									name: "TableDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1935, col: 23, offset: 69792},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TableCellSeparator",
			pos:  position{line: 1939, col: 1, offset: 69911},
			expr: &seqExpr{
				pos: position{line: 1939, col: 23, offset: 69933},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1939, col: 23, offset: 69933},
						val:        "|",
						ignoreCase: false,
						want:       "\"|\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1939, col: 27, offset: 69937},
						expr: &ruleRefExpr{
							pos:  position{line: 1939, col: 27, offset: 69937},
							name: "Space",
						},
					},
				},
			},
		},
		{
			name: "TableDelimiter",
			pos:  position{line: 1941, col: 1, offset: 69945},
			expr: &seqExpr{
				pos: position{line: 1941, col: 19, offset: 69963},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1941, col: 19, offset: 69963},
						val:        "|===",
						ignoreCase: false,
						want:       "\"|===\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1941, col: 26, offset: 69970},
						expr: &ruleRefExpr{
							pos:  position{line: 1941, col: 26, offset: 69970},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1941, col: 33, offset: 69977},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "TableLineHeader",
			pos:  position{line: 1944, col: 1, offset: 70045},
			expr: &actionExpr{
				pos: position{line: 1944, col: 20, offset: 70064},
				run: (*parser).callonTableLineHeader1,
				expr: &seqExpr{
					pos: position{line: 1944, col: 20, offset: 70064},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1944, col: 20, offset: 70064},
							expr: &ruleRefExpr{
								pos:  position{line: 1944, col: 21, offset: 70065},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1944, col: 36, offset: 70080},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1944, col: 42, offset: 70086},
								expr: &ruleRefExpr{
									pos:  position{line: 1944, col: 43, offset: 70087},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1944, col: 55, offset: 70099},
							name: "EOL",
						},
						&ruleRefExpr{
							pos:  position{line: 1944, col: 59, offset: 70103},
							name: "BlankLine",
						},
					},
				},
			},
		},
		{
			name: "TableLine",
			pos:  position{line: 1948, col: 1, offset: 70171},
			expr: &actionExpr{
				pos: position{line: 1948, col: 14, offset: 70184},
				run: (*parser).callonTableLine1,
				expr: &seqExpr{
					pos: position{line: 1948, col: 14, offset: 70184},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1948, col: 14, offset: 70184},
							expr: &ruleRefExpr{
								pos:  position{line: 1948, col: 15, offset: 70185},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1948, col: 30, offset: 70200},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1948, col: 36, offset: 70206},
								expr: &ruleRefExpr{
									pos:  position{line: 1948, col: 37, offset: 70207},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1948, col: 49, offset: 70219},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1948, col: 53, offset: 70223},
							expr: &ruleRefExpr{
								pos:  position{line: 1948, col: 53, offset: 70223},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "TableCell",
			pos:  position{line: 1952, col: 1, offset: 70292},
			expr: &actionExpr{
				pos: position{line: 1952, col: 14, offset: 70305},
				run: (*parser).callonTableCell1,
				expr: &seqExpr{
					pos: position{line: 1952, col: 14, offset: 70305},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1952, col: 14, offset: 70305},
							name: "TableCellSeparator",
						},
						&labeledExpr{
							pos:   position{line: 1952, col: 33, offset: 70324},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1952, col: 42, offset: 70333},
								expr: &seqExpr{
									pos: position{line: 1952, col: 43, offset: 70334},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1952, col: 43, offset: 70334},
											expr: &ruleRefExpr{
												pos:  position{line: 1952, col: 44, offset: 70335},
												name: "TableCellSeparator",
											},
										},
										&notExpr{
											pos: position{line: 1952, col: 63, offset: 70354},
											expr: &ruleRefExpr{
												pos:  position{line: 1952, col: 64, offset: 70355},
												name: "EOL",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 1952, col: 68, offset: 70359},
											expr: &ruleRefExpr{
												pos:  position{line: 1952, col: 68, offset: 70359},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1952, col: 75, offset: 70366},
											name: "InlineElement",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1952, col: 89, offset: 70380},
											expr: &ruleRefExpr{
												pos:  position{line: 1952, col: 89, offset: 70380},
												name: "Space",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralBlock",
			pos:  position{line: 1959, col: 1, offset: 70706},
			expr: &choiceExpr{
				pos: position{line: 1959, col: 17, offset: 70722},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1959, col: 17, offset: 70722},
						name: "ParagraphWithLiteralAttribute",
					},
					&ruleRefExpr{
						pos:  position{line: 1959, col: 49, offset: 70754},
						name: "ParagraphWithHeadingSpaces",
					},
					&ruleRefExpr{
						pos:  position{line: 1959, col: 78, offset: 70783},
						name: "ParagraphWithLiteralBlockDelimiter",
					},
				},
			},
		},
		{
			name: "LiteralBlockDelimiter",
			pos:  position{line: 1961, col: 1, offset: 70819},
			expr: &litMatcher{
				pos:        position{line: 1961, col: 26, offset: 70844},
				val:        "....",
				ignoreCase: false,
				want:       "\"....\"",
			},
		},
		{
			name: "ParagraphWithHeadingSpaces",
			pos:  position{line: 1964, col: 1, offset: 70916},
			expr: &actionExpr{
				pos: position{line: 1964, col: 31, offset: 70946},
				run: (*parser).callonParagraphWithHeadingSpaces1,
				expr: &seqExpr{
					pos: position{line: 1964, col: 31, offset: 70946},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1964, col: 31, offset: 70946},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1964, col: 42, offset: 70957},
								expr: &ruleRefExpr{
									pos:  position{line: 1964, col: 43, offset: 70958},
									name: "BlockAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1964, col: 61, offset: 70976},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1964, col: 68, offset: 70983},
								name: "ParagraphWithHeadingSpacesLines",
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithHeadingSpacesLines",
			pos:  position{line: 1969, col: 1, offset: 71213},
			expr: &actionExpr{
				pos: position{line: 1970, col: 5, offset: 71253},
				run: (*parser).callonParagraphWithHeadingSpacesLines1,
				expr: &seqExpr{
					pos: position{line: 1970, col: 5, offset: 71253},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1970, col: 5, offset: 71253},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 1970, col: 16, offset: 71264},
								name: "ParagraphWithHeadingSpacesLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1971, col: 5, offset: 71300},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1971, col: 16, offset: 71311},
								expr: &ruleRefExpr{
									pos:  position{line: 1971, col: 17, offset: 71312},
									name: "LiteralParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithHeadingSpacesLine",
			pos:  position{line: 1975, col: 1, offset: 71421},
			expr: &actionExpr{
				pos: position{line: 1975, col: 35, offset: 71455},
				run: (*parser).callonParagraphWithHeadingSpacesLine1,
				expr: &seqExpr{
					pos: position{line: 1975, col: 35, offset: 71455},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1975, col: 35, offset: 71455},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1975, col: 41, offset: 71461},
								run: (*parser).callonParagraphWithHeadingSpacesLine4,
								expr: &seqExpr{
									pos: position{line: 1975, col: 41, offset: 71461},
									exprs: []interface{}{
										&oneOrMoreExpr{
											pos: position{line: 1975, col: 41, offset: 71461},
											expr: &ruleRefExpr{
												pos:  position{line: 1975, col: 41, offset: 71461},
												name: "Space",
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 1975, col: 48, offset: 71468},
											expr: &charClassMatcher{
												pos:        position{line: 1975, col: 48, offset: 71468},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1977, col: 8, offset: 71534},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiter",
			pos:  position{line: 1982, col: 1, offset: 71674},
			expr: &actionExpr{
				pos: position{line: 1982, col: 39, offset: 71712},
				run: (*parser).callonParagraphWithLiteralBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1982, col: 39, offset: 71712},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1982, col: 39, offset: 71712},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1982, col: 50, offset: 71723},
								expr: &ruleRefExpr{
									pos:  position{line: 1982, col: 51, offset: 71724},
									name: "BlockAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1983, col: 9, offset: 71750},
							name: "LiteralBlockDelimiter",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1983, col: 31, offset: 71772},
							expr: &ruleRefExpr{
								pos:  position{line: 1983, col: 31, offset: 71772},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1983, col: 38, offset: 71779},
							name: "Newline",
						},
						&labeledExpr{
							pos:   position{line: 1983, col: 46, offset: 71787},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1983, col: 53, offset: 71794},
								name: "ParagraphWithLiteralBlockDelimiterLines",
							},
						},
						&choiceExpr{
							pos: position{line: 1983, col: 95, offset: 71836},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 1983, col: 96, offset: 71837},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1983, col: 96, offset: 71837},
											name: "LiteralBlockDelimiter",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1983, col: 118, offset: 71859},
											expr: &ruleRefExpr{
												pos:  position{line: 1983, col: 118, offset: 71859},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1983, col: 125, offset: 71866},
											name: "EOL",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1983, col: 132, offset: 71873},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLines",
			pos:  position{line: 1988, col: 1, offset: 72032},
			expr: &actionExpr{
				pos: position{line: 1988, col: 44, offset: 72075},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLines1,
				expr: &labeledExpr{
					pos:   position{line: 1988, col: 44, offset: 72075},
					label: "lines",
					expr: &zeroOrMoreExpr{
						pos: position{line: 1988, col: 50, offset: 72081},
						expr: &ruleRefExpr{
							pos:  position{line: 1988, col: 51, offset: 72082},
							name: "ParagraphWithLiteralBlockDelimiterLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLine",
			pos:  position{line: 1992, col: 1, offset: 72166},
			expr: &actionExpr{
				pos: position{line: 1993, col: 5, offset: 72221},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLine1,
				expr: &seqExpr{
					pos: position{line: 1993, col: 5, offset: 72221},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1993, col: 5, offset: 72221},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1993, col: 11, offset: 72227},
								run: (*parser).callonParagraphWithLiteralBlockDelimiterLine4,
								expr: &seqExpr{
									pos: position{line: 1993, col: 11, offset: 72227},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1993, col: 11, offset: 72227},
											expr: &ruleRefExpr{
												pos:  position{line: 1993, col: 12, offset: 72228},
												name: "LiteralBlockDelimiter",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 1993, col: 34, offset: 72250},
											expr: &charClassMatcher{
												pos:        position{line: 1993, col: 34, offset: 72250},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1995, col: 8, offset: 72316},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttribute",
			pos:  position{line: 2000, col: 1, offset: 72442},
			expr: &actionExpr{
				pos: position{line: 2001, col: 5, offset: 72480},
				run: (*parser).callonParagraphWithLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 2001, col: 5, offset: 72480},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2001, col: 5, offset: 72480},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 2001, col: 16, offset: 72491},
								expr: &ruleRefExpr{
									pos:  position{line: 2001, col: 17, offset: 72492},
									name: "BlockAttributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 2002, col: 5, offset: 72514},
							run: (*parser).callonParagraphWithLiteralAttribute6,
						},
						&labeledExpr{
							pos:   position{line: 2005, col: 5, offset: 72625},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 2005, col: 11, offset: 72631},
								expr: &ruleRefExpr{
									pos:  position{line: 2005, col: 12, offset: 72632},
									name: "LiteralParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralKind",
			pos:  position{line: 2009, col: 1, offset: 72769},
			expr: &actionExpr{
				pos: position{line: 2009, col: 16, offset: 72784},
				run: (*parser).callonLiteralKind1,
				expr: &litMatcher{
					pos:        position{line: 2009, col: 16, offset: 72784},
					val:        "literal",
					ignoreCase: false,
					want:       "\"literal\"",
				},
			},
		},
		{
			name: "LiteralParagraphLine",
			pos:  position{line: 2013, col: 1, offset: 72830},
			expr: &actionExpr{
				pos: position{line: 2013, col: 25, offset: 72854},
				run: (*parser).callonLiteralParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 2013, col: 25, offset: 72854},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2013, col: 25, offset: 72854},
							expr: &ruleRefExpr{
								pos:  position{line: 2013, col: 26, offset: 72855},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 2013, col: 36, offset: 72865},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 2013, col: 45, offset: 72874},
								run: (*parser).callonLiteralParagraphLine6,
								expr: &oneOrMoreExpr{
									pos: position{line: 2013, col: 45, offset: 72874},
									expr: &charClassMatcher{
										pos:        position{line: 2013, col: 45, offset: 72874},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2015, col: 4, offset: 72932},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IndexTerm",
			pos:  position{line: 2022, col: 1, offset: 73109},
			expr: &actionExpr{
				pos: position{line: 2022, col: 14, offset: 73122},
				run: (*parser).callonIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 2022, col: 14, offset: 73122},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2022, col: 14, offset: 73122},
							val:        "((",
							ignoreCase: false,
							want:       "\"((\"",
						},
						&labeledExpr{
							pos:   position{line: 2022, col: 19, offset: 73127},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 2022, col: 25, offset: 73133},
								name: "IndexTermContent",
							},
						},
						&litMatcher{
							pos:        position{line: 2022, col: 43, offset: 73151},
							val:        "))",
							ignoreCase: false,
							want:       "\"))\"",
						},
					},
				},
			},
		},
		{
			name: "IndexTermContent",
			pos:  position{line: 2026, col: 1, offset: 73216},
			expr: &actionExpr{
				pos: position{line: 2026, col: 21, offset: 73236},
				run: (*parser).callonIndexTermContent1,
				expr: &labeledExpr{
					pos:   position{line: 2026, col: 21, offset: 73236},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 2026, col: 30, offset: 73245},
						expr: &choiceExpr{
							pos: position{line: 2026, col: 31, offset: 73246},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 2026, col: 31, offset: 73246},
									name: "Word",
								},
								&ruleRefExpr{
									pos:  position{line: 2026, col: 38, offset: 73253},
									name: "QuotedString",
								},
								&ruleRefExpr{
									pos:  position{line: 2026, col: 53, offset: 73268},
									name: "QuotedText",
								},
								&ruleRefExpr{
									pos:  position{line: 2026, col: 66, offset: 73281},
									name: "Space",
								},
								&ruleRefExpr{
									pos:  position{line: 2026, col: 74, offset: 73289},
									name: "SpecialCharacter",
								},
								&ruleRefExpr{
									pos:  position{line: 2026, col: 93, offset: 73308},
									name: "ElementPlaceHolder",
								},
								&actionExpr{
									pos: position{line: 2026, col: 114, offset: 73329},
									run: (*parser).callonIndexTermContent11,
									expr: &seqExpr{
										pos: position{line: 2026, col: 115, offset: 73330},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 2026, col: 115, offset: 73330},
												expr: &litMatcher{
													pos:        position{line: 2026, col: 116, offset: 73331},
													val:        "))",
													ignoreCase: false,
													want:       "\"))\"",
												},
											},
											&anyMatcher{
												line: 2026, col: 121, offset: 73336,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTerm",
			pos:  position{line: 2032, col: 1, offset: 73442},
			expr: &actionExpr{
				pos: position{line: 2032, col: 23, offset: 73464},
				run: (*parser).callonConcealedIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 2032, col: 23, offset: 73464},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 2032, col: 23, offset: 73464},
							val:        "(((",
							ignoreCase: false,
							want:       "\"(((\"",
						},
						&labeledExpr{
							pos:   position{line: 2032, col: 29, offset: 73470},
							label: "term1",
							expr: &ruleRefExpr{
								pos:  position{line: 2032, col: 36, offset: 73477},
								name: "ConcealedIndexTermContent",
							},
						},
						&labeledExpr{
							pos:   position{line: 2033, col: 5, offset: 73509},
							label: "term2",
							expr: &zeroOrOneExpr{
								pos: position{line: 2033, col: 11, offset: 73515},
								expr: &actionExpr{
									pos: position{line: 2033, col: 12, offset: 73516},
									run: (*parser).callonConcealedIndexTerm8,
									expr: &seqExpr{
										pos: position{line: 2033, col: 12, offset: 73516},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 2033, col: 12, offset: 73516},
												expr: &ruleRefExpr{
													pos:  position{line: 2033, col: 12, offset: 73516},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 2033, col: 19, offset: 73523},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 2033, col: 23, offset: 73527},
												expr: &ruleRefExpr{
													pos:  position{line: 2033, col: 23, offset: 73527},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 2033, col: 30, offset: 73534},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 2033, col: 39, offset: 73543},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2034, col: 5, offset: 73601},
							label: "term3",
							expr: &zeroOrOneExpr{
								pos: position{line: 2034, col: 11, offset: 73607},
								expr: &actionExpr{
									pos: position{line: 2034, col: 12, offset: 73608},
									run: (*parser).callonConcealedIndexTerm19,
									expr: &seqExpr{
										pos: position{line: 2034, col: 12, offset: 73608},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 2034, col: 12, offset: 73608},
												expr: &ruleRefExpr{
													pos:  position{line: 2034, col: 12, offset: 73608},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 2034, col: 19, offset: 73615},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 2034, col: 23, offset: 73619},
												expr: &ruleRefExpr{
													pos:  position{line: 2034, col: 23, offset: 73619},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 2034, col: 30, offset: 73626},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 2034, col: 39, offset: 73635},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 2035, col: 5, offset: 73693},
							val:        ")))",
							ignoreCase: false,
							want:       "\")))\"",
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTermContent",
			pos:  position{line: 2039, col: 1, offset: 73772},
			expr: &actionExpr{
				pos: position{line: 2039, col: 30, offset: 73801},
				run: (*parser).callonConcealedIndexTermContent1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2039, col: 30, offset: 73801},
					expr: &choiceExpr{
						pos: position{line: 2039, col: 31, offset: 73802},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 2039, col: 31, offset: 73802},
								name: "Alphanum",
							},
							&ruleRefExpr{
								pos:  position{line: 2039, col: 42, offset: 73813},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "BlankLine",
			pos:  position{line: 2046, col: 1, offset: 73962},
			expr: &actionExpr{
				pos: position{line: 2046, col: 14, offset: 73975},
				run: (*parser).callonBlankLine1,
				expr: &seqExpr{
					pos: position{line: 2046, col: 14, offset: 73975},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 2046, col: 14, offset: 73975},
							expr: &ruleRefExpr{
								pos:  position{line: 2046, col: 15, offset: 73976},
								name: "EOF",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 2046, col: 19, offset: 73980},
							expr: &ruleRefExpr{
								pos:  position{line: 2046, col: 19, offset: 73980},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 2046, col: 26, offset: 73987},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "Symbol",
			pos:  position{line: 2054, col: 1, offset: 74132},
			expr: &choiceExpr{
				pos: position{line: 2054, col: 11, offset: 74142},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2054, col: 11, offset: 74142},
						name: "Apostrophe",
					},
					&ruleRefExpr{
						pos:  position{line: 2054, col: 24, offset: 74155},
						name: "Copyright",
					},
					&ruleRefExpr{
						pos:  position{line: 2054, col: 36, offset: 74167},
						name: "Trademark",
					},
					&ruleRefExpr{
						pos:  position{line: 2054, col: 48, offset: 74179},
						name: "Registered",
					},
					&ruleRefExpr{
						pos:  position{line: 2054, col: 61, offset: 74192},
						name: "Ellipsis",
					},
					&ruleRefExpr{
						pos:  position{line: 2054, col: 72, offset: 74203},
						name: "ImpliedApostrophe",
					},
				},
			},
		},
		{
			name: "Apostrophe",
			pos:  position{line: 2056, col: 1, offset: 74222},
			expr: &actionExpr{
				pos: position{line: 2056, col: 15, offset: 74236},
				run: (*parser).callonApostrophe1,
				expr: &litMatcher{
					pos:        position{line: 2056, col: 15, offset: 74236},
					val:        "`'",
					ignoreCase: false,
					want:       "\"`'\"",
				},
			},
		},
		{
			name: "Copyright",
			pos:  position{line: 2059, col: 1, offset: 74289},
			expr: &actionExpr{
				pos: position{line: 2059, col: 14, offset: 74302},
				run: (*parser).callonCopyright1,
				expr: &litMatcher{
					pos:        position{line: 2059, col: 14, offset: 74302},
					val:        "(C)",
					ignoreCase: false,
					want:       "\"(C)\"",
				},
			},
		},
		{
			name: "Trademark",
			pos:  position{line: 2062, col: 1, offset: 74356},
			expr: &actionExpr{
				pos: position{line: 2062, col: 14, offset: 74369},
				run: (*parser).callonTrademark1,
				expr: &litMatcher{
					pos:        position{line: 2062, col: 14, offset: 74369},
					val:        "(TM)",
					ignoreCase: false,
					want:       "\"(TM)\"",
				},
			},
		},
		{
			name: "Registered",
			pos:  position{line: 2065, col: 1, offset: 74424},
			expr: &actionExpr{
				pos: position{line: 2065, col: 15, offset: 74438},
				run: (*parser).callonRegistered1,
				expr: &litMatcher{
					pos:        position{line: 2065, col: 15, offset: 74438},
					val:        "(R)",
					ignoreCase: false,
					want:       "\"(R)\"",
				},
			},
		},
		{
			name: "Ellipsis",
			pos:  position{line: 2068, col: 1, offset: 74492},
			expr: &actionExpr{
				pos: position{line: 2068, col: 13, offset: 74504},
				run: (*parser).callonEllipsis1,
				expr: &litMatcher{
					pos:        position{line: 2068, col: 13, offset: 74504},
					val:        "...",
					ignoreCase: false,
					want:       "\"...\"",
				},
			},
		},
		{
			name: "ImpliedApostrophe",
			pos:  position{line: 2076, col: 1, offset: 74781},
			expr: &actionExpr{
				pos: position{line: 2076, col: 22, offset: 74802},
				run: (*parser).callonImpliedApostrophe1,
				expr: &seqExpr{
					pos: position{line: 2076, col: 22, offset: 74802},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 2076, col: 22, offset: 74802},
							name: "Alphanum",
						},
						&litMatcher{
							pos:        position{line: 2076, col: 31, offset: 74811},
							val:        "'",
							ignoreCase: false,
							want:       "\"'\"",
						},
						&andExpr{
							pos: position{line: 2076, col: 35, offset: 74815},
							expr: &charClassMatcher{
								pos:        position{line: 2076, col: 36, offset: 74816},
								val:        "[\\pL]",
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "SpecialCharacter",
			pos:  position{line: 2085, col: 1, offset: 75178},
			expr: &choiceExpr{
				pos: position{line: 2085, col: 21, offset: 75198},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2085, col: 21, offset: 75198},
						run: (*parser).callonSpecialCharacter2,
						expr: &ruleRefExpr{
							pos:  position{line: 2085, col: 21, offset: 75198},
							name: "InternalCrossReference",
						},
					},
					&actionExpr{
						pos: position{line: 2088, col: 9, offset: 75361},
						run: (*parser).callonSpecialCharacter4,
						expr: &choiceExpr{
							pos: position{line: 2088, col: 10, offset: 75362},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 2088, col: 10, offset: 75362},
									val:        "<",
									ignoreCase: false,
									want:       "\"<\"",
								},
								&litMatcher{
									pos:        position{line: 2088, col: 16, offset: 75368},
									val:        ">",
									ignoreCase: false,
									want:       "\">\"",
								},
								&litMatcher{
									pos:        position{line: 2088, col: 22, offset: 75374},
									val:        "&",
									ignoreCase: false,
									want:       "\"&\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Alphanum",
			pos:  position{line: 2095, col: 1, offset: 75552},
			expr: &charClassMatcher{
				pos:        position{line: 2095, col: 13, offset: 75564},
				val:        "[\\pL0-9]",
				ranges:     []rune{'0', '9'},
				classes:    []*unicode.RangeTable{rangeTable("L")},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Parenthesis",
			pos:  position{line: 2097, col: 1, offset: 75574},
			expr: &choiceExpr{
				pos: position{line: 2097, col: 16, offset: 75589},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2097, col: 16, offset: 75589},
						val:        "(",
						ignoreCase: false,
						want:       "\"(\"",
					},
					&litMatcher{
						pos:        position{line: 2097, col: 22, offset: 75595},
						val:        ")",
						ignoreCase: false,
						want:       "\")\"",
					},
					&litMatcher{
						pos:        position{line: 2097, col: 28, offset: 75601},
						val:        "[",
						ignoreCase: false,
						want:       "\"[\"",
					},
					&litMatcher{
						pos:        position{line: 2097, col: 34, offset: 75607},
						val:        "]",
						ignoreCase: false,
						want:       "\"]\"",
					},
					&litMatcher{
						pos:        position{line: 2097, col: 40, offset: 75613},
						val:        "{",
						ignoreCase: false,
						want:       "\"{\"",
					},
					&litMatcher{
						pos:        position{line: 2097, col: 46, offset: 75619},
						val:        "}",
						ignoreCase: false,
						want:       "\"}\"",
					},
				},
			},
		},
		{
			name: "Alphanums",
			pos:  position{line: 2099, col: 1, offset: 75625},
			expr: &actionExpr{
				pos: position{line: 2099, col: 14, offset: 75638},
				run: (*parser).callonAlphanums1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2099, col: 14, offset: 75638},
					expr: &charClassMatcher{
						pos:        position{line: 2099, col: 14, offset: 75638},
						val:        "[\\pL0-9]",
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Word",
			pos:  position{line: 2103, col: 1, offset: 75684},
			expr: &choiceExpr{
				pos: position{line: 2107, col: 5, offset: 76011},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2107, col: 5, offset: 76011},
						run: (*parser).callonWord2,
						expr: &seqExpr{
							pos: position{line: 2107, col: 5, offset: 76011},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2107, col: 5, offset: 76011},
									expr: &charClassMatcher{
										pos:        position{line: 2107, col: 5, offset: 76011},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 2107, col: 15, offset: 76021},
									expr: &choiceExpr{
										pos: position{line: 2107, col: 17, offset: 76023},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2107, col: 17, offset: 76023},
												val:        "[\\r\\n ,\\]]",
												chars:      []rune{'\r', '\n', ' ', ',', ']'},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 2107, col: 30, offset: 76036},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 2109, col: 9, offset: 76106},
						run: (*parser).callonWord10,
						expr: &seqExpr{
							pos: position{line: 2109, col: 9, offset: 76106},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2109, col: 9, offset: 76106},
									expr: &charClassMatcher{
										pos:        position{line: 2109, col: 9, offset: 76106},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 2109, col: 19, offset: 76116},
									expr: &seqExpr{
										pos: position{line: 2109, col: 20, offset: 76117},
										exprs: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2109, col: 20, offset: 76117},
												val:        "[=*_`]",
												chars:      []rune{'=', '*', '_', '`'},
												ignoreCase: false,
												inverted:   false,
											},
											&oneOrMoreExpr{
												pos: position{line: 2109, col: 27, offset: 76124},
												expr: &charClassMatcher{
													pos:        position{line: 2109, col: 27, offset: 76124},
													val:        "[\\pL0-9]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineWord",
			pos:  position{line: 2113, col: 1, offset: 76211},
			expr: &choiceExpr{
				pos: position{line: 2114, col: 5, offset: 76292},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 2114, col: 5, offset: 76292},
						run: (*parser).callonInlineWord2,
						expr: &seqExpr{
							pos: position{line: 2114, col: 5, offset: 76292},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 2114, col: 5, offset: 76292},
									expr: &charClassMatcher{
										pos:        position{line: 2114, col: 5, offset: 76292},
										val:        "[\\pL0-9,?!;]",
										chars:      []rune{',', '?', '!', ';'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 2114, col: 19, offset: 76306},
									expr: &choiceExpr{
										pos: position{line: 2114, col: 21, offset: 76308},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 2114, col: 21, offset: 76308},
												val:        "[\\r\\n ]",
												chars:      []rune{'\r', '\n', ' '},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 2114, col: 31, offset: 76318},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 2116, col: 9, offset: 76387},
						name: "Word",
					},
				},
			},
		},
		{
			name: "AnyChar",
			pos:  position{line: 2119, col: 1, offset: 76487},
			expr: &actionExpr{
				pos: position{line: 2119, col: 12, offset: 76498},
				run: (*parser).callonAnyChar1,
				expr: &charClassMatcher{
					pos:        position{line: 2119, col: 12, offset: 76498},
					val:        "[^\\r\\n]",
					chars:      []rune{'\r', '\n'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "FileLocation",
			pos:  position{line: 2123, col: 1, offset: 76563},
			expr: &actionExpr{
				pos: position{line: 2123, col: 17, offset: 76579},
				run: (*parser).callonFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 2123, col: 17, offset: 76579},
					label: "path",
					expr: &oneOrMoreExpr{
						pos: position{line: 2123, col: 22, offset: 76584},
						expr: &choiceExpr{
							pos: position{line: 2123, col: 23, offset: 76585},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 2123, col: 23, offset: 76585},
									name: "Filename",
								},
								&ruleRefExpr{
									pos:  position{line: 2123, col: 34, offset: 76596},
									name: "ElementPlaceHolder",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Location",
			pos:  position{line: 2127, col: 1, offset: 76677},
			expr: &actionExpr{
				pos: position{line: 2127, col: 13, offset: 76689},
				run: (*parser).callonLocation1,
				expr: &seqExpr{
					pos: position{line: 2127, col: 13, offset: 76689},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2127, col: 13, offset: 76689},
							label: "scheme",
							expr: &zeroOrOneExpr{
								pos: position{line: 2127, col: 20, offset: 76696},
								expr: &ruleRefExpr{
									pos:  position{line: 2127, col: 21, offset: 76697},
									name: "Scheme",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 2127, col: 30, offset: 76706},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 2127, col: 35, offset: 76711},
								expr: &choiceExpr{
									pos: position{line: 2127, col: 36, offset: 76712},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 2127, col: 36, offset: 76712},
											name: "Filename",
										},
										&ruleRefExpr{
											pos:  position{line: 2127, col: 47, offset: 76723},
											name: "ElementPlaceHolder",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LocationWithScheme",
			pos:  position{line: 2131, col: 1, offset: 76808},
			expr: &actionExpr{
				pos: position{line: 2131, col: 23, offset: 76830},
				run: (*parser).callonLocationWithScheme1,
				expr: &seqExpr{
					pos: position{line: 2131, col: 23, offset: 76830},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 2131, col: 23, offset: 76830},
							label: "scheme",
							expr: &ruleRefExpr{
								pos:  position{line: 2131, col: 31, offset: 76838},
								name: "Scheme",
							},
						},
						&labeledExpr{
							pos:   position{line: 2131, col: 39, offset: 76846},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 2131, col: 44, offset: 76851},
								expr: &choiceExpr{
									pos: position{line: 2131, col: 45, offset: 76852},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 2131, col: 45, offset: 76852},
											name: "Filename",
										},
										&ruleRefExpr{
											pos:  position{line: 2131, col: 56, offset: 76863},
											name: "ElementPlaceHolder",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Filename",
			pos:  position{line: 2135, col: 1, offset: 76948},
			expr: &actionExpr{
				pos: position{line: 2135, col: 13, offset: 76960},
				run: (*parser).callonFilename1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2135, col: 13, offset: 76960},
					expr: &charClassMatcher{
						pos:        position{line: 2135, col: 14, offset: 76961},
						val:        "[^\\r\\n[\\]\\uFFFD ]",
						chars:      []rune{'\r', '\n', '[', ']', '�', ' '},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "Scheme",
			pos:  position{line: 2139, col: 1, offset: 77083},
			expr: &choiceExpr{
				pos: position{line: 2139, col: 11, offset: 77093},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2139, col: 11, offset: 77093},
						val:        "http://",
						ignoreCase: false,
						want:       "\"http://\"",
					},
					&litMatcher{
						pos:        position{line: 2139, col: 23, offset: 77105},
						val:        "https://",
						ignoreCase: false,
						want:       "\"https://\"",
					},
					&litMatcher{
						pos:        position{line: 2139, col: 36, offset: 77118},
						val:        "ftp://",
						ignoreCase: false,
						want:       "\"ftp://\"",
					},
					&litMatcher{
						pos:        position{line: 2139, col: 47, offset: 77129},
						val:        "irc://",
						ignoreCase: false,
						want:       "\"irc://\"",
					},
					&litMatcher{
						pos:        position{line: 2139, col: 58, offset: 77140},
						val:        "mailto:",
						ignoreCase: false,
						want:       "\"mailto:\"",
					},
				},
			},
		},
		{
			name: "Id",
			pos:  position{line: 2141, col: 1, offset: 77151},
			expr: &actionExpr{
				pos: position{line: 2141, col: 7, offset: 77157},
				run: (*parser).callonId1,
				expr: &oneOrMoreExpr{
					pos: position{line: 2141, col: 7, offset: 77157},
					expr: &charClassMatcher{
						pos:        position{line: 2141, col: 7, offset: 77157},
						val:        "[^[\\]<>,]",
						chars:      []rune{'[', ']', '<', '>', ','},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "Digit",
			pos:  position{line: 2145, col: 1, offset: 77282},
			expr: &actionExpr{
				pos: position{line: 2145, col: 10, offset: 77291},
				run: (*parser).callonDigit1,
				expr: &charClassMatcher{
					pos:        position{line: 2145, col: 10, offset: 77291},
					val:        "[0-9]",
					ranges:     []rune{'0', '9'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "Number",
			pos:  position{line: 2149, col: 1, offset: 77333},
			expr: &actionExpr{
				pos: position{line: 2149, col: 11, offset: 77343},
				run: (*parser).callonNumber1,
				expr: &seqExpr{
					pos: position{line: 2149, col: 11, offset: 77343},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 2149, col: 11, offset: 77343},
							expr: &litMatcher{
								pos:        position{line: 2149, col: 11, offset: 77343},
								val:        "-",
								ignoreCase: false,
								want:       "\"-\"",
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 2149, col: 16, offset: 77348},
							expr: &ruleRefExpr{
								pos:  position{line: 2149, col: 16, offset: 77348},
								name: "Digit",
							},
						},
					},
				},
			},
		},
		{
			name: "Space",
			pos:  position{line: 2153, col: 1, offset: 77400},
			expr: &choiceExpr{
				pos: position{line: 2153, col: 10, offset: 77409},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2153, col: 10, offset: 77409},
						val:        " ",
						ignoreCase: false,
						want:       "\" \"",
					},
					&actionExpr{
						pos: position{line: 2153, col: 16, offset: 77415},
						run: (*parser).callonSpace3,
						expr: &litMatcher{
							pos:        position{line: 2153, col: 16, offset: 77415},
							val:        "\t",
							ignoreCase: false,
							want:       "\"\\t\"",
						},
					},
				},
			},
		},
		{
			name: "Newline",
			pos:  position{line: 2157, col: 1, offset: 77456},
			expr: &choiceExpr{
				pos: position{line: 2157, col: 12, offset: 77467},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 2157, col: 12, offset: 77467},
						val:        "\r\n",
						ignoreCase: false,
						want:       "\"\\r\\n\"",
					},
					&litMatcher{
						pos:        position{line: 2157, col: 21, offset: 77476},
						val:        "\r",
						ignoreCase: false,
						want:       "\"\\r\"",
					},
					&litMatcher{
						pos:        position{line: 2157, col: 28, offset: 77483},
						val:        "\n",
						ignoreCase: false,
						want:       "\"\\n\"",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 2159, col: 1, offset: 77489},
			expr: &notExpr{
				pos: position{line: 2159, col: 8, offset: 77496},
				expr: &anyMatcher{
					line: 2159, col: 9, offset: 77497,
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 2161, col: 1, offset: 77500},
			expr: &choiceExpr{
				pos: position{line: 2161, col: 8, offset: 77507},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 2161, col: 8, offset: 77507},
						name: "Newline",
					},
					&ruleRefExpr{
						pos:  position{line: 2161, col: 18, offset: 77517},
						name: "EOF",
					},
				},
			},
		},
	},
}

func (c *current) onRawSource1(lines interface{}) (interface{}, error) {
	return lines.([]interface{}), nil
}

func (p *parser) callonRawSource1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawSource1(stack["lines"])
}

func (c *current) onRawSection4() (interface{}, error) {

	// `=` is level 0, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonRawSection4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawSection4()
}

func (c *current) onRawSection7(level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonRawSection7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawSection7(stack["level"])
}

func (c *current) onRawSection1(level, title interface{}) (interface{}, error) {
	return types.NewRawSection(level.(int), title.(string))
}

func (p *parser) callonRawSection1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawSection1(stack["level"], stack["title"])
}

func (c *current) onRawSectionTitle1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonRawSectionTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawSectionTitle1()
}

func (c *current) onRawLine6() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonRawLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawLine6()
}

func (c *current) onRawLine1(content interface{}) (interface{}, error) {
	// line MAY have content
	return types.NewRawLine(content.(string))

}

func (p *parser) callonRawLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawLine1(stack["content"])
}

func (c *current) onRawDocument1(frontmatter, blocks interface{}) (interface{}, error) {
	return types.NewRawDocument(frontmatter, blocks.([]interface{}))
}

func (p *parser) callonRawDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawDocument1(stack["frontmatter"], stack["blocks"])
}

func (c *current) onRawBlocks1(header, blocks interface{}) (interface{}, error) {
	if header != nil && blocks != nil {
		return append([]interface{}{header}, blocks.([]interface{})...), nil
	} else if blocks != nil {
		return blocks.([]interface{}), nil
	}
	return []interface{}{}, nil
}

func (p *parser) callonRawBlocks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawBlocks1(stack["header"], stack["blocks"])
}

func (c *current) onDocumentRawBlock1(block interface{}) (interface{}, error) {
	log.Debugf("new raw block of kind '%T'", block)
	return block, nil
}

func (p *parser) callonDocumentRawBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRawBlock1(stack["block"])
}

func (c *current) onYamlFrontMatter1(content interface{}) (interface{}, error) {
	return types.NewYamlFrontMatter(content.(string))
}

func (p *parser) callonYamlFrontMatter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatter1(stack["content"])
}

func (c *current) onYamlFrontMatterContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonYamlFrontMatterContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatterContent1()
}

func (c *current) onDocumentHeader1(title, id, authors, revision interface{}) (interface{}, error) {
	return types.NewDocumentHeader(title.([]interface{}), authors, revision)
}

func (p *parser) callonDocumentHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader1(stack["title"], stack["id"], stack["authors"], stack["revision"])
}

func (c *current) onDocumentAuthorsInlineForm1(authors interface{}) (interface{}, error) {
	return types.NewDocumentAuthors(authors.([]interface{}))
}

func (p *parser) callonDocumentAuthorsInlineForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsInlineForm1(stack["authors"])
}

func (c *current) onDocumentAuthorsAttributeForm1(author interface{}) (interface{}, error) {
	return []types.DocumentAuthor{author.(types.DocumentAuthor)}, nil
}

func (p *parser) callonDocumentAuthorsAttributeForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsAttributeForm1(stack["author"])
}

func (c *current) onDocumentAuthor1(fullname, email interface{}) (interface{}, error) {
	return types.NewDocumentAuthor(fullname, email)
}

func (p *parser) callonDocumentAuthor1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthor1(stack["fullname"], stack["email"])
}

func (c *current) onDocumentAuthorName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorName1()
}

func (c *current) onDocumentAuthorEmail5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorEmail5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail5()
}

func (c *current) onDocumentAuthorEmail1(email interface{}) (interface{}, error) {
	return email, nil
}

func (p *parser) callonDocumentAuthorEmail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail1(stack["email"])
}

func (c *current) onDocumentRevision9(revnumber, revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(revnumber, revdate, revremark)

}

func (p *parser) callonDocumentRevision9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision9(stack["revnumber"], stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision23(revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(nil, revdate, revremark)

}

func (p *parser) callonDocumentRevision23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision23(stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision1(revision interface{}) (interface{}, error) {
	return revision, nil
}

func (p *parser) callonDocumentRevision1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision1(stack["revision"])
}

func (c *current) onDocumentRevisionNumber2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber2()
}

func (c *current) onDocumentRevisionNumber8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber8()
}

func (c *current) onDocumentRevisionDate1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionDate1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionDate1()
}

func (c *current) onDocumentRevisionRemark1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionRemark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionRemark1()
}

func (c *current) onAttributeDeclaration1(name, value interface{}) (interface{}, error) {
	return types.NewAttributeDeclaration(name.(string), types.Reduce(value, strings.TrimSpace))
}

func (p *parser) callonAttributeDeclaration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclaration1(stack["name"], stack["value"])
}

func (c *current) onAttributeName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeName1()
}

func (c *current) onAttributeDeclarationValue8() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAttributeDeclarationValue8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue8()
}

func (c *current) onAttributeDeclarationValue12() (interface{}, error) {
	// standalone '{'
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonAttributeDeclarationValue12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue12()
}

func (c *current) onAttributeDeclarationValue1(elements interface{}) (interface{}, error) {
	return types.Reduce(elements.([]interface{}), strings.TrimSpace), nil
}

func (p *parser) callonAttributeDeclarationValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeDeclarationValue1(stack["elements"])
}

func (c *current) onAttributeReset2(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonAttributeReset2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset2(stack["name"])
}

func (c *current) onAttributeReset11(name interface{}) (interface{}, error) {
	return types.NewAttributeReset(name.(string))
}

func (p *parser) callonAttributeReset11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeReset11(stack["name"])
}

func (c *current) onAttrSub1(name interface{}) (interface{}, error) {
	return types.NewAttributeSubstitution(name.(string))
}

func (p *parser) callonAttrSub1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttrSub1(stack["name"])
}

func (c *current) onCounterSub11(name interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, nil)
}

func (p *parser) callonCounterSub11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSub11(stack["name"])
}

func (c *current) onCounterSub21(name interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, nil)
}

func (p *parser) callonCounterSub21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSub21(stack["name"])
}

func (c *current) onCounterSubAlpha1(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, start)
}

func (p *parser) callonCounterSubAlpha1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubAlpha1(stack["name"], stack["start"])
}

func (c *current) onCounterSubAlpha21(name, start interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, start)
}

func (p *parser) callonCounterSubAlpha21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubAlpha21(stack["name"], stack["start"])
}

func (c *current) onCounterSubStart8() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCounterSubStart8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubStart8()
}

func (c *current) onCounterSubStart1(name, num interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), false, num.(int))
}

func (p *parser) callonCounterSubStart1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubStart1(stack["name"], stack["num"])
}

func (c *current) onCounterSubStart28() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCounterSubStart28() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubStart28()
}

func (c *current) onCounterSubStart21(name, num interface{}) (interface{}, error) {
	return types.NewCounterSubstitution(name.(string), true, num.(int))
}

func (p *parser) callonCounterSubStart21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCounterSubStart21(stack["name"], stack["num"])
}

func (c *current) onInlineElementID1(id interface{}) (interface{}, error) {
	// no EOL here since there can be multiple InlineElementID on the same line
	return types.NewInlineIDAttribute(id.(string))
}

func (p *parser) callonInlineElementID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementID1(stack["id"])
}

func (c *current) onStandaloneAttributeKey1(key interface{}) (interface{}, error) {
	// value is not defined
	return types.NewNamedAttribute(key.(string), nil)
}

func (p *parser) callonStandaloneAttributeKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStandaloneAttributeKey1(stack["key"])
}

func (c *current) onBlockAttributes5(anchor interface{}) (interface{}, error) {
	return anchor, nil

}

func (p *parser) callonBlockAttributes5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes5(stack["anchor"])
}

func (c *current) onBlockAttributes14(title interface{}) (interface{}, error) {
	return title, nil

}

func (p *parser) callonBlockAttributes14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes14(stack["title"])
}

func (c *current) onBlockAttributes23(attributes interface{}) (interface{}, error) {
	return attributes, nil

}

func (p *parser) callonBlockAttributes23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes23(stack["attributes"])
}

func (c *current) onBlockAttributes1(attributes interface{}) (interface{}, error) {
	return types.NewAttributes(attributes.([]interface{})...)

}

func (p *parser) callonBlockAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlockAttributes1(stack["attributes"])
}

func (c *current) onInlineAttributes3() error {
	return initPositionalIndex(c)

}

func (p *parser) callonInlineAttributes3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAttributes3()
}

func (c *current) onInlineAttributes1(attributes interface{}) (interface{}, error) {
	return types.NewAttributes(attributes.([]interface{})...)

}

func (p *parser) callonInlineAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAttributes1(stack["attributes"])
}

func (c *current) onStandaloneAttributes1(attributes interface{}) (interface{}, error) {

	return attributes, nil
}

func (p *parser) callonStandaloneAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStandaloneAttributes1(stack["attributes"])
}

func (c *current) onShortHandAnchor9() (interface{}, error) {
	// spaces, commas and dots are allowed in this syntax
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandAnchor9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAnchor9()
}

func (c *current) onShortHandAnchor14() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandAnchor14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAnchor14()
}

func (c *current) onShortHandAnchor5(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonShortHandAnchor5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAnchor5(stack["elements"])
}

func (c *current) onShortHandAnchor1(id interface{}) (interface{}, error) {
	return types.NewIDAttribute(id)

}

func (p *parser) callonShortHandAnchor1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAnchor1(stack["id"])
}

func (c *current) onShortHandTitle12() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandTitle12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandTitle12()
}

func (c *current) onShortHandTitle17() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandTitle17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandTitle17()
}

func (c *current) onShortHandTitle5(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonShortHandTitle5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandTitle5(stack["elements"])
}

func (c *current) onShortHandTitle1(title interface{}) (interface{}, error) {
	return types.NewTitleAttribute(title)

}

func (p *parser) callonShortHandTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandTitle1(stack["title"])
}

func (c *current) onLongHandAttributes3() error {
	return initPositionalIndex(c)

}

func (p *parser) callonLongHandAttributes3() error {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes3()
}

func (c *current) onLongHandAttributes1(firstPositionalAttribute, otherAttributes interface{}) (interface{}, error) {
	attributes := []interface{}{}
	if firstPositionalAttribute != nil {
		attributes = append(attributes, firstPositionalAttribute.([]interface{})...)
	}
	attributes = append(attributes, otherAttributes.([]interface{})...)
	return types.NewAttributes(attributes...)

}

func (p *parser) callonLongHandAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLongHandAttributes1(stack["firstPositionalAttribute"], stack["otherAttributes"])
}

func (c *current) onFirstPositionalAttribute17(main, extras interface{}) (bool, error) {
	// make sure there was a match
	return main != nil || len(extras.([]interface{})) > 0, nil

}

func (p *parser) callonFirstPositionalAttribute17() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstPositionalAttribute17(stack["main"], stack["extras"])
}

func (c *current) onFirstPositionalAttribute1(main, extras interface{}) (interface{}, error) {
	attrs := []interface{}{}
	if main != nil {
		attrs = append(attrs, main)
	}
	attrs = append(attrs, extras.([]interface{})...)
	return attrs, nil

}

func (p *parser) callonFirstPositionalAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstPositionalAttribute1(stack["main"], stack["extras"])
}

func (c *current) onShortHandIDAttribute1(id interface{}) (interface{}, error) {
	_, err := incrementPositionalIndex(c)
	if err != nil {
		return types.Attribute{}, err
	}
	return types.NewIDAttribute(id)
}

func (p *parser) callonShortHandIDAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandIDAttribute1(stack["id"])
}

func (c *current) onShortHandAttribute1(value interface{}) (interface{}, error) {
	i, err := incrementPositionalIndex(c)
	if err != nil {
		return types.Attribute{}, err
	}
	return types.NewPositionalAttribute(i, value)
}

func (p *parser) callonShortHandAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttribute1(stack["value"])
}

func (c *current) onShortHandDotRoleAttribute1(role interface{}) (interface{}, error) {
	return types.NewRoleAttribute(role)
}

func (p *parser) callonShortHandDotRoleAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandDotRoleAttribute1(stack["role"])
}

func (c *current) onShortHandOptionAttribute1(option interface{}) (interface{}, error) {
	return types.NewOptionAttribute(option)
}

func (p *parser) callonShortHandOptionAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandOptionAttribute1(stack["option"])
}

func (c *current) onShortHandAttributeValue9() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandAttributeValue9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue9()
}

func (c *current) onShortHandAttributeValue14() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonShortHandAttributeValue14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue14()
}

func (c *current) onShortHandAttributeValue4(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonShortHandAttributeValue4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShortHandAttributeValue4(stack["elements"])
}

func (c *current) onPositionalAttribute2(value interface{}) (interface{}, error) {

	i, err := incrementPositionalIndex(c)
	if err != nil {
		return types.Attribute{}, err
	}
	return types.NewPositionalAttribute(i, value)

}

func (p *parser) callonPositionalAttribute2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute2(stack["value"])
}

func (c *current) onPositionalAttribute27(value interface{}) (bool, error) {
	// here we can't rely on `c.text` if the content is empty
	// (in which case, `c.text` contains the char sequence of the previous
	// rule that matched)
	v := types.Merge(value)
	return len(v) > 0, nil

}

func (p *parser) callonPositionalAttribute27() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute27(stack["value"])
}

func (c *current) onPositionalAttribute14(value interface{}) (interface{}, error) {

	i, err := incrementPositionalIndex(c)
	if err != nil {
		return types.Attribute{}, err
	}
	return types.NewPositionalAttribute(i, nil)

}

func (p *parser) callonPositionalAttribute14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalAttribute14(stack["value"])
}

func (c *current) onNamedAttribute1(key, value interface{}) (interface{}, error) {
	// TODO: include `,` or expect `]`
	_, err := incrementPositionalIndex(c)
	if err != nil {
		return types.Attribute{}, err
	}
	return types.NewNamedAttribute(key.(string), value)
}

func (p *parser) callonNamedAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttribute1(stack["key"], stack["value"])
}

func (c *current) onNamedAttributeKey1() (interface{}, error) {
	return strings.TrimSpace(string(c.text)), nil
}

func (p *parser) callonNamedAttributeKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedAttributeKey1()
}

func (c *current) onAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil

}

func (p *parser) callonAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue1(stack["value"])
}

func (c *current) onSingleQuotedAttributeValue7() (interface{}, error) {
	// = and , signs are allowed within ' quotes
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuotedAttributeValue7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue7()
}

func (c *current) onSingleQuotedAttributeValue13() (interface{}, error) {

	return types.NewStringElement(`'`) // escaped quote

}

func (p *parser) callonSingleQuotedAttributeValue13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue13()
}

func (c *current) onSingleQuotedAttributeValue16() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuotedAttributeValue16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue16()
}

func (c *current) onSingleQuotedAttributeValue1(elements interface{}) (interface{}, error) {
	return types.Reduce(elements), nil

}

func (p *parser) callonSingleQuotedAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedAttributeValue1(stack["elements"])
}

func (c *current) onDoubleQuotedAttributeValue7() (interface{}, error) {
	// = and , signs are allowed within " quotes
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuotedAttributeValue7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue7()
}

func (c *current) onDoubleQuotedAttributeValue13() (interface{}, error) {

	return types.NewStringElement(`"`) // escaped quote

}

func (p *parser) callonDoubleQuotedAttributeValue13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue13()
}

func (c *current) onDoubleQuotedAttributeValue16() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuotedAttributeValue16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue16()
}

func (c *current) onDoubleQuotedAttributeValue1(elements interface{}) (interface{}, error) {
	return types.Reduce(elements), nil

}

func (p *parser) callonDoubleQuotedAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedAttributeValue1(stack["elements"])
}

func (c *current) onUnquotedAttributeValue8() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonUnquotedAttributeValue8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue8()
}

func (c *current) onUnquotedAttributeValue13() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonUnquotedAttributeValue13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue13()
}

func (c *current) onUnquotedAttributeValue15(elements interface{}) (bool, error) {
	// empty string is not a valid value
	return types.Reduce(elements, strings.TrimSpace) != "", nil

}

func (p *parser) callonUnquotedAttributeValue15() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue15(stack["elements"])
}

func (c *current) onUnquotedAttributeValue1(elements interface{}) (interface{}, error) {
	return types.Reduce(elements, strings.TrimSpace), nil

}

func (p *parser) callonUnquotedAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeValue1(stack["elements"])
}

func (c *current) onSection7() (interface{}, error) {

	// `=` is level 0, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonSection7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection7()
}

func (c *current) onSection10(attributes, level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonSection10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection10(stack["attributes"], stack["level"])
}

func (c *current) onSection1(attributes, level, title, id interface{}) (interface{}, error) {
	return types.NewSection(level.(int), title.([]interface{}), id.([]interface{}), attributes)
}

func (p *parser) callonSection1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection1(stack["attributes"], stack["level"], stack["title"], stack["id"])
}

func (c *current) onTitleElements1(elements interface{}) (interface{}, error) {
	// absorbs heading and trailing spaces
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonTitleElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElements1(stack["elements"])
}

func (c *current) onTitleElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonTitleElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElement1(stack["element"])
}

func (c *current) onUserMacroBlock1(name, value, inlineAttributes interface{}) (interface{}, error) {
	return types.NewUserMacroBlock(name.(string), value.(string), inlineAttributes, string(c.text))
}

func (p *parser) callonUserMacroBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock1(stack["name"], stack["value"], stack["inlineAttributes"])
}

func (c *current) onInlineUserMacro1(name, value, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineUserMacro(name.(string), value.(string), inlineAttributes, string(c.text))
}

func (p *parser) callonInlineUserMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro1(stack["name"], stack["value"], stack["inlineAttributes"])
}

func (c *current) onUserMacroName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUserMacroName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroName1()
}

func (c *current) onUserMacroValue1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUserMacroValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroValue1()
}

func (c *current) onFileInclusion4(path, inlineAttributes interface{}) (interface{}, error) {

	return types.NewFileInclusion(path.(types.Location), inlineAttributes.(types.Attributes), string(c.text))

}

func (p *parser) callonFileInclusion4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion4(stack["path"], stack["inlineAttributes"])
}

func (c *current) onFileInclusion1(incl interface{}) (interface{}, error) {
	return incl.(types.FileInclusion), nil

}

func (p *parser) callonFileInclusion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion1(stack["incl"])
}

func (c *current) onLineRanges1(value interface{}) (interface{}, error) {
	// must make sure that the whole content is parsed
	return value, nil
}

func (p *parser) callonLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRanges1(stack["value"])
}

func (c *current) onMultipleLineRanges9(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleLineRanges9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges9(stack["other"])
}

func (c *current) onMultipleLineRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultiLineRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineRange1(stack["start"], stack["end"])
}

func (c *current) onSingleLineRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineRange1(stack["singleline"])
}

func (c *current) onTagRanges1(value interface{}) (interface{}, error) {
	// must make sure that the whole content is parsed
	return value, nil
}

func (p *parser) callonTagRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRanges1(stack["value"])
}

func (c *current) onMultipleTagRanges7(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleTagRanges7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges7(stack["other"])
}

func (c *current) onMultipleTagRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleTagRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges1(stack["first"], stack["others"])
}

func (c *current) onTagRange2(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), true)
}

func (p *parser) callonTagRange2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange2(stack["tag"])
}

func (c *current) onTagRange7(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), false)
}

func (p *parser) callonTagRange7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange7(stack["tag"])
}

func (c *current) onTagWildcard4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagWildcard4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard4()
}

func (c *current) onTagWildcard7(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagWildcard7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard7(stack["stars"])
}

func (c *current) onTagWildcard1(stars interface{}) (interface{}, error) {
	return stars, nil
}

func (p *parser) callonTagWildcard1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard1(stack["stars"])
}

func (c *current) onIncludedFileLine8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine8()
}

func (c *current) onIncludedFileLine1(content interface{}) (interface{}, error) {
	return types.NewIncludedFileLine(content.([]interface{}))
}

func (p *parser) callonIncludedFileLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine1(stack["content"])
}

func (c *current) onIncludedFileStartTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileStartTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag5()
}

func (c *current) onIncludedFileStartTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileStartTag(tag.(string))
}

func (p *parser) callonIncludedFileStartTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag1(stack["tag"])
}

func (c *current) onIncludedFileEndTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileEndTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag5()
}

func (c *current) onIncludedFileEndTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileEndTag(tag.(string))
}

func (p *parser) callonIncludedFileEndTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag1(stack["tag"])
}

func (c *current) onListParagraph2(comment interface{}) (interface{}, error) {
	return comment, nil

}

func (p *parser) callonListParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph2(stack["comment"])
}

func (c *current) onListParagraph5(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), nil)

}

func (p *parser) callonListParagraph5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph5(stack["lines"])
}

func (c *current) onListParagraphLine24(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonListParagraphLine24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine24(stack["elements"])
}

func (c *current) onListParagraphLine1(line interface{}) (interface{}, error) {

	return line, nil

}

func (p *parser) callonListParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine1(stack["line"])
}

func (c *current) onContinuedListItemElement1(element interface{}) (interface{}, error) {
	return types.NewContinuedListItemElement(element) // offset is negative
}

func (p *parser) callonContinuedListItemElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemElement1(stack["element"])
}

func (c *current) onContinuedListItemContent1(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonContinuedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent1(stack["content"])
}

func (c *current) onOrderedListItem1(attributes, prefix, content interface{}) (interface{}, error) {
	return types.NewOrderedListItem(prefix.(types.OrderedListItemPrefix), content.([]interface{}), attributes)
}

func (p *parser) callonOrderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItem1(stack["attributes"], stack["prefix"], stack["content"])
}

func (c *current) onOrderedListItemPrefix10() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonOrderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix10()
}

func (c *current) onOrderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonOrderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix13(stack["depth"])
}

func (c *current) onOrderedListItemPrefix7(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListItemPrefix(types.Arabic, 1)
	case 2:
		return types.NewOrderedListItemPrefix(types.LowerAlpha, 2)
	case 3:
		return types.NewOrderedListItemPrefix(types.LowerRoman, 3)
	case 4:
		return types.NewOrderedListItemPrefix(types.UpperAlpha, 4)
	default:
		return types.NewOrderedListItemPrefix(types.UpperRoman, 5)
	}

}

func (p *parser) callonOrderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix7(stack["depth"])
}

func (c *current) onOrderedListItemPrefix14() (interface{}, error) {
	// numbering style: "1."
	return types.NewOrderedListItemPrefix(types.Arabic, 1)

}

func (p *parser) callonOrderedListItemPrefix14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix14()
}

func (c *current) onOrderedListItemPrefix19() (interface{}, error) {
	// numbering style: "a."
	return types.NewOrderedListItemPrefix(types.LowerAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix19()
}

func (c *current) onOrderedListItemPrefix23() (interface{}, error) {
	// numbering style: "A."
	return types.NewOrderedListItemPrefix(types.UpperAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix23()
}

func (c *current) onOrderedListItemPrefix27() (interface{}, error) {
	// numbering style: "i)"
	return types.NewOrderedListItemPrefix(types.LowerRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix27()
}

func (c *current) onOrderedListItemPrefix32() (interface{}, error) {
	// numbering style: "I)"
	return types.NewOrderedListItemPrefix(types.UpperRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix32()
}

func (c *current) onOrderedListItemPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonOrderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix1(stack["prefix"])
}

func (c *current) onOrderedListItemContent1(elements interface{}) (interface{}, error) {
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonOrderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemContent1(stack["elements"])
}

func (c *current) onUnorderedListItem1(attributes, prefix, checkstyle, content interface{}) (interface{}, error) {
	return types.NewUnorderedListItem(prefix.(types.UnorderedListItemPrefix), checkstyle, content.([]interface{}), attributes)
}

func (p *parser) callonUnorderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItem1(stack["attributes"], stack["prefix"], stack["checkstyle"], stack["content"])
}

func (c *current) onUnorderedListItemPrefix10() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonUnorderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix10()
}

func (c *current) onUnorderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonUnorderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix13(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix7(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListItemPrefix(types.OneAsterisk, 1)
	case 2:
		return types.NewUnorderedListItemPrefix(types.TwoAsterisks, 2)
	case 3:
		return types.NewUnorderedListItemPrefix(types.ThreeAsterisks, 3)
	case 4:
		return types.NewUnorderedListItemPrefix(types.FourAsterisks, 4)
	default:
		return types.NewUnorderedListItemPrefix(types.FiveAsterisks, 5)
	}

}

func (p *parser) callonUnorderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix7(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix15() (interface{}, error) {
	return types.NewUnorderedListItemPrefix(types.Dash, 1)

}

func (p *parser) callonUnorderedListItemPrefix15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix15()
}

func (c *current) onUnorderedListItemPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonUnorderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix1(stack["prefix"])
}

func (c *current) onUnorderedListItemCheckStyle7() (interface{}, error) {
	return types.Unchecked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle7()
}

func (c *current) onUnorderedListItemCheckStyle9() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle9()
}

func (c *current) onUnorderedListItemCheckStyle11() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle11()
}

func (c *current) onUnorderedListItemCheckStyle1(style interface{}) (interface{}, error) {
	return style, nil

}

func (p *parser) callonUnorderedListItemCheckStyle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle1(stack["style"])
}

func (c *current) onUnorderedListItemContent1(elements interface{}) (interface{}, error) {
	// Another list or a literal paragraph immediately following a list item will be implicitly included in the list item
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonUnorderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemContent1(stack["elements"])
}

func (c *current) onLabeledListItem1(attributes, term, separator, description interface{}) (interface{}, error) {
	return types.NewLabeledListItem(len(separator.(string))-1, term.([]interface{}), description, attributes)
}

func (p *parser) callonLabeledListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItem1(stack["attributes"], stack["term"], stack["separator"], stack["description"])
}

func (c *current) onVerbatimLabeledListItemTerm3() (interface{}, error) {
	return types.NewStringElement(strings.TrimSpace(string(c.text)))
}

func (p *parser) callonVerbatimLabeledListItemTerm3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLabeledListItemTerm3()
}

func (c *current) onVerbatimLabeledListItemTerm1(content interface{}) (interface{}, error) {
	return types.NewInlineElements(content)
}

func (p *parser) callonVerbatimLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLabeledListItemTerm1(stack["content"])
}

func (c *current) onLabeledListItemTerm1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTerm1(stack["elements"])
}

func (c *current) onLabeledListItemTermElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonLabeledListItemTermElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTermElement1(stack["element"])
}

func (c *current) onLabeledListItemSeparator4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonLabeledListItemSeparator4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator4()
}

func (c *current) onLabeledListItemSeparator7(separator interface{}) (bool, error) {

	// use a predicate to make sure that only `::` to `::::` are allowed
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonLabeledListItemSeparator7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator7(stack["separator"])
}

func (c *current) onLabeledListItemSeparator1(separator interface{}) (interface{}, error) {
	return separator, nil
}

func (p *parser) callonLabeledListItemSeparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator1(stack["separator"])
}

func (c *current) onLabeledListItemDescription1(elements interface{}) (interface{}, error) {

	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemDescription1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemDescription1(stack["elements"])
}

func (c *current) onAdmonitionKind2() (interface{}, error) {
	return types.Tip, nil
}

func (p *parser) callonAdmonitionKind2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind2()
}

func (c *current) onAdmonitionKind4() (interface{}, error) {
	return types.Note, nil
}

func (p *parser) callonAdmonitionKind4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind4()
}

func (c *current) onAdmonitionKind6() (interface{}, error) {
	return types.Important, nil
}

func (p *parser) callonAdmonitionKind6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind6()
}

func (c *current) onAdmonitionKind8() (interface{}, error) {
	return types.Warning, nil
}

func (p *parser) callonAdmonitionKind8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind8()
}

func (c *current) onAdmonitionKind10() (interface{}, error) {
	return types.Caution, nil
}

func (p *parser) callonAdmonitionKind10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind10()
}

func (c *current) onRawParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(string), attributes)

}

func (p *parser) callonRawParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onRawParagraph15(attributes, content interface{}) (interface{}, error) {
	return types.NewMarkdownQuoteBlock(content.([]interface{}), attributes)

}

func (p *parser) callonRawParagraph15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph15(stack["attributes"], stack["content"])
}

func (c *current) onRawParagraph28(attributes interface{}) (bool, error) {
	// verify that one of the attributes is `kind:passthrough`
	return types.HasAttributeWithValue(attributes, types.AttrPositional1, types.Passthrough), nil

}

func (p *parser) callonRawParagraph28() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph28(stack["attributes"])
}

func (c *current) onRawParagraph23(attributes, content interface{}) (interface{}, error) {

	return types.NewPassthroughBlock(content.([]interface{}), attributes)

}

func (p *parser) callonRawParagraph23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph23(stack["attributes"], stack["content"])
}

func (c *current) onRawParagraph32(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)

}

func (p *parser) callonRawParagraph32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraph32(stack["attributes"], stack["lines"])
}

func (c *current) onMarkdownQuoteBlockRawContent2(content interface{}) (interface{}, error) {

	return content, nil
}

func (p *parser) callonMarkdownQuoteBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteBlockRawContent2(stack["content"])
}

func (c *current) onRawParagraphLine8(content interface{}) (bool, error) {
	// exclude line if it is a blankline
	if strings.Trim(content.(string), " \t") == "" {
		return false, nil
	}
	return true, nil

}

func (p *parser) callonRawParagraphLine8() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraphLine8(stack["content"])
}

func (c *current) onRawParagraphLine1(content interface{}) (interface{}, error) {
	return types.NewRawLine(content.(string))

}

func (p *parser) callonRawParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraphLine1(stack["content"])
}

func (c *current) onRawParagraphLineContent1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonRawParagraphLineContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawParagraphLineContent1()
}

func (c *current) onSimpleRawParagraph6(attributes interface{}) (bool, error) {
	return !types.HasAttributeWithValue(attributes, types.AttrPositional1, types.Literal), nil

}

func (p *parser) callonSimpleRawParagraph6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleRawParagraph6(stack["attributes"])
}

func (c *current) onSimpleRawParagraph1(attributes, firstLine, otherLines interface{}) (interface{}, error) {

	return types.NewParagraph(append([]interface{}{firstLine}, otherLines.([]interface{})...), attributes)
}

func (p *parser) callonSimpleRawParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleRawParagraph1(stack["attributes"], stack["firstLine"], stack["otherLines"])
}

func (c *current) onFirstParagraphRawLine4(elements interface{}) (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonFirstParagraphRawLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstParagraphRawLine4(stack["elements"])
}

func (c *current) onFirstParagraphRawLine1(content interface{}) (interface{}, error) {

	return types.NewRawLine(content.(string))
}

func (p *parser) callonFirstParagraphRawLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstParagraphRawLine1(stack["content"])
}

func (c *current) onContinuedRawParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(string), attributes)

}

func (p *parser) callonContinuedRawParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedRawParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onContinuedRawParagraph12(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)
}

func (p *parser) callonContinuedRawParagraph12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedRawParagraph12(stack["attributes"], stack["lines"])
}

func (c *current) onContinuedRawParagraphLines7(line interface{}) (interface{}, error) {
	return line, nil
}

func (p *parser) callonContinuedRawParagraphLines7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedRawParagraphLines7(stack["line"])
}

func (c *current) onContinuedRawParagraphLines1(firstLine, otherLines interface{}) (interface{}, error) {
	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonContinuedRawParagraphLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedRawParagraphLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onInlineElements7(comment interface{}) (interface{}, error) {
	return types.NewInlineElements([]interface{}{comment})

}

func (p *parser) callonInlineElements7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements7(stack["comment"])
}

func (c *current) onInlineElements10(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonInlineElements10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements10(stack["elements"])
}

func (c *current) onInlineElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonInlineElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements1(stack["elements"])
}

func (c *current) onInlineElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonInlineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement1(stack["element"])
}

func (c *current) onLineBreak1() (interface{}, error) {
	return types.NewLineBreak()
}

func (p *parser) callonLineBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineBreak1()
}

func (c *current) onConstrainedQuotedText1(text interface{}) (interface{}, error) {
	// if a '^' or '~' is alone (ie, badly formatted superscript or subscript, then accept it as-is)
	return text, nil
}

func (p *parser) callonConstrainedQuotedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstrainedQuotedText1(stack["text"])
}

func (c *current) onSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	// rule used withn `words` to detect superscript or subscript portions, eg in math formulae.
	return string(c.text), nil
}

func (p *parser) callonSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptOrSuperscriptPrefix3()
}

func (c *current) onOneOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonOneOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOneOrMoreBackslashes1()
}

func (c *current) onTwoOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonTwoOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTwoOrMoreBackslashes1()
}

func (c *current) onDoubleQuoteBoldText1(attributes, elements interface{}) (interface{}, error) {
	return types.NewQuotedText(types.Bold, attributes, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldText1(stack["attributes"], stack["elements"])
}

func (c *current) onDoubleQuoteBoldTextElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonDoubleQuoteBoldTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextElement1(stack["element"])
}

func (c *current) onDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onSingleQuoteBoldText2(attributes, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '**' to emphazise a portion of a word)
	return types.NewQuotedText(types.Bold, attributes, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText2(stack["attributes"], stack["elements"])
}

func (c *current) onSingleQuoteBoldText17(attributes, elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation.
	return types.NewQuotedText(types.Bold, attributes, elements.([]interface{})) // include the second heading `*` as a regular StringElement in the bold content
}

func (p *parser) callonSingleQuoteBoldText17() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText17(stack["attributes"], stack["elements"])
}

func (c *current) onSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onEscapedBoldText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "**", elements.([]interface{}))

}

func (p *parser) callonEscapedBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation
	result := append([]interface{}{"*"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "*", result)

}

func (p *parser) callonEscapedBoldText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "*", elements.([]interface{}))
}

func (p *parser) callonEscapedBoldText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicText1(attributes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Italic, attributes, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicText1(stack["attributes"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicTextElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonDoubleQuoteItalicTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextElement1(stack["element"])
}

func (c *current) onDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or a italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onSingleQuoteItalicText2(attributes, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '__' to emphazise a portion of a word)
	return types.NewQuotedText(types.Italic, attributes, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText2(stack["attributes"], stack["elements"])
}

func (c *current) onSingleQuoteItalicText14(attributes, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation.
	return types.NewQuotedText(types.Italic, attributes, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content
}

func (p *parser) callonSingleQuoteItalicText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText14(stack["attributes"], stack["elements"])
}

func (c *current) onSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or an italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onEscapedItalicText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "__", elements.([]interface{}))

}

func (p *parser) callonEscapedItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation
	result := append([]interface{}{"_"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "_", result)

}

func (p *parser) callonEscapedItalicText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "_", elements.([]interface{}))
}

func (p *parser) callonEscapedItalicText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceText1(attributes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Monospace, attributes, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceText1(stack["attributes"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceTextElement14() (interface{}, error) {
	// must be before SingleQuoteMonospaceText
	// do not convert to apostrophe (yet)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonDoubleQuoteMonospaceTextElement14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement14()
}

func (c *current) onDoubleQuoteMonospaceTextElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonDoubleQuoteMonospaceTextElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextElement1(stack["element"])
}

func (c *current) onDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	// or a monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextFallbackCharacter3()
}

func (c *current) onSingleQuoteMonospaceText2(attributes, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs "``" to emphazise a portion of a word)
	return types.NewQuotedText(types.Monospace, attributes, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText2(stack["attributes"], stack["elements"])
}

func (c *current) onSingleQuoteMonospaceText14(attributes, elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation.
	return types.NewQuotedText(types.Monospace, attributes, elements.([]interface{})) // include the second heading "`" as a regular StringElement in the monospace content
}

func (p *parser) callonSingleQuoteMonospaceText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText14(stack["attributes"], stack["elements"])
}

func (c *current) onSingleQuoteMonospaceTextElement22() (interface{}, error) {
	// do not convert to apostrophe (yet)
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSingleQuoteMonospaceTextElement22() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextElement22()
}

func (c *current) onSingleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	// or an monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextFallbackCharacter3()
}

func (c *current) onEscapedMonospaceText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "``", elements.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation
	result := append([]interface{}{"`"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "`", result)

}

func (p *parser) callonEscapedMonospaceText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "`", elements.([]interface{}))
}

func (p *parser) callonEscapedMonospaceText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText18(stack["backslashes"], stack["elements"])
}

func (c *current) onSingleQuotedString1(elements interface{}) (interface{}, error) {
	return types.NewQuotedString(types.SingleQuote, elements.([]interface{}))
}

func (p *parser) callonSingleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedString1(stack["elements"])
}

func (c *current) onSingleQuotedStringElements1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonSingleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElements1(stack["elements"])
}

func (c *current) onSingleQuotedStringElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonSingleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringElement1(stack["element"])
}

func (c *current) onSingleQuotedStringFallbackCharacter3() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuotedStringFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuotedStringFallbackCharacter3()
}

func (c *current) onDoubleQuotedString1(elements interface{}) (interface{}, error) {
	return types.NewQuotedString(types.DoubleQuote, elements.([]interface{}))
}

func (p *parser) callonDoubleQuotedString1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedString1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElements1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonDoubleQuotedStringElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElements1(stack["elements"])
}

func (c *current) onDoubleQuotedStringElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonDoubleQuotedStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringElement1(stack["element"])
}

func (c *current) onDoubleQuotedStringFallbackCharacter1() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuotedStringFallbackCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuotedStringFallbackCharacter1()
}

func (c *current) onDoubleQuoteMarkedText1(attributes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Marked, attributes, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteMarkedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedText1(stack["attributes"], stack["elements"])
}

func (c *current) onDoubleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	// or a marked delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMarkedTextFallbackCharacter3()
}

func (c *current) onSingleQuoteMarkedText2(attributes, elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '##' to emphazise a portion of a word)
	return types.NewQuotedText(types.Marked, attributes, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText2(stack["attributes"], stack["elements"])
}

func (c *current) onSingleQuoteMarkedText14(attributes, elements interface{}) (interface{}, error) {
	// unbalanced `##` vs `#` punctuation.
	return types.NewQuotedText(types.Marked, attributes, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content
}

func (p *parser) callonSingleQuoteMarkedText14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedText14(stack["attributes"], stack["elements"])
}

func (c *current) onSingleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	// or a mark delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteMarkedTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMarkedTextFallbackCharacter3()
}

func (c *current) onEscapedMarkedText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "##", elements.([]interface{}))

}

func (p *parser) callonEscapedMarkedText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `##` vs `#` punctuation
	result := append([]interface{}{"#"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "#", result)

}

func (p *parser) callonEscapedMarkedText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMarkedText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "#", elements.([]interface{}))
}

func (p *parser) callonEscapedMarkedText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMarkedText18(stack["backslashes"], stack["elements"])
}

func (c *current) onSubscriptText1(attributes, element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Subscript, attributes, element)
}

func (p *parser) callonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptText1(stack["attributes"], stack["element"])
}

func (c *current) onNonSubscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '~'
	return c.text, nil
}

func (p *parser) callonNonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSubscriptText1()
}

func (c *current) onEscapedSubscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "~", element)
}

func (p *parser) callonEscapedSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSuperscriptText1(attributes, element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Superscript, attributes, element)
}

func (p *parser) callonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptText1(stack["attributes"], stack["element"])
}

func (c *current) onNonSuperscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '^'
	return c.text, nil
}

func (p *parser) callonNonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSuperscriptText1()
}

func (c *current) onEscapedSuperscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "^", element)
}

func (p *parser) callonEscapedSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSinglePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.SinglePlusPassthrough, []interface{}{content})
}

func (p *parser) callonSinglePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthrough1(stack["content"])
}

func (c *current) onSinglePlusPassthroughContent2() (interface{}, error) {
	// no space in the first or last position of the content, but allowed elsewhere
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent2()
}

func (c *current) onSinglePlusPassthroughContent24() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent24()
}

func (c *current) onTriplePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.TriplePlusPassthrough, []interface{}{content})
}

func (p *parser) callonTriplePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthrough1(stack["content"])
}

func (c *current) onTriplePlusPassthroughContent2() (interface{}, error) {
	// spaces and newlines are also allowed in the first or last position of the content and elsewhere too
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent2()
}

func (c *current) onTriplePlusPassthroughContent8() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent8()
}

func (c *current) onPassthroughMacro2(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.PassthroughMacro, []interface{}{content})
}

func (p *parser) callonPassthroughMacro2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro2(stack["content"])
}

func (c *current) onPassthroughMacro9(content interface{}) (interface{}, error) {
	return types.NewInlinePassthrough(types.PassthroughMacro, content.([]interface{}))
}

func (p *parser) callonPassthroughMacro9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro9(stack["content"])
}

func (c *current) onPassthroughMacroCharacter1() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonPassthroughMacroCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacroCharacter1()
}

func (c *current) onInternalCrossReference2(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, label)
}

func (p *parser) callonInternalCrossReference2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference2(stack["id"], stack["label"])
}

func (c *current) onInternalCrossReference13(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id, nil)
}

func (p *parser) callonInternalCrossReference13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference13(stack["id"])
}

func (c *current) onExternalCrossReference1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewExternalCrossReference(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonExternalCrossReference1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onCrossReferenceLabel3() (interface{}, error) {
	// `{`, `>` and `>` characters are not allowed as they are used for attribute substitutions and cross-references
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonCrossReferenceLabel3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReferenceLabel3()
}

func (c *current) onCrossReferenceLabel9() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonCrossReferenceLabel9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCrossReferenceLabel9()
}

func (c *current) onRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.Attributes))
}

func (p *parser) callonRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onImageBlock6(attributes interface{}) (bool, error) {
	// AttrPositional1 must not be set
	return types.HasNotAttribute(attributes, types.AttrPositional1), nil

}

func (p *parser) callonImageBlock6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock6(stack["attributes"])
}

func (c *current) onImageBlock1(attributes, path, inlineAttributes interface{}) (interface{}, error) {
	// 'imagesdir' attribute is added after applying the attribute substitutions on the image location
	return types.NewImageBlock(path.(types.Location), inlineAttributes.(types.Attributes), attributes)
}

func (p *parser) callonImageBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock1(stack["attributes"], stack["path"], stack["inlineAttributes"])
}

func (c *current) onInlineImage1(path, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineImage(path.(types.Location), inlineAttributes.(types.Attributes), c.globalStore["imagesdir"])
}

func (p *parser) callonInlineImage1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage1(stack["path"], stack["inlineAttributes"])
}

func (c *current) onInlineIcon5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonInlineIcon5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon5()
}

func (c *current) onInlineIcon1(icon, attributes interface{}) (interface{}, error) {
	return types.NewIcon(icon.(string), attributes)
}

func (p *parser) callonInlineIcon1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineIcon1(stack["icon"], stack["attributes"])
}

func (c *current) onInlineFootnote2(content interface{}) (interface{}, error) {
	return types.NewFootnote("", content.([]interface{}))
}

func (p *parser) callonInlineFootnote2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote2(stack["content"])
}

func (c *current) onInlineFootnote8(ref, content interface{}) (interface{}, error) {
	return types.NewFootnote(ref.(string), content)
}

func (p *parser) callonInlineFootnote8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote8(stack["ref"], stack["content"])
}

func (c *current) onFootnoteContent1(elements interface{}) (interface{}, error) {
	// footnote content may span multiple lines
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonFootnoteContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteContent1(stack["elements"])
}

func (c *current) onCallout5() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCallout5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout5()
}

func (c *current) onCallout1(ref interface{}) (interface{}, error) {
	return types.NewCallout(ref.(int))
}

func (p *parser) callonCallout1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout1(stack["ref"])
}

func (c *current) onCalloutListItem1(ref, description interface{}) (interface{}, error) {
	return types.NewCalloutListItem(ref.(int), description.([]interface{}))
}

func (p *parser) callonCalloutListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItem1(stack["ref"], stack["description"])
}

func (c *current) onCalloutListItemPrefix5() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCalloutListItemPrefix5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItemPrefix5()
}

func (c *current) onCalloutListItemPrefix1(ref interface{}) (interface{}, error) {
	return ref, nil
}

func (p *parser) callonCalloutListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItemPrefix1(stack["ref"])
}

func (c *current) onThematicBreak1() (interface{}, error) {
	return types.NewThematicBreak()
}

func (p *parser) callonThematicBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onThematicBreak1()
}

func (c *current) onDelimitedBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock1(stack["block"])
}

func (c *current) onExampleBlock1(attributes, blocks interface{}) (interface{}, error) {
	return types.NewExampleBlock(blocks.([]interface{}), attributes)
}

func (p *parser) callonExampleBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlock1(stack["attributes"], stack["blocks"])
}

func (c *current) onExampleBlockRawContent2(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonExampleBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockRawContent2(stack["element"])
}

func (c *current) onQuoteBlock6(attributes interface{}) (bool, error) {
	// AttrPositional1 may be missing or must be equal to `quote`
	if types.HasNotAttribute(attributes, types.AttrPositional1) ||
		types.HasAttributeWithValue(attributes, types.AttrPositional1, types.Quote) {
		return true, nil
	}
	return false, nil

}

func (p *parser) callonQuoteBlock6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlock6(stack["attributes"])
}

func (c *current) onQuoteBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewQuoteBlock(content.([]interface{}), attributes)

}

func (p *parser) callonQuoteBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlock1(stack["attributes"], stack["content"])
}

func (c *current) onQuoteBlockRawContent2(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonQuoteBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockRawContent2(stack["element"])
}

func (c *current) onSidebarBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewSidebarBlock(content.([]interface{}), attributes)
}

func (p *parser) callonSidebarBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlock1(stack["attributes"], stack["content"])
}

func (c *current) onSidebarBlockRawContent2(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonSidebarBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockRawContent2(stack["element"])
}

func (c *current) onFencedBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewFencedBlock(content.([]interface{}), attributes)
}

func (p *parser) callonFencedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlock1(stack["attributes"], stack["content"])
}

func (c *current) onFencedBlockRawContent2(line interface{}) (interface{}, error) {

	return line, nil
}

func (p *parser) callonFencedBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockRawContent2(stack["line"])
}

func (c *current) onListingBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewListingBlock(content.([]interface{}), attributes)
}

func (p *parser) callonListingBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlock1(stack["attributes"], stack["content"])
}

func (c *current) onListingBlockRawContent2(line interface{}) (interface{}, error) {

	return line, nil
}

func (p *parser) callonListingBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockRawContent2(stack["line"])
}

func (c *current) onVerseBlock6(attributes interface{}) (bool, error) {
	// AttrPositional1 must be equal to `verse`
	return types.HasAttributeWithValue(attributes, types.AttrPositional1, types.Verse), nil

}

func (p *parser) callonVerseBlock6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlock6(stack["attributes"])
}

func (c *current) onVerseBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewVerseBlock(content.([]interface{}), attributes)

}

func (p *parser) callonVerseBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlock1(stack["attributes"], stack["content"])
}

func (c *current) onVerseBlockRawContent2(line interface{}) (interface{}, error) {

	return line, nil
}

func (p *parser) callonVerseBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockRawContent2(stack["line"])
}

func (c *current) onPassthroughBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewPassthroughBlock(content.([]interface{}), attributes)
}

func (p *parser) callonPassthroughBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlock1(stack["attributes"], stack["content"])
}

func (c *current) onPassthroughBlockRawContent2(line interface{}) (interface{}, error) {

	return line, nil
}

func (p *parser) callonPassthroughBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughBlockRawContent2(stack["line"])
}

func (c *current) onCommentBlock1(content interface{}) (interface{}, error) {
	return types.NewCommentBlock(content.([]interface{}), nil)
}

func (p *parser) callonCommentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlock1(stack["content"])
}

func (c *current) onCommentBlockRawContent2(line interface{}) (interface{}, error) {

	return line, nil
}

func (p *parser) callonCommentBlockRawContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlockRawContent2(stack["line"])
}

func (c *current) onSingleLineComment1(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))
}

func (p *parser) callonSingleLineComment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineComment1(stack["content"])
}

func (c *current) onSingleLineCommentContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleLineCommentContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineCommentContent1()
}

func (c *current) onElementPlaceHolder5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonElementPlaceHolder5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementPlaceHolder5()
}

func (c *current) onElementPlaceHolder1(ref interface{}) (interface{}, error) {
	return types.NewElementPlaceHolder(ref.(string))
}

func (p *parser) callonElementPlaceHolder1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementPlaceHolder1(stack["ref"])
}

func (c *current) onMarkdownQuoteMacroSubs1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), nil)
}

func (p *parser) callonMarkdownQuoteMacroSubs1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteMacroSubs1(stack["lines"])
}

func (c *current) onMarkdownQuoteLine1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonMarkdownQuoteLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteLine1(stack["elements"])
}

func (c *current) onMarkdownQuoteAttribution5() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonMarkdownQuoteAttribution5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteAttribution5()
}

func (c *current) onMarkdownQuoteAttribution1(author interface{}) (interface{}, error) {
	return author, nil
}

func (p *parser) callonMarkdownQuoteAttribution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteAttribution1(stack["author"])
}

func (c *current) onNoneSubs5() (interface{}, error) {
	// just text, including empty lines
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonNoneSubs5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNoneSubs5()
}

func (c *current) onTable1(attributes, header, lines interface{}) (interface{}, error) {
	// end delimiter or end of file
	return types.NewTable(header, lines.([]interface{}), attributes)

}

func (p *parser) callonTable1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTable1(stack["attributes"], stack["header"], stack["lines"])
}

func (c *current) onTableLineHeader1(cells interface{}) (interface{}, error) {
	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLineHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLineHeader1(stack["cells"])
}

func (c *current) onTableLine1(cells interface{}) (interface{}, error) {
	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLine1(stack["cells"])
}

func (c *current) onTableCell1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonTableCell1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCell1(stack["elements"])
}

func (c *current) onParagraphWithHeadingSpaces1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithSpacesOnFirstLine, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithHeadingSpaces1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpaces1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithHeadingSpacesLines1(firstLine, otherLines interface{}) (interface{}, error) {

	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonParagraphWithHeadingSpacesLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onParagraphWithHeadingSpacesLine4() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonParagraphWithHeadingSpacesLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLine4()
}

func (c *current) onParagraphWithHeadingSpacesLine1(line interface{}) (interface{}, error) {
	// do not include the trailing 'EOL' on the first line
	return line, nil
}

func (p *parser) callonParagraphWithHeadingSpacesLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLine1(stack["line"])
}

func (c *current) onParagraphWithLiteralBlockDelimiter1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithDelimiter, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithLiteralBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiter1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLines1(lines interface{}) (interface{}, error) {
	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	return types.NewRawLine(string(c.text))

}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine4()
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine1(line interface{}) (interface{}, error) {

	return line, nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine1(stack["line"])
}

func (c *current) onParagraphWithLiteralAttribute6(attributes interface{}) (bool, error) {
	return types.HasAttributeWithValue(attributes, types.AttrPositional1, types.Literal), nil

}

func (p *parser) callonParagraphWithLiteralAttribute6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute6(stack["attributes"])
}

func (c *current) onParagraphWithLiteralAttribute1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithAttribute, lines.([]interface{}), attributes)

}

func (p *parser) callonParagraphWithLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute1(stack["attributes"], stack["lines"])
}

func (c *current) onLiteralKind1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLiteralKind1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralKind1()
}

func (c *current) onLiteralParagraphLine6() (interface{}, error) {
	return types.NewRawLine(string(c.text))
}

func (p *parser) callonLiteralParagraphLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralParagraphLine6()
}

func (c *current) onLiteralParagraphLine1(content interface{}) (interface{}, error) {
	return content, nil // do not include the trailing 'EOL'
}

func (p *parser) callonLiteralParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralParagraphLine1(stack["content"])
}

func (c *current) onIndexTerm1(term interface{}) (interface{}, error) {
	return types.NewIndexTerm(term.([]interface{}))
}

func (p *parser) callonIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTerm1(stack["term"])
}

func (c *current) onIndexTermContent11() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIndexTermContent11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent11()
}

func (c *current) onIndexTermContent1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent1(stack["elements"])
}

func (c *current) onConcealedIndexTerm8(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm8(stack["content"])
}

func (c *current) onConcealedIndexTerm19(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm19(stack["content"])
}

func (c *current) onConcealedIndexTerm1(term1, term2, term3 interface{}) (interface{}, error) {
	return types.NewConcealedIndexTerm(term1, term2, term3)

}

func (p *parser) callonConcealedIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm1(stack["term1"], stack["term2"], stack["term3"])
}

func (c *current) onConcealedIndexTermContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonConcealedIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTermContent1()
}

func (c *current) onBlankLine1() (interface{}, error) {
	return types.NewBlankLine()
}

func (p *parser) callonBlankLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlankLine1()
}

func (c *current) onApostrophe1() (interface{}, error) {
	return types.NewStringElement("\u2019")
}

func (p *parser) callonApostrophe1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onApostrophe1()
}

func (c *current) onCopyright1() (interface{}, error) {
	return types.NewStringElement("\u00a9")
}

func (p *parser) callonCopyright1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCopyright1()
}

func (c *current) onTrademark1() (interface{}, error) {
	return types.NewStringElement("\u2122")
}

func (p *parser) callonTrademark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTrademark1()
}

func (c *current) onRegistered1() (interface{}, error) {
	return types.NewStringElement("\u00ae")
}

func (p *parser) callonRegistered1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRegistered1()
}

func (c *current) onEllipsis1() (interface{}, error) {
	return types.NewStringElement("\u2026\u200b")
}

func (p *parser) callonEllipsis1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEllipsis1()
}

func (c *current) onImpliedApostrophe1() (interface{}, error) {
	return types.NewStringElement(string(c.text[:1]) + "\u2019")
}

func (p *parser) callonImpliedApostrophe1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImpliedApostrophe1()
}

func (c *current) onSpecialCharacter2() (interface{}, error) {
	// if we have a InternalCrossReference we just return a StringElement.
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonSpecialCharacter2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacter2()
}

func (c *current) onSpecialCharacter4() (interface{}, error) {
	return types.NewSpecialCharacter(string(c.text))

}

func (p *parser) callonSpecialCharacter4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpecialCharacter4()
}

func (c *current) onAlphanums1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAlphanums1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAlphanums1()
}

func (c *current) onWord2() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord2()
}

func (c *current) onWord10() (interface{}, error) {
	// allow `
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord10()
}

func (c *current) onInlineWord2() (interface{}, error) {
	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineWord2()
}

func (c *current) onAnyChar1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonAnyChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyChar1()
}

func (c *current) onFileLocation1(path interface{}) (interface{}, error) {
	return types.NewLocation("", path.([]interface{}))
}

func (p *parser) callonFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation1(stack["path"])
}

func (c *current) onLocation1(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocation1(stack["scheme"], stack["path"])
}

func (c *current) onLocationWithScheme1(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonLocationWithScheme1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocationWithScheme1(stack["scheme"], stack["path"])
}

func (c *current) onFilename1() (interface{}, error) {
	// not supported for now: EOL, space, "[", "]"
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonFilename1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFilename1()
}

func (c *current) onId1() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil
}

func (p *parser) callonId1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onId1()
}

func (c *current) onDigit1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDigit1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDigit1()
}

func (c *current) onNumber1() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonNumber1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNumber1()
}

func (c *current) onSpace3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSpace3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpace3()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() interface{}
}

var statePool = &sync.Pool{
	New: func() interface{} { return make(storeDict) },
}

func (sd storeDict) Discard() {
	for k := range sd {
		delete(sd, k)
	}
	statePool.Put(sd)
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {

	state := statePool.Get().(storeDict)
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	p.cur.state.Discard()
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {
	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			return val, ok
		}
		p.restoreState(state)
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (interface{}, bool) {
	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}
