// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/bytesparadise/libasciidoc/pkg/types"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "AsciidocDocument",
			pos:  position{line: 17, col: 1, offset: 319},
			expr: &actionExpr{
				pos: position{line: 17, col: 21, offset: 339},
				run: (*parser).callonAsciidocDocument1,
				expr: &seqExpr{
					pos: position{line: 17, col: 21, offset: 339},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 17, col: 21, offset: 339},
							label: "frontmatter",
							expr: &zeroOrOneExpr{
								pos: position{line: 17, col: 34, offset: 352},
								expr: &ruleRefExpr{
									pos:  position{line: 17, col: 34, offset: 352},
									name: "FrontMatter",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 17, col: 48, offset: 366},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 17, col: 56, offset: 374},
								name: "AsciidocDocumentBlocks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 17, col: 80, offset: 398},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "VerbatimDocument",
			pos:  position{line: 21, col: 1, offset: 478},
			expr: &actionExpr{
				pos: position{line: 21, col: 21, offset: 498},
				run: (*parser).callonVerbatimDocument1,
				expr: &seqExpr{
					pos: position{line: 21, col: 21, offset: 498},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 21, col: 21, offset: 498},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 21, col: 29, offset: 506},
								name: "VerbatimFileContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 21, col: 50, offset: 527},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "TextDocument",
			pos:  position{line: 26, col: 1, offset: 627},
			expr: &actionExpr{
				pos: position{line: 26, col: 17, offset: 643},
				run: (*parser).callonTextDocument1,
				expr: &seqExpr{
					pos: position{line: 26, col: 17, offset: 643},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 26, col: 17, offset: 643},
							label: "blocks",
							expr: &ruleRefExpr{
								pos:  position{line: 26, col: 25, offset: 651},
								name: "TextDocumentBlocks",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 26, col: 45, offset: 671},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "AsciidocDocumentBlocks",
			pos:  position{line: 33, col: 1, offset: 854},
			expr: &actionExpr{
				pos: position{line: 33, col: 27, offset: 880},
				run: (*parser).callonAsciidocDocumentBlocks1,
				expr: &seqExpr{
					pos: position{line: 33, col: 27, offset: 880},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 33, col: 27, offset: 880},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 33, col: 35, offset: 888},
								expr: &ruleRefExpr{
									pos:  position{line: 33, col: 35, offset: 888},
									name: "DocumentHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 33, col: 52, offset: 905},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 33, col: 60, offset: 913},
								expr: &ruleRefExpr{
									pos:  position{line: 33, col: 60, offset: 913},
									name: "DocumentBlock",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentBlock",
			pos:  position{line: 42, col: 1, offset: 1162},
			expr: &choiceExpr{
				pos: position{line: 43, col: 9, offset: 1188},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 43, col: 9, offset: 1188},
						name: "LabeledListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 44, col: 11, offset: 1253},
						name: "SimpleParagraph",
					},
					&ruleRefExpr{
						pos:  position{line: 45, col: 11, offset: 1279},
						name: "BlankLine",
					},
					&ruleRefExpr{
						pos:  position{line: 46, col: 11, offset: 1331},
						name: "Section",
					},
					&ruleRefExpr{
						pos:  position{line: 47, col: 11, offset: 1349},
						name: "DelimitedBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 48, col: 11, offset: 1374},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 49, col: 11, offset: 1398},
						name: "VerseParagraph",
					},
					&ruleRefExpr{
						pos:  position{line: 50, col: 11, offset: 1452},
						name: "ImageBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 51, col: 11, offset: 1474},
						name: "OrderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 52, col: 11, offset: 1501},
						name: "UnorderedListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 53, col: 11, offset: 1530},
						name: "CalloutListItem",
					},
					&ruleRefExpr{
						pos:  position{line: 54, col: 11, offset: 1556},
						name: "ContinuedListItemElement",
					},
					&ruleRefExpr{
						pos:  position{line: 55, col: 11, offset: 1591},
						name: "LiteralBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 56, col: 11, offset: 1615},
						name: "DocumentAttributeDeclaration",
					},
					&ruleRefExpr{
						pos:  position{line: 57, col: 11, offset: 1655},
						name: "DocumentAttributeReset",
					},
					&ruleRefExpr{
						pos:  position{line: 58, col: 11, offset: 1689},
						name: "TableOfContentsPlaceHolder",
					},
					&ruleRefExpr{
						pos:  position{line: 59, col: 11, offset: 1726},
						name: "UserMacroBlock",
					},
					&ruleRefExpr{
						pos:  position{line: 60, col: 11, offset: 1751},
						name: "Paragraph",
					},
				},
			},
		},
		{
			name: "AsciidocDocumentBlocksWithinDelimitedBlock",
			pos:  position{line: 62, col: 1, offset: 1762},
			expr: &labeledExpr{
				pos:   position{line: 62, col: 47, offset: 1808},
				label: "blocks",
				expr: &zeroOrMoreExpr{
					pos: position{line: 62, col: 54, offset: 1815},
					expr: &ruleRefExpr{
						pos:  position{line: 62, col: 55, offset: 1816},
						name: "DocumentBlockWithinDelimitedBlock",
					},
				},
			},
		},
		{
			name: "DocumentBlockWithinDelimitedBlock",
			pos:  position{line: 64, col: 1, offset: 1853},
			expr: &actionExpr{
				pos: position{line: 64, col: 38, offset: 1890},
				run: (*parser).callonDocumentBlockWithinDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 64, col: 38, offset: 1890},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 64, col: 38, offset: 1890},
							expr: &ruleRefExpr{
								pos:  position{line: 64, col: 39, offset: 1891},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 65, col: 5, offset: 1900},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 65, col: 12, offset: 1907},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 65, col: 12, offset: 1907},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 66, col: 11, offset: 1932},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 67, col: 11, offset: 1984},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 68, col: 11, offset: 2008},
										name: "VerseParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 69, col: 11, offset: 2033},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 70, col: 11, offset: 2055},
										name: "OrderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 71, col: 11, offset: 2082},
										name: "UnorderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 72, col: 11, offset: 2111},
										name: "LabeledListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 73, col: 11, offset: 2138},
										name: "ContinuedListItemElement",
									},
									&ruleRefExpr{
										pos:  position{line: 74, col: 11, offset: 2173},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 75, col: 11, offset: 2197},
										name: "DocumentAttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 76, col: 11, offset: 2237},
										name: "DocumentAttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 77, col: 11, offset: 2271},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 78, col: 11, offset: 2308},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 79, col: 11, offset: 2333},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TextDocumentBlocks",
			pos:  position{line: 83, col: 1, offset: 2371},
			expr: &labeledExpr{
				pos:   position{line: 83, col: 23, offset: 2393},
				label: "blocks",
				expr: &zeroOrMoreExpr{
					pos: position{line: 83, col: 30, offset: 2400},
					expr: &ruleRefExpr{
						pos:  position{line: 83, col: 31, offset: 2401},
						name: "TextDocumentBlock",
					},
				},
			},
		},
		{
			name: "TextDocumentBlock",
			pos:  position{line: 85, col: 1, offset: 2422},
			expr: &actionExpr{
				pos: position{line: 85, col: 22, offset: 2443},
				run: (*parser).callonTextDocumentBlock1,
				expr: &seqExpr{
					pos: position{line: 85, col: 22, offset: 2443},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 85, col: 22, offset: 2443},
							expr: &ruleRefExpr{
								pos:  position{line: 85, col: 23, offset: 2444},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 86, col: 5, offset: 2453},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 86, col: 12, offset: 2460},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 86, col: 12, offset: 2460},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 86, col: 24, offset: 2472},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FrontMatter",
			pos:  position{line: 93, col: 1, offset: 2618},
			expr: &ruleRefExpr{
				pos:  position{line: 93, col: 16, offset: 2633},
				name: "YamlFrontMatter",
			},
		},
		{
			name: "YamlFrontMatter",
			pos:  position{line: 95, col: 1, offset: 2651},
			expr: &actionExpr{
				pos: position{line: 95, col: 20, offset: 2670},
				run: (*parser).callonYamlFrontMatter1,
				expr: &seqExpr{
					pos: position{line: 95, col: 20, offset: 2670},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 95, col: 20, offset: 2670},
							name: "YamlFrontMatterToken",
						},
						&labeledExpr{
							pos:   position{line: 95, col: 41, offset: 2691},
							label: "content",
							expr: &zeroOrOneExpr{
								pos: position{line: 95, col: 49, offset: 2699},
								expr: &ruleRefExpr{
									pos:  position{line: 95, col: 50, offset: 2700},
									name: "YamlFrontMatterContent",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 95, col: 75, offset: 2725},
							name: "YamlFrontMatterToken",
						},
					},
				},
			},
		},
		{
			name: "YamlFrontMatterToken",
			pos:  position{line: 99, col: 1, offset: 2805},
			expr: &seqExpr{
				pos: position{line: 99, col: 26, offset: 2830},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 99, col: 26, offset: 2830},
						val:        "---",
						ignoreCase: false,
						want:       "\"---\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 99, col: 32, offset: 2836},
						expr: &ruleRefExpr{
							pos:  position{line: 99, col: 32, offset: 2836},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 99, col: 39, offset: 2843},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "YamlFrontMatterContent",
			pos:  position{line: 101, col: 1, offset: 2848},
			expr: &actionExpr{
				pos: position{line: 101, col: 27, offset: 2874},
				run: (*parser).callonYamlFrontMatterContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 101, col: 27, offset: 2874},
					expr: &oneOrMoreExpr{
						pos: position{line: 101, col: 28, offset: 2875},
						expr: &seqExpr{
							pos: position{line: 101, col: 29, offset: 2876},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 101, col: 29, offset: 2876},
									expr: &ruleRefExpr{
										pos:  position{line: 101, col: 30, offset: 2877},
										name: "YamlFrontMatterToken",
									},
								},
								&anyMatcher{
									line: 101, col: 51, offset: 2898,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentHeader",
			pos:  position{line: 108, col: 1, offset: 3064},
			expr: &actionExpr{
				pos: position{line: 108, col: 19, offset: 3082},
				run: (*parser).callonDocumentHeader1,
				expr: &seqExpr{
					pos: position{line: 108, col: 19, offset: 3082},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 108, col: 19, offset: 3082},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 108, col: 23, offset: 3086},
							expr: &ruleRefExpr{
								pos:  position{line: 108, col: 23, offset: 3086},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 108, col: 30, offset: 3093},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 108, col: 37, offset: 3100},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 108, col: 52, offset: 3115},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 108, col: 56, offset: 3119},
								expr: &ruleRefExpr{
									pos:  position{line: 108, col: 56, offset: 3119},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 108, col: 74, offset: 3137},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 109, col: 9, offset: 3149},
							expr: &choiceExpr{
								pos: position{line: 109, col: 10, offset: 3150},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 109, col: 10, offset: 3150},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 109, col: 30, offset: 3170},
										name: "CommentBlock",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 110, col: 9, offset: 3193},
							label: "authors",
							expr: &zeroOrOneExpr{
								pos: position{line: 110, col: 18, offset: 3202},
								expr: &ruleRefExpr{
									pos:  position{line: 110, col: 18, offset: 3202},
									name: "DocumentAuthors",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 111, col: 9, offset: 3229},
							expr: &choiceExpr{
								pos: position{line: 111, col: 10, offset: 3230},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 111, col: 10, offset: 3230},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 111, col: 30, offset: 3250},
										name: "CommentBlock",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 112, col: 9, offset: 3273},
							label: "revision",
							expr: &zeroOrOneExpr{
								pos: position{line: 112, col: 19, offset: 3283},
								expr: &ruleRefExpr{
									pos:  position{line: 112, col: 19, offset: 3283},
									name: "DocumentRevision",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthors",
			pos:  position{line: 116, col: 1, offset: 3384},
			expr: &choiceExpr{
				pos: position{line: 116, col: 20, offset: 3403},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 116, col: 20, offset: 3403},
						name: "DocumentAuthorsInlineForm",
					},
					&ruleRefExpr{
						pos:  position{line: 116, col: 48, offset: 3431},
						name: "DocumentAuthorsAttributeForm",
					},
				},
			},
		},
		{
			name: "DocumentAuthorsInlineForm",
			pos:  position{line: 118, col: 1, offset: 3461},
			expr: &actionExpr{
				pos: position{line: 118, col: 30, offset: 3490},
				run: (*parser).callonDocumentAuthorsInlineForm1,
				expr: &seqExpr{
					pos: position{line: 118, col: 30, offset: 3490},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 118, col: 30, offset: 3490},
							expr: &ruleRefExpr{
								pos:  position{line: 118, col: 30, offset: 3490},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 118, col: 37, offset: 3497},
							expr: &litMatcher{
								pos:        position{line: 118, col: 38, offset: 3498},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 118, col: 42, offset: 3502},
							label: "authors",
							expr: &oneOrMoreExpr{
								pos: position{line: 118, col: 51, offset: 3511},
								expr: &ruleRefExpr{
									pos:  position{line: 118, col: 51, offset: 3511},
									name: "DocumentAuthor",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 118, col: 68, offset: 3528},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorsAttributeForm",
			pos:  position{line: 122, col: 1, offset: 3598},
			expr: &actionExpr{
				pos: position{line: 122, col: 33, offset: 3630},
				run: (*parser).callonDocumentAuthorsAttributeForm1,
				expr: &seqExpr{
					pos: position{line: 122, col: 33, offset: 3630},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 122, col: 33, offset: 3630},
							expr: &ruleRefExpr{
								pos:  position{line: 122, col: 33, offset: 3630},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 122, col: 40, offset: 3637},
							val:        ":author:",
							ignoreCase: false,
							want:       "\":author:\"",
						},
						&labeledExpr{
							pos:   position{line: 122, col: 51, offset: 3648},
							label: "author",
							expr: &ruleRefExpr{
								pos:  position{line: 122, col: 59, offset: 3656},
								name: "DocumentAuthor",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 122, col: 75, offset: 3672},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthor",
			pos:  position{line: 126, col: 1, offset: 3751},
			expr: &actionExpr{
				pos: position{line: 126, col: 19, offset: 3769},
				run: (*parser).callonDocumentAuthor1,
				expr: &seqExpr{
					pos: position{line: 126, col: 19, offset: 3769},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 126, col: 19, offset: 3769},
							expr: &ruleRefExpr{
								pos:  position{line: 126, col: 19, offset: 3769},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 126, col: 26, offset: 3776},
							label: "fullname",
							expr: &ruleRefExpr{
								pos:  position{line: 126, col: 36, offset: 3786},
								name: "DocumentAuthorName",
							},
						},
						&labeledExpr{
							pos:   position{line: 126, col: 56, offset: 3806},
							label: "email",
							expr: &zeroOrOneExpr{
								pos: position{line: 126, col: 62, offset: 3812},
								expr: &ruleRefExpr{
									pos:  position{line: 126, col: 63, offset: 3813},
									name: "DocumentAuthorEmail",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 126, col: 85, offset: 3835},
							expr: &ruleRefExpr{
								pos:  position{line: 126, col: 85, offset: 3835},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 126, col: 92, offset: 3842},
							expr: &litMatcher{
								pos:        position{line: 126, col: 92, offset: 3842},
								val:        ";",
								ignoreCase: false,
								want:       "\";\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 126, col: 97, offset: 3847},
							expr: &ruleRefExpr{
								pos:  position{line: 126, col: 97, offset: 3847},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAuthorName",
			pos:  position{line: 131, col: 1, offset: 3992},
			expr: &actionExpr{
				pos: position{line: 131, col: 23, offset: 4014},
				run: (*parser).callonDocumentAuthorName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 131, col: 23, offset: 4014},
					expr: &charClassMatcher{
						pos:        position{line: 131, col: 23, offset: 4014},
						val:        "[^<;\\r\\n]",
						chars:      []rune{'<', ';', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentAuthorEmail",
			pos:  position{line: 135, col: 1, offset: 4061},
			expr: &actionExpr{
				pos: position{line: 135, col: 24, offset: 4084},
				run: (*parser).callonDocumentAuthorEmail1,
				expr: &seqExpr{
					pos: position{line: 135, col: 24, offset: 4084},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 135, col: 24, offset: 4084},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 135, col: 28, offset: 4088},
							label: "email",
							expr: &actionExpr{
								pos: position{line: 135, col: 35, offset: 4095},
								run: (*parser).callonDocumentAuthorEmail5,
								expr: &oneOrMoreExpr{
									pos: position{line: 135, col: 36, offset: 4096},
									expr: &charClassMatcher{
										pos:        position{line: 135, col: 36, offset: 4096},
										val:        "[^>\\r\\n]",
										chars:      []rune{'>', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 137, col: 4, offset: 4143},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevision",
			pos:  position{line: 143, col: 1, offset: 4304},
			expr: &actionExpr{
				pos: position{line: 143, col: 21, offset: 4324},
				run: (*parser).callonDocumentRevision1,
				expr: &seqExpr{
					pos: position{line: 143, col: 21, offset: 4324},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 143, col: 21, offset: 4324},
							expr: &ruleRefExpr{
								pos:  position{line: 143, col: 21, offset: 4324},
								name: "Space",
							},
						},
						&notExpr{
							pos: position{line: 143, col: 28, offset: 4331},
							expr: &litMatcher{
								pos:        position{line: 143, col: 29, offset: 4332},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 143, col: 33, offset: 4336},
							label: "revision",
							expr: &choiceExpr{
								pos: position{line: 144, col: 9, offset: 4355},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 144, col: 10, offset: 4356},
										run: (*parser).callonDocumentRevision9,
										expr: &seqExpr{
											pos: position{line: 144, col: 10, offset: 4356},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 144, col: 10, offset: 4356},
													label: "revnumber",
													expr: &ruleRefExpr{
														pos:  position{line: 144, col: 21, offset: 4367},
														name: "DocumentRevisionNumber",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 144, col: 45, offset: 4391},
													expr: &litMatcher{
														pos:        position{line: 144, col: 45, offset: 4391},
														val:        ",",
														ignoreCase: false,
														want:       "\",\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 144, col: 50, offset: 4396},
													label: "revdate",
													expr: &zeroOrOneExpr{
														pos: position{line: 144, col: 58, offset: 4404},
														expr: &ruleRefExpr{
															pos:  position{line: 144, col: 59, offset: 4405},
															name: "DocumentRevisionDate",
														},
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 144, col: 82, offset: 4428},
													expr: &litMatcher{
														pos:        position{line: 144, col: 82, offset: 4428},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 144, col: 87, offset: 4433},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 144, col: 97, offset: 4443},
														expr: &ruleRefExpr{
															pos:  position{line: 144, col: 98, offset: 4444},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 146, col: 15, offset: 4561},
										run: (*parser).callonDocumentRevision23,
										expr: &seqExpr{
											pos: position{line: 146, col: 15, offset: 4561},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 146, col: 15, offset: 4561},
													label: "revdate",
													expr: &ruleRefExpr{
														pos:  position{line: 146, col: 24, offset: 4570},
														name: "DocumentRevisionDate",
													},
												},
												&zeroOrOneExpr{
													pos: position{line: 146, col: 46, offset: 4592},
													expr: &litMatcher{
														pos:        position{line: 146, col: 46, offset: 4592},
														val:        ":",
														ignoreCase: false,
														want:       "\":\"",
													},
												},
												&labeledExpr{
													pos:   position{line: 146, col: 51, offset: 4597},
													label: "revremark",
													expr: &zeroOrOneExpr{
														pos: position{line: 146, col: 61, offset: 4607},
														expr: &ruleRefExpr{
															pos:  position{line: 146, col: 62, offset: 4608},
															name: "DocumentRevisionRemark",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 148, col: 13, offset: 4717},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionNumber",
			pos:  position{line: 153, col: 1, offset: 4847},
			expr: &choiceExpr{
				pos: position{line: 153, col: 27, offset: 4873},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 153, col: 27, offset: 4873},
						run: (*parser).callonDocumentRevisionNumber2,
						expr: &seqExpr{
							pos: position{line: 153, col: 27, offset: 4873},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 153, col: 27, offset: 4873},
									val:        "v",
									ignoreCase: true,
									want:       "\"v\"i",
								},
								&ruleRefExpr{
									pos:  position{line: 153, col: 32, offset: 4878},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 153, col: 39, offset: 4885},
									expr: &charClassMatcher{
										pos:        position{line: 153, col: 39, offset: 4885},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 155, col: 5, offset: 4933},
						run: (*parser).callonDocumentRevisionNumber8,
						expr: &seqExpr{
							pos: position{line: 155, col: 5, offset: 4933},
							exprs: []interface{}{
								&zeroOrOneExpr{
									pos: position{line: 155, col: 5, offset: 4933},
									expr: &litMatcher{
										pos:        position{line: 155, col: 5, offset: 4933},
										val:        "v",
										ignoreCase: true,
										want:       "\"v\"i",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 155, col: 11, offset: 4939},
									name: "DIGIT",
								},
								&oneOrMoreExpr{
									pos: position{line: 155, col: 18, offset: 4946},
									expr: &charClassMatcher{
										pos:        position{line: 155, col: 18, offset: 4946},
										val:        "[^:,\\r\\n]",
										chars:      []rune{':', ',', '\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 155, col: 29, offset: 4957},
									expr: &ruleRefExpr{
										pos:  position{line: 155, col: 29, offset: 4957},
										name: "Space",
									},
								},
								&andExpr{
									pos: position{line: 155, col: 36, offset: 4964},
									expr: &litMatcher{
										pos:        position{line: 155, col: 37, offset: 4965},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentRevisionDate",
			pos:  position{line: 159, col: 1, offset: 5005},
			expr: &actionExpr{
				pos: position{line: 159, col: 25, offset: 5029},
				run: (*parser).callonDocumentRevisionDate1,
				expr: &oneOrMoreExpr{
					pos: position{line: 159, col: 25, offset: 5029},
					expr: &charClassMatcher{
						pos:        position{line: 159, col: 25, offset: 5029},
						val:        "[^:\\r\\n]",
						chars:      []rune{':', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentRevisionRemark",
			pos:  position{line: 163, col: 1, offset: 5075},
			expr: &actionExpr{
				pos: position{line: 163, col: 27, offset: 5101},
				run: (*parser).callonDocumentRevisionRemark1,
				expr: &oneOrMoreExpr{
					pos: position{line: 163, col: 27, offset: 5101},
					expr: &charClassMatcher{
						pos:        position{line: 163, col: 27, offset: 5101},
						val:        "[^\\r\\r\\n]",
						chars:      []rune{'\r', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentAttributeDeclaration",
			pos:  position{line: 170, col: 1, offset: 5263},
			expr: &actionExpr{
				pos: position{line: 170, col: 33, offset: 5295},
				run: (*parser).callonDocumentAttributeDeclaration1,
				expr: &seqExpr{
					pos: position{line: 170, col: 33, offset: 5295},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 170, col: 33, offset: 5295},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 170, col: 37, offset: 5299},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 170, col: 43, offset: 5305},
								name: "DocumentAttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 170, col: 66, offset: 5328},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 171, col: 9, offset: 5341},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 171, col: 15, offset: 5347},
								expr: &actionExpr{
									pos: position{line: 171, col: 16, offset: 5348},
									run: (*parser).callonDocumentAttributeDeclaration9,
									expr: &seqExpr{
										pos: position{line: 171, col: 17, offset: 5349},
										exprs: []interface{}{
											&oneOrMoreExpr{
												pos: position{line: 171, col: 17, offset: 5349},
												expr: &ruleRefExpr{
													pos:  position{line: 171, col: 17, offset: 5349},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 171, col: 24, offset: 5356},
												label: "value",
												expr: &ruleRefExpr{
													pos:  position{line: 171, col: 31, offset: 5363},
													name: "DocumentAttributeValue",
												},
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 173, col: 13, offset: 5434},
							expr: &ruleRefExpr{
								pos:  position{line: 173, col: 13, offset: 5434},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 173, col: 20, offset: 5441},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeName",
			pos:  position{line: 180, col: 1, offset: 5689},
			expr: &actionExpr{
				pos: position{line: 180, col: 26, offset: 5714},
				run: (*parser).callonDocumentAttributeName1,
				expr: &seqExpr{
					pos: position{line: 180, col: 26, offset: 5714},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 180, col: 26, offset: 5714},
							val:        "[\\pL0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 180, col: 36, offset: 5724},
							expr: &charClassMatcher{
								pos:        position{line: 180, col: 37, offset: 5725},
								val:        "[\\pL0-9-]",
								chars:      []rune{'-'},
								ranges:     []rune{'0', '9'},
								classes:    []*unicode.RangeTable{rangeTable("L")},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeValue",
			pos:  position{line: 184, col: 1, offset: 5773},
			expr: &actionExpr{
				pos: position{line: 184, col: 27, offset: 5799},
				run: (*parser).callonDocumentAttributeValue1,
				expr: &oneOrMoreExpr{
					pos: position{line: 184, col: 27, offset: 5799},
					expr: &charClassMatcher{
						pos:        position{line: 184, col: 27, offset: 5799},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DocumentAttributeReset",
			pos:  position{line: 188, col: 1, offset: 5844},
			expr: &choiceExpr{
				pos: position{line: 188, col: 27, offset: 5870},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 188, col: 27, offset: 5870},
						run: (*parser).callonDocumentAttributeReset2,
						expr: &seqExpr{
							pos: position{line: 188, col: 27, offset: 5870},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 188, col: 27, offset: 5870},
									val:        ":!",
									ignoreCase: false,
									want:       "\":!\"",
								},
								&labeledExpr{
									pos:   position{line: 188, col: 32, offset: 5875},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 188, col: 38, offset: 5881},
										name: "DocumentAttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 188, col: 61, offset: 5904},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 188, col: 65, offset: 5908},
									expr: &ruleRefExpr{
										pos:  position{line: 188, col: 65, offset: 5908},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 188, col: 72, offset: 5915},
									name: "EOL",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 190, col: 5, offset: 5983},
						run: (*parser).callonDocumentAttributeReset11,
						expr: &seqExpr{
							pos: position{line: 190, col: 5, offset: 5983},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 190, col: 5, offset: 5983},
									val:        ":",
									ignoreCase: false,
									want:       "\":\"",
								},
								&labeledExpr{
									pos:   position{line: 190, col: 9, offset: 5987},
									label: "name",
									expr: &ruleRefExpr{
										pos:  position{line: 190, col: 15, offset: 5993},
										name: "DocumentAttributeName",
									},
								},
								&litMatcher{
									pos:        position{line: 190, col: 38, offset: 6016},
									val:        "!:",
									ignoreCase: false,
									want:       "\"!:\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 190, col: 43, offset: 6021},
									expr: &ruleRefExpr{
										pos:  position{line: 190, col: 43, offset: 6021},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 190, col: 50, offset: 6028},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DocumentAttributeSubstitution",
			pos:  position{line: 194, col: 1, offset: 6095},
			expr: &actionExpr{
				pos: position{line: 194, col: 34, offset: 6128},
				run: (*parser).callonDocumentAttributeSubstitution1,
				expr: &seqExpr{
					pos: position{line: 194, col: 34, offset: 6128},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 194, col: 34, offset: 6128},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&labeledExpr{
							pos:   position{line: 194, col: 38, offset: 6132},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 194, col: 44, offset: 6138},
								name: "DocumentAttributeName",
							},
						},
						&litMatcher{
							pos:        position{line: 194, col: 67, offset: 6161},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "ElementAttributes",
			pos:  position{line: 201, col: 1, offset: 6349},
			expr: &actionExpr{
				pos: position{line: 201, col: 22, offset: 6370},
				run: (*parser).callonElementAttributes1,
				expr: &seqExpr{
					pos: position{line: 201, col: 22, offset: 6370},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 201, col: 22, offset: 6370},
							label: "attrs",
							expr: &oneOrMoreExpr{
								pos: position{line: 201, col: 28, offset: 6376},
								expr: &ruleRefExpr{
									pos:  position{line: 201, col: 29, offset: 6377},
									name: "ElementAttribute",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 201, col: 48, offset: 6396},
							expr: &ruleRefExpr{
								pos:  position{line: 201, col: 48, offset: 6396},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "ElementAttribute",
			pos:  position{line: 205, col: 1, offset: 6478},
			expr: &actionExpr{
				pos: position{line: 205, col: 21, offset: 6498},
				run: (*parser).callonElementAttribute1,
				expr: &seqExpr{
					pos: position{line: 205, col: 21, offset: 6498},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 205, col: 21, offset: 6498},
							expr: &choiceExpr{
								pos: position{line: 205, col: 23, offset: 6500},
								alternatives: []interface{}{
									&litMatcher{
										pos:        position{line: 205, col: 23, offset: 6500},
										val:        "[",
										ignoreCase: false,
										want:       "\"[\"",
									},
									&litMatcher{
										pos:        position{line: 205, col: 29, offset: 6506},
										val:        ".",
										ignoreCase: false,
										want:       "\".\"",
									},
									&litMatcher{
										pos:        position{line: 205, col: 35, offset: 6512},
										val:        "#",
										ignoreCase: false,
										want:       "\"#\"",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 206, col: 5, offset: 6588},
							label: "attr",
							expr: &choiceExpr{
								pos: position{line: 206, col: 11, offset: 6594},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 206, col: 11, offset: 6594},
										name: "ElementID",
									},
									&ruleRefExpr{
										pos:  position{line: 207, col: 9, offset: 6615},
										name: "ElementTitle",
									},
									&ruleRefExpr{
										pos:  position{line: 208, col: 9, offset: 6639},
										name: "ElementRole",
									},
									&ruleRefExpr{
										pos:  position{line: 209, col: 9, offset: 6662},
										name: "LiteralAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 210, col: 9, offset: 6690},
										name: "SourceAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 211, col: 9, offset: 6718},
										name: "QuoteAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 212, col: 9, offset: 6745},
										name: "VerseAttributes",
									},
									&ruleRefExpr{
										pos:  position{line: 213, col: 9, offset: 6772},
										name: "AdmonitionMarkerAttribute",
									},
									&ruleRefExpr{
										pos:  position{line: 214, col: 9, offset: 6809},
										name: "HorizontalLayout",
									},
									&ruleRefExpr{
										pos:  position{line: 215, col: 9, offset: 6837},
										name: "AttributeGroup",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MasqueradeAttribute",
			pos:  position{line: 220, col: 1, offset: 7020},
			expr: &choiceExpr{
				pos: position{line: 220, col: 24, offset: 7043},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 220, col: 24, offset: 7043},
						name: "QuoteAttributes",
					},
					&ruleRefExpr{
						pos:  position{line: 220, col: 42, offset: 7061},
						name: "VerseAttributes",
					},
				},
			},
		},
		{
			name: "ElementID",
			pos:  position{line: 222, col: 1, offset: 7078},
			expr: &choiceExpr{
				pos: position{line: 222, col: 14, offset: 7091},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 222, col: 14, offset: 7091},
						run: (*parser).callonElementID2,
						expr: &seqExpr{
							pos: position{line: 222, col: 14, offset: 7091},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 222, col: 14, offset: 7091},
									val:        "[[",
									ignoreCase: false,
									want:       "\"[[\"",
								},
								&labeledExpr{
									pos:   position{line: 222, col: 19, offset: 7096},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 222, col: 23, offset: 7100},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 222, col: 27, offset: 7104},
									val:        "]]",
									ignoreCase: false,
									want:       "\"]]\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 222, col: 32, offset: 7109},
									expr: &ruleRefExpr{
										pos:  position{line: 222, col: 32, offset: 7109},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 222, col: 39, offset: 7116},
									name: "EOL",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 224, col: 5, offset: 7169},
						run: (*parser).callonElementID11,
						expr: &seqExpr{
							pos: position{line: 224, col: 5, offset: 7169},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 224, col: 5, offset: 7169},
									val:        "[#",
									ignoreCase: false,
									want:       "\"[#\"",
								},
								&labeledExpr{
									pos:   position{line: 224, col: 10, offset: 7174},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 224, col: 14, offset: 7178},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 224, col: 18, offset: 7182},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
								&zeroOrMoreExpr{
									pos: position{line: 224, col: 23, offset: 7187},
									expr: &ruleRefExpr{
										pos:  position{line: 224, col: 23, offset: 7187},
										name: "Space",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 224, col: 30, offset: 7194},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElementID",
			pos:  position{line: 228, col: 1, offset: 7246},
			expr: &actionExpr{
				pos: position{line: 228, col: 20, offset: 7265},
				run: (*parser).callonInlineElementID1,
				expr: &seqExpr{
					pos: position{line: 228, col: 20, offset: 7265},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 228, col: 20, offset: 7265},
							val:        "[[",
							ignoreCase: false,
							want:       "\"[[\"",
						},
						&labeledExpr{
							pos:   position{line: 228, col: 25, offset: 7270},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 228, col: 29, offset: 7274},
								name: "ID",
							},
						},
						&litMatcher{
							pos:        position{line: 228, col: 33, offset: 7278},
							val:        "]]",
							ignoreCase: false,
							want:       "\"]]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 228, col: 38, offset: 7283},
							expr: &ruleRefExpr{
								pos:  position{line: 228, col: 38, offset: 7283},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "ElementTitle",
			pos:  position{line: 234, col: 1, offset: 7560},
			expr: &actionExpr{
				pos: position{line: 234, col: 17, offset: 7576},
				run: (*parser).callonElementTitle1,
				expr: &seqExpr{
					pos: position{line: 234, col: 17, offset: 7576},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 234, col: 17, offset: 7576},
							val:        ".",
							ignoreCase: false,
							want:       "\".\"",
						},
						&labeledExpr{
							pos:   position{line: 234, col: 21, offset: 7580},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 234, col: 28, offset: 7587},
								name: "ElementTitleContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 234, col: 49, offset: 7608},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ElementTitleContent",
			pos:  position{line: 238, col: 1, offset: 7666},
			expr: &actionExpr{
				pos: position{line: 238, col: 24, offset: 7689},
				run: (*parser).callonElementTitleContent1,
				expr: &seqExpr{
					pos: position{line: 238, col: 24, offset: 7689},
					exprs: []interface{}{
						&charClassMatcher{
							pos:        position{line: 238, col: 24, offset: 7689},
							val:        "[\\pL0-9]",
							ranges:     []rune{'0', '9'},
							classes:    []*unicode.RangeTable{rangeTable("L")},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 238, col: 32, offset: 7697},
							expr: &charClassMatcher{
								pos:        position{line: 238, col: 32, offset: 7697},
								val:        "[^\\r\\n<>]",
								chars:      []rune{'\r', '\n', '<', '>'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "ElementRole",
			pos:  position{line: 244, col: 1, offset: 7924},
			expr: &actionExpr{
				pos: position{line: 244, col: 16, offset: 7939},
				run: (*parser).callonElementRole1,
				expr: &seqExpr{
					pos: position{line: 244, col: 16, offset: 7939},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 244, col: 16, offset: 7939},
							val:        "[.",
							ignoreCase: false,
							want:       "\"[.\"",
						},
						&labeledExpr{
							pos:   position{line: 244, col: 21, offset: 7944},
							label: "role",
							expr: &actionExpr{
								pos: position{line: 244, col: 27, offset: 7950},
								run: (*parser).callonElementRole5,
								expr: &seqExpr{
									pos: position{line: 244, col: 27, offset: 7950},
									exprs: []interface{}{
										&charClassMatcher{
											pos:        position{line: 244, col: 27, offset: 7950},
											val:        "[\\pL0-9]",
											ranges:     []rune{'0', '9'},
											classes:    []*unicode.RangeTable{rangeTable("L")},
											ignoreCase: false,
											inverted:   false,
										},
										&zeroOrMoreExpr{
											pos: position{line: 244, col: 36, offset: 7959},
											expr: &charClassMatcher{
												pos:        position{line: 244, col: 36, offset: 7959},
												val:        "[^\\]\\r\\n]",
												chars:      []rune{']', '\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 246, col: 4, offset: 8006},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 246, col: 8, offset: 8010},
							expr: &ruleRefExpr{
								pos:  position{line: 246, col: 8, offset: 8010},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 246, col: 15, offset: 8017},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "LiteralAttribute",
			pos:  position{line: 250, col: 1, offset: 8073},
			expr: &actionExpr{
				pos: position{line: 250, col: 21, offset: 8093},
				run: (*parser).callonLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 250, col: 21, offset: 8093},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 250, col: 21, offset: 8093},
							val:        "[literal]",
							ignoreCase: false,
							want:       "\"[literal]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 250, col: 33, offset: 8105},
							expr: &ruleRefExpr{
								pos:  position{line: 250, col: 33, offset: 8105},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 250, col: 40, offset: 8112},
							name: "Newline",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionMarkerAttribute",
			pos:  position{line: 255, col: 1, offset: 8244},
			expr: &actionExpr{
				pos: position{line: 255, col: 30, offset: 8273},
				run: (*parser).callonAdmonitionMarkerAttribute1,
				expr: &seqExpr{
					pos: position{line: 255, col: 30, offset: 8273},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 255, col: 30, offset: 8273},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 255, col: 34, offset: 8277},
							label: "k",
							expr: &ruleRefExpr{
								pos:  position{line: 255, col: 37, offset: 8280},
								name: "AdmonitionKind",
							},
						},
						&litMatcher{
							pos:        position{line: 255, col: 53, offset: 8296},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 255, col: 57, offset: 8300},
							expr: &ruleRefExpr{
								pos:  position{line: 255, col: 57, offset: 8300},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 255, col: 64, offset: 8307},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SourceAttributes",
			pos:  position{line: 260, col: 1, offset: 8462},
			expr: &actionExpr{
				pos: position{line: 260, col: 21, offset: 8482},
				run: (*parser).callonSourceAttributes1,
				expr: &seqExpr{
					pos: position{line: 260, col: 21, offset: 8482},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 260, col: 21, offset: 8482},
							val:        "[source",
							ignoreCase: false,
							want:       "\"[source\"",
						},
						&labeledExpr{
							pos:   position{line: 261, col: 5, offset: 8497},
							label: "language",
							expr: &zeroOrOneExpr{
								pos: position{line: 261, col: 14, offset: 8506},
								expr: &actionExpr{
									pos: position{line: 261, col: 15, offset: 8507},
									run: (*parser).callonSourceAttributes6,
									expr: &seqExpr{
										pos: position{line: 261, col: 15, offset: 8507},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 261, col: 15, offset: 8507},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 261, col: 19, offset: 8511},
												label: "attr",
												expr: &zeroOrOneExpr{
													pos: position{line: 261, col: 24, offset: 8516},
													expr: &ruleRefExpr{
														pos:  position{line: 261, col: 25, offset: 8517},
														name: "StandaloneAttributeValue",
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 262, col: 5, offset: 8572},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 262, col: 12, offset: 8579},
								expr: &actionExpr{
									pos: position{line: 262, col: 13, offset: 8580},
									run: (*parser).callonSourceAttributes14,
									expr: &seqExpr{
										pos: position{line: 262, col: 13, offset: 8580},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 262, col: 13, offset: 8580},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 262, col: 17, offset: 8584},
												label: "attr",
												expr: &zeroOrOneExpr{
													pos: position{line: 262, col: 22, offset: 8589},
													expr: &ruleRefExpr{
														pos:  position{line: 262, col: 23, offset: 8590},
														name: "GenericAttribute",
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 263, col: 5, offset: 8637},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 263, col: 9, offset: 8641},
							expr: &ruleRefExpr{
								pos:  position{line: 263, col: 9, offset: 8641},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 263, col: 16, offset: 8648},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "AttributeGroup",
			pos:  position{line: 268, col: 1, offset: 8799},
			expr: &actionExpr{
				pos: position{line: 268, col: 19, offset: 8817},
				run: (*parser).callonAttributeGroup1,
				expr: &seqExpr{
					pos: position{line: 268, col: 19, offset: 8817},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 268, col: 19, offset: 8817},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 268, col: 23, offset: 8821},
							label: "attributes",
							expr: &zeroOrMoreExpr{
								pos: position{line: 268, col: 34, offset: 8832},
								expr: &ruleRefExpr{
									pos:  position{line: 268, col: 35, offset: 8833},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 268, col: 54, offset: 8852},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 268, col: 58, offset: 8856},
							expr: &ruleRefExpr{
								pos:  position{line: 268, col: 58, offset: 8856},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 268, col: 65, offset: 8863},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "GenericAttribute",
			pos:  position{line: 272, col: 1, offset: 8935},
			expr: &choiceExpr{
				pos: position{line: 272, col: 21, offset: 8955},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 272, col: 21, offset: 8955},
						name: "GenericAttributeWithValue",
					},
					&ruleRefExpr{
						pos:  position{line: 272, col: 49, offset: 8983},
						name: "GenericAttributeWithoutValue",
					},
				},
			},
		},
		{
			name: "GenericAttributeWithValue",
			pos:  position{line: 274, col: 1, offset: 9013},
			expr: &actionExpr{
				pos: position{line: 274, col: 30, offset: 9042},
				run: (*parser).callonGenericAttributeWithValue1,
				expr: &seqExpr{
					pos: position{line: 274, col: 30, offset: 9042},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 274, col: 30, offset: 9042},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 274, col: 35, offset: 9047},
								name: "AttributeKey",
							},
						},
						&litMatcher{
							pos:        position{line: 274, col: 49, offset: 9061},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&labeledExpr{
							pos:   position{line: 274, col: 53, offset: 9065},
							label: "value",
							expr: &zeroOrOneExpr{
								pos: position{line: 274, col: 59, offset: 9071},
								expr: &ruleRefExpr{
									pos:  position{line: 274, col: 60, offset: 9072},
									name: "AttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 274, col: 77, offset: 9089},
							expr: &litMatcher{
								pos:        position{line: 274, col: 77, offset: 9089},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 274, col: 82, offset: 9094},
							expr: &ruleRefExpr{
								pos:  position{line: 274, col: 82, offset: 9094},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "GenericAttributeWithoutValue",
			pos:  position{line: 278, col: 1, offset: 9193},
			expr: &actionExpr{
				pos: position{line: 278, col: 33, offset: 9225},
				run: (*parser).callonGenericAttributeWithoutValue1,
				expr: &seqExpr{
					pos: position{line: 278, col: 33, offset: 9225},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 278, col: 33, offset: 9225},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 278, col: 38, offset: 9230},
								name: "AttributeKey",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 278, col: 52, offset: 9244},
							expr: &litMatcher{
								pos:        position{line: 278, col: 52, offset: 9244},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 278, col: 57, offset: 9249},
							expr: &ruleRefExpr{
								pos:  position{line: 278, col: 57, offset: 9249},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeKey",
			pos:  position{line: 282, col: 1, offset: 9337},
			expr: &actionExpr{
				pos: position{line: 282, col: 17, offset: 9353},
				run: (*parser).callonAttributeKey1,
				expr: &seqExpr{
					pos: position{line: 282, col: 17, offset: 9353},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 282, col: 17, offset: 9353},
							expr: &litMatcher{
								pos:        position{line: 282, col: 18, offset: 9354},
								val:        "quote",
								ignoreCase: false,
								want:       "\"quote\"",
							},
						},
						&notExpr{
							pos: position{line: 282, col: 26, offset: 9362},
							expr: &litMatcher{
								pos:        position{line: 282, col: 27, offset: 9363},
								val:        "verse",
								ignoreCase: false,
								want:       "\"verse\"",
							},
						},
						&notExpr{
							pos: position{line: 282, col: 35, offset: 9371},
							expr: &litMatcher{
								pos:        position{line: 282, col: 36, offset: 9372},
								val:        "literal",
								ignoreCase: false,
								want:       "\"literal\"",
							},
						},
						&notExpr{
							pos: position{line: 282, col: 46, offset: 9382},
							expr: &oneOrMoreExpr{
								pos: position{line: 282, col: 48, offset: 9384},
								expr: &ruleRefExpr{
									pos:  position{line: 282, col: 48, offset: 9384},
									name: "Space",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 282, col: 56, offset: 9392},
							label: "key",
							expr: &oneOrMoreExpr{
								pos: position{line: 282, col: 61, offset: 9397},
								expr: &charClassMatcher{
									pos:        position{line: 282, col: 61, offset: 9397},
									val:        "[^\\r\\n=,\\]]",
									chars:      []rune{'\r', '\n', '=', ',', ']'},
									ignoreCase: false,
									inverted:   true,
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 282, col: 75, offset: 9411},
							expr: &ruleRefExpr{
								pos:  position{line: 282, col: 75, offset: 9411},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeValue",
			pos:  position{line: 286, col: 1, offset: 9454},
			expr: &actionExpr{
				pos: position{line: 286, col: 19, offset: 9472},
				run: (*parser).callonAttributeValue1,
				expr: &labeledExpr{
					pos:   position{line: 286, col: 19, offset: 9472},
					label: "value",
					expr: &oneOrMoreExpr{
						pos: position{line: 286, col: 26, offset: 9479},
						expr: &charClassMatcher{
							pos:        position{line: 286, col: 26, offset: 9479},
							val:        "[^\\r\\n=,\\]]",
							chars:      []rune{'\r', '\n', '=', ',', ']'},
							ignoreCase: false,
							inverted:   true,
						},
					},
				},
			},
		},
		{
			name: "StandaloneAttributeValue",
			pos:  position{line: 290, col: 1, offset: 9530},
			expr: &actionExpr{
				pos: position{line: 290, col: 29, offset: 9558},
				run: (*parser).callonStandaloneAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 290, col: 29, offset: 9558},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 290, col: 29, offset: 9558},
							label: "value",
							expr: &oneOrMoreExpr{
								pos: position{line: 290, col: 36, offset: 9565},
								expr: &charClassMatcher{
									pos:        position{line: 290, col: 36, offset: 9565},
									val:        "[^\\r\\n=,\\]]",
									chars:      []rune{'\r', '\n', '=', ',', ']'},
									ignoreCase: false,
									inverted:   true,
								},
							},
						},
						&notExpr{
							pos: position{line: 290, col: 50, offset: 9579},
							expr: &litMatcher{
								pos:        position{line: 290, col: 51, offset: 9580},
								val:        "=",
								ignoreCase: false,
								want:       "\"=\"",
							},
						},
					},
				},
			},
		},
		{
			name: "HorizontalLayout",
			pos:  position{line: 294, col: 1, offset: 9746},
			expr: &actionExpr{
				pos: position{line: 294, col: 21, offset: 9766},
				run: (*parser).callonHorizontalLayout1,
				expr: &seqExpr{
					pos: position{line: 294, col: 21, offset: 9766},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 294, col: 21, offset: 9766},
							val:        "[horizontal]",
							ignoreCase: false,
							want:       "\"[horizontal]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 294, col: 36, offset: 9781},
							expr: &ruleRefExpr{
								pos:  position{line: 294, col: 36, offset: 9781},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 294, col: 43, offset: 9788},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "QuoteAttributes",
			pos:  position{line: 298, col: 1, offset: 9861},
			expr: &actionExpr{
				pos: position{line: 298, col: 20, offset: 9880},
				run: (*parser).callonQuoteAttributes1,
				expr: &seqExpr{
					pos: position{line: 298, col: 20, offset: 9880},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 298, col: 20, offset: 9880},
							val:        "[quote",
							ignoreCase: false,
							want:       "\"[quote\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 298, col: 29, offset: 9889},
							expr: &ruleRefExpr{
								pos:  position{line: 298, col: 29, offset: 9889},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 298, col: 36, offset: 9896},
							expr: &litMatcher{
								pos:        position{line: 298, col: 36, offset: 9896},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 298, col: 41, offset: 9901},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 298, col: 48, offset: 9908},
								expr: &ruleRefExpr{
									pos:  position{line: 298, col: 49, offset: 9909},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 298, col: 66, offset: 9926},
							expr: &litMatcher{
								pos:        position{line: 298, col: 66, offset: 9926},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 298, col: 71, offset: 9931},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 298, col: 77, offset: 9937},
								expr: &ruleRefExpr{
									pos:  position{line: 298, col: 78, offset: 9938},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 298, col: 95, offset: 9955},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 298, col: 99, offset: 9959},
							expr: &ruleRefExpr{
								pos:  position{line: 298, col: 99, offset: 9959},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 298, col: 106, offset: 9966},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "VerseAttributes",
			pos:  position{line: 302, col: 1, offset: 10035},
			expr: &actionExpr{
				pos: position{line: 302, col: 20, offset: 10054},
				run: (*parser).callonVerseAttributes1,
				expr: &seqExpr{
					pos: position{line: 302, col: 20, offset: 10054},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 302, col: 20, offset: 10054},
							val:        "[verse",
							ignoreCase: false,
							want:       "\"[verse\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 302, col: 29, offset: 10063},
							expr: &ruleRefExpr{
								pos:  position{line: 302, col: 29, offset: 10063},
								name: "Space",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 302, col: 36, offset: 10070},
							expr: &litMatcher{
								pos:        position{line: 302, col: 36, offset: 10070},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 302, col: 41, offset: 10075},
							label: "author",
							expr: &zeroOrOneExpr{
								pos: position{line: 302, col: 48, offset: 10082},
								expr: &ruleRefExpr{
									pos:  position{line: 302, col: 49, offset: 10083},
									name: "QuoteAttribute",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 302, col: 66, offset: 10100},
							expr: &litMatcher{
								pos:        position{line: 302, col: 66, offset: 10100},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 302, col: 71, offset: 10105},
							label: "title",
							expr: &zeroOrOneExpr{
								pos: position{line: 302, col: 77, offset: 10111},
								expr: &ruleRefExpr{
									pos:  position{line: 302, col: 78, offset: 10112},
									name: "QuoteAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 302, col: 95, offset: 10129},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 302, col: 99, offset: 10133},
							expr: &ruleRefExpr{
								pos:  position{line: 302, col: 99, offset: 10133},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 302, col: 106, offset: 10140},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "QuoteAttribute",
			pos:  position{line: 306, col: 1, offset: 10227},
			expr: &actionExpr{
				pos: position{line: 306, col: 19, offset: 10245},
				run: (*parser).callonQuoteAttribute1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 306, col: 20, offset: 10246},
					expr: &charClassMatcher{
						pos:        position{line: 306, col: 20, offset: 10246},
						val:        "[^\\r\\n,\\]]",
						chars:      []rune{'\r', '\n', ',', ']'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "InlineAttributes",
			pos:  position{line: 310, col: 1, offset: 10295},
			expr: &actionExpr{
				pos: position{line: 310, col: 21, offset: 10315},
				run: (*parser).callonInlineAttributes1,
				expr: &seqExpr{
					pos: position{line: 310, col: 21, offset: 10315},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 310, col: 21, offset: 10315},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 310, col: 25, offset: 10319},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 310, col: 31, offset: 10325},
								expr: &ruleRefExpr{
									pos:  position{line: 310, col: 32, offset: 10326},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 310, col: 51, offset: 10345},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "Section",
			pos:  position{line: 317, col: 1, offset: 10519},
			expr: &actionExpr{
				pos: position{line: 317, col: 12, offset: 10530},
				run: (*parser).callonSection1,
				expr: &seqExpr{
					pos: position{line: 317, col: 12, offset: 10530},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 317, col: 12, offset: 10530},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 317, col: 23, offset: 10541},
								expr: &ruleRefExpr{
									pos:  position{line: 317, col: 24, offset: 10542},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 318, col: 5, offset: 10566},
							label: "level",
							expr: &actionExpr{
								pos: position{line: 318, col: 12, offset: 10573},
								run: (*parser).callonSection7,
								expr: &oneOrMoreExpr{
									pos: position{line: 318, col: 12, offset: 10573},
									expr: &litMatcher{
										pos:        position{line: 318, col: 13, offset: 10574},
										val:        "=",
										ignoreCase: false,
										want:       "\"=\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 322, col: 5, offset: 10665},
							run: (*parser).callonSection10,
						},
						&oneOrMoreExpr{
							pos: position{line: 326, col: 5, offset: 10817},
							expr: &ruleRefExpr{
								pos:  position{line: 326, col: 5, offset: 10817},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 326, col: 12, offset: 10824},
							label: "title",
							expr: &ruleRefExpr{
								pos:  position{line: 326, col: 19, offset: 10831},
								name: "TitleElements",
							},
						},
						&labeledExpr{
							pos:   position{line: 326, col: 34, offset: 10846},
							label: "id",
							expr: &zeroOrMoreExpr{
								pos: position{line: 326, col: 38, offset: 10850},
								expr: &ruleRefExpr{
									pos:  position{line: 326, col: 38, offset: 10850},
									name: "InlineElementID",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 326, col: 56, offset: 10868},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "TitleElements",
			pos:  position{line: 330, col: 1, offset: 10974},
			expr: &actionExpr{
				pos: position{line: 330, col: 18, offset: 10991},
				run: (*parser).callonTitleElements1,
				expr: &labeledExpr{
					pos:   position{line: 330, col: 18, offset: 10991},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 330, col: 27, offset: 11000},
						expr: &seqExpr{
							pos: position{line: 330, col: 28, offset: 11001},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 330, col: 28, offset: 11001},
									expr: &ruleRefExpr{
										pos:  position{line: 330, col: 29, offset: 11002},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 330, col: 37, offset: 11010},
									expr: &ruleRefExpr{
										pos:  position{line: 330, col: 38, offset: 11011},
										name: "InlineElementID",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 330, col: 54, offset: 11027},
									name: "TitleElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TitleElement",
			pos:  position{line: 334, col: 1, offset: 11148},
			expr: &actionExpr{
				pos: position{line: 334, col: 17, offset: 11164},
				run: (*parser).callonTitleElement1,
				expr: &labeledExpr{
					pos:   position{line: 334, col: 17, offset: 11164},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 334, col: 26, offset: 11173},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 334, col: 26, offset: 11173},
								name: "Word",
							},
							&ruleRefExpr{
								pos:  position{line: 335, col: 11, offset: 11188},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 336, col: 11, offset: 11233},
								expr: &ruleRefExpr{
									pos:  position{line: 336, col: 11, offset: 11233},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 337, col: 11, offset: 11251},
								name: "CrossReference",
							},
							&ruleRefExpr{
								pos:  position{line: 338, col: 11, offset: 11276},
								name: "Passthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 339, col: 11, offset: 11298},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 340, col: 11, offset: 11321},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 341, col: 11, offset: 11336},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 342, col: 11, offset: 11361},
								name: "QuotedText",
							},
							&ruleRefExpr{
								pos:  position{line: 343, col: 11, offset: 11382},
								name: "DocumentAttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 344, col: 11, offset: 11422},
								name: "AnyChar",
							},
						},
					},
				},
			},
		},
		{
			name: "TableOfContentsPlaceHolder",
			pos:  position{line: 351, col: 1, offset: 11573},
			expr: &seqExpr{
				pos: position{line: 351, col: 31, offset: 11603},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 351, col: 31, offset: 11603},
						val:        "toc::[]",
						ignoreCase: false,
						want:       "\"toc::[]\"",
					},
					&ruleRefExpr{
						pos:  position{line: 351, col: 41, offset: 11613},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "UserMacroBlock",
			pos:  position{line: 356, col: 1, offset: 11724},
			expr: &actionExpr{
				pos: position{line: 356, col: 19, offset: 11742},
				run: (*parser).callonUserMacroBlock1,
				expr: &seqExpr{
					pos: position{line: 356, col: 19, offset: 11742},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 356, col: 19, offset: 11742},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 356, col: 25, offset: 11748},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 356, col: 40, offset: 11763},
							val:        "::",
							ignoreCase: false,
							want:       "\"::\"",
						},
						&labeledExpr{
							pos:   position{line: 356, col: 45, offset: 11768},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 356, col: 52, offset: 11775},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 356, col: 68, offset: 11791},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 356, col: 75, offset: 11798},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "InlineUserMacro",
			pos:  position{line: 360, col: 1, offset: 11939},
			expr: &actionExpr{
				pos: position{line: 360, col: 20, offset: 11958},
				run: (*parser).callonInlineUserMacro1,
				expr: &seqExpr{
					pos: position{line: 360, col: 20, offset: 11958},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 360, col: 20, offset: 11958},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 360, col: 26, offset: 11964},
								name: "UserMacroName",
							},
						},
						&litMatcher{
							pos:        position{line: 360, col: 41, offset: 11979},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&labeledExpr{
							pos:   position{line: 360, col: 45, offset: 11983},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 360, col: 52, offset: 11990},
								name: "UserMacroValue",
							},
						},
						&labeledExpr{
							pos:   position{line: 360, col: 68, offset: 12006},
							label: "attrs",
							expr: &ruleRefExpr{
								pos:  position{line: 360, col: 75, offset: 12013},
								name: "UserMacroAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "UserMacroName",
			pos:  position{line: 364, col: 1, offset: 12155},
			expr: &actionExpr{
				pos: position{line: 364, col: 18, offset: 12172},
				run: (*parser).callonUserMacroName1,
				expr: &oneOrMoreExpr{
					pos: position{line: 364, col: 19, offset: 12173},
					expr: &charClassMatcher{
						pos:        position{line: 364, col: 19, offset: 12173},
						val:        "[\\pL0-9_-]",
						chars:      []rune{'_', '-'},
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "UserMacroValue",
			pos:  position{line: 368, col: 1, offset: 12222},
			expr: &actionExpr{
				pos: position{line: 368, col: 19, offset: 12240},
				run: (*parser).callonUserMacroValue1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 368, col: 19, offset: 12240},
					expr: &charClassMatcher{
						pos:        position{line: 368, col: 19, offset: 12240},
						val:        "[^:[ \\r\\n]",
						chars:      []rune{':', '[', ' ', '\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "UserMacroAttributes",
			pos:  position{line: 372, col: 1, offset: 12288},
			expr: &actionExpr{
				pos: position{line: 372, col: 24, offset: 12311},
				run: (*parser).callonUserMacroAttributes1,
				expr: &seqExpr{
					pos: position{line: 372, col: 24, offset: 12311},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 372, col: 24, offset: 12311},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 372, col: 28, offset: 12315},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 372, col: 34, offset: 12321},
								expr: &ruleRefExpr{
									pos:  position{line: 372, col: 35, offset: 12322},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 372, col: 54, offset: 12341},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FileInclusion",
			pos:  position{line: 379, col: 1, offset: 12521},
			expr: &actionExpr{
				pos: position{line: 379, col: 18, offset: 12538},
				run: (*parser).callonFileInclusion1,
				expr: &seqExpr{
					pos: position{line: 379, col: 18, offset: 12538},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 379, col: 18, offset: 12538},
							label: "incl",
							expr: &actionExpr{
								pos: position{line: 379, col: 24, offset: 12544},
								run: (*parser).callonFileInclusion4,
								expr: &seqExpr{
									pos: position{line: 379, col: 24, offset: 12544},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 379, col: 24, offset: 12544},
											val:        "include::",
											ignoreCase: false,
											want:       "\"include::\"",
										},
										&labeledExpr{
											pos:   position{line: 379, col: 36, offset: 12556},
											label: "path",
											expr: &ruleRefExpr{
												pos:  position{line: 379, col: 42, offset: 12562},
												name: "FileLocation",
											},
										},
										&labeledExpr{
											pos:   position{line: 379, col: 56, offset: 12576},
											label: "inlineAttributes",
											expr: &ruleRefExpr{
												pos:  position{line: 379, col: 74, offset: 12594},
												name: "FileIncludeAttributes",
											},
										},
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 381, col: 8, offset: 12748},
							expr: &ruleRefExpr{
								pos:  position{line: 381, col: 8, offset: 12748},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 381, col: 15, offset: 12755},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "FileIncludeAttributes",
			pos:  position{line: 385, col: 1, offset: 12807},
			expr: &actionExpr{
				pos: position{line: 385, col: 26, offset: 12832},
				run: (*parser).callonFileIncludeAttributes1,
				expr: &seqExpr{
					pos: position{line: 385, col: 26, offset: 12832},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 385, col: 26, offset: 12832},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 385, col: 30, offset: 12836},
							label: "attrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 385, col: 36, offset: 12842},
								expr: &choiceExpr{
									pos: position{line: 385, col: 37, offset: 12843},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 385, col: 37, offset: 12843},
											name: "LineRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 385, col: 59, offset: 12865},
											name: "TagRangesAttribute",
										},
										&ruleRefExpr{
											pos:  position{line: 385, col: 80, offset: 12886},
											name: "GenericAttribute",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 385, col: 99, offset: 12905},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttribute",
			pos:  position{line: 389, col: 1, offset: 12975},
			expr: &actionExpr{
				pos: position{line: 389, col: 24, offset: 12998},
				run: (*parser).callonLineRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 389, col: 24, offset: 12998},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 389, col: 24, offset: 12998},
							val:        "lines=",
							ignoreCase: false,
							want:       "\"lines=\"",
						},
						&labeledExpr{
							pos:   position{line: 389, col: 33, offset: 13007},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 389, col: 40, offset: 13014},
								name: "LineRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 389, col: 66, offset: 13040},
							expr: &litMatcher{
								pos:        position{line: 389, col: 66, offset: 13040},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
					},
				},
			},
		},
		{
			name: "LineRangesAttributeValue",
			pos:  position{line: 393, col: 1, offset: 13099},
			expr: &actionExpr{
				pos: position{line: 393, col: 29, offset: 13127},
				run: (*parser).callonLineRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 393, col: 29, offset: 13127},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 393, col: 29, offset: 13127},
							label: "value",
							expr: &choiceExpr{
								pos: position{line: 393, col: 36, offset: 13134},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 393, col: 36, offset: 13134},
										name: "MultipleLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 394, col: 11, offset: 13251},
										name: "MultipleQuotedLineRanges",
									},
									&ruleRefExpr{
										pos:  position{line: 395, col: 11, offset: 13287},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 396, col: 11, offset: 13313},
										name: "MultiLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 397, col: 11, offset: 13345},
										name: "SingleLineQuotedRange",
									},
									&ruleRefExpr{
										pos:  position{line: 398, col: 11, offset: 13377},
										name: "SingleLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 399, col: 11, offset: 13404},
										name: "UndefinedLineRange",
									},
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 399, col: 31, offset: 13424},
							expr: &ruleRefExpr{
								pos:  position{line: 399, col: 31, offset: 13424},
								name: "Space",
							},
						},
						&choiceExpr{
							pos: position{line: 399, col: 39, offset: 13432},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 399, col: 39, offset: 13432},
									expr: &litMatcher{
										pos:        position{line: 399, col: 40, offset: 13433},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
								&andExpr{
									pos: position{line: 399, col: 46, offset: 13439},
									expr: &litMatcher{
										pos:        position{line: 399, col: 47, offset: 13440},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleLineRanges",
			pos:  position{line: 403, col: 1, offset: 13472},
			expr: &actionExpr{
				pos: position{line: 403, col: 23, offset: 13494},
				run: (*parser).callonMultipleLineRanges1,
				expr: &seqExpr{
					pos: position{line: 403, col: 23, offset: 13494},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 403, col: 23, offset: 13494},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 403, col: 30, offset: 13501},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 403, col: 30, offset: 13501},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 403, col: 47, offset: 13518},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 404, col: 5, offset: 13540},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 404, col: 12, offset: 13547},
								expr: &actionExpr{
									pos: position{line: 404, col: 13, offset: 13548},
									run: (*parser).callonMultipleLineRanges9,
									expr: &seqExpr{
										pos: position{line: 404, col: 13, offset: 13548},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 404, col: 13, offset: 13548},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&labeledExpr{
												pos:   position{line: 404, col: 17, offset: 13552},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 404, col: 24, offset: 13559},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 404, col: 24, offset: 13559},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 404, col: 41, offset: 13576},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleQuotedLineRanges",
			pos:  position{line: 410, col: 1, offset: 13714},
			expr: &actionExpr{
				pos: position{line: 410, col: 29, offset: 13742},
				run: (*parser).callonMultipleQuotedLineRanges1,
				expr: &seqExpr{
					pos: position{line: 410, col: 29, offset: 13742},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 410, col: 29, offset: 13742},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 410, col: 34, offset: 13747},
							label: "first",
							expr: &choiceExpr{
								pos: position{line: 410, col: 41, offset: 13754},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 410, col: 41, offset: 13754},
										name: "MultiLineRange",
									},
									&ruleRefExpr{
										pos:  position{line: 410, col: 58, offset: 13771},
										name: "SingleLineRange",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 411, col: 5, offset: 13793},
							label: "others",
							expr: &oneOrMoreExpr{
								pos: position{line: 411, col: 12, offset: 13800},
								expr: &actionExpr{
									pos: position{line: 411, col: 13, offset: 13801},
									run: (*parser).callonMultipleQuotedLineRanges10,
									expr: &seqExpr{
										pos: position{line: 411, col: 13, offset: 13801},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 411, col: 13, offset: 13801},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&labeledExpr{
												pos:   position{line: 411, col: 17, offset: 13805},
												label: "other",
												expr: &choiceExpr{
													pos: position{line: 411, col: 24, offset: 13812},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 411, col: 24, offset: 13812},
															name: "MultiLineRange",
														},
														&ruleRefExpr{
															pos:  position{line: 411, col: 41, offset: 13829},
															name: "SingleLineRange",
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 413, col: 9, offset: 13882},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "MultiLineRange",
			pos:  position{line: 417, col: 1, offset: 13972},
			expr: &actionExpr{
				pos: position{line: 417, col: 19, offset: 13990},
				run: (*parser).callonMultiLineRange1,
				expr: &seqExpr{
					pos: position{line: 417, col: 19, offset: 13990},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 417, col: 19, offset: 13990},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 417, col: 26, offset: 13997},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 417, col: 34, offset: 14005},
							val:        "..",
							ignoreCase: false,
							want:       "\"..\"",
						},
						&labeledExpr{
							pos:   position{line: 417, col: 39, offset: 14010},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 417, col: 44, offset: 14015},
								name: "NUMBER",
							},
						},
					},
				},
			},
		},
		{
			name: "MultiLineQuotedRange",
			pos:  position{line: 421, col: 1, offset: 14103},
			expr: &actionExpr{
				pos: position{line: 421, col: 25, offset: 14127},
				run: (*parser).callonMultiLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 421, col: 25, offset: 14127},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 421, col: 25, offset: 14127},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 421, col: 30, offset: 14132},
							label: "start",
							expr: &ruleRefExpr{
								pos:  position{line: 421, col: 37, offset: 14139},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 421, col: 45, offset: 14147},
							val:        "..",
							ignoreCase: false,
							want:       "\"..\"",
						},
						&labeledExpr{
							pos:   position{line: 421, col: 50, offset: 14152},
							label: "end",
							expr: &ruleRefExpr{
								pos:  position{line: 421, col: 55, offset: 14157},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 421, col: 63, offset: 14165},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "SingleLineRange",
			pos:  position{line: 425, col: 1, offset: 14250},
			expr: &actionExpr{
				pos: position{line: 425, col: 20, offset: 14269},
				run: (*parser).callonSingleLineRange1,
				expr: &labeledExpr{
					pos:   position{line: 425, col: 20, offset: 14269},
					label: "singleline",
					expr: &ruleRefExpr{
						pos:  position{line: 425, col: 32, offset: 14281},
						name: "NUMBER",
					},
				},
			},
		},
		{
			name: "SingleLineQuotedRange",
			pos:  position{line: 429, col: 1, offset: 14376},
			expr: &actionExpr{
				pos: position{line: 429, col: 26, offset: 14401},
				run: (*parser).callonSingleLineQuotedRange1,
				expr: &seqExpr{
					pos: position{line: 429, col: 26, offset: 14401},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 429, col: 26, offset: 14401},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&labeledExpr{
							pos:   position{line: 429, col: 31, offset: 14406},
							label: "singleline",
							expr: &ruleRefExpr{
								pos:  position{line: 429, col: 43, offset: 14418},
								name: "NUMBER",
							},
						},
						&litMatcher{
							pos:        position{line: 429, col: 51, offset: 14426},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "UndefinedLineRange",
			pos:  position{line: 433, col: 1, offset: 14518},
			expr: &actionExpr{
				pos: position{line: 433, col: 23, offset: 14540},
				run: (*parser).callonUndefinedLineRange1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 433, col: 23, offset: 14540},
					expr: &charClassMatcher{
						pos:        position{line: 433, col: 23, offset: 14540},
						val:        "[^\\], ]",
						chars:      []rune{']', ',', ' '},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "TagRangesAttribute",
			pos:  position{line: 437, col: 1, offset: 14585},
			expr: &actionExpr{
				pos: position{line: 437, col: 23, offset: 14607},
				run: (*parser).callonTagRangesAttribute1,
				expr: &seqExpr{
					pos: position{line: 437, col: 23, offset: 14607},
					exprs: []interface{}{
						&choiceExpr{
							pos: position{line: 437, col: 24, offset: 14608},
							alternatives: []interface{}{
								&litMatcher{
									pos:        position{line: 437, col: 24, offset: 14608},
									val:        "tags=",
									ignoreCase: false,
									want:       "\"tags=\"",
								},
								&litMatcher{
									pos:        position{line: 437, col: 34, offset: 14618},
									val:        "tag=",
									ignoreCase: false,
									want:       "\"tag=\"",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 437, col: 42, offset: 14626},
							label: "tags",
							expr: &ruleRefExpr{
								pos:  position{line: 437, col: 48, offset: 14632},
								name: "TagRangesAttributeValue",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 437, col: 73, offset: 14657},
							expr: &litMatcher{
								pos:        position{line: 437, col: 73, offset: 14657},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
					},
				},
			},
		},
		{
			name: "TagRangesAttributeValue",
			pos:  position{line: 441, col: 1, offset: 14806},
			expr: &actionExpr{
				pos: position{line: 441, col: 28, offset: 14833},
				run: (*parser).callonTagRangesAttributeValue1,
				expr: &seqExpr{
					pos: position{line: 441, col: 28, offset: 14833},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 441, col: 28, offset: 14833},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 441, col: 35, offset: 14840},
								name: "MultipleTagRanges",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 441, col: 54, offset: 14859},
							expr: &ruleRefExpr{
								pos:  position{line: 441, col: 54, offset: 14859},
								name: "Space",
							},
						},
						&choiceExpr{
							pos: position{line: 441, col: 62, offset: 14867},
							alternatives: []interface{}{
								&andExpr{
									pos: position{line: 441, col: 62, offset: 14867},
									expr: &litMatcher{
										pos:        position{line: 441, col: 63, offset: 14868},
										val:        ",",
										ignoreCase: false,
										want:       "\",\"",
									},
								},
								&andExpr{
									pos: position{line: 441, col: 69, offset: 14874},
									expr: &litMatcher{
										pos:        position{line: 441, col: 70, offset: 14875},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MultipleTagRanges",
			pos:  position{line: 445, col: 1, offset: 14907},
			expr: &actionExpr{
				pos: position{line: 445, col: 22, offset: 14928},
				run: (*parser).callonMultipleTagRanges1,
				expr: &seqExpr{
					pos: position{line: 445, col: 22, offset: 14928},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 445, col: 22, offset: 14928},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 445, col: 29, offset: 14935},
								name: "TagRange",
							},
						},
						&labeledExpr{
							pos:   position{line: 446, col: 5, offset: 14949},
							label: "others",
							expr: &zeroOrMoreExpr{
								pos: position{line: 446, col: 12, offset: 14956},
								expr: &actionExpr{
									pos: position{line: 446, col: 13, offset: 14957},
									run: (*parser).callonMultipleTagRanges7,
									expr: &seqExpr{
										pos: position{line: 446, col: 13, offset: 14957},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 446, col: 13, offset: 14957},
												val:        ";",
												ignoreCase: false,
												want:       "\";\"",
											},
											&labeledExpr{
												pos:   position{line: 446, col: 17, offset: 14961},
												label: "other",
												expr: &ruleRefExpr{
													pos:  position{line: 446, col: 24, offset: 14968},
													name: "TagRange",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagRange",
			pos:  position{line: 452, col: 1, offset: 15099},
			expr: &choiceExpr{
				pos: position{line: 452, col: 13, offset: 15111},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 452, col: 13, offset: 15111},
						run: (*parser).callonTagRange2,
						expr: &labeledExpr{
							pos:   position{line: 452, col: 13, offset: 15111},
							label: "tag",
							expr: &choiceExpr{
								pos: position{line: 452, col: 18, offset: 15116},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 452, col: 18, offset: 15116},
										name: "Alphanums",
									},
									&ruleRefExpr{
										pos:  position{line: 452, col: 30, offset: 15128},
										name: "TagWildcard",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 454, col: 5, offset: 15196},
						run: (*parser).callonTagRange7,
						expr: &seqExpr{
							pos: position{line: 454, col: 5, offset: 15196},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 454, col: 5, offset: 15196},
									val:        "!",
									ignoreCase: false,
									want:       "\"!\"",
								},
								&labeledExpr{
									pos:   position{line: 454, col: 9, offset: 15200},
									label: "tag",
									expr: &choiceExpr{
										pos: position{line: 454, col: 14, offset: 15205},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 454, col: 14, offset: 15205},
												name: "Alphanums",
											},
											&ruleRefExpr{
												pos:  position{line: 454, col: 26, offset: 15217},
												name: "TagWildcard",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TagWildcard",
			pos:  position{line: 458, col: 1, offset: 15285},
			expr: &actionExpr{
				pos: position{line: 458, col: 16, offset: 15300},
				run: (*parser).callonTagWildcard1,
				expr: &seqExpr{
					pos: position{line: 458, col: 16, offset: 15300},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 458, col: 16, offset: 15300},
							label: "stars",
							expr: &actionExpr{
								pos: position{line: 458, col: 23, offset: 15307},
								run: (*parser).callonTagWildcard4,
								expr: &oneOrMoreExpr{
									pos: position{line: 458, col: 23, offset: 15307},
									expr: &litMatcher{
										pos:        position{line: 458, col: 24, offset: 15308},
										val:        "*",
										ignoreCase: false,
										want:       "\"*\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 461, col: 5, offset: 15362},
							run: (*parser).callonTagWildcard7,
						},
					},
				},
			},
		},
		{
			name: "VerbatimFileContent",
			pos:  position{line: 469, col: 1, offset: 15604},
			expr: &zeroOrMoreExpr{
				pos: position{line: 469, col: 24, offset: 15627},
				expr: &choiceExpr{
					pos: position{line: 469, col: 25, offset: 15628},
					alternatives: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 469, col: 25, offset: 15628},
							name: "FileInclusion",
						},
						&ruleRefExpr{
							pos:  position{line: 469, col: 41, offset: 15644},
							name: "VerbatimFileLine",
						},
					},
				},
			},
		},
		{
			name: "VerbatimFileLine",
			pos:  position{line: 471, col: 1, offset: 15664},
			expr: &actionExpr{
				pos: position{line: 471, col: 21, offset: 15684},
				run: (*parser).callonVerbatimFileLine1,
				expr: &seqExpr{
					pos: position{line: 471, col: 21, offset: 15684},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 471, col: 21, offset: 15684},
							expr: &ruleRefExpr{
								pos:  position{line: 471, col: 22, offset: 15685},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 471, col: 26, offset: 15689},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 471, col: 35, offset: 15698},
								run: (*parser).callonVerbatimFileLine6,
								expr: &zeroOrMoreExpr{
									pos: position{line: 471, col: 35, offset: 15698},
									expr: &charClassMatcher{
										pos:        position{line: 471, col: 35, offset: 15698},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 473, col: 12, offset: 15760},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileLine",
			pos:  position{line: 480, col: 1, offset: 15959},
			expr: &actionExpr{
				pos: position{line: 480, col: 21, offset: 15979},
				run: (*parser).callonIncludedFileLine1,
				expr: &seqExpr{
					pos: position{line: 480, col: 21, offset: 15979},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 480, col: 21, offset: 15979},
							label: "content",
							expr: &zeroOrMoreExpr{
								pos: position{line: 480, col: 29, offset: 15987},
								expr: &choiceExpr{
									pos: position{line: 480, col: 30, offset: 15988},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 480, col: 30, offset: 15988},
											name: "IncludedFileStartTag",
										},
										&ruleRefExpr{
											pos:  position{line: 480, col: 53, offset: 16011},
											name: "IncludedFileEndTag",
										},
										&actionExpr{
											pos: position{line: 480, col: 74, offset: 16032},
											run: (*parser).callonIncludedFileLine8,
											expr: &anyMatcher{
												line: 480, col: 74, offset: 16032,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 480, col: 107, offset: 16065},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileStartTag",
			pos:  position{line: 484, col: 1, offset: 16136},
			expr: &actionExpr{
				pos: position{line: 484, col: 25, offset: 16160},
				run: (*parser).callonIncludedFileStartTag1,
				expr: &seqExpr{
					pos: position{line: 484, col: 25, offset: 16160},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 484, col: 25, offset: 16160},
							val:        "tag::",
							ignoreCase: false,
							want:       "\"tag::\"",
						},
						&labeledExpr{
							pos:   position{line: 484, col: 33, offset: 16168},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 484, col: 38, offset: 16173},
								run: (*parser).callonIncludedFileStartTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 484, col: 38, offset: 16173},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 484, col: 78, offset: 16213},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "IncludedFileEndTag",
			pos:  position{line: 488, col: 1, offset: 16278},
			expr: &actionExpr{
				pos: position{line: 488, col: 23, offset: 16300},
				run: (*parser).callonIncludedFileEndTag1,
				expr: &seqExpr{
					pos: position{line: 488, col: 23, offset: 16300},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 488, col: 23, offset: 16300},
							val:        "end::",
							ignoreCase: false,
							want:       "\"end::\"",
						},
						&labeledExpr{
							pos:   position{line: 488, col: 31, offset: 16308},
							label: "tag",
							expr: &actionExpr{
								pos: position{line: 488, col: 36, offset: 16313},
								run: (*parser).callonIncludedFileEndTag5,
								expr: &ruleRefExpr{
									pos:  position{line: 488, col: 36, offset: 16313},
									name: "Alphanums",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 488, col: 76, offset: 16353},
							val:        "[]",
							ignoreCase: false,
							want:       "\"[]\"",
						},
					},
				},
			},
		},
		{
			name: "ListParagraph",
			pos:  position{line: 495, col: 1, offset: 16517},
			expr: &choiceExpr{
				pos: position{line: 495, col: 18, offset: 16534},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 495, col: 18, offset: 16534},
						run: (*parser).callonListParagraph2,
						expr: &labeledExpr{
							pos:   position{line: 495, col: 18, offset: 16534},
							label: "comment",
							expr: &ruleRefExpr{
								pos:  position{line: 495, col: 27, offset: 16543},
								name: "SingleLineComment",
							},
						},
					},
					&actionExpr{
						pos: position{line: 497, col: 9, offset: 16600},
						run: (*parser).callonListParagraph5,
						expr: &labeledExpr{
							pos:   position{line: 497, col: 9, offset: 16600},
							label: "lines",
							expr: &oneOrMoreExpr{
								pos: position{line: 497, col: 15, offset: 16606},
								expr: &ruleRefExpr{
									pos:  position{line: 497, col: 16, offset: 16607},
									name: "ListParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListParagraphLine",
			pos:  position{line: 501, col: 1, offset: 16699},
			expr: &actionExpr{
				pos: position{line: 501, col: 22, offset: 16720},
				run: (*parser).callonListParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 501, col: 22, offset: 16720},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 501, col: 22, offset: 16720},
							expr: &ruleRefExpr{
								pos:  position{line: 501, col: 23, offset: 16721},
								name: "EOF",
							},
						},
						&notExpr{
							pos: position{line: 502, col: 5, offset: 16729},
							expr: &ruleRefExpr{
								pos:  position{line: 502, col: 6, offset: 16730},
								name: "BlankLine",
							},
						},
						&notExpr{
							pos: position{line: 503, col: 5, offset: 16745},
							expr: &ruleRefExpr{
								pos:  position{line: 503, col: 6, offset: 16746},
								name: "SingleLineComment",
							},
						},
						&notExpr{
							pos: position{line: 504, col: 5, offset: 16768},
							expr: &ruleRefExpr{
								pos:  position{line: 504, col: 6, offset: 16769},
								name: "OrderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 505, col: 5, offset: 16795},
							expr: &ruleRefExpr{
								pos:  position{line: 505, col: 6, offset: 16796},
								name: "UnorderedListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 506, col: 5, offset: 16824},
							expr: &ruleRefExpr{
								pos:  position{line: 506, col: 6, offset: 16825},
								name: "CalloutListItemPrefix",
							},
						},
						&notExpr{
							pos: position{line: 507, col: 5, offset: 16851},
							expr: &ruleRefExpr{
								pos:  position{line: 507, col: 6, offset: 16852},
								name: "ListItemContinuation",
							},
						},
						&notExpr{
							pos: position{line: 508, col: 5, offset: 16877},
							expr: &ruleRefExpr{
								pos:  position{line: 508, col: 6, offset: 16878},
								name: "ElementAttribute",
							},
						},
						&notExpr{
							pos: position{line: 509, col: 5, offset: 16899},
							expr: &ruleRefExpr{
								pos:  position{line: 509, col: 6, offset: 16900},
								name: "BlockDelimiter",
							},
						},
						&notExpr{
							pos: position{line: 510, col: 5, offset: 16919},
							expr: &ruleRefExpr{
								pos:  position{line: 510, col: 6, offset: 16920},
								name: "LabeledListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 511, col: 5, offset: 16947},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 511, col: 11, offset: 16953},
								run: (*parser).callonListParagraphLine24,
								expr: &labeledExpr{
									pos:   position{line: 511, col: 11, offset: 16953},
									label: "elements",
									expr: &oneOrMoreExpr{
										pos: position{line: 511, col: 20, offset: 16962},
										expr: &ruleRefExpr{
											pos:  position{line: 511, col: 21, offset: 16963},
											name: "InlineElement",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 513, col: 12, offset: 17062},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ListItemContinuation",
			pos:  position{line: 517, col: 1, offset: 17101},
			expr: &seqExpr{
				pos: position{line: 517, col: 25, offset: 17125},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 517, col: 25, offset: 17125},
						val:        "+",
						ignoreCase: false,
						want:       "\"+\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 517, col: 29, offset: 17129},
						expr: &ruleRefExpr{
							pos:  position{line: 517, col: 29, offset: 17129},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 517, col: 36, offset: 17136},
						name: "Newline",
					},
				},
			},
		},
		{
			name: "ContinuedListItemElement",
			pos:  position{line: 519, col: 1, offset: 17208},
			expr: &actionExpr{
				pos: position{line: 519, col: 29, offset: 17236},
				run: (*parser).callonContinuedListItemElement1,
				expr: &seqExpr{
					pos: position{line: 519, col: 29, offset: 17236},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 519, col: 29, offset: 17236},
							name: "ListItemContinuation",
						},
						&labeledExpr{
							pos:   position{line: 519, col: 50, offset: 17257},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 519, col: 58, offset: 17265},
								name: "ContinuedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "ContinuedListItemContent",
			pos:  position{line: 523, col: 1, offset: 17371},
			expr: &actionExpr{
				pos: position{line: 523, col: 29, offset: 17399},
				run: (*parser).callonContinuedListItemContent1,
				expr: &seqExpr{
					pos: position{line: 523, col: 29, offset: 17399},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 523, col: 29, offset: 17399},
							expr: &ruleRefExpr{
								pos:  position{line: 523, col: 30, offset: 17400},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 524, col: 5, offset: 17409},
							label: "content",
							expr: &choiceExpr{
								pos: position{line: 524, col: 14, offset: 17418},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 524, col: 14, offset: 17418},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 525, col: 11, offset: 17443},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 526, col: 11, offset: 17467},
										name: "VerseParagraph",
									},
									&ruleRefExpr{
										pos:  position{line: 527, col: 11, offset: 17521},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 528, col: 11, offset: 17543},
										name: "OrderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 529, col: 11, offset: 17570},
										name: "UnorderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 530, col: 11, offset: 17599},
										name: "LabeledListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 532, col: 11, offset: 17664},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 533, col: 11, offset: 17715},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 534, col: 11, offset: 17739},
										name: "DocumentAttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 535, col: 11, offset: 17779},
										name: "DocumentAttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 536, col: 11, offset: 17813},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 537, col: 11, offset: 17850},
										name: "UserMacroBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 538, col: 11, offset: 17875},
										name: "ContinuedParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItem",
			pos:  position{line: 545, col: 1, offset: 18038},
			expr: &actionExpr{
				pos: position{line: 545, col: 20, offset: 18057},
				run: (*parser).callonOrderedListItem1,
				expr: &seqExpr{
					pos: position{line: 545, col: 20, offset: 18057},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 545, col: 20, offset: 18057},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 545, col: 31, offset: 18068},
								expr: &ruleRefExpr{
									pos:  position{line: 545, col: 32, offset: 18069},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 545, col: 52, offset: 18089},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 545, col: 60, offset: 18097},
								name: "OrderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 545, col: 83, offset: 18120},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 545, col: 92, offset: 18129},
								name: "OrderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemPrefix",
			pos:  position{line: 549, col: 1, offset: 18269},
			expr: &actionExpr{
				pos: position{line: 550, col: 5, offset: 18299},
				run: (*parser).callonOrderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 550, col: 5, offset: 18299},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 550, col: 5, offset: 18299},
							expr: &ruleRefExpr{
								pos:  position{line: 550, col: 5, offset: 18299},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 550, col: 12, offset: 18306},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 552, col: 9, offset: 18369},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 552, col: 9, offset: 18369},
										run: (*parser).callonOrderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 552, col: 9, offset: 18369},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 552, col: 9, offset: 18369},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 552, col: 16, offset: 18376},
														run: (*parser).callonOrderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 552, col: 16, offset: 18376},
															expr: &litMatcher{
																pos:        position{line: 552, col: 17, offset: 18377},
																val:        ".",
																ignoreCase: false,
																want:       "\".\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 556, col: 9, offset: 18477},
													run: (*parser).callonOrderedListItemPrefix13,
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 575, col: 11, offset: 19194},
										run: (*parser).callonOrderedListItemPrefix14,
										expr: &seqExpr{
											pos: position{line: 575, col: 11, offset: 19194},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 575, col: 11, offset: 19194},
													expr: &charClassMatcher{
														pos:        position{line: 575, col: 12, offset: 19195},
														val:        "[0-9]",
														ranges:     []rune{'0', '9'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 575, col: 20, offset: 19203},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 577, col: 13, offset: 19314},
										run: (*parser).callonOrderedListItemPrefix19,
										expr: &seqExpr{
											pos: position{line: 577, col: 13, offset: 19314},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 577, col: 14, offset: 19315},
													val:        "[a-z]",
													ranges:     []rune{'a', 'z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 577, col: 21, offset: 19322},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 579, col: 13, offset: 19436},
										run: (*parser).callonOrderedListItemPrefix23,
										expr: &seqExpr{
											pos: position{line: 579, col: 13, offset: 19436},
											exprs: []interface{}{
												&charClassMatcher{
													pos:        position{line: 579, col: 14, offset: 19437},
													val:        "[A-Z]",
													ranges:     []rune{'A', 'Z'},
													ignoreCase: false,
													inverted:   false,
												},
												&litMatcher{
													pos:        position{line: 579, col: 21, offset: 19444},
													val:        ".",
													ignoreCase: false,
													want:       "\".\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 581, col: 13, offset: 19558},
										run: (*parser).callonOrderedListItemPrefix27,
										expr: &seqExpr{
											pos: position{line: 581, col: 13, offset: 19558},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 581, col: 13, offset: 19558},
													expr: &charClassMatcher{
														pos:        position{line: 581, col: 14, offset: 19559},
														val:        "[a-z]",
														ranges:     []rune{'a', 'z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 581, col: 22, offset: 19567},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
									&actionExpr{
										pos: position{line: 583, col: 13, offset: 19681},
										run: (*parser).callonOrderedListItemPrefix32,
										expr: &seqExpr{
											pos: position{line: 583, col: 13, offset: 19681},
											exprs: []interface{}{
												&oneOrMoreExpr{
													pos: position{line: 583, col: 13, offset: 19681},
													expr: &charClassMatcher{
														pos:        position{line: 583, col: 14, offset: 19682},
														val:        "[A-Z]",
														ranges:     []rune{'A', 'Z'},
														ignoreCase: false,
														inverted:   false,
													},
												},
												&litMatcher{
													pos:        position{line: 583, col: 22, offset: 19690},
													val:        ")",
													ignoreCase: false,
													want:       "\")\"",
												},
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 585, col: 12, offset: 19803},
							expr: &ruleRefExpr{
								pos:  position{line: 585, col: 12, offset: 19803},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "OrderedListItemContent",
			pos:  position{line: 589, col: 1, offset: 19838},
			expr: &actionExpr{
				pos: position{line: 589, col: 27, offset: 19864},
				run: (*parser).callonOrderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 589, col: 27, offset: 19864},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 589, col: 37, offset: 19874},
						expr: &ruleRefExpr{
							pos:  position{line: 589, col: 37, offset: 19874},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItem",
			pos:  position{line: 596, col: 1, offset: 20074},
			expr: &actionExpr{
				pos: position{line: 596, col: 22, offset: 20095},
				run: (*parser).callonUnorderedListItem1,
				expr: &seqExpr{
					pos: position{line: 596, col: 22, offset: 20095},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 596, col: 22, offset: 20095},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 596, col: 33, offset: 20106},
								expr: &ruleRefExpr{
									pos:  position{line: 596, col: 34, offset: 20107},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 596, col: 54, offset: 20127},
							label: "prefix",
							expr: &ruleRefExpr{
								pos:  position{line: 596, col: 62, offset: 20135},
								name: "UnorderedListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 596, col: 87, offset: 20160},
							label: "checkstyle",
							expr: &zeroOrOneExpr{
								pos: position{line: 596, col: 98, offset: 20171},
								expr: &ruleRefExpr{
									pos:  position{line: 596, col: 99, offset: 20172},
									name: "UnorderedListItemCheckStyle",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 596, col: 129, offset: 20202},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 596, col: 138, offset: 20211},
								name: "UnorderedListItemContent",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemPrefix",
			pos:  position{line: 600, col: 1, offset: 20369},
			expr: &actionExpr{
				pos: position{line: 601, col: 5, offset: 20401},
				run: (*parser).callonUnorderedListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 601, col: 5, offset: 20401},
					exprs: []interface{}{
						&zeroOrMoreExpr{
							pos: position{line: 601, col: 5, offset: 20401},
							expr: &ruleRefExpr{
								pos:  position{line: 601, col: 5, offset: 20401},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 601, col: 12, offset: 20408},
							label: "prefix",
							expr: &choiceExpr{
								pos: position{line: 601, col: 20, offset: 20416},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 603, col: 9, offset: 20473},
										run: (*parser).callonUnorderedListItemPrefix7,
										expr: &seqExpr{
											pos: position{line: 603, col: 9, offset: 20473},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 603, col: 9, offset: 20473},
													label: "depth",
													expr: &actionExpr{
														pos: position{line: 603, col: 16, offset: 20480},
														run: (*parser).callonUnorderedListItemPrefix10,
														expr: &oneOrMoreExpr{
															pos: position{line: 603, col: 16, offset: 20480},
															expr: &litMatcher{
																pos:        position{line: 603, col: 17, offset: 20481},
																val:        "*",
																ignoreCase: false,
																want:       "\"*\"",
															},
														},
													},
												},
												&andCodeExpr{
													pos: position{line: 607, col: 9, offset: 20581},
													run: (*parser).callonUnorderedListItemPrefix13,
												},
											},
										},
									},
									&labeledExpr{
										pos:   position{line: 624, col: 14, offset: 21288},
										label: "depth",
										expr: &actionExpr{
											pos: position{line: 624, col: 21, offset: 21295},
											run: (*parser).callonUnorderedListItemPrefix15,
											expr: &litMatcher{
												pos:        position{line: 624, col: 22, offset: 21296},
												val:        "-",
												ignoreCase: false,
												want:       "\"-\"",
											},
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 626, col: 13, offset: 21382},
							expr: &ruleRefExpr{
								pos:  position{line: 626, col: 13, offset: 21382},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemCheckStyle",
			pos:  position{line: 630, col: 1, offset: 21418},
			expr: &actionExpr{
				pos: position{line: 630, col: 32, offset: 21449},
				run: (*parser).callonUnorderedListItemCheckStyle1,
				expr: &seqExpr{
					pos: position{line: 630, col: 32, offset: 21449},
					exprs: []interface{}{
						&andExpr{
							pos: position{line: 630, col: 32, offset: 21449},
							expr: &litMatcher{
								pos:        position{line: 630, col: 33, offset: 21450},
								val:        "[",
								ignoreCase: false,
								want:       "\"[\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 630, col: 37, offset: 21454},
							label: "style",
							expr: &choiceExpr{
								pos: position{line: 631, col: 7, offset: 21468},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 631, col: 7, offset: 21468},
										run: (*parser).callonUnorderedListItemCheckStyle7,
										expr: &litMatcher{
											pos:        position{line: 631, col: 7, offset: 21468},
											val:        "[ ]",
											ignoreCase: false,
											want:       "\"[ ]\"",
										},
									},
									&actionExpr{
										pos: position{line: 632, col: 7, offset: 21513},
										run: (*parser).callonUnorderedListItemCheckStyle9,
										expr: &litMatcher{
											pos:        position{line: 632, col: 7, offset: 21513},
											val:        "[*]",
											ignoreCase: false,
											want:       "\"[*]\"",
										},
									},
									&actionExpr{
										pos: position{line: 633, col: 7, offset: 21556},
										run: (*parser).callonUnorderedListItemCheckStyle11,
										expr: &litMatcher{
											pos:        position{line: 633, col: 7, offset: 21556},
											val:        "[x]",
											ignoreCase: false,
											want:       "\"[x]\"",
										},
									},
								},
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 634, col: 7, offset: 21598},
							expr: &ruleRefExpr{
								pos:  position{line: 634, col: 7, offset: 21598},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "UnorderedListItemContent",
			pos:  position{line: 638, col: 1, offset: 21640},
			expr: &actionExpr{
				pos: position{line: 638, col: 29, offset: 21668},
				run: (*parser).callonUnorderedListItemContent1,
				expr: &labeledExpr{
					pos:   position{line: 638, col: 29, offset: 21668},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 638, col: 39, offset: 21678},
						expr: &ruleRefExpr{
							pos:  position{line: 638, col: 39, offset: 21678},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "LabeledListItem",
			pos:  position{line: 645, col: 1, offset: 21994},
			expr: &actionExpr{
				pos: position{line: 645, col: 20, offset: 22013},
				run: (*parser).callonLabeledListItem1,
				expr: &seqExpr{
					pos: position{line: 645, col: 20, offset: 22013},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 645, col: 20, offset: 22013},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 645, col: 31, offset: 22024},
								expr: &ruleRefExpr{
									pos:  position{line: 645, col: 32, offset: 22025},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 645, col: 52, offset: 22045},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 645, col: 58, offset: 22051},
								name: "VerbatimLabeledListItemTerm",
							},
						},
						&labeledExpr{
							pos:   position{line: 645, col: 87, offset: 22080},
							label: "separator",
							expr: &ruleRefExpr{
								pos:  position{line: 645, col: 98, offset: 22091},
								name: "LabeledListItemSeparator",
							},
						},
						&labeledExpr{
							pos:   position{line: 645, col: 124, offset: 22117},
							label: "description",
							expr: &zeroOrOneExpr{
								pos: position{line: 645, col: 136, offset: 22129},
								expr: &ruleRefExpr{
									pos:  position{line: 645, col: 137, offset: 22130},
									name: "LabeledListItemDescription",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemPrefix",
			pos:  position{line: 649, col: 1, offset: 22276},
			expr: &seqExpr{
				pos: position{line: 649, col: 26, offset: 22301},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 649, col: 26, offset: 22301},
						name: "VerbatimLabeledListItemTerm",
					},
					&ruleRefExpr{
						pos:  position{line: 649, col: 54, offset: 22329},
						name: "LabeledListItemSeparator",
					},
				},
			},
		},
		{
			name: "VerbatimLabeledListItemTerm",
			pos:  position{line: 651, col: 1, offset: 22355},
			expr: &actionExpr{
				pos: position{line: 651, col: 32, offset: 22386},
				run: (*parser).callonVerbatimLabeledListItemTerm1,
				expr: &labeledExpr{
					pos:   position{line: 651, col: 32, offset: 22386},
					label: "content",
					expr: &actionExpr{
						pos: position{line: 651, col: 41, offset: 22395},
						run: (*parser).callonVerbatimLabeledListItemTerm3,
						expr: &oneOrMoreExpr{
							pos: position{line: 651, col: 41, offset: 22395},
							expr: &charClassMatcher{
								pos:        position{line: 651, col: 41, offset: 22395},
								val:        "[^:\\r\\n]",
								chars:      []rune{':', '\r', '\n'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTerm",
			pos:  position{line: 657, col: 1, offset: 22529},
			expr: &actionExpr{
				pos: position{line: 657, col: 24, offset: 22552},
				run: (*parser).callonLabeledListItemTerm1,
				expr: &labeledExpr{
					pos:   position{line: 657, col: 24, offset: 22552},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 657, col: 33, offset: 22561},
						expr: &seqExpr{
							pos: position{line: 657, col: 34, offset: 22562},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 657, col: 34, offset: 22562},
									expr: &ruleRefExpr{
										pos:  position{line: 657, col: 35, offset: 22563},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 657, col: 43, offset: 22571},
									expr: &litMatcher{
										pos:        position{line: 657, col: 44, offset: 22572},
										val:        "::",
										ignoreCase: false,
										want:       "\"::\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 657, col: 49, offset: 22577},
									name: "LabeledListItemTermElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemTermElement",
			pos:  position{line: 661, col: 1, offset: 22704},
			expr: &actionExpr{
				pos: position{line: 661, col: 31, offset: 22734},
				run: (*parser).callonLabeledListItemTermElement1,
				expr: &labeledExpr{
					pos:   position{line: 661, col: 31, offset: 22734},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 661, col: 40, offset: 22743},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 661, col: 40, offset: 22743},
								name: "Word",
							},
							&ruleRefExpr{
								pos:  position{line: 662, col: 11, offset: 22758},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 663, col: 11, offset: 22807},
								expr: &ruleRefExpr{
									pos:  position{line: 663, col: 11, offset: 22807},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 664, col: 11, offset: 22825},
								name: "CrossReference",
							},
							&ruleRefExpr{
								pos:  position{line: 665, col: 11, offset: 22850},
								name: "ConcealedIndexTerm",
							},
							&ruleRefExpr{
								pos:  position{line: 666, col: 11, offset: 22879},
								name: "IndexTerm",
							},
							&ruleRefExpr{
								pos:  position{line: 667, col: 11, offset: 22899},
								name: "Passthrough",
							},
							&ruleRefExpr{
								pos:  position{line: 668, col: 11, offset: 22921},
								name: "InlineImage",
							},
							&ruleRefExpr{
								pos:  position{line: 669, col: 11, offset: 22944},
								name: "Link",
							},
							&ruleRefExpr{
								pos:  position{line: 670, col: 11, offset: 22959},
								name: "InlineFootnote",
							},
							&ruleRefExpr{
								pos:  position{line: 671, col: 11, offset: 22984},
								name: "QuotedText",
							},
							&ruleRefExpr{
								pos:  position{line: 672, col: 11, offset: 23005},
								name: "DocumentAttributeSubstitution",
							},
							&ruleRefExpr{
								pos:  position{line: 673, col: 11, offset: 23045},
								name: "AnyChar",
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemSeparator",
			pos:  position{line: 677, col: 1, offset: 23084},
			expr: &actionExpr{
				pos: position{line: 678, col: 5, offset: 23117},
				run: (*parser).callonLabeledListItemSeparator1,
				expr: &seqExpr{
					pos: position{line: 678, col: 5, offset: 23117},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 678, col: 5, offset: 23117},
							label: "separator",
							expr: &actionExpr{
								pos: position{line: 678, col: 16, offset: 23128},
								run: (*parser).callonLabeledListItemSeparator4,
								expr: &oneOrMoreExpr{
									pos: position{line: 678, col: 16, offset: 23128},
									expr: &litMatcher{
										pos:        position{line: 678, col: 17, offset: 23129},
										val:        ":",
										ignoreCase: false,
										want:       "\":\"",
									},
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 681, col: 5, offset: 23187},
							run: (*parser).callonLabeledListItemSeparator7,
						},
						&choiceExpr{
							pos: position{line: 685, col: 6, offset: 23363},
							alternatives: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 685, col: 6, offset: 23363},
									expr: &choiceExpr{
										pos: position{line: 685, col: 7, offset: 23364},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 685, col: 7, offset: 23364},
												name: "Space",
											},
											&ruleRefExpr{
												pos:  position{line: 685, col: 15, offset: 23372},
												name: "Newline",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 685, col: 27, offset: 23384},
									name: "EOL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledListItemDescription",
			pos:  position{line: 689, col: 1, offset: 23424},
			expr: &actionExpr{
				pos: position{line: 689, col: 31, offset: 23454},
				run: (*parser).callonLabeledListItemDescription1,
				expr: &labeledExpr{
					pos:   position{line: 689, col: 31, offset: 23454},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 689, col: 40, offset: 23463},
						expr: &ruleRefExpr{
							pos:  position{line: 689, col: 41, offset: 23464},
							name: "ListParagraph",
						},
					},
				},
			},
		},
		{
			name: "AdmonitionKind",
			pos:  position{line: 696, col: 1, offset: 23655},
			expr: &choiceExpr{
				pos: position{line: 696, col: 19, offset: 23673},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 696, col: 19, offset: 23673},
						run: (*parser).callonAdmonitionKind2,
						expr: &litMatcher{
							pos:        position{line: 696, col: 19, offset: 23673},
							val:        "TIP",
							ignoreCase: false,
							want:       "\"TIP\"",
						},
					},
					&actionExpr{
						pos: position{line: 698, col: 9, offset: 23719},
						run: (*parser).callonAdmonitionKind4,
						expr: &litMatcher{
							pos:        position{line: 698, col: 9, offset: 23719},
							val:        "NOTE",
							ignoreCase: false,
							want:       "\"NOTE\"",
						},
					},
					&actionExpr{
						pos: position{line: 700, col: 9, offset: 23767},
						run: (*parser).callonAdmonitionKind6,
						expr: &litMatcher{
							pos:        position{line: 700, col: 9, offset: 23767},
							val:        "IMPORTANT",
							ignoreCase: false,
							want:       "\"IMPORTANT\"",
						},
					},
					&actionExpr{
						pos: position{line: 702, col: 9, offset: 23825},
						run: (*parser).callonAdmonitionKind8,
						expr: &litMatcher{
							pos:        position{line: 702, col: 9, offset: 23825},
							val:        "WARNING",
							ignoreCase: false,
							want:       "\"WARNING\"",
						},
					},
					&actionExpr{
						pos: position{line: 704, col: 9, offset: 23879},
						run: (*parser).callonAdmonitionKind10,
						expr: &litMatcher{
							pos:        position{line: 704, col: 9, offset: 23879},
							val:        "CAUTION",
							ignoreCase: false,
							want:       "\"CAUTION\"",
						},
					},
				},
			},
		},
		{
			name: "Paragraph",
			pos:  position{line: 713, col: 1, offset: 24186},
			expr: &choiceExpr{
				pos: position{line: 715, col: 5, offset: 24233},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 715, col: 5, offset: 24233},
						run: (*parser).callonParagraph2,
						expr: &seqExpr{
							pos: position{line: 715, col: 5, offset: 24233},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 715, col: 5, offset: 24233},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 715, col: 16, offset: 24244},
										expr: &ruleRefExpr{
											pos:  position{line: 715, col: 17, offset: 24245},
											name: "ElementAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 715, col: 37, offset: 24265},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 715, col: 40, offset: 24268},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 715, col: 56, offset: 24284},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 715, col: 61, offset: 24289},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 715, col: 67, offset: 24295},
										expr: &ruleRefExpr{
											pos:  position{line: 715, col: 68, offset: 24296},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 719, col: 5, offset: 24477},
						run: (*parser).callonParagraph13,
						expr: &seqExpr{
							pos: position{line: 719, col: 5, offset: 24477},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 719, col: 5, offset: 24477},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 719, col: 16, offset: 24488},
										expr: &ruleRefExpr{
											pos:  position{line: 719, col: 17, offset: 24489},
											name: "ElementAttributes",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 719, col: 37, offset: 24509},
									val:        "> ",
									ignoreCase: false,
									want:       "\"> \"",
								},
								&labeledExpr{
									pos:   position{line: 719, col: 42, offset: 24514},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 719, col: 51, offset: 24523},
										name: "MarkdownQuoteBlockVerbatimContent",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 723, col: 5, offset: 24723},
						run: (*parser).callonParagraph21,
						expr: &seqExpr{
							pos: position{line: 723, col: 5, offset: 24723},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 723, col: 5, offset: 24723},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 723, col: 16, offset: 24734},
										expr: &ruleRefExpr{
											pos:  position{line: 723, col: 17, offset: 24735},
											name: "ElementAttributes",
										},
									},
								},
								&notExpr{
									pos: position{line: 723, col: 37, offset: 24755},
									expr: &ruleRefExpr{
										pos:  position{line: 723, col: 38, offset: 24756},
										name: "BlockDelimiter",
									},
								},
								&labeledExpr{
									pos:   position{line: 723, col: 53, offset: 24771},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 723, col: 59, offset: 24777},
										expr: &ruleRefExpr{
											pos:  position{line: 723, col: 60, offset: 24778},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkdownQuoteBlockVerbatimContent",
			pos:  position{line: 727, col: 1, offset: 24874},
			expr: &oneOrMoreExpr{
				pos: position{line: 727, col: 38, offset: 24911},
				expr: &actionExpr{
					pos: position{line: 727, col: 39, offset: 24912},
					run: (*parser).callonMarkdownQuoteBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 727, col: 39, offset: 24912},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 727, col: 39, offset: 24912},
								expr: &ruleRefExpr{
									pos:  position{line: 727, col: 40, offset: 24913},
									name: "BlankLine",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 727, col: 50, offset: 24923},
								expr: &litMatcher{
									pos:        position{line: 727, col: 50, offset: 24923},
									val:        "> ",
									ignoreCase: false,
									want:       "\"> \"",
								},
							},
							&labeledExpr{
								pos:   position{line: 727, col: 56, offset: 24929},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 727, col: 65, offset: 24938},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MarkdownQuoteBlockAttribution",
			pos:  position{line: 731, col: 1, offset: 25079},
			expr: &actionExpr{
				pos: position{line: 731, col: 34, offset: 25112},
				run: (*parser).callonMarkdownQuoteBlockAttribution1,
				expr: &seqExpr{
					pos: position{line: 731, col: 34, offset: 25112},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 731, col: 34, offset: 25112},
							val:        "-- ",
							ignoreCase: false,
							want:       "\"-- \"",
						},
						&labeledExpr{
							pos:   position{line: 731, col: 40, offset: 25118},
							label: "author",
							expr: &actionExpr{
								pos: position{line: 731, col: 48, offset: 25126},
								run: (*parser).callonMarkdownQuoteBlockAttribution5,
								expr: &oneOrMoreExpr{
									pos: position{line: 731, col: 49, offset: 25127},
									expr: &charClassMatcher{
										pos:        position{line: 731, col: 49, offset: 25127},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 733, col: 8, offset: 25177},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SimpleParagraph",
			pos:  position{line: 737, col: 1, offset: 25280},
			expr: &actionExpr{
				pos: position{line: 737, col: 20, offset: 25299},
				run: (*parser).callonSimpleParagraph1,
				expr: &seqExpr{
					pos: position{line: 737, col: 20, offset: 25299},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 737, col: 20, offset: 25299},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 737, col: 31, offset: 25310},
								expr: &ruleRefExpr{
									pos:  position{line: 737, col: 32, offset: 25311},
									name: "ElementAttributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 738, col: 5, offset: 25336},
							run: (*parser).callonSimpleParagraph6,
						},
						&labeledExpr{
							pos:   position{line: 746, col: 5, offset: 25627},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 746, col: 16, offset: 25638},
								name: "FirstParagraphLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 747, col: 5, offset: 25661},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 747, col: 16, offset: 25672},
								expr: &ruleRefExpr{
									pos:  position{line: 747, col: 17, offset: 25673},
									name: "OtherParagraphLine",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FirstParagraphLine",
			pos:  position{line: 751, col: 1, offset: 25807},
			expr: &actionExpr{
				pos: position{line: 752, col: 5, offset: 25834},
				run: (*parser).callonFirstParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 752, col: 5, offset: 25834},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 752, col: 5, offset: 25834},
							label: "elements",
							expr: &seqExpr{
								pos: position{line: 752, col: 15, offset: 25844},
								exprs: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 752, col: 15, offset: 25844},
										name: "Word",
									},
									&zeroOrMoreExpr{
										pos: position{line: 752, col: 20, offset: 25849},
										expr: &ruleRefExpr{
											pos:  position{line: 752, col: 20, offset: 25849},
											name: "InlineElement",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 752, col: 36, offset: 25865},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "OtherParagraphLine",
			pos:  position{line: 756, col: 1, offset: 25936},
			expr: &actionExpr{
				pos: position{line: 756, col: 23, offset: 25958},
				run: (*parser).callonOtherParagraphLine1,
				expr: &labeledExpr{
					pos:   position{line: 756, col: 23, offset: 25958},
					label: "elements",
					expr: &ruleRefExpr{
						pos:  position{line: 756, col: 33, offset: 25968},
						name: "InlineElements",
					},
				},
			},
		},
		{
			name: "ContinuedParagraph",
			pos:  position{line: 761, col: 1, offset: 26088},
			expr: &choiceExpr{
				pos: position{line: 763, col: 5, offset: 26144},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 763, col: 5, offset: 26144},
						run: (*parser).callonContinuedParagraph2,
						expr: &seqExpr{
							pos: position{line: 763, col: 5, offset: 26144},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 763, col: 5, offset: 26144},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 763, col: 16, offset: 26155},
										expr: &ruleRefExpr{
											pos:  position{line: 763, col: 17, offset: 26156},
											name: "ElementAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 763, col: 37, offset: 26176},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 763, col: 40, offset: 26179},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 763, col: 56, offset: 26195},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 763, col: 61, offset: 26200},
									label: "lines",
									expr: &ruleRefExpr{
										pos:  position{line: 763, col: 68, offset: 26207},
										name: "ContinuedParagraphLines",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 767, col: 5, offset: 26407},
						run: (*parser).callonContinuedParagraph12,
						expr: &seqExpr{
							pos: position{line: 767, col: 5, offset: 26407},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 767, col: 5, offset: 26407},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 767, col: 16, offset: 26418},
										expr: &ruleRefExpr{
											pos:  position{line: 767, col: 17, offset: 26419},
											name: "ElementAttributes",
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 767, col: 37, offset: 26439},
									label: "lines",
									expr: &ruleRefExpr{
										pos:  position{line: 767, col: 44, offset: 26446},
										name: "ContinuedParagraphLines",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ContinuedParagraphLines",
			pos:  position{line: 771, col: 1, offset: 26547},
			expr: &actionExpr{
				pos: position{line: 771, col: 28, offset: 26574},
				run: (*parser).callonContinuedParagraphLines1,
				expr: &seqExpr{
					pos: position{line: 771, col: 28, offset: 26574},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 771, col: 28, offset: 26574},
							label: "firstLine",
							expr: &ruleRefExpr{
								pos:  position{line: 771, col: 39, offset: 26585},
								name: "FirstParagraphLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 771, col: 59, offset: 26605},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 771, col: 70, offset: 26616},
								expr: &seqExpr{
									pos: position{line: 771, col: 71, offset: 26617},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 771, col: 71, offset: 26617},
											expr: &ruleRefExpr{
												pos:  position{line: 771, col: 72, offset: 26618},
												name: "ListItemContinuation",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 771, col: 93, offset: 26639},
											name: "OtherParagraphLine",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseParagraph",
			pos:  position{line: 775, col: 1, offset: 26745},
			expr: &choiceExpr{
				pos: position{line: 777, col: 5, offset: 26797},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 777, col: 5, offset: 26797},
						run: (*parser).callonVerseParagraph2,
						expr: &seqExpr{
							pos: position{line: 777, col: 5, offset: 26797},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 777, col: 5, offset: 26797},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 777, col: 16, offset: 26808},
										expr: &ruleRefExpr{
											pos:  position{line: 777, col: 17, offset: 26809},
											name: "ElementAttributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 778, col: 5, offset: 26833},
									run: (*parser).callonVerseParagraph7,
								},
								&labeledExpr{
									pos:   position{line: 785, col: 5, offset: 27045},
									label: "t",
									expr: &ruleRefExpr{
										pos:  position{line: 785, col: 8, offset: 27048},
										name: "AdmonitionKind",
									},
								},
								&litMatcher{
									pos:        position{line: 785, col: 24, offset: 27064},
									val:        ": ",
									ignoreCase: false,
									want:       "\": \"",
								},
								&labeledExpr{
									pos:   position{line: 785, col: 29, offset: 27069},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 785, col: 35, offset: 27075},
										expr: &ruleRefExpr{
											pos:  position{line: 785, col: 36, offset: 27076},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 789, col: 5, offset: 27268},
						run: (*parser).callonVerseParagraph14,
						expr: &seqExpr{
							pos: position{line: 789, col: 5, offset: 27268},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 789, col: 5, offset: 27268},
									label: "attributes",
									expr: &zeroOrOneExpr{
										pos: position{line: 789, col: 16, offset: 27279},
										expr: &ruleRefExpr{
											pos:  position{line: 789, col: 17, offset: 27280},
											name: "ElementAttributes",
										},
									},
								},
								&andCodeExpr{
									pos: position{line: 790, col: 5, offset: 27304},
									run: (*parser).callonVerseParagraph19,
								},
								&labeledExpr{
									pos:   position{line: 797, col: 5, offset: 27516},
									label: "lines",
									expr: &oneOrMoreExpr{
										pos: position{line: 797, col: 11, offset: 27522},
										expr: &ruleRefExpr{
											pos:  position{line: 797, col: 12, offset: 27523},
											name: "InlineElements",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElements",
			pos:  position{line: 801, col: 1, offset: 27624},
			expr: &actionExpr{
				pos: position{line: 801, col: 19, offset: 27642},
				run: (*parser).callonInlineElements1,
				expr: &seqExpr{
					pos: position{line: 801, col: 19, offset: 27642},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 801, col: 19, offset: 27642},
							expr: &ruleRefExpr{
								pos:  position{line: 801, col: 20, offset: 27643},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 802, col: 5, offset: 27657},
							label: "elements",
							expr: &choiceExpr{
								pos: position{line: 802, col: 15, offset: 27667},
								alternatives: []interface{}{
									&actionExpr{
										pos: position{line: 802, col: 15, offset: 27667},
										run: (*parser).callonInlineElements7,
										expr: &labeledExpr{
											pos:   position{line: 802, col: 15, offset: 27667},
											label: "comment",
											expr: &ruleRefExpr{
												pos:  position{line: 802, col: 24, offset: 27676},
												name: "SingleLineComment",
											},
										},
									},
									&actionExpr{
										pos: position{line: 804, col: 9, offset: 27768},
										run: (*parser).callonInlineElements10,
										expr: &seqExpr{
											pos: position{line: 804, col: 9, offset: 27768},
											exprs: []interface{}{
												&labeledExpr{
													pos:   position{line: 804, col: 9, offset: 27768},
													label: "elements",
													expr: &oneOrMoreExpr{
														pos: position{line: 804, col: 18, offset: 27777},
														expr: &ruleRefExpr{
															pos:  position{line: 804, col: 19, offset: 27778},
															name: "InlineElement",
														},
													},
												},
												&ruleRefExpr{
													pos:  position{line: 804, col: 35, offset: 27794},
													name: "EOL",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineElement",
			pos:  position{line: 810, col: 1, offset: 27911},
			expr: &actionExpr{
				pos: position{line: 811, col: 5, offset: 27934},
				run: (*parser).callonInlineElement1,
				expr: &labeledExpr{
					pos:   position{line: 811, col: 5, offset: 27934},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 811, col: 14, offset: 27943},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 811, col: 14, offset: 27943},
								name: "InlineWord",
							},
							&ruleRefExpr{
								pos:  position{line: 812, col: 11, offset: 27994},
								name: "LineBreak",
							},
							&oneOrMoreExpr{
								pos: position{line: 813, col: 11, offset: 28039},
								expr: &ruleRefExpr{
									pos:  position{line: 813, col: 11, offset: 28039},
									name: "Space",
								},
							},
							&seqExpr{
								pos: position{line: 814, col: 11, offset: 28057},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 814, col: 11, offset: 28057},
										expr: &ruleRefExpr{
											pos:  position{line: 814, col: 12, offset: 28058},
											name: "EOL",
										},
									},
									&choiceExpr{
										pos: position{line: 815, col: 13, offset: 28077},
										alternatives: []interface{}{
											&ruleRefExpr{
												pos:  position{line: 815, col: 13, offset: 28077},
												name: "QuotedText",
											},
											&ruleRefExpr{
												pos:  position{line: 816, col: 15, offset: 28103},
												name: "InlineImage",
											},
											&ruleRefExpr{
												pos:  position{line: 817, col: 15, offset: 28130},
												name: "Link",
											},
											&ruleRefExpr{
												pos:  position{line: 818, col: 15, offset: 28150},
												name: "Passthrough",
											},
											&ruleRefExpr{
												pos:  position{line: 819, col: 15, offset: 28177},
												name: "InlineFootnote",
											},
											&ruleRefExpr{
												pos:  position{line: 820, col: 15, offset: 28207},
												name: "CrossReference",
											},
											&ruleRefExpr{
												pos:  position{line: 821, col: 15, offset: 28237},
												name: "InlineUserMacro",
											},
											&ruleRefExpr{
												pos:  position{line: 822, col: 15, offset: 28268},
												name: "DocumentAttributeSubstitution",
											},
											&ruleRefExpr{
												pos:  position{line: 823, col: 15, offset: 28313},
												name: "InlineElementID",
											},
											&ruleRefExpr{
												pos:  position{line: 824, col: 15, offset: 28344},
												name: "ConcealedIndexTerm",
											},
											&ruleRefExpr{
												pos:  position{line: 825, col: 15, offset: 28377},
												name: "IndexTerm",
											},
											&ruleRefExpr{
												pos:  position{line: 826, col: 15, offset: 28401},
												name: "AnyChar",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LineBreak",
			pos:  position{line: 833, col: 1, offset: 28624},
			expr: &actionExpr{
				pos: position{line: 833, col: 14, offset: 28637},
				run: (*parser).callonLineBreak1,
				expr: &seqExpr{
					pos: position{line: 833, col: 14, offset: 28637},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 833, col: 14, offset: 28637},
							name: "Space",
						},
						&litMatcher{
							pos:        position{line: 833, col: 20, offset: 28643},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 833, col: 24, offset: 28647},
							expr: &ruleRefExpr{
								pos:  position{line: 833, col: 24, offset: 28647},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 833, col: 31, offset: 28654},
							expr: &ruleRefExpr{
								pos:  position{line: 833, col: 32, offset: 28655},
								name: "EOL",
							},
						},
					},
				},
			},
		},
		{
			name: "QuotedText",
			pos:  position{line: 840, col: 1, offset: 28939},
			expr: &choiceExpr{
				pos: position{line: 840, col: 15, offset: 28953},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 840, col: 15, offset: 28953},
						name: "UnconstrainedQuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 840, col: 41, offset: 28979},
						name: "ConstrainedQuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 840, col: 65, offset: 29003},
						name: "EscapedQuotedText",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedTextMarker",
			pos:  position{line: 842, col: 1, offset: 29022},
			expr: &choiceExpr{
				pos: position{line: 842, col: 32, offset: 29053},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 842, col: 32, offset: 29053},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 842, col: 32, offset: 29053},
								val:        "*",
								ignoreCase: false,
								want:       "\"*\"",
							},
							&notExpr{
								pos: position{line: 842, col: 36, offset: 29057},
								expr: &litMatcher{
									pos:        position{line: 842, col: 37, offset: 29058},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 842, col: 43, offset: 29064},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 842, col: 43, offset: 29064},
								val:        "_",
								ignoreCase: false,
								want:       "\"_\"",
							},
							&notExpr{
								pos: position{line: 842, col: 47, offset: 29068},
								expr: &litMatcher{
									pos:        position{line: 842, col: 48, offset: 29069},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&seqExpr{
						pos: position{line: 842, col: 54, offset: 29075},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 842, col: 54, offset: 29075},
								val:        "`",
								ignoreCase: false,
								want:       "\"`\"",
							},
							&notExpr{
								pos: position{line: 842, col: 58, offset: 29079},
								expr: &litMatcher{
									pos:        position{line: 842, col: 59, offset: 29080},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedTextPrefix",
			pos:  position{line: 844, col: 1, offset: 29086},
			expr: &choiceExpr{
				pos: position{line: 844, col: 34, offset: 29119},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 844, col: 34, offset: 29119},
						val:        "**",
						ignoreCase: false,
						want:       "\"**\"",
					},
					&litMatcher{
						pos:        position{line: 844, col: 41, offset: 29126},
						val:        "__",
						ignoreCase: false,
						want:       "\"__\"",
					},
					&litMatcher{
						pos:        position{line: 844, col: 48, offset: 29133},
						val:        "``",
						ignoreCase: false,
						want:       "\"``\"",
					},
					&litMatcher{
						pos:        position{line: 844, col: 55, offset: 29140},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&litMatcher{
						pos:        position{line: 844, col: 61, offset: 29146},
						val:        "~",
						ignoreCase: false,
						want:       "\"~\"",
					},
				},
			},
		},
		{
			name: "ConstrainedQuotedText",
			pos:  position{line: 846, col: 1, offset: 29151},
			expr: &actionExpr{
				pos: position{line: 846, col: 26, offset: 29176},
				run: (*parser).callonConstrainedQuotedText1,
				expr: &labeledExpr{
					pos:   position{line: 846, col: 26, offset: 29176},
					label: "text",
					expr: &choiceExpr{
						pos: position{line: 846, col: 32, offset: 29182},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 846, col: 32, offset: 29182},
								name: "SingleQuoteBoldText",
							},
							&ruleRefExpr{
								pos:  position{line: 847, col: 15, offset: 29217},
								name: "SingleQuoteItalicText",
							},
							&ruleRefExpr{
								pos:  position{line: 848, col: 15, offset: 29254},
								name: "SingleQuoteMonospaceText",
							},
							&ruleRefExpr{
								pos:  position{line: 849, col: 15, offset: 29294},
								name: "SubscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 850, col: 15, offset: 29323},
								name: "SuperscriptText",
							},
							&ruleRefExpr{
								pos:  position{line: 851, col: 15, offset: 29354},
								name: "SubscriptOrSuperscriptPrefix",
							},
						},
					},
				},
			},
		},
		{
			name: "UnconstrainedQuotedText",
			pos:  position{line: 855, col: 1, offset: 29508},
			expr: &choiceExpr{
				pos: position{line: 855, col: 28, offset: 29535},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 855, col: 28, offset: 29535},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 856, col: 15, offset: 29569},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 857, col: 15, offset: 29605},
						name: "DoubleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "EscapedQuotedText",
			pos:  position{line: 859, col: 1, offset: 29631},
			expr: &choiceExpr{
				pos: position{line: 859, col: 22, offset: 29652},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 859, col: 22, offset: 29652},
						name: "EscapedBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 860, col: 15, offset: 29683},
						name: "EscapedItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 861, col: 15, offset: 29716},
						name: "EscapedMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 862, col: 15, offset: 29752},
						name: "EscapedSubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 863, col: 15, offset: 29788},
						name: "EscapedSuperscriptText",
					},
				},
			},
		},
		{
			name: "SubscriptOrSuperscriptPrefix",
			pos:  position{line: 865, col: 1, offset: 29812},
			expr: &choiceExpr{
				pos: position{line: 865, col: 33, offset: 29844},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 865, col: 33, offset: 29844},
						val:        "^",
						ignoreCase: false,
						want:       "\"^\"",
					},
					&actionExpr{
						pos: position{line: 865, col: 39, offset: 29850},
						run: (*parser).callonSubscriptOrSuperscriptPrefix3,
						expr: &litMatcher{
							pos:        position{line: 865, col: 39, offset: 29850},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "OneOrMoreBackslashes",
			pos:  position{line: 869, col: 1, offset: 29983},
			expr: &actionExpr{
				pos: position{line: 869, col: 25, offset: 30007},
				run: (*parser).callonOneOrMoreBackslashes1,
				expr: &oneOrMoreExpr{
					pos: position{line: 869, col: 25, offset: 30007},
					expr: &litMatcher{
						pos:        position{line: 869, col: 25, offset: 30007},
						val:        "\\",
						ignoreCase: false,
						want:       "\"\\\\\"",
					},
				},
			},
		},
		{
			name: "TwoOrMoreBackslashes",
			pos:  position{line: 873, col: 1, offset: 30048},
			expr: &actionExpr{
				pos: position{line: 873, col: 25, offset: 30072},
				run: (*parser).callonTwoOrMoreBackslashes1,
				expr: &seqExpr{
					pos: position{line: 873, col: 25, offset: 30072},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 873, col: 25, offset: 30072},
							val:        "\\\\",
							ignoreCase: false,
							want:       "\"\\\\\\\\\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 873, col: 30, offset: 30077},
							expr: &litMatcher{
								pos:        position{line: 873, col: 30, offset: 30077},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
					},
				},
			},
		},
		{
			name: "BoldText",
			pos:  position{line: 881, col: 1, offset: 30174},
			expr: &choiceExpr{
				pos: position{line: 881, col: 13, offset: 30186},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 881, col: 13, offset: 30186},
						name: "DoubleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 881, col: 35, offset: 30208},
						name: "SingleQuoteBoldText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldText",
			pos:  position{line: 883, col: 1, offset: 30275},
			expr: &actionExpr{
				pos: position{line: 883, col: 24, offset: 30298},
				run: (*parser).callonDoubleQuoteBoldText1,
				expr: &seqExpr{
					pos: position{line: 883, col: 24, offset: 30298},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 883, col: 24, offset: 30298},
							expr: &litMatcher{
								pos:        position{line: 883, col: 25, offset: 30299},
								val:        "\\\\",
								ignoreCase: false,
								want:       "\"\\\\\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 883, col: 30, offset: 30304},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
						&labeledExpr{
							pos:   position{line: 883, col: 35, offset: 30309},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 883, col: 45, offset: 30319},
								name: "DoubleQuoteBoldTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 883, col: 74, offset: 30348},
							val:        "**",
							ignoreCase: false,
							want:       "\"**\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElements",
			pos:  position{line: 887, col: 1, offset: 30429},
			expr: &seqExpr{
				pos: position{line: 887, col: 32, offset: 30460},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 887, col: 32, offset: 30460},
						name: "DoubleQuoteBoldTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 887, col: 59, offset: 30487},
						expr: &seqExpr{
							pos: position{line: 887, col: 60, offset: 30488},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 887, col: 60, offset: 30488},
									expr: &litMatcher{
										pos:        position{line: 887, col: 62, offset: 30490},
										val:        "**",
										ignoreCase: false,
										want:       "\"**\"",
									},
								},
								&choiceExpr{
									pos: position{line: 887, col: 69, offset: 30497},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 887, col: 69, offset: 30497},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 887, col: 77, offset: 30505},
											name: "DoubleQuoteBoldTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextElement",
			pos:  position{line: 889, col: 1, offset: 30570},
			expr: &choiceExpr{
				pos: position{line: 889, col: 31, offset: 30600},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 889, col: 31, offset: 30600},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 890, col: 11, offset: 30616},
						name: "SingleQuoteBoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 891, col: 11, offset: 30647},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 892, col: 11, offset: 30669},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 893, col: 11, offset: 30693},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 894, col: 11, offset: 30717},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 895, col: 11, offset: 30743},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 896, col: 11, offset: 30766},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 897, col: 11, offset: 30782},
						name: "Passthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 898, col: 11, offset: 30805},
						name: "DocumentAttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 899, col: 11, offset: 30845},
						name: "DoubleQuoteBoldTextStringElement",
					},
					&ruleRefExpr{
						pos:  position{line: 900, col: 11, offset: 30888},
						name: "DoubleQuoteBoldTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextStringElement",
			pos:  position{line: 903, col: 1, offset: 30927},
			expr: &actionExpr{
				pos: position{line: 903, col: 37, offset: 30963},
				run: (*parser).callonDoubleQuoteBoldTextStringElement1,
				expr: &oneOrMoreExpr{
					pos: position{line: 903, col: 37, offset: 30963},
					expr: &seqExpr{
						pos: position{line: 903, col: 38, offset: 30964},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 903, col: 38, offset: 30964},
								expr: &litMatcher{
									pos:        position{line: 903, col: 39, offset: 30965},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
							},
							&charClassMatcher{
								pos:        position{line: 903, col: 44, offset: 30970},
								val:        "[^\\r\\n ^~{}]",
								chars:      []rune{'\r', '\n', ' ', '^', '~', '{', '}'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 907, col: 1, offset: 31041},
			expr: &choiceExpr{
				pos: position{line: 908, col: 5, offset: 31086},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 908, col: 5, offset: 31086},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 909, col: 7, offset: 31183},
						run: (*parser).callonDoubleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 909, col: 7, offset: 31183},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 909, col: 7, offset: 31183},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&ruleRefExpr{
									pos:  position{line: 909, col: 12, offset: 31188},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldText",
			pos:  position{line: 913, col: 1, offset: 31351},
			expr: &choiceExpr{
				pos: position{line: 913, col: 24, offset: 31374},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 913, col: 24, offset: 31374},
						run: (*parser).callonSingleQuoteBoldText2,
						expr: &seqExpr{
							pos: position{line: 913, col: 24, offset: 31374},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 913, col: 25, offset: 31375},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 913, col: 25, offset: 31375},
											expr: &litMatcher{
												pos:        position{line: 913, col: 26, offset: 31376},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
										&litMatcher{
											pos:        position{line: 913, col: 30, offset: 31380},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 913, col: 34, offset: 31384},
											expr: &litMatcher{
												pos:        position{line: 913, col: 35, offset: 31385},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 913, col: 40, offset: 31390},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 913, col: 50, offset: 31400},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 913, col: 79, offset: 31429},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&andExpr{
									pos: position{line: 913, col: 83, offset: 31433},
									expr: &notExpr{
										pos: position{line: 913, col: 85, offset: 31435},
										expr: &ruleRefExpr{
											pos:  position{line: 913, col: 86, offset: 31436},
											name: "Alphanum",
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 915, col: 5, offset: 31623},
						run: (*parser).callonSingleQuoteBoldText16,
						expr: &seqExpr{
							pos: position{line: 915, col: 5, offset: 31623},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 915, col: 5, offset: 31623},
									expr: &litMatcher{
										pos:        position{line: 915, col: 6, offset: 31624},
										val:        "\\\\",
										ignoreCase: false,
										want:       "\"\\\\\\\\\"",
									},
								},
								&litMatcher{
									pos:        position{line: 915, col: 11, offset: 31629},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 915, col: 15, offset: 31633},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 915, col: 25, offset: 31643},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 915, col: 25, offset: 31643},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
											&ruleRefExpr{
												pos:  position{line: 915, col: 29, offset: 31647},
												name: "SingleQuoteBoldTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 915, col: 58, offset: 31676},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElements",
			pos:  position{line: 919, col: 1, offset: 31875},
			expr: &seqExpr{
				pos: position{line: 919, col: 32, offset: 31906},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 919, col: 32, offset: 31906},
						expr: &ruleRefExpr{
							pos:  position{line: 919, col: 33, offset: 31907},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 919, col: 39, offset: 31913},
						expr: &ruleRefExpr{
							pos:  position{line: 919, col: 39, offset: 31913},
							name: "SingleQuoteBoldTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextElement",
			pos:  position{line: 921, col: 1, offset: 31942},
			expr: &choiceExpr{
				pos: position{line: 921, col: 31, offset: 31972},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 921, col: 31, offset: 31972},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 922, col: 11, offset: 31988},
						name: "DoubleQuoteBoldText",
					},
					&seqExpr{
						pos: position{line: 923, col: 11, offset: 32018},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 923, col: 11, offset: 32018},
								expr: &ruleRefExpr{
									pos:  position{line: 923, col: 11, offset: 32018},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 923, col: 18, offset: 32025},
								expr: &seqExpr{
									pos: position{line: 923, col: 19, offset: 32026},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 923, col: 19, offset: 32026},
											val:        "*",
											ignoreCase: false,
											want:       "\"*\"",
										},
										&notExpr{
											pos: position{line: 923, col: 23, offset: 32030},
											expr: &litMatcher{
												pos:        position{line: 923, col: 24, offset: 32031},
												val:        "*",
												ignoreCase: false,
												want:       "\"*\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 924, col: 11, offset: 32047},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 925, col: 11, offset: 32069},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 926, col: 11, offset: 32093},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 927, col: 11, offset: 32117},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 928, col: 11, offset: 32143},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 929, col: 11, offset: 32166},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 930, col: 11, offset: 32183},
						name: "Passthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 931, col: 11, offset: 32206},
						name: "DocumentAttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 932, col: 11, offset: 32246},
						name: "SingleQuoteBoldTextStringElement",
					},
					&ruleRefExpr{
						pos:  position{line: 933, col: 11, offset: 32289},
						name: "SingleQuoteBoldTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextStringElement",
			pos:  position{line: 935, col: 1, offset: 32327},
			expr: &actionExpr{
				pos: position{line: 935, col: 37, offset: 32363},
				run: (*parser).callonSingleQuoteBoldTextStringElement1,
				expr: &oneOrMoreExpr{
					pos: position{line: 935, col: 37, offset: 32363},
					expr: &charClassMatcher{
						pos:        position{line: 935, col: 37, offset: 32363},
						val:        "[^\\r\\n{} *^~]",
						chars:      []rune{'\r', '\n', '{', '}', ' ', '*', '^', '~'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "SingleQuoteBoldTextFallbackCharacter",
			pos:  position{line: 939, col: 1, offset: 32597},
			expr: &choiceExpr{
				pos: position{line: 940, col: 5, offset: 32642},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 940, col: 5, offset: 32642},
						val:        "[^\\r\\n*]",
						chars:      []rune{'\r', '\n', '*'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 941, col: 7, offset: 32739},
						run: (*parser).callonSingleQuoteBoldTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 941, col: 7, offset: 32739},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 941, col: 7, offset: 32739},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&ruleRefExpr{
									pos:  position{line: 941, col: 11, offset: 32743},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedBoldText",
			pos:  position{line: 945, col: 1, offset: 32906},
			expr: &choiceExpr{
				pos: position{line: 946, col: 5, offset: 32930},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 946, col: 5, offset: 32930},
						run: (*parser).callonEscapedBoldText2,
						expr: &seqExpr{
							pos: position{line: 946, col: 5, offset: 32930},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 946, col: 5, offset: 32930},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 946, col: 18, offset: 32943},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 946, col: 40, offset: 32965},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 946, col: 45, offset: 32970},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 946, col: 55, offset: 32980},
										name: "DoubleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 946, col: 84, offset: 33009},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 948, col: 9, offset: 33166},
						run: (*parser).callonEscapedBoldText10,
						expr: &seqExpr{
							pos: position{line: 948, col: 9, offset: 33166},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 948, col: 9, offset: 33166},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 948, col: 22, offset: 33179},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 948, col: 44, offset: 33201},
									val:        "**",
									ignoreCase: false,
									want:       "\"**\"",
								},
								&labeledExpr{
									pos:   position{line: 948, col: 49, offset: 33206},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 948, col: 59, offset: 33216},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 948, col: 88, offset: 33245},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 951, col: 9, offset: 33445},
						run: (*parser).callonEscapedBoldText18,
						expr: &seqExpr{
							pos: position{line: 951, col: 9, offset: 33445},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 951, col: 9, offset: 33445},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 951, col: 22, offset: 33458},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 951, col: 44, offset: 33480},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
								&labeledExpr{
									pos:   position{line: 951, col: 48, offset: 33484},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 951, col: 58, offset: 33494},
										name: "SingleQuoteBoldTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 951, col: 87, offset: 33523},
									val:        "*",
									ignoreCase: false,
									want:       "\"*\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ItalicText",
			pos:  position{line: 959, col: 1, offset: 33731},
			expr: &choiceExpr{
				pos: position{line: 959, col: 15, offset: 33745},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 959, col: 15, offset: 33745},
						name: "DoubleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 959, col: 39, offset: 33769},
						name: "SingleQuoteItalicText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicText",
			pos:  position{line: 961, col: 1, offset: 33792},
			expr: &actionExpr{
				pos: position{line: 961, col: 26, offset: 33817},
				run: (*parser).callonDoubleQuoteItalicText1,
				expr: &seqExpr{
					pos: position{line: 961, col: 26, offset: 33817},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 961, col: 26, offset: 33817},
							expr: &litMatcher{
								pos:        position{line: 961, col: 27, offset: 33818},
								val:        "\\\\",
								ignoreCase: false,
								want:       "\"\\\\\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 961, col: 32, offset: 33823},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
						&labeledExpr{
							pos:   position{line: 961, col: 37, offset: 33828},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 961, col: 47, offset: 33838},
								name: "DoubleQuoteItalicTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 961, col: 78, offset: 33869},
							val:        "__",
							ignoreCase: false,
							want:       "\"__\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElements",
			pos:  position{line: 965, col: 1, offset: 33996},
			expr: &seqExpr{
				pos: position{line: 965, col: 34, offset: 34029},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 965, col: 34, offset: 34029},
						name: "DoubleQuoteItalicTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 965, col: 63, offset: 34058},
						expr: &seqExpr{
							pos: position{line: 965, col: 64, offset: 34059},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 965, col: 64, offset: 34059},
									expr: &litMatcher{
										pos:        position{line: 965, col: 66, offset: 34061},
										val:        "__",
										ignoreCase: false,
										want:       "\"__\"",
									},
								},
								&choiceExpr{
									pos: position{line: 965, col: 73, offset: 34068},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 965, col: 73, offset: 34068},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 965, col: 81, offset: 34076},
											name: "DoubleQuoteItalicTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextElement",
			pos:  position{line: 967, col: 1, offset: 34143},
			expr: &choiceExpr{
				pos: position{line: 967, col: 33, offset: 34175},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 967, col: 33, offset: 34175},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 968, col: 11, offset: 34191},
						name: "SingleQuoteItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 969, col: 11, offset: 34224},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 970, col: 11, offset: 34244},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 971, col: 11, offset: 34268},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 972, col: 11, offset: 34292},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 973, col: 11, offset: 34318},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 974, col: 11, offset: 34341},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 975, col: 11, offset: 34357},
						name: "Passthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 976, col: 11, offset: 34380},
						name: "DoubleQuoteItalicTextStringElement",
					},
					&ruleRefExpr{
						pos:  position{line: 977, col: 11, offset: 34425},
						name: "DoubleQuoteItalicTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextStringElement",
			pos:  position{line: 979, col: 1, offset: 34465},
			expr: &actionExpr{
				pos: position{line: 979, col: 39, offset: 34503},
				run: (*parser).callonDoubleQuoteItalicTextStringElement1,
				expr: &oneOrMoreExpr{
					pos: position{line: 979, col: 39, offset: 34503},
					expr: &seqExpr{
						pos: position{line: 979, col: 40, offset: 34504},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 979, col: 40, offset: 34504},
								expr: &litMatcher{
									pos:        position{line: 979, col: 41, offset: 34505},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
							},
							&charClassMatcher{
								pos:        position{line: 979, col: 46, offset: 34510},
								val:        "[^\\r\\n ^~{}]",
								chars:      []rune{'\r', '\n', ' ', '^', '~', '{', '}'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 983, col: 1, offset: 34581},
			expr: &choiceExpr{
				pos: position{line: 984, col: 5, offset: 34628},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 984, col: 5, offset: 34628},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 985, col: 7, offset: 34727},
						run: (*parser).callonDoubleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 985, col: 7, offset: 34727},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 985, col: 7, offset: 34727},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&ruleRefExpr{
									pos:  position{line: 985, col: 12, offset: 34732},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicText",
			pos:  position{line: 989, col: 1, offset: 34897},
			expr: &choiceExpr{
				pos: position{line: 989, col: 26, offset: 34922},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 989, col: 26, offset: 34922},
						run: (*parser).callonSingleQuoteItalicText2,
						expr: &seqExpr{
							pos: position{line: 989, col: 26, offset: 34922},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 989, col: 27, offset: 34923},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 989, col: 27, offset: 34923},
											expr: &litMatcher{
												pos:        position{line: 989, col: 28, offset: 34924},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
										&litMatcher{
											pos:        position{line: 989, col: 32, offset: 34928},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 989, col: 36, offset: 34932},
											expr: &litMatcher{
												pos:        position{line: 989, col: 37, offset: 34933},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 989, col: 42, offset: 34938},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 989, col: 52, offset: 34948},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 989, col: 83, offset: 34979},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 991, col: 5, offset: 35162},
						run: (*parser).callonSingleQuoteItalicText13,
						expr: &seqExpr{
							pos: position{line: 991, col: 5, offset: 35162},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 991, col: 5, offset: 35162},
									expr: &litMatcher{
										pos:        position{line: 991, col: 6, offset: 35163},
										val:        "\\\\",
										ignoreCase: false,
										want:       "\"\\\\\\\\\"",
									},
								},
								&litMatcher{
									pos:        position{line: 991, col: 11, offset: 35168},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 991, col: 15, offset: 35172},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 991, col: 25, offset: 35182},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 991, col: 25, offset: 35182},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
											&ruleRefExpr{
												pos:  position{line: 991, col: 29, offset: 35186},
												name: "SingleQuoteItalicTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 991, col: 60, offset: 35217},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElements",
			pos:  position{line: 995, col: 1, offset: 35420},
			expr: &seqExpr{
				pos: position{line: 995, col: 34, offset: 35453},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 995, col: 34, offset: 35453},
						expr: &ruleRefExpr{
							pos:  position{line: 995, col: 35, offset: 35454},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 995, col: 41, offset: 35460},
						expr: &ruleRefExpr{
							pos:  position{line: 995, col: 41, offset: 35460},
							name: "SingleQuoteItalicTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextElement",
			pos:  position{line: 997, col: 1, offset: 35491},
			expr: &choiceExpr{
				pos: position{line: 997, col: 33, offset: 35523},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 997, col: 33, offset: 35523},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 998, col: 11, offset: 35539},
						name: "DoubleQuoteItalicText",
					},
					&seqExpr{
						pos: position{line: 999, col: 11, offset: 35571},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 999, col: 11, offset: 35571},
								expr: &ruleRefExpr{
									pos:  position{line: 999, col: 11, offset: 35571},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 999, col: 18, offset: 35578},
								expr: &seqExpr{
									pos: position{line: 999, col: 19, offset: 35579},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 999, col: 19, offset: 35579},
											val:        "_",
											ignoreCase: false,
											want:       "\"_\"",
										},
										&notExpr{
											pos: position{line: 999, col: 23, offset: 35583},
											expr: &litMatcher{
												pos:        position{line: 999, col: 24, offset: 35584},
												val:        "_",
												ignoreCase: false,
												want:       "\"_\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1000, col: 11, offset: 35600},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1001, col: 11, offset: 35620},
						name: "MonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1002, col: 11, offset: 35644},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1003, col: 11, offset: 35668},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1004, col: 11, offset: 35694},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1005, col: 11, offset: 35717},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1006, col: 11, offset: 35734},
						name: "Passthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1007, col: 11, offset: 35757},
						name: "DocumentAttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1008, col: 11, offset: 35797},
						name: "SingleQuoteItalicTextStringElement",
					},
					&ruleRefExpr{
						pos:  position{line: 1009, col: 11, offset: 35842},
						name: "SingleQuoteItalicTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextStringElement",
			pos:  position{line: 1011, col: 1, offset: 35882},
			expr: &actionExpr{
				pos: position{line: 1011, col: 39, offset: 35920},
				run: (*parser).callonSingleQuoteItalicTextStringElement1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1011, col: 39, offset: 35920},
					expr: &charClassMatcher{
						pos:        position{line: 1011, col: 39, offset: 35920},
						val:        "[^\\r\\n{} _^~]",
						chars:      []rune{'\r', '\n', '{', '}', ' ', '_', '^', '~'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "SingleQuoteItalicTextFallbackCharacter",
			pos:  position{line: 1015, col: 1, offset: 36154},
			expr: &choiceExpr{
				pos: position{line: 1016, col: 5, offset: 36201},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1016, col: 5, offset: 36201},
						val:        "[^\\r\\n_]",
						chars:      []rune{'\r', '\n', '_'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1017, col: 7, offset: 36300},
						run: (*parser).callonSingleQuoteItalicTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1017, col: 7, offset: 36300},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1017, col: 7, offset: 36300},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1017, col: 11, offset: 36304},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedItalicText",
			pos:  position{line: 1021, col: 1, offset: 36470},
			expr: &choiceExpr{
				pos: position{line: 1022, col: 5, offset: 36496},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1022, col: 5, offset: 36496},
						run: (*parser).callonEscapedItalicText2,
						expr: &seqExpr{
							pos: position{line: 1022, col: 5, offset: 36496},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1022, col: 5, offset: 36496},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1022, col: 18, offset: 36509},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1022, col: 40, offset: 36531},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1022, col: 45, offset: 36536},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1022, col: 55, offset: 36546},
										name: "DoubleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1022, col: 86, offset: 36577},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1024, col: 9, offset: 36734},
						run: (*parser).callonEscapedItalicText10,
						expr: &seqExpr{
							pos: position{line: 1024, col: 9, offset: 36734},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1024, col: 9, offset: 36734},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1024, col: 22, offset: 36747},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1024, col: 44, offset: 36769},
									val:        "__",
									ignoreCase: false,
									want:       "\"__\"",
								},
								&labeledExpr{
									pos:   position{line: 1024, col: 49, offset: 36774},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1024, col: 59, offset: 36784},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1024, col: 90, offset: 36815},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1027, col: 9, offset: 37015},
						run: (*parser).callonEscapedItalicText18,
						expr: &seqExpr{
							pos: position{line: 1027, col: 9, offset: 37015},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1027, col: 9, offset: 37015},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1027, col: 22, offset: 37028},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1027, col: 44, offset: 37050},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
								&labeledExpr{
									pos:   position{line: 1027, col: 48, offset: 37054},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1027, col: 58, offset: 37064},
										name: "SingleQuoteItalicTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1027, col: 89, offset: 37095},
									val:        "_",
									ignoreCase: false,
									want:       "\"_\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "MonospaceText",
			pos:  position{line: 1034, col: 1, offset: 37305},
			expr: &choiceExpr{
				pos: position{line: 1034, col: 18, offset: 37322},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1034, col: 18, offset: 37322},
						name: "DoubleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1034, col: 45, offset: 37349},
						name: "SingleQuoteMonospaceText",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceText",
			pos:  position{line: 1036, col: 1, offset: 37375},
			expr: &actionExpr{
				pos: position{line: 1036, col: 29, offset: 37403},
				run: (*parser).callonDoubleQuoteMonospaceText1,
				expr: &seqExpr{
					pos: position{line: 1036, col: 29, offset: 37403},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1036, col: 29, offset: 37403},
							expr: &litMatcher{
								pos:        position{line: 1036, col: 30, offset: 37404},
								val:        "\\\\",
								ignoreCase: false,
								want:       "\"\\\\\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 1036, col: 35, offset: 37409},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
						&labeledExpr{
							pos:   position{line: 1036, col: 40, offset: 37414},
							label: "elements",
							expr: &ruleRefExpr{
								pos:  position{line: 1036, col: 50, offset: 37424},
								name: "DoubleQuoteMonospaceTextElements",
							},
						},
						&litMatcher{
							pos:        position{line: 1036, col: 84, offset: 37458},
							val:        "``",
							ignoreCase: false,
							want:       "\"``\"",
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElements",
			pos:  position{line: 1040, col: 1, offset: 37588},
			expr: &seqExpr{
				pos: position{line: 1040, col: 37, offset: 37624},
				exprs: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1040, col: 37, offset: 37624},
						name: "DoubleQuoteMonospaceTextElement",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1040, col: 69, offset: 37656},
						expr: &seqExpr{
							pos: position{line: 1040, col: 70, offset: 37657},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1040, col: 70, offset: 37657},
									expr: &litMatcher{
										pos:        position{line: 1040, col: 72, offset: 37659},
										val:        "``",
										ignoreCase: false,
										want:       "\"``\"",
									},
								},
								&choiceExpr{
									pos: position{line: 1040, col: 79, offset: 37666},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1040, col: 79, offset: 37666},
											name: "Space",
										},
										&ruleRefExpr{
											pos:  position{line: 1040, col: 87, offset: 37674},
											name: "DoubleQuoteMonospaceTextElement",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextElement",
			pos:  position{line: 1042, col: 1, offset: 37743},
			expr: &choiceExpr{
				pos: position{line: 1042, col: 36, offset: 37778},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1042, col: 36, offset: 37778},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 1043, col: 11, offset: 37794},
						name: "SingleQuoteMonospaceText",
					},
					&ruleRefExpr{
						pos:  position{line: 1044, col: 11, offset: 37830},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1045, col: 11, offset: 37849},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1046, col: 11, offset: 37871},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1047, col: 11, offset: 37895},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1048, col: 11, offset: 37921},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1049, col: 11, offset: 37944},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1050, col: 11, offset: 37960},
						name: "Passthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1051, col: 11, offset: 37983},
						name: "DoubleQuoteMonospaceTextStringElement",
					},
					&ruleRefExpr{
						pos:  position{line: 1052, col: 11, offset: 38031},
						name: "DoubleQuoteMonospaceTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextStringElement",
			pos:  position{line: 1054, col: 1, offset: 38074},
			expr: &actionExpr{
				pos: position{line: 1054, col: 42, offset: 38115},
				run: (*parser).callonDoubleQuoteMonospaceTextStringElement1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1054, col: 42, offset: 38115},
					expr: &seqExpr{
						pos: position{line: 1054, col: 43, offset: 38116},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1054, col: 43, offset: 38116},
								expr: &litMatcher{
									pos:        position{line: 1054, col: 44, offset: 38117},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
							},
							&charClassMatcher{
								pos:        position{line: 1054, col: 49, offset: 38122},
								val:        "[^\\r\\n ^~{}]",
								chars:      []rune{'\r', '\n', ' ', '^', '~', '{', '}'},
								ignoreCase: false,
								inverted:   true,
							},
						},
					},
				},
			},
		},
		{
			name: "DoubleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1058, col: 1, offset: 38193},
			expr: &choiceExpr{
				pos: position{line: 1059, col: 5, offset: 38243},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1059, col: 5, offset: 38243},
						val:        "[^\\r\\n`]",
						chars:      []rune{'\r', '\n', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1060, col: 7, offset: 38345},
						run: (*parser).callonDoubleQuoteMonospaceTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1060, col: 7, offset: 38345},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1060, col: 7, offset: 38345},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1060, col: 12, offset: 38350},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceText",
			pos:  position{line: 1064, col: 1, offset: 38518},
			expr: &choiceExpr{
				pos: position{line: 1064, col: 29, offset: 38546},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1064, col: 29, offset: 38546},
						run: (*parser).callonSingleQuoteMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1064, col: 29, offset: 38546},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1064, col: 30, offset: 38547},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1064, col: 30, offset: 38547},
											expr: &litMatcher{
												pos:        position{line: 1064, col: 31, offset: 38548},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
										},
										&litMatcher{
											pos:        position{line: 1064, col: 35, offset: 38552},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1064, col: 39, offset: 38556},
											expr: &litMatcher{
												pos:        position{line: 1064, col: 40, offset: 38557},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 1064, col: 45, offset: 38562},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1064, col: 55, offset: 38572},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1064, col: 89, offset: 38606},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1066, col: 5, offset: 38792},
						run: (*parser).callonSingleQuoteMonospaceText13,
						expr: &seqExpr{
							pos: position{line: 1066, col: 5, offset: 38792},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1066, col: 5, offset: 38792},
									expr: &litMatcher{
										pos:        position{line: 1066, col: 6, offset: 38793},
										val:        "\\\\",
										ignoreCase: false,
										want:       "\"\\\\\\\\\"",
									},
								},
								&litMatcher{
									pos:        position{line: 1066, col: 11, offset: 38798},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1066, col: 15, offset: 38802},
									label: "elements",
									expr: &seqExpr{
										pos: position{line: 1066, col: 25, offset: 38812},
										exprs: []interface{}{
											&litMatcher{
												pos:        position{line: 1066, col: 25, offset: 38812},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
											&ruleRefExpr{
												pos:  position{line: 1066, col: 29, offset: 38816},
												name: "SingleQuoteMonospaceTextElements",
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1066, col: 63, offset: 38850},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElements",
			pos:  position{line: 1070, col: 1, offset: 39059},
			expr: &seqExpr{
				pos: position{line: 1070, col: 37, offset: 39095},
				exprs: []interface{}{
					&notExpr{
						pos: position{line: 1070, col: 37, offset: 39095},
						expr: &ruleRefExpr{
							pos:  position{line: 1070, col: 38, offset: 39096},
							name: "Space",
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 1070, col: 44, offset: 39102},
						expr: &ruleRefExpr{
							pos:  position{line: 1070, col: 44, offset: 39102},
							name: "SingleQuoteMonospaceTextElement",
						},
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextElement",
			pos:  position{line: 1072, col: 1, offset: 39136},
			expr: &choiceExpr{
				pos: position{line: 1072, col: 37, offset: 39172},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1072, col: 37, offset: 39172},
						name: "Word",
					},
					&ruleRefExpr{
						pos:  position{line: 1073, col: 11, offset: 39188},
						name: "DoubleQuoteMonospaceText",
					},
					&seqExpr{
						pos: position{line: 1074, col: 11, offset: 39224},
						exprs: []interface{}{
							&oneOrMoreExpr{
								pos: position{line: 1074, col: 11, offset: 39224},
								expr: &ruleRefExpr{
									pos:  position{line: 1074, col: 11, offset: 39224},
									name: "Space",
								},
							},
							&zeroOrOneExpr{
								pos: position{line: 1074, col: 18, offset: 39231},
								expr: &seqExpr{
									pos: position{line: 1074, col: 19, offset: 39232},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1074, col: 19, offset: 39232},
											val:        "`",
											ignoreCase: false,
											want:       "\"`\"",
										},
										&notExpr{
											pos: position{line: 1074, col: 23, offset: 39236},
											expr: &litMatcher{
												pos:        position{line: 1074, col: 24, offset: 39237},
												val:        "`",
												ignoreCase: false,
												want:       "\"`\"",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1075, col: 11, offset: 39365},
						name: "Newline",
					},
					&ruleRefExpr{
						pos:  position{line: 1076, col: 11, offset: 39403},
						name: "BoldText",
					},
					&ruleRefExpr{
						pos:  position{line: 1077, col: 11, offset: 39422},
						name: "ItalicText",
					},
					&ruleRefExpr{
						pos:  position{line: 1078, col: 11, offset: 39443},
						name: "SubscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1079, col: 11, offset: 39467},
						name: "SuperscriptText",
					},
					&ruleRefExpr{
						pos:  position{line: 1080, col: 11, offset: 39493},
						name: "InlineImage",
					},
					&ruleRefExpr{
						pos:  position{line: 1081, col: 11, offset: 39516},
						name: "Link",
					},
					&ruleRefExpr{
						pos:  position{line: 1082, col: 11, offset: 39532},
						name: "Passthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1083, col: 11, offset: 39555},
						name: "DocumentAttributeSubstitution",
					},
					&ruleRefExpr{
						pos:  position{line: 1084, col: 11, offset: 39595},
						name: "SingleQuoteMonospaceTextStringElement",
					},
					&ruleRefExpr{
						pos:  position{line: 1085, col: 11, offset: 39643},
						name: "SingleQuoteMonospaceTextFallbackCharacter",
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextStringElement",
			pos:  position{line: 1087, col: 1, offset: 39686},
			expr: &actionExpr{
				pos: position{line: 1087, col: 42, offset: 39727},
				run: (*parser).callonSingleQuoteMonospaceTextStringElement1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1087, col: 42, offset: 39727},
					expr: &charClassMatcher{
						pos:        position{line: 1087, col: 42, offset: 39727},
						val:        "[^\\r\\n {}`^~]",
						chars:      []rune{'\r', '\n', ' ', '{', '}', '`', '^', '~'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "SingleQuoteMonospaceTextFallbackCharacter",
			pos:  position{line: 1091, col: 1, offset: 39953},
			expr: &choiceExpr{
				pos: position{line: 1092, col: 5, offset: 40003},
				alternatives: []interface{}{
					&charClassMatcher{
						pos:        position{line: 1092, col: 5, offset: 40003},
						val:        "[^\\r\\n`]",
						chars:      []rune{'\r', '\n', '`'},
						ignoreCase: false,
						inverted:   true,
					},
					&actionExpr{
						pos: position{line: 1093, col: 7, offset: 40105},
						run: (*parser).callonSingleQuoteMonospaceTextFallbackCharacter3,
						expr: &seqExpr{
							pos: position{line: 1093, col: 7, offset: 40105},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1093, col: 7, offset: 40105},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&ruleRefExpr{
									pos:  position{line: 1093, col: 11, offset: 40109},
									name: "Alphanums",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "EscapedMonospaceText",
			pos:  position{line: 1097, col: 1, offset: 40278},
			expr: &choiceExpr{
				pos: position{line: 1098, col: 5, offset: 40307},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1098, col: 5, offset: 40307},
						run: (*parser).callonEscapedMonospaceText2,
						expr: &seqExpr{
							pos: position{line: 1098, col: 5, offset: 40307},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1098, col: 5, offset: 40307},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1098, col: 18, offset: 40320},
										name: "TwoOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1098, col: 40, offset: 40342},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1098, col: 45, offset: 40347},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1098, col: 55, offset: 40357},
										name: "DoubleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1098, col: 89, offset: 40391},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1100, col: 9, offset: 40548},
						run: (*parser).callonEscapedMonospaceText10,
						expr: &seqExpr{
							pos: position{line: 1100, col: 9, offset: 40548},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1100, col: 9, offset: 40548},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1100, col: 22, offset: 40561},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1100, col: 44, offset: 40583},
									val:        "``",
									ignoreCase: false,
									want:       "\"``\"",
								},
								&labeledExpr{
									pos:   position{line: 1100, col: 49, offset: 40588},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1100, col: 59, offset: 40598},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1100, col: 93, offset: 40632},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1103, col: 9, offset: 40832},
						run: (*parser).callonEscapedMonospaceText18,
						expr: &seqExpr{
							pos: position{line: 1103, col: 9, offset: 40832},
							exprs: []interface{}{
								&labeledExpr{
									pos:   position{line: 1103, col: 9, offset: 40832},
									label: "backslashes",
									expr: &ruleRefExpr{
										pos:  position{line: 1103, col: 22, offset: 40845},
										name: "OneOrMoreBackslashes",
									},
								},
								&litMatcher{
									pos:        position{line: 1103, col: 44, offset: 40867},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
								&labeledExpr{
									pos:   position{line: 1103, col: 48, offset: 40871},
									label: "elements",
									expr: &ruleRefExpr{
										pos:  position{line: 1103, col: 58, offset: 40881},
										name: "SingleQuoteMonospaceTextElements",
									},
								},
								&litMatcher{
									pos:        position{line: 1103, col: 92, offset: 40915},
									val:        "`",
									ignoreCase: false,
									want:       "\"`\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SubscriptText",
			pos:  position{line: 1107, col: 1, offset: 41065},
			expr: &actionExpr{
				pos: position{line: 1107, col: 18, offset: 41082},
				run: (*parser).callonSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1107, col: 18, offset: 41082},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1107, col: 18, offset: 41082},
							expr: &litMatcher{
								pos:        position{line: 1107, col: 19, offset: 41083},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 1107, col: 23, offset: 41087},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1107, col: 27, offset: 41091},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1107, col: 36, offset: 41100},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1107, col: 58, offset: 41122},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SubscriptTextElement",
			pos:  position{line: 1111, col: 1, offset: 41211},
			expr: &choiceExpr{
				pos: position{line: 1111, col: 25, offset: 41235},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1111, col: 25, offset: 41235},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1111, col: 38, offset: 41248},
						name: "NonSubscriptText",
					},
				},
			},
		},
		{
			name: "NonSubscriptText",
			pos:  position{line: 1113, col: 1, offset: 41267},
			expr: &actionExpr{
				pos: position{line: 1113, col: 21, offset: 41287},
				run: (*parser).callonNonSubscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1113, col: 21, offset: 41287},
					expr: &charClassMatcher{
						pos:        position{line: 1113, col: 21, offset: 41287},
						val:        "[^\\r\\n ~]",
						chars:      []rune{'\r', '\n', ' ', '~'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSubscriptText",
			pos:  position{line: 1117, col: 1, offset: 41364},
			expr: &actionExpr{
				pos: position{line: 1117, col: 25, offset: 41388},
				run: (*parser).callonEscapedSubscriptText1,
				expr: &seqExpr{
					pos: position{line: 1117, col: 25, offset: 41388},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1117, col: 25, offset: 41388},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1117, col: 38, offset: 41401},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1117, col: 60, offset: 41423},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
						&labeledExpr{
							pos:   position{line: 1117, col: 64, offset: 41427},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1117, col: 73, offset: 41436},
								name: "SubscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1117, col: 95, offset: 41458},
							val:        "~",
							ignoreCase: false,
							want:       "\"~\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptText",
			pos:  position{line: 1121, col: 1, offset: 41587},
			expr: &actionExpr{
				pos: position{line: 1121, col: 20, offset: 41606},
				run: (*parser).callonSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1121, col: 20, offset: 41606},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1121, col: 20, offset: 41606},
							expr: &litMatcher{
								pos:        position{line: 1121, col: 21, offset: 41607},
								val:        "\\",
								ignoreCase: false,
								want:       "\"\\\\\"",
							},
						},
						&litMatcher{
							pos:        position{line: 1121, col: 25, offset: 41611},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1121, col: 29, offset: 41615},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1121, col: 38, offset: 41624},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1121, col: 62, offset: 41648},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "SuperscriptTextElement",
			pos:  position{line: 1125, col: 1, offset: 41739},
			expr: &choiceExpr{
				pos: position{line: 1125, col: 27, offset: 41765},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1125, col: 27, offset: 41765},
						name: "QuotedText",
					},
					&ruleRefExpr{
						pos:  position{line: 1125, col: 40, offset: 41778},
						name: "NonSuperscriptText",
					},
				},
			},
		},
		{
			name: "NonSuperscriptText",
			pos:  position{line: 1127, col: 1, offset: 41799},
			expr: &actionExpr{
				pos: position{line: 1127, col: 23, offset: 41821},
				run: (*parser).callonNonSuperscriptText1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1127, col: 23, offset: 41821},
					expr: &charClassMatcher{
						pos:        position{line: 1127, col: 23, offset: 41821},
						val:        "[^\\r\\n ^]",
						chars:      []rune{'\r', '\n', ' ', '^'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "EscapedSuperscriptText",
			pos:  position{line: 1131, col: 1, offset: 41898},
			expr: &actionExpr{
				pos: position{line: 1131, col: 27, offset: 41924},
				run: (*parser).callonEscapedSuperscriptText1,
				expr: &seqExpr{
					pos: position{line: 1131, col: 27, offset: 41924},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1131, col: 27, offset: 41924},
							label: "backslashes",
							expr: &ruleRefExpr{
								pos:  position{line: 1131, col: 40, offset: 41937},
								name: "OneOrMoreBackslashes",
							},
						},
						&litMatcher{
							pos:        position{line: 1131, col: 62, offset: 41959},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
						&labeledExpr{
							pos:   position{line: 1131, col: 66, offset: 41963},
							label: "element",
							expr: &ruleRefExpr{
								pos:  position{line: 1131, col: 75, offset: 41972},
								name: "SuperscriptTextElement",
							},
						},
						&litMatcher{
							pos:        position{line: 1131, col: 99, offset: 41996},
							val:        "^",
							ignoreCase: false,
							want:       "\"^\"",
						},
					},
				},
			},
		},
		{
			name: "Passthrough",
			pos:  position{line: 1138, col: 1, offset: 42232},
			expr: &choiceExpr{
				pos: position{line: 1138, col: 16, offset: 42247},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1138, col: 16, offset: 42247},
						name: "TriplePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1138, col: 40, offset: 42271},
						name: "SinglePlusPassthrough",
					},
					&ruleRefExpr{
						pos:  position{line: 1138, col: 64, offset: 42295},
						name: "PassthroughMacro",
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughPrefix",
			pos:  position{line: 1140, col: 1, offset: 42313},
			expr: &litMatcher{
				pos:        position{line: 1140, col: 32, offset: 42344},
				val:        "+",
				ignoreCase: false,
				want:       "\"+\"",
			},
		},
		{
			name: "SinglePlusPassthrough",
			pos:  position{line: 1142, col: 1, offset: 42349},
			expr: &actionExpr{
				pos: position{line: 1142, col: 26, offset: 42374},
				run: (*parser).callonSinglePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1142, col: 26, offset: 42374},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1142, col: 26, offset: 42374},
							name: "SinglePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1142, col: 54, offset: 42402},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1142, col: 63, offset: 42411},
								name: "SinglePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1142, col: 93, offset: 42441},
							name: "SinglePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1142, col: 121, offset: 42469},
							expr: &ruleRefExpr{
								pos:  position{line: 1142, col: 122, offset: 42470},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "SinglePlusPassthroughContent",
			pos:  position{line: 1146, col: 1, offset: 42569},
			expr: &choiceExpr{
				pos: position{line: 1146, col: 33, offset: 42601},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1146, col: 34, offset: 42602},
						run: (*parser).callonSinglePlusPassthroughContent2,
						expr: &seqExpr{
							pos: position{line: 1146, col: 34, offset: 42602},
							exprs: []interface{}{
								&seqExpr{
									pos: position{line: 1146, col: 35, offset: 42603},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1146, col: 35, offset: 42603},
											expr: &ruleRefExpr{
												pos:  position{line: 1146, col: 36, offset: 42604},
												name: "SinglePlusPassthroughPrefix",
											},
										},
										&notExpr{
											pos: position{line: 1146, col: 64, offset: 42632},
											expr: &ruleRefExpr{
												pos:  position{line: 1146, col: 65, offset: 42633},
												name: "Space",
											},
										},
										&notExpr{
											pos: position{line: 1146, col: 71, offset: 42639},
											expr: &ruleRefExpr{
												pos:  position{line: 1146, col: 72, offset: 42640},
												name: "Newline",
											},
										},
										&anyMatcher{
											line: 1146, col: 80, offset: 42648,
										},
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1146, col: 83, offset: 42651},
									expr: &seqExpr{
										pos: position{line: 1146, col: 84, offset: 42652},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1146, col: 84, offset: 42652},
												expr: &seqExpr{
													pos: position{line: 1146, col: 86, offset: 42654},
													exprs: []interface{}{
														&oneOrMoreExpr{
															pos: position{line: 1146, col: 86, offset: 42654},
															expr: &ruleRefExpr{
																pos:  position{line: 1146, col: 86, offset: 42654},
																name: "Space",
															},
														},
														&ruleRefExpr{
															pos:  position{line: 1146, col: 93, offset: 42661},
															name: "SinglePlusPassthroughPrefix",
														},
													},
												},
											},
											&notExpr{
												pos: position{line: 1146, col: 122, offset: 42690},
												expr: &ruleRefExpr{
													pos:  position{line: 1146, col: 123, offset: 42691},
													name: "SinglePlusPassthroughPrefix",
												},
											},
											&notExpr{
												pos: position{line: 1146, col: 151, offset: 42719},
												expr: &ruleRefExpr{
													pos:  position{line: 1146, col: 152, offset: 42720},
													name: "Newline",
												},
											},
											&anyMatcher{
												line: 1146, col: 160, offset: 42728,
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1148, col: 7, offset: 42870},
						run: (*parser).callonSinglePlusPassthroughContent24,
						expr: &seqExpr{
							pos: position{line: 1148, col: 8, offset: 42871},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1148, col: 8, offset: 42871},
									expr: &ruleRefExpr{
										pos:  position{line: 1148, col: 9, offset: 42872},
										name: "Space",
									},
								},
								&notExpr{
									pos: position{line: 1148, col: 15, offset: 42878},
									expr: &ruleRefExpr{
										pos:  position{line: 1148, col: 16, offset: 42879},
										name: "Newline",
									},
								},
								&notExpr{
									pos: position{line: 1148, col: 24, offset: 42887},
									expr: &ruleRefExpr{
										pos:  position{line: 1148, col: 25, offset: 42888},
										name: "SinglePlusPassthroughPrefix",
									},
								},
								&anyMatcher{
									line: 1148, col: 53, offset: 42916,
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughPrefix",
			pos:  position{line: 1152, col: 1, offset: 42998},
			expr: &litMatcher{
				pos:        position{line: 1152, col: 32, offset: 43029},
				val:        "+++",
				ignoreCase: false,
				want:       "\"+++\"",
			},
		},
		{
			name: "TriplePlusPassthrough",
			pos:  position{line: 1154, col: 1, offset: 43036},
			expr: &actionExpr{
				pos: position{line: 1154, col: 26, offset: 43061},
				run: (*parser).callonTriplePlusPassthrough1,
				expr: &seqExpr{
					pos: position{line: 1154, col: 26, offset: 43061},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1154, col: 26, offset: 43061},
							name: "TriplePlusPassthroughPrefix",
						},
						&labeledExpr{
							pos:   position{line: 1154, col: 54, offset: 43089},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1154, col: 63, offset: 43098},
								name: "TriplePlusPassthroughContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1154, col: 93, offset: 43128},
							name: "TriplePlusPassthroughPrefix",
						},
						&notExpr{
							pos: position{line: 1154, col: 121, offset: 43156},
							expr: &ruleRefExpr{
								pos:  position{line: 1154, col: 122, offset: 43157},
								name: "Alphanum",
							},
						},
					},
				},
			},
		},
		{
			name: "TriplePlusPassthroughContent",
			pos:  position{line: 1158, col: 1, offset: 43256},
			expr: &choiceExpr{
				pos: position{line: 1158, col: 33, offset: 43288},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1158, col: 34, offset: 43289},
						run: (*parser).callonTriplePlusPassthroughContent2,
						expr: &zeroOrMoreExpr{
							pos: position{line: 1158, col: 34, offset: 43289},
							expr: &seqExpr{
								pos: position{line: 1158, col: 35, offset: 43290},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1158, col: 35, offset: 43290},
										expr: &ruleRefExpr{
											pos:  position{line: 1158, col: 36, offset: 43291},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1158, col: 64, offset: 43319,
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1160, col: 7, offset: 43484},
						run: (*parser).callonTriplePlusPassthroughContent8,
						expr: &zeroOrOneExpr{
							pos: position{line: 1160, col: 7, offset: 43484},
							expr: &seqExpr{
								pos: position{line: 1160, col: 8, offset: 43485},
								exprs: []interface{}{
									&notExpr{
										pos: position{line: 1160, col: 8, offset: 43485},
										expr: &ruleRefExpr{
											pos:  position{line: 1160, col: 9, offset: 43486},
											name: "Space",
										},
									},
									&notExpr{
										pos: position{line: 1160, col: 15, offset: 43492},
										expr: &ruleRefExpr{
											pos:  position{line: 1160, col: 16, offset: 43493},
											name: "Newline",
										},
									},
									&notExpr{
										pos: position{line: 1160, col: 24, offset: 43501},
										expr: &ruleRefExpr{
											pos:  position{line: 1160, col: 25, offset: 43502},
											name: "TriplePlusPassthroughPrefix",
										},
									},
									&anyMatcher{
										line: 1160, col: 53, offset: 43530,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacro",
			pos:  position{line: 1164, col: 1, offset: 43613},
			expr: &choiceExpr{
				pos: position{line: 1164, col: 21, offset: 43633},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1164, col: 21, offset: 43633},
						run: (*parser).callonPassthroughMacro2,
						expr: &seqExpr{
							pos: position{line: 1164, col: 21, offset: 43633},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1164, col: 21, offset: 43633},
									val:        "pass:[",
									ignoreCase: false,
									want:       "\"pass:[\"",
								},
								&labeledExpr{
									pos:   position{line: 1164, col: 30, offset: 43642},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1164, col: 38, offset: 43650},
										expr: &ruleRefExpr{
											pos:  position{line: 1164, col: 39, offset: 43651},
											name: "PassthroughMacroCharacter",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1164, col: 67, offset: 43679},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1166, col: 5, offset: 43769},
						run: (*parser).callonPassthroughMacro9,
						expr: &seqExpr{
							pos: position{line: 1166, col: 5, offset: 43769},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1166, col: 5, offset: 43769},
									val:        "pass:q[",
									ignoreCase: false,
									want:       "\"pass:q[\"",
								},
								&labeledExpr{
									pos:   position{line: 1166, col: 15, offset: 43779},
									label: "content",
									expr: &zeroOrMoreExpr{
										pos: position{line: 1166, col: 23, offset: 43787},
										expr: &choiceExpr{
											pos: position{line: 1166, col: 24, offset: 43788},
											alternatives: []interface{}{
												&ruleRefExpr{
													pos:  position{line: 1166, col: 24, offset: 43788},
													name: "QuotedText",
												},
												&ruleRefExpr{
													pos:  position{line: 1166, col: 37, offset: 43801},
													name: "PassthroughMacroCharacter",
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1166, col: 65, offset: 43829},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "PassthroughMacroCharacter",
			pos:  position{line: 1170, col: 1, offset: 43919},
			expr: &actionExpr{
				pos: position{line: 1170, col: 30, offset: 43948},
				run: (*parser).callonPassthroughMacroCharacter1,
				expr: &charClassMatcher{
					pos:        position{line: 1170, col: 30, offset: 43948},
					val:        "[^\\]]",
					chars:      []rune{']'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "CrossReference",
			pos:  position{line: 1177, col: 1, offset: 44121},
			expr: &choiceExpr{
				pos: position{line: 1177, col: 19, offset: 44139},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1177, col: 19, offset: 44139},
						name: "InternalCrossReference",
					},
					&ruleRefExpr{
						pos:  position{line: 1177, col: 44, offset: 44164},
						name: "ExternalCrossReference",
					},
				},
			},
		},
		{
			name: "InternalCrossReference",
			pos:  position{line: 1179, col: 1, offset: 44189},
			expr: &choiceExpr{
				pos: position{line: 1179, col: 27, offset: 44215},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1179, col: 27, offset: 44215},
						run: (*parser).callonInternalCrossReference2,
						expr: &seqExpr{
							pos: position{line: 1179, col: 27, offset: 44215},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1179, col: 27, offset: 44215},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 1179, col: 32, offset: 44220},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1179, col: 36, offset: 44224},
										name: "ID",
									},
								},
								&zeroOrMoreExpr{
									pos: position{line: 1179, col: 40, offset: 44228},
									expr: &ruleRefExpr{
										pos:  position{line: 1179, col: 40, offset: 44228},
										name: "Space",
									},
								},
								&litMatcher{
									pos:        position{line: 1179, col: 47, offset: 44235},
									val:        ",",
									ignoreCase: false,
									want:       "\",\"",
								},
								&labeledExpr{
									pos:   position{line: 1179, col: 51, offset: 44239},
									label: "label",
									expr: &ruleRefExpr{
										pos:  position{line: 1179, col: 58, offset: 44246},
										name: "CrossReferenceLabel",
									},
								},
								&litMatcher{
									pos:        position{line: 1179, col: 79, offset: 44267},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1181, col: 5, offset: 44350},
						run: (*parser).callonInternalCrossReference13,
						expr: &seqExpr{
							pos: position{line: 1181, col: 5, offset: 44350},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1181, col: 5, offset: 44350},
									val:        "<<",
									ignoreCase: false,
									want:       "\"<<\"",
								},
								&labeledExpr{
									pos:   position{line: 1181, col: 10, offset: 44355},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 1181, col: 14, offset: 44359},
										name: "ID",
									},
								},
								&litMatcher{
									pos:        position{line: 1181, col: 18, offset: 44363},
									val:        ">>",
									ignoreCase: false,
									want:       "\">>\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalCrossReference",
			pos:  position{line: 1185, col: 1, offset: 44435},
			expr: &actionExpr{
				pos: position{line: 1185, col: 27, offset: 44461},
				run: (*parser).callonExternalCrossReference1,
				expr: &seqExpr{
					pos: position{line: 1185, col: 27, offset: 44461},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1185, col: 27, offset: 44461},
							val:        "xref:",
							ignoreCase: false,
							want:       "\"xref:\"",
						},
						&labeledExpr{
							pos:   position{line: 1185, col: 35, offset: 44469},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1185, col: 40, offset: 44474},
								name: "FileLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 1185, col: 54, offset: 44488},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1185, col: 72, offset: 44506},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "CrossReferenceLabel",
			pos:  position{line: 1189, col: 1, offset: 44636},
			expr: &ruleRefExpr{
				pos:  position{line: 1189, col: 24, offset: 44659},
				name: "ElementTitleContent",
			},
		},
		{
			name: "Link",
			pos:  position{line: 1194, col: 1, offset: 44781},
			expr: &choiceExpr{
				pos: position{line: 1194, col: 9, offset: 44789},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1194, col: 9, offset: 44789},
						name: "RelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1194, col: 24, offset: 44804},
						name: "ExternalLink",
					},
				},
			},
		},
		{
			name: "RelativeLink",
			pos:  position{line: 1197, col: 1, offset: 44885},
			expr: &actionExpr{
				pos: position{line: 1197, col: 17, offset: 44901},
				run: (*parser).callonRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1197, col: 17, offset: 44901},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1197, col: 17, offset: 44901},
							val:        "link:",
							ignoreCase: false,
							want:       "\"link:\"",
						},
						&labeledExpr{
							pos:   position{line: 1197, col: 25, offset: 44909},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1197, col: 30, offset: 44914},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1197, col: 40, offset: 44924},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1197, col: 58, offset: 44942},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalLink",
			pos:  position{line: 1201, col: 1, offset: 45060},
			expr: &actionExpr{
				pos: position{line: 1201, col: 17, offset: 45076},
				run: (*parser).callonExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1201, col: 17, offset: 45076},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1201, col: 17, offset: 45076},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1201, col: 22, offset: 45081},
								name: "LocationWithScheme",
							},
						},
						&labeledExpr{
							pos:   position{line: 1201, col: 42, offset: 45101},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1201, col: 59, offset: 45118},
								expr: &ruleRefExpr{
									pos:  position{line: 1201, col: 60, offset: 45119},
									name: "LinkAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LinkAttributes",
			pos:  position{line: 1205, col: 1, offset: 45212},
			expr: &actionExpr{
				pos: position{line: 1205, col: 19, offset: 45230},
				run: (*parser).callonLinkAttributes1,
				expr: &seqExpr{
					pos: position{line: 1205, col: 19, offset: 45230},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1205, col: 19, offset: 45230},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1205, col: 23, offset: 45234},
							label: "firstAttr",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1205, col: 33, offset: 45244},
								expr: &ruleRefExpr{
									pos:  position{line: 1205, col: 34, offset: 45245},
									name: "FirstLinkAttributeElement",
								},
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1206, col: 5, offset: 45277},
							expr: &ruleRefExpr{
								pos:  position{line: 1206, col: 5, offset: 45277},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1206, col: 12, offset: 45284},
							label: "otherattrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1206, col: 23, offset: 45295},
								expr: &ruleRefExpr{
									pos:  position{line: 1206, col: 24, offset: 45296},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1206, col: 43, offset: 45315},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "FirstLinkAttributeElement",
			pos:  position{line: 1210, col: 1, offset: 45432},
			expr: &actionExpr{
				pos: position{line: 1210, col: 30, offset: 45461},
				run: (*parser).callonFirstLinkAttributeElement1,
				expr: &labeledExpr{
					pos:   position{line: 1210, col: 30, offset: 45461},
					label: "element",
					expr: &choiceExpr{
						pos: position{line: 1212, col: 5, offset: 45512},
						alternatives: []interface{}{
							&actionExpr{
								pos: position{line: 1212, col: 6, offset: 45513},
								run: (*parser).callonFirstLinkAttributeElement4,
								expr: &seqExpr{
									pos: position{line: 1212, col: 6, offset: 45513},
									exprs: []interface{}{
										&litMatcher{
											pos:        position{line: 1212, col: 6, offset: 45513},
											val:        "\"",
											ignoreCase: false,
											want:       "\"\\\"\"",
										},
										&labeledExpr{
											pos:   position{line: 1212, col: 11, offset: 45518},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 1212, col: 20, offset: 45527},
												expr: &choiceExpr{
													pos: position{line: 1212, col: 21, offset: 45528},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1212, col: 21, offset: 45528},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1212, col: 34, offset: 45541},
															name: "QuotedAttributeChar",
														},
													},
												},
											},
										},
										&litMatcher{
											pos:        position{line: 1212, col: 56, offset: 45563},
											val:        "\"",
											ignoreCase: false,
											want:       "\"\\\"\"",
										},
										&andExpr{
											pos: position{line: 1212, col: 61, offset: 45568},
											expr: &notExpr{
												pos: position{line: 1212, col: 63, offset: 45570},
												expr: &litMatcher{
													pos:        position{line: 1212, col: 64, offset: 45571},
													val:        "=",
													ignoreCase: false,
													want:       "\"=\"",
												},
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 1212, col: 69, offset: 45576},
											expr: &litMatcher{
												pos:        position{line: 1212, col: 69, offset: 45576},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
										},
									},
								},
							},
							&actionExpr{
								pos: position{line: 1216, col: 6, offset: 45703},
								run: (*parser).callonFirstLinkAttributeElement18,
								expr: &seqExpr{
									pos: position{line: 1216, col: 6, offset: 45703},
									exprs: []interface{}{
										&labeledExpr{
											pos:   position{line: 1216, col: 6, offset: 45703},
											label: "elements",
											expr: &oneOrMoreExpr{
												pos: position{line: 1216, col: 15, offset: 45712},
												expr: &choiceExpr{
													pos: position{line: 1216, col: 16, offset: 45713},
													alternatives: []interface{}{
														&ruleRefExpr{
															pos:  position{line: 1216, col: 16, offset: 45713},
															name: "QuotedText",
														},
														&ruleRefExpr{
															pos:  position{line: 1216, col: 29, offset: 45726},
															name: "UnquotedAttributeChar",
														},
													},
												},
											},
										},
										&andExpr{
											pos: position{line: 1216, col: 53, offset: 45750},
											expr: &notExpr{
												pos: position{line: 1216, col: 55, offset: 45752},
												expr: &litMatcher{
													pos:        position{line: 1216, col: 56, offset: 45753},
													val:        "=",
													ignoreCase: false,
													want:       "\"=\"",
												},
											},
										},
										&zeroOrOneExpr{
											pos: position{line: 1216, col: 61, offset: 45758},
											expr: &litMatcher{
												pos:        position{line: 1216, col: 61, offset: 45758},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "AttributeChar",
			pos:  position{line: 1222, col: 1, offset: 45872},
			expr: &actionExpr{
				pos: position{line: 1222, col: 18, offset: 45889},
				run: (*parser).callonAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1222, col: 18, offset: 45889},
					val:        "[^\\r\\n\"=\\],]",
					chars:      []rune{'\r', '\n', '"', '=', ']', ','},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "QuotedAttributeChar",
			pos:  position{line: 1226, col: 1, offset: 45975},
			expr: &actionExpr{
				pos: position{line: 1226, col: 24, offset: 45998},
				run: (*parser).callonQuotedAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1226, col: 24, offset: 45998},
					val:        "[^\\r\\n\"=\\]]",
					chars:      []rune{'\r', '\n', '"', '=', ']'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "UnquotedAttributeChar",
			pos:  position{line: 1230, col: 1, offset: 46091},
			expr: &actionExpr{
				pos: position{line: 1230, col: 26, offset: 46116},
				run: (*parser).callonUnquotedAttributeChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1230, col: 26, offset: 46116},
					val:        "[^\\r\\n\"=\\],]",
					chars:      []rune{'\r', '\n', '"', '=', ']', ','},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "InlineLinks",
			pos:  position{line: 1235, col: 1, offset: 46273},
			expr: &actionExpr{
				pos: position{line: 1236, col: 5, offset: 46293},
				run: (*parser).callonInlineLinks1,
				expr: &seqExpr{
					pos: position{line: 1236, col: 5, offset: 46293},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1236, col: 5, offset: 46293},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1236, col: 14, offset: 46302},
								expr: &choiceExpr{
									pos: position{line: 1236, col: 15, offset: 46303},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1236, col: 15, offset: 46303},
											name: "Word",
										},
										&oneOrMoreExpr{
											pos: position{line: 1237, col: 11, offset: 46318},
											expr: &ruleRefExpr{
												pos:  position{line: 1237, col: 11, offset: 46318},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1238, col: 11, offset: 46336},
											name: "ResolvedLink",
										},
										&ruleRefExpr{
											pos:  position{line: 1239, col: 11, offset: 46360},
											name: "Parenthesis",
										},
										&ruleRefExpr{
											pos:  position{line: 1240, col: 11, offset: 46382},
											name: "AnyChar",
										},
										&ruleRefExpr{
											pos:  position{line: 1241, col: 11, offset: 46400},
											name: "Newline",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1241, col: 21, offset: 46410},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "ResolvedLink",
			pos:  position{line: 1245, col: 1, offset: 46480},
			expr: &choiceExpr{
				pos: position{line: 1245, col: 17, offset: 46496},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1245, col: 17, offset: 46496},
						name: "ResolvedRelativeLink",
					},
					&ruleRefExpr{
						pos:  position{line: 1245, col: 40, offset: 46519},
						name: "ResolvedExternalLink",
					},
				},
			},
		},
		{
			name: "ResolvedRelativeLink",
			pos:  position{line: 1248, col: 1, offset: 46655},
			expr: &actionExpr{
				pos: position{line: 1248, col: 25, offset: 46679},
				run: (*parser).callonResolvedRelativeLink1,
				expr: &seqExpr{
					pos: position{line: 1248, col: 25, offset: 46679},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1248, col: 25, offset: 46679},
							val:        "link:",
							ignoreCase: false,
							want:       "\"link:\"",
						},
						&labeledExpr{
							pos:   position{line: 1248, col: 33, offset: 46687},
							label: "url",
							expr: &choiceExpr{
								pos: position{line: 1248, col: 38, offset: 46692},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1248, col: 38, offset: 46692},
										name: "ResolvedLocation",
									},
									&ruleRefExpr{
										pos:  position{line: 1248, col: 57, offset: 46711},
										name: "ResolvedFileLocation",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1248, col: 79, offset: 46733},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1248, col: 97, offset: 46751},
								name: "LinkAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ResolvedExternalLink",
			pos:  position{line: 1252, col: 1, offset: 46869},
			expr: &actionExpr{
				pos: position{line: 1252, col: 25, offset: 46893},
				run: (*parser).callonResolvedExternalLink1,
				expr: &seqExpr{
					pos: position{line: 1252, col: 25, offset: 46893},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1252, col: 25, offset: 46893},
							label: "url",
							expr: &ruleRefExpr{
								pos:  position{line: 1252, col: 30, offset: 46898},
								name: "ResolvedLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 1252, col: 48, offset: 46916},
							label: "inlineAttributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1252, col: 65, offset: 46933},
								expr: &ruleRefExpr{
									pos:  position{line: 1252, col: 66, offset: 46934},
									name: "LinkAttributes",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ImageBlock",
			pos:  position{line: 1259, col: 1, offset: 47129},
			expr: &actionExpr{
				pos: position{line: 1259, col: 15, offset: 47143},
				run: (*parser).callonImageBlock1,
				expr: &seqExpr{
					pos: position{line: 1259, col: 15, offset: 47143},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1259, col: 15, offset: 47143},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1259, col: 26, offset: 47154},
								expr: &ruleRefExpr{
									pos:  position{line: 1259, col: 27, offset: 47155},
									name: "ElementAttributes",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1259, col: 47, offset: 47175},
							val:        "image::",
							ignoreCase: false,
							want:       "\"image::\"",
						},
						&labeledExpr{
							pos:   position{line: 1259, col: 57, offset: 47185},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1259, col: 63, offset: 47191},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1259, col: 73, offset: 47201},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1259, col: 91, offset: 47219},
								name: "ImageAttributes",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1259, col: 108, offset: 47236},
							expr: &ruleRefExpr{
								pos:  position{line: 1259, col: 108, offset: 47236},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1259, col: 115, offset: 47243},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "InlineImage",
			pos:  position{line: 1263, col: 1, offset: 47362},
			expr: &actionExpr{
				pos: position{line: 1263, col: 16, offset: 47377},
				run: (*parser).callonInlineImage1,
				expr: &seqExpr{
					pos: position{line: 1263, col: 16, offset: 47377},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1263, col: 16, offset: 47377},
							val:        "image:",
							ignoreCase: false,
							want:       "\"image:\"",
						},
						&notExpr{
							pos: position{line: 1263, col: 25, offset: 47386},
							expr: &litMatcher{
								pos:        position{line: 1263, col: 26, offset: 47387},
								val:        ":",
								ignoreCase: false,
								want:       "\":\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1263, col: 30, offset: 47391},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1263, col: 36, offset: 47397},
								name: "Location",
							},
						},
						&labeledExpr{
							pos:   position{line: 1263, col: 46, offset: 47407},
							label: "inlineAttributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1263, col: 64, offset: 47425},
								name: "ImageAttributes",
							},
						},
					},
				},
			},
		},
		{
			name: "ImageAttributes",
			pos:  position{line: 1267, col: 1, offset: 47546},
			expr: &actionExpr{
				pos: position{line: 1267, col: 20, offset: 47565},
				run: (*parser).callonImageAttributes1,
				expr: &seqExpr{
					pos: position{line: 1267, col: 20, offset: 47565},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1267, col: 20, offset: 47565},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 1267, col: 24, offset: 47569},
							label: "alt",
							expr: &zeroOrOneExpr{
								pos: position{line: 1267, col: 28, offset: 47573},
								expr: &ruleRefExpr{
									pos:  position{line: 1267, col: 29, offset: 47574},
									name: "StandaloneAttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1267, col: 56, offset: 47601},
							expr: &litMatcher{
								pos:        position{line: 1267, col: 56, offset: 47601},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1267, col: 61, offset: 47606},
							label: "width",
							expr: &zeroOrOneExpr{
								pos: position{line: 1267, col: 67, offset: 47612},
								expr: &ruleRefExpr{
									pos:  position{line: 1267, col: 68, offset: 47613},
									name: "StandaloneAttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1267, col: 95, offset: 47640},
							expr: &litMatcher{
								pos:        position{line: 1267, col: 95, offset: 47640},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&labeledExpr{
							pos:   position{line: 1267, col: 100, offset: 47645},
							label: "height",
							expr: &zeroOrOneExpr{
								pos: position{line: 1267, col: 107, offset: 47652},
								expr: &ruleRefExpr{
									pos:  position{line: 1267, col: 108, offset: 47653},
									name: "StandaloneAttributeValue",
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 1267, col: 135, offset: 47680},
							expr: &litMatcher{
								pos:        position{line: 1267, col: 135, offset: 47680},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1267, col: 140, offset: 47685},
							expr: &ruleRefExpr{
								pos:  position{line: 1267, col: 140, offset: 47685},
								name: "Space",
							},
						},
						&labeledExpr{
							pos:   position{line: 1267, col: 147, offset: 47692},
							label: "otherattrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1267, col: 158, offset: 47703},
								expr: &ruleRefExpr{
									pos:  position{line: 1267, col: 159, offset: 47704},
									name: "GenericAttribute",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1267, col: 178, offset: 47723},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
		},
		{
			name: "InlineFootnote",
			pos:  position{line: 1274, col: 1, offset: 48013},
			expr: &choiceExpr{
				pos: position{line: 1274, col: 19, offset: 48031},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1274, col: 19, offset: 48031},
						run: (*parser).callonInlineFootnote2,
						expr: &seqExpr{
							pos: position{line: 1274, col: 19, offset: 48031},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1274, col: 19, offset: 48031},
									val:        "footnote:[",
									ignoreCase: false,
									want:       "\"footnote:[\"",
								},
								&labeledExpr{
									pos:   position{line: 1274, col: 32, offset: 48044},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 1274, col: 41, offset: 48053},
										name: "FootnoteContent",
									},
								},
								&litMatcher{
									pos:        position{line: 1274, col: 58, offset: 48070},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1276, col: 5, offset: 48138},
						run: (*parser).callonInlineFootnote8,
						expr: &seqExpr{
							pos: position{line: 1276, col: 5, offset: 48138},
							exprs: []interface{}{
								&litMatcher{
									pos:        position{line: 1276, col: 5, offset: 48138},
									val:        "footnote:",
									ignoreCase: false,
									want:       "\"footnote:\"",
								},
								&labeledExpr{
									pos:   position{line: 1276, col: 17, offset: 48150},
									label: "ref",
									expr: &ruleRefExpr{
										pos:  position{line: 1276, col: 22, offset: 48155},
										name: "FootnoteRef",
									},
								},
								&litMatcher{
									pos:        position{line: 1276, col: 35, offset: 48168},
									val:        "[",
									ignoreCase: false,
									want:       "\"[\"",
								},
								&labeledExpr{
									pos:   position{line: 1276, col: 39, offset: 48172},
									label: "content",
									expr: &zeroOrOneExpr{
										pos: position{line: 1276, col: 47, offset: 48180},
										expr: &ruleRefExpr{
											pos:  position{line: 1276, col: 48, offset: 48181},
											name: "FootnoteContent",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 1276, col: 66, offset: 48199},
									val:        "]",
									ignoreCase: false,
									want:       "\"]\"",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FootnoteRef",
			pos:  position{line: 1280, col: 1, offset: 48260},
			expr: &ruleRefExpr{
				pos:  position{line: 1280, col: 16, offset: 48275},
				name: "Alphanums",
			},
		},
		{
			name: "FootnoteContent",
			pos:  position{line: 1282, col: 1, offset: 48286},
			expr: &actionExpr{
				pos: position{line: 1282, col: 20, offset: 48305},
				run: (*parser).callonFootnoteContent1,
				expr: &labeledExpr{
					pos:   position{line: 1282, col: 20, offset: 48305},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1282, col: 29, offset: 48314},
						expr: &seqExpr{
							pos: position{line: 1282, col: 30, offset: 48315},
							exprs: []interface{}{
								&notExpr{
									pos: position{line: 1282, col: 30, offset: 48315},
									expr: &litMatcher{
										pos:        position{line: 1282, col: 31, offset: 48316},
										val:        "]",
										ignoreCase: false,
										want:       "\"]\"",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1282, col: 35, offset: 48320},
									name: "InlineElement",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DelimitedBlock",
			pos:  position{line: 1289, col: 1, offset: 48644},
			expr: &actionExpr{
				pos: position{line: 1289, col: 19, offset: 48662},
				run: (*parser).callonDelimitedBlock1,
				expr: &seqExpr{
					pos: position{line: 1289, col: 19, offset: 48662},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1289, col: 19, offset: 48662},
							expr: &ruleRefExpr{
								pos:  position{line: 1289, col: 20, offset: 48663},
								name: "Alphanum",
							},
						},
						&labeledExpr{
							pos:   position{line: 1290, col: 5, offset: 48751},
							label: "block",
							expr: &choiceExpr{
								pos: position{line: 1290, col: 12, offset: 48758},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1290, col: 12, offset: 48758},
										name: "FencedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1291, col: 11, offset: 48781},
										name: "ListingBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1292, col: 11, offset: 48805},
										name: "ExampleBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1293, col: 11, offset: 48829},
										name: "VerseBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1294, col: 11, offset: 48851},
										name: "QuoteBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1295, col: 11, offset: 48873},
										name: "SidebarBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1296, col: 11, offset: 48896},
										name: "SingleLineComment",
									},
									&ruleRefExpr{
										pos:  position{line: 1297, col: 11, offset: 48924},
										name: "Table",
									},
									&ruleRefExpr{
										pos:  position{line: 1298, col: 11, offset: 48940},
										name: "CommentBlock",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BlockDelimiter",
			pos:  position{line: 1302, col: 1, offset: 48981},
			expr: &choiceExpr{
				pos: position{line: 1302, col: 19, offset: 48999},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1302, col: 19, offset: 48999},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1302, col: 19, offset: 48999},
								expr: &ruleRefExpr{
									pos:  position{line: 1302, col: 21, offset: 49001},
									name: "Alphanum",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1302, col: 31, offset: 49011},
								name: "LiteralBlockDelimiter",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1303, col: 19, offset: 49082},
						name: "FencedBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1304, col: 19, offset: 49122},
						name: "ListingBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1305, col: 19, offset: 49163},
						name: "ExampleBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1306, col: 19, offset: 49204},
						name: "CommentBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1307, col: 19, offset: 49245},
						name: "QuoteBlockDelimiter",
					},
					&ruleRefExpr{
						pos:  position{line: 1308, col: 19, offset: 49283},
						name: "SidebarBlockDelimiter",
					},
				},
			},
		},
		{
			name: "VerbatimContent",
			pos:  position{line: 1310, col: 1, offset: 49306},
			expr: &choiceExpr{
				pos: position{line: 1310, col: 20, offset: 49325},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1310, col: 20, offset: 49325},
						name: "FileInclusion",
					},
					&ruleRefExpr{
						pos:  position{line: 1310, col: 36, offset: 49341},
						name: "VerbatimLine",
					},
				},
			},
		},
		{
			name: "VerbatimLine",
			pos:  position{line: 1312, col: 1, offset: 49355},
			expr: &actionExpr{
				pos: position{line: 1312, col: 17, offset: 49371},
				run: (*parser).callonVerbatimLine1,
				expr: &seqExpr{
					pos: position{line: 1312, col: 17, offset: 49371},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1312, col: 17, offset: 49371},
							expr: &ruleRefExpr{
								pos:  position{line: 1312, col: 18, offset: 49372},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1312, col: 22, offset: 49376},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1312, col: 31, offset: 49385},
								name: "VerbatimLineContent",
							},
						},
						&labeledExpr{
							pos:   position{line: 1312, col: 52, offset: 49406},
							label: "callouts",
							expr: &zeroOrOneExpr{
								pos: position{line: 1312, col: 61, offset: 49415},
								expr: &ruleRefExpr{
									pos:  position{line: 1312, col: 62, offset: 49416},
									name: "Callouts",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1312, col: 73, offset: 49427},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "VerbatimLineContent",
			pos:  position{line: 1316, col: 1, offset: 49497},
			expr: &actionExpr{
				pos: position{line: 1316, col: 24, offset: 49520},
				run: (*parser).callonVerbatimLineContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1316, col: 24, offset: 49520},
					expr: &seqExpr{
						pos: position{line: 1316, col: 25, offset: 49521},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1316, col: 25, offset: 49521},
								expr: &ruleRefExpr{
									pos:  position{line: 1316, col: 26, offset: 49522},
									name: "Callouts",
								},
							},
							&choiceExpr{
								pos: position{line: 1316, col: 36, offset: 49532},
								alternatives: []interface{}{
									&oneOrMoreExpr{
										pos: position{line: 1316, col: 36, offset: 49532},
										expr: &ruleRefExpr{
											pos:  position{line: 1316, col: 36, offset: 49532},
											name: "Space",
										},
									},
									&oneOrMoreExpr{
										pos: position{line: 1316, col: 45, offset: 49541},
										expr: &charClassMatcher{
											pos:        position{line: 1316, col: 45, offset: 49541},
											val:        "[^ \\r\\n]",
											chars:      []rune{' ', '\r', '\n'},
											ignoreCase: false,
											inverted:   true,
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Callouts",
			pos:  position{line: 1320, col: 1, offset: 49591},
			expr: &oneOrMoreExpr{
				pos: position{line: 1320, col: 13, offset: 49603},
				expr: &ruleRefExpr{
					pos:  position{line: 1320, col: 13, offset: 49603},
					name: "Callout",
				},
			},
		},
		{
			name: "Callout",
			pos:  position{line: 1322, col: 1, offset: 49613},
			expr: &actionExpr{
				pos: position{line: 1322, col: 12, offset: 49624},
				run: (*parser).callonCallout1,
				expr: &seqExpr{
					pos: position{line: 1322, col: 12, offset: 49624},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1322, col: 12, offset: 49624},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 1322, col: 16, offset: 49628},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1322, col: 21, offset: 49633},
								run: (*parser).callonCallout5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1322, col: 21, offset: 49633},
									expr: &charClassMatcher{
										pos:        position{line: 1322, col: 21, offset: 49633},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1322, col: 69, offset: 49681},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1322, col: 73, offset: 49685},
							expr: &ruleRefExpr{
								pos:  position{line: 1322, col: 73, offset: 49685},
								name: "Space",
							},
						},
						&andExpr{
							pos: position{line: 1322, col: 80, offset: 49692},
							expr: &choiceExpr{
								pos: position{line: 1322, col: 82, offset: 49694},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1322, col: 82, offset: 49694},
										name: "EOL",
									},
									&ruleRefExpr{
										pos:  position{line: 1322, col: 88, offset: 49700},
										name: "Callout",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CalloutListItem",
			pos:  position{line: 1326, col: 1, offset: 49753},
			expr: &actionExpr{
				pos: position{line: 1326, col: 20, offset: 49772},
				run: (*parser).callonCalloutListItem1,
				expr: &seqExpr{
					pos: position{line: 1326, col: 20, offset: 49772},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1326, col: 20, offset: 49772},
							label: "ref",
							expr: &ruleRefExpr{
								pos:  position{line: 1326, col: 25, offset: 49777},
								name: "CalloutListItemPrefix",
							},
						},
						&labeledExpr{
							pos:   position{line: 1326, col: 48, offset: 49800},
							label: "description",
							expr: &oneOrMoreExpr{
								pos: position{line: 1326, col: 61, offset: 49813},
								expr: &ruleRefExpr{
									pos:  position{line: 1326, col: 61, offset: 49813},
									name: "ListParagraph",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CalloutListItemPrefix",
			pos:  position{line: 1330, col: 1, offset: 49910},
			expr: &actionExpr{
				pos: position{line: 1330, col: 26, offset: 49935},
				run: (*parser).callonCalloutListItemPrefix1,
				expr: &seqExpr{
					pos: position{line: 1330, col: 26, offset: 49935},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1330, col: 26, offset: 49935},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
						&labeledExpr{
							pos:   position{line: 1330, col: 30, offset: 49939},
							label: "ref",
							expr: &actionExpr{
								pos: position{line: 1330, col: 35, offset: 49944},
								run: (*parser).callonCalloutListItemPrefix5,
								expr: &oneOrMoreExpr{
									pos: position{line: 1330, col: 35, offset: 49944},
									expr: &charClassMatcher{
										pos:        position{line: 1330, col: 35, offset: 49944},
										val:        "[0-9]",
										ranges:     []rune{'0', '9'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1330, col: 83, offset: 49992},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
						&oneOrMoreExpr{
							pos: position{line: 1330, col: 87, offset: 49996},
							expr: &ruleRefExpr{
								pos:  position{line: 1330, col: 87, offset: 49996},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "FencedBlockDelimiter",
			pos:  position{line: 1337, col: 1, offset: 50223},
			expr: &seqExpr{
				pos: position{line: 1337, col: 25, offset: 50247},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1337, col: 25, offset: 50247},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1337, col: 31, offset: 50253},
						expr: &ruleRefExpr{
							pos:  position{line: 1337, col: 31, offset: 50253},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1337, col: 38, offset: 50260},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "FencedBlockStartDelimiter",
			pos:  position{line: 1339, col: 1, offset: 50320},
			expr: &seqExpr{
				pos: position{line: 1339, col: 30, offset: 50349},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1339, col: 30, offset: 50349},
						val:        "```",
						ignoreCase: false,
						want:       "\"```\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1339, col: 36, offset: 50355},
						expr: &ruleRefExpr{
							pos:  position{line: 1339, col: 36, offset: 50355},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1339, col: 43, offset: 50362},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "FencedBlockEndDelimiter",
			pos:  position{line: 1341, col: 1, offset: 50367},
			expr: &choiceExpr{
				pos: position{line: 1341, col: 28, offset: 50394},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1341, col: 29, offset: 50395},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1341, col: 29, offset: 50395},
								val:        "```",
								ignoreCase: false,
								want:       "\"```\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1341, col: 35, offset: 50401},
								expr: &ruleRefExpr{
									pos:  position{line: 1341, col: 35, offset: 50401},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1341, col: 42, offset: 50408},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1341, col: 49, offset: 50415},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "FencedBlock",
			pos:  position{line: 1343, col: 1, offset: 50420},
			expr: &actionExpr{
				pos: position{line: 1343, col: 16, offset: 50435},
				run: (*parser).callonFencedBlock1,
				expr: &seqExpr{
					pos: position{line: 1343, col: 16, offset: 50435},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1343, col: 16, offset: 50435},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1343, col: 27, offset: 50446},
								expr: &ruleRefExpr{
									pos:  position{line: 1343, col: 28, offset: 50447},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1343, col: 48, offset: 50467},
							name: "FencedBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1343, col: 74, offset: 50493},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1343, col: 83, offset: 50502},
								name: "FencedBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1343, col: 111, offset: 50530},
							name: "FencedBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "FencedBlockVerbatimContent",
			pos:  position{line: 1347, col: 1, offset: 50645},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1347, col: 31, offset: 50675},
				expr: &actionExpr{
					pos: position{line: 1347, col: 32, offset: 50676},
					run: (*parser).callonFencedBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1347, col: 32, offset: 50676},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1347, col: 32, offset: 50676},
								expr: &ruleRefExpr{
									pos:  position{line: 1347, col: 33, offset: 50677},
									name: "FencedBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1347, col: 57, offset: 50701},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1347, col: 66, offset: 50710},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ListingBlockDelimiter",
			pos:  position{line: 1354, col: 1, offset: 51047},
			expr: &seqExpr{
				pos: position{line: 1354, col: 26, offset: 51072},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1354, col: 26, offset: 51072},
						val:        "----",
						ignoreCase: false,
						want:       "\"----\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1354, col: 33, offset: 51079},
						expr: &ruleRefExpr{
							pos:  position{line: 1354, col: 33, offset: 51079},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1354, col: 40, offset: 51086},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ListingBlockStartDelimiter",
			pos:  position{line: 1356, col: 1, offset: 51091},
			expr: &seqExpr{
				pos: position{line: 1356, col: 31, offset: 51121},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1356, col: 31, offset: 51121},
						val:        "----",
						ignoreCase: false,
						want:       "\"----\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1356, col: 38, offset: 51128},
						expr: &ruleRefExpr{
							pos:  position{line: 1356, col: 38, offset: 51128},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1356, col: 45, offset: 51135},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ListingBlockEndDelimiter",
			pos:  position{line: 1358, col: 1, offset: 51140},
			expr: &choiceExpr{
				pos: position{line: 1358, col: 29, offset: 51168},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1358, col: 30, offset: 51169},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1358, col: 30, offset: 51169},
								val:        "----",
								ignoreCase: false,
								want:       "\"----\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1358, col: 37, offset: 51176},
								expr: &ruleRefExpr{
									pos:  position{line: 1358, col: 37, offset: 51176},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1358, col: 44, offset: 51183},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1358, col: 51, offset: 51190},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "ListingBlock",
			pos:  position{line: 1360, col: 1, offset: 51195},
			expr: &actionExpr{
				pos: position{line: 1360, col: 17, offset: 51211},
				run: (*parser).callonListingBlock1,
				expr: &seqExpr{
					pos: position{line: 1360, col: 17, offset: 51211},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1360, col: 17, offset: 51211},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1360, col: 28, offset: 51222},
								expr: &ruleRefExpr{
									pos:  position{line: 1360, col: 29, offset: 51223},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1360, col: 49, offset: 51243},
							name: "ListingBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1360, col: 76, offset: 51270},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1360, col: 85, offset: 51279},
								name: "ListingBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1360, col: 114, offset: 51308},
							name: "ListingBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "ListingBlockVerbatimContent",
			pos:  position{line: 1364, col: 1, offset: 51425},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1364, col: 32, offset: 51456},
				expr: &actionExpr{
					pos: position{line: 1364, col: 33, offset: 51457},
					run: (*parser).callonListingBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1364, col: 33, offset: 51457},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1364, col: 33, offset: 51457},
								expr: &ruleRefExpr{
									pos:  position{line: 1364, col: 34, offset: 51458},
									name: "ListingBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1364, col: 59, offset: 51483},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1364, col: 68, offset: 51492},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockDelimiter",
			pos:  position{line: 1371, col: 1, offset: 51829},
			expr: &seqExpr{
				pos: position{line: 1371, col: 26, offset: 51854},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1371, col: 26, offset: 51854},
						val:        "====",
						ignoreCase: false,
						want:       "\"====\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1371, col: 33, offset: 51861},
						expr: &ruleRefExpr{
							pos:  position{line: 1371, col: 33, offset: 51861},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1371, col: 40, offset: 51868},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ExampleBlockStartDelimiter",
			pos:  position{line: 1373, col: 1, offset: 51873},
			expr: &seqExpr{
				pos: position{line: 1373, col: 31, offset: 51903},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1373, col: 31, offset: 51903},
						val:        "====",
						ignoreCase: false,
						want:       "\"====\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1373, col: 38, offset: 51910},
						expr: &ruleRefExpr{
							pos:  position{line: 1373, col: 38, offset: 51910},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1373, col: 45, offset: 51917},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "ExampleBlockEndDelimiter",
			pos:  position{line: 1375, col: 1, offset: 51922},
			expr: &choiceExpr{
				pos: position{line: 1375, col: 29, offset: 51950},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1375, col: 30, offset: 51951},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1375, col: 30, offset: 51951},
								val:        "====",
								ignoreCase: false,
								want:       "\"====\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1375, col: 37, offset: 51958},
								expr: &ruleRefExpr{
									pos:  position{line: 1375, col: 37, offset: 51958},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1375, col: 44, offset: 51965},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1375, col: 51, offset: 51972},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "ExampleBlock",
			pos:  position{line: 1377, col: 1, offset: 51977},
			expr: &actionExpr{
				pos: position{line: 1377, col: 17, offset: 51993},
				run: (*parser).callonExampleBlock1,
				expr: &seqExpr{
					pos: position{line: 1377, col: 17, offset: 51993},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1377, col: 17, offset: 51993},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1377, col: 28, offset: 52004},
								expr: &ruleRefExpr{
									pos:  position{line: 1377, col: 29, offset: 52005},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1377, col: 49, offset: 52025},
							name: "ExampleBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1377, col: 76, offset: 52052},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1377, col: 85, offset: 52061},
								name: "ExampleBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1377, col: 114, offset: 52090},
							name: "ExampleBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "ExampleBlockVerbatimContent",
			pos:  position{line: 1381, col: 1, offset: 52207},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1381, col: 32, offset: 52238},
				expr: &actionExpr{
					pos: position{line: 1381, col: 33, offset: 52239},
					run: (*parser).callonExampleBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1381, col: 33, offset: 52239},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1381, col: 33, offset: 52239},
								expr: &ruleRefExpr{
									pos:  position{line: 1381, col: 34, offset: 52240},
									name: "ExampleBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1381, col: 59, offset: 52265},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1381, col: 68, offset: 52274},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockDelimiter",
			pos:  position{line: 1388, col: 1, offset: 52609},
			expr: &seqExpr{
				pos: position{line: 1388, col: 24, offset: 52632},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1388, col: 24, offset: 52632},
						val:        "____",
						ignoreCase: false,
						want:       "\"____\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1388, col: 31, offset: 52639},
						expr: &ruleRefExpr{
							pos:  position{line: 1388, col: 31, offset: 52639},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1388, col: 38, offset: 52646},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "QuoteBlockStartDelimiter",
			pos:  position{line: 1390, col: 1, offset: 52676},
			expr: &seqExpr{
				pos: position{line: 1390, col: 29, offset: 52704},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1390, col: 29, offset: 52704},
						val:        "____",
						ignoreCase: false,
						want:       "\"____\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1390, col: 36, offset: 52711},
						expr: &ruleRefExpr{
							pos:  position{line: 1390, col: 36, offset: 52711},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1390, col: 43, offset: 52718},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "QuoteBlockEndDelimiter",
			pos:  position{line: 1392, col: 1, offset: 52748},
			expr: &choiceExpr{
				pos: position{line: 1392, col: 27, offset: 52774},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1392, col: 28, offset: 52775},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1392, col: 28, offset: 52775},
								val:        "____",
								ignoreCase: false,
								want:       "\"____\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1392, col: 35, offset: 52782},
								expr: &ruleRefExpr{
									pos:  position{line: 1392, col: 35, offset: 52782},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1392, col: 42, offset: 52789},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1392, col: 49, offset: 52796},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "QuoteBlock",
			pos:  position{line: 1394, col: 1, offset: 52826},
			expr: &actionExpr{
				pos: position{line: 1394, col: 15, offset: 52840},
				run: (*parser).callonQuoteBlock1,
				expr: &seqExpr{
					pos: position{line: 1394, col: 15, offset: 52840},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1394, col: 15, offset: 52840},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1394, col: 26, offset: 52851},
								expr: &ruleRefExpr{
									pos:  position{line: 1394, col: 27, offset: 52852},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1394, col: 47, offset: 52872},
							name: "QuoteBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1394, col: 72, offset: 52897},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1394, col: 81, offset: 52906},
								name: "QuoteBlockVerbatimElement",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1394, col: 108, offset: 52933},
							name: "QuoteBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "QuoteBlockVerbatimElement",
			pos:  position{line: 1398, col: 1, offset: 53046},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1398, col: 30, offset: 53075},
				expr: &actionExpr{
					pos: position{line: 1398, col: 31, offset: 53076},
					run: (*parser).callonQuoteBlockVerbatimElement2,
					expr: &seqExpr{
						pos: position{line: 1398, col: 31, offset: 53076},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1398, col: 31, offset: 53076},
								expr: &ruleRefExpr{
									pos:  position{line: 1398, col: 32, offset: 53077},
									name: "QuoteBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1398, col: 55, offset: 53100},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1398, col: 64, offset: 53109},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlock",
			pos:  position{line: 1407, col: 1, offset: 53493},
			expr: &actionExpr{
				pos: position{line: 1407, col: 15, offset: 53507},
				run: (*parser).callonVerseBlock1,
				expr: &seqExpr{
					pos: position{line: 1407, col: 15, offset: 53507},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1407, col: 15, offset: 53507},
							label: "attributes",
							expr: &ruleRefExpr{
								pos:  position{line: 1407, col: 27, offset: 53519},
								name: "ElementAttributes",
							},
						},
						&andCodeExpr{
							pos: position{line: 1408, col: 5, offset: 53543},
							run: (*parser).callonVerseBlock5,
						},
						&ruleRefExpr{
							pos:  position{line: 1412, col: 5, offset: 53729},
							name: "QuoteBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1412, col: 30, offset: 53754},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1412, col: 39, offset: 53763},
								name: "VerseBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1412, col: 66, offset: 53790},
							name: "QuoteBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "VerseBlockVerbatimContent",
			pos:  position{line: 1416, col: 1, offset: 53911},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1416, col: 30, offset: 53940},
				expr: &actionExpr{
					pos: position{line: 1416, col: 31, offset: 53941},
					run: (*parser).callonVerseBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1416, col: 31, offset: 53941},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1416, col: 31, offset: 53941},
								expr: &ruleRefExpr{
									pos:  position{line: 1416, col: 32, offset: 53942},
									name: "QuoteBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1416, col: 55, offset: 53965},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1416, col: 64, offset: 53974},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockDelimiter",
			pos:  position{line: 1423, col: 1, offset: 54311},
			expr: &seqExpr{
				pos: position{line: 1423, col: 26, offset: 54336},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1423, col: 26, offset: 54336},
						val:        "****",
						ignoreCase: false,
						want:       "\"****\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1423, col: 33, offset: 54343},
						expr: &ruleRefExpr{
							pos:  position{line: 1423, col: 33, offset: 54343},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1423, col: 40, offset: 54350},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "SidebarBlockStartDelimiter",
			pos:  position{line: 1425, col: 1, offset: 54355},
			expr: &seqExpr{
				pos: position{line: 1425, col: 31, offset: 54385},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1425, col: 31, offset: 54385},
						val:        "****",
						ignoreCase: false,
						want:       "\"****\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1425, col: 38, offset: 54392},
						expr: &ruleRefExpr{
							pos:  position{line: 1425, col: 38, offset: 54392},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1425, col: 45, offset: 54399},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "SidebarBlockEndDelimiter",
			pos:  position{line: 1427, col: 1, offset: 54404},
			expr: &choiceExpr{
				pos: position{line: 1427, col: 29, offset: 54432},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1427, col: 30, offset: 54433},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1427, col: 30, offset: 54433},
								val:        "****",
								ignoreCase: false,
								want:       "\"****\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1427, col: 37, offset: 54440},
								expr: &ruleRefExpr{
									pos:  position{line: 1427, col: 37, offset: 54440},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1427, col: 44, offset: 54447},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1427, col: 51, offset: 54454},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "SidebarBlock",
			pos:  position{line: 1429, col: 1, offset: 54459},
			expr: &actionExpr{
				pos: position{line: 1429, col: 17, offset: 54475},
				run: (*parser).callonSidebarBlock1,
				expr: &seqExpr{
					pos: position{line: 1429, col: 17, offset: 54475},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1429, col: 17, offset: 54475},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1429, col: 28, offset: 54486},
								expr: &ruleRefExpr{
									pos:  position{line: 1429, col: 29, offset: 54487},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1429, col: 49, offset: 54507},
							name: "SidebarBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1429, col: 76, offset: 54534},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1429, col: 85, offset: 54543},
								name: "SidebarBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1429, col: 114, offset: 54572},
							name: "SidebarBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "SidebarBlockVerbatimContent",
			pos:  position{line: 1433, col: 1, offset: 54689},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1433, col: 32, offset: 54720},
				expr: &actionExpr{
					pos: position{line: 1433, col: 33, offset: 54721},
					run: (*parser).callonSidebarBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1433, col: 33, offset: 54721},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1433, col: 33, offset: 54721},
								expr: &ruleRefExpr{
									pos:  position{line: 1433, col: 34, offset: 54722},
									name: "SidebarBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1433, col: 59, offset: 54747},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1433, col: 68, offset: 54756},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "NormalBlockContent",
			pos:  position{line: 1441, col: 1, offset: 55102},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1441, col: 23, offset: 55124},
				expr: &ruleRefExpr{
					pos:  position{line: 1441, col: 23, offset: 55124},
					name: "NormalBlockElement",
				},
			},
		},
		{
			name: "NormalBlockElement",
			pos:  position{line: 1443, col: 1, offset: 55145},
			expr: &actionExpr{
				pos: position{line: 1444, col: 5, offset: 55172},
				run: (*parser).callonNormalBlockElement1,
				expr: &seqExpr{
					pos: position{line: 1444, col: 5, offset: 55172},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1444, col: 5, offset: 55172},
							expr: &ruleRefExpr{
								pos:  position{line: 1444, col: 6, offset: 55173},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1444, col: 10, offset: 55177},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1444, col: 19, offset: 55186},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1444, col: 19, offset: 55186},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 1445, col: 15, offset: 55211},
										name: "FileInclusion",
									},
									&ruleRefExpr{
										pos:  position{line: 1446, col: 15, offset: 55239},
										name: "ImageBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1447, col: 15, offset: 55265},
										name: "OrderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 1448, col: 15, offset: 55296},
										name: "UnorderedListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 1449, col: 15, offset: 55329},
										name: "LabeledListItem",
									},
									&ruleRefExpr{
										pos:  position{line: 1450, col: 15, offset: 55360},
										name: "ContinuedListItemElement",
									},
									&ruleRefExpr{
										pos:  position{line: 1451, col: 15, offset: 55399},
										name: "DelimitedBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1452, col: 15, offset: 55428},
										name: "LiteralBlock",
									},
									&ruleRefExpr{
										pos:  position{line: 1453, col: 15, offset: 55456},
										name: "DocumentAttributeDeclaration",
									},
									&ruleRefExpr{
										pos:  position{line: 1454, col: 15, offset: 55500},
										name: "DocumentAttributeReset",
									},
									&ruleRefExpr{
										pos:  position{line: 1455, col: 15, offset: 55538},
										name: "TableOfContentsPlaceHolder",
									},
									&ruleRefExpr{
										pos:  position{line: 1456, col: 15, offset: 55579},
										name: "Paragraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockContent",
			pos:  position{line: 1460, col: 1, offset: 55628},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1460, col: 22, offset: 55649},
				expr: &ruleRefExpr{
					pos:  position{line: 1460, col: 22, offset: 55649},
					name: "VerseBlockElement",
				},
			},
		},
		{
			name: "VerseBlockElement",
			pos:  position{line: 1462, col: 1, offset: 55669},
			expr: &actionExpr{
				pos: position{line: 1462, col: 22, offset: 55690},
				run: (*parser).callonVerseBlockElement1,
				expr: &seqExpr{
					pos: position{line: 1462, col: 22, offset: 55690},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1462, col: 22, offset: 55690},
							expr: &ruleRefExpr{
								pos:  position{line: 1462, col: 23, offset: 55691},
								name: "EOF",
							},
						},
						&labeledExpr{
							pos:   position{line: 1462, col: 27, offset: 55695},
							label: "element",
							expr: &choiceExpr{
								pos: position{line: 1462, col: 36, offset: 55704},
								alternatives: []interface{}{
									&ruleRefExpr{
										pos:  position{line: 1462, col: 36, offset: 55704},
										name: "BlankLine",
									},
									&ruleRefExpr{
										pos:  position{line: 1462, col: 48, offset: 55716},
										name: "VerseBlockParagraph",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraph",
			pos:  position{line: 1466, col: 1, offset: 55766},
			expr: &actionExpr{
				pos: position{line: 1466, col: 24, offset: 55789},
				run: (*parser).callonVerseBlockParagraph1,
				expr: &labeledExpr{
					pos:   position{line: 1466, col: 24, offset: 55789},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1466, col: 30, offset: 55795},
						expr: &ruleRefExpr{
							pos:  position{line: 1466, col: 31, offset: 55796},
							name: "VerseBlockParagraphLine",
						},
					},
				},
			},
		},
		{
			name: "VerseBlockParagraphLine",
			pos:  position{line: 1470, col: 1, offset: 55886},
			expr: &actionExpr{
				pos: position{line: 1470, col: 28, offset: 55913},
				run: (*parser).callonVerseBlockParagraphLine1,
				expr: &seqExpr{
					pos: position{line: 1470, col: 28, offset: 55913},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1470, col: 28, offset: 55913},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1470, col: 37, offset: 55922},
								expr: &ruleRefExpr{
									pos:  position{line: 1470, col: 38, offset: 55923},
									name: "InlineElement",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1470, col: 54, offset: 55939},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "Table",
			pos:  position{line: 1477, col: 1, offset: 56181},
			expr: &actionExpr{
				pos: position{line: 1477, col: 10, offset: 56190},
				run: (*parser).callonTable1,
				expr: &seqExpr{
					pos: position{line: 1477, col: 10, offset: 56190},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1477, col: 10, offset: 56190},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1477, col: 21, offset: 56201},
								expr: &ruleRefExpr{
									pos:  position{line: 1477, col: 22, offset: 56202},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1477, col: 42, offset: 56222},
							name: "TableDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1478, col: 5, offset: 56241},
							label: "header",
							expr: &zeroOrOneExpr{
								pos: position{line: 1478, col: 12, offset: 56248},
								expr: &ruleRefExpr{
									pos:  position{line: 1478, col: 13, offset: 56249},
									name: "TableLineHeader",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1479, col: 5, offset: 56271},
							label: "lines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1479, col: 11, offset: 56277},
								expr: &ruleRefExpr{
									pos:  position{line: 1479, col: 12, offset: 56278},
									name: "TableLine",
								},
							},
						},
						&choiceExpr{
							pos: position{line: 1480, col: 6, offset: 56295},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1480, col: 6, offset: 56295},
									name: "TableDelimiter",
								},
								&ruleRefExpr{
									pos:  position{line: 1480, col: 23, offset: 56312},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TableCellSeparator",
			pos:  position{line: 1484, col: 1, offset: 56427},
			expr: &seqExpr{
				pos: position{line: 1484, col: 23, offset: 56449},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1484, col: 23, offset: 56449},
						val:        "|",
						ignoreCase: false,
						want:       "\"|\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1484, col: 27, offset: 56453},
						expr: &ruleRefExpr{
							pos:  position{line: 1484, col: 27, offset: 56453},
							name: "Space",
						},
					},
				},
			},
		},
		{
			name: "TableDelimiter",
			pos:  position{line: 1486, col: 1, offset: 56461},
			expr: &seqExpr{
				pos: position{line: 1486, col: 19, offset: 56479},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1486, col: 19, offset: 56479},
						val:        "|===",
						ignoreCase: false,
						want:       "\"|===\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1486, col: 26, offset: 56486},
						expr: &ruleRefExpr{
							pos:  position{line: 1486, col: 26, offset: 56486},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1486, col: 33, offset: 56493},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "TableLineHeader",
			pos:  position{line: 1489, col: 1, offset: 56561},
			expr: &actionExpr{
				pos: position{line: 1489, col: 20, offset: 56580},
				run: (*parser).callonTableLineHeader1,
				expr: &seqExpr{
					pos: position{line: 1489, col: 20, offset: 56580},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1489, col: 20, offset: 56580},
							expr: &ruleRefExpr{
								pos:  position{line: 1489, col: 21, offset: 56581},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1489, col: 36, offset: 56596},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1489, col: 42, offset: 56602},
								expr: &ruleRefExpr{
									pos:  position{line: 1489, col: 43, offset: 56603},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1489, col: 55, offset: 56615},
							name: "EOL",
						},
						&ruleRefExpr{
							pos:  position{line: 1489, col: 59, offset: 56619},
							name: "BlankLine",
						},
					},
				},
			},
		},
		{
			name: "TableLine",
			pos:  position{line: 1493, col: 1, offset: 56687},
			expr: &actionExpr{
				pos: position{line: 1493, col: 14, offset: 56700},
				run: (*parser).callonTableLine1,
				expr: &seqExpr{
					pos: position{line: 1493, col: 14, offset: 56700},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1493, col: 14, offset: 56700},
							expr: &ruleRefExpr{
								pos:  position{line: 1493, col: 15, offset: 56701},
								name: "TableDelimiter",
							},
						},
						&labeledExpr{
							pos:   position{line: 1493, col: 30, offset: 56716},
							label: "cells",
							expr: &oneOrMoreExpr{
								pos: position{line: 1493, col: 36, offset: 56722},
								expr: &ruleRefExpr{
									pos:  position{line: 1493, col: 37, offset: 56723},
									name: "TableCell",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1493, col: 49, offset: 56735},
							name: "EOL",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1493, col: 53, offset: 56739},
							expr: &ruleRefExpr{
								pos:  position{line: 1493, col: 53, offset: 56739},
								name: "BlankLine",
							},
						},
					},
				},
			},
		},
		{
			name: "TableCell",
			pos:  position{line: 1497, col: 1, offset: 56808},
			expr: &actionExpr{
				pos: position{line: 1497, col: 14, offset: 56821},
				run: (*parser).callonTableCell1,
				expr: &seqExpr{
					pos: position{line: 1497, col: 14, offset: 56821},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1497, col: 14, offset: 56821},
							name: "TableCellSeparator",
						},
						&labeledExpr{
							pos:   position{line: 1497, col: 33, offset: 56840},
							label: "elements",
							expr: &oneOrMoreExpr{
								pos: position{line: 1497, col: 42, offset: 56849},
								expr: &seqExpr{
									pos: position{line: 1497, col: 43, offset: 56850},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1497, col: 43, offset: 56850},
											expr: &ruleRefExpr{
												pos:  position{line: 1497, col: 44, offset: 56851},
												name: "TableCellSeparator",
											},
										},
										&notExpr{
											pos: position{line: 1497, col: 63, offset: 56870},
											expr: &ruleRefExpr{
												pos:  position{line: 1497, col: 64, offset: 56871},
												name: "EOL",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 1497, col: 68, offset: 56875},
											expr: &ruleRefExpr{
												pos:  position{line: 1497, col: 68, offset: 56875},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1497, col: 75, offset: 56882},
											name: "InlineElement",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1497, col: 89, offset: 56896},
											expr: &ruleRefExpr{
												pos:  position{line: 1497, col: 89, offset: 56896},
												name: "Space",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "CommentBlockDelimiter",
			pos:  position{line: 1504, col: 1, offset: 57145},
			expr: &seqExpr{
				pos: position{line: 1504, col: 26, offset: 57170},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1504, col: 26, offset: 57170},
						val:        "////",
						ignoreCase: false,
						want:       "\"////\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1504, col: 33, offset: 57177},
						expr: &ruleRefExpr{
							pos:  position{line: 1504, col: 33, offset: 57177},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1504, col: 40, offset: 57184},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "CommentBlockStartDelimiter",
			pos:  position{line: 1506, col: 1, offset: 57189},
			expr: &seqExpr{
				pos: position{line: 1506, col: 31, offset: 57219},
				exprs: []interface{}{
					&litMatcher{
						pos:        position{line: 1506, col: 31, offset: 57219},
						val:        "////",
						ignoreCase: false,
						want:       "\"////\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 1506, col: 38, offset: 57226},
						expr: &ruleRefExpr{
							pos:  position{line: 1506, col: 38, offset: 57226},
							name: "Space",
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1506, col: 45, offset: 57233},
						name: "EOL",
					},
				},
			},
		},
		{
			name: "CommentBlockEndDelimiter",
			pos:  position{line: 1508, col: 1, offset: 57238},
			expr: &choiceExpr{
				pos: position{line: 1508, col: 29, offset: 57266},
				alternatives: []interface{}{
					&seqExpr{
						pos: position{line: 1508, col: 30, offset: 57267},
						exprs: []interface{}{
							&litMatcher{
								pos:        position{line: 1508, col: 30, offset: 57267},
								val:        "////",
								ignoreCase: false,
								want:       "\"////\"",
							},
							&zeroOrMoreExpr{
								pos: position{line: 1508, col: 37, offset: 57274},
								expr: &ruleRefExpr{
									pos:  position{line: 1508, col: 37, offset: 57274},
									name: "Space",
								},
							},
							&ruleRefExpr{
								pos:  position{line: 1508, col: 44, offset: 57281},
								name: "EOL",
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1508, col: 51, offset: 57288},
						name: "EOF",
					},
				},
			},
		},
		{
			name: "CommentBlock",
			pos:  position{line: 1510, col: 1, offset: 57293},
			expr: &actionExpr{
				pos: position{line: 1510, col: 17, offset: 57309},
				run: (*parser).callonCommentBlock1,
				expr: &seqExpr{
					pos: position{line: 1510, col: 17, offset: 57309},
					exprs: []interface{}{
						&ruleRefExpr{
							pos:  position{line: 1510, col: 17, offset: 57309},
							name: "CommentBlockStartDelimiter",
						},
						&labeledExpr{
							pos:   position{line: 1510, col: 44, offset: 57336},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1510, col: 53, offset: 57345},
								name: "CommentBlockVerbatimContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1510, col: 83, offset: 57375},
							name: "CommentBlockEndDelimiter",
						},
					},
				},
			},
		},
		{
			name: "CommentBlockVerbatimContent",
			pos:  position{line: 1514, col: 1, offset: 57485},
			expr: &zeroOrMoreExpr{
				pos: position{line: 1514, col: 32, offset: 57516},
				expr: &actionExpr{
					pos: position{line: 1514, col: 33, offset: 57517},
					run: (*parser).callonCommentBlockVerbatimContent2,
					expr: &seqExpr{
						pos: position{line: 1514, col: 33, offset: 57517},
						exprs: []interface{}{
							&notExpr{
								pos: position{line: 1514, col: 33, offset: 57517},
								expr: &ruleRefExpr{
									pos:  position{line: 1514, col: 34, offset: 57518},
									name: "CommentBlockEndDelimiter",
								},
							},
							&labeledExpr{
								pos:   position{line: 1514, col: 59, offset: 57543},
								label: "content",
								expr: &ruleRefExpr{
									pos:  position{line: 1514, col: 68, offset: 57552},
									name: "VerbatimContent",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "SingleLineComment",
			pos:  position{line: 1518, col: 1, offset: 57693},
			expr: &actionExpr{
				pos: position{line: 1518, col: 22, offset: 57714},
				run: (*parser).callonSingleLineComment1,
				expr: &seqExpr{
					pos: position{line: 1518, col: 22, offset: 57714},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1518, col: 22, offset: 57714},
							expr: &ruleRefExpr{
								pos:  position{line: 1518, col: 23, offset: 57715},
								name: "CommentBlockDelimiter",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1518, col: 45, offset: 57737},
							expr: &ruleRefExpr{
								pos:  position{line: 1518, col: 45, offset: 57737},
								name: "Space",
							},
						},
						&litMatcher{
							pos:        position{line: 1518, col: 52, offset: 57744},
							val:        "//",
							ignoreCase: false,
							want:       "\"//\"",
						},
						&labeledExpr{
							pos:   position{line: 1518, col: 57, offset: 57749},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 1518, col: 66, offset: 57758},
								name: "SingleLineCommentContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1518, col: 92, offset: 57784},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "SingleLineCommentContent",
			pos:  position{line: 1522, col: 1, offset: 57849},
			expr: &actionExpr{
				pos: position{line: 1522, col: 29, offset: 57877},
				run: (*parser).callonSingleLineCommentContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 1522, col: 29, offset: 57877},
					expr: &charClassMatcher{
						pos:        position{line: 1522, col: 29, offset: 57877},
						val:        "[^\\r\\n]",
						chars:      []rune{'\r', '\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "LiteralBlock",
			pos:  position{line: 1530, col: 1, offset: 58190},
			expr: &choiceExpr{
				pos: position{line: 1530, col: 17, offset: 58206},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1530, col: 17, offset: 58206},
						name: "ParagraphWithLiteralAttribute",
					},
					&ruleRefExpr{
						pos:  position{line: 1530, col: 49, offset: 58238},
						name: "ParagraphWithHeadingSpaces",
					},
					&ruleRefExpr{
						pos:  position{line: 1530, col: 78, offset: 58267},
						name: "ParagraphWithLiteralBlockDelimiter",
					},
				},
			},
		},
		{
			name: "LiteralBlockDelimiter",
			pos:  position{line: 1532, col: 1, offset: 58303},
			expr: &litMatcher{
				pos:        position{line: 1532, col: 26, offset: 58328},
				val:        "....",
				ignoreCase: false,
				want:       "\"....\"",
			},
		},
		{
			name: "ParagraphWithHeadingSpaces",
			pos:  position{line: 1535, col: 1, offset: 58400},
			expr: &actionExpr{
				pos: position{line: 1535, col: 31, offset: 58430},
				run: (*parser).callonParagraphWithHeadingSpaces1,
				expr: &seqExpr{
					pos: position{line: 1535, col: 31, offset: 58430},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1535, col: 31, offset: 58430},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1535, col: 42, offset: 58441},
								expr: &ruleRefExpr{
									pos:  position{line: 1535, col: 43, offset: 58442},
									name: "ElementAttributes",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1535, col: 63, offset: 58462},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1535, col: 70, offset: 58469},
								name: "ParagraphWithHeadingSpacesLines",
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithHeadingSpacesLines",
			pos:  position{line: 1540, col: 1, offset: 58699},
			expr: &actionExpr{
				pos: position{line: 1541, col: 5, offset: 58739},
				run: (*parser).callonParagraphWithHeadingSpacesLines1,
				expr: &seqExpr{
					pos: position{line: 1541, col: 5, offset: 58739},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1541, col: 5, offset: 58739},
							label: "firstLine",
							expr: &actionExpr{
								pos: position{line: 1541, col: 16, offset: 58750},
								run: (*parser).callonParagraphWithHeadingSpacesLines4,
								expr: &seqExpr{
									pos: position{line: 1541, col: 16, offset: 58750},
									exprs: []interface{}{
										&oneOrMoreExpr{
											pos: position{line: 1541, col: 16, offset: 58750},
											expr: &ruleRefExpr{
												pos:  position{line: 1541, col: 16, offset: 58750},
												name: "Space",
											},
										},
										&oneOrMoreExpr{
											pos: position{line: 1541, col: 23, offset: 58757},
											expr: &charClassMatcher{
												pos:        position{line: 1541, col: 23, offset: 58757},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1543, col: 8, offset: 58810},
							name: "EOL",
						},
						&labeledExpr{
							pos:   position{line: 1544, col: 5, offset: 58873},
							label: "otherLines",
							expr: &zeroOrMoreExpr{
								pos: position{line: 1544, col: 16, offset: 58884},
								expr: &actionExpr{
									pos: position{line: 1545, col: 9, offset: 58894},
									run: (*parser).callonParagraphWithHeadingSpacesLines13,
									expr: &seqExpr{
										pos: position{line: 1545, col: 9, offset: 58894},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1545, col: 9, offset: 58894},
												expr: &ruleRefExpr{
													pos:  position{line: 1545, col: 10, offset: 58895},
													name: "BlankLine",
												},
											},
											&labeledExpr{
												pos:   position{line: 1546, col: 9, offset: 58914},
												label: "otherLine",
												expr: &actionExpr{
													pos: position{line: 1546, col: 20, offset: 58925},
													run: (*parser).callonParagraphWithHeadingSpacesLines18,
													expr: &oneOrMoreExpr{
														pos: position{line: 1546, col: 20, offset: 58925},
														expr: &charClassMatcher{
															pos:        position{line: 1546, col: 20, offset: 58925},
															val:        "[^\\r\\n]",
															chars:      []rune{'\r', '\n'},
															ignoreCase: false,
															inverted:   true,
														},
													},
												},
											},
											&ruleRefExpr{
												pos:  position{line: 1548, col: 12, offset: 58986},
												name: "EOL",
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiter",
			pos:  position{line: 1555, col: 1, offset: 59216},
			expr: &actionExpr{
				pos: position{line: 1555, col: 39, offset: 59254},
				run: (*parser).callonParagraphWithLiteralBlockDelimiter1,
				expr: &seqExpr{
					pos: position{line: 1555, col: 39, offset: 59254},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1555, col: 39, offset: 59254},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1555, col: 50, offset: 59265},
								expr: &ruleRefExpr{
									pos:  position{line: 1555, col: 51, offset: 59266},
									name: "ElementAttributes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1556, col: 9, offset: 59294},
							name: "LiteralBlockDelimiter",
						},
						&zeroOrMoreExpr{
							pos: position{line: 1556, col: 31, offset: 59316},
							expr: &ruleRefExpr{
								pos:  position{line: 1556, col: 31, offset: 59316},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1556, col: 38, offset: 59323},
							name: "Newline",
						},
						&labeledExpr{
							pos:   position{line: 1556, col: 46, offset: 59331},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1556, col: 53, offset: 59338},
								name: "ParagraphWithLiteralBlockDelimiterLines",
							},
						},
						&choiceExpr{
							pos: position{line: 1556, col: 95, offset: 59380},
							alternatives: []interface{}{
								&seqExpr{
									pos: position{line: 1556, col: 96, offset: 59381},
									exprs: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1556, col: 96, offset: 59381},
											name: "LiteralBlockDelimiter",
										},
										&zeroOrMoreExpr{
											pos: position{line: 1556, col: 118, offset: 59403},
											expr: &ruleRefExpr{
												pos:  position{line: 1556, col: 118, offset: 59403},
												name: "Space",
											},
										},
										&ruleRefExpr{
											pos:  position{line: 1556, col: 125, offset: 59410},
											name: "EOL",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 1556, col: 132, offset: 59417},
									name: "EOF",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLines",
			pos:  position{line: 1561, col: 1, offset: 59576},
			expr: &actionExpr{
				pos: position{line: 1561, col: 44, offset: 59619},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLines1,
				expr: &labeledExpr{
					pos:   position{line: 1561, col: 44, offset: 59619},
					label: "lines",
					expr: &zeroOrMoreExpr{
						pos: position{line: 1561, col: 50, offset: 59625},
						expr: &ruleRefExpr{
							pos:  position{line: 1561, col: 51, offset: 59626},
							name: "ParagraphWithLiteralBlockDelimiterLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralBlockDelimiterLine",
			pos:  position{line: 1565, col: 1, offset: 59710},
			expr: &actionExpr{
				pos: position{line: 1566, col: 5, offset: 59765},
				run: (*parser).callonParagraphWithLiteralBlockDelimiterLine1,
				expr: &seqExpr{
					pos: position{line: 1566, col: 5, offset: 59765},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1566, col: 5, offset: 59765},
							label: "line",
							expr: &actionExpr{
								pos: position{line: 1566, col: 11, offset: 59771},
								run: (*parser).callonParagraphWithLiteralBlockDelimiterLine4,
								expr: &seqExpr{
									pos: position{line: 1566, col: 11, offset: 59771},
									exprs: []interface{}{
										&notExpr{
											pos: position{line: 1566, col: 11, offset: 59771},
											expr: &ruleRefExpr{
												pos:  position{line: 1566, col: 12, offset: 59772},
												name: "LiteralBlockDelimiter",
											},
										},
										&zeroOrMoreExpr{
											pos: position{line: 1566, col: 34, offset: 59794},
											expr: &charClassMatcher{
												pos:        position{line: 1566, col: 34, offset: 59794},
												val:        "[^\\r\\n]",
												chars:      []rune{'\r', '\n'},
												ignoreCase: false,
												inverted:   true,
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1568, col: 8, offset: 59847},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttribute",
			pos:  position{line: 1573, col: 1, offset: 59973},
			expr: &actionExpr{
				pos: position{line: 1574, col: 5, offset: 60011},
				run: (*parser).callonParagraphWithLiteralAttribute1,
				expr: &seqExpr{
					pos: position{line: 1574, col: 5, offset: 60011},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1574, col: 5, offset: 60011},
							label: "attributes",
							expr: &zeroOrOneExpr{
								pos: position{line: 1574, col: 16, offset: 60022},
								expr: &ruleRefExpr{
									pos:  position{line: 1574, col: 17, offset: 60023},
									name: "ElementAttributes",
								},
							},
						},
						&andCodeExpr{
							pos: position{line: 1575, col: 5, offset: 60047},
							run: (*parser).callonParagraphWithLiteralAttribute6,
						},
						&labeledExpr{
							pos:   position{line: 1582, col: 5, offset: 60261},
							label: "lines",
							expr: &ruleRefExpr{
								pos:  position{line: 1582, col: 12, offset: 60268},
								name: "ParagraphWithLiteralAttributeLines",
							},
						},
					},
				},
			},
		},
		{
			name: "LiteralKind",
			pos:  position{line: 1586, col: 1, offset: 60418},
			expr: &actionExpr{
				pos: position{line: 1586, col: 16, offset: 60433},
				run: (*parser).callonLiteralKind1,
				expr: &litMatcher{
					pos:        position{line: 1586, col: 16, offset: 60433},
					val:        "literal",
					ignoreCase: false,
					want:       "\"literal\"",
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttributeLines",
			pos:  position{line: 1591, col: 1, offset: 60516},
			expr: &actionExpr{
				pos: position{line: 1591, col: 39, offset: 60554},
				run: (*parser).callonParagraphWithLiteralAttributeLines1,
				expr: &labeledExpr{
					pos:   position{line: 1591, col: 39, offset: 60554},
					label: "lines",
					expr: &oneOrMoreExpr{
						pos: position{line: 1591, col: 45, offset: 60560},
						expr: &ruleRefExpr{
							pos:  position{line: 1591, col: 46, offset: 60561},
							name: "ParagraphWithLiteralAttributeLine",
						},
					},
				},
			},
		},
		{
			name: "ParagraphWithLiteralAttributeLine",
			pos:  position{line: 1595, col: 1, offset: 60641},
			expr: &actionExpr{
				pos: position{line: 1595, col: 38, offset: 60678},
				run: (*parser).callonParagraphWithLiteralAttributeLine1,
				expr: &seqExpr{
					pos: position{line: 1595, col: 38, offset: 60678},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1595, col: 38, offset: 60678},
							expr: &ruleRefExpr{
								pos:  position{line: 1595, col: 39, offset: 60679},
								name: "BlankLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 1595, col: 49, offset: 60689},
							label: "content",
							expr: &actionExpr{
								pos: position{line: 1595, col: 58, offset: 60698},
								run: (*parser).callonParagraphWithLiteralAttributeLine6,
								expr: &oneOrMoreExpr{
									pos: position{line: 1595, col: 58, offset: 60698},
									expr: &charClassMatcher{
										pos:        position{line: 1595, col: 58, offset: 60698},
										val:        "[^\\r\\n]",
										chars:      []rune{'\r', '\n'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1597, col: 4, offset: 60743},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "IndexTerm",
			pos:  position{line: 1604, col: 1, offset: 60929},
			expr: &actionExpr{
				pos: position{line: 1604, col: 14, offset: 60942},
				run: (*parser).callonIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 1604, col: 14, offset: 60942},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1604, col: 14, offset: 60942},
							val:        "((",
							ignoreCase: false,
							want:       "\"((\"",
						},
						&labeledExpr{
							pos:   position{line: 1604, col: 19, offset: 60947},
							label: "term",
							expr: &ruleRefExpr{
								pos:  position{line: 1604, col: 25, offset: 60953},
								name: "IndexTermContent",
							},
						},
						&litMatcher{
							pos:        position{line: 1604, col: 43, offset: 60971},
							val:        "))",
							ignoreCase: false,
							want:       "\"))\"",
						},
					},
				},
			},
		},
		{
			name: "IndexTermContent",
			pos:  position{line: 1608, col: 1, offset: 61036},
			expr: &actionExpr{
				pos: position{line: 1608, col: 21, offset: 61056},
				run: (*parser).callonIndexTermContent1,
				expr: &labeledExpr{
					pos:   position{line: 1608, col: 21, offset: 61056},
					label: "elements",
					expr: &oneOrMoreExpr{
						pos: position{line: 1608, col: 30, offset: 61065},
						expr: &choiceExpr{
							pos: position{line: 1608, col: 31, offset: 61066},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1608, col: 31, offset: 61066},
									name: "Word",
								},
								&ruleRefExpr{
									pos:  position{line: 1608, col: 38, offset: 61073},
									name: "QuotedText",
								},
								&ruleRefExpr{
									pos:  position{line: 1608, col: 51, offset: 61086},
									name: "Space",
								},
								&actionExpr{
									pos: position{line: 1608, col: 59, offset: 61094},
									run: (*parser).callonIndexTermContent8,
									expr: &seqExpr{
										pos: position{line: 1608, col: 60, offset: 61095},
										exprs: []interface{}{
											&notExpr{
												pos: position{line: 1608, col: 60, offset: 61095},
												expr: &litMatcher{
													pos:        position{line: 1608, col: 61, offset: 61096},
													val:        "))",
													ignoreCase: false,
													want:       "\"))\"",
												},
											},
											&anyMatcher{
												line: 1608, col: 66, offset: 61101,
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTerm",
			pos:  position{line: 1614, col: 1, offset: 61207},
			expr: &actionExpr{
				pos: position{line: 1614, col: 23, offset: 61229},
				run: (*parser).callonConcealedIndexTerm1,
				expr: &seqExpr{
					pos: position{line: 1614, col: 23, offset: 61229},
					exprs: []interface{}{
						&litMatcher{
							pos:        position{line: 1614, col: 23, offset: 61229},
							val:        "(((",
							ignoreCase: false,
							want:       "\"(((\"",
						},
						&labeledExpr{
							pos:   position{line: 1614, col: 29, offset: 61235},
							label: "term1",
							expr: &ruleRefExpr{
								pos:  position{line: 1614, col: 36, offset: 61242},
								name: "ConcealedIndexTermContent",
							},
						},
						&labeledExpr{
							pos:   position{line: 1615, col: 5, offset: 61274},
							label: "term2",
							expr: &zeroOrOneExpr{
								pos: position{line: 1615, col: 11, offset: 61280},
								expr: &actionExpr{
									pos: position{line: 1615, col: 12, offset: 61281},
									run: (*parser).callonConcealedIndexTerm8,
									expr: &seqExpr{
										pos: position{line: 1615, col: 12, offset: 61281},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 1615, col: 12, offset: 61281},
												expr: &ruleRefExpr{
													pos:  position{line: 1615, col: 12, offset: 61281},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 1615, col: 19, offset: 61288},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 1615, col: 23, offset: 61292},
												expr: &ruleRefExpr{
													pos:  position{line: 1615, col: 23, offset: 61292},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 1615, col: 30, offset: 61299},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 1615, col: 39, offset: 61308},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1616, col: 5, offset: 61366},
							label: "term3",
							expr: &zeroOrOneExpr{
								pos: position{line: 1616, col: 11, offset: 61372},
								expr: &actionExpr{
									pos: position{line: 1616, col: 12, offset: 61373},
									run: (*parser).callonConcealedIndexTerm19,
									expr: &seqExpr{
										pos: position{line: 1616, col: 12, offset: 61373},
										exprs: []interface{}{
											&zeroOrMoreExpr{
												pos: position{line: 1616, col: 12, offset: 61373},
												expr: &ruleRefExpr{
													pos:  position{line: 1616, col: 12, offset: 61373},
													name: "Space",
												},
											},
											&litMatcher{
												pos:        position{line: 1616, col: 19, offset: 61380},
												val:        ",",
												ignoreCase: false,
												want:       "\",\"",
											},
											&zeroOrMoreExpr{
												pos: position{line: 1616, col: 23, offset: 61384},
												expr: &ruleRefExpr{
													pos:  position{line: 1616, col: 23, offset: 61384},
													name: "Space",
												},
											},
											&labeledExpr{
												pos:   position{line: 1616, col: 30, offset: 61391},
												label: "content",
												expr: &ruleRefExpr{
													pos:  position{line: 1616, col: 39, offset: 61400},
													name: "ConcealedIndexTermContent",
												},
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 1617, col: 5, offset: 61458},
							val:        ")))",
							ignoreCase: false,
							want:       "\")))\"",
						},
					},
				},
			},
		},
		{
			name: "ConcealedIndexTermContent",
			pos:  position{line: 1621, col: 1, offset: 61537},
			expr: &actionExpr{
				pos: position{line: 1621, col: 30, offset: 61566},
				run: (*parser).callonConcealedIndexTermContent1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1621, col: 30, offset: 61566},
					expr: &choiceExpr{
						pos: position{line: 1621, col: 31, offset: 61567},
						alternatives: []interface{}{
							&ruleRefExpr{
								pos:  position{line: 1621, col: 31, offset: 61567},
								name: "Alphanum",
							},
							&ruleRefExpr{
								pos:  position{line: 1621, col: 42, offset: 61578},
								name: "Space",
							},
						},
					},
				},
			},
		},
		{
			name: "BlankLine",
			pos:  position{line: 1628, col: 1, offset: 61727},
			expr: &actionExpr{
				pos: position{line: 1628, col: 14, offset: 61740},
				run: (*parser).callonBlankLine1,
				expr: &seqExpr{
					pos: position{line: 1628, col: 14, offset: 61740},
					exprs: []interface{}{
						&notExpr{
							pos: position{line: 1628, col: 14, offset: 61740},
							expr: &ruleRefExpr{
								pos:  position{line: 1628, col: 15, offset: 61741},
								name: "EOF",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 1628, col: 19, offset: 61745},
							expr: &ruleRefExpr{
								pos:  position{line: 1628, col: 19, offset: 61745},
								name: "Space",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 1628, col: 26, offset: 61752},
							name: "EOL",
						},
					},
				},
			},
		},
		{
			name: "Alphanum",
			pos:  position{line: 1635, col: 1, offset: 61899},
			expr: &charClassMatcher{
				pos:        position{line: 1635, col: 13, offset: 61911},
				val:        "[\\pL0-9]",
				ranges:     []rune{'0', '9'},
				classes:    []*unicode.RangeTable{rangeTable("L")},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Parenthesis",
			pos:  position{line: 1637, col: 1, offset: 61921},
			expr: &choiceExpr{
				pos: position{line: 1637, col: 16, offset: 61936},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1637, col: 16, offset: 61936},
						val:        "(",
						ignoreCase: false,
						want:       "\"(\"",
					},
					&litMatcher{
						pos:        position{line: 1637, col: 22, offset: 61942},
						val:        ")",
						ignoreCase: false,
						want:       "\")\"",
					},
					&litMatcher{
						pos:        position{line: 1637, col: 28, offset: 61948},
						val:        "[",
						ignoreCase: false,
						want:       "\"[\"",
					},
					&litMatcher{
						pos:        position{line: 1637, col: 34, offset: 61954},
						val:        "]",
						ignoreCase: false,
						want:       "\"]\"",
					},
					&litMatcher{
						pos:        position{line: 1637, col: 40, offset: 61960},
						val:        "{",
						ignoreCase: false,
						want:       "\"{\"",
					},
					&litMatcher{
						pos:        position{line: 1637, col: 46, offset: 61966},
						val:        "}",
						ignoreCase: false,
						want:       "\"}\"",
					},
				},
			},
		},
		{
			name: "Alphanums",
			pos:  position{line: 1639, col: 1, offset: 61972},
			expr: &actionExpr{
				pos: position{line: 1639, col: 14, offset: 61985},
				run: (*parser).callonAlphanums1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1639, col: 14, offset: 61985},
					expr: &charClassMatcher{
						pos:        position{line: 1639, col: 14, offset: 61985},
						val:        "[\\pL0-9]",
						ranges:     []rune{'0', '9'},
						classes:    []*unicode.RangeTable{rangeTable("L")},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
		},
		{
			name: "Word",
			pos:  position{line: 1643, col: 1, offset: 62031},
			expr: &choiceExpr{
				pos: position{line: 1647, col: 5, offset: 62359},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1647, col: 5, offset: 62359},
						run: (*parser).callonWord2,
						expr: &seqExpr{
							pos: position{line: 1647, col: 5, offset: 62359},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 1647, col: 5, offset: 62359},
									expr: &charClassMatcher{
										pos:        position{line: 1647, col: 5, offset: 62359},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 1647, col: 15, offset: 62369},
									expr: &choiceExpr{
										pos: position{line: 1647, col: 17, offset: 62371},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 1647, col: 17, offset: 62371},
												val:        "[\\r\\n ,\\]]",
												chars:      []rune{'\r', '\n', ' ', ',', ']'},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 1647, col: 30, offset: 62384},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 1649, col: 9, offset: 62454},
						run: (*parser).callonWord10,
						expr: &seqExpr{
							pos: position{line: 1649, col: 9, offset: 62454},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 1649, col: 9, offset: 62454},
									expr: &charClassMatcher{
										pos:        position{line: 1649, col: 9, offset: 62454},
										val:        "[\\pL0-9]",
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&oneOrMoreExpr{
									pos: position{line: 1649, col: 19, offset: 62464},
									expr: &seqExpr{
										pos: position{line: 1649, col: 20, offset: 62465},
										exprs: []interface{}{
											&charClassMatcher{
												pos:        position{line: 1649, col: 20, offset: 62465},
												val:        "[=*_`]",
												chars:      []rune{'=', '*', '_', '`'},
												ignoreCase: false,
												inverted:   false,
											},
											&oneOrMoreExpr{
												pos: position{line: 1649, col: 27, offset: 62472},
												expr: &charClassMatcher{
													pos:        position{line: 1649, col: 27, offset: 62472},
													val:        "[\\pL0-9]",
													ranges:     []rune{'0', '9'},
													classes:    []*unicode.RangeTable{rangeTable("L")},
													ignoreCase: false,
													inverted:   false,
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "InlineWord",
			pos:  position{line: 1653, col: 1, offset: 62548},
			expr: &choiceExpr{
				pos: position{line: 1654, col: 5, offset: 62629},
				alternatives: []interface{}{
					&actionExpr{
						pos: position{line: 1654, col: 5, offset: 62629},
						run: (*parser).callonInlineWord2,
						expr: &seqExpr{
							pos: position{line: 1654, col: 5, offset: 62629},
							exprs: []interface{}{
								&oneOrMoreExpr{
									pos: position{line: 1654, col: 5, offset: 62629},
									expr: &charClassMatcher{
										pos:        position{line: 1654, col: 5, offset: 62629},
										val:        "[\\pL0-9,.?!;]",
										chars:      []rune{',', '.', '?', '!', ';'},
										ranges:     []rune{'0', '9'},
										classes:    []*unicode.RangeTable{rangeTable("L")},
										ignoreCase: false,
										inverted:   false,
									},
								},
								&andExpr{
									pos: position{line: 1654, col: 20, offset: 62644},
									expr: &choiceExpr{
										pos: position{line: 1654, col: 22, offset: 62646},
										alternatives: []interface{}{
											&charClassMatcher{
												pos:        position{line: 1654, col: 22, offset: 62646},
												val:        "[\\r\\n ]",
												chars:      []rune{'\r', '\n', ' '},
												ignoreCase: false,
												inverted:   false,
											},
											&ruleRefExpr{
												pos:  position{line: 1654, col: 32, offset: 62656},
												name: "EOF",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 1656, col: 9, offset: 62726},
						name: "Word",
					},
				},
			},
		},
		{
			name: "AnyChar",
			pos:  position{line: 1659, col: 1, offset: 62826},
			expr: &actionExpr{
				pos: position{line: 1659, col: 12, offset: 62837},
				run: (*parser).callonAnyChar1,
				expr: &charClassMatcher{
					pos:        position{line: 1659, col: 12, offset: 62837},
					val:        "[^\\r\\n]",
					chars:      []rune{'\r', '\n'},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "FileLocation",
			pos:  position{line: 1663, col: 1, offset: 62902},
			expr: &actionExpr{
				pos: position{line: 1663, col: 17, offset: 62918},
				run: (*parser).callonFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 1663, col: 17, offset: 62918},
					label: "path",
					expr: &oneOrMoreExpr{
						pos: position{line: 1663, col: 22, offset: 62923},
						expr: &choiceExpr{
							pos: position{line: 1663, col: 23, offset: 62924},
							alternatives: []interface{}{
								&ruleRefExpr{
									pos:  position{line: 1663, col: 23, offset: 62924},
									name: "FILENAME",
								},
								&ruleRefExpr{
									pos:  position{line: 1663, col: 34, offset: 62935},
									name: "DocumentAttributeSubstitution",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ResolvedFileLocation",
			pos:  position{line: 1667, col: 1, offset: 63027},
			expr: &actionExpr{
				pos: position{line: 1667, col: 25, offset: 63051},
				run: (*parser).callonResolvedFileLocation1,
				expr: &labeledExpr{
					pos:   position{line: 1667, col: 25, offset: 63051},
					label: "path",
					expr: &oneOrMoreExpr{
						pos: position{line: 1667, col: 30, offset: 63056},
						expr: &charClassMatcher{
							pos:        position{line: 1667, col: 31, offset: 63057},
							val:        "[^\\r\\n []",
							chars:      []rune{'\r', '\n', ' ', '['},
							ignoreCase: false,
							inverted:   true,
						},
					},
				},
			},
		},
		{
			name: "Location",
			pos:  position{line: 1671, col: 1, offset: 63129},
			expr: &actionExpr{
				pos: position{line: 1671, col: 13, offset: 63141},
				run: (*parser).callonLocation1,
				expr: &seqExpr{
					pos: position{line: 1671, col: 13, offset: 63141},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1671, col: 13, offset: 63141},
							label: "scheme",
							expr: &zeroOrOneExpr{
								pos: position{line: 1671, col: 20, offset: 63148},
								expr: &ruleRefExpr{
									pos:  position{line: 1671, col: 21, offset: 63149},
									name: "URL_SCHEME",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 1671, col: 34, offset: 63162},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 1671, col: 39, offset: 63167},
								expr: &choiceExpr{
									pos: position{line: 1671, col: 40, offset: 63168},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1671, col: 40, offset: 63168},
											name: "FILENAME",
										},
										&ruleRefExpr{
											pos:  position{line: 1671, col: 51, offset: 63179},
											name: "DocumentAttributeSubstitution",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LocationWithScheme",
			pos:  position{line: 1675, col: 1, offset: 63275},
			expr: &actionExpr{
				pos: position{line: 1675, col: 23, offset: 63297},
				run: (*parser).callonLocationWithScheme1,
				expr: &seqExpr{
					pos: position{line: 1675, col: 23, offset: 63297},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1675, col: 23, offset: 63297},
							label: "scheme",
							expr: &ruleRefExpr{
								pos:  position{line: 1675, col: 31, offset: 63305},
								name: "URL_SCHEME",
							},
						},
						&labeledExpr{
							pos:   position{line: 1675, col: 43, offset: 63317},
							label: "path",
							expr: &oneOrMoreExpr{
								pos: position{line: 1675, col: 48, offset: 63322},
								expr: &choiceExpr{
									pos: position{line: 1675, col: 49, offset: 63323},
									alternatives: []interface{}{
										&ruleRefExpr{
											pos:  position{line: 1675, col: 49, offset: 63323},
											name: "FILENAME",
										},
										&ruleRefExpr{
											pos:  position{line: 1675, col: 60, offset: 63334},
											name: "DocumentAttributeSubstitution",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FILENAME",
			pos:  position{line: 1679, col: 1, offset: 63430},
			expr: &oneOrMoreExpr{
				pos: position{line: 1679, col: 13, offset: 63442},
				expr: &charClassMatcher{
					pos:        position{line: 1679, col: 14, offset: 63443},
					val:        "[^\\r\\n{}[\\] ]",
					chars:      []rune{'\r', '\n', '{', '}', '[', ']', ' '},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "ResolvedLocation",
			pos:  position{line: 1681, col: 1, offset: 63577},
			expr: &actionExpr{
				pos: position{line: 1681, col: 21, offset: 63597},
				run: (*parser).callonResolvedLocation1,
				expr: &seqExpr{
					pos: position{line: 1681, col: 21, offset: 63597},
					exprs: []interface{}{
						&labeledExpr{
							pos:   position{line: 1681, col: 21, offset: 63597},
							label: "scheme",
							expr: &ruleRefExpr{
								pos:  position{line: 1681, col: 29, offset: 63605},
								name: "URL_SCHEME",
							},
						},
						&labeledExpr{
							pos:   position{line: 1681, col: 41, offset: 63617},
							label: "path",
							expr: &ruleRefExpr{
								pos:  position{line: 1681, col: 47, offset: 63623},
								name: "RESOLVED_FILENAME",
							},
						},
					},
				},
			},
		},
		{
			name: "RESOLVED_FILENAME",
			pos:  position{line: 1686, col: 1, offset: 63871},
			expr: &oneOrMoreExpr{
				pos: position{line: 1686, col: 22, offset: 63892},
				expr: &charClassMatcher{
					pos:        position{line: 1686, col: 23, offset: 63893},
					val:        "[^\\r\\n[\\] ]",
					chars:      []rune{'\r', '\n', '[', ']', ' '},
					ignoreCase: false,
					inverted:   true,
				},
			},
		},
		{
			name: "URL",
			pos:  position{line: 1688, col: 1, offset: 64025},
			expr: &actionExpr{
				pos: position{line: 1688, col: 9, offset: 64033},
				run: (*parser).callonURL1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1688, col: 9, offset: 64033},
					expr: &charClassMatcher{
						pos:        position{line: 1688, col: 9, offset: 64033},
						val:        "[^\\r\\n[\\]]",
						chars:      []rune{'\r', '\n', '[', ']'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "URL_SCHEME",
			pos:  position{line: 1692, col: 1, offset: 64081},
			expr: &choiceExpr{
				pos: position{line: 1692, col: 15, offset: 64095},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1692, col: 15, offset: 64095},
						val:        "http://",
						ignoreCase: false,
						want:       "\"http://\"",
					},
					&litMatcher{
						pos:        position{line: 1692, col: 27, offset: 64107},
						val:        "https://",
						ignoreCase: false,
						want:       "\"https://\"",
					},
					&litMatcher{
						pos:        position{line: 1692, col: 40, offset: 64120},
						val:        "ftp://",
						ignoreCase: false,
						want:       "\"ftp://\"",
					},
					&litMatcher{
						pos:        position{line: 1692, col: 51, offset: 64131},
						val:        "irc://",
						ignoreCase: false,
						want:       "\"irc://\"",
					},
					&litMatcher{
						pos:        position{line: 1692, col: 62, offset: 64142},
						val:        "mailto:",
						ignoreCase: false,
						want:       "\"mailto:\"",
					},
				},
			},
		},
		{
			name: "ID",
			pos:  position{line: 1694, col: 1, offset: 64153},
			expr: &actionExpr{
				pos: position{line: 1694, col: 7, offset: 64159},
				run: (*parser).callonID1,
				expr: &oneOrMoreExpr{
					pos: position{line: 1694, col: 7, offset: 64159},
					expr: &charClassMatcher{
						pos:        position{line: 1694, col: 7, offset: 64159},
						val:        "[^[\\]<>,]",
						chars:      []rune{'[', ']', '<', '>', ','},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
		},
		{
			name: "DIGIT",
			pos:  position{line: 1698, col: 1, offset: 64284},
			expr: &actionExpr{
				pos: position{line: 1698, col: 10, offset: 64293},
				run: (*parser).callonDIGIT1,
				expr: &charClassMatcher{
					pos:        position{line: 1698, col: 10, offset: 64293},
					val:        "[0-9]",
					ranges:     []rune{'0', '9'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
		{
			name: "NUMBER",
			pos:  position{line: 1702, col: 1, offset: 64335},
			expr: &actionExpr{
				pos: position{line: 1702, col: 11, offset: 64345},
				run: (*parser).callonNUMBER1,
				expr: &seqExpr{
					pos: position{line: 1702, col: 11, offset: 64345},
					exprs: []interface{}{
						&zeroOrOneExpr{
							pos: position{line: 1702, col: 11, offset: 64345},
							expr: &litMatcher{
								pos:        position{line: 1702, col: 11, offset: 64345},
								val:        "-",
								ignoreCase: false,
								want:       "\"-\"",
							},
						},
						&oneOrMoreExpr{
							pos: position{line: 1702, col: 16, offset: 64350},
							expr: &ruleRefExpr{
								pos:  position{line: 1702, col: 16, offset: 64350},
								name: "DIGIT",
							},
						},
					},
				},
			},
		},
		{
			name: "Space",
			pos:  position{line: 1706, col: 1, offset: 64402},
			expr: &choiceExpr{
				pos: position{line: 1706, col: 10, offset: 64411},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1706, col: 10, offset: 64411},
						val:        " ",
						ignoreCase: false,
						want:       "\" \"",
					},
					&actionExpr{
						pos: position{line: 1706, col: 16, offset: 64417},
						run: (*parser).callonSpace3,
						expr: &litMatcher{
							pos:        position{line: 1706, col: 16, offset: 64417},
							val:        "\t",
							ignoreCase: false,
							want:       "\"\\t\"",
						},
					},
				},
			},
		},
		{
			name: "Newline",
			pos:  position{line: 1710, col: 1, offset: 64458},
			expr: &choiceExpr{
				pos: position{line: 1710, col: 12, offset: 64469},
				alternatives: []interface{}{
					&litMatcher{
						pos:        position{line: 1710, col: 12, offset: 64469},
						val:        "\r\n",
						ignoreCase: false,
						want:       "\"\\r\\n\"",
					},
					&litMatcher{
						pos:        position{line: 1710, col: 21, offset: 64478},
						val:        "\r",
						ignoreCase: false,
						want:       "\"\\r\"",
					},
					&litMatcher{
						pos:        position{line: 1710, col: 28, offset: 64485},
						val:        "\n",
						ignoreCase: false,
						want:       "\"\\n\"",
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 1712, col: 1, offset: 64491},
			expr: &notExpr{
				pos: position{line: 1712, col: 8, offset: 64498},
				expr: &anyMatcher{
					line: 1712, col: 9, offset: 64499,
				},
			},
		},
		{
			name: "EOL",
			pos:  position{line: 1714, col: 1, offset: 64502},
			expr: &choiceExpr{
				pos: position{line: 1714, col: 8, offset: 64509},
				alternatives: []interface{}{
					&ruleRefExpr{
						pos:  position{line: 1714, col: 8, offset: 64509},
						name: "Newline",
					},
					&ruleRefExpr{
						pos:  position{line: 1714, col: 18, offset: 64519},
						name: "EOF",
					},
				},
			},
		},
	},
}

func (c *current) onAsciidocDocument1(frontmatter, blocks interface{}) (interface{}, error) {
	return types.NewDraftDocument(frontmatter, blocks.([]interface{}))
}

func (p *parser) callonAsciidocDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsciidocDocument1(stack["frontmatter"], stack["blocks"])
}

func (c *current) onVerbatimDocument1(blocks interface{}) (interface{}, error) {
	return types.NewDraftDocument(nil, blocks.([]interface{}))
}

func (p *parser) callonVerbatimDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimDocument1(stack["blocks"])
}

func (c *current) onTextDocument1(blocks interface{}) (interface{}, error) {
	return types.NewDraftDocument(nil, blocks.([]interface{}))
}

func (p *parser) callonTextDocument1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextDocument1(stack["blocks"])
}

func (c *current) onAsciidocDocumentBlocks1(header, others interface{}) (interface{}, error) {
	if header != nil && others != nil {
		return append([]interface{}{header}, others.([]interface{})...), nil
	} else if others != nil {
		return others.([]interface{}), nil
	}
	return []interface{}{}, nil
}

func (p *parser) callonAsciidocDocumentBlocks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAsciidocDocumentBlocks1(stack["header"], stack["others"])
}

func (c *current) onDocumentBlockWithinDelimitedBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDocumentBlockWithinDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentBlockWithinDelimitedBlock1(stack["block"])
}

func (c *current) onTextDocumentBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonTextDocumentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTextDocumentBlock1(stack["block"])
}

func (c *current) onYamlFrontMatter1(content interface{}) (interface{}, error) {
	return types.NewYamlFrontMatter(content.(string))
}

func (p *parser) callonYamlFrontMatter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatter1(stack["content"])
}

func (c *current) onYamlFrontMatterContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonYamlFrontMatterContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onYamlFrontMatterContent1()
}

func (c *current) onDocumentHeader1(title, id, authors, revision interface{}) (interface{}, error) {
	return types.NewDocumentHeader(title.([]interface{}), authors, revision)
}

func (p *parser) callonDocumentHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentHeader1(stack["title"], stack["id"], stack["authors"], stack["revision"])
}

func (c *current) onDocumentAuthorsInlineForm1(authors interface{}) (interface{}, error) {
	return types.NewDocumentAuthors(authors.([]interface{}))
}

func (p *parser) callonDocumentAuthorsInlineForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsInlineForm1(stack["authors"])
}

func (c *current) onDocumentAuthorsAttributeForm1(author interface{}) (interface{}, error) {
	return []types.DocumentAuthor{author.(types.DocumentAuthor)}, nil
}

func (p *parser) callonDocumentAuthorsAttributeForm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorsAttributeForm1(stack["author"])
}

func (c *current) onDocumentAuthor1(fullname, email interface{}) (interface{}, error) {
	return types.NewDocumentAuthor(fullname, email)
}

func (p *parser) callonDocumentAuthor1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthor1(stack["fullname"], stack["email"])
}

func (c *current) onDocumentAuthorName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorName1()
}

func (c *current) onDocumentAuthorEmail5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAuthorEmail5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail5()
}

func (c *current) onDocumentAuthorEmail1(email interface{}) (interface{}, error) {
	return email, nil
}

func (p *parser) callonDocumentAuthorEmail1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAuthorEmail1(stack["email"])
}

func (c *current) onDocumentRevision9(revnumber, revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(revnumber, revdate, revremark)

}

func (p *parser) callonDocumentRevision9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision9(stack["revnumber"], stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision23(revdate, revremark interface{}) (interface{}, error) {
	return types.NewDocumentRevision(nil, revdate, revremark)

}

func (p *parser) callonDocumentRevision23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision23(stack["revdate"], stack["revremark"])
}

func (c *current) onDocumentRevision1(revision interface{}) (interface{}, error) {
	return revision, nil
}

func (p *parser) callonDocumentRevision1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevision1(stack["revision"])
}

func (c *current) onDocumentRevisionNumber2() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber2()
}

func (c *current) onDocumentRevisionNumber8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionNumber8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionNumber8()
}

func (c *current) onDocumentRevisionDate1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionDate1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionDate1()
}

func (c *current) onDocumentRevisionRemark1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentRevisionRemark1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentRevisionRemark1()
}

func (c *current) onDocumentAttributeDeclaration9(value interface{}) (interface{}, error) {

	return value, nil

}

func (p *parser) callonDocumentAttributeDeclaration9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeDeclaration9(stack["value"])
}

func (c *current) onDocumentAttributeDeclaration1(name, value interface{}) (interface{}, error) {
	return types.NewDocumentAttributeDeclaration(name.(string), value)
}

func (p *parser) callonDocumentAttributeDeclaration1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeDeclaration1(stack["name"], stack["value"])
}

func (c *current) onDocumentAttributeName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAttributeName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeName1()
}

func (c *current) onDocumentAttributeValue1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDocumentAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeValue1()
}

func (c *current) onDocumentAttributeReset2(name interface{}) (interface{}, error) {
	return types.NewDocumentAttributeReset(name.(string))
}

func (p *parser) callonDocumentAttributeReset2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeReset2(stack["name"])
}

func (c *current) onDocumentAttributeReset11(name interface{}) (interface{}, error) {
	return types.NewDocumentAttributeReset(name.(string))
}

func (p *parser) callonDocumentAttributeReset11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeReset11(stack["name"])
}

func (c *current) onDocumentAttributeSubstitution1(name interface{}) (interface{}, error) {
	return types.NewDocumentAttributeSubstitution(name.(string))
}

func (p *parser) callonDocumentAttributeSubstitution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocumentAttributeSubstitution1(stack["name"])
}

func (c *current) onElementAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewElementAttributes(attrs.([]interface{})), nil
}

func (p *parser) callonElementAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttributes1(stack["attrs"])
}

func (c *current) onElementAttribute1(attr interface{}) (interface{}, error) {
	return attr, nil // avoid returning something like `[]interface{}{attr, EOL}`
}

func (p *parser) callonElementAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementAttribute1(stack["attr"])
}

func (c *current) onElementID2(id interface{}) (interface{}, error) {
	return types.NewElementID(id.(string))
}

func (p *parser) callonElementID2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementID2(stack["id"])
}

func (c *current) onElementID11(id interface{}) (interface{}, error) {
	return types.NewElementID(id.(string))
}

func (p *parser) callonElementID11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementID11(stack["id"])
}

func (c *current) onInlineElementID1(id interface{}) (interface{}, error) {
	// no EOL here since there can be multiple InlineElementID on the same line
	return types.NewInlineElementID(id.(string))
}

func (p *parser) callonInlineElementID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElementID1(stack["id"])
}

func (c *current) onElementTitle1(title interface{}) (interface{}, error) {
	return types.NewElementTitle(title.(string))
}

func (p *parser) callonElementTitle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitle1(stack["title"])
}

func (c *current) onElementTitleContent1() (interface{}, error) {
	// "<" and ">" characters are not allowed as they are used as cross-reference markers
	return string(c.text), nil
}

func (p *parser) callonElementTitleContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementTitleContent1()
}

func (c *current) onElementRole5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonElementRole5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementRole5()
}

func (c *current) onElementRole1(role interface{}) (interface{}, error) {
	return types.NewElementRole(role.(string))
}

func (p *parser) callonElementRole1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElementRole1(stack["role"])
}

func (c *current) onLiteralAttribute1() (interface{}, error) {
	return types.NewLiteralAttribute()
}

func (p *parser) callonLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralAttribute1()
}

func (c *current) onAdmonitionMarkerAttribute1(k interface{}) (interface{}, error) {
	return types.NewAdmonitionAttribute(k.(types.AdmonitionKind))
}

func (p *parser) callonAdmonitionMarkerAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionMarkerAttribute1(stack["k"])
}

func (c *current) onSourceAttributes6(attr interface{}) (interface{}, error) {
	return attr, nil
}

func (p *parser) callonSourceAttributes6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes6(stack["attr"])
}

func (c *current) onSourceAttributes14(attr interface{}) (interface{}, error) {
	return attr, nil
}

func (p *parser) callonSourceAttributes14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes14(stack["attr"])
}

func (c *current) onSourceAttributes1(language, others interface{}) (interface{}, error) {
	return types.NewSourceAttributes(language, others.([]interface{})...)
}

func (p *parser) callonSourceAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceAttributes1(stack["language"], stack["others"])
}

func (c *current) onAttributeGroup1(attributes interface{}) (interface{}, error) {
	return types.NewAttributeGroup(attributes.([]interface{}))
}

func (p *parser) callonAttributeGroup1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeGroup1(stack["attributes"])
}

func (c *current) onGenericAttributeWithValue1(key, value interface{}) (interface{}, error) {
	// value is (optionally) set
	return types.NewGenericAttribute(key.(string), value)
}

func (p *parser) callonGenericAttributeWithValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttributeWithValue1(stack["key"], stack["value"])
}

func (c *current) onGenericAttributeWithoutValue1(key interface{}) (interface{}, error) {
	// value is not set
	return types.NewGenericAttribute(key.(string), nil)
}

func (p *parser) callonGenericAttributeWithoutValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericAttributeWithoutValue1(stack["key"])
}

func (c *current) onAttributeKey1(key interface{}) (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAttributeKey1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeKey1(stack["key"])
}

func (c *current) onAttributeValue1(value interface{}) (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeValue1(stack["value"])
}

func (c *current) onStandaloneAttributeValue1(value interface{}) (interface{}, error) {
	// standalone attribute value cannot be followed by a `=`, otherwise it causes troubles for standalone values (eg: in images)
	return string(c.text), nil
}

func (p *parser) callonStandaloneAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStandaloneAttributeValue1(stack["value"])
}

func (c *current) onHorizontalLayout1() (interface{}, error) {
	return types.ElementAttributes{"layout": "horizontal"}, nil
}

func (p *parser) callonHorizontalLayout1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHorizontalLayout1()
}

func (c *current) onQuoteAttributes1(author, title interface{}) (interface{}, error) {
	return types.NewQuoteAttributes("quote", author, title)
}

func (p *parser) callonQuoteAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttributes1(stack["author"], stack["title"])
}

func (c *current) onVerseAttributes1(author, title interface{}) (interface{}, error) {
	return types.NewQuoteAttributes("verse", author.(string), title.(string))
}

func (p *parser) callonVerseAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseAttributes1(stack["author"], stack["title"])
}

func (c *current) onQuoteAttribute1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonQuoteAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteAttribute1()
}

func (c *current) onInlineAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewInlineAttributes(attrs.([]interface{}))
}

func (p *parser) callonInlineAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineAttributes1(stack["attrs"])
}

func (c *current) onSection7() (interface{}, error) {

	// `=` is level 0, etc.
	return (len(c.text) - 1), nil

}

func (p *parser) callonSection7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection7()
}

func (c *current) onSection10(attributes, level interface{}) (bool, error) {

	// use a predicate to make sure that only `=` (level 0) to `======` (level 5) are allowed
	return level.(int) <= 5, nil

}

func (p *parser) callonSection10() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection10(stack["attributes"], stack["level"])
}

func (c *current) onSection1(attributes, level, title, id interface{}) (interface{}, error) {
	return types.NewSection(level.(int), title.([]interface{}), id.([]interface{}), attributes)
}

func (p *parser) callonSection1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSection1(stack["attributes"], stack["level"], stack["title"], stack["id"])
}

func (c *current) onTitleElements1(elements interface{}) (interface{}, error) {
	// absorbs heading and trailing spaces
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonTitleElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElements1(stack["elements"])
}

func (c *current) onTitleElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonTitleElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTitleElement1(stack["element"])
}

func (c *current) onUserMacroBlock1(name, value, attrs interface{}) (interface{}, error) {
	return types.NewUserMacroBlock(name.(string), value.(string), attrs.(types.ElementAttributes), string(c.text))
}

func (p *parser) callonUserMacroBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroBlock1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onInlineUserMacro1(name, value, attrs interface{}) (interface{}, error) {
	return types.NewInlineUserMacro(name.(string), value.(string), attrs.(types.ElementAttributes), string(c.text))
}

func (p *parser) callonInlineUserMacro1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineUserMacro1(stack["name"], stack["value"], stack["attrs"])
}

func (c *current) onUserMacroName1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUserMacroName1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroName1()
}

func (c *current) onUserMacroValue1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUserMacroValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroValue1()
}

func (c *current) onUserMacroAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewInlineAttributes(attrs.([]interface{}))
}

func (p *parser) callonUserMacroAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUserMacroAttributes1(stack["attrs"])
}

func (c *current) onFileInclusion4(path, inlineAttributes interface{}) (interface{}, error) {

	return types.NewFileInclusion(path.(types.Location), inlineAttributes.(types.ElementAttributes), string(c.text))

}

func (p *parser) callonFileInclusion4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion4(stack["path"], stack["inlineAttributes"])
}

func (c *current) onFileInclusion1(incl interface{}) (interface{}, error) {
	return incl.(types.FileInclusion), nil
}

func (p *parser) callonFileInclusion1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileInclusion1(stack["incl"])
}

func (c *current) onFileIncludeAttributes1(attrs interface{}) (interface{}, error) {
	return types.NewInlineAttributes(attrs.([]interface{}))
}

func (p *parser) callonFileIncludeAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileIncludeAttributes1(stack["attrs"])
}

func (c *current) onLineRangesAttribute1(lines interface{}) (interface{}, error) {

	return types.NewLineRangesAttribute(lines)
}

func (p *parser) callonLineRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttribute1(stack["lines"])
}

func (c *current) onLineRangesAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonLineRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleLineRanges9(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleLineRanges9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges9(stack["other"])
}

func (c *current) onMultipleLineRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultipleQuotedLineRanges10(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleQuotedLineRanges10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges10(stack["other"])
}

func (c *current) onMultipleQuotedLineRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleQuotedLineRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleQuotedLineRanges1(stack["first"], stack["others"])
}

func (c *current) onMultiLineRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineRange1(stack["start"], stack["end"])
}

func (c *current) onMultiLineQuotedRange1(start, end interface{}) (interface{}, error) {
	// eg: lines=12..14
	return types.NewLineRange(start.(int), end.(int))
}

func (p *parser) callonMultiLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiLineQuotedRange1(stack["start"], stack["end"])
}

func (c *current) onSingleLineRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineRange1(stack["singleline"])
}

func (c *current) onSingleLineQuotedRange1(singleline interface{}) (interface{}, error) {
	// eg: lines=12
	return types.NewLineRange(singleline.(int), singleline.(int))
}

func (p *parser) callonSingleLineQuotedRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineQuotedRange1(stack["singleline"])
}

func (c *current) onUndefinedLineRange1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonUndefinedLineRange1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUndefinedLineRange1()
}

func (c *current) onTagRangesAttribute1(tags interface{}) (interface{}, error) {
	//TODO: check if 'tags'/'tag' is allowed for both single and multiple values
	return types.NewTagRangesAttribute(tags.([]interface{}))
}

func (p *parser) callonTagRangesAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttribute1(stack["tags"])
}

func (c *current) onTagRangesAttributeValue1(value interface{}) (interface{}, error) {
	return value, nil
}

func (p *parser) callonTagRangesAttributeValue1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRangesAttributeValue1(stack["value"])
}

func (c *current) onMultipleTagRanges7(other interface{}) (interface{}, error) {
	return other, nil

}

func (p *parser) callonMultipleTagRanges7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges7(stack["other"])
}

func (c *current) onMultipleTagRanges1(first, others interface{}) (interface{}, error) {
	return append([]interface{}{first}, others.([]interface{})...), nil

}

func (p *parser) callonMultipleTagRanges1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultipleTagRanges1(stack["first"], stack["others"])
}

func (c *current) onTagRange2(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), true)
}

func (p *parser) callonTagRange2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange2(stack["tag"])
}

func (c *current) onTagRange7(tag interface{}) (interface{}, error) {
	return types.NewTagRange(tag.(string), false)
}

func (p *parser) callonTagRange7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagRange7(stack["tag"])
}

func (c *current) onTagWildcard4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonTagWildcard4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard4()
}

func (c *current) onTagWildcard7(stars interface{}) (bool, error) {

	// use a predicate to make sure that only `*` and `**` are allowed
	return len(stars.(string)) <= 2, nil

}

func (p *parser) callonTagWildcard7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard7(stack["stars"])
}

func (c *current) onTagWildcard1(stars interface{}) (interface{}, error) {
	return stars, nil
}

func (p *parser) callonTagWildcard1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTagWildcard1(stack["stars"])
}

func (c *current) onVerbatimFileLine6() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonVerbatimFileLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimFileLine6()
}

func (c *current) onVerbatimFileLine1(content interface{}) (interface{}, error) {
	return types.NewVerbatimFileLine(content.(string))
}

func (p *parser) callonVerbatimFileLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimFileLine1(stack["content"])
}

func (c *current) onIncludedFileLine8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileLine8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine8()
}

func (c *current) onIncludedFileLine1(content interface{}) (interface{}, error) {
	return types.NewIncludedFileLine(content.([]interface{}))
}

func (p *parser) callonIncludedFileLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileLine1(stack["content"])
}

func (c *current) onIncludedFileStartTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileStartTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag5()
}

func (c *current) onIncludedFileStartTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileStartTag(tag.(string))
}

func (p *parser) callonIncludedFileStartTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileStartTag1(stack["tag"])
}

func (c *current) onIncludedFileEndTag5() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIncludedFileEndTag5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag5()
}

func (c *current) onIncludedFileEndTag1(tag interface{}) (interface{}, error) {
	return types.NewIncludedFileEndTag(tag.(string))
}

func (p *parser) callonIncludedFileEndTag1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIncludedFileEndTag1(stack["tag"])
}

func (c *current) onListParagraph2(comment interface{}) (interface{}, error) {
	return comment, nil

}

func (p *parser) callonListParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph2(stack["comment"])
}

func (c *current) onListParagraph5(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), nil)

}

func (p *parser) callonListParagraph5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraph5(stack["lines"])
}

func (c *current) onListParagraphLine24(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonListParagraphLine24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine24(stack["elements"])
}

func (c *current) onListParagraphLine1(line interface{}) (interface{}, error) {

	return line, nil

}

func (p *parser) callonListParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListParagraphLine1(stack["line"])
}

func (c *current) onContinuedListItemElement1(element interface{}) (interface{}, error) {
	return types.NewContinuedListItemElement(element) // offset is negative
}

func (p *parser) callonContinuedListItemElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemElement1(stack["element"])
}

func (c *current) onContinuedListItemContent1(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonContinuedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedListItemContent1(stack["content"])
}

func (c *current) onOrderedListItem1(attributes, prefix, content interface{}) (interface{}, error) {
	return types.NewOrderedListItem(prefix.(types.OrderedListItemPrefix), content.([]interface{}), attributes)
}

func (p *parser) callonOrderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItem1(stack["attributes"], stack["prefix"], stack["content"])
}

func (c *current) onOrderedListItemPrefix10() (interface{}, error) {

	// `.` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonOrderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix10()
}

func (c *current) onOrderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `.` to `.....` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonOrderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix13(stack["depth"])
}

func (c *current) onOrderedListItemPrefix7(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewOrderedListItemPrefix(types.Arabic, 1)
	case 2:
		return types.NewOrderedListItemPrefix(types.LowerAlpha, 2)
	case 3:
		return types.NewOrderedListItemPrefix(types.LowerRoman, 3)
	case 4:
		return types.NewOrderedListItemPrefix(types.UpperAlpha, 4)
	default:
		return types.NewOrderedListItemPrefix(types.UpperRoman, 5)
	}

}

func (p *parser) callonOrderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix7(stack["depth"])
}

func (c *current) onOrderedListItemPrefix14() (interface{}, error) {
	// numbering style: "1."
	return types.NewOrderedListItemPrefix(types.Arabic, 1)

}

func (p *parser) callonOrderedListItemPrefix14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix14()
}

func (c *current) onOrderedListItemPrefix19() (interface{}, error) {
	// numbering style: "a."
	return types.NewOrderedListItemPrefix(types.LowerAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix19()
}

func (c *current) onOrderedListItemPrefix23() (interface{}, error) {
	// numbering style: "A."
	return types.NewOrderedListItemPrefix(types.UpperAlpha, 1)

}

func (p *parser) callonOrderedListItemPrefix23() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix23()
}

func (c *current) onOrderedListItemPrefix27() (interface{}, error) {
	// numbering style: "i)"
	return types.NewOrderedListItemPrefix(types.LowerRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix27() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix27()
}

func (c *current) onOrderedListItemPrefix32() (interface{}, error) {
	// numbering style: "I)"
	return types.NewOrderedListItemPrefix(types.UpperRoman, 1)

}

func (p *parser) callonOrderedListItemPrefix32() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix32()
}

func (c *current) onOrderedListItemPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonOrderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemPrefix1(stack["prefix"])
}

func (c *current) onOrderedListItemContent1(elements interface{}) (interface{}, error) {
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonOrderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOrderedListItemContent1(stack["elements"])
}

func (c *current) onUnorderedListItem1(attributes, prefix, checkstyle, content interface{}) (interface{}, error) {
	return types.NewUnorderedListItem(prefix.(types.UnorderedListItemPrefix), checkstyle, content.([]interface{}), attributes)
}

func (p *parser) callonUnorderedListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItem1(stack["attributes"], stack["prefix"], stack["checkstyle"], stack["content"])
}

func (c *current) onUnorderedListItemPrefix10() (interface{}, error) {

	// `*` is 1, etc.
	return (len(c.text)), nil

}

func (p *parser) callonUnorderedListItemPrefix10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix10()
}

func (c *current) onUnorderedListItemPrefix13(depth interface{}) (bool, error) {

	// use a predicate to make sure that only `*` to `*****` are allowed
	return depth.(int) <= 5, nil

}

func (p *parser) callonUnorderedListItemPrefix13() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix13(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix7(depth interface{}) (interface{}, error) {
	switch depth.(int) {
	case 1:
		return types.NewUnorderedListItemPrefix(types.OneAsterisk, 1)
	case 2:
		return types.NewUnorderedListItemPrefix(types.TwoAsterisks, 2)
	case 3:
		return types.NewUnorderedListItemPrefix(types.ThreeAsterisks, 3)
	case 4:
		return types.NewUnorderedListItemPrefix(types.FourAsterisks, 4)
	default:
		return types.NewUnorderedListItemPrefix(types.FiveAsterisks, 5)
	}

}

func (p *parser) callonUnorderedListItemPrefix7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix7(stack["depth"])
}

func (c *current) onUnorderedListItemPrefix15() (interface{}, error) {
	return types.NewUnorderedListItemPrefix(types.Dash, 1)

}

func (p *parser) callonUnorderedListItemPrefix15() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix15()
}

func (c *current) onUnorderedListItemPrefix1(prefix interface{}) (interface{}, error) {
	return prefix, nil
}

func (p *parser) callonUnorderedListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemPrefix1(stack["prefix"])
}

func (c *current) onUnorderedListItemCheckStyle7() (interface{}, error) {
	return types.Unchecked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle7()
}

func (c *current) onUnorderedListItemCheckStyle9() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle9()
}

func (c *current) onUnorderedListItemCheckStyle11() (interface{}, error) {
	return types.Checked, nil
}

func (p *parser) callonUnorderedListItemCheckStyle11() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle11()
}

func (c *current) onUnorderedListItemCheckStyle1(style interface{}) (interface{}, error) {
	return style, nil

}

func (p *parser) callonUnorderedListItemCheckStyle1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemCheckStyle1(stack["style"])
}

func (c *current) onUnorderedListItemContent1(elements interface{}) (interface{}, error) {
	// Another list or a literal paragraph immediately following a list item will be implicitly included in the list item
	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonUnorderedListItemContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnorderedListItemContent1(stack["elements"])
}

func (c *current) onLabeledListItem1(attributes, term, separator, description interface{}) (interface{}, error) {
	return types.NewLabeledListItem(len(separator.(string))-1, term.([]interface{}), description, attributes)
}

func (p *parser) callonLabeledListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItem1(stack["attributes"], stack["term"], stack["separator"], stack["description"])
}

func (c *current) onVerbatimLabeledListItemTerm3() (interface{}, error) {
	return types.NewStringElement(strings.TrimSpace(string(c.text)))
}

func (p *parser) callonVerbatimLabeledListItemTerm3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLabeledListItemTerm3()
}

func (c *current) onVerbatimLabeledListItemTerm1(content interface{}) (interface{}, error) {
	return types.NewInlineElements(content)
}

func (p *parser) callonVerbatimLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLabeledListItemTerm1(stack["content"])
}

func (c *current) onLabeledListItemTerm1(elements interface{}) (interface{}, error) {
	// rule as an extra entrypoint
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTerm1(stack["elements"])
}

func (c *current) onLabeledListItemTermElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonLabeledListItemTermElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemTermElement1(stack["element"])
}

func (c *current) onLabeledListItemSeparator4() (interface{}, error) {

	return string(c.text), nil

}

func (p *parser) callonLabeledListItemSeparator4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator4()
}

func (c *current) onLabeledListItemSeparator7(separator interface{}) (bool, error) {

	// use a predicate to make sure that only `::` to `::::` are allowed
	return len(separator.(string)) >= 2 && len(separator.(string)) <= 4, nil

}

func (p *parser) callonLabeledListItemSeparator7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator7(stack["separator"])
}

func (c *current) onLabeledListItemSeparator1(separator interface{}) (interface{}, error) {
	return separator, nil
}

func (p *parser) callonLabeledListItemSeparator1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemSeparator1(stack["separator"])
}

func (c *current) onLabeledListItemDescription1(elements interface{}) (interface{}, error) {

	return types.NewListItemContent(elements.([]interface{}))
}

func (p *parser) callonLabeledListItemDescription1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledListItemDescription1(stack["elements"])
}

func (c *current) onAdmonitionKind2() (interface{}, error) {
	return types.Tip, nil

}

func (p *parser) callonAdmonitionKind2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind2()
}

func (c *current) onAdmonitionKind4() (interface{}, error) {
	return types.Note, nil

}

func (p *parser) callonAdmonitionKind4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind4()
}

func (c *current) onAdmonitionKind6() (interface{}, error) {
	return types.Important, nil

}

func (p *parser) callonAdmonitionKind6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind6()
}

func (c *current) onAdmonitionKind8() (interface{}, error) {
	return types.Warning, nil

}

func (p *parser) callonAdmonitionKind8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind8()
}

func (c *current) onAdmonitionKind10() (interface{}, error) {
	return types.Caution, nil
}

func (p *parser) callonAdmonitionKind10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdmonitionKind10()
}

func (c *current) onParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onParagraph13(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.MarkdownQuote, content.([]interface{}), attributes)

}

func (p *parser) callonParagraph13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph13(stack["attributes"], stack["content"])
}

func (c *current) onParagraph21(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)

}

func (p *parser) callonParagraph21() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraph21(stack["attributes"], stack["lines"])
}

func (c *current) onMarkdownQuoteBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonMarkdownQuoteBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteBlockVerbatimContent2(stack["content"])
}

func (c *current) onMarkdownQuoteBlockAttribution5() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonMarkdownQuoteBlockAttribution5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteBlockAttribution5()
}

func (c *current) onMarkdownQuoteBlockAttribution1(author interface{}) (interface{}, error) {
	return author, nil
}

func (p *parser) callonMarkdownQuoteBlockAttribution1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMarkdownQuoteBlockAttribution1(stack["author"])
}

func (c *current) onSimpleParagraph6(attributes interface{}) (bool, error) {
	// skip if the '[literal]' attribute was set on this paragraph
	if attrs, ok := attributes.(types.ElementAttributes); ok {
		kind, found := attrs[types.AttrKind]
		return !found || kind != types.Literal, nil
	}
	return true, nil

}

func (p *parser) callonSimpleParagraph6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleParagraph6(stack["attributes"])
}

func (c *current) onSimpleParagraph1(attributes, firstLine, otherLines interface{}) (interface{}, error) {

	return types.NewParagraph(append([]interface{}{firstLine}, otherLines.([]interface{})...), attributes)
}

func (p *parser) callonSimpleParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSimpleParagraph1(stack["attributes"], stack["firstLine"], stack["otherLines"])
}

func (c *current) onFirstParagraphLine1(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonFirstParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstParagraphLine1(stack["elements"])
}

func (c *current) onOtherParagraphLine1(elements interface{}) (interface{}, error) {
	return elements, nil
}

func (p *parser) callonOtherParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOtherParagraphLine1(stack["elements"])
}

func (c *current) onContinuedParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonContinuedParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onContinuedParagraph12(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)
}

func (p *parser) callonContinuedParagraph12() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedParagraph12(stack["attributes"], stack["lines"])
}

func (c *current) onContinuedParagraphLines1(firstLine, otherLines interface{}) (interface{}, error) {
	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonContinuedParagraphLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinuedParagraphLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onVerseParagraph7(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.ElementAttributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Verse, nil
	}
	return false, nil

}

func (p *parser) callonVerseParagraph7() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph7(stack["attributes"])
}

func (c *current) onVerseParagraph2(attributes, t, lines interface{}) (interface{}, error) {

	return types.NewAdmonitionParagraph(lines.([]interface{}), t.(types.AdmonitionKind), attributes)

}

func (p *parser) callonVerseParagraph2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph2(stack["attributes"], stack["t"], stack["lines"])
}

func (c *current) onVerseParagraph19(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.ElementAttributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Verse, nil
	}
	return false, nil

}

func (p *parser) callonVerseParagraph19() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph19(stack["attributes"])
}

func (c *current) onVerseParagraph14(attributes, lines interface{}) (interface{}, error) {

	return types.NewParagraph(lines.([]interface{}), attributes)

}

func (p *parser) callonVerseParagraph14() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseParagraph14(stack["attributes"], stack["lines"])
}

func (c *current) onInlineElements7(comment interface{}) (interface{}, error) {
	return types.NewInlineElements([]interface{}{comment})

}

func (p *parser) callonInlineElements7() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements7(stack["comment"])
}

func (c *current) onInlineElements10(elements interface{}) (interface{}, error) {

	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonInlineElements10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements10(stack["elements"])
}

func (c *current) onInlineElements1(elements interface{}) (interface{}, error) {
	return elements, nil

}

func (p *parser) callonInlineElements1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElements1(stack["elements"])
}

func (c *current) onInlineElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonInlineElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineElement1(stack["element"])
}

func (c *current) onLineBreak1() (interface{}, error) {
	return types.NewLineBreak()
}

func (p *parser) callonLineBreak1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLineBreak1()
}

func (c *current) onConstrainedQuotedText1(text interface{}) (interface{}, error) {
	// if a '^' or '~' is alone (ie, badly formatted superscript or subscript, then accept it as-is)
	return text, nil
}

func (p *parser) callonConstrainedQuotedText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstrainedQuotedText1(stack["text"])
}

func (c *current) onSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	// rule used withn `words` to detect superscript or subscript portions, eg in math formulae.
	return string(c.text), nil
}

func (p *parser) callonSubscriptOrSuperscriptPrefix3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptOrSuperscriptPrefix3()
}

func (c *current) onOneOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonOneOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOneOrMoreBackslashes1()
}

func (c *current) onTwoOrMoreBackslashes1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonTwoOrMoreBackslashes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTwoOrMoreBackslashes1()
}

func (c *current) onDoubleQuoteBoldText1(elements interface{}) (interface{}, error) {

	return types.NewQuotedText(types.Bold, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteBoldText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldText1(stack["elements"])
}

func (c *current) onDoubleQuoteBoldTextStringElement1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteBoldTextStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextStringElement1()
}

func (c *current) onDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onSingleQuoteBoldText2(elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '**' to emphazise a portion of a word)
	return types.NewQuotedText(types.Bold, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText2(stack["elements"])
}

func (c *current) onSingleQuoteBoldText16(elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation.
	return types.NewQuotedText(types.Bold, elements.([]interface{})) // include the second heading `*` as a regular StringElement in the bold content
}

func (p *parser) callonSingleQuoteBoldText16() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldText16(stack["elements"])
}

func (c *current) onSingleQuoteBoldTextStringElement1() (interface{}, error) {
	// anything except EOL, space, bold and subscript/superscript delimiters and brackets. Excludes curly brackets to match with DocumentAttributeSubstitution elements
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteBoldTextStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextStringElement1()
}

func (c *current) onSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	// or a bold delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteBoldTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteBoldTextFallbackCharacter3()
}

func (c *current) onEscapedBoldText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "**", elements.([]interface{}))

}

func (p *parser) callonEscapedBoldText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `**` vs `*` punctuation
	result := append([]interface{}{"*"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "*", result)

}

func (p *parser) callonEscapedBoldText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedBoldText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "*", elements.([]interface{}))
}

func (p *parser) callonEscapedBoldText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedBoldText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteItalicText1(elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Italic, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteItalicText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicText1(stack["elements"])
}

func (c *current) onDoubleQuoteItalicTextStringElement1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteItalicTextStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextStringElement1()
}

func (c *current) onDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or a italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onSingleQuoteItalicText2(elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs '__' to emphazise a portion of a word)
	return types.NewQuotedText(types.Italic, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText2(stack["elements"])
}

func (c *current) onSingleQuoteItalicText13(elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation.
	return types.NewQuotedText(types.Italic, elements.([]interface{})) // include the second heading `_` as a regular StringElement in the italic content
}

func (p *parser) callonSingleQuoteItalicText13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicText13(stack["elements"])
}

func (c *current) onSingleQuoteItalicTextStringElement1() (interface{}, error) {
	// anything except EOL, space, bold and subscript/superscript delimiters and brackets. Excludes curly brackets to match with DocumentAttributeSubstitution elements
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteItalicTextStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextStringElement1()
}

func (c *current) onSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	// or an italic delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteItalicTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteItalicTextFallbackCharacter3()
}

func (c *current) onEscapedItalicText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "__", elements.([]interface{}))

}

func (p *parser) callonEscapedItalicText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced `__` vs `_` punctuation
	result := append([]interface{}{"_"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "_", result)

}

func (p *parser) callonEscapedItalicText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedItalicText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "_", elements.([]interface{}))
}

func (p *parser) callonEscapedItalicText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedItalicText18(stack["backslashes"], stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceText1(elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewQuotedText(types.Monospace, elements.([]interface{}))
}

func (p *parser) callonDoubleQuoteMonospaceText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceText1(stack["elements"])
}

func (c *current) onDoubleQuoteMonospaceTextStringElement1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteMonospaceTextStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextStringElement1()
}

func (c *current) onDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	// or a monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonDoubleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDoubleQuoteMonospaceTextFallbackCharacter3()
}

func (c *current) onSingleQuoteMonospaceText2(elements interface{}) (interface{}, error) {
	// single punctuation cannot be followed by a character (needs "``" to emphazise a portion of a word)
	return types.NewQuotedText(types.Monospace, elements.([]interface{}))
}

func (p *parser) callonSingleQuoteMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText2(stack["elements"])
}

func (c *current) onSingleQuoteMonospaceText13(elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation.
	return types.NewQuotedText(types.Monospace, elements.([]interface{})) // include the second heading "`" as a regular StringElement in the monospace content
}

func (p *parser) callonSingleQuoteMonospaceText13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceText13(stack["elements"])
}

func (c *current) onSingleQuoteMonospaceTextStringElement1() (interface{}, error) {
	// anything except EOL, space, monospace and subscript/superscript delimiters. Excludes curly brackets to match with DocumentAttributeSubstitution elements
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteMonospaceTextStringElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextStringElement1()
}

func (c *current) onSingleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	// or an monospace delimiter when immediately followed by an alphanum (ie, in the middle of some text)
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSingleQuoteMonospaceTextFallbackCharacter3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleQuoteMonospaceTextFallbackCharacter3()
}

func (c *current) onEscapedMonospaceText2(backslashes, elements interface{}) (interface{}, error) {
	// double punctuation must be evaluated first
	return types.NewEscapedQuotedText(backslashes.(string), "``", elements.([]interface{}))

}

func (p *parser) callonEscapedMonospaceText2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText2(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText10(backslashes, elements interface{}) (interface{}, error) {
	// unbalanced "``" vs "`" punctuation
	result := append([]interface{}{"`"}, elements.([]interface{}))
	return types.NewEscapedQuotedText(backslashes.(string), "`", result)

}

func (p *parser) callonEscapedMonospaceText10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText10(stack["backslashes"], stack["elements"])
}

func (c *current) onEscapedMonospaceText18(backslashes, elements interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "`", elements.([]interface{}))
}

func (p *parser) callonEscapedMonospaceText18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedMonospaceText18(stack["backslashes"], stack["elements"])
}

func (c *current) onSubscriptText1(element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Subscript, element)
}

func (p *parser) callonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubscriptText1(stack["element"])
}

func (c *current) onNonSubscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '~'
	return c.text, nil
}

func (p *parser) callonNonSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSubscriptText1()
}

func (c *current) onEscapedSubscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "~", element)
}

func (p *parser) callonEscapedSubscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSubscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSuperscriptText1(element interface{}) (interface{}, error) {
	// wraps a single word
	return types.NewQuotedText(types.Superscript, element)
}

func (p *parser) callonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSuperscriptText1(stack["element"])
}

func (c *current) onNonSuperscriptText1() (interface{}, error) {
	// anything except spaces, EOL or '^'
	return c.text, nil
}

func (p *parser) callonNonSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonSuperscriptText1()
}

func (c *current) onEscapedSuperscriptText1(backslashes, element interface{}) (interface{}, error) {
	// simple punctuation must be evaluated last
	return types.NewEscapedQuotedText(backslashes.(string), "^", element)
}

func (p *parser) callonEscapedSuperscriptText1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEscapedSuperscriptText1(stack["backslashes"], stack["element"])
}

func (c *current) onSinglePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewPassthrough(types.SinglePlusPassthrough, []interface{}{content})
}

func (p *parser) callonSinglePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthrough1(stack["content"])
}

func (c *current) onSinglePlusPassthroughContent2() (interface{}, error) {
	// no space in the first or last position of the content, but allowed elsewhere
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent2()
}

func (c *current) onSinglePlusPassthroughContent24() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonSinglePlusPassthroughContent24() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSinglePlusPassthroughContent24()
}

func (c *current) onTriplePlusPassthrough1(content interface{}) (interface{}, error) {
	return types.NewPassthrough(types.TriplePlusPassthrough, []interface{}{content})
}

func (p *parser) callonTriplePlusPassthrough1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthrough1(stack["content"])
}

func (c *current) onTriplePlusPassthroughContent2() (interface{}, error) {
	// spaces and newlines are also allowed in the first or last position of the content and elsewhere too
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent2()
}

func (c *current) onTriplePlusPassthroughContent8() (interface{}, error) {
	// a single character
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonTriplePlusPassthroughContent8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTriplePlusPassthroughContent8()
}

func (c *current) onPassthroughMacro2(content interface{}) (interface{}, error) {
	return types.NewPassthrough(types.PassthroughMacro, []interface{}{content})
}

func (p *parser) callonPassthroughMacro2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro2(stack["content"])
}

func (c *current) onPassthroughMacro9(content interface{}) (interface{}, error) {
	return types.NewPassthrough(types.PassthroughMacro, content.([]interface{}))
}

func (p *parser) callonPassthroughMacro9() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacro9(stack["content"])
}

func (c *current) onPassthroughMacroCharacter1() (interface{}, error) {
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonPassthroughMacroCharacter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPassthroughMacroCharacter1()
}

func (c *current) onInternalCrossReference2(id, label interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id.(string), label.(string))
}

func (p *parser) callonInternalCrossReference2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference2(stack["id"], stack["label"])
}

func (c *current) onInternalCrossReference13(id interface{}) (interface{}, error) {
	return types.NewInternalCrossReference(id.(string), nil)
}

func (p *parser) callonInternalCrossReference13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInternalCrossReference13(stack["id"])
}

func (c *current) onExternalCrossReference1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewExternalCrossReference(url.(types.Location), inlineAttributes.(types.ElementAttributes))
}

func (p *parser) callonExternalCrossReference1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalCrossReference1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.ElementAttributes))
}

func (p *parser) callonRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onLinkAttributes1(firstAttr, otherattrs interface{}) (interface{}, error) {
	return types.NewInlineLinkAttributes(append(firstAttr.([]interface{}), otherattrs.([]interface{})...))
}

func (p *parser) callonLinkAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLinkAttributes1(stack["firstAttr"], stack["otherattrs"])
}

func (c *current) onFirstLinkAttributeElement4(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFirstLinkAttributeElement4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement4(stack["elements"])
}

func (c *current) onFirstLinkAttributeElement18(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))

}

func (p *parser) callonFirstLinkAttributeElement18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement18(stack["elements"])
}

func (c *current) onFirstLinkAttributeElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonFirstLinkAttributeElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFirstLinkAttributeElement1(stack["element"])
}

func (c *current) onAttributeChar1() (interface{}, error) {
	// excludes comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAttributeChar1()
}

func (c *current) onQuotedAttributeChar1() (interface{}, error) {
	// does not exclude comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonQuotedAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedAttributeChar1()
}

func (c *current) onUnquotedAttributeChar1() (interface{}, error) {
	// excludes comma
	return types.NewStringElement(string(c.text))
}

func (p *parser) callonUnquotedAttributeChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnquotedAttributeChar1()
}

func (c *current) onInlineLinks1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonInlineLinks1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineLinks1(stack["elements"])
}

func (c *current) onResolvedRelativeLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes.(types.ElementAttributes))
}

func (p *parser) callonResolvedRelativeLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedRelativeLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onResolvedExternalLink1(url, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineLink(url.(types.Location), inlineAttributes)
}

func (p *parser) callonResolvedExternalLink1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedExternalLink1(stack["url"], stack["inlineAttributes"])
}

func (c *current) onImageBlock1(attributes, path, inlineAttributes interface{}) (interface{}, error) {
	return types.NewImageBlock(path.(types.Location), inlineAttributes.(types.ElementAttributes), attributes)
}

func (p *parser) callonImageBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageBlock1(stack["attributes"], stack["path"], stack["inlineAttributes"])
}

func (c *current) onInlineImage1(path, inlineAttributes interface{}) (interface{}, error) {
	return types.NewInlineImage(path.(types.Location), inlineAttributes.(types.ElementAttributes))
}

func (p *parser) callonInlineImage1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineImage1(stack["path"], stack["inlineAttributes"])
}

func (c *current) onImageAttributes1(alt, width, height, otherattrs interface{}) (interface{}, error) {
	return types.NewImageAttributes(alt, width, height, otherattrs.([]interface{}))
}

func (p *parser) callonImageAttributes1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImageAttributes1(stack["alt"], stack["width"], stack["height"], stack["otherattrs"])
}

func (c *current) onInlineFootnote2(content interface{}) (interface{}, error) {
	return types.NewFootnote("", content.([]interface{}))
}

func (p *parser) callonInlineFootnote2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote2(stack["content"])
}

func (c *current) onInlineFootnote8(ref, content interface{}) (interface{}, error) {
	return types.NewFootnote(ref.(string), content)
}

func (p *parser) callonInlineFootnote8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineFootnote8(stack["ref"], stack["content"])
}

func (c *current) onFootnoteContent1(elements interface{}) (interface{}, error) {
	// footnote content may span multiple lines
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonFootnoteContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFootnoteContent1(stack["elements"])
}

func (c *current) onDelimitedBlock1(block interface{}) (interface{}, error) {
	return block, nil
}

func (p *parser) callonDelimitedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDelimitedBlock1(stack["block"])
}

func (c *current) onVerbatimLine1(content, callouts interface{}) (interface{}, error) {
	return types.NewVerbatimLine(content.(string), callouts)
}

func (p *parser) callonVerbatimLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLine1(stack["content"], stack["callouts"])
}

func (c *current) onVerbatimLineContent1() (interface{}, error) {

	return string(c.text), nil
}

func (p *parser) callonVerbatimLineContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerbatimLineContent1()
}

func (c *current) onCallout5() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCallout5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout5()
}

func (c *current) onCallout1(ref interface{}) (interface{}, error) {
	return types.NewCallout(ref.(int))
}

func (p *parser) callonCallout1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCallout1(stack["ref"])
}

func (c *current) onCalloutListItem1(ref, description interface{}) (interface{}, error) {
	return types.NewCalloutListItem(ref.(int), description.([]interface{}))
}

func (p *parser) callonCalloutListItem1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItem1(stack["ref"], stack["description"])
}

func (c *current) onCalloutListItemPrefix5() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonCalloutListItemPrefix5() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItemPrefix5()
}

func (c *current) onCalloutListItemPrefix1(ref interface{}) (interface{}, error) {
	return ref, nil
}

func (p *parser) callonCalloutListItemPrefix1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCalloutListItemPrefix1(stack["ref"])
}

func (c *current) onFencedBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Fenced, content.([]interface{}), attributes)
}

func (p *parser) callonFencedBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlock1(stack["attributes"], stack["content"])
}

func (c *current) onFencedBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonFencedBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFencedBlockVerbatimContent2(stack["content"])
}

func (c *current) onListingBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Listing, content.([]interface{}), attributes)
}

func (p *parser) callonListingBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlock1(stack["attributes"], stack["content"])
}

func (c *current) onListingBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonListingBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListingBlockVerbatimContent2(stack["content"])
}

func (c *current) onExampleBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Example, content.([]interface{}), attributes)
}

func (p *parser) callonExampleBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlock1(stack["attributes"], stack["content"])
}

func (c *current) onExampleBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonExampleBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExampleBlockVerbatimContent2(stack["content"])
}

func (c *current) onQuoteBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Quote, content.([]interface{}), attributes)
}

func (p *parser) callonQuoteBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlock1(stack["attributes"], stack["content"])
}

func (c *current) onQuoteBlockVerbatimElement2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonQuoteBlockVerbatimElement2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoteBlockVerbatimElement2(stack["content"])
}

func (c *current) onVerseBlock5(attributes interface{}) (bool, error) {

	kind := attributes.(types.ElementAttributes).GetAsString("kind") // once we got the attributes, check that `[verse]`  was set
	return kind == "verse", nil

}

func (p *parser) callonVerseBlock5() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlock5(stack["attributes"])
}

func (c *current) onVerseBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Verse, content.([]interface{}), attributes)

}

func (p *parser) callonVerseBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlock1(stack["attributes"], stack["content"])
}

func (c *current) onVerseBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonVerseBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockVerbatimContent2(stack["content"])
}

func (c *current) onSidebarBlock1(attributes, content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Sidebar, content.([]interface{}), attributes)
}

func (p *parser) callonSidebarBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlock1(stack["attributes"], stack["content"])
}

func (c *current) onSidebarBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonSidebarBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSidebarBlockVerbatimContent2(stack["content"])
}

func (c *current) onNormalBlockElement1(element interface{}) (interface{}, error) {
	return element, nil

}

func (p *parser) callonNormalBlockElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNormalBlockElement1(stack["element"])
}

func (c *current) onVerseBlockElement1(element interface{}) (interface{}, error) {
	return element, nil
}

func (p *parser) callonVerseBlockElement1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockElement1(stack["element"])
}

func (c *current) onVerseBlockParagraph1(lines interface{}) (interface{}, error) {
	return types.NewParagraph(lines.([]interface{}), nil)
}

func (p *parser) callonVerseBlockParagraph1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraph1(stack["lines"])
}

func (c *current) onVerseBlockParagraphLine1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonVerseBlockParagraphLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVerseBlockParagraphLine1(stack["elements"])
}

func (c *current) onTable1(attributes, header, lines interface{}) (interface{}, error) {
	// end delimiter or end of file
	return types.NewTable(header, lines.([]interface{}), attributes)
}

func (p *parser) callonTable1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTable1(stack["attributes"], stack["header"], stack["lines"])
}

func (c *current) onTableLineHeader1(cells interface{}) (interface{}, error) {
	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLineHeader1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLineHeader1(stack["cells"])
}

func (c *current) onTableLine1(cells interface{}) (interface{}, error) {
	return types.NewTableLine(cells.([]interface{}))
}

func (p *parser) callonTableLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableLine1(stack["cells"])
}

func (c *current) onTableCell1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements)
}

func (p *parser) callonTableCell1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTableCell1(stack["elements"])
}

func (c *current) onCommentBlock1(content interface{}) (interface{}, error) {
	return types.NewDelimitedBlock(types.Comment, content.([]interface{}), nil)
}

func (p *parser) callonCommentBlock1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlock1(stack["content"])
}

func (c *current) onCommentBlockVerbatimContent2(content interface{}) (interface{}, error) {
	// at this stage, content is a mix of FileInclusions and lines of text (i.e., StringElement)
	return content, nil
}

func (p *parser) callonCommentBlockVerbatimContent2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommentBlockVerbatimContent2(stack["content"])
}

func (c *current) onSingleLineComment1(content interface{}) (interface{}, error) {
	return types.NewSingleLineComment(content.(string))
}

func (p *parser) callonSingleLineComment1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineComment1(stack["content"])
}

func (c *current) onSingleLineCommentContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSingleLineCommentContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSingleLineCommentContent1()
}

func (c *current) onParagraphWithHeadingSpaces1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithSpacesOnFirstLine, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithHeadingSpaces1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpaces1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithHeadingSpacesLines4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines4()
}

func (c *current) onParagraphWithHeadingSpacesLines18() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithHeadingSpacesLines18() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines18()
}

func (c *current) onParagraphWithHeadingSpacesLines13(otherLine interface{}) (interface{}, error) {
	return otherLine, nil // do not include the trailing 'EOL'

}

func (p *parser) callonParagraphWithHeadingSpacesLines13() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines13(stack["otherLine"])
}

func (c *current) onParagraphWithHeadingSpacesLines1(firstLine, otherLines interface{}) (interface{}, error) {

	return append([]interface{}{firstLine}, otherLines.([]interface{})...), nil
}

func (p *parser) callonParagraphWithHeadingSpacesLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithHeadingSpacesLines1(stack["firstLine"], stack["otherLines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiter1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithDelimiter, lines.([]interface{}), attributes)
}

func (p *parser) callonParagraphWithLiteralBlockDelimiter1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiter1(stack["attributes"], stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLines1(lines interface{}) (interface{}, error) {
	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	return string(c.text), nil

}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine4() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine4()
}

func (c *current) onParagraphWithLiteralBlockDelimiterLine1(line interface{}) (interface{}, error) {

	return line, nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralBlockDelimiterLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralBlockDelimiterLine1(stack["line"])
}

func (c *current) onParagraphWithLiteralAttribute6(attributes interface{}) (bool, error) {
	if attrs, ok := attributes.(types.ElementAttributes); ok {
		kind, ok := attrs[types.AttrKind]
		return ok && kind == types.Literal, nil
	}
	return false, nil

}

func (p *parser) callonParagraphWithLiteralAttribute6() (bool, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute6(stack["attributes"])
}

func (c *current) onParagraphWithLiteralAttribute1(attributes, lines interface{}) (interface{}, error) {
	return types.NewLiteralBlock(types.LiteralBlockWithAttribute, lines.([]interface{}), attributes)

}

func (p *parser) callonParagraphWithLiteralAttribute1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttribute1(stack["attributes"], stack["lines"])
}

func (c *current) onLiteralKind1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonLiteralKind1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralKind1()
}

func (c *current) onParagraphWithLiteralAttributeLines1(lines interface{}) (interface{}, error) {

	return lines.([]interface{}), nil
}

func (p *parser) callonParagraphWithLiteralAttributeLines1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLines1(stack["lines"])
}

func (c *current) onParagraphWithLiteralAttributeLine6() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonParagraphWithLiteralAttributeLine6() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLine6()
}

func (c *current) onParagraphWithLiteralAttributeLine1(content interface{}) (interface{}, error) {
	return content.(string), nil // do not include the trailing 'EOL'
}

func (p *parser) callonParagraphWithLiteralAttributeLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParagraphWithLiteralAttributeLine1(stack["content"])
}

func (c *current) onIndexTerm1(term interface{}) (interface{}, error) {
	return types.NewIndexTerm(term.([]interface{}))
}

func (p *parser) callonIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTerm1(stack["term"])
}

func (c *current) onIndexTermContent8() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonIndexTermContent8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent8()
}

func (c *current) onIndexTermContent1(elements interface{}) (interface{}, error) {
	return types.NewInlineElements(elements.([]interface{}))
}

func (p *parser) callonIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexTermContent1(stack["elements"])
}

func (c *current) onConcealedIndexTerm8(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm8() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm8(stack["content"])
}

func (c *current) onConcealedIndexTerm19(content interface{}) (interface{}, error) {
	return content, nil
}

func (p *parser) callonConcealedIndexTerm19() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm19(stack["content"])
}

func (c *current) onConcealedIndexTerm1(term1, term2, term3 interface{}) (interface{}, error) {
	return types.NewConcealedIndexTerm(term1, term2, term3)

}

func (p *parser) callonConcealedIndexTerm1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTerm1(stack["term1"], stack["term2"], stack["term3"])
}

func (c *current) onConcealedIndexTermContent1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonConcealedIndexTermContent1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConcealedIndexTermContent1()
}

func (c *current) onBlankLine1() (interface{}, error) {
	return types.NewBlankLine()
}

func (p *parser) callonBlankLine1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlankLine1()
}

func (c *current) onAlphanums1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonAlphanums1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAlphanums1()
}

func (c *current) onWord2() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord2()
}

func (c *current) onWord10() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonWord10() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWord10()
}

func (c *current) onInlineWord2() (interface{}, error) {

	return types.NewStringElement(string(c.text))

}

func (p *parser) callonInlineWord2() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInlineWord2()
}

func (c *current) onAnyChar1() (interface{}, error) {

	return types.NewStringElement(string(c.text))
}

func (p *parser) callonAnyChar1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnyChar1()
}

func (c *current) onFileLocation1(path interface{}) (interface{}, error) {
	return types.NewLocation("", path.([]interface{}))
}

func (p *parser) callonFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFileLocation1(stack["path"])
}

func (c *current) onResolvedFileLocation1(path interface{}) (interface{}, error) {
	return types.NewLocation("", path.([]interface{}))
}

func (p *parser) callonResolvedFileLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedFileLocation1(stack["path"])
}

func (c *current) onLocation1(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocation1(stack["scheme"], stack["path"])
}

func (c *current) onLocationWithScheme1(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonLocationWithScheme1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLocationWithScheme1(stack["scheme"], stack["path"])
}

func (c *current) onResolvedLocation1(scheme, path interface{}) (interface{}, error) {
	return types.NewLocation(scheme, path.([]interface{}))
}

func (p *parser) callonResolvedLocation1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onResolvedLocation1(stack["scheme"], stack["path"])
}

func (c *current) onURL1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonURL1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onURL1()
}

func (c *current) onID1() (interface{}, error) {
	// previously: (Alphanums / (!Newline !Space !"[" !"]" !"<<" !">>" !","  .))+
	return string(c.text), nil
}

func (p *parser) callonID1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onID1()
}

func (c *current) onDIGIT1() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonDIGIT1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDIGIT1()
}

func (c *current) onNUMBER1() (interface{}, error) {
	return strconv.Atoi(string(c.text))
}

func (p *parser) callonNUMBER1() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNUMBER1()
}

func (c *current) onSpace3() (interface{}, error) {
	return string(c.text), nil
}

func (p *parser) callonSpace3() (interface{}, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSpace3()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value interface{}) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i interface{}, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (interface{}, error) {
	b, err := ioutil.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (interface{}, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]interface{}

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        interface{}
}

type choiceExpr struct {
	pos          position
	alternatives []interface{}
}

type actionExpr struct {
	pos  position
	expr interface{}
	run  func(*parser) (interface{}, error)
}

type recoveryExpr struct {
	pos          position
	expr         interface{}
	recoverExpr  interface{}
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []interface{}
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  interface{}
}

type expr struct {
	pos  position
	expr interface{}
}

type andExpr expr
type notExpr expr
type zeroOrOneExpr expr
type zeroOrMoreExpr expr
type oneOrMoreExpr expr

type ruleRefExpr struct {
	pos  position
	name string
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   interface{}
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]interface{}
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]interface{}
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]interface{})
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr interface{}) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]interface{}, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val interface{}, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRule(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRule(rule *rule) (interface{}, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExpr(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExpr(expr interface{}) (interface{}, bool) {

	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val interface{}
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (interface{}, bool) {
	start := p.pt
	val, ok := p.parseExpr(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}

		val = actVal
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (interface{}, bool) {

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	_, ok := p.parseExpr(and.expr)
	p.popV()
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (interface{}, bool) {
	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (interface{}, bool) {
	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (interface{}, bool) {
	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		p.pushV()
		val, ok := p.parseExpr(alt)
		p.popV()
		if ok {
			return val, ok
		}
	}
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (interface{}, bool) {
	p.pushV()
	val, ok := p.parseExpr(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (interface{}, bool) {
	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (interface{}, bool) {
	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (interface{}, bool) {
	pt := p.pt
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExpr(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (interface{}, bool) {

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExpr(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (interface{}, bool) {
	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRule(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (interface{}, bool) {
	vals := make([]interface{}, 0, len(seq.exprs))

	pt := p.pt
	for _, expr := range seq.exprs {
		val, ok := p.parseExpr(expr)
		if !ok {
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (interface{}, bool) {

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExpr(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (interface{}, bool) {
	var vals []interface{}

	for {
		p.pushV()
		val, ok := p.parseExpr(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (interface{}, bool) {
	p.pushV()
	val, _ := p.parseExpr(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}

func rangeTable(class string) *unicode.RangeTable {
	if rt, ok := unicode.Categories[class]; ok {
		return rt
	}
	if rt, ok := unicode.Properties[class]; ok {
		return rt
	}
	if rt, ok := unicode.Scripts[class]; ok {
		return rt
	}

	// cannot happen
	panic(fmt.Sprintf("invalid Unicode class: %s", class))
}
